[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    #create a dictionary to store the element-occurence\n    element_count_dict = {}\n    \n    #loop through the first list\n    for element in test_tup1:\n        \n        #if the element is not in dictionary\n        if element not in element_count_dict:\n            \n            #then add it to the dictionary\n            element_count_dict[element] = 1\n            \n        else:\n            \n            #otherwise increment the count\n            element_count_dict[element] += 1\n            \n    #loop through the second list\n    for element in test_tup2:\n        \n        #if the element is not in dictionary\n        if element not in element_count_dict:\n            \n            #then add it to the dictionary\n            element_count_dict[element] = 1\n            \n        else:\n            \n            #otherwise increment the count\n            element_count_dict[element] += 1\n            \n    #return the dictionary with shared elements\n    return element_count_dict\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_el = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_el.append(test_tup1[i])\n    return shared_el\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    a1, b1 = test_tup1\n    a2, b2 = test_tup2\n    set_a = set(a1)\n    set_b = set(b1)\n    set_a.intersection_update(set_b)\n    print(set_a)\n    \n    "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_1 = list(test_tup1)\n    list_2 = list(test_tup2)\n    shared_elements = []\n    for element in list_1:\n        if element in list_2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result_list = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                result_list.append(test_tup1[i])\n    return result_list\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    \n    if (len(test_tup1)!= len(test_tup2)):\n        print('ERROR: Tuple lengths are not equal.\\n')\n        return False\n    elif (len(test_tup1) == 0 and len(test_tup2) == 0):\n        return True\n    \n    for e1 in test_tup1:\n        if e1 in test_tup2:\n            test_tup2.remove(e1)\n    \n    if (len(test_tup2) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    shared_elements = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    intersection = set1.intersection(set2)\n    return intersection\n    \nprint(similar_elements((\"a\", \"b\"), (\"a\", \"a\")))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            if item1 == item2:\n                shared_elements.append(item1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    test_set3 = test_set1 & test_set2\n    test_set4 = test_set3.union(test_set2)\n    return (list(test_set4))\n    \nprint(similar_elements(['a','b','c','d'], ['e','f','g','h'])) # ['a', 'e']\nprint(similar_elements(['a','b','c','d'], ['a','e','d','f'])) # ['d', 'e']\nprint(similar_elements(['a','b','c','d'], ['a','b'])) # ['b']\nprint(similar_elements(['a','b','c','d'], [])) # []\nprint(similar_elements(['a','b','c','d'], ['a','b','c','d'])) # ['b', 'c']\nprint(similar_elements([], ['a','b','c','d'])) # []\nprint(similar_elements([], [])) # []\nprint(similar_elements([1, 2, 3], [2, 3, 4])) # [1, 2, 3]\nprint(similar_elements([1, 2, 3], [2, 3, 4, 5])) # []\nprint(similar_elements([1, 2, 3], [1, 2, 3])) # [1, 2, 3]\nprint(similar_elements([1, 2, 3, 4], [1, 2, 3])) # [1, 2, 3]\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3])) # [1, 2, 3]\nprint(similar_elements([1, 2, 3, 4], [1, 2, 3, 4])) # [1, 2, 3, 4]\nprint(similar_elements([1, 2, 3, 4], [1, 2, 3, 4, 5])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3])) # [1, 2, 3]\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4])) # [1, 2, 3, 4]\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [])) # []\nprint(similar_elements([], [])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 6])) # [1, 2, 3, 4]\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])) # []\nprint(similar_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2 or n==3:\n        return False\n    if n==5 or n==7 or n==11 or n==13 or n==17 or n==19 or n==23 or n==29 or n==31 or n==37 or n==41 or n==43 or n==47 or n==53 or n==59 or n==61 or n==67 or n==71 or n==73 or n==79 or n==83 or n==89 or n==97:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n%i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef get_max_prime_factor(n):\n    '''\n    Write a python function to get the largest prime factor of a number.\n    '''\n    max_prime = 1\n    for i in range(2,math.ceil(math.sqrt(n))):\n        if n%i == 0:\n            max_prime = i\n            break\n    if max_prime == 1:\n        return n\n    return max_prime\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3 or n == 5:\n        return True\n    elif n > 2 and n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    else:\n        for i in range(7, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n)+1)):\n        if (n%i)==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    else:\n        for i in range(2, math.ceil(math.sqrt(n))):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    for i in range(2,n):\n        if (n % i) == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if (n % i) == 0:\n            return False\n    return True\ndef is_prime_using_factorial(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_using_list(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    prime = []\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_using_simple_method(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_using_simple_method2(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_using_simple_method3(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heapq.heapify(nums)\n    for _ in range(n):\n        nums.append(heapq.heappop(nums))\n    return nums[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return nums\n    hq.heapify(nums)\n    nums = hq.nlargest(n,nums)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = []\n    for i in range(n):\n        largest.append(nums[0])\n        hq.heapify(largest)\n        nums.pop(0)\n    print(largest)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hp = nums.copy()\n    heapq.heapify(hp)\n    \n    for i in range(n-1):\n        heapq.heappushpop(hp,nums[-i-1])\n    return hp\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = nums + nums\n    # hq.heapify(nums)\n    hq.heapify(nums)\n    return list(map(int,nums[n:]))\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<=n:\n        return nums\n    h=[]\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>h[0]:\n            hq.heappush(h,-1*nums[i])\n            hq.heapify(h)\n    return -1*h\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    while len(h)>1:\n        hq.heappush(h,hq.heappop(h)+hq.heappop(h))\n    return hq.heappop(h)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1):\n        hq.heappop(nums)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return_list = []\n    nums = list(nums)\n    for i in range(n):\n        hq.heappush(nums, -hq.heappop(nums))\n    return nums\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==1:\n        return True\n    if x%2==0:\n        return False\n    return is_Power_Of_Two(x/2)\n    \n    \ndef is_Power_Of_Two_rec (x, n):\n    if x==1:\n        return True\n    if x%2==0:\n        return False\n    if x==0:\n        return False\n    return is_Power_Of_Two_rec(x//2, n)\n    \n    \ndef is_Power_Of_Two_memo (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    d={}\n    return is_Power_Of_Two_rec(x, x)\n    \n    \ndef is_Power_Of_Two_memo_2(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if x==1:\n        return True\n    if x%2==0:\n        return False\n    if x==0:\n        return False\n    return is_Power_Of_Two_memo(x/2)\n    \n    \n    "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1 or x == 0:\n        return False\n    if x == 2 or x == 3:\n        return True\n    while(x!= 0):\n        if x % 2!= 0:\n            return False\n        x = x >> 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x > 0 and (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    assert type(x) == int and x > 0, \"x must be a non-negative integer\"\n    \n    while x:\n        # If x is even, divide by two \n        x = x // 2\n    return x == 0\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # difference = abs(x ^ y)\n    # if difference == 1: \n    #     return True\n    # else:\n    #     return False\n    \n    \n    if x == 0: return False\n    while x % 2 == 0: \n        x //= 2\n    return x == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = abs(x)\n    if x == 0:\n        return False\n    while x > 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & 1) == 1:\n        return False\n    else:\n        x = x >> 1\n        return True\n        "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    text = text.split()\n    for word in text:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    s = re.findall(r'\\w{4,}', text)\n    return s\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('[a-zA-Z]{4,}', text)\n    print(result)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list = []\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            list.append(text[i])\n    return list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_with_words = []\n    for line in text.split('\\n'):\n        for word in re.findall(r'\\w{4,}', line):\n            list_with_words.append(word)\n    return list_with_words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'[A-Za-z]+')\n    if len(text) > 0:\n        words = regex.findall(text)\n        for word in words:\n            if len(word) >= 4:\n                return word\n    return 'No result'\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]{4,}\\b')\n    match_list = pattern.findall(text)\n    return match_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b([a-zA-Z0-9]{4,})', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}',text)\n    return result\ndef test_find_char_long():\n    assert find_char_long('the quick brown fox jumps over the lazy dog.') == ['jumps', 'fox', 'dog']\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at most 5 characters long in a string.\n    '''\n    result = re.findall(r'\\w{,5}',text)\n    return result\ndef test_find_char_short():\n    assert find_char_short('the quick brown fox jumps over the lazy dog.') == ['quick','brown','fox']\ndef find_char_single(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{3,5}',text)\n    return result\ndef test_find_char_single():\n    assert find_char_single('the quick brown fox jumps over the lazy dog.') == ['quick','brown','fox']\ndef find_char_double(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{,5}',text)\n    return result\ndef test_find_char_double():\n    assert find_char_double('the quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_long_upper(text):\n    '''\n    Write a function to find all words which are at least 4 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{,5}',text)\n    return result\ndef test_find_char_long_upper():\n    assert find_char_long_upper('The quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_short_upper(text):\n    '''\n    Write a function to find all words which are at most 5 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{,5}',text)\n    return result\ndef test_find_char_short_upper():\n    assert find_char_short_upper('The quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_single_upper(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{3,5}',text)\n    return result\ndef test_find_char_single_upper():\n    assert find_char_single_upper('The quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_double_upper(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{3,5}',text)\n    return result\ndef test_find_char_double_upper():\n    assert find_char_double_upper('The quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_long_lower(text):\n    '''\n    Write a function to find all words which are at least 4 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{,5}',text)\n    return result\ndef test_find_char_long_lower():\n    assert find_char_long_lower('The quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_short_lower(text):\n    '''\n    Write a function to find all words which are at most 5 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{,5}',text)\n    return result\ndef test_find_char_short_lower():\n    assert find_char_short_lower('The quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_single_lower(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{3,5}',text)\n    return result\ndef test_find_char_single_lower():\n    assert find_char_single_lower('The quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_double_lower(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\w{3,5}',text)\n    return result\ndef test_find_char_double_lower():\n    assert find_char_double_lower('The quick brown fox jumps over the lazy dog.') == ['quick', 'brown', 'fox']\ndef find_char_num(text):\n    '''\n    Write a function to find all words which are at least 4 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\d{4,}',text)\n    return result\ndef test_find_char_num():\n    assert find_char_num('the quick brown fox jumps over the lazy dog.') == ['jumps', 'fox', 'dog']\ndef find_char_upper_num(text):\n    '''\n    Write a function to find all words which are at least 4 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\d{4,}',text)\n    return result\ndef test_find_char_upper_num():\n    assert find_char_upper_num('the quick brown fox jumps over the lazy dog.') == ['jumps', 'fox', 'dog']\ndef find_char_lower_num(text):\n    '''\n    Write a function to find all words which are at least 4 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\d{4,}',text)\n    return result\ndef test_find_char_lower_num():\n    assert find_char_lower_num('the quick brown fox jumps over the lazy dog.') == ['jumps', 'fox', 'dog']\ndef find_char_all_num(text):\n    '''\n    Write a function to find all words which are at least 4 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\d{4,}',text)\n    return result\ndef test_find_char_all_num():\n    assert find_char_all_num('the quick brown fox jumps over the lazy dog.') == ['jumps', 'fox', 'dog']\ndef find_char_double_num(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\d{,5}',text)\n    return result\ndef test_find_char_double_num():\n    assert find_char_double_num('the quick brown fox jumps over the lazy dog.') == ['jumps', 'fox', 'dog']\ndef find_char_double_upper_num(text):\n    '''\n    Write a function to find all words which are at least 3 characters long, but no more than 5 characters long, in a string.\n    '''\n    result = re.findall(r'\\d{,5}',text)\n    return result\ndef test_find_char_double_upper_num():\n    assert find_char_double"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for i in nums:\n        square_list.append(i**2)\n    return square_list\nprint(square_nums([1, 2, 3, 4]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(0, len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return map(lambda x: x**2, nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return[num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]*nums[i]\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    squares = []\n    \n    for num in nums:\n        squares.append(num**2)\n    \n    return squares\n    \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    if len(str) == 1:\n        return 0\n    else:\n        for i in range(len(str)):\n            left_char = str[i]\n            for j in range(len(str)):\n                right_char = str[len(str)-j-1]\n                if left_char == right_char:\n                    continue\n                else:\n                    if left_char < right_char:\n                        rotations += 1\n                    else:\n                        rotations -= 1\n            if rotations < 0:\n                return rotations\n        return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # number of rotations\n    rotations = 0\n    # length of string\n    length = len(str)\n    # at first position\n    str_at_first = str[0]\n    # create a list with all the letters\n    letters = list(str)\n    # sort the letters\n    letters.sort()\n    # at first position\n    str_at_first_pos = letters.index(str_at_first)\n    # check if we can do this\n    if(str_at_first_pos!= 0):\n        # the first letter is at the first position\n        rotations += 1\n    # while there are letters to rotate\n    while length > 0:\n        # check which letter is at the first position\n        if(letters.index(str[0]) == 0):\n            # if not at the end\n            if(length > 1):\n                # we need to rotate\n                rotations += 1\n                # change first position to the last\n                letters[0],letters[length-1] = letters[length-1],letters[0]\n                # rotate the rest of the letters\n                for i in range(length-1):\n                    letters[i],letters[i+1] = letters[i+1],letters[i]\n                # increment length\n                length -= 1\n            else:\n                # we need to rotate\n                rotations += 1\n                # change first position to the last\n                letters[0],letters[0] = letters[0],letters[0]\n                # rotate the rest of the letters\n                for i in range(length-1):\n                    letters[i],letters[i+1] = letters[i+1],letters[i]\n                # increment length\n                length -= 1\n        # otherwise we need to rotate\n        else:\n            # the first letter is at the last position\n            if(letters.index(str[0]) == length-1):\n                # if not at the end\n                if(length > 1):\n                    # we need to rotate\n                    rotations += 1\n                    # change first position to the first\n                    letters[0],letters[0] = letters[0],letters[0]\n                    # rotate the rest of the letters\n                    for i in range(length-1):\n                        letters[i],letters[i+1] = letters[i+1],letters[i]\n                    # increment length\n                    length -= 1\n                else:\n                    # we need to rotate\n                    rotations += 1\n                    # change first position to the first\n                    letters[0],letters[0] = letters[0],letters[0]\n                    # rotate the rest of the letters\n                    for i in range(length-1):\n                        letters[i],letters[i+1] = letters[i+1],letters[i]\n                    # increment length\n                    length -= 1\n            # otherwise we need to rotate\n            else:\n                # we need to rotate\n                rotations += 1\n                # change first position to the first\n                letters[0],letters[letters.index(str[0])] = letters[letters.index(str[0])],letters[0]\n                # rotate the rest of the letters\n                for i in range(length-1):\n                    letters[i],letters[i+1] = letters[i+1],letters[i]\n                # increment length\n                length -= 1\n    # return\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 1:\n        return 0\n    \n    str = list(str)\n    n = len(str)\n    \n    # if str is already in alphabetical order, then just return 1 rotation\n    if str == sorted(str):\n        return 1\n    \n    count = 0\n    \n    # First try with the first character\n    count += find_Rotations(str[:n//2])\n    \n    # Try with the last character\n    count += find_Rotations(str[n//2:])\n    \n    return min(count,n)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # s = str\n    # s = sorted(s)\n    # m = len(s)\n    # print(s)\n    # l = []\n    # for i in range(m):\n    #     for j in range(m):\n    #         s1 = s[i] + s[j]\n    #         s2 = s[j] + s[i]\n    #         if s1 == s or s2 == s:\n    #             l.append(s1)\n    #             l.append(s2)\n    #             print(l)\n    #     l = []\n    # print(s)\n    # print(l)\n    # print(len(l))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    count = 0\n    while len(str) > 0:\n        if len(str)!= len(set(str)):\n            return -1\n        else:\n            count += 1\n            str = list(str)\n            str.sort()\n            str = ''.join(str)\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # if we didn't find any rotations then return 0\n    if str == '':\n        return 0\n    else:\n        # for each char\n        for i in range(len(str)):\n            # initialize a new variable to hold the index of the char\n            index = i\n            # while the index is less than the length of the string\n            while index < len(str):\n                # increment the index and if the character is not the same\n                # as the original string, then break the while loop\n                if str[index]!= str[i]:\n                    index += 1\n                    break\n                # otherwise, increment the index\n                else:\n                    index += 1\n            # if the index is equal to the length of the string, then we found a match\n            if index == len(str):\n                return len(str)\n        # if no matches were found, return -1 to indicate that no rotation is possible\n        return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == \"\": \n        return 0\n    l = len(str) \n    dp = [[0 for i in range(l)] for j in range(l)] \n    # dp is used to store the min number of rotations needed \n    # for each substring. \n    # dp[i][j] represents the minimum rotations needed \n    # for the substring str[i..j] \n    for i in range(l): \n        dp[i][i] = 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #create a dictonary of occurances\n    occurrence_count = {}\n    for i in range(len(str)):\n        if str[i] in occurrence_count:\n            occurrence_count[str[i]] += 1\n        else:\n            occurrence_count[str[i]] = 1\n    #get the minimum rotation required \n    count_value = 0\n    for i in occurrence_count:\n        count_value = min(count_value,occurrence_count[i])\n    return count_value\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    # if string is of length 1\n    if(n==1):\n        return count\n    # if string is empty\n    if(n==0):\n        return 0\n    # traverse the string to find a repeated element\n    for i in range(n-1):\n        if(str[i]==str[i+1]):\n            count = count + 1\n        else:\n            break\n    return n - count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return 0\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(s[0], '').replace(s[-1], '')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    start=s.find(ch)\n    end=s.rfind(ch)\n    new=s[:start]+s[end+1:]\n    return new\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return \"\".join(s)\n    \nprint(remove_Occ(\"I love tea\",\"o\"))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    \ndef find_Occ(s,ch):\n    '''\n    Write a python function to find the position of the first and last occurrence of a given character from the string.\n    '''\n    return s.find(ch)+1,s.rfind(ch)+1\n    \ndef check_Palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    i=0\n    while(i<len(s)):\n        if s[i]!=s[len(s)-1-i]:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    while(s.find(ch)>=0):\n        s=s[:s.find(ch)]+s[s.find(ch)+1:]\n    while(s.find(ch)>=0):\n        s=s[:s.find(ch)]+s[s.find(ch)+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s == \"\":\n        return s\n    i = 0\n    s_len = len(s)\n    while i<s_len:\n        if s[i]!= ch:\n            i += 1\n        else:\n            s = s[:i] + s[i+1:]\n            s_len = len(s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = s.find(ch) \n    s = s[0:l] + s[l+1:] \n    return s\n    \ndef remove_Occ_rev(s,ch): \n    '''\n    Write a python function to remove all occurrences of a character from a string.\n    '''\n    for i in range(len(s)): \n        if s[i] == ch: \n            s = s[0:i] + s[i+1:] \n    return s\n    \ndef remove_Occ_mul(s,ch): \n    '''\n    Write a python function to remove all occurrences of a character from a string.\n    '''\n    while(ch in s): \n        s = s.replace(ch, \"\")\n    return s \n    \ndef count_occ_char(s,ch): \n    '''\n    Write a python function to count the number of occurrences of a given character in the string.\n    '''\n    c = 0\n    for i in range(len(s)): \n        if s[i] == ch: \n            c += 1\n    return c \n    \ndef count_occ_rev(s,ch): \n    '''\n    Write a python function to count the number of occurrences of a given character in the string in reverse.\n    '''\n    for i in range(len(s)-1,-1,-1): \n        if s[i] == ch: \n            c += 1\n    return c \n    \ndef count_occ_mul(s,ch): \n    '''\n    Write a python function to count the number of occurrences of a given character in the string multiply.\n    '''\n    c = 0\n    for i in range(len(s)): \n        if s[i] == ch: \n            c += 1\n    return c \n    \ndef split_str_mul(s,ch): \n    '''\n    Write a python function to split the string into substrings with given character.\n    '''\n    l = []\n    for i in range(len(s)): \n        if s[i] == ch: \n            l.append(s[0:i]) \n            s = s[i+1:] \n    return l \n    \ndef split_str_rev(s,ch): \n    '''\n    Write a python function to split the string into substrings with given character in reverse.\n    '''\n    l = []\n    for i in range(len(s)): \n        if s[i] == ch: \n            l.append(s[i+1:len(s)]) \n            s = s[0:i] \n    return l \n    \ndef split_str_occ(s,ch): \n    '''\n    Write a python function to split the string into substrings with given character.\n    '''\n    l = []\n    for i in range(len(s)): \n        if s[i] == ch: \n            l.append(s[0:i+1]) \n    return l \n    \ndef split_str_rev_occ(s,ch): \n    '''\n    Write a python function to split the string into substrings with given character in reverse.\n    '''\n    l = []\n    for i in range(len(s)): \n        if s[i] == ch: \n            l.append(s[i+1:len(s)]) \n            s = s[0:i] \n    return l \n    \ndef get_string_by_index(s,index,n): \n    '''\n    Write a python function to return the substring of a string starting from the given index upto n index.\n    '''\n    return s[index:index+n] \n    \ndef get_string_by_index_rev(s,index,n): \n    '''\n    Write a python function to return the substring of a string starting from the given index upto n index in reverse.\n    '''\n    return s[index+1:index+n+1] \n    \ndef get_string_by_index_mul(s,index,n): \n    '''\n    Write a python function to return the substring of a string starting from the given index upto n index multiply.\n    '''\n    return s[index:index+n] \n    \ndef get_string_by_index_occ(s,index,n): \n    '''\n    Write a python function to return the substring of a string starting from the given index upto n index in reverse.\n    '''\n    return s[index+1:index+n+1] \n    \ndef get_string_by_index_rev_occ(s,index,n): \n    '''\n    Write a python function to return the substring of a string starting from the given index upto n index in reverse.\n    '''\n    return s[index:index+n] \n    \ndef sort_list_rev(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    return l.sort(reverse=True)\n    \ndef sort_list_rev_mul(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    return l.sort(key=len,reverse=True)\n    \ndef sort_list_rev_occ(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    return l.sort(key=str.lower,reverse=True)\n    \ndef sort_list_mul(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    return l.sort(key=len,reverse=True)\n    \ndef sort_list_occ(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    return l.sort(key=str.lower,reverse=True)\n    \ndef bubble_sort_mul(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    for i in range(len(l)-1): \n        for j in range(len(l)-i-1): \n            if l[j] > l[j+1]: \n                l[j], l[j+1] = l[j+1], l[j]\n    return l\n    \ndef bubble_sort_occ(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    for i in range(len(l)-1): \n        for j in range(len(l)-i-1): \n            if l[j] > l[j+1]: \n                l[j], l[j+1] = l[j+1], l[j]\n    return l\n    \ndef selection_sort_mul(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    for i in range(len(l)): \n        min_idx = i \n        for j in range(i+1,len(l)): \n            if l[j] < l[min_idx]: \n                min_idx = j \n        l[i], l[min_idx] = l[min_idx], l[i]\n    return l\n    \ndef selection_sort_occ(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    for i in range(len(l)): \n        min_idx = i \n        for j in range(i+1,len(l)): \n            if l[j] < l[min_idx]: \n                min_idx = j \n        l[i], l[min_idx] = l[min_idx], l[i]\n    return l\n    \ndef insert_sort_mul(l): \n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    for i in range(1,len(l)): \n        while i>0 and l[i] < l[i-1]: \n            l[i], l[i-1] = l[i-1], l[i] \n            i = i-1\n    return "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string=s.strip()\n    length=len(s)\n    newstring=string[:length-1]+string[1:]\n    if (s[0]==ch):\n        newstring=newstring[1:]\n    if(s[-1]==ch):\n        newstring=newstring[:-1]\n    return newstring\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(s[0:1],''),s.replace(s[-1:],'') \n    #return s.replace(ch,\"\")\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        j = 0\n        while j < cols:\n            if i == 0 or M[i][j] <= M[i-1][j]:\n                break\n            else:\n                M[i], M[i-1] = M[i-1], M[i]\n                j += 1\n        if i == rows-1:\n            break\n    return M\n    #rows = len(M)\n    #cols = len(M[0])\n    #for i in range(rows):\n    #    j = 0\n    #    while j < cols:\n    #        if i == 0 or M[i][j] <= M[i-1][j]:\n    #            break\n    #        else:\n    #            M[i], M[i-1] = M[i-1], M[i]\n    #            j += 1\n    #    if i == rows-1:\n    #        break\n    #return M\n    \ndef sort_matrix_alt(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        j = 0\n        while j < cols:\n            if i == 0 or M[i][j] <= M[i-1][j]:\n                break\n            else:\n                M[i], M[i-1] = M[i-1], M[i]\n                j += 1\n        if i == rows-1:\n            break\n    return M\n    #rows = len(M)\n    #cols = len(M[0])\n    #for i in range(rows):\n    #    j = 0\n    #    while j < cols:\n    #        if i == 0 or M[i][j] <= M[i-1][j]:\n    #            break\n    #        else:\n    #            M[i], M[i-1] = M[i-1], M[i]\n    #            j += 1\n    #    if i == rows-1:\n    #        break\n    #return M\n    \ndef rotate_matrix(M):\n    '''\n    Write a function to rotate an image by 90 degrees (clockwise).\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    rotated = [[0]*rows for i in range(cols)]\n    for i in range(rows):\n        j = cols-1\n        while j > 0:\n            rotated[i][j] = M[i][j-1]\n            j -= 1\n        rotated[i][0] = 0\n    return rotated\n    #rows = len(M)\n    #cols = len(M[0])\n    #rotated = [[0]*cols for i in range(rows)]\n    #for i in range(rows):\n    #    j = 0\n    #    while j < cols:\n    #        rotated[i][j] = M[i][j]\n    #        j += 1\n    #    j -= 1\n    #    i += 1\n    #return rotated\n    \ndef sort_matrix_in_place(M, key=None):\n    '''\n    Write a function to sort a given matrix in-place using the provided key.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    i = 0\n    while i < rows:\n        j = cols-1\n        while j >= 0:\n            if M[i][j] < key:\n                M[i][j], M[i+1][j] = M[i+1][j], M[i][j]\n                i += 1\n            else:\n                j -= 1\n    return M\n    #rows = len(M)\n    #cols = len(M[0])\n    #i = 0\n    #while i < rows:\n    #    j = 0\n    #    while j < cols:\n    #        if M[i][j] < key:\n    #            M[i][j], M[i+1][j] = M[i+1][j], M[i][j]\n    #            i += 1\n    #        else:\n    #            j -= 1\n    #    i += 1\n    #return M\n    \ndef sort_matrix_in_place_alt(M):\n    '''\n    Write a function to sort a given matrix in-place using the provided key.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    i = 0\n    while i < rows:\n        j = cols-1\n        while j >= 0:\n            if M[i][j] < M[i][j-1]:\n                M[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n                i += 1\n            else:\n                j -= 1\n    return M\n    #rows = len(M)\n    #cols = len(M[0])\n    #i = 0\n    #while i < rows:\n    #    j = 0\n    #    while j < cols:\n    #        if M[i][j] < M[i][j-1]:\n    #            M[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n    #            i += 1\n    #        else:\n    #            j -= 1\n    #    i += 1\n    #return M\n    \ndef sort_matrix_in_place_alt_2(M):\n    '''\n    Write a function to sort a given matrix in-place using the provided key.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    i = 0\n    while i < rows:\n        j = 0\n        while j < cols:\n            if M[i][j] < M[i-1][j]:\n                M[i][j], M[i-1][j] = M[i-1][j], M[i][j]\n            j += 1\n        i += 1\n    return M\n    #rows = len(M)\n    #cols = len(M[0])\n    #i = 0\n    #while i < rows:\n    #    j = 0\n    #    while j < cols:\n    #        if M[i][j] < M[i-1][j]:\n    #            M[i][j], M[i-1][j] = M[i-1][j], M[i][j]\n    #        j += 1\n    #    i += 1\n    #return M\n    \ndef rotate_matrix_2(M):\n    '''\n    Write a function to rotate an image by 90 degrees (clockwise).\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    rotated = [[0]*rows for i in range(cols)]\n    for i in range(rows):\n        j = cols-1\n        while j > 0:\n            rotated[i][j] = M[i][j-1]\n            j -= 1\n        rotated[i][0] = 0\n    return rotated\n    #rows = len(M)\n    #cols = len(M[0])\n    #rotated = [[0]*rows for i in range(cols)]\n    #for i in range(rows):\n    #    j = 0\n    #    while j < cols:\n    #        rotated[i][j] = M[i][j]\n    #        j += 1\n    #    j -= 1\n    #    i += 1\n    #return rotated\n    \ndef sort_matrix_in_place_alt_3(M):\n    '''\n    Write a function to sort a given matrix in-place using the provided key.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    i = 0\n    while i < rows:\n        j = 0\n        while j < cols:\n            if M[i][j] < M[i][j+1]:\n                M[i][j], M[i][j+1] = "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) < 2:\n        return M\n    else:\n        return bubble_sort(M)\n        \ndef bubble_sort(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) < 2:\n        return M\n    else:\n        for j in range(len(M[0])-1):\n            for i in range(len(M)-1):\n                if M[i][j] > M[i+1][j]:\n                    M[i], M[i+1] = M[i+1], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        for j in range(N):\n            M[i][j] = sum(M[i])\n    return sorted(M, key=lambda row: row[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_max = len(M)\n    col_max = len(M[0])\n    #col_max = 0\n    #for i in range(len(M)):\n    #    col_max = max(col_max, len(M[i]))\n    col_max = max(col_max, max(len(row) for row in M))\n    matrix = []\n    for _ in range(row_max):\n        matrix.append([0]*col_max)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, cols = len(M), len(M[0])\n    m = [[M[i][j] for j in range(cols)] for i in range(rows)]\n    m.sort()\n    for i in range(rows):\n        for j in range(cols):\n            M[i][j] = m[i][j]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    sum_matrix = [[0] * cols for _ in range(rows)]\n    \n    for row in range(rows):\n        for col in range(cols):\n            sum_matrix[row][col] = sum(M[row][:col] + M[row][col + 1:])\n    \n    for r in range(rows):\n        for c in range(cols):\n            M[r][c] = sum_matrix[r][c]\n    \n    return M\n    \n    \ndef second_smallest(A, B):\n    '''\n    Write a function that returns the element in the given array with the smallest \n    value in the array. If there are multiple elements with the smallest value, \n    return one of the elements.\n    '''\n    if len(A) == 0:\n        return None\n    \n    smallest = A[0]\n    second_smallest = smallest\n    \n    for element in A[1:]:\n        if element < smallest:\n            second_smallest = smallest\n            smallest = element\n        elif element < second_smallest and element!= smallest:\n            second_smallest = element\n    \n    for element in B:\n        if element < smallest and element!= second_smallest:\n            second_smallest = element\n    \n    return second_smallest\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create list to hold sums\n    sum_list = []\n    # iterate over each row\n    for row in M:\n        # accumulate the sum\n        s = 0\n        for val in row:\n            s += val\n        # add the sum to the list\n        sum_list.append(s)\n    # sort the list\n    sum_list.sort()\n    # iterate over the list again\n    for i in range(len(M)):\n        # take the first number in the list\n        current = sum_list[i]\n        # iterate over each row\n        for j in range(len(M)):\n            # if the number in the row matches the current number in the list\n            if M[i][j] == current:\n                # update the row and column\n                M[i][j] = i + 1\n                break\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    for i in range(m):\n        for j in range(n):\n            M[i][j] = int(M[i][j])\n    M.sort(key=lambda x:sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    a = [list(map(sum, zip(*row))) for row in M]\n    a.sort()\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            M[i][j] = a[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (l*b*h)/3\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    A = l*b\n    V = 1/3*h*A\n    return V\n    \n    \ndef find_SurfaceArea(l,b,h):\n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    A = l*b\n    S = A*h/2\n    return S\n    \n    \ndef find_Perimeter(l,b,h):\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    p = 2*l+2*b+2*h\n    return p\n    \n    \ndef find_Area(l,b,h):\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    S = find_SurfaceArea(l,b,h)\n    A = l*b\n    A = A*S/2\n    return A\n    \n    \ndef find_Volume_given_Height(h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = 4\n    b = 4\n    \n    V = find_Volume(l,b,h)\n    return V\n    \n    \ndef find_Area_given_Height(h):\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    l = 4\n    b = 4\n    \n    S = find_SurfaceArea(l,b,h)\n    A = l*b\n    A = A*S/2\n    return A\n    \n    \ndef find_Perimeter_given_Height(h):\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    l = 4\n    b = 4\n    \n    p = 2*l+2*b+2*h\n    return p\n    \n    \ndef find_Volume_given_Base(b):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = 4\n    h = 4\n    \n    V = find_Volume(l,b,h)\n    return V\n    \n    \ndef find_SurfaceArea_given_Base(b):\n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    l = 4\n    h = 4\n    \n    S = find_SurfaceArea(l,b,h)\n    A = l*b\n    A = A*S/2\n    return A\n    \n    \ndef find_Area_given_Base(b):\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    l = 4\n    h = 4\n    \n    S = find_SurfaceArea(l,b,h)\n    A = l*b\n    A = A*S/2\n    return A\n    \n    \ndef find_Perimeter_given_Base(b):\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    l = 4\n    h = 4\n    \n    p = 2*l+2*b+2*h\n    return p\n    \n    \ndef find_Area_given_Height_and_Base(b,l):\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    h = 4\n    \n    S = find_SurfaceArea(l,b,h)\n    A = l*b\n    A = A*S/2\n    return A\n    \n    \ndef find_Perimeter_given_Height_and_Base(h,b,l):\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    S = find_SurfaceArea(l,b,h)\n    p = 2*l+2*b+2*h\n    return p\n    \n    \ndef find_Volume_given_Height_and_Base(h,b,l):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = find_Volume(l,b,h)\n    return V\n    \n    \ndef find_Perimeter_given_Height_and_Base(h,b,l):\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    S = find_SurfaceArea(l,b,h)\n    p = 2*l+2*b+2*h\n    return p\n    \n    \ndef find_Volume_given_Height_and_Height(h,l):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = find_Volume(l,l,h)\n    return V\n    \n    \ndef find_Perimeter_given_Height_and_Height(h,l):\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    S = find_SurfaceArea(l,l,h)\n    p = 2*l+2*l+2*h\n    return p\n    \n    \ndef find_SurfaceArea_given_Height_and_Height(h,l):\n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    S = find_SurfaceArea(l,l,h)\n    return S\n    \n    \ndef find_Volume_given_Height_and_Height(h,l):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = find_Volume(l,l,h)\n    return V\n    \n    \ndef find_Volume_given_Height_and_Width(h,w):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = find_Volume(h,w,h)\n    return V\n    \n    \ndef find_SurfaceArea_given_Height_and_Width(h,w):\n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    A = h*w\n    S = A*h/2\n    return S\n    \n    \ndef find_Perimeter_given_Height_and_Width(h,w):\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    p = 2*h+2*w+2*h\n    return p\n    \n    \ndef find_Area_given_Height_and_Width(h,w):\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    A = h*w\n    A = A*h/2\n    return A\n    \n    \ndef find_Volume_given_Height_and_Width(h,w):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = find_Volume(h,w,h)\n    return V\n    \n    \ndef find_Volume_given_Height_and_Length(h,l):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = find_Volume(h,l,h)\n    return V\n    \n    \ndef find_SurfaceArea_given_Height_and_Length(h,l):\n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    S = find_SurfaceArea(h,l,h)\n    return S\n    \n    \ndef find_Perimeter_given_Height_and_Length(h,l):\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    p = 2*l+2*h\n    return p\n    \n    \ndef find_Area_given_Height_and_Length(h,l):\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    A = l*h\n    A = A*h/2\n    return A\n    \n    \ndef find_Volume_given_Height_and_Length(h,l):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = find_Volume(h,l,h)\n    return V\n    \n    \ndef find_Volume_given"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    try :\n        if (l < 0 or h < 0 or b < 0 ) : \n            raise ValueError \n        else : \n            #Initializing the triangle parameters\n            l = float(l)\n            b = float(b)\n            h = float(h)\n            print(\"Calculating volume of a triangular prism...\")\n            print(\"Length of the triangle: \", l)\n            print(\"Height of the triangle: \", h)\n            print(\"Base of the triangle: \", b)\n            #Calculating volume\n            v = l * b * h\n            print(\"Volume of the triangle is: \", v)\n            #Returning the result\n            return v\n    except : \n        print(\"Invalid value. Enter a valid positive integer value.\")\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"Area = %.2f\" % (l*b))\n    print(\"Volume = %.2f\" % (l*b*h))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l * h\n    b = l * h\n    c = h * b\n    volume = (a + b + c) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    Volume = (l*b*h)\n    print(Volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*h)/3\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    vol=1/6*(l*b)*h\n    return vol"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def find_volume(l,b,h) : \n        '''\n        Write a python function to find the volume of a triangular prism.\n        '''\n        volume = l * b * h / 3\n        return volume\n    #start writing your code here\n    # Return volume of the prism\n    #volume = find_volume(l, b, h)\n    return find_volume(l,b,h)\n    \n    \n    # Q2.    \n    # Write a python function to find the volume of a tetrahedron.\n    # Input: length, breadth, height of a tetrahedron.\n    # Output: Volume of the tetrahedron.\n    \n    def find_volume(l,b,h) : \n        '''\n        Write a python function to find the volume of a tetrahedron.\n        '''\n        volume = l * b * h\n        return volume\n    #start writing your code here\n    # Return volume of the tetrahedron\n    #volume = find_volume(l, b, h)\n    return find_volume(l,b,h)\n    \n    \n    \n    \n    \n    # Q3.    \n    # Write a python function to find the volume of a cube.\n    # Input: length of a cube.\n    # Output: Volume of the cube.\n    \n    def find_volume(l) : \n        '''\n        Write a python function to find the volume of a cube.\n        '''\n        volume = l**3\n        return volume\n    #start writing your code here\n    # Return volume of the cube\n    #volume = find_volume(l)\n    return find_volume(l)\n    \n    \n    \n    # Q4.    \n    # Write a python function to find the volume of a cylinder.\n    # Input: radius of a cylinder, height of the cylinder.\n    # Output: Volume of the cylinder.\n    \n    def find_volume(r,h) : \n        '''\n        Write a python function to find the volume of a cylinder.\n        '''\n        volume = 3.14 * r**2 * h\n        return volume\n    #start writing your code here\n    # Return volume of the cylinder\n    #volume = find_volume(r, h)\n    return find_volume(r,h)\n    \n    \n    \n    \n    \n    \n    # Q5.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    # Q6.    \n    # Write a python function to find the volume of a cylinder.\n    # Input: radius of a cylinder, height of the cylinder.\n    # Output: Volume of the cylinder.\n    \n    def find_volume(r,h) : \n        '''\n        Write a python function to find the volume of a cylinder.\n        '''\n        volume = 3.14 * r**2 * h\n        return volume\n    #start writing your code here\n    # Return volume of the cylinder\n    #volume = find_volume(r, h)\n    return find_volume(r,h)\n    \n    \n    \n    \n    \n    \n    # Q7.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    # Q8.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    # Q9.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    # Q10.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    # Q11.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    # Q12.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    \n    # Q13.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    # Q14.    \n    # Write a python function to find the volume of a sphere.\n    # Input: radius of a sphere.\n    # Output: Volume of the sphere.\n    \n    def find_volume(r) : \n        '''\n        Write a python function to find the volume of a sphere.\n        '''\n        volume = 4/3*3.14*r**3\n        return volume\n    #start writing your code here\n    # Return volume of the sphere\n    #volume = find_volume(r)\n    return find_volume(r)\n    \n    \n    \n    \n    \n    \n    # Q15.    \n    "
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match = re.findall('[a-z]+_[a-z]*', text)\n    return True if match else False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(\"[a-z]+_[a-z]*\", text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    test1 = 'a_b_c'\n    test2 = 'dd'\n    test3 = 'e_f_g_h'\n    test4 = 'j_k_l_m'\n    test5 = 'zz'\n    test6 = 'aa_bb_cc_dd_ee_ff_gg_hh'\n    test7 = 'abcd'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'([a-z])([A-Z])'\n    text = text.replace(' ', '')\n    if re.search(regex, text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # if re.search(r'[a-z]', text):\n    #     return False\n    # else:\n    #     return True\n    return re.search(r'[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.islower()\n    \ndef is_palindrome(text):\n    '''\n    Write a function that returns true if the input string contains a sequence of the same characters in reverse order.\n    '''\n    text = str(text)\n    if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+[_]+[a-z]+', text)) > 0\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('^[a-z]+_[a-z]+$',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # my solution\n    # pattern = re.compile(r'[a-z]+[_]+[a-z]+')\n    # return pattern.search(text)!= None\n    # second solution\n    return re.search(r'[a-z]+[_]+[a-z]+',text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return False\ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    return False\ndef text_lowercase_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_uppercase_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters, which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_special_characters(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of special characters (e.g., *-+#) and false otherwise.\n    '''\n    return False\ndef text_special_characters_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of special characters (e.g., *-+#), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_special_characters_special_characters(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of special characters, which include special characters (e.g., *-+#), and false otherwise.\n    '''\n    return False\ndef text_special_characters_special_characters_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of special characters, which include special characters (e.g., *-+#), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_number(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, and false otherwise.\n    '''\n    return False\ndef text_number_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_number_digits(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include digits (e.g., 123), and false otherwise.\n    '''\n    return False\ndef text_number_digits_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include digits (e.g., 123), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_number_digits_digits(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include digits (e.g., 123), and they also include digits (e.g., 321), and false otherwise.\n    '''\n    return False\ndef text_number_digits_digits_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include digits (e.g., 123), which also include digits (e.g., 321), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), and they also include numbers (e.g., 123, 456), and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which also include numbers (e.g., 123, 456), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers_digits(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which also include numbers (e.g., 123, 456), which also include digits (e.g., 123, 456), and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers_digits_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which also include numbers (e.g., 123, 456), which also include digits (e.g., 123, 456), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers_numbers_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers_numbers_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers_numbers_numbers_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which don't have whitespace characters at the beginning and end, and false otherwise.\n    '''\n    return False\ndef text_numbers_numbers_numbers_numbers_numbers_numbers_nospace(text):\n    '''\n    Write a function to that returns true if the input string contains numbers, separated by spaces, which include numbers (e.g., 123, 321), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), which also include numbers (e.g., 123, 456), whic"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a<=0:\n        return 0\n    else:\n        return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Type your solution here\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s = list(string)\n    for i in s:\n        if i in string1:\n            s.remove(i)\n    return s\nprint(str_to_list(input()))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return_str = \"\"\n    for c in string:\n        if c not in return_str:\n            return_str += c\n    return return_str\n    \ndef check_if_palindrome(string): \n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return_str = str_to_list(string)\n    return return_str == return_str[::-1]\n    \ndef check_palindrome(string): \n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if(string == ''):\n        return True\n    else:\n        return check_if_palindrome(string[1:]) and check_palindrome(string[0:len(string)-1])\n    "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = list(string)\n    for i in string:\n        if i in lst:\n            lst.remove(i)\n    return lst\n    \ndef main(): \n    str1 = 'aabac'\n    str2 = 'abc'\n    print(str_to_list(str1))\n    print(str_to_list(str2))\n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    p1 = 0\n    p2 = 0\n    my_list = []\n    for i in range(256):\n        my_list.append(0)\n    while p1 < len(string) and p2 < len(string):\n        if string[p1]!= string[p2]:\n            my_list[ord(string[p1])] = 1\n        p1 += 1\n        p2 += 1\n    return my_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of size 256\n    # in order to store 256 characters\n    # Initialize the index\n    i = 0\n    # Create a empty list\n    # rlist = []\n    # Create a list of size 256\n    # in order to store 256 characters\n    # Initialize the index\n    j = 0\n    # create a list of size 256\n    # in order to store 256 characters\n    # Initialize the index\n    k = 0\n    # Create a list of size 256\n    # in order to store 256 characters\n    # Initialize the index\n    l = 0\n    rlist = ['0'] * 256\n    # Return list of characters\n    # from the first string in the form\n    # of a list\n    return rlist\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string)!= len(string.strip()):\n        return None\n    for c in string:\n        if c in string.strip():\n            return None\n    return list(string.strip())\n        \n    \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # converting string to list\n    list1 = list(string)\n    list2 = list(string)\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list2.remove(list1[i])\n    return list2\n    \nprint(\"\\n\\nString manipulation: \", str_to_list('aabccba'))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) <= 0:\n        return string\n    i = 0\n    j = 0\n    new_list = []\n    while (i < len(string)) and (j < len(string)):\n        if string[i]!= string[j]:\n            new_list.append(string[i])\n        i = i + 1\n        j = j + 1\n    return \"\".join(new_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    characters = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\"\n    result = ''\n    for c in string:\n        if c not in characters:\n            result = result + c\n    return result\ndef str_to_int(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    num = 0\n    for i in string:\n        num = num*10 + ord(i)\n    return num\ndef sort_by_odd_and_even(string):\n    '''\n    Write a function to sort a list of strings based on their lengths.\n    '''\n    even = []\n    odd = []\n    for i in string:\n        if len(i) % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    even.sort()\n    odd.sort(reverse=True)\n    return even + odd\ndef longest_word_in_string(string):\n    '''\n    Write a function to get the longest word of a string.\n    '''\n    return sorted(string.split(), key=len)[-1]\ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    string = str_to_list(string)\n    string.reverse()\n    if string == string_to_list(string):\n        return True\n    else:\n        return False\ndef is_palin_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    str1 = str_to_list(str1)\n    str2 = str_to_list(str2)\n    str1.sort()\n    str2.sort()\n    if str1 == str2:\n        return True\n    else:\n        return False\ndef is_palin_subseq(str1, str2):\n    '''\n    Write a function to check if a given string is a subsequence of another string.\n    '''\n    str1 = str_to_list(str1)\n    str2 = str_to_list(str2)\n    str1.sort()\n    str2.sort()\n    if str1[0:len(str2)] == str2:\n        return True\n    else:\n        return False\ndef longest_common_subsequence(str1, str2):\n    '''\n    Write a function to find the longest common subsequence of two strings.\n    '''\n    str1 = str_to_list(str1)\n    str2 = str_to_list(str2)\n    table = []\n    for i in range(len(str1) + 1):\n        table.append([None] * (len(str2) + 1))\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            if str1[i] == str2[j]:\n                table[i][j] = 1 + table[i-1][j-1]\n            else:\n                table[i][j] = max(table[i][j-1], table[i-1][j])\n    return table[len(str1)][len(str2)]\ndef calculate_sum_of_matrix(matrix):\n    '''\n    Write a function to calculate the sum of each row of a square matrix.\n    '''\n    sum_of_row = []\n    for i in range(len(matrix)):\n        total = 0\n        for j in range(len(matrix)):\n            total += matrix[i][j]\n        sum_of_row.append(total)\n    return sum_of_row\ndef minimum_pairs(arr, k):\n    '''\n    Write a function to find the smallest pair of numbers from the array whose sum is equal to the given number k.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count\ndef contains_only_a_to_z(string):\n    '''\n    Write a function to check if the given string contains only the characters from the alphabet.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for c in string:\n        if c not in alphabet:\n            return False\n    return True\ndef sum_of_digit(n):\n    '''\n    Write a function to find the sum of the digit of a given number.\n    '''\n    sum = 0\n    while n > 0:\n        sum = sum + (n % 10)\n        n = n // 10\n    return sum\ndef find_next_larger_element(arr):\n    '''\n    Write a function to find the next largest element in an array in one-pass.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    idx = n - 1\n    while idx >= 0:\n        if arr[idx] < arr[idx-1]:\n            return arr[idx]\n        idx -= 1\n    return -1\ndef count_primes(n):\n    '''\n    Write a function to count the number of prime numbers less than a given number.\n    '''\n    if n < 2:\n        return 0\n    prime = [True] * (n+1)\n    prime[0] = prime[1] = False\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if prime[i] == True:\n            for j in range(i, n+1, i):\n                prime[j] = False\n            count += 1\n    return count\ndef count_primes(arr):\n    '''\n    Write a function to count the number of prime numbers less than a given number.\n    '''\n    if len(arr) < 2:\n        return 0\n    prime = [True] * (len(arr))\n    prime[0] = prime[1] = False\n    count = 0\n    for i in range(2, int(math.sqrt(arr[0])) + 1):\n        if prime[i] == True:\n            for j in range(i, len(arr)):\n                prime[j] = False\n            count += 1\n    return count\ndef remove_element(arr, val):\n    '''\n    Write a function to remove a given element from an array.\n    '''\n    size = len(arr)\n    for i in range(size):\n        if arr[i] == val:\n            arr.pop(i)\n            break\n    return arr\ndef number_of_substrings(string):\n    '''\n    Write a function to count the number of all distinct substrings of a string.\n    '''\n    n = len(string)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = string[i:j]\n            if substring == substring[::-1]:\n                result += 1\n    return result\ndef is_palindrome_with_reversal(string):\n    '''\n    Write a function to check if a given string is a palindrome with a special character in the middle.\n    '''\n    string = str_to_list(string)\n    string.reverse()\n    if string == string_to_list(string):\n        return True\n    else:\n        return False\ndef count_pairs(n, k):\n    '''\n    Write a function to find the count of number of pairs with given sum.\n    '''\n    count = 0\n    for i in range(n):\n        if k - i > 0:\n            count += math.factorial(k - i) // (math.factorial(i) * math.factorial(k - i - i))\n    return count\ndef all_factors(n):\n    '''\n    Write a function to get all factors of a number.\n    '''\n    list = []\n    for i in range(1, n + 1):\n    "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(len(string)):\n        if string[i] not in char_list:\n            char_list.append(string[i])\n    return char_list\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if num in arraynums:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    res = set(arraynums)\n    return True if len(res) == len(arraynums) else False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    count = 0\n    for i in range(len(arraynums)):\n        if arraynums[i] == arraynums[i-1]:\n            count += 1\n        elif count > 0:\n            return True\n        else:\n            count = 0\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return False if len(set(arraynums)) == len(arraynums) else True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    foundDuplicate = False\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if i!= j and arraynums[i] == arraynums[j]:\n                foundDuplicate = True\n                break\n        if foundDuplicate:\n            break\n    return foundDuplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def is_duplicate(arr):\n        #sort and make sure all duplicates occur before the first non-duplicate\n        sorted_arr = sorted(arr)\n        for i in range(len(sorted_arr)-1):\n            if (sorted_arr[i] == sorted_arr[i+1]):\n                return True\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dup=0\n    for i in range(1,len(arraynums)):\n        if arraynums[i]==arraynums[i-1]:\n            dup=1\n            break\n    if dup==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # not going to use dictionary, using set\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return(True if (x>=7 and x<=11) else False)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Not a Woodall'\n    return 'Woodall'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = int(x)\n    if (x == 8): \n        print(\"Yes\")\n    else: \n        print(\"No\") \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 3 or x == 7 or x == 9:\n        return True\n    else:\n        return False\ndef check_numbers(n):\n    '''\n    Write a function to check if a number is a prime number.\n    '''\n    if n == 2 or n == 3 or n == 5:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n            else:\n                return True\ndef is_a_bouncy(n):\n    '''\n    Write a function that checks if a given number is bouncy or not.\n    '''\n    if (n%2 == 0) and (n%3 == 0):\n        return True\n    elif (n%2 == 0):\n        return False\n    elif (n%3 == 0):\n        return True\n    else:\n        return False\ndef how_many_bouncy(n):\n    '''\n    Write a function that return the number of bouncy numbers upto a given number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if is_a_bouncy(i):\n            count += 1\n    return count\ndef remove_the_duplicates(l):\n    '''\n    Write a function that takes a list of numbers and removes the duplicate numbers.\n    '''\n    s = set(l)\n    return list(s)\ndef sort_dict(d):\n    '''\n    Write a function that sorts the dictionary by value.\n    '''\n    s = sorted(d.items(), key = lambda x: x[1])\n    return s\ndef sort_dict_by_key(d):\n    '''\n    Write a function that sorts the dictionary by keys.\n    '''\n    s = sorted(d.keys())\n    return s\ndef is_a_perfect_square(x):\n    '''\n    Write a function that checks if a given number is a perfect square or not.\n    '''\n    square = x**0.5\n    return square.is_integer()\ndef count_digits(n):\n    '''\n    Write a function to count the number of digits in a number.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n // 10\n    return count\ndef count_digits_1(n):\n    '''\n    Write a function to count the number of digits in a number.\n    '''\n    if n < 10:\n        return 1\n    return 1 + count_digits_1(n // 10)\ndef count_digits_2(n):\n    '''\n    Write a function to count the number of digits in a number.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n // 10\n    return count\ndef count_digits_3(n):\n    '''\n    Write a function to count the number of digits in a number.\n    '''\n    while n!= 0:\n        n = n // 10\n        count += 1\n    return count\ndef sum_list(l):\n    '''\n    Write a function that takes a list and adds all the elements of the list together.\n    '''\n    result = 0\n    for i in range(len(l)):\n        result += l[i]\n    return result\ndef sum_list_2(l):\n    '''\n    Write a function that takes a list and adds all the elements of the list together.\n    '''\n    result = 0\n    for i in range(len(l)):\n        result += l[i]\n    return result\ndef sum_list_3(l):\n    '''\n    Write a function that takes a list and adds all the elements of the list together.\n    '''\n    return sum(l)\ndef sum_list_4(l):\n    '''\n    Write a function that takes a list and adds all the elements of the list together.\n    '''\n    return sum(l)\ndef is_palindrome(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_1(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_2(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_palindrome_3(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_palindrome_4(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_palindrome_5(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    s = s.lower()\n    l = list(s)\n    l.reverse()\n    s = \"\".join(l)\n    return s == s.lower()\ndef is_palindrome_6(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    l = list(s)\n    l.reverse()\n    s = \"\".join(l)\n    return s == s.lower()\ndef is_palindrome_7(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    l = list(s)\n    l.reverse()\n    s = \"\".join(l)\n    s = s.lower()\n    return s == s\ndef is_palindrome_8(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    l = list(s)\n    l.reverse()\n    s = \"\".join(l)\n    s = s.lower()\n    return s == s\ndef is_palindrome_9(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    s = s.lower()\n    l = len(s)\n    for i in range(l // 2):\n        if s[i]!= s[l - i - 1]:\n            return False\n    return True\ndef is_palindrome_10(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    s = s.lower()\n    l = len(s)\n    for i in range(l // 2):\n        if s[i]!= s[l - i - 1]:\n            return False\n    return True\ndef is_palindrome_11(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    s = s.lower()\n    l = len(s)\n    for i in range(l // 2):\n        if s[i]!= s[l - i - 1]:\n            return False\n    return True\ndef is_palindrome_12(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    l = len(s)\n    for i in range(l // 2):\n        if s[i]!= s[l - i - 1]:\n            return False\n    return True\ndef is_palindrome_13(s):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    s = s.lower()\n    l = len(s)\n    for i in range(l // 2):\n        if s[i]!= s[l - i - 1]:\n            return False\n    return True\ndef is"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 6174:\n        print(\"It is a wooden dog\")\n    else:\n        print(\"It is not a wooden dog\")\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # code here\n    #print(x)\n    if x < 7 or x > 10:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x == 0 or x == 1 or x == 2):\n        return True\n    elif((x%2) == 0 or (x%3) == 0):\n        return False\n    else:\n        while(x > 2):\n            if(x%2 == 0 or x%3 == 0):\n                return False\n            else:\n                x = x/2\n                x = int(x)\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in range(4,50):\n        return True\n    else:\n        return False\n        \nprint(is_woodall(41))\nprint(is_woodall(20))\nprint(is_woodall(55))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = x / 100\n    if(x >= 5):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 5 == 0) or (x % 7 == 0)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = -num\n    r = 0\n    while num > 0:\n        r = r * 10 + num % 10\n        num = num // 10\n    if num == 0:\n        return r\n    else:\n        return -r\nprint(rev(15))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 1\n    elif num < 0:\n        num = -num\n        rev = 0\n        while num!= 0:\n            rev = rev * 10 + num % 10\n            num = num // 10\n        rev = -rev\n        return rev\n    else:\n        rev = 0\n        while num!= 0:\n            rev = rev * 10 + num % 10\n            num = num // 10\n        return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num > 0):\n        rem = num % 10\n        rev_num = (rev_num*10) + rem\n        num = num // 10\n    return (rev_num == num)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num>0):\n        rev_num = rev_num*10 + (num%10)\n        num = int(num/10)\n    if(rev_num == int(num/2)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return 2 * rev(num - 1) + 1\nprint(rev(11))"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        #print(num)\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n        \n    #print(rev_num)\n    if rev_num == num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n    \ndef chk(n):\n    for i in range(len(n)):\n        if(i+1 < len(n)):\n            if(n[i] == n[i+1]):\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def rev_number(num):\n        rev_num = 0\n        while num:\n            rev_num = rev_num * 10 + num % 10\n            num //= 10\n        return rev_num == num\n    if num == rev_number(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #print(num)\n    if num == 1:\n        return 0\n    if num == 0:\n        return 1\n    rev = num\n    while rev!= 0:\n        rev = rev//10\n        num = num//10\n    if num == 0:\n        return 1\n    if num == 1:\n        return 0\n    if num > 2:\n        for i in range(1,int(num)+1):\n            if i == int(num):\n                continue\n            else:\n                if rev%i == 0:\n                    if rev == i:\n                        return 0\n                    else:\n                        return 1\n                else:\n                    return 1\n    if num == 2:\n        return 1\n    return 2"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    return (num * -1) - rev(num - 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = rev_num*10 + (num%10)\n        num = num//10\n    if(rev_num == num):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == 2020:\n                return arr[i] * arr[j]\n    return None\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    import heapq\n    nums = arr\n    n = len(nums)\n    heap = []\n    # Python program to find largest\n    # number in a list \n    \n    # using maxheap \n    for i in range(n): \n        heapq.heappush(heap, nums[i]) \n    #print(heap) \n    largest = 0\n    while len(heap) > 0: \n        largest = heap[0]\n        heapq.heappop(heap)\n    return largest \n    # Driver code to test above \narr = [1, 5, 10, 5, 2, 6, 1] \nprint(find_Max_Num(arr)) "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : return -1\n    arr = list(map(int, arr))\n    max_num = arr[0]\n    for i in range(1, len(arr)): \n        if max_num < arr[i]: \n            max_num = arr[i] \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    mx = -1\n    for i in range(len(arr)) : \n        if(mx < arr[i]) :\n            mx = arr[i]\n    return mx \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize MaxNum to the first element in arr\n    MaxNum = arr[0]\n    # Traverse through the remaining elements of arr\n    for i in range(1, len(arr)) :\n        # Find the largest element in MaxNum\n        # and update it with the current element\n        # if it is greater than the current element\n        # of MaxNum\n        if (arr[i] > MaxNum) :\n            MaxNum = arr[i]\n        print(\"MaxNum is: \", MaxNum)\n        return MaxNum\n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = -9999999999\n    for i in arr:\n        if i > largest_num:\n            largest_num = i\n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    for i in range(len(arr)):\n        if largest < int(arr[i]):\n            largest = int(arr[i])\n    return largest\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    maxNum = 0\n    \n    for i in range(1,n+1) :\n        k = str(arr[i-1])\n        for j in range(1,n+1) :\n            x = str(arr[j-1])\n            if k < x and int(k) > maxNum : \n                maxNum = int(k)\n    return maxNum\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    while(len(arr)!= 0) : \n        max_num = max(max_num, int(arr.pop()))\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    ans = float('-inf')\n    for i in range(n) :\n        ans = max(ans, arr[i]*(n-i))\n    return ans\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    if x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign_x = x if x >= 0 else -x\n    sign_y = y if y >= 0 else -y\n    print(sign_x,sign_y)\n    if sign_x == sign_y:\n        return True\n    else:\n        return False\n        \n    \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return False\n    elif x >= 0 and y >= 0:\n        return False\n    else:\n        return 'Error'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n        \ndef Prime_or_Not(n):\n    '''\n    Write a python function to check whether the given number is a prime or not.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n            \ndef Find_Prime_Factors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    factors = []\n    \n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    \n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n / i\n        else:\n            i += 2\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > 0 and y < 0) or (x < 0 and y > 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (n+3) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n    g = 1\n    h = 1\n    i = 1\n    while True:\n        k = a + b + c + d + e + f + g + h\n        if n == k:\n            return n\n        else:\n            n -= 1\n            a, b, c, d, e, f, g, h = a + 2*b, 2*a + b + 2*c, a + 2*b + 2*c + 2*d, 2*a + b + 2*c + 2*d + 2*e, a + b + 2*c + 2*d + 2*e + 2*f, 2*a + b + 2*c + 2*d + 2*e + 2*f + 2*g, a + 2*b + 2*c + 2*d + 2*e + 2*f + 2*g + 2*h, 2*a + 2*b + 2*c + 2*d + 2*e + 2*f + 2*g + 2*h + 2*i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    if n <= 3:\n        return 1\n    octagonal_numbers = [1, 3, 6, 10, 15, 21, 28]\n    if n == 8:\n        return octagonal_numbers[8-1]\n    else:\n        return octagonal_numbers[n-1] + octagonal_numbers[n-2] + octagonal_numbers[n-3"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n > 1:\n        return n * (3 * n - 1) / 2\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (0.25 * n * (2 * n - 1))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    octagonal_numbers.append(1)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_list = []\n    n = 0\n    for i in range(1,21):\n        octagonal_list.append(n)\n        n += 1\n    print(octagonal_list)\n    return octagonal_list[n-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return sum(i for i in range(1,n+1) if i % 3 == 0) + n\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # dictionary to store count of substrings\n    # with the sum of digits equal to their length\n    substring_count = defaultdict(int)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Time complexity: O(n^2)\n    # Space complexity: O(n)\n    # Solution 1:\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(0,len(s)):\n        for j in range(i+1,len(s)+1):\n            if(sum(int(s[i:j]) for i in range(i,j))==len(s)):\n                count+=1\n    return count\ndef isPrime(num):\n    '''\n    Write a function isPrime to check if a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\ndef primeFactor(n):\n    '''\n    Write a function to generate all prime factorization of a number.\n    '''\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,n+1,2):\n        while(n%i==0):\n            factors.append(i)\n            n=n/i\n    return factors\ndef f(x):\n    '''\n    Write a function to find the first occurance of a number in a sorted list of integers.\n    '''\n    print(x)\n    n=len(x)\n    if n==0:\n        return -1\n    for i in range(0,n-1):\n        if x[i]>x[i+1]:\n            return i\n    return -1\ndef find_Kth_smallest(x,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list of integers.\n    '''\n    n=len(x)\n    if(n==0):\n        return -1\n    if(k>n or k<1):\n        return -1\n    if(k==n):\n        return x[n-1]\n    l=0\n    r=n-1\n    while(r-l+1>1):\n        mid=(l+r)/2\n        if x[mid]>x[r]:\n            l=mid\n        elif x[mid]<x[r]:\n            r=mid\n        else:\n            if mid==0 or x[r]>x[mid-1]:\n                return x[mid]\n            else:\n                l=mid\ndef find_Kth_smallest2(x,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list of integers.\n    '''\n    n=len(x)\n    if(n==0):\n        return -1\n    if(k>n or k<1):\n        return -1\n    if(k==n):\n        return x[n-1]\n    l=0\n    r=n-1\n    while(r-l+1>1):\n        mid=(l+r)/2\n        if x[mid]>x[r]:\n            l=mid\n        elif x[mid]<x[r]:\n            r=mid\n        else:\n            if mid==0 or x[r]>x[mid-1]:\n                return x[mid]\n            else:\n                l=mid\ndef find_Kth_smallest3(x,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list of integers.\n    '''\n    n=len(x)\n    if(n==0):\n        return -1\n    if(k>n or k<1):\n        return -1\n    if(k==n):\n        return x[n-1]\n    l=0\n    r=n-1\n    while(r-l+1>1):\n        mid=(l+r)/2\n        if x[mid]>x[r]:\n            l=mid\n        elif x[mid]<x[r]:\n            r=mid\n        else:\n            if mid==0 or x[r]>x[mid-1]:\n                return x[mid]\n            else:\n                l=mid\n    return x[l]\ndef find_Kth_smallest4(x,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list of integers.\n    '''\n    n=len(x)\n    if(n==0):\n        return -1\n    if(k>n or k<1):\n        return -1\n    if(k==n):\n        return x[n-1]\n    l=0\n    r=n-1\n    while(r-l+1>1):\n        mid=(l+r)/2\n        if x[mid]>x[r]:\n            l=mid\n        elif x[mid]<x[r]:\n            r=mid\n        else:\n            if mid==0 or x[r]>x[mid-1]:\n                return x[mid]\n            else:\n                l=mid\n    return x[l]\ndef find_Kth_smallest5(x,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list of integers.\n    '''\n    n=len(x)\n    if(n==0):\n        return -1\n    if(k>n or k<1):\n        return -1\n    if(k==n):\n        return x[n-1]\n    l=0\n    r=n-1\n    while(r-l+1>1):\n        mid=(l+r)/2\n        if x[mid]>x[r]:\n            l=mid\n        elif x[mid]<x[r]:\n            r=mid\n        else:\n            if mid==0 or x[r]>x[mid-1]:\n                return x[mid]\n            else:\n                l=mid\n    return x[l]\ndef find_Kth_smallest6(x,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list of integers.\n    '''\n    n=len(x)\n    if(n==0):\n        return -1\n    if(k>n or k<1):\n        return -1\n    if(k==n):\n        return x[n-1]\n    l=0\n    r=n-1\n    while(r-l+1>1):\n        mid=(l+r)/2\n        if x[mid]>x[r]:\n            l=mid\n        elif x[mid]<x[r]:\n            r=mid\n        else:\n            if mid==0 or x[r]>x[mid-1]:\n                return x[mid]\n            else:\n                l=mid\n    return x[l]\ndef find_Kth_smallest7(x,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list of integers.\n    '''\n    n=len(x)\n    if(n==0):\n        return -1\n    if(k>n or k<1):\n        return -1\n    if(k==n):\n        return x[n-1]\n    l=0\n    r=n-1\n    while(r-l+1>1):\n        mid=(l+r)/2\n        if x[mid]>x[r]:\n            l=mid\n        elif x[mid]<x[r]:\n            r=mid\n        else:\n            if mid==0 or x[r]>x[mid-1]:\n                return x[mid]\n            else:\n                l=mid\n    return x[l]\ndef find_Kth_smallest8(x,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list of integers.\n    '''\n    n=len(x)\n    if(n==0):\n        return -1\n    if(k>n or k<1):\n        return -1\n    if(k==n):\n        return x[n-1]\n    l=0\n    r=n-1\n    while(r-l+1>1):\n        mid=(l+r)/2\n        if x[mid]>x[r]:\n            l=mid\n        elif x[mid]<x[r]:\n            r=mid\n        else:\n            if mid==0 or x[r]>x[mid-1]:\n                return x[mid]\n            else:"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    count = 0\n    for i in range(length):\n        sub_str = s[i:length]\n        sub_str_list = list(sub_str)\n        sub_str_list.sort()\n        sub_str_list.reverse()\n        new_sub_str = ''.join(sub_str_list)\n        if new_sub_str[0] == '0' and len(new_sub_str) > 1:\n            continue\n        count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = {}\n    for i in range(1,10):\n        m[i] = 0\n    for i in range(1,len(s)):\n        d = 0\n        for j in range(i):\n            if (s[i]==s[j]):\n                d+=1\n        m[len(s[i])] = m[len(s[i])] + d\n    sum = 0\n    for i in range(1,10):\n        sum = sum + m[i]\n    return sum\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # if len(s)==0:\n    #     return 0\n    # return (len(s)+1)*(len(s)+1)//2\n    # print(\"count_Substrings:\",len(s))\n    # return len(s)+1\n    # first = True\n    # count = 0\n    # for i in range(len(s)):\n    #     print(s)\n    #     print(\"first:\",first)\n    #     if first:\n    #         first = False\n    #         continue\n    #     if s[i] == '0':\n    #         print(i)\n    #         continue\n    #     if i == len(s)-1:\n    #         print(\"i==len(s)-1:\",i,s[i])\n    #         count += 1\n    #     elif s[i] == s[i+1]:\n    #         print(\"i+1:\",i,i+1)\n    #         count += 1\n    #         i += 2\n    #     else:\n    #         i += 1\n    #     print(\"count:\",count)\n    # return count\n    # number_zeros = 0\n    # number_ones = 0\n    # for i in range(len(s)):\n    #     if s[i] == '0':\n    #         number_zeros += 1\n    #     else:\n    #         number_ones += 1\n    # # print(number_zeros,number_ones)\n    # if number_ones < number_zeros:\n    #     number_ones = number_zeros\n    #     return number_ones*(number_ones+1)/2\n    # else:\n    #     number_ones = number_zeros\n    #     return number_zeros*(number_zeros+1)/2\n    # l1 = []\n    # l2 = []\n    # l3 = []\n    # for i in range(len(s)):\n    #     if s[i] == '0':\n    #         l1.append(i)\n    #     elif s[i] == '1':\n    #         l2.append(i)\n    #     else:\n    #         l3.append(i)\n    # print(l1,l2,l3)\n    # if len(l1) > len(l2):\n    #     l2 = l1\n    # print(l1,l2)\n    # if len(l1) > len(l3):\n    #     l3 = l1\n    # print(l1,l3)\n    # if len(l2) > len(l3):\n    #     l3 = l2\n    # print(l2,l3)\n    # if len(l1) == len(l2):\n    #     if len(l1) == len(l3):\n    #         print(s[l1[0]:l2[0]+1])\n    #         return int(s[l1[0]:l2[0]+1],2)\n    #     else:\n    #         print(s[l1[0]:l3[0]+1])\n    #         return int(s[l1[0]:l3[0]+1],2)\n    # else:\n    #     if len(l2) == len(l3):\n    #         print(s[l2[0]:l1[0]+1])\n    #         return int(s[l2[0]:l1[0]+1],2)\n    #     else:\n    #         print(s[l2[0]:l3[0]+1])\n    #         return int(s[l2[0]:l3[0]+1],2)\n    # print(\"length of digits:\",len(s))\n    # return int(s,2)\n    # count = 0\n    # l =[]\n    # for i in range(len(s)):\n    #     print(s)\n    #     if s[i] == '0':\n    #         count += 1\n    #         print(count)\n    #     elif s[i] == '1':\n    #         count += 1\n    #     else:\n    #         count += 0\n    #         print(count)\n    #     if count == len(s):\n    #         print(s[i])\n    #         return s[i]\n    # return count\n    # def count_Substrings(s):\n    #     cnt = 0\n    #     for i in range(len(s)):\n    #         if s[i] == s[i+1]:\n    #             cnt += 1\n    #     return cnt + int(s[0])\n    # return count_Substrings('0') + count_Substrings('1')\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '0':\n            i += 1\n            continue\n        if i == len(s)-1:\n            count += 1\n        elif s[i] == s[i+1]:\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        s1 = s[i]\n        for j in range(i+1,len(s)):\n            s2 = s[j]\n            if int(s1+s2) == len(s1+s2):\n                count += 1\n            s1 = s2\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_string = defaultdict(int)\n    for i in range(len(s)):\n        sub_string[s[i:]] += 1\n    print(sub_string)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    solution = 0\n    \n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i == j:\n                continue\n            else:\n                substring = s[i:j+1]\n                sum_of_digits = 0\n                \n                for letter in substring:\n                    if letter.isdigit():\n                        sum_of_digits += int(letter)\n                \n                if sum_of_digits == len(substring):\n                    solution += 1\n                    \n    return solution\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = None\n    for x in xs:\n        if small is None or small > x:\n            small = x\n    return small\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    min_element = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_element:\n            min_element = xs[i]\n    return min_element\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < small:\n            small = xs[i]\n    return small\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = 0\n    for i in range(len(xs)):\n        if xs[i] > xs[n]:\n            n = i\n    return xs[n]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num1=xs[0]\n    for i in range(1,len(xs)):\n        if num1 > xs[i]:\n            num1=xs[i]\n    return num1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #xs = [1,2,5,6,8,4,3]\n    #print(xs)\n    min_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_num:\n            min_num = xs[i]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #  TODO: Write your solution here\n    maxdiff = 0\n    for i in range(0,len(test_list)-1):\n        if test_list[i+1] - test_list[i] > maxdiff:\n            maxdiff = test_list[i+1] - test_list[i]\n    return maxdiff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    dic = {}\n    for index, value in enumerate(test_list):\n        if index + 1!= len(test_list):\n            dic[index] = value - test_list[index + 1]\n    return max(dic.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    m = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i + 1] - test_list[i] > m:\n            m = test_list[i + 1] - test_list[i]\n    return m\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    diff = 0\n    for i in range(0, len(test_list)-1):\n        max_diff = max(abs(test_list[i]-test_list[i+1]), abs(test_list[i]))\n        if max_diff > diff:\n            diff = max_diff\n    return diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # len_test = len(test_list)\n    # min_diff = 0\n    # print(test_list)\n    # for i in range(len_test - 1):\n    #     for j in range(i + 1, len_test):\n    #         diff = abs(test_list[i] - test_list[j])\n    #         if diff > min_diff:\n    #             min_diff = diff\n    # return min_diff\n    \n    # Using Hashmap\n    # min_diff = float('inf')\n    # for i in range(len_test):\n    #     for j in range(i + 1, len_test):\n    #         diff = abs(test_list[i] - test_list[j])\n    #         min_diff = diff if min_diff > diff else min_diff\n    # return min_diff\n    \n    # Using Dictionary\n    min_diff = float('inf')\n    min_pair = None\n    pairs_dict = {}\n    for pair in test_list:\n        if pair in pairs_dict:\n            pairs_dict[pair] += 1\n        else:\n            pairs_dict[pair] = 1\n    for pair in test_list:\n        pair_diff = abs(pair[0] - pair[1])\n        if pair_diff < min_diff:\n            min_diff = pair_diff\n            min_pair = pair\n    return min_diff, min_pair\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(1,len(test_list)):\n        curr_diff = abs(test_list[i] - test_list[i-1])\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] == test_list[i+1]:\n            max = max + 1\n            continue\n        if test_list[i] - test_list[i+1] > max:\n            max = test_list[i] - test_list[i+1]\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # The difference between the first and second element must be maximum\n    test_list.sort()\n    first_element = test_list[0]\n    second_element = test_list[1]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -9999999999999\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i]-test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sort_subject = sorted(subjectmarks, key = lambda x: x[1])\n    return(sort_subject)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(i+1,len(subjectmarks)):\n            if subjectmarks[i][1] > subjectmarks[j][1]:\n                temp = subjectmarks[i]\n                subjectmarks[i]= subjectmarks[j]\n                subjectmarks[j]= temp\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if len(subjectmarks) == 0:\n        return []\n    else:\n        tup = sorted(subjectmarks, key=lambda x: x[1])\n        return tup\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sub_mark_sorted = sorted(subjectmarks, key = lambda x : x[1])\n    return sub_mark_sorted\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # from itertools import islice\n    # sorted_list = sorted(subjectmarks, key=lambda t: t[1], reverse=True)\n    # sorted_list = islice(sorted_list, len(sorted_list)-1, len(sorted_list))\n    # return list(sorted_list)\n    \n    # from operator import itemgetter\n    # from itertools import islice\n    # sorted_list = sorted(subjectmarks, key=itemgetter(1), reverse=True)\n    # sorted_list = islice(sorted_list, len(sorted_list)-1, len(sorted_list))\n    # return list(sorted_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(sorted(subjectmarks, key=lambda k: k[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1], reverse = True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    res=sorted(subjectmarks,key=lambda x:x[1])\n    for i in res:\n        print(i)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def sum_list(a):\n        if not a:\n            return 0\n        return a[0] + sum_list(a[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Your Code Here\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif not isinstance(data_list, list):\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #base case: if data_list is empty, then return 0. \n    if len(data_list) == 0:\n        return 0\n    #otherwise, return the recursive sum of the first element and the sum of the elements of the rest of the list. \n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if type(item) is list:\n            result += recursive_list_sum(item)\n        else:\n            result += item\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #for x in range(len(data_list)):\n        #print(x)\n    #return sum(data_list)\n    if len(data_list) == 0:\n        return 0\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    return sum([recursive_list_sum(item) for item in data_list])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for element in list:\n        if element>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for i in list:\n        if i>0:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    i=0\n    for ele in list:\n        if ele>0:\n            i+=1\n    return i\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]>=0:\n            count+=1\n    print(count)\n    return count\n        \n    \npos_count([1,-5,2,6,-4])\npos_count([-2,-4,-2,-5,-4])\npos_count([2,-6,1,5,4,-5,4,5,3,5,1,-6])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num_pos = 0\n    for item in list:\n        if item > 0:\n            num_pos += 1\n    return num_pos\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    partition = 0\n    for i in range(0, n + 1):\n        partition += bell_num(i)\n    return partition\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n < 0:\n        return 0\n    \n    memo = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        memo[i] = memo[i-1] + 1\n        if i % 3 == 0:\n            memo[i] = min(memo[i], memo[i//3] + 1)\n        if i % 2 == 0:\n            memo[i] = min(memo[i], memo[i//2] + 1)\n    \n    return memo[n]\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    return bell_number_memoized(n, {})\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return partitions(n-1) + partitions(n-2)\n    \n    return partitions(n)\n    \n    \n    \n    \n    \ndef dp_bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                dp[0][i] = 1\n            for i in range(1,n+1):\n                dp[i][0] = 1\n            for i in range(1,n+1):\n                for j in range(1,n+1):\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            return dp[n][n]\n    \n    return partitions(n)\n    \n    \n    \n    \n    \ndef dp_bell_number2(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                dp[0][i] = 1\n            for i in range(1,n+1):\n                dp[i][0] = 1\n            for i in range(1,n+1):\n                for j in range(1,n+1):\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            return dp[n][n]\n    \n    return partitions(n)\n    \n    \n    \n    \n    \ndef dp_bell_number3(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                dp[0][i] = 1\n            for i in range(1,n+1):\n                dp[i][0] = 1\n            for i in range(1,n+1):\n                for j in range(1,n+1):\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            return dp[n][n]\n    \n    return partitions(n)\n    \n    \n    \n    \n    \ndef dp_bell_number4(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                dp[0][i] = 1\n            for i in range(1,n+1):\n                dp[i][0] = 1\n            for i in range(1,n+1):\n                for j in range(1,n+1):\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            return dp[n][n]\n    \n    return partitions(n)\n    \n    \n    \n    \n    \ndef dp_bell_number5(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                dp[0][i] = 1\n            for i in range(1,n+1):\n                dp[i][0] = 1\n            for i in range(1,n+1):\n                for j in range(1,n+1):\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            return dp[n][n]\n    \n    return partitions(n)\n    \n    \n    \n    \n    \n    \ndef dp_bell_number6(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                dp[0][i] = 1\n            for i in range(1,n+1):\n                dp[i][0] = 1\n            for i in range(1,n+1):\n                for j in range(1,n+1):\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            return dp[n][n]\n    \n    return partitions(n)\n    \n    \n    \n    \n    \n    \ndef dp_bell_number7(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                dp[0][i] = 1\n            for i in range(1,n+1):\n                dp[i][0] = 1\n            for i in range(1,n+1):\n                for j in range(1,n+1):\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            return dp[n][n]\n    \n    return partitions(n)\n    \n    \n    \n    \n    \n    \ndef dp_bell_number8(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                dp[0][i] = 1\n            for i in range(1,n+1):\n                dp[i][0] = 1\n            for i in range(1,n+1):\n                for j in range(1,n+1):\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])\n            return dp[n][n]\n    \n    return partitions(n)\n    \n    \n    \n    \n    \n    \ndef dp_bell_number9(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(1,n+1):\n                d"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ans = 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    return sum(bell_number(i) * bell_number(n-i) for i in range(1, n))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = 0\n    for i in range(1, n+1):\n        ways += bell_number_rec(n-i)\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 0:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    b_n = [0]\n    for i in range(1, n+1):\n        b_n.append(b_n[-1] + i)\n    \n    def cnt_ways(n):\n        # recursion can be used here\n        if n == 0:\n            return 0\n        if n < 0:\n            return 0\n        if n in b_n:\n            return 1\n        return cnt_ways(n-1) + cnt_ways(n-2)\n    return cnt_ways(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    for i in range(1, n+1):\n        count += bell_number(i-1)*bell_number(n-i)\n    return count\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=1:\n        return True\n    B = A.copy()\n    B.sort()\n    if A==B:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    l = len(A)\n    if l < 2:\n        return False\n    else:\n        for i in range(l-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return False\n    if len(A) == 1:\n        return True\n    if A[0] > A[1]:\n        return False\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=2:\n        return True\n    for i in range(n-1):\n        if A[i]>=A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    l=len(A)\n    if l<=1:\n        return True\n    for i in range(l-1):\n        if A[i]<A[i+1]:\n            return True\n        elif A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing=True\n    decreasing=True\n    if A[0]>A[1]:\n        increasing=False\n    elif A[0]<A[1]:\n        decreasing=False\n    for i in range(1,len(A)-1):\n        if A[i]<A[i-1]:\n            increasing=False\n        elif A[i]>A[i+1]:\n            decreasing=False\n    return (increasing or decreasing)\n    '''\n    Find the largest element in the list and check whether the next element is smaller than it and so on.\n    '''\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] <= A[i+1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    i = 1\n    while i < len(A) and A[i - 1] < A[i]:\n        i += 1\n    if i < len(A):\n        return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #code here\n    n = len(A)\n    i = 0\n    while i<n-1:\n        if A[i] < A[i+1]:\n            i += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for x in range(0,len(l)):\n        if x+len(s) <= len(l) and l[x:x+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(i in l for i in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return (s in l)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return is_sublist_aux(l, s)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(True for i in range(len(l)) if l[i:i+len(s)]==s)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for x in range(len(l)-len(s)+1):\n        for y in range(len(s)):\n            if l[x+y]!= s[y]:\n                break\n        if y == len(s)-1:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n    \nprint(is_sublist([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\"]))\nprint(is_sublist([1,2,3], [1,2]))\nprint(is_sublist([1,2,3], [1,2,3]))\nprint(is_sublist([1,2,3], [1,2,3,4]))\nprint(is_sublist([1,2,3,4], [1,2,3]))\nprint(is_sublist([1,2,3], [1,2,3,4]))\nprint(is_sublist([1,2,3,4], [1,2]))\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # return s in l or any(s in g for g in l)\n    for i in l:\n        if i == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    print(\"\\n\\n***** Find Tuple having Equal Length *****\")\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            print(\"Not all the tuples are of the same length\")\n            return\n    print(\"Equal tuples\")\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #print(Input)\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                print(\"The tuples are of unequal length\")\n                print(\"The tuple with index\",i,\"is :\",Input[i])\n                print(\"The tuple with index\",j,\"is :\",Input[j])\n                return False\n    print(\"The tuples are of equal length\")\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) > 1:\n        for i in range(len(Input)-1):\n            if len(Input[i])!= len(Input[i+1]):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)):\n        if len(Input[i])!=len(Input[i+1]):\n            print(\"No\")\n            return\n    print(\"Yes\")\n    \ndef find_even(Input):\n    '''\n    Write a function to count the even numbers in a list.\n    '''\n    count=0\n    for i in range(0,len(Input)):\n        if Input[i]%2==0:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for a,b in Input:\n        if len(a)!= len(b):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)<2:\n        return 'True'\n    for i in range(len(Input)):\n        for j in range(len(Input)-1):\n            if len(Input[i])!=len(Input[j]):\n                return 'False'\n    return 'True'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            count += 1\n    if count == 0:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==0:\n        return False\n    if len(Input)>1:\n        for i in range(len(Input)):\n            for j in range(i+1,len(Input)):\n                if len(Input[i])!=len(Input[j]):\n                    return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i < pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return comb_sort(less) + [pivot] + comb_sort(greater)\n    \nif __name__ == '__main__':\n    print(comb_sort([4, 1, 2, 3, 5, 2, 1, 9]))\n    "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for j in range(len(nums)):\n        key = nums[j]\n        i = j-1\n        while i >= 0 and nums[i] > key:\n            nums[i+1] = nums[i]\n            i -= 1\n        nums[i+1] = key\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(n - 1):\n        if nums[i] > nums[i + 1]:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        j = i\n        while j > 0 and nums[j-1] > nums[j]:\n            nums[j-1], nums[j] = nums[j], nums[j-1]\n            j -= 1\n        if j == i:\n            break\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    count = 0\n    swap = True\n    while swap:\n        swap = False\n        for i in range(1, n):\n            count += 1\n            if nums[i - 1] > nums[i]:\n                nums[i - 1], nums[i] = nums[i], nums[i - 1]\n                swap = True\n        print(\"Iterations: \", count)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Edge cases\n    if len(nums) == 1:\n        return nums\n    elif len(nums) == 0:\n        return nums\n    else:\n        comparisons = 0\n        swap_count = 0\n        while(True):\n            if nums == sorted(nums):\n                break\n            swaps = 0\n            for i in range(len(nums)-1):\n                if nums[i] > nums[i+1]:\n                    nums[i], nums[i+1] = nums[i+1], nums[i]\n                    swaps += 1\n                    comparisons += 1\n                    swap_count += 1\n            if swaps == 0:\n                break\n        return nums, comparisons, swap_count\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length <= 1:\n        return\n    for i in range(length):\n        for j in range(i+1, length):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    for j in range(len(nums)):\n        if nums[j] > nums[j-1]:\n            continue\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n < 2:\n        return nums\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (n**2) % 10 == 0\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(n ** 0.5)\n    if x ** 2 == n:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x_square:\n    #                 if x%j == 0:\n    #                     break\n    #                 j+=1\n    #             if j == x_square+1:\n    #                 print(f\"{x} is a perfect square.\")\n    #                 break\n    #         i+=1\n    # if i == x:\n    #     print(f\"{x} is not a perfect square.\")\n    \n    \n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x_square:\n    #                 if x%j == 0:\n    #                     break\n    #                 j+=1\n    #             if j == x_square+1:\n    #                 print(f\"{x} is a perfect square.\")\n    #                 break\n    #         i+=1\n    # if i == x:\n    #     print(f\"{x} is not a perfect square.\")\n    \n    \n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x_square:\n    #                 if x%j == 0:\n    #                     break\n    #                 j+=1\n    #             if j == x_square+1:\n    #                 print(f\"{x} is a perfect square.\")\n    #                 break\n    #         i+=1\n    # if i == x:\n    #     print(f\"{x} is not a perfect square.\")\n    \n    \n    \n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x_square:\n    #                 if x%j == 0:\n    #                     break\n    #                 j+=1\n    #             if j == x_square+1:\n    #                 print(f\"{x} is a perfect square.\")\n    #                 break\n    #         i+=1\n    # if i == x:\n    #     print(f\"{x} is not a perfect square.\")\n    \n    \n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x_square:\n    #                 if x%j == 0:\n    #                     break\n    #                 j+=1\n    #             if j == x_square+1:\n    #                 print(f\"{x} is a perfect square.\")\n    #                 break\n    #         i+=1\n    # if i == x:\n    #     print(f\"{x} is not a perfect square.\")\n    \n    \n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x_square:\n    #                 if x%j == 0:\n    #                     break\n    #                 j+=1\n    #             if j == x_square+1:\n    #                 print(f\"{x} is a perfect square.\")\n    #                 break\n    #         i+=1\n    # if i == x:\n    #     print(f\"{x} is not a perfect square.\")\n    \n    \n    \n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x_square:\n    #                 if x%j == 0:\n    #                     break\n    #                 j+=1\n    #             if j == x_square+1:\n    #                 print(f\"{x} is a perfect square.\")\n    #                 break\n    #         i+=1\n    # if i == x:\n    #     print(f\"{x} is not a perfect square.\")\n    \n    \n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x_square:\n    #                 if x%j == 0:\n    #                     break\n    #                 j+=1\n    #             if j == x_square+1:\n    #                 print(f\"{x} is a perfect square.\")\n    #                 break\n    #         i+=1\n    # if i == x:\n    #     print(f\"{x} is not a perfect square.\")\n    \n    \n    # x = int(input(\"Please enter the number : \"))\n    # if x < 0:\n    #     print(\"Negative numbers cannot be used. Please enter positive number.\")\n    # elif x == 0:\n    #     print(\"Zero is not possible\")\n    # else:\n    #     i = 1\n    #     x_square = x**0.5\n    #     while i <= x:\n    #         if x%i == 0:\n    #             j = i\n    #             while j <= x"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        if n - i*i == i*i:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n>0:\n        if n%2==0:\n            n1=n\n            for i in range(n):\n                if n1%2==0:\n                    print(n1, \"is divisible by 2\")\n                    break\n                n1=n1-1\n        else:\n            print(n, \"is not divisible by 2\")\n        print(n, \"is not divisible by 2\")\n    else:\n        print(n, \"is negative\")\ndif_Square(44)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n**0.5 == int(n**0.5)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(n)\n    sq = n ** 0.5\n    sq = int(sq)\n    sq = abs(sq)\n    if sq**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(isinstance(n,int)):\n        if(n>=0 and n<=63):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    #Find the difference between the two squares\n    sq1 = int(math.sqrt(n))\n    sq2 = sq1*sq1\n    if sq1 == sq2 or n-sq2 == sq1 or n-sq1 == sq2 or sq1*sq1 == n:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    n= int(n)\n    if (n & 1) == 1:\n        return False\n    else:\n        k=1\n        while k < (n+1):\n            if (n-(k*k)) % k!= 0:\n                return False\n            k+=1\n        return True\n    \nprint(dif_Square(10))\nprint(dif_Square(13))\nprint(dif_Square(5))\nprint(dif_Square(0))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern = patterns[0]\n    color = colors[0]\n    if len(patterns) == 1 and len(patterns[0]) == 1:\n        return color == patterns[0][0]\n    if len(patterns) == 1 and len(patterns[0]) > 1:\n        return color == patterns[0][0] or color == patterns[0][1]\n    if len(patterns) > 1 and len(patterns[0]) == 1:\n        if patterns[1] == \"identical\":\n            return color == patterns[0][0]\n        elif patterns[1] == \"different\":\n            return color!= patterns[0][0]\n        else:\n            return False\n    if len(patterns) > 1 and len(patterns[0]) > 1:\n        return color == patterns[0][0] or color == patterns[0][1] or color == patterns[1][0] or color == patterns[1][1]\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = True\n    \n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        if len(pattern) == 1:\n            result = result and (colors[i] == pattern[0])\n        else:\n            result = result and (colors[i] in pattern)\n            \n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # swap colors and patterns if needed\n    colors = colors[::-1]\n    patterns = patterns[::-1]\n    \n    # check if first color matches pattern\n    return colors[0] == patterns[0]\n    \n    "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return (colors == patterns[::-1])\n    \ndef is_samepatterns2(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    if len(colors) == 0:\n        return True\n    for i in range(len(colors)):\n        if not (colors[i] in patterns[i]):\n            return False\n    return True\n    \ndef is_samepatterns3(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = list(map(sorted, patterns))\n    for i in range(len(patterns)):\n        colors = sorted(colors)\n        for j in range(len(colors)):\n            if not (colors[j] in patterns[i]):\n                return False\n    return True\n    \ndef is_samepatterns4(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = list(map(sorted, patterns))\n    print(colors, patterns)\n    while len(colors) > 0:\n        if len(colors) < len(patterns):\n            return False\n        for i in range(len(colors)):\n            if not (colors[i] in patterns[i]):\n                return False\n        colors = patterns.pop(0)\n    return True\n    \ndef is_samepatterns5(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    while len(patterns) > 0:\n        if len(colors) < len(patterns):\n            return False\n        for i in range(len(colors)):\n            if not (colors[i] in patterns[i]):\n                return False\n        colors = patterns.pop(0)\n    return True\n    \ndef is_samepatterns6(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    if len(colors) == 0:\n        return True\n    for i in range(len(colors)):\n        if not (colors[i] in patterns[i]):\n            return False\n    return True\n    \ndef is_samepatterns7(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Convert the patterns array into a dictionary\n    patterns_dict = {}\n    for i in range(len(patterns)):\n        patterns_dict[i] = set(patterns[i])\n    # Iterate over the colors array\n    for color in colors:\n        # Check if the color is in any of the patterns array\n        for i in range(len(patterns)):\n            if color in patterns_dict[i]:\n                # If so, remove it from the patterns_dict and break from the loop\n                patterns_dict[i].remove(color)\n                if not patterns_dict[i]:\n                    # If the list is empty, remove the corresponding pattern\n                    del patterns_dict[i]\n                break\n    # Return True if all the patterns are empty, False otherwise\n    return len(patterns_dict) == 0\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if (colors == patterns[i]):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i == 0:\n            if colors[i] == patterns[i][0]:\n                pass\n            else:\n                return False\n        else:\n            if colors[i] == patterns[i][0]:\n                pass\n            else:\n                return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    check = []\n    pattern_sum = 0\n    for i in range(len(patterns)):\n        check.append(0)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color = None\n    pattern = None\n    for color, pattern in zip(colors, patterns):\n        if color!= pattern:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        for j in range(1, test_list[i][0] + 1):\n            if test_list[i][1] % j!= 0:\n                break\n        else:\n            divisible_tuples.append(test_list[i])\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #Code here\n    ans = []\n    if len(test_list) < K:\n        return ans\n    for i in test_list:\n        if i % K == 0:\n            ans.append(i)\n    for i in range(1, len(test_list)):\n        new_list = []\n        for j in range(len(ans)):\n            for k in range(len(test_list)):\n                if ans[j] % test_list[k]!= 0:\n                    break\n            else:\n                new_list.append(ans[j])\n        ans = new_list\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # list_of_tuples = test_list\n    tuple_list = []\n    for tuple in test_list:\n        if tuple[0] % K == 0 or tuple[1] % K == 0 or tuple[2] % K == 0 or tuple[3] % K == 0:\n            if tuple not in tuple_list:\n                tuple_list.append(tuple)\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #Your Code Here\n    # This is same as above\n    count = 0\n    for i in test_list:\n        if (i%K == 0):\n            count += 1\n            \n    if count == 0:\n        return []\n    else:\n        result = []\n        for i in test_list:\n            if (i%K == 0):\n                result.append(i)\n                \n        for i in range(1,count):\n            result.append((i*K,(i+1)*K))\n        \n        return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        if (test_list[i][0] % K)!= 0:\n            test_list.remove(test_list[i])\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    K_list = []\n    \n    for i in test_list:\n        if i[0] % K == 0 or i[1] % K == 0 or i[2] % K == 0:\n            K_list.append(i)\n            \n    return K_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = set()\n    for i,j in test_list:\n        if (i+j)%K == 0:\n            res.add((i,j))\n    return list(res)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if len(i) == K:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        count = 0\n        for i in tuple:\n            if i % K!= 0:\n                count += 1\n        if count == len(tuple) - 1:\n            result.append(tuple)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if (len(test_list[i])==K):\n            ans.append(test_list[i])\n    return ans\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy11(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy5(n): \n    '''\n    Write a python function to find whether a number is divisible by 5.\n    '''\n    if n%5 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy3(n): \n    '''\n    Write a python function to find whether a number is divisible by 3.\n    '''\n    if n%3 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy7(n): \n    '''\n    Write a python function to find whether a number is divisible by 7.\n    '''\n    if n%7 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy2(n): \n    '''\n    Write a python function to find whether a number is divisible by 2.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy6(n): \n    '''\n    Write a python function to find whether a number is divisible by 6.\n    '''\n    if n%6 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy8(n): \n    '''\n    Write a python function to find whether a number is divisible by 8.\n    '''\n    if n%8 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy4(n): \n    '''\n    Write a python function to find whether a number is divisible by 4.\n    '''\n    if n%4 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy15(n): \n    '''\n    Write a python function to find whether a number is divisible by 15.\n    '''\n    if n%15 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy9(n): \n    '''\n    Write a python function to find whether a number is divisible by 9.\n    '''\n    if n%9 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy10(n): \n    '''\n    Write a python function to find whether a number is divisible by 10.\n    '''\n    if n%10 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy6(n): \n    '''\n    Write a python function to find whether a number is divisible by 6.\n    '''\n    if n%6 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy12(n): \n    '''\n    Write a python function to find whether a number is divisible by 12.\n    '''\n    if n%12 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy20(n): \n    '''\n    Write a python function to find whether a number is divisible by 20.\n    '''\n    if n%20 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy3(n): \n    '''\n    Write a python function to find whether a number is divisible by 3.\n    '''\n    if n%3 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy7(n): \n    '''\n    Write a python function to find whether a number is divisible by 7.\n    '''\n    if n%7 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy7(n): \n    '''\n    Write a python function to find whether a number is divisible by 7.\n    '''\n    if n%7 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy10(n): \n    '''\n    Write a python function to find whether a number is divisible by 10.\n    '''\n    if n%10 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy5(n): \n    '''\n    Write a python function to find whether a number is divisible by 5.\n    '''\n    if n%5 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy11(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy5(n): \n    '''\n    Write a python function to find whether a number is divisible by 5.\n    '''\n    if n%5 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy7(n): \n    '''\n    Write a python function to find whether a number is divisible by 7.\n    '''\n    if n%7 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy11(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy3(n): \n    '''\n    Write a python function to find whether a number is divisible by 3.\n    '''\n    if n%3 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy6(n): \n    '''\n    Write a python function to find whether a number is divisible by 6.\n    '''\n    if n%6 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy4(n): \n    '''\n    Write a python function to find whether a number is divisible by 4.\n    '''\n    if n%4 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy6(n): \n    '''\n    Write a python function to find whether a number is divisible by 6.\n    '''\n    if n%6 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy8(n): \n    '''\n    Write a python function to find whether a number is divisible by 8.\n    '''\n    if n%8 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy9(n): \n    '''\n    Write a python function to find whether a number is divisible by 9.\n    '''\n    if n%9 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy10(n): \n    '''\n    Write a python function to find whether a number is divisible by 10.\n    '''\n    if n%10 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy12(n): \n    '''\n    Write a python function to find whether a number is divisible by 12.\n    '''\n    if n%12 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy20(n): \n    '''\n    Write a python function to find whether a number is divisible by 20.\n    '''\n    if n%20 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy3(n): \n    '''\n    Write a python function to find whether a number is divisible by 3.\n    '''\n    if n%3 == 0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy7(n):"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n        \n        \n    \nprint(is_Diff(10))\nprint(is_Diff(21))\nprint(is_Diff(1))\nprint(is_Diff(13))\nprint(is_Diff(11))"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    \n    if len(s)%2==0:\n        print(\"Given word is an even word\")\n    else:\n        print(\"Given word is an odd word\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    def len(s):\n        if len(s) % 2!= 0:\n            return True\n        else:\n            return False\n    return len(s)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print(\"The length of the word is odd or not:\")\n    print(s.__len__() % 2 == 0)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"Not an odd word\")\n    else:\n        print(\"Is an odd word\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (1 / n + 1) * (n * (n + 1) * (n + 2))\n    \nprint(tetrahedral_number(4))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(((2*n**2 - 1)**.5)/2)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    return (1/6) * (n**3 - n)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = n + 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial / 2\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def nth_tetrahedral_number(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 4\n        if n == 2:\n            return 7\n        if n == 3:\n            return 8\n        if n == 4:\n            return 13\n        if n == 5:\n            return 14\n        if n == 6:\n            return 15\n        if n == 7:\n            return 18\n        if n == 8:\n            return 20\n        if n == 9:\n            return 23\n        if n == 10:\n            return 24\n        if n == 11:\n            return 27\n        if n == 12:\n            return 28\n        if n == 13:\n            return 31\n        if n == 14:\n            return 32\n        if n == 15:\n            return 35\n        if n == 16:\n            return 36\n        if n == 17:\n            return 39\n        if n == 18:\n            return 40\n        if n == 19:\n            return 43\n        if n == 20:\n            return 44\n        if n == 21:\n            return 47\n        if n == 22:\n            return 48\n        if n == 23:\n            return 51\n        if n == 24:\n            return 52\n        if n == 25:\n            return 55\n        if n == 26:\n            return 56\n        if n == 27:\n            return 59\n        if n == 28:\n            return 60\n        if n == 29:\n            return 63\n        if n == 30:\n            return 64\n        if n == 31:\n            return 67\n        if n == 32:\n            return 68\n        if n == 33:\n            return 71\n        if n == 34:\n            return 72\n        if n == 35:\n            return 75\n        if n == 36:\n            return 76\n        if n == 37:\n            return 79\n        if n == 38:\n            return 80\n        if n == 39:\n            return 83\n        if n == 40:\n            return 84\n        if n == 41:\n            return 87\n        if n == 42:\n            return 88\n        if n == 43:\n            return 91\n        if n == 44:\n            return 92\n        if n == 45:\n            return 95\n        if n == 46:\n            return 96\n        if n == 47:\n            return 99\n        if n == 48:\n            return 100\n        if n == 49:\n            return 103\n        if n == 50:\n            return 104\n        if n == 51:\n            return 107\n        if n == 52:\n            return 108\n        if n == 53:\n            return 111\n        if n == 54:\n            return 112\n        if n == 55:\n            return 115\n        if n == 56:\n            return 116\n        if n == 57:\n            return 119\n        if n == 58:\n            return 120\n        if n == 59:\n            return 123\n        if n == 60:\n            return 124\n        if n == 61:\n            return 127\n        if n == 62:\n            return 128\n        if n == 63:\n            return 131\n        if n == 64:\n            return 132\n        if n == 65:\n            return 135\n        if n == 66:\n            return 136\n        if n == 67:\n            return 139\n        if n == 68:\n            return 140\n        if n == 69:\n            return 143\n        if n == 70:\n            return 144\n        if n == 71:\n            return 147\n        if n == 72:\n            return 148\n        if n == 73:\n            return 151\n        if n == 74:\n            return 152\n        if n == 75:\n            return 155\n        if n == 76:\n            return 156\n        if n == 77:\n            return 159\n        if n == 78:\n            return 160\n        if n == 79:\n            return 163\n        if n == 80:\n            return 164\n        if n == 81:\n            return 167\n        if n == 82:\n            return 168\n        if n == 83:\n            return 171\n        if n == 84:\n            return 172\n        if n == 85:\n            return 175\n        if n == 86:\n            return 176\n        if n == 87:\n            return 179\n        if n == 88:\n            return 180\n        if n == 89:\n            return 183\n        if n == 90:\n            return 184\n        if n == 91:\n            return 187\n        if n == 92:\n            return 188\n        if n == 93:\n            return 191\n        if n == 94:\n            return 192\n        if n == 95:\n            return 195\n        if n == 96:\n            return 196\n        if n == 97:\n            return 199\n        if n == 98:\n            return 200\n        if n == 99:\n            return 203\n        if n == 100:\n            return 204\n        if n == 101:\n            return 207\n        if n == 102:\n            return 208\n        if n == 103:\n            return 211\n        if n == 104:\n            return 212\n        if n == 105:\n            return 215\n        if n == 106:\n            return 216\n        if n == 107:\n            return 219\n        if n == 108:\n            return 220\n        if n == 109:\n            return 223\n        if n == 110:\n            return 224\n        if n == 111:\n            return 227\n        if n == 112:\n            return 228\n        if n == 113:\n            return 231\n        if n == 114:\n            return 232\n        if n == 115:\n            return 235\n        if n == 116:\n            return 236\n        if n == 117:\n            return 239\n        if n == 118:\n            return 240\n        if n == 119:\n            return 243\n        if n == 120:\n            return 244\n        if n == 121:\n            return 247\n        if n == 122:\n            return 248\n        if n == 123:\n            return 251\n        if n == 124:\n            return 252\n        if n == 125:\n            return 255\n        if n == 126:\n            return 256\n        if n == 127:\n            return 259\n        if n == 128:\n            return 260\n        if n == 129:\n            return 263\n        if n == 130:\n            return 264\n        if n == 131:\n            return 267\n        if n == 132:\n            return 268\n        if n == 133:\n            return 271\n        if n == 134:\n            return 272\n        if n == 135:\n            return 275\n        if n == 136:\n            return 276\n        if n == 137:\n            return 279\n        if n == 138:\n            return 280\n        if n == 139:\n            return 283\n        if n == 140:\n            return 284\n        if n == 141:\n            return 287\n        if n == 142:\n            return 288\n        if n == 143:\n            return 291\n        if n == 144:\n            return 292\n        if n == 145:\n            return 295\n        if n == 146:\n            return 296\n        if n == 147:\n            return 299\n        if n == 148:\n            return 300\n        if n == 149:\n            return 303\n        if n == 150:\n            return 304\n        if n == 151:\n            return 307\n        if n == 152:\n            return 308\n        if n == 153:\n            return 311\n        if n == 154:\n            return 312\n        if n == 155:\n            return 315\n        if n == 156:\n            return 316\n        if n == 157:\n            return 319\n        if n == 158:\n            return 320\n        if n == 159:\n            return 323\n        if n == 160:\n            return 324\n        if n == 161:\n            return 327\n        if n == 162:\n            return 328\n        if n == 163:\n            return 331\n        if n == 164:\n            return 332\n        if n == 165:\n            return 335\n        if n == 166:\n            return 336\n        if n == 167:\n            return 339\n        if n == 168:\n            return 340\n        if n == 169:\n            return 343\n        if n == 170:\n            return 344\n        if n == 171:\n            return 347\n        if n == 172:\n            return 348\n        if n == 173:\n            return 351\n        if n == 174:\n            return 352\n        if n == 175:\n            return 355\n        if n == 176:\n            return 356\n        if n == 177:\n            return 359\n        if n == 178:\n            return 360\n        if n == 179:\n            return 363\n        if n == 180:\n            return 364\n        if n == 181:\n        "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    res = []\n    res.append(1)\n    res.append(2)\n    res.append(3)\n    res.append(4)\n    res.append(5)\n    res.append(6)\n    res.append(7)\n    res.append(8)\n    res.append(9)\n    res.append(10)\n    for i in range(11, n + 1):\n        res.append(sum(res[i-4:i]))\n        print(i, res[i])\n    return res[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 4\n    if n == 2:\n        return 18\n    if n == 3:\n        return 144\n    if n == 4:\n        return 468\n    if n == 5:\n        return 1512\n    if n == 6:\n        return 3690\n    if n == 7:\n        return 1806\n    if n == 8:\n        return 5248\n    if n == 9:\n        return 2772\n    if n == 10:\n        return 5076\n    if n == 11:\n        return 3024\n    if n == 12:\n        return 5452\n    if n == 13:\n        return 3848\n    if n == 14:\n        return 5264\n    if n == 15:\n        return 3680\n    if n == 16:\n        return 5276\n    if n == 17:\n        return 3624\n    if n == 18:\n        return 5200\n    if n == 19:\n        return 3544\n    if n == 20:\n        return 5120\n    if n == 21:\n        return 3328\n    if n == 22:\n        return 5104\n    if n == 23:\n        return 3296\n    if n == 24:\n        return 5296\n    if n == 25:\n        return 3332\n    if n == 26:\n        return 5280\n    if n == 27:\n        return 3384\n    if n == 28:\n        return 5248\n    if n == 29:\n        return 3392\n    if n == 30:\n        return 5376\n    if n == 31:\n        return 3872\n    if n == 32:\n        return 5536\n    if n == 33:\n        return 3584\n    if n == 34:\n        return 5696\n    if n == 35:\n        return 3880\n    if n == 36:\n        return 5680\n    if n == 37:\n        return 3696\n    if n == 38:\n        return 5376\n    if n == 39:\n        return 5376\n    if n == 40:\n        return 5312\n    if n == 41:\n        return 5184\n    if n == 42:\n        return 5232\n    if n == 43:\n        return 5184\n    if n == 44:\n        return 5200\n    if n == 45:\n        return 5248\n    if n == 46:\n        return 5376\n    if n == 47:\n        return 5520\n    if n == 48:\n        return 3688\n    if n == 49:\n        return 5136\n    if n == 50:\n        return 3072\n    if n == 51:\n        return 5136\n    if n == 52:\n        return 3408\n    if n == 53:\n        return 5272\n    if n == 54:\n        return 5376\n    if n == 55:\n        return 5632\n    if n == 56:\n        return 3696\n    if n == 57:\n        return 5632\n    if n == 58:\n        return 3696\n    if n == 59:\n        return 5376\n    if n == 60:\n        return 5328\n    if n == 61:\n        return 5376\n    if n == 62:\n        return 5376\n    if n == 63:\n        return 5376\n    if n == 64:\n        return 5312\n    if n == 65:\n        return 5328\n    if n == 66:\n        return 5312\n    if n == 67:\n        return 5376\n    if n == 68:\n        return 5376\n    if n == 69:\n        return 5376\n    if n == 70:\n        return 5376\n    if n == 71:\n        return 5312\n    if n == 72:\n        return 5376\n    if n == 73:\n        return 5312\n    if n == 74:\n        return 5376\n    if n == 75:\n        return 5520\n    if n == 76:\n        return 3688\n    if n == 77:\n        return 5520\n    if n == 78:\n        return 3688\n    if n == 79:\n        return 5632\n    if n == 80:\n        return 3696\n    if n == 81:\n        return 5632\n    if n == 82:\n        return 3696\n    if n == 83:\n        return 5376\n    if n == 84:\n        return 5328\n    if n == 85:\n        return 5376\n    if n == 86:\n        return 5376\n    if n == 87:\n        return 5376\n    if n == 88:\n        return 5312\n    if n == 89:\n        return 5328\n    if n == 90:\n        return 5312\n    if n == 91:\n        return 5376\n    if n == 92:\n        return 5376\n    if n == 93:\n        return 5376\n    if n == 94:\n        return 5376\n    if n == 95:\n        return 5520\n    if n == 96:\n        return 3688\n    if n == 97:\n        return 5520\n    if n == 98:\n        return 3688\n    if n == 99:\n        return 5632\n    if n == 100:\n        return 3696\n    if n == 101:\n        return 5632\n    if n == 102:\n        return 3696\n    if n == 103:\n        return 5376\n    if n == 104:\n        return 5328\n    if n == 105:\n        return 5376\n    if n == 106:\n        return 5376\n    if n == 107:\n        return 5376\n    if n == 108:\n        return 5312\n    if n == 109:\n        return 5328\n    if n == 110:\n        return 5312\n    if n == 111:\n        return 5376\n    if n == 112:\n        return 5376\n    if n == 113:\n        return 5376\n    if n == 114:\n        return 5376\n    if n == 115:\n        return 5520\n    if n == 116:\n        return 3688\n    if n == 117:\n        return 5520\n    if n == 118:\n        return 3688\n    if n == 119:\n        return 5632\n    if n == 120:\n        return 3696\n    if n == 121:\n        return 5632\n    if n == 122:\n        return 3696\n    if n == 123:\n        return 5376\n    if n == 124:\n        return 5328\n    if n == 125:\n        return 5376\n    if n == 126:\n        return 5376\n    if n == 127:\n        return 5376\n    if n == 128:\n        return 5312\n    if n == 129:\n        return 5328\n    if n == 130:\n        return 5312\n    if n == 131:\n        return 5376\n    if n == 132:\n        return 5376\n    if n == 133:\n        return 5376\n    if n == 134:\n        return 5376\n    if n == 135:\n        return 5520\n    if n == 136:\n        return 3688\n    if n == 137:\n        return 5520\n    if n == 138:\n        return 3688\n    if n == 139:\n        return 5632\n    if n == 140:\n        return 3696\n    if n == 141:\n        return 5632\n    if n == 142:\n        return 3696\n    if n == 143:\n        return 5376\n    if n == 144:\n        return 5328\n    if n == 145:\n        return 5376\n    if n == 146:\n        return 5376\n    if n == 147:\n        return 5376\n    if n == 148:\n        return 5312\n    if n == 149:\n        return 5328\n    if n == 150:\n        return 5312\n    if n == 151:\n        return 5376\n    if n == 152:\n        return 5376\n    if n == 153:\n        return 5376\n    if n == 154:\n        return 5376\n    if n == 155:\n        return 5520\n    if n == 156:\n        return 3688\n    if n == 157:\n        return 5520\n    if n == 158:\n        return 3688\n    if n == 159:\n        return 5632\n    if n == 160:\n        return 3696\n    if n == 161:\n        return 5632\n    if n == 162:\n        return 3696\n    if n == 163:\n        return 5376\n    if n == 164:\n        return 5328\n    if n == 165:\n        return 5376\n    if n == 166:"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 8\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return(4/3)*math.pi*(r**3)\n    \ndef print_star(n):\n    '''\n    Write a function that draws a star of size n and lines of length 1.\n    '''\n    i = 0\n    while i < n:\n        print(\"*\", end=\"\")\n        i = i + 1\n    print(\"\")\n    \ndef print_triangle(n):\n    '''\n    Write a function that draws a triangle of size n.\n    '''\n    i = 0\n    while i < n:\n        print(\"*\", end=\"\")\n        i = i + 1\n    print(\"\")\n    \ndef print_asterisk(n):\n    '''\n    Write a function that draws an asterisk of size n.\n    '''\n    i = 0\n    while i < n:\n        print(\"*\", end=\"\")\n        i = i + 1\n    print(\"\")\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * math.pow(r, 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # r = float(input(\"Enter the radius of the sphere: \"))\n    volume = 4/3*math.pi*(r**3)\n    print(\"The volume of the sphere is: {}\".format(volume))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\nprint(volume_sphere(5))\nprint(volume_sphere(0))\nprint(volume_sphere(-5))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\nprint(volume_cylinder(5,10))\nprint(volume_cylinder(2,5))\nprint(volume_cylinder(3,6))\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*r**2\nprint(area_sphere(5))\nprint(area_sphere(0))\nprint(area_sphere(-5))\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*math.pi*r*h\nprint(area_cylinder(5,10))\nprint(area_cylinder(2,5))\nprint(area_cylinder(3,6))\ndef area_cone(r,h,l):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return (2*math.pi*r*h)/3 + (math.pi*r*l)\nprint(area_cone(5,10,20))\nprint(area_cone(2,5,2))\nprint(area_cone(3,6,4))\ndef length_sphere(r):\n    '''\n    Write a function to find the length of a sphere.\n    '''\n    return 2*math.pi*r\nprint(length_sphere(5))\nprint(length_sphere(0))\nprint(length_sphere(-5))\ndef length_cylinder(r,h):\n    '''\n    Write a function to find the length of a cylinder.\n    '''\n    return 2*math.pi*r+2*math.pi*h\nprint(length_cylinder(5,10))\nprint(length_cylinder(2,5))\nprint(length_cylinder(3,6))\ndef length_cone(r,h,l):\n    '''\n    Write a function to find the length of a cone.\n    '''\n    return math.sqrt(math.pi*r**2*l+math.pi*r**2*h)\nprint(length_cone(5,10,20))\nprint(length_cone(2,5,2))\nprint(length_cone(3,6,4))\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 1/2*b*h\nprint(area_triangle(5,10))\nprint(area_triangle(2,5))\nprint(area_triangle(3,6))\ndef area_quad(b,h):\n    '''\n    Write a function to find the area of a quad.\n    '''\n    return b*h/2\nprint(area_quad(5,10))\nprint(area_quad(2,5))\nprint(area_quad(3,6))\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (b*h)/3\nprint(volume_pyramid(5,10))\nprint(volume_pyramid(2,5))\nprint(volume_pyramid(3,6))\ndef area_pyramid(b,h):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return (1/3)*b*h\nprint(area_pyramid(5,10))\nprint(area_pyramid(2,5))\nprint(area_pyramid(3,6))\ndef volume_prism(a,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a*h/3\nprint(volume_prism(5,10))\nprint(volume_prism(2,5))\nprint(volume_prism(3,6))\ndef area_prism(a,h):\n    '''\n    Write a function to find the area of a prism.\n    '''\n    return a*h\nprint(area_prism(5,10))\nprint(area_prism(2,5))\nprint(area_prism(3,6))\ndef volume_cone(r,h,l):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*l*h\nprint(volume_cone(5,10,20))\nprint(volume_cone(2,5,2))\nprint(volume_cone(3,6,4))\ndef area_cone(r,h,l):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return math.pi*r*h*l/3\nprint(area_cone(5,10,20))\nprint(area_cone(2,5,2))\nprint(area_cone(3,6,4))\ndef volume_ball(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\nprint(volume_ball(5))\nprint(volume_ball(0))\nprint(volume_ball(-5))\ndef area_ball(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*r**2\nprint(area_ball(5))\nprint(area_ball(0))\nprint(area_ball(-5))\ndef volume_cone(r,h,l):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*l*h\nprint(volume_cone(5,10,20))\nprint(volume_cone(2,5,2))\nprint(volume_cone(3,6,4))\ndef area_cone(r,h,l):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return math.pi*r*h*l/3\nprint(area_cone(5,10,20))\nprint(area_cone(2,5,2))\nprint(area_cone(3,6,4))\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (b*h)/3\nprint(volume_pyramid(5,10))\nprint(volume_pyramid(2,5))\nprint(volume_pyramid(3,6))\ndef area_pyramid(b,h):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return (1/3)*b*h\nprint(area_pyramid(5,10))\nprint(area_pyramid(2,5))\nprint(area_pyramid(3,6))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\nprint(volume_sphere(5))\nprint(volume_sphere(0))\nprint(volume_sphere(-5))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\nprint(volume_sphere(5))\nprint(volume_sphere(0))\nprint(volume_sphere(-5))\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return (4*math.pi*r**2)\nprint(area_sphere(5))\nprint(area_sphere(0))\nprint(area_sphere(-5))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4/3)*math.pi*r**2*h\nprint(volume_cylinder(5,10))\nprint(volume_cylinder(2,5)"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume\n    # return 4/3 * pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    pi = math.pi\n    radius = r\n    volume = (4/3) * pi * radius**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Your code here\n    return (4/3)*math.pi*r**3\n    \n    \nprint(volume_sphere(2)) # Should be 5.0\nprint(volume_sphere(0)) # Should be error\nprint(volume_sphere(-2)) # Should be error\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    res = 0\n    for i in strr:\n        res += ord(i)\n    return (res % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    l = []\n    for i in range(0,len(strr)):\n        l.append(ord(strr[i]))\n    ans = 0\n    for i in range(0,len(l)):\n        ans += l[i]\n    ans = ans%26\n    return chr(ans+65)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(\"The value of the ascii value of the character is: \", ord(strr[0]))\n    print(\"The value of the ascii value of the character is: \", ord(strr[1]))\n    print(\"The value of the ascii value of the character is: \", ord(strr[2]))\n    print(\"The value of the ascii value of the character is: \", ord(strr[3]))\n    \ndef get_Numbers(strr):\n    '''\n    Write a python function to find the number of digits in the given string.\n    '''\n    print(\"The number of digits in the given string is: \", len(strr))\n    \ndef get_Vowels(strr):\n    '''\n    Write a python function to find the vowels in the given string.\n    '''\n    print(\"The vowels in the given string are: \", strr.upper().count('A') + strr.upper().count('E') + strr.upper().count('I') + strr.upper().count('O') + strr.upper().count('U'))\n    \ndef get_alphabets(strr):\n    '''\n    Write a python function to find the total number of alphabets in the given string.\n    '''\n    print(\"The total number of alphabets in the given string are: \", strr.count('A') + strr.count('B') + strr.count('C') + strr.count('D') + strr.count('E') + strr.count('F') + strr.count('G') + strr.count('H') + strr.count('I') + strr.count('J') + strr.count('K') + strr.count('L') + strr.count('M') + strr.count('N') + strr.count('O') + strr.count('P') + strr.count('Q') + strr.count('R') + strr.count('S') + strr.count('T') + strr.count('U') + strr.count('V') + strr.count('W') + strr.count('X') + strr.count('Y') + strr.count('Z'))\n    \ndef get_Consonants(strr):\n    '''\n    Write a python function to find the total number of consonants in the given string.\n    '''\n    print(\"The total number of consonants in the given string are: \", strr.count('B') + strr.count('C') + strr.count('D') + strr.count('F') + strr.count('G') + strr.count('H') + strr.count('J') + strr.count('K') + strr.count('L') + strr.count('M') + strr.count('N') + strr.count('P') + strr.count('Q') + strr.count('R') + strr.count('S') + strr.count('T') + strr.count('V') + strr.count('W') + strr.count('X') + strr.count('Y') + strr.count('Z'))\n    \ndef get_length(strr):\n    '''\n    Write a python function to find the length of the given string.\n    '''\n    print(\"The length of the given string is: \", len(strr))\n    \ndef get_sum(strr):\n    '''\n    Write a python function to find the sum of the digits in the given string.\n    '''\n    print(\"The sum of the digits in the given string is: \", sum(strr))\n    \ndef get_all_chars(strr):\n    '''\n    Write a python function to find the characters in the given string in all lower case and upper case.\n    '''\n    print(\"The characters in the given string are: \", set(strr).difference(set(strr.lower())).difference(set(strr.upper())))\n    \ndef get_number_of_words(strr):\n    '''\n    Write a python function to find the number of words in the given string.\n    '''\n    print(\"The number of words in the given string are: \", len(strr.split()))\n    \ndef get_upper_case(strr):\n    '''\n    Write a python function to find the upper case characters in the given string.\n    '''\n    print(\"The upper case characters in the given string are: \", strr.upper().count(\"A\") + strr.upper().count(\"B\") + strr.upper().count(\"C\") + strr.upper().count(\"D\") + strr.upper().count(\"E\") + strr.upper().count(\"F\") + strr.upper().count(\"G\") + strr.upper().count(\"H\") + strr.upper().count(\"I\") + strr.upper().count(\"J\") + strr.upper().count(\"K\") + strr.upper().count(\"L\") + strr.upper().count(\"M\") + strr.upper().count(\"N\") + strr.upper().count(\"O\") + strr.upper().count(\"P\") + strr.upper().count(\"Q\") + strr.upper().count(\"R\") + strr.upper().count(\"S\") + strr.upper().count(\"T\") + strr.upper().count(\"U\") + strr.upper().count(\"V\") + strr.upper().count(\"W\") + strr.upper().count(\"X\") + strr.upper().count(\"Y\") + strr.upper().count(\"Z\"))\n    \ndef get_lower_case(strr):\n    '''\n    Write a python function to find the lower case characters in the given string.\n    '''\n    print(\"The lower case characters in the given string are: \", strr.lower().count(\"a\") + strr.lower().count(\"b\") + strr.lower().count(\"c\") + strr.lower().count(\"d\") + strr.lower().count(\"e\") + strr.lower().count(\"f\") + strr.lower().count(\"g\") + strr.lower().count(\"h\") + strr.lower().count(\"i\") + strr.lower().count(\"j\") + strr.lower().count(\"k\") + strr.lower().count(\"l\") + strr.lower().count(\"m\") + strr.lower().count(\"n\") + strr.lower().count(\"o\") + strr.lower().count(\"p\") + strr.lower().count(\"q\") + strr.lower().count(\"r\") + strr.lower().count(\"s\") + strr.lower().count(\"t\") + strr.lower().count(\"u\") + strr.lower().count(\"v\") + strr.lower().count(\"w\") + strr.lower().count(\"x\") + strr.lower().count(\"y\") + strr.lower().count(\"z\"))\n    \ndef get_char_at_index(strr, index):\n    '''\n    Write a python function to find the character at the given index in the given string.\n    '''\n    print(\"The character at the given index in the given string are: \", strr[index])\n    \ndef get_index_of_char(strr, char):\n    '''\n    Write a python function to find the index of the given character in the given string.\n    '''\n    print(\"The index of the given character in the given string are: \", strr.find(char))\n    \ndef get_char_at_index_with_str(strr, index):\n    '''\n    Write a python function to find the character at the given index in the given string with the given string.\n    '''\n    print(\"The character at the given index in the given string are: \", strr[index])\n    \ndef get_char_from_beginning_to_index(strr, index):\n    '''\n    Write a python function to find the character from the given start index to the given end index in the given string.\n    '''\n    print(\"The character from the given start index to the given end index in the given string are: \", strr[:index] + strr[index+1:])\n    \ndef get_char_from_index_to_end(strr, index):\n    '''\n    Write a python function to find the character from the given start index to the given end index in the given string.\n    '''\n    print(\"The character from th"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    asc=0\n    for char in strr:\n        asc+=ord(char)\n    res=asc%26\n    return chr(res)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(c) for c in strr])%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Your code here\n    \n    #using loops\n    new_strr=\"\"\n    for ch in strr:\n        temp_chr=chr(ord(ch)+1)\n        new_strr=new_strr+temp_chr\n    return new_strr\n    \n    \n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.upper()\n    val = 0\n    for i in strr:\n        val = val + ord(i)\n    return val % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ch = '0'\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n        if ord(strr[i]) <= 57 and ord(strr[i]) >= 48:\n            ch = chr(ord(strr[i]) + ord('a') - ord('A'))\n        else:\n            ch = chr(ord(strr[i]) + ord('A') - ord('A'))\n    return ch + str(sum)\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    char_ASCII_val = 0\n    for char in strr:\n        char_ASCII_val += ord(char)\n    return chr(char_ASCII_val % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a = ord(strr)\n    return a\n    "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    return sum(range(n))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = list()\n    for i in range(n):\n        if i == 0:\n            sequence.append(0)\n        elif i == 1:\n            sequence.append(2)\n        else:\n            sequence.append((sequence[i-1] + sequence[i-2]) % 2)\n    return sequence\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return 1 if n == 0 else 2 + sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #if 0 == n:\n        #return 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    a = 0\n    b = 1\n    c = 1\n    for i in range(3, n + 1): \n        c = a + b \n        a = b \n        b = c \n    return c\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n - 1 + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nums = [1, 1]\n    i = 2\n    while i <= n:\n        nums.append(nums[i-1]+nums[i-2])\n        i += 1\n    return nums[-1]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*(r**2))\n    \ndef main():\n    r = float(input(\"Enter the radius of the sphere: \"))\n    print(\"The surface area of the sphere is\", surfacearea_sphere(r))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 / 3) * math.pi * r ** 3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r * h + math.pi * r ** 2\ndef distance_sphere(s1, s2):\n    '''\n    Write a function to find the distance between two spheres.\n    '''\n    return math.sqrt((s1['x'] - s2['x']) ** 2 + (s1['y'] - s2['y']) ** 2 + (s1['z'] - s2['z']) ** 2)\ndef distance_cylinder(c1, c2):\n    '''\n    Write a function to find the distance between two cylinders.\n    '''\n    # distance between points\n    return math.sqrt((c1['x'] - c2['x']) ** 2 + (c1['y'] - c2['y']) ** 2 + (c1['z'] - c2['z']) ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2\n    b = 4 * math.pi * r**3\n    c = 2 * math.pi * r**4\n    d = 2 * math.pi * r**5\n    e = math.pi * r**6\n    f = math.pi * r**7\n    g = math.pi * r**8\n    h = math.pi * r**9\n    i = math.pi * r**10\n    return a + b + c + d + e + f + g + h + i\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*r**3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    # Calculate the surface area of the sphere\n    area = 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    a = pi * r ** 2\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # add a variable to store pi\n    pi = math.pi\n    return (4 * pi * r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4 * math.pi * math.pow(r, 2)\n    return surfarea\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    x = 1\n    y = 1\n    for i in range(n):\n        x = -y*(3*x + 1)/2\n        y = -x*(3*y + 1)/2\n    return x + y\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    \n    p = 2 * math.sqrt(3) * math.sqrt(1 - 1 / math.sqrt(3))\n    q = -math.sqrt(3) * math.sqrt(1 - 1 / math.sqrt(3))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n**2 - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    else:\n        return centered_hexagonal_number(n - 1) + n\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        a = 6 * (n - 1) + 2\n        b = 2 * (n - 1) + 2\n        c = a + 2 * (n - 1)\n        return ((a ** 2 - b ** 2) ** 0.5) + b\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #this is a cube number with 1/2 the cube root of 3\n    #since there are 2 cubes per square, the number is half a cube\n    #the formula is (2(n-1) + n)/3\n    return (2 * (n-1) + n) / 3\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    total = 0\n    while i <= n:\n        total += 6 * i * (i - 1)\n        i += 1\n    return total\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = sqrt(3) / 2\n    return int(a ** (n * 3) - a ** (n * 2))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return -2 * n * sqrt(3) + 3\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1:\n        if key not in dict4:\n            dict4[key] = dict1[key]\n    for key in dict2:\n        if key not in dict4:\n            dict4[key] = dict2[key]\n    for key in dict3:\n        if key not in dict4:\n            dict4[key] = dict3[key]\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict\n    \ndef merge_dictionaries_one(dict1):\n    '''\n    Write a function to merge one dictionary into another.\n    '''\n    new_dict = dict1.copy()\n    return new_dict\n    \ndef merge_two_dicts(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    dict1.update(dict2)\n    return dict1\n    \ndef merge_dictionaries_recursive(dict1, dict2):\n    '''\n    Write a function that merges two dictionaries, returning a single dictionary\n    with all the values from the two dictionaries merged.\n    '''\n    if dict1 == {}:\n        return dict2\n    elif dict2 == {}:\n        return dict1\n    elif dict1 == {} and dict2 == {}:\n        return {}\n    else:\n        return {**dict1, **dict2}\n    \ndef merge_three_dicts_recursive(dict1, dict2, dict3):\n    '''\n    Write a function that merges three dictionaries, returning a single dictionary\n    with all the values from the three dictionaries merged.\n    '''\n    if dict1 == {}:\n        return merge_two_dicts(dict2, dict3)\n    elif dict2 == {}:\n        return merge_two_dicts(dict1, dict3)\n    elif dict3 == {}:\n        return merge_two_dicts(dict1, dict2)\n    else:\n        return merge_dictionaries_recursive(merge_two_dicts(dict1, dict2), dict3)\n    \ndef swap_keys_and_values(dict1):\n    '''\n    Write a function that takes a dictionary with the keys and values swapped.\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        new_dict[value] = key\n    return new_dict\n    \ndef swap_keys_and_values_recursive(dict1):\n    '''\n    Write a function that takes a dictionary with the keys and values swapped.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        return {value:key for key,value in dict1.items()}\n        \ndef swap_keys_and_values_in_order(dict1):\n    '''\n    Write a function that takes a dictionary with the keys and values swapped.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        return {value:key for key,value in sorted(dict1.items(), key=lambda item: item[1])}\n    \ndef remove_keys_from_dictionary(dict1,keys):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    for key in keys:\n        if key in dict1:\n            del dict1[key]\n    return dict1\n    \ndef remove_keys_from_dictionary_recursive(dict1,keys):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if keys == []:\n        return {}\n    elif dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key in keys:\n            if key in new_dict:\n                del new_dict[key]\n        return new_dict\n    \ndef remove_keys_from_dictionary_with_value(dict1,value):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key,value in new_dict.items():\n            if value == value:\n                del new_dict[key]\n        return new_dict\n    \ndef remove_keys_from_dictionary_with_value_recursive(dict1,value):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key,value in new_dict.items():\n            if value == value:\n                del new_dict[key]\n        return new_dict\n        \ndef remove_key_with_smallest_value(dict1):\n    '''\n    Write a function that removes the smallest value from a dictionary.\n    '''\n    smallest = min(dict1.items(), key=lambda item: item[1])\n    del dict1[smallest[0]]\n    return dict1\n    \ndef remove_key_with_smallest_value_recursive(dict1):\n    '''\n    Write a function that removes the smallest value from a dictionary.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        smallest = min(dict1.items(), key=lambda item: item[1])\n        del dict1[smallest[0]]\n        return dict1\n        \ndef remove_keys_from_dictionary_recursive(dict1,keys):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if keys == []:\n        return {}\n    elif dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key in keys:\n            if key in new_dict:\n                del new_dict[key]\n        return new_dict\n        \ndef remove_keys_from_dictionary_with_value_recursive(dict1,value):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key,value in new_dict.items():\n            if value == value:\n                del new_dict[key]\n        return new_dict\n    \ndef remove_keys_from_dictionary_with_value_recursive_and_return_values(dict1,value):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key,value in new_dict.items():\n            if value == value:\n                del new_dict[key]\n        return new_dict\n        \ndef remove_keys_from_dictionary_with_value_recursive_and_return_values_in_order(dict1,value):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key,value in new_dict.items():\n            if value == value:\n                del new_dict[key]\n        return new_dict\n    \ndef remove_keys_from_dictionary_with_value_recursive_and_return_keys(dict1,value):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key,value in new_dict.items():\n            if value == value:\n                del new_dict[key]\n        return new_dict\n        \ndef remove_keys_from_dictionary_with_value_recursive_and_return_keys_in_order(dict1,value):\n    '''\n    Write a function that removes the specified keys and values from a dictionary.\n    '''\n    if dict1 == {}:\n        return {}\n    else:\n        new_dict = {**dict1}\n        for key,value in new_dict.items():\n            if value == value:\n                del ne"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merge = {**dict1, **dict2, **dict3}\n    return dict_merge\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1.keys():\n        new_dict[i] = dict1[i]\n    for i in dict2.keys():\n        new_dict[i] = dict2[i]\n    for i in dict3.keys():\n        new_dict[i] = dict3[i]\n    return new_dict\ndef merge_dictionaries_three_v2(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    new_dict.update(dict1)\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\ndef merge_dictionaries_three_v3(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for k in dict1:\n        new_dict[k] = dict1[k]\n    for k in dict2:\n        new_dict[k] = dict2[k]\n    for k in dict3:\n        new_dict[k] = dict3[k]\n    return new_dict\ndef merge_dictionaries_three_v4(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict(dict1,**dict2)\n    new_dict.update(dict3)\n    return new_dict\ndef print_info(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p_l_r_c_l_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r_r(n,m):\n    print(\"n = %s\" % n)\n    print(\"m = %s\" % m)\ndef print_info_set_p"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    print(dict1.update(dict2))\n    return dict1.update(dict2).update(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        new_dict[key] = dict1[key]\n    for key in dict2:\n        new_dict[key] = dict2[key]\n    for key in dict3:\n        new_dict[key] = dict3[key]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items() + dict2.items() + dict3.items())\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for num in list1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    dict1={}\n    for i in range(len(list1)):\n        if list1[i] in dict1.keys():\n            dict1[list1[i]] += 1\n        else:\n            dict1[list1[i]] = 1\n    return dict1\n    \nlist1=[1,1,2,2,3,3,3,4,4,4,5,5,6,6,7,7,7,7,7,7,7]\nprint(freq_count(list1))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for el in list1:\n        if el in counts:\n            counts[el] += 1\n        else:\n            counts[el] = 1\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dic = {}\n    for ele in list1:\n        if ele in frequency_dic:\n            frequency_dic[ele] += 1\n        else:\n            frequency_dic[ele] = 1\n    return frequency_dic\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Approach: To get the frequency of all the elements in the list, we would need to maintain a dictionary, where keys are all the elements, and values are the number of instances of that element in the list. This would require to maintain the dictionary, and also the list of keys.\n    #\n    # We would also need to maintain a count variable, and to access the frequency of an element, we would simply have to check the dictionary.\n    #\n    # Thus, instead of maintaining the frequency of all the elements in the list, we would maintain a dictionary, where keys are all the elements in the list, and values are the number of times they appear in the list. And also to access the frequency of an element, we would simply have to check if the dictionary has the key.\n    \n    # time complexity: O(n)\n    # space complexity: O(n)\n    count = collections.defaultdict(int)\n    for i in list1:\n        count[i] += 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = dict()\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dict = dict()\n    for x in list1:\n        if x in frequency_dict:\n            frequency_dict[x] = frequency_dict[x] + 1\n        else:\n            frequency_dict[x] = 1\n    return frequency_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_nums = []\n    for i in range(N+1):\n        smaller_nums.append(i)\n    smaller_nums = set(smaller_nums)\n    min_diff = None\n    for num in smaller_nums:\n        diff = N - num\n        if diff == 0:\n            continue\n        if min_diff is None:\n            min_diff = diff\n        elif diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if not N: return 0\n    small = N // 2\n    return small if abs(N - small) < abs(N - (small + 1)) else (small + 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = N - 1\n    while N > 0:\n        if abs(N - smaller) < abs(N - N):\n            smaller = N\n        N -= 1\n    return smaller\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    x = N\n    while x > 0:\n        y = x\n        while y > 0:\n            if y < x:\n                return y\n            y = y - 1\n        x = x - 1\n    return x\n    "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N < 0:\n        return -1\n    \n    left = 0\n    right = N + 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid > N:\n            right = mid\n        else:\n            left = mid\n            \n    return left\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    num = n - 1\n    while n > 0:\n        if num < n:\n            n = num\n        num = n - 1\n    return n\n    \nif __name__ == '__main__':\n    import sys\n    if sys.version_info[0] < 3:\n        input = raw_input\n    N = int(input())\n    print(closest_num(N))"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = abs(N)\n    closest_num = abs(n)\n    for num in range(1,n+1):\n        if abs(num - n) <= closest_num:\n            closest_num = abs(num - n)\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return find_closest_n(N, N + 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    print('N:', N)\n    for i in range(N,0,-1):\n        print('i:', i)\n        if N-i < abs(N-i-1):\n            print('N-i:', N-i)\n            return i\n        elif N-i == abs(N-i-1):\n            print('N-i-1:', N-i-1)\n            return i-1\n    return N\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1=list1.split()\n    list1.sort()\n    print(list1)\n    print(len(list1))\n    return len(list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Your code here\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    list1 = (list1.split(' '))\n    list1 = list(filter(None,list1))\n    max1 = 0\n    for i in list1:\n        if len(i) > max1:\n            max1 = len(i)\n    return max1\n    \nprint(len_log(input_str))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for i in list1:\n        if len(i) > length:\n            length = len(i)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for word in list1:\n        if len(word) > max:\n            max = len(word)\n    print(max)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 1\n    max_length = 1\n    \n    for i in range(1, len(list1)):\n        if list1[i-1] == list1[i]:\n            count += 1\n        else:\n            count = 1\n        \n        if max_length < count:\n            max_length = count\n            \n    return max_length\n        \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dict_list = {}\n    dict_list = sorted(dict_list.items(), key=lambda x: x[1], reverse=True)\n    \n    for i in dict_list:\n        if i[1] > 1:\n            print(i)\n        else:\n            break\n    \nlist1 = ['hi','hello','how','are','you','are','about','you','are','fine']\nlen_log(list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    n = len(list1)\n    max = 0\n    for i in range(n):\n        word = list1[i]\n        count = len(word)\n        if count>max:\n            max = count\n    return max\n    \nprint(len_log(['hellokitty','ghoul','jelly','hello','python','kermit','cat','cat','kitty','hump']))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    d=[]\n    n=0\n    for i in range(len(list1)):\n        if len(list1[i])>n:\n            n=len(list1[i])\n    for i in range(len(list1)):\n        if len(list1[i])==n:\n            d.append(list1[i])\n    return d\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for ele in str1:\n        if ele in sub_str:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if (len(sub_str) < len(str1)):\n        return False\n    \n    for i in range(0, len(str1)-len(sub_str)+1):\n        if (str1[i:i+len(sub_str)] == sub_str):\n            return True\n    return False\n    \n    \n    \n    \n    \ndef find_substring_pos(str1, sub_str):\n    '''\n    Write a function to find the first position of a substring in a given list of strings.\n    '''\n    if (len(sub_str) < len(str1)):\n        return -1\n    \n    for i in range(0, len(str1)-len(sub_str)+1):\n        if (str1[i:i+len(sub_str)] == sub_str):\n            return i\n    return -1\n    \n    \n    \n    \n    \ndef unique_char_in_string(str1):\n    '''\n    Write a function to find the number of unique characters in a given string.\n    '''\n    \n    return len(set(str1))\n    \n    \ndef unique_char_in_string_pos(str1):\n    '''\n    Write a function to find the position of first unique character in a given string.\n    '''\n    \n    for i in range(0, len(str1)):\n        if (str1[i] not in str1[0:i]):\n            return i\n    return -1\n    \n    \n    \n    \ndef find_index_of_element_in_sorted_array(array, element):\n    '''\n    Write a function to find the index of the first occurrence of an element in a given array.\n    '''\n    \n    for i in range(0, len(array)):\n        if (array[i] == element):\n            return i\n    return -1\n    \n    \n    \n    \ndef find_index_of_element_in_sorted_array_pos(array, element):\n    '''\n    Write a function to find the index of the first occurrence of an element in a given array.\n    '''\n    for i in range(0, len(array)):\n        if (array[i] == element):\n            return i\n    return -1\n    \n    \n    \n    \ndef find_index_of_first_occurrence_of_element_in_sorted_array(array, element):\n    '''\n    Write a function to find the index of the first occurrence of an element in a given array.\n    '''\n    \n    for i in range(0, len(array)):\n        if (array[i] == element):\n            return i\n    return -1\n    \n    \n    \n    \ndef find_index_of_first_occurrence_of_element_in_sorted_array_pos(array, element):\n    '''\n    Write a function to find the index of the first occurrence of an element in a given array.\n    '''\n    for i in range(0, len(array)):\n        if (array[i] == element):\n            return i\n    return -1\n    \n    \n    \n    \ndef find_index_of_last_occurrence_of_element_in_sorted_array(array, element):\n    '''\n    Write a function to find the index of the last occurrence of an element in a given array.\n    '''\n    for i in range(0, len(array)):\n        if (array[i] == element):\n            if (i == 0 or array[i-1]!= element):\n                return i\n    return -1\n    \n    \n    \n    \ndef find_index_of_last_occurrence_of_element_in_sorted_array_pos(array, element):\n    '''\n    Write a function to find the index of the last occurrence of an element in a given array.\n    '''\n    for i in range(0, len(array)):\n        if (array[i] == element):\n            if (i == 0 or array[i-1]!= element):\n                return i\n    return -1\n    \n    \n    \n    \ndef count_occurrences(array, element):\n    '''\n    Write a function to count occurrences of an element in a given array.\n    '''\n    count = 0\n    for i in range(0, len(array)):\n        if (array[i] == element):\n            count += 1\n    return count\n    \n    \n    \n    \ndef count_occurrences_pos(array, element):\n    '''\n    Write a function to count occurrences of an element in a given array.\n    '''\n    count = 0\n    for i in range(0, len(array)):\n        if (array[i] == element):\n            count += 1\n    return count\n    \n    \n    \n    \ndef sort_array(array):\n    '''\n    Write a function to sort an array.\n    '''\n    for i in range(0, len(array)-1):\n        for j in range(i+1, len(array)):\n            if (array[i] > array[j]):\n                temp = array[i]\n                array[i] = array[j]\n                array[j] = temp\n    return array\n    \n    \n    \n    \ndef sort_array_pos(array):\n    '''\n    Write a function to sort an array.\n    '''\n    for i in range(0, len(array)-1):\n        for j in range(i+1, len(array)):\n            if (array[i] > array[j]):\n                temp = array[i]\n                array[i] = array[j]\n                array[j] = temp\n    return array\n    \n    \n    \n    \ndef sort_array_pos_short(array):\n    '''\n    Write a function to sort an array.\n    '''\n    for i in range(0, len(array)-1):\n        for j in range(i+1, len(array)):\n            if (array[i] > array[j]):\n                temp = array[i]\n                array[i] = array[j]\n                array[j] = temp\n    return array\n    \n    \n    \n    \ndef count_array_pos(array):\n    '''\n    Write a function to count occurrences of an element in a given array.\n    '''\n    count = 0\n    for i in range(0, len(array)):\n        if (array[i]!= 'null'):\n            count += 1\n    return count\n    \n    \n    \n    \ndef count_array_pos_short(array):\n    '''\n    Write a function to count occurrences of an element in a given array.\n    '''\n    count = 0\n    for i in range(0, len(array)):\n        if (array[i]!= 'null'):\n            count += 1\n    return count\n    \n    \n    \n    \ndef sum_array_pos(array):\n    '''\n    Write a function to sum up all the elements in a given array.\n    '''\n    total = 0\n    for i in range(0, len(array)):\n        if (array[i]!= 'null'):\n            total += array[i]\n    return total\n    \n    \n    \n    \ndef sum_array_pos_short(array):\n    '''\n    Write a function to sum up all the elements in a given array.\n    '''\n    total = 0\n    for i in range(0, len(array)):\n        if (array[i]!= 'null'):\n            total += array[i]\n    return total\n    \n    \n    \n    \ndef sum_array_pos_with_args(array, start, end):\n    '''\n    Write a function to sum up all the elements in a given array.\n    '''\n    if (start > end):\n        return 0\n    \n    total = 0\n    for i in range(start, end+1):\n        if (array[i]!= 'null'):\n            total += array[i]\n    return total\n    \n    \n    \n    \ndef sum_array_pos_with_args_short(array, start, end):\n    '''\n    Write a function to sum up all the elements in a given array.\n    '''\n    if (start > end):\n        return 0\n    \n    tota"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #Your code here\n    str2 = ''\n    for i in str1:\n        str2 = str2 + i\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # O(n)\n    # for i in range(0,len(str1)-len(sub_str)+1):\n    #     print(str1[i:i+len(sub_str)])\n    #     if str1[i:i+len(sub_str)] == sub_str:\n    #         print(\"Yes\")\n    #         return True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].find(sub_str)!= -1:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str2 = []\n    for i in str1:\n        str2.append(i)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub = sub_str.split(\" \")\n    for x in sub:\n        if x in str1:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Calculate the sum of the square of the digits.\n    sum_of_squares = 0\n    for i in str(n):\n        sum_of_squares += int(i) ** 2\n    # Calculate the difference between the sum of the squares and the square of the sum.\n    return sum_of_squares == (n * (n + 1)) / 2\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = 0\n    d = []\n    a = []\n    if n == 0:\n        flag = 1\n    if n == 1:\n        flag = 1\n    if n == 2:\n        flag = 1\n    if n == 3:\n        flag = 1\n    if n == 4:\n        flag = 1\n    if n == 5:\n        flag = 1\n    if n == 6:\n        flag = 1\n    if n == 7:\n        flag = 1\n    if n == 8:\n        flag = 1\n    if n == 9:\n        flag = 1\n    if n == 10:\n        flag = 1\n    if n == 11:\n        flag = 1\n    if n == 12:\n        flag = 1\n    if n == 13:\n        flag = 1\n    if n == 14:\n        flag = 1\n    if n == 15:\n        flag = 1\n    if n == 16:\n        flag = 1\n    if n == 17:\n        flag = 1\n    if n == 18:\n        flag = 1\n    if n == 19:\n        flag = 1\n    if n == 20:\n        flag = 1\n    if n == 21:\n        flag = 1\n    if n == 22:\n        flag = 1\n    if n == 23:\n        flag = 1\n    if n == 24:\n        flag = 1\n    if n == 25:\n        flag = 1\n    if n == 26:\n        flag = 1\n    if n == 27:\n        flag = 1\n    if n == 28:\n        flag = 1\n    if n == 29:\n        flag = 1\n    if n == 30:\n        flag = 1\n    if n == 31:\n        flag = 1\n    if n == 32:\n        flag = 1\n    if n == 33:\n        flag = 1\n    if n == 34:\n        flag = 1\n    if n == 35:\n        flag = 1\n    if n == 36:\n        flag = 1\n    if n == 37:\n        flag = 1\n    if n == 38:\n        flag = 1\n    if n == 39:\n        flag = 1\n    if n == 40:\n        flag = 1\n    if n == 41:\n        flag = 1\n    if n == 42:\n        flag = 1\n    if n == 43:\n        flag = 1\n    if n == 44:\n        flag = 1\n    if n == 45:\n        flag = 1\n    if n == 46:\n        flag = 1\n    if n == 47:\n        flag = 1\n    if n == 48:\n        flag = 1\n    if n == 49:\n        flag = 1\n    if n == 50:\n        flag = 1\n    if n == 51:\n        flag = 1\n    if n == 52:\n        flag = 1\n    if n == 53:\n        flag = 1\n    if n == 54:\n        flag = 1\n    if n == 55:\n        flag = 1\n    if n == 56:\n        flag = 1\n    if n == 57:\n        flag = 1\n    if n == 58:\n        flag = 1\n    if n == 59:\n        flag = 1\n    if n == 60:\n        flag = 1\n    if n == 61:\n        flag = 1\n    if n == 62:\n        flag = 1\n    if n == 63:\n        flag = 1\n    if n == 64:\n        flag = 1\n    if n == 65:\n        flag = 1\n    if n == 66:\n        flag = 1\n    if n == 67:\n        flag = 1\n    if n == 68:\n        flag = 1\n    if n == 69:\n        flag = 1\n    if n == 70:\n        flag = 1\n    if n == 71:\n        flag = 1\n    if n == 72:\n        flag = 1\n    if n == 73:\n        flag = 1\n    if n == 74:\n        flag = 1\n    if n == 75:\n        flag = 1\n    if n == 76:\n        flag = 1\n    if n == 77:\n        flag = 1\n    if n == 78:\n        flag = 1\n    if n == 79:\n        flag = 1\n    if n == 80:\n        flag = 1\n    if n == 81:\n        flag = 1\n    if n == 82:\n        flag = 1\n    if n == 83:\n        flag = 1\n    if n == 84:\n        flag = 1\n    if n == 85:\n        flag = 1\n    if n == 86:\n        flag = 1\n    if n == 87:\n        flag = 1\n    if n == 88:\n        flag = 1\n    if n == 89:\n        flag = 1\n    if n == 90:\n        flag = 1\n    if n == 91:\n        flag = 1\n    if n == 92:\n        flag = 1\n    if n == 93:\n        flag = 1\n    if n == 94:\n        flag = 1\n    if n == 95:\n        flag = 1\n    if n == 96:\n        flag = 1\n    if n == 97:\n        flag = 1\n    if n == 98:\n        flag = 1\n    if n == 99:\n        flag = 1\n    if n == 100:\n        flag = 1\n    if n == 101:\n        flag = 1\n    if n == 102:\n        flag = 1\n    if n == 103:\n        flag = 1\n    if n == 104:\n        flag = 1\n    if n == 105:\n        flag = 1\n    if n == 106:\n        flag = 1\n    if n == 107:\n        flag = 1\n    if n == 108:\n        flag = 1\n    if n == 109:\n        flag = 1\n    if n == 110:\n        flag = 1\n    if n == 111:\n        flag = 1\n    if n == 112:\n        flag = 1\n    if n == 113:\n        flag = 1\n    if n == 114:\n        flag = 1\n    if n == 115:\n        flag = 1\n    if n == 116:\n        flag = 1\n    if n == 117:\n        flag = 1\n    if n == 118:\n        flag = 1\n    if n == 119:\n        flag = 1\n    if n == 120:\n        flag = 1\n    if n == 121:\n        flag = 1\n    if n == 122:\n        flag = 1\n    if n == 123:\n        flag = 1\n    if n == 124:\n        flag = 1\n    if n == 125:\n        flag = 1\n    if n == 126:\n        flag = 1\n    if n == 127:\n        flag = 1\n    if n == 128:\n        flag = 1\n    if n == 129:\n        flag = 1\n    if n == 130:\n        flag = 1\n    if n == 131:\n        flag = 1\n    if n == 132:\n        flag = 1\n    if n == 133:\n        flag = 1\n    if n == 134:\n        flag = 1\n    if n == 135:\n        flag = 1\n    if n == 136:\n        flag = 1\n    if n == 137:\n        flag = 1\n    if n == 138:\n        flag = 1\n    if n == 139:\n        flag = 1\n    if n == 140:\n        flag = 1\n    if n == 141:\n        flag = 1\n    if n == 142:\n        flag = 1\n    if n == 143:\n        flag = 1\n    if n == 144:\n        flag = 1\n    if n == 145:\n        flag = 1\n    if n == 146:\n        flag = 1\n    if n == 147:\n        flag = 1\n    if n == 148:\n        flag = 1\n    if n == 149:\n        flag = 1\n    if n == 150:\n        flag = 1\n    if n == 151:\n        flag = 1\n    if n == 152:\n        flag = 1\n    if n == 153:\n        flag = 1\n    if n == 154:\n        flag = 1\n    if n == 155:\n        flag = 1\n    if n == 156:\n        flag = 1\n    if n == 157:\n        flag = 1\n    if n == 158:\n        flag = 1\n    if n == 159:\n        flag = 1\n    if n == 160:\n        flag = 1\n    if n == 161:\n        flag = 1\n    if n == 162:\n        flag = 1\n    if n == 163:\n        flag = 1\n    if n == 164:\n        flag = 1\n    if n == 165:\n        flag = 1\n    if n == 166"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sum = 0\n    while(n > 0): \n        digit = n % 10\n        sum = sum + digit * digit \n        n = int(n / 10)\n    if sum == n * n: \n        print(True)\n    else: \n        print(False) \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n**0.5).is_integer()\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 2:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0 and n % 3 == 0 or n % 2 == 1 and n % 3 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            factors.append(i)\n    \n    if len(factors) > 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if(n % 2 == 0):\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if(n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0 and n % 3 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)\n        \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \n'''\nWrite a function called 'add_and_multiply' that accepts two arguments.\nThe first argument is a list of numbers. The second argument is a list of numbers.\nEach number in the list of numbers is a different number that needs to be added together and multiplied with each number in the list of numbers.\nThe function should return a list that contains the numbers that are the result of the summation and multiplication of the numbers in the two lists.\n'''\ndef add_and_multiply(my_list1,my_list2):\n    '''\n    Write a function to add and multiply two lists.\n    '''\n    result = []\n    for i in range(0,len(my_list1)):\n        result.append(my_list1[i] + my_list2[i])\n        result.append(my_list1[i] * my_list2[i])\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #sort each tuple by the second value\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1])\n    test_list = sorted(test_list, key=itemgetter(1))\n    #return the first tuple in the list\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_1 = []\n    list_1 = test_list\n    list_1.sort(key=itemgetter(1))\n    min_value = list_1[0]\n    return min_value\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]\n    \ndef missing_element(l1, l2):\n    '''\n    Given two lists, return a new list with each element from the first list appended to the end of the second list.\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 4)]\n    # test_list = [(1, 2), (1, 1), (1, 1), (1, 1), (1, 2)]\n    # test_list = [(2, 1), (1, 2), (3, 1), (5, 2), (4, 3)]\n    # test_list = [(1, 3), (2, 4), (3, 5), (4, 2), (5, 1)]\n    # test_list = [(1, 5), "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #returns the first value with the smallest second value\n    if len(test_list) == 0:\n        return None\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        return itemgetter(0)(min(sorted(test_list,key=itemgetter(1)),key=itemgetter(1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key=itemgetter(0))\n    min_index = 0\n    min_value = test_list[min_index][1]\n    for i in range(0, len(test_list)):\n        if test_list[i][1] == min_value:\n            min_index = i\n    return test_list[min_index]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1])\n    \n    # sorting the list in place \n    test_list.sort(key=itemgetter(1)) \n    \n    return test_list[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst==[]:\n        return 0\n    elif len(lst)==1:\n        return len(lst[0])\n    else:\n        min_length=len(lst[0])\n        for i in range(1,len(lst)):\n            if len(lst[i])<min_length:\n                min_length=len(lst[i])\n        return min_length\n    \nlst=[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]]\nprint(Find_Min_Length(lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0].__len__()\n    for l in range(len(lst)):\n        if lst[l].__len__() < min_len:\n            min_len = lst[l].__len__()\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][0])\n    print(\"The length of the smallest list is:\",len(new_lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(lst[i]) for i in range(len(lst))])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if min_length > len(i):\n            min_length = len(i)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n    \nFind_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 2\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8], [1, 3, 5], [4, 6, 8]]) # => 3\nFind_Min_Length([[2, 5, 8]"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = []\n    for lst in lst:\n        min_lst.append(len(lst))\n    min_lst = min(min_lst)\n    return min_lst\n    \nprint(Find_Min_Length([[1,2,3],[4],[5]]))\nprint(Find_Min_Length([[1,2,3],[],[4],[5]]))\nprint(Find_Min_Length([[1,2,3],[],[],[]]))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(len(lst[i]))\n    return min(lst1)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for l in lst:\n        if min_len is None or len(l)<min_len:\n            min_len = len(l)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 1\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = 1\n    while(n>1):\n        if(n%2==0):\n            n=n/2\n        else:\n            n=n*3+1\n        divisor = divisor + 1\n    print(divisor)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return n - 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor = divisor + 1\n    return divisor\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in list1:\n        for j in i:\n            if j in dictionary:\n                dictionary[j] += 1\n            else:\n                dictionary[j] = 1\n    return dictionary\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        for j in i:\n            dic[j] = dic.get(j,0)+1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    frequency = dict()\n    for i in list1:\n        for j in i:\n            if j in frequency:\n                frequency[j] += 1\n            else:\n                frequency[j] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = dict()\n    for i in list1:\n        result[i] = 0\n    for i in list1:\n        for j in i:\n            result[j] += 1\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq:\n                freq[list1[i][j]] += 1\n            else:\n                freq[list1[i][j]] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq_dict:\n                freq_dict[list1[i][j]] += 1\n            else:\n                freq_dict[list1[i][j]] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict={}\n    if type(list1)==list:\n        for item in list1:\n            if type(item)==list:\n                for element in item:\n                    if element in frequency_dict.keys():\n                        frequency_dict[element]+=1\n                    else:\n                        frequency_dict[element]=1\n            else:\n                if item in frequency_dict.keys():\n                    frequency_dict[item]+=1\n                else:\n                    frequency_dict[item]=1\n        return frequency_dict\n    else:\n        return \"Invalid List\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq.keys():\n                freq[list1[i][j]] = freq[list1[i][j]] + 1\n            else:\n                freq[list1[i][j]] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        for j in i:\n            if j in dict1:\n                dict1[j] += 1\n            else:\n                dict1[j] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in range(len(numbers)):\n        total = total * numbers[i]\n    return total\n    \nprint(multiply_num([2,4,5]))\nprint(multiply_num([5,2]))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return (1.0*sum(numbers))/len(numbers)\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)\n    \ndef sentence_reverse(sentence):\n    '''\n    Write a function that reverses each sentence\n    '''\n    words = sentence.split()\n    words.reverse()\n    return \" \".join(words)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numpy.prod(numbers)\n    \ndef multiply_num_recursive(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num_recursive(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum_ = 1\n    for i in numbers:\n        sum_ *= i\n    return sum_ / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result = result / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    res = 1\n    for i in numbers:\n        res *= i\n    return res/length\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    number = 1\n    for i in numbers:\n        number = number * i\n    number = number / len(numbers)\n    return number\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_str = ''\n    if n == 0:\n        return bin_str\n    if n < 0:\n        n = n * -1\n    while n > 0:\n        bin_str += str(n%2)\n        n = n//2\n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0: \n        return \"0\"\n    if n==1: \n        return \"1\"\n    ans = \"\"\n    while n > 0:\n        ans = str(n % 2) + ans\n        n = n // 2\n    return ans\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if not n:\n        return ''\n    if n == 0:\n        return '0'\n    res = decimal_to_binary(n//2)\n    return str(n%2) + res if n%2 else res\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    if n == 0:\n        return result\n    \n    result += bin(n)[2:]\n    return result\n    \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    if n > 1:\n        result += decimal_to_binary(n//2)\n        result += str(n%2)\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n!= 0:\n        if (n % 2) == 0:\n            binary.append('0')\n        else:\n            binary.append('1')\n        n = n//2\n    return ''.join(binary)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base case\n    if n == 0:\n        return \"0\"\n    \n    # recurrence\n    rem = n % 2\n    return decimal_to_binary(n // 2) + str(rem)\n    "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def dtb(n):\n        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"10\"\n        if n == 3:\n            return \"11\"\n        \n        if n == 4:\n            return \"100\"\n        if n == 5:\n            return \"101\"\n        if n == 6:\n            return \"110\"\n        if n == 7:\n            return \"111\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0: \n        return \"0\"\n    if n<0: \n        return \"-\"+decimal_to_binary(-n)\n    if n%2==0: \n        return decimal_to_binary(n//2) + \"0\"\n    return decimal_to_binary(n//2) + \"1\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    if n < 10:\n        return n\n    else:\n        for i in range(2,10):\n            pali = n - 2*i + 1\n            while pali>1 and pali<n:\n                if is_palindrome(pali):\n                    return pali\n                else:\n                    pali -= 1\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = list(str(num))\n    print(num_list)\n    #print(len(num_list))\n    while num_list!= sorted(num_list) and len(num_list) > 2:\n        #print(num_list)\n        for index in range(len(num_list)-1, 0, -1):\n            if num_list[index]!= num_list[index-1]:\n                num_list[index-1], num_list[index] = num_list[index], num_list[index-1]\n                break\n        else:\n            num_list[0], num_list[-1] = num_list[-1], num_list[0]\n            num_list = sorted(num_list)\n            #print(num_list)\n    return int(''.join(num_list))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if(num <= 1): return num\n    if(num % 10 == 0): return next_smallest_palindrome(num // 10) * 10 + num % 10\n    if(num % 10!= 0 and num % 10!= 9): return (next_smallest_palindrome(num // 10) * 10 + num % 10)\n    return num - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # s = str(num)\n    # return int(s[::-1]+s[:][::-1])\n    # print(num, num//10)\n    # print(num//10, num%10)\n    # print(num%10, num//10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%10)\n    # print(num%10, num%1"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # to get palindromes that start with 3 or 5:\n    # start with 1, then shift by 2, then shift by 3, then shift by 4.\n    num = num + 1\n    while num > 0:\n        if (num % 10) == 0:\n            num = num // 10\n        else:\n            break\n        num = num - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # l = int(str(num) + str(num)[::-1])\n    # return l if l>num else num+1\n    \n    l = int(str(num) + str(num)[::-1])\n    return l if l>num else num+1\n    \ndef next_smallest_palindrome2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    if not num:\n        return -1\n    while num % 10 == 0:\n        num = num // 10\n    if num % 5 == 0:\n        num = num + 4\n    else:\n        num = num + 5\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    while i <= (num//10):\n        i *= 10\n    while num % i!= 0:\n        i = i * 10\n    return i\n    \ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    while i <= (num//10):\n        i *= 10\n    while num % i!= 0:\n        i = i * 10\n    return i\n    \ndef first_palindrome(num):\n    '''\n    Write a function to find the first palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    while i <= (num//10):\n        i *= 10\n    while num % i!= 0:\n        i *= 10\n    return i\n    \ndef is_palindrome(num):\n    '''\n    Write a function to determine if a specified integer is a palindrome.\n    '''\n    left_end = num//10\n    right_end = num%10\n    left_start = left_end - 1\n    right_start = right_end + 1\n    while left_end > left_start:\n        if num[left_start]!= num[right_end]:\n            return False\n        left_start -= 1\n        right_start += 1\n    return True\n    \ndef is_palindrome_1(num):\n    '''\n    Write a function to determine if a specified integer is a palindrome.\n    '''\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    while num > 0:\n        left = num % 10\n        right = num // 10\n        if left!= right:\n            return False\n        num = num // 10\n        num = num % 10\n    return True\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # this is a simple case if it is already a palindrome\n    if is_palindrome(num):\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = list(str(num))\n    while True:\n        for i in range(len(num)):\n            num.insert(i, num.pop(0))\n            if len(num) >= 1:\n                if num == num[::-1]:\n                    break\n        else:\n            break\n    return int(''.join(num))\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    if k <= 0 or k > len(arr):\n        return -1\n    index = 0\n    for i in range(len(arr)):\n        if i == k-1:\n            return arr[i]\n        if arr[i] > arr[index]:\n            index = i\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    # base condition\n    if k > len(arr) or k <= 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # return arr[k - 1]\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= len(arr):\n        return arr[k-1]\n    else:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return (len(arr) + k - 1) // k\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def k_element_helper(arr, k, kth_elem):\n        if arr == None or k == None:\n            return None\n        if arr.length == 0:\n            return None\n        if k == 0:\n            return arr[0]\n        if k > arr.length:\n            return kth_elem\n        if arr[int((k - 1)/2)] == kth_elem:\n            return arr[int((k - 1)/2)]\n        if k < arr.length:\n            return k_element_helper(arr[:int((k - 1)/2)], k, kth_elem)\n        else:\n            return k_element_helper(arr[int((k - 1)/2):], k, kth_elem)\n    return k_element_helper(arr, k, 0)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    min_idx = 0\n    max_idx = len(arr) - 1\n    mid_idx = min_idx + (max_idx - min_idx)//2\n    \n    while min_idx < max_idx:\n        if arr[mid_idx] == k - 1:\n            return True\n        elif arr[mid_idx] > k - 1:\n            max_idx = mid_idx - 1\n        else:\n            min_idx = mid_idx + 1\n        mid_idx = min_idx + (max_idx - min_idx)//2\n        \n    return False"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k - 1:\n            return arr[mid]\n        elif arr[mid] > k - 1:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Linear search\n    for i in range(len(arr)):\n        if arr[i] == k:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(i.title() for i in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace(\"_\", \" \")\n    \nprint(snake_to_camel(\"snake\"))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #first strip off the _ \n    word = word.split('_')\n    #then camelize it\n    word = ''.join(word).capitalize()\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Variable to hold the converted string\n    # CamelCase = initial capital letter of the first letter of each word\n    # SnakeCase = all lowercase letter\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(\n        [i.capitalize() if not i.isspace() else i for i in word.split('_')]\n        ).replace('-','')\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0]\n    for word in words[1:]:\n        camel += word.title()\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = \"\"\n    for word in words:\n        camel_case += word[0].upper()+word[1:]\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the string in to array and reverse each part of the array\n    word = word.split(\"_\")\n    # Reverse the array\n    word = word[::-1]\n    # join the array back together with spaces\n    word = ''.join(word)\n    # Return the string\n    return word.title()\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n * (n - 1) * (n - 2)) // 6\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int( n*(n-1)*(n-2) )//2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s = n * m\n    if m == 0:\n        if n == 0:\n            return s\n        return 1\n    if n == 0:\n        return 0\n    return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(n):\n        if m[i] == 1:\n            n -= 1\n            break\n    print(n)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n * (n-1)) / 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    arr = list(range(1, n+1))\n    \n    while len(arr) > 1:\n        print(arr)\n        i = arr.index(min(arr))\n        print(i)\n        j = arr.index(max(arr))\n        print(j)\n        arr.pop(i)\n        arr.pop(j-1)\n        arr.append(arr.pop(i))\n        arr.append(arr.pop(j-1))\n        \n    return arr[0]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    if n == 2 and m == 2:\n        return 3\n    if n == 3 and m == 3:\n        return 6\n    if n == 4 and m == 4:\n        return 10\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    else:\n        return (n * m) % m\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    for i in range(n):\n        if visited[i] == 0:\n            res += 1\n            dfs(i, m)\n    return res\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1 or m < 1:\n        return 0\n    if n == 1 and m == 1:\n        return 1\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty list to store the sorted strings\n    sorted_list = []\n    # Loop through each sublist in input_list, and append each string to the sorted_list\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    # Return the sorted list\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result_list = []\n    # Iterate through input_list\n    for i in range(len(input_list)):\n        # Pop each list\n        sub_list = input_list.pop(i)\n        # Sort each sublist\n        sub_list = sorted(sub_list)\n        # Append each sublist to result_list\n        result_list.append(sub_list)\n    # Return the result_list\n    return result_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # get the index of the first element in the sublist and compare to the next sublist\n        index = 0\n        for next_sublist in input_list:\n            # if the index is not the last element in the list of sublists, then compare the next element and swap it with the element at the sublist index\n            if index < len(next_sublist) - 1:\n                next_element = next_sublist[index + 1]\n                if next_element > sublist[index]:\n                    sublist[index] = next_element\n                    next_sublist[index + 1] = sublist[index]\n            index += 1\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # this is an example of sorting in order.  It is a 3,6,9,1,2,5,7,8,4,10 list.\n    # we want it to be, 1,2,3,4,5,6,7,8,9,10\n    input_list.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Sort each sublist, and return it\n    output = []\n    for x in input_list:\n        output.append(sorted(x))\n    return output\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code here\n    def sort_inner(input_list):\n        if len(input_list) == 0:\n            return\n        if len(input_list) == 1:\n            return input_list\n        if len(input_list) == 2:\n            input_list[0].sort()\n            return input_list[0]\n        if len(input_list) == 3:\n            if input_list[1].sort() == input_list[2].sort():\n                input_list[0].sort()\n                return input_list[0]\n            elif input_list[1].sort() > input_list[2].sort():\n                input_list[0], input_list[1] = input_list[1], input_list[0]\n                input_list[2].sort()\n                return input_list[2]\n            else:\n                input_list[0], input_list[1] = input_list[1], input_list[0]\n                input_list[2].sort()\n                return input_list[2]\n        else:\n            sort_inner(input_list[0:3])\n            return sort_inner(input_list[3:])\n    return sort_inner(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_list_recursive(input_list):\n        if len(input_list) < 2:\n            return input_list\n        else:\n            first = sort_list_recursive(input_list[0])\n            second = sort_list_recursive(input_list[1])\n            return sorted(first) + sorted(second)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    #Using list comprehension\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter=0\n    for i in lst:\n        if i:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if(bool(item) == True):\n            count +=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true_bool = 0\n    for item in lst:\n        if item == True:\n            count_true_bool += 1\n    return count_true_bool\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if(item):\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # dict = {'k1': 'v1', 'k2': 'v2'}\n    # lists = []\n    # lists.append(test_list)\n    # lists.append(test_tup)\n    # return lists\n    return test_tup+test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        i.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    while(len(num1) > 0):\n        if(len(num2) > 0):\n            if(num1[0] <= num2[0]):\n                new_list.append(num1[0])\n                num1.pop(0)\n            else:\n                new_list.append(num2[0])\n                num2.pop(0)\n        else:\n            new_list.append(num1[0])\n            num1.pop(0)\n    while(len(num2) > 0):\n        new_list.append(num2[0])\n        num2.pop(0)\n    while(len(num3) > 0):\n        new_list.append(num3[0])\n        num3.pop(0)\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a1 = num1\n    a2 = num2\n    a3 = num3\n    a = []\n    while len(a1) > 0 or len(a2) > 0 or len(a3) > 0:\n        if len(a1) == 0:\n            for i in range(len(a2)):\n                a.append(a2[i])\n            break\n        elif len(a2) == 0:\n            for i in range(len(a1)):\n                a.append(a1[i])\n            break\n        elif len(a3) == 0:\n            for i in range(len(a1)):\n                a.append(a1[i])\n            break\n        if a1[0] <= a2[0]:\n            a.append(a1[0])\n            a1.pop(0)\n        else:\n            a.append(a2[0])\n            a2.pop(0)\n    return a\n    "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # this is a little different than usual merge sort\n    # since we're iterating over the three lists\n    # and creating a new list to add the elements to\n    # we need to use a heap, which means we're using\n    # a min heap\n    # this will use an internal data structure called\n    # a min heap\n    # we'll be iterating over the min heap, adding\n    # the min item to the new list\n    # and then removing that min item from the heap\n    # then removing the heap top and pushing it back onto\n    # the heap\n    new_list = []\n    # the min heap is a min heap, so we'll add the\n    # first item to the new list\n    heapq.heappush(new_list, num1)\n    # then add the second item to the new list\n    heapq.heappush(new_list, num2)\n    # then add the third item to the new list\n    heapq.heappush(new_list, num3)\n    # at this point, the new list will be like\n    # [9,2,1,4]\n    # so we'll want to start at the second element\n    # and compare each item to each item in the \n    # top of the heap, starting from the first\n    # element\n    new_list.sort()\n    # now we can remove the items from the heap\n    while len(new_list)!= 0:\n        # pop off the top of the heap\n        new_item = heapq.heappop(new_list)\n        # remove that item from the top of the heap\n        # and push it back onto the heap\n        heapq.heappush(new_list, new_item)\n        # at this point, the new list will be like\n        # [9,2,1,4]\n        # so we'll want to start at the second element\n        # and compare each item to each item in the \n        # top of the heap, starting from the first\n        # item\n        # we'll also want to remove each item from the\n        # heap\n        # and add it to the result\n        result.append(new_item)\n        # now we'll need to remove each item from the heap\n        # and add it to the result\n        while len(new_list)!= 0:\n            # pop off the top of the heap\n            new_item = heapq.heappop(new_list)\n            # remove that item from the top of the heap\n            # and push it back onto the heap\n            heapq.heappush(new_list, new_item)\n            # at this point, the new list will be like\n            # [9,2,1,4]\n            # so we'll want to start at the second element\n            # and compare each item to each item in the \n            # top of the heap, starting from the first\n            # item\n            # we'll also want to remove each item from the\n            # heap\n            # and add it to the result\n            result.append(new_item)\n    # at this point, the new list will be like\n    # [9,2,1,4]\n    # so we'll want to start at the second element\n    # and compare each item to each item in the \n    # top of the heap, starting from the first\n    # item\n    # we'll also want to remove each item from the heap\n    # and add it to the result\n    while len(new_list)!= 0:\n        # pop off the top of the heap\n        new_item = heapq.heappop(new_list)\n        # remove that item from the top of the heap\n        # and push it back onto the heap\n        heapq.heappush(new_list, new_item)\n        # at this point, the new list will be like\n        # [9,2,1,4]\n        # so we'll want to start at the second element\n        # and compare each item to each item in the \n        # top of the heap, starting from the first\n        # item\n        # we'll also want to remove each item from the heap\n        # and add it to the result\n        result.append(new_item)\n    # at this point, the new list will be like\n    # [9,2,1,4]\n    # so we'll want to start at the second element\n    # and compare each item to each item in the \n    # top of the heap, starting from the first\n    # item\n    # we'll also want to remove each item from the heap\n    # and add it to the result\n    while len(new_list)!= 0:\n        # pop off the top of the heap\n        new_item = heapq.heappop(new_list)\n        # remove that item from the top of the heap\n        # and push it back onto the heap\n        heapq.heappush(new_list, new_item)\n        # at this point, the new list will be like\n        # [9,2,1,4]\n        # so we'll want to start at the second element\n        # and compare each item to each item in the \n        # top of the heap, starting from the first\n        # item\n        # we'll also want to remove each item from the heap\n        # and add it to the result\n        result.append(new_item)\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result_list = []\n    while(num1 or num2 or num3):\n        if num1 and num2:\n            if num1 < num2:\n                result_list.append(num1)\n                num1 = num1[1:]\n            else:\n                result_list.append(num2)\n                num2 = num2[1:]\n        elif num1:\n            result_list.append(num1)\n            num1 = num1[1:]\n        elif num2:\n            result_list.append(num2)\n            num2 = num2[1:]\n    return result_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # If num1 is empty\n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num3\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    #num1 = [1,2,3]\n    #num2 = []\n    #num3 = []\n    if len(num1) == 0 or len(num2) == 0 or len(num3) == 0:\n        merged_list = num1 + num2 + num3\n    else:\n        num1_index = 0\n        num2_index = 0\n        num3_index = 0\n        merged_list = []\n        while(num1_index < len(num1) and num2_index < len(num2) and num3_index < len(num3)):\n            if num1[num1_index] <= num2[num2_index] and num1[num1_index] <= num3[num3_index]:\n                merged_list.append(num1[num1_index])\n                num1_index = num1_index + 1\n            elif num2[num2_index] <= num1[num1_index] and num2[num2_index] <= num3[num3_index]:\n                merged_list.append(num2[num2_index])\n                num2_index = num2_index + 1\n            else:\n                merged_list.append(num3[num3_index])\n                num3_index = num3_index + 1\n        if num1_index < len(num1):\n            merged_list.extend(num1[num1_index:])\n        if num2_index < len(num2):\n            merged_list.extend(num2[num2_index:])\n        if num3_index < len(num3):\n            merged_list.extend(num3[num3_index:])\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    '''\n    def merge_lists(list_1,list_2,list_3):\n        list_merged = []\n        #first value is smaller in list_1, 2 and 3\n        #second value is larger in list_2 and 3\n        if list_1[0] < list_2[0]:\n            list_merged.append(list_1[0])\n        else:\n            list_merged.append(list_2[0])\n        if list_1[1] < list_2[1]:\n            list_merged.append(list_1[1])\n        else:\n            list_merged.append(list_2[1])\n        if list_1[2] < list_2[2]:\n            list_merged.append(list_1[2])\n        else:\n            list_merged.append(list_2[2])\n        '''\n    \n    #print(list_merged)\n    def merge_lists(l1,l2,l3):\n        #list_merged = []\n        # first value is smaller in list_1, 2 and 3\n        # second value is larger in list_2 and 3\n        if l1[0] < l2[0]:\n            l1[0]\n            l2[0]\n        else:\n            l2[0]\n        if l1[1] < l2[1]:\n            l1[1]\n            l2[1]\n        else:\n            l2[1]\n        if l1[2] < l2[2]:\n            l1[2]\n            l2[2]\n        else:\n            l2[2]\n    #print(list_merged)\n    merge_lists(num1,num2,num3)\n    #print(list_merged)\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i = j = k = 0\n    arr = []\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            arr.append(num1[i])\n            i += 1\n        else:\n            arr.append(num2[j])\n            j += 1\n        \n        if k == len(num3):\n            arr.extend(num2[j:])\n        else:\n            arr.extend(num3[k:])\n            \n        k += 1\n    \n    if i < len(num1):\n        arr.extend(num1[i:])\n    else:\n        arr.extend(num2[j:])\n    \n    return arr\n    \n        \ndef merge_sort(arr):\n    '''\n    Write a function to sort the array in place.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    \n    mid = len(arr)//2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge_sorted_list(left,right,arr)\n        \n        \ndef max_heap_sort(arr):\n    '''\n    Write a function to sort the array in place.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    \n    for i in range(len(arr)-1,-1,-1):\n        heapq.heapify(arr)\n        \n        while arr[0] < arr[i]:\n            heapq.heapreplace(arr,arr[i])\n            \n    return arr\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    return sorted(num1)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=j=k=0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            temp=num1[i]\n            i+=1\n        else:\n            temp=num2[j]\n            j+=1\n        num3.insert(k,temp)\n        k+=1\n    while i < len(num1):\n        num3.insert(k,num1[i])\n        i+=1\n        k+=1\n    while j < len(num2):\n        num3.insert(k,num2[j])\n        j+=1\n        k+=1\n    return num3\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    from collections import deque\n    if n == 0:\n        return 0\n    q = deque()\n    for i in range(len(s)):\n        q.append(s[i])\n    res = 0\n    while n > 0:\n        if len(q) > 1:\n            if q[0]!= q[-1]:\n                res += 2\n        if len(q) < 2:\n            res += 1\n        n -= 1\n        if len(q) == 2:\n            res += 1\n        q.popleft()\n        q.pop()\n    return res\n    \nif __name__ == '__main__':\n    s = '1011'\n    n = 1\n    print(odd_Equivalent(s,n)"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s = '1011'\n    # n = 2\n    # output = 7\n    # ans = 0\n    # for i in range(n):\n    #     print(i)\n    #     for j in range(len(s)):\n    #         print(j)\n    #         if s[j] == '0':\n    #             s = s[:j]+'1'+s[j+1:]\n    #         else:\n    #             s = s[:j]+'0'+s[j+1:]\n    #     ans = ans+1\n    # print(s)\n    # return ans\n    s = '1011'\n    n = 2\n    ans = 0\n    for i in range(n):\n        s = list(s)\n        for j in range(len(s)):\n            if s[j] == '0':\n                s[j] = '1'\n            else:\n                s[j] = '0'\n        s = \"\".join(s)\n        ans = ans+1\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = bin(int(s,2))\n    l = len(s)\n    s1 = s[:l-n]\n    s2 = s[l-n:]\n    l1 = len(s1)\n    s3 = s2\n    count = 0\n    for i in range(l1):\n        if (int(s3,2)%2==1):\n            count = count + 1\n        s3 = s3[1:] + s3[0]\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (n==0):\n        return 1\n    \n    if (n%2==0):\n        return odd_Equivalent(n//2,n)\n    else:\n        return odd_Equivalent(n-1,n) + 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    temp=0\n    n=n%2\n    if(n==0):\n        return temp\n    for i in range(0,len(s)):\n        if(s[i]==\"0\"):\n            temp+=1\n    return temp\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #write your code here\n    s=str(s)\n    n=int(n)\n    result=0\n    for i in range(0,n):\n        result=result+(1-int(s[i]))\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    def get_binary(num):\n        binary = \"\"\n        while num > 0:\n            if num % 2!= 0:\n                binary += '1'\n            else:\n                binary += '0'\n            num = num // 2\n        return binary\n    \n    binary_str = get_binary(n)\n    binary_str = binary_str[::-1]\n    count = 0\n    for i in range(0,len(binary_str)):\n        if binary_str[i] == '1':\n            count+=1\n    return count\n    \nif __name__ == \"__main__\":\n    \n    print(odd_Equivalent(100,2))\n    print(odd_Equivalent(100,3))\n    print(odd_Equivalent(100,4)"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n=int(n)\n    s=s[::-1]\n    count=0\n    for i in range(n):\n        if s[i]=='0':\n            s=s[i:len(s)]+'1'+s[0:i]\n        else:\n            s=s[i:len(s)]+'0'+s[0:i]\n        count=count+1\n    print(count)\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    for i in range(0,len(s)):\n        if s[i] == '0':\n            ans += 1\n        else:\n            ans -= 1\n    ans = abs(ans)\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.replace(\" \",\"\")\n    ans = 0\n    for i in range(0,len(s)):\n        if(s[i] == \"1\"):\n            ans += 1\n    return (ans-n)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lists in nestedlist:\n        for item in lists:\n            if item not in common:\n                common.append(item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        if len(nestedlist[i]) == 0:\n            continue\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in result:\n                result.append(nestedlist[i][j])\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Calculate the length of list 1\n    list_len1 = len(nestedlist[0])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        for i in lst:\n            if i in common:\n                continue\n            else:\n                common.append(i)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if nestedlist[i][j] in nestedlist[k]:\n                    common.append(nestedlist[i][j])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    #if len(nestedlist) == 1:\n    #    return nestedlist[0]\n    else:\n        #print(nestedlist)\n        x = common_in_nested_lists(nestedlist[1:])\n        #print(nestedlist[0])\n        if x!= []:\n            #print(\"x\")\n            for ele in nestedlist[0]:\n                #print(\"ele\")\n                if ele in x:\n                    #print(\"ele\")\n                    x.remove(ele)\n            return x\n        else:\n            #print(\"x\")\n            return nestedlist[0]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return common_in_lists(nested_lists_from_list(nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for element in nestedlist:\n        if isinstance(element, list):\n            result = list(set(common_in_nested_lists(element)))\n        elif element in result:\n            return result\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        if type(i) == list:\n            result = common_in_nested_lists(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        x = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return True if text.isdigit() else False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n    \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d.keys():\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if isinstance(item,dict):\n            if not(item):\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for i in list1:\n        if i:\n            flag = False\n    return flag\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = []\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \nlist1 = []\nprint(empty_dit(list1))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    l1 = []\n    for i in list1:\n        if i == {}:\n            l1.append(i)\n    if len(l1) == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for l in list1:\n        if l:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item.keys()) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total + num\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if nums:\n        output = 0\n        for num in nums:\n            output = output * 10 + num\n        return output\n    else:\n        return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = nums[0]\n    for i in range(1, len(nums)):\n        n += nums[i]\n    return n\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = 1\n    for i in nums:\n        n *= i\n    return n\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(sum(nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # for a in nums:\n    #     if int(a)!= a:\n    #         raise ValueError('Tuple must be in integers only')\n    # print(sum(nums))\n    return sum(map(int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i] * (10 ** (len(nums) - i - 1))\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #start with the biggest number and multiply the rest by it\n    a = nums[0]\n    b = nums[1]\n    c = nums[2]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            test_list[i] = -99999999999999\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            test_list[i] = list_to_float(test_list[i])\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            test_list[i] = None\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        result.append([float(j) if type(j) == str else j for j in i])\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(len(test_list)):\n        for element in range(len(test_list[index])):\n            try:\n                float_element = float(test_list[index][element])\n                test_list[index][element] = float_element\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = float(test_list[i])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convertible = []\n    for i in test_list:\n        for j in i:\n            if type(j) == str or type(j) == int:\n                convertible.append(j)\n            else:\n                convertible.append(float(j))\n    return convertible\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = list_to_float(test_list[i])\n        \n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if not isinstance(test_list[i][j], int) and not isinstance(test_list[i][j], float):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Solution - 1\n    # a_string = string.split()\n    # return a_string\n    \n    # Solution - 2\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = string.split()\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = l + (r-l) // 2\n        if arr[l] == arr[mid]:\n            l += 1\n        elif arr[mid] == arr[r]:\n            r -= 1\n        else:\n            return arr[mid]\n    return arr[l]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start+end)//2\n        if arr[mid] == arr[mid+1]:\n            count += 1\n        else:\n            count -= 1\n        if count == 1:\n            return arr[mid]\n        if count < 0:\n            end = mid\n        else:\n            start = mid + 1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    arr.sort()\n    for i in range(1, n):\n        if arr[i]!= arr[i - 1]:\n            return arr[i - 1]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    res = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]!= res:\n            res = arr[i]\n            break\n    return res\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize variables\n    min = 0\n    max = len(arr) - 1\n    mid = 0\n    # search a mid\n    while(min <= max):\n        mid = (min + max) // 2\n        # element at mid is not present\n        if(arr[mid]!= arr[mid - 1]):\n            return arr[mid]\n        # element at mid is present\n        else:\n            # left side contains only one element\n            if(mid == 0):\n                return arr[0]\n            # right side contains only one element\n            if(mid == len(arr) - 1):\n                return arr[mid]\n            # left and right side are same\n            if(arr[mid] == arr[mid + 1]):\n                return -1\n            if(arr[mid] == arr[mid - 1]):\n                return -1\n            # swap to move the right side\n            if(arr[mid] == arr[mid + 1]):\n                min = mid + 1\n            else:\n                max = mid - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            return i\n    \n    return -1\n    \ndef swap(arr, i, j):\n    '''\n    Write a python function to swap two elements in an array.\n    '''\n    arr[i], arr[j] = arr[j], arr[i]\n    \ndef reverse(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    \n    while i < j:\n        swap(arr, i, j)\n        i += 1\n        j -= 1\n    \ndef create_arr(arr_len):\n    '''\n    Write a python function to create an array.\n    '''\n    arr = []\n    \n    for i in range(arr_len):\n        arr.append(i)\n    return arr\n    \ndef find_min(arr):\n    '''\n    Write a python function to find the minimum element in a sorted array.\n    '''\n    min_val = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val\n    \ndef find_max(arr):\n    '''\n    Write a python function to find the maximum element in a sorted array.\n    '''\n    max_val = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\n    \ndef find_middle(arr):\n    '''\n    Write a python function to find the middle element in a sorted array.\n    '''\n    if len(arr)%2 == 0:\n        i = (len(arr)//2) - 1\n        j = (len(arr)//2)\n        return (arr[i] + arr[j])/2\n    else:\n        i = (len(arr)//2)\n        return arr[i]\n    \ndef sort_arr(arr):\n    '''\n    Write a python function to sort an array using insertion sort algorithm.\n    '''\n    for i in range(1, len(arr)):\n        val = arr[i]\n        j = i - 1\n        while j >= 0 and val < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = val\n    return arr\n    \ndef find_smallest(arr):\n    '''\n    Write a python function to find the smallest element in a sorted array.\n    '''\n    smallest_val = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < smallest_val:\n            smallest_val = arr[i]\n    return smallest_val\n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicate elements in an array.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] == arr[i + 1]:\n            arr.pop(i + 1)\n        else:\n            i += 1\n    return arr\n    \ndef is_pandigital(num):\n    '''\n    Write a python function to check if a given number is pandigital or not.\n    '''\n    if len(num) == 1:\n        return True\n    else:\n        s = list(num)\n        s.sort()\n        return s == list(str(int(num)))\n    \ndef get_palindrome(arr):\n    '''\n    Write a python function to find the palindrome in a given list.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i]!= arr[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef move_zeros(arr):\n    '''\n    Write a python function to move all zeros to end of an array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return arr\n    \ndef sum_of_numbers(arr):\n    '''\n    Write a python function to sum all the numbers in an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n    \ndef multiply_elements(arr):\n    '''\n    Write a python function to multiply all the numbers in an array.\n    '''\n    sum = 1\n    for i in range(len(arr)):\n        sum *= arr[i]\n    return sum\n    \ndef find_duplicates(arr):\n    '''\n    Write a python function to find the duplicate elements in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    i = 0\n    while i < len(arr):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n        i += 1\n    return -1\n    \ndef swap_elements(arr, i, j):\n    '''\n    Write a python function to swap two elements in a given array.\n    '''\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    \ndef find_a_in_b(arr1, arr2):\n    '''\n    Write a python function to find the indices of a given element in another array.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            return i, j\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return -1, -1\n    \ndef sum_of_numbers_using_recursion(arr):\n    '''\n    Write a python function to sum all the numbers in an array using recursion.\n    '''\n    def sum_of_numbers_recursion(arr, i, n):\n        if i == n:\n            return 0\n        return arr[i] + sum_of_numbers_recursion(arr, i + 1, n)\n    \n    return sum_of_numbers_recursion(arr, 0, len(arr))\n    \ndef create_expression(operands, operators):\n    '''\n    Write a python function to create an expression from given operands and operators.\n    '''\n    expr = ''\n    for i in range(len(operands)):\n        expr += operands[i]\n        if operators[i] == '+':\n            expr += '+'\n        else:\n            expr += '-'\n    return expr\n    \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the fibonacci series from 1 to n.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n        \ndef find_duplicates(arr):\n    '''\n    Write a python function to find the duplicate elements in a given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    i = 0\n    while i < len(arr):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n        i += 1\n    return -1\n    \ndef find_sum(arr):\n    '''\n    Write a python function to find the sum of all the numbers in an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n    \ndef is_palindrome_using_reverse(string):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    return is_palindrom"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] < arr[mid+1]:\n            count += 1\n            if arr[mid]!= arr[mid+1]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        else:\n            high = mid - 1\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    size = len(arr)\n    if size == 0:\n        return -1\n    if size == 1:\n        return arr[0]\n    left = 0\n    right = size - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if arr[middle] == arr[middle+1]:\n            if middle == size-1:\n                return -1\n            else:\n                right = middle\n                continue\n        elif arr[middle] < arr[middle+1]:\n            if middle == 0:\n                return -1\n            else:\n                left = middle+1\n                continue\n        elif arr[middle] > arr[middle+1]:\n            if middle == 0:\n                return -1\n            else:\n                right = middle\n                continue\n    return arr[middle]\n    \n    \n    \n    \nif __name__ == '__main__':\n    arr = [5, 5, 5, 5, 5, 5]\n    print(search(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            if list1[i][0] > 0 and list1[j][0] > 0:\n                prod = max(list1[i][0], list1[j][0]) * min(list1[i][1], list1[j][1])\n                if prod > max_prod:\n                    max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            prod = list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\nprint(max_product_tuple([(3, 4), (2, 4), (5, 8), (9, 1)]))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_value = list1[0][0]\n    for i in range(0,len(list1)):\n        for j in range(1,len(list1)):\n            if max_value < max(list1[i]) * max(list1[j]):\n                max_value = max(list1[i]) * max(list1[j])\n    return max_value\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_pairs = []\n    max_product = 0\n    for index, i in enumerate(list1):\n        for j in range(index+1, len(list1)):\n            if list1[index][1] >= 0 and list1[j][1] >= 0:\n                product = i[0] * list1[j][0]\n                if product > max_product:\n                    max_product = product\n                    max_product_pairs = [[i[0],j[0]]]\n                elif product == max_product:\n                    max_product_pairs.append([i[0],j[0]])\n    return max_product_pairs\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x: x[0]) # sorts the list based on the first element of each tuple\n    \n    max_p = max(list1[0])\n    max_p_index = 0\n    for i in range(1,len(list1)):\n        if list1[i][0] >= 0:\n            curr_max = max(list1[i],max_p)\n            if max_p <= 0 or curr_max > max_p:\n                max_p = curr_max\n                max_p_index = i\n        else:\n            max_p = max(list1[i],max_p)\n            if max_p <= 0 or curr_max > max_p:\n                max_p = curr_max\n                max_p_index = i\n    \n    return (max_p,list1[max_p_index][1])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # The following code will only work if the list has only tuples\n    \n    # This is the main function to find the maximum product\n    # The best practice is to set your absolute value as a second argument.\n    \n    # Initialize the variable\n    max_product = 0\n    \n    # Use this to make sure the program does not get stuck in an infinite loop.\n    count = 0\n    \n    for i in range(len(list1)):\n        if i == 0:\n            max_product = list1[i][0]*list1[i][1]\n        elif i >= 1:\n            if list1[i][0] > 0 and list1[i][1] > 0:\n                if max_product < list1[i][0]*list1[i][1]:\n                    max_product = list1[i][0]*list1[i][1]\n            elif list1[i][0] < 0 and list1[i][1] < 0:\n                if max_product < abs(list1[i][0])*abs(list1[i][1]):\n                    max_product = abs(list1[i][0])*abs(list1[i][1])\n            else:\n                max_product = 0\n    \n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = -float('inf')\n    for i in range(0, len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0]*list1[j][0]) > max_prod:\n                max_prod = (list1[i][0]*list1[j][0])\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    product = 1\n    for i in list1:\n        a, b = i\n        if a > max_product:\n            max_product = a\n        if b > max_product:\n            max_product = b\n        product = max(product, abs(a*b))\n    return max_product, product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = 0\n    for i in list1:\n        if len(i) == 2:\n            if i[0] > i[1]:\n                result = i[0] * i[1]\n            else:\n                result = i[1] * i[0]\n            if result > 0:\n                return result\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    def max_product(list1):\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        \n        list1 = list(map(tuple, list1))\n        \n        def product_tuple(tuple):\n            '''\n            Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n            '''\n            \n            def product_list(list1):\n                '''\n                Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n                '''\n                \n                for i in range(0, len(list1)):\n                    for j in range(i + 1, len(list1)):\n                        if list1[i] < list1[j]:\n                            product = list1[i][0] * list1[j][0]\n                            if product > product_list[i]:\n                                product_list[i] = product\n                            product = list1[i][1] * list1[j][1]\n                            if product > product_list[i]:\n                                product_list[i] = product\n                return product_list\n            \n            product_list = product_list(list1)\n            \n            return max(product_list)\n        \n        return max_product(product_tuple(list1))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicables = 0\n    for i in range(1, limit):\n        sum_j = 0\n        for j in range(1, i):\n            if i * j == j + i and i!= j:\n                sum_j += j\n        if sum_j == i:\n            sum_amicables += i\n    return sum_amicables\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = []\n    for i in range(1, limit):\n        if sum(sum_divisors(i)) == i:\n            amicables.append(i)\n    return sum(amicables)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        number_a = i\n        number_b = i\n        while(number_a!= number_b):\n            if (is_amicable(number_a, number_b) == True):\n                total += number_a\n                number_a = number_b\n            number_b = get_other_number(number_a, number_b)\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    list_amicable_numbers = []\n    for i in range(1,limit+1):\n        num_sum = 0\n        a = i\n        b = 0\n        while a!= 0:\n            if a!= 1:\n                if a%2 == 0:\n                    a = a/2\n                    b = b + 1\n                else:\n                    a = a*3 + 1\n                    b = b + 2\n            else:\n                num_sum = num_sum + b\n                a = a/2\n                b = b + 1\n        if num_sum == i:\n            list_amicable_numbers.append(i)\n    sum_amicable = sum(list_amicable_numbers)\n    return sum_amicable\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers = []\n    for i in range(2, limit+1):\n        temp_sum = sum_amicable_numbers(i)\n        if temp_sum!= 1:\n            amicable_numbers.append(i)\n            \n    print(sum(amicable_numbers))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        for j in range(i + 1, limit):\n            if i!= j and amicable_sum(i) == j:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    #creating a list of all amicable numbers\n    for num in range(1,limit):\n        #checking if a number is amicable\n        if sum_of_divisors(num) == (num * sum_of_divisors(num)):\n            #adding to the list of amicable numbers\n            amicable_numbers_list.append(num)\n    #sorting the list of amicable numbers\n    return sorted(amicable_numbers_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    for i in range(1, limit):\n        amicable_num_1 = 0\n        amicable_num_2 = 0\n        for j in range(1, i):\n            if i % j == 0 and j % i == 0:\n                amicable_num_1 = j\n                amicable_num_2 = i\n                break\n        if amicable_num_1 == 0 or amicable_num_2 == 0:\n            continue\n        if amicable_num_1 == amicable_num_2:\n            continue\n        amicable_numbers_list.append(amicable_num_1)\n        amicable_numbers_list.append(amicable_num_2)\n    return sum(amicable_numbers_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = set()\n    for i in range(2,limit):\n        if i not in amicable_nums:\n            j = sum(amicable_nums)\n            if j == i:\n                amicable_nums.add(i)\n                continue\n            if j not in amicable_nums:\n                continue\n            amicable_nums.add(i)\n            continue\n        amicable_nums.add(i)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(a.conjugate()*b)/abs(a**2+b**2)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)\nprint(angle_complex(1,0))\nprint(angle_complex(0,0))\nprint(angle_complex(1,-1))\nprint(angle_complex(0,-1))\nprint(angle_complex(1,1))\nprint(angle_complex(0,1))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    temp=cmath.polar(complex(a,b))\n    return cmath.phase(temp[0])\ndef main():\n    print(angle_complex(0,1))\n    print(angle_complex(1,0))\n    print(angle_complex(0,0))\n    print(angle_complex(1,1))\n    print(angle_complex(2,1))\n    print(angle_complex(2,2))\n    print(angle_complex(2,3))\n    print(angle_complex(4,1))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a*b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+bj)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\nprint('a) Given an array, the function should return the index of the element with maximum absolute value.')\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a**2 + b**2\n    theta = cmath.acos(cmath.sqrt(c))\n    return theta\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    count = 0\n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            count = 0\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            if i == len(string) - 1:\n                return max_diff\n            diff = 1 - int(string[i+1])\n            max_diff = max(max_diff, diff)\n        elif string[i] == \"1\":\n            if i == len(string) - 1:\n                return max_diff\n            diff = int(string[i+1]) - 1\n            max_diff = max(max_diff, diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    diffs = []\n    prev_pos = -1\n    max_diff = 0\n    \n    for pos in range(0, len(string)):\n        if string[pos] == '0':\n            if prev_pos!= -1:\n                diffs.append(pos - prev_pos)\n                max_diff = max(max_diff, diffs[-1])\n            prev_pos = pos\n            \n        else:\n            if prev_pos!= -1:\n                diffs.append(pos - prev_pos)\n                max_diff = max(max_diff, diffs[-1])\n            prev_pos = pos\n            \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    if len(string) == 1:\n        return 0\n    max = 0\n    for i in range(len(string) - 1):\n        tmp = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                tmp += 1\n            else:\n                tmp += 0\n        if max < tmp - max:\n            max = tmp - max\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(1,len(string)):\n        if string[i] == '0' and string[i-1] == '1':\n            length = max(length,i-1)\n    return length\n        "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    i = 0\n    max_diff = 0\n    count = 0\n    while i < len(string):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        if abs(count) > max_diff:\n            max_diff = abs(count)\n        i += 1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count -= 1\n        elif string[i] == '1':\n            count += 1\n        max_length = max(max_length, count)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def find_length_rec(string, st_len, cur_len, max_diff):\n        if st_len == cur_len:\n            max_diff = max(max_diff, cur_len)\n            return max_diff\n        \n        if cur_len > 0:\n            cur_len -= 1\n        for i in range(cur_len, st_len):\n            if string[i] == '0':\n                max_diff = max(max_diff, find_length_rec(string, i+1, cur_len, max_diff))\n            else:\n                max_diff = max(max_diff, find_length_rec(string, i+1, cur_len, max_diff))\n        return max_diff\n        \n    return find_length_rec(string, len(string), st_len, max_diff)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    total = 0\n    count0 = 0\n    count1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        total = max(total, count0, count1)\n    return total\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    if n == 0:\n        return 0\n    \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        if count_0 < count_1:\n            diff = count_1 - count_0\n            max_diff = max(max_diff, diff)\n        else:\n            diff = count_0 - count_1\n            max_diff = max(max_diff, diff)\n    \n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    Sum = 0\n    while i <= min(a,b):\n        if(a%i == 0 and b%i == 0):\n            Sum = Sum + i\n        i = i + 1\n    print(\"Sum of common divisors = \", Sum)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    \n    # in integer division, the quotient is also included in the divisor\n    for i in range(1, a//2 + 1):\n        if (a%i == 0 and b%i == 0):\n            sum = sum + i\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors_a = []\n    divisors_b = []\n    \n    for i in range(1,a+1):\n        if a % i == 0:\n            divisors_a.append(i)\n    for j in range(1,b+1):\n        if b % j == 0:\n            divisors_b.append(j)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,min(a,b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    d = set(prime_factors(a)) & set(prime_factors(b))\n    s = 0\n    for i in d:\n        s += int(a/i)*int(b/i)\n    print(s)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        #brute force \n        for i in range(1,b+1):\n            if a % i == 0 and b % i == 0:\n                return a + b\n    else:\n        for i in range(1,a+1):\n            if a % i == 0 and b % i == 0:\n                return a + b\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(a,b)\n    c = 0\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            c = c+i\n    print(c)\n    return c\nprint(sum(10,20))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = int(input(\"enter the first number \"))\n    d = int(input(\"enter the second number \"))\n    sum = 0\n    for i in range(1,c+1):\n        if (c%i==0) and (d%i==0):\n            sum = sum+i\n    print(sum)\n    print(sum(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a + b\n    # code here\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef print_int(x, y):\n    '''\n    Write a function to print a string which is the concatenation of two strings.\n    '''\n    return '{} {}'.format(x, y)\n    \ndef subtract_int(x, y):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - y\n    \ndef divide_int(x, y):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / y\n    \ndef remainder_int(x, y):\n    '''\n    Write a function to return the remainder of two integers.\n    '''\n    return x % y\n    \ndef sqrt_int(x):\n    '''\n    Write a function to return the square root of a single integer.\n    '''\n    return math.sqrt(x)\n    \ndef add_float(x, y):\n    '''\n    Write a function to add two floating point numbers.\n    '''\n    return x + y\n    \ndef subtract_float(x, y):\n    '''\n    Write a function to subtract two floating point numbers.\n    '''\n    return x - y\n    \ndef multiply_float(x, y):\n    '''\n    Write a function to multiply two floating point numbers.\n    '''\n    return x * y\n    \ndef divide_float(x, y):\n    '''\n    Write a function to divide two floating point numbers.\n    '''\n    return x / y\n    \ndef power_float(x, y):\n    '''\n    Write a function to calculate x raised to the power y.\n    '''\n    return math.pow(x, y)\n    \ndef add_decimal(x, y):\n    '''\n    Write a function to add two floating point numbers.\n    '''\n    return x + y\n    \ndef subtract_decimal(x, y):\n    '''\n    Write a function to subtract two floating point numbers.\n    '''\n    return x - y\n    \ndef multiply_decimal(x, y):\n    '''\n    Write a function to multiply two floating point numbers.\n    '''\n    return x * y\n    \ndef divide_decimal(x, y):\n    '''\n    Write a function to divide two floating point numbers.\n    '''\n    return x / y\n    \ndef power_decimal(x, y):\n    '''\n    Write a function to calculate x raised to the power y.\n    '''\n    return math.pow(x, y)\n    \ndef add_string(x, y):\n    '''\n    Write a function to add two strings.\n    '''\n    return x + y\n    \ndef subtract_string(x, y):\n    '''\n    Write a function to subtract two strings.\n    '''\n    return x - y\n    \ndef multiply_string(x, y):\n    '''\n    Write a function to multiply two strings.\n    '''\n    return x * y\n    \ndef divide_string(x, y):\n    '''\n    Write a function to divide two strings.\n    '''\n    return x / y\n    \ndef power_string(x, y):\n    '''\n    Write a function to calculate x raised to the power y.\n    '''\n    return math.pow(x, y)\n    \ndef add_boolean(x, y):\n    '''\n    Write a function to add two boolean values.\n    '''\n    return x + y\n    \ndef subtract_boolean(x, y):\n    '''\n    Write a function to subtract two boolean values.\n    '''\n    return x - y\n    \ndef multiply_boolean(x, y):\n    '''\n    Write a function to multiply two boolean values.\n    '''\n    return x * y\n    \ndef divide_boolean(x, y):\n    '''\n    Write a function to divide two boolean values.\n    '''\n    return x / y\n    \ndef power_boolean(x, y):\n    '''\n    Write a function to calculate x raised to the power y.\n    '''\n    return math.pow(x, y)\n    \ndef add_bitwise_int(x, y):\n    '''\n    Write a function to add two integers using bitwise operator.\n    '''\n    return x + y\n    \ndef subtract_bitwise_int(x, y):\n    '''\n    Write a function to subtract two integers using bitwise operator.\n    '''\n    return x - y\n    \ndef multiply_bitwise_int(x, y):\n    '''\n    Write a function to multiply two integers using bitwise operator.\n    '''\n    return x * y\n    \ndef divide_bitwise_int(x, y):\n    '''\n    Write a function to divide two integers using bitwise operator.\n    '''\n    return x / y\n    \ndef power_bitwise_int(x, y):\n    '''\n    Write a function to calculate x raised to the power y.\n    '''\n    return math.pow(x, y)\n    \ndef add_bitwise_float(x, y):\n    '''\n    Write a function to add two floating point numbers using bitwise operator.\n    '''\n    return x + y\n    \ndef subtract_bitwise_float(x, y):\n    '''\n    Write a function to subtract two floating point numbers using bitwise operator.\n    '''\n    return x - y\n    \ndef multiply_bitwise_float(x, y):\n    '''\n    Write a function to multiply two floating point numbers using bitwise operator.\n    '''\n    return x * y\n    \ndef divide_bitwise_float(x, y):\n    '''\n    Write a function to divide two floating point numbers using bitwise operator.\n    '''\n    return x / y\n    \ndef power_bitwise_float(x, y):\n    '''\n    Write a function to calculate x raised to the power y.\n    '''\n    return math.pow(x, y)\n    \ndef add_bitwise_string(x, y):\n    '''\n    Write a function to add two strings using bitwise operator.\n    '''\n    return x + y\n    \ndef subtract_bitwise_string(x, y):\n    '''\n    Write a function to subtract two strings using bitwise operator.\n    '''\n    return x - y\n    \ndef multiply_bitwise_string(x, y):\n    '''\n    Write a function to multiply two strings using bitwise operator.\n    '''\n    return x * y\n    \ndef divide_bitwise_string(x, y):\n    '''\n    Write a function to divide two strings using bitwise operator.\n    '''\n    return x / y\n    \ndef power_bitwise_string(x, y):\n    '''\n    Write a function to calculate x raised to the power y.\n    '''\n    return math.pow(x, y)\n    \ndef add_bitwise_boolean(x, y):\n    '''\n    Write a function to add two booleans using bitwise operator.\n    '''\n    return x + y\n    \ndef subtract_bitwise_boolean(x, y):\n    '''\n    Write a function to subtract two booleans using bitwise operator.\n    '''\n    return x - y\n    \ndef multiply_bitwise_boolean(x, y):\n    '''\n    Write a function to multiply two booleans using bitwise operator.\n    '''\n    return x * y\n    \ndef divide_bitwise_boolean(x, y):\n    '''\n    Write a function to divide two booleans using bitwise operator.\n    '''\n    return x / y\n    \ndef power_bitwise_boolean(x, y):\n    '''\n    Write a function to calculate x raised to the power y.\n    '''\n    return math.pow(x, y)\n    \ndef add_bitwise_string_floating_point(x, y):\n    '''\n    Write a function to add two floating point numbers using bitwise operator.\n    '''\n    return x + y\n    \ndef subtract_bitwise_string_floating_point(x, y):\n    '''\n    Write a function to subtract two floating point numbers using bitwise operator.\n    '''\n    return x - y\n    \ndef multiply_bitwise_string_fl"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = x * y\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(x * y)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_words = str.split()\n    long_words = []\n    for word in list_words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    output = []\n    for word in words:\n        if len(word) > n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return list(filter(lambda x: len(x)>n, str))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for i in str:\n        if len(i) > n:\n            return i\n    return \"No word longer than n\"\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    out = []\n    for word in str:\n        if len(word) > n:\n            out.append(word)\n    return out\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split():\n        if len(word) > n:\n            result.append(word)\n    return result\nprint(long_words(2, \"I am a student.\"))\nprint(long_words(2, \"This is a sentence.\"))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # dictionary for counting words\n    d = dict()\n    # dictionary of words\n    w = dict()\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    dict_words = {}\n    for word in str:\n        if len(word) > n:\n            if word in dict_words.keys():\n                dict_words[word] += 1\n            else:\n                dict_words[word] = 1\n    return dict_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str:\n        if len(word) > n:\n            words.append(word)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check rows\n    for row in my_matrix:\n        if sum(row)!= sum(my_matrix[0]):\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    s = 0\n    for i in range(n):\n        s = s + sum(my_matrix[i])\n    if s == n * (n * n + 1) / 2:\n        print('magic')\n    else:\n        print('not magic')\n        \ndef is_element_present(driver, element_name):\n    try:\n        myElem = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.NAME, element_name))\n        )\n    except TimeoutException:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square = True\n    for x in range(0,len(my_matrix)):\n        if len(my_matrix[x])!= len(my_matrix):\n            magic_square = False\n            break\n    if magic_square == True:\n        for x in range(0,len(my_matrix)):\n            for y in range(0,len(my_matrix[x])):\n                if my_matrix[x][y] < 0 or my_matrix[x][y] > len(my_matrix[x])-1 or \\\n                my_matrix[y][x] < 0 or my_matrix[y][x] > len(my_matrix)-1:\n                    magic_square = False\n                    break\n        if magic_square == True:\n            for x in range(0,len(my_matrix)):\n                for y in range(0,len(my_matrix[x])):\n                    if my_matrix[x][y] == 0:\n                        magic_square = False\n                        break\n    return magic_square\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return magic_square_check(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return True if magic_square_check(my_matrix) else False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_sum = 0\n    # check diagonal elements\n    for i in range(len(my_matrix)):\n        my_sum = my_sum + my_matrix[i][i]\n    if my_sum == (len(my_matrix) * my_matrix[0][0]):\n        print('Is a magic square')\n    else:\n        print('Not a magic square')\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    if my_matrix == 0:\n        return False\n    \n    # Check if dimensions are correct:\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all rows and columns are equal:\n    if len(my_matrix)!= len(set([len(row) for row in my_matrix])):\n        return False\n    \n    if len(set([len(row) for row in my_matrix]))!= len(my_matrix):\n        return False\n    \n    # Check if all rows and columns are equal:\n    if len(set([len(row) for row in my_matrix]))!= len(my_matrix):\n        return False\n    \n    # Check if all rows and columns are equal:\n    if len(set([len(row) for row in my_matrix]))!= len(my_matrix):\n        return False\n    \n    # Check if the matrix is a magic square:\n    # Check whether all entries are equal:\n    if len(my_matrix)!= len(set([my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))])):\n        return False\n    \n    # Check whether all rows are equal:\n    if len(set([my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))]))!= len(my_matrix):\n        return False\n    \n    # Check whether all columns are equal:\n    if len(set([my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))]))!= len(my_matrix):\n        return False\n    \n    # Check if the magic square is a valid magic square\n    if sum([sum(row) for row in my_matrix])!= (len(my_matrix)*(len(my_matrix)-1)):\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if(my_matrix[i][j]!=sum(my_matrix[i][k] for k in range(len(my_matrix[0])) if k!= j)):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    m, n = len(my_matrix), len(my_matrix[0])\n    \n    matrix = []\n    for row in range(m):\n        row_element = []\n        for col in range(n):\n            row_element.append(my_matrix[row][col])\n        matrix.append(row_element)\n    \n    square = []\n    for i in range(m):\n        square.append([matrix[i][i], matrix[i][m-1], matrix[m-1][i], matrix[m-1][m-1]])\n    \n    if len(set(square))!= 4:\n        return False\n    elif sum(square[0]) == sum(square[1]) == sum(square[2]) == sum(square[3]) == 0:\n        return True\n    elif sum(square[0]) == sum(square[1]) == sum(square[2]) == sum(square[3])!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    max_v = 0\n    max_k = 0\n    for k, v in d.items():\n        if v > max_v:\n            max_k = k\n            max_v = v\n    return max_k\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_value = -1\n    max_key = -1\n    for key in count:\n        if max_value < count[key]:\n            max_value = count[key]\n            max_key = key\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = defaultdict(int)\n    for item in nums:\n        max_count[item] += 1\n    for key, val in max_count.items():\n        if val == max(max_count.values()):\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_key = max(counts, key=counts.get)\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    return max(d.keys(), key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_count = max(d.values())\n    return [k for k,v in d.items() if v == max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_map = defaultdict(int)\n    for num in nums:\n        num_map[num] += 1\n    max_num = max(num_map.items(), key=lambda kv: kv[1])\n    print(max_num[0])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for i in nums:\n        counter[i] += 1\n    # print(counter)\n    max_occur = max(counter.values())\n    # print(max_occur)\n    for k in counter:\n        if counter[k] == max_occur:\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(lambda: 0)\n    for i in nums:\n        d[i]+=1\n    d = sorted(d.items(),key=lambda x:x[1],reverse=True)\n    return d[0][0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for num in nums:\n        counter[num] += 1\n    return max(counter.items(), key=lambda item: item[1])[0]\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s = list(str1)\n    vowels = list('aeiouAEIOU')\n    j = len(s)\n    for i in range(j):\n        if s[i] in vowels:\n            s[i] = s[j - i - 1]\n            j -= 1\n    return \"\".join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    str2 = list(str1)\n    for index in range(len(str2)):\n        if str2[index] in vowels:\n            str2[index] = str2[index].upper()\n    print(''.join(str2))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    \n    # removing all non vowel letters\n    str2 = str1.translate(str.maketrans('','',string.ascii_lowercase))\n    # print(str2)\n    \n    vowels_set = vowels.intersection(set(str2))\n    # print(vowels_set)\n    \n    # reversing vowels\n    for vowel in vowels_set:\n        str2 = str2.replace(vowel, vowel[::-1])\n    \n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowels = list(vowels)\n    new_string = []\n    for letter in str1:\n        if letter not in vowels:\n            new_string.append(letter)\n    new_string = ''.join(new_string)\n    return new_string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1 = str1.lower()\n    new_string = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_string += str1[i]\n        else:\n            continue\n    return new_string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n        else:\n            break\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'y')\n    s = list(str1)\n    for i in range(len(s)):\n        if s[i] in vowels:\n            s[i] = s[len(s) - 1 - i]\n    return \"\".join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Reverse vowels and then put back together\n    str1 = str1.lower()\n    new_str = \"\"\n    for ch in str1:\n        if ch in 'aeiou':\n            new_str = new_str + ch\n            new_str = new_str + ch.upper()\n        else:\n            new_str = new_str + ch\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    a = str1.lower()\n    result = \"\"\n    for letter in a:\n        if letter not in vowels:\n            result += letter\n        else:\n            result += letter.upper()\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            newstr += str1[-i-1]\n        else:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = str(tup1)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\nprint(tup_string((\"a\", \"b\", \"c\", \"d\", \"e\")))\nprint(tup_string((1, 2, 3, 4, 5)))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # return ''.join(str(e) for e in tup1)\n    return ''.join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pos_num = 0\n    neg_num = 0\n    if type(nums)!= list:\n        print(\"Error, please enter a list of numbers.\")\n    else:\n        for i in nums:\n            if i < 0:\n                neg_num += i\n            else:\n                pos_num += i\n        return neg_num + pos_num\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i<0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    if not nums:\n        return 0\n    \n    neg_sum = 0\n    \n    for i in range(len(nums)):\n        if nums[i] < 0:\n            neg_sum += nums[i]\n    \n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # n = int(input(\"Enter the number of elements in the list \"))\n    # arr = []\n    # for i in range(n):\n    #     arr.append(int(input()))\n    # print(arr)\n    # print(sum([x for x in arr if x<0]))\n    return sum([x for x in nums if x<0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    print(sum(map(lambda x: -x, nums)))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    return sum([-num for num in nums])\n    \ndef is_pythagorean(a, b, c):\n    '''\n    Write a function to determine if a triangle can be built from the given sides.\n    '''\n    return a**2 + b**2 == c**2\n    \ndef make_palindrome(word):\n    '''\n    Write a function that takes a word as input and returns the same word as output\n    but with each letter in the word reversed.\n    '''\n    rev = ''.join(reversed(word))\n    return word + rev\n    \ndef nearest_house(houses, k):\n    '''\n    Write a function that takes in a list of houses and a number k and returns the \n    house number of the house that is closes to the number k.\n    '''\n    houses.sort()\n    for i in range(len(houses)):\n        if k - houses[i] <= houses[i] - k:\n            return i\n    return len(houses)\n    \ndef odd_even_sum(nums):\n    '''\n    Write a function that takes a list of integers and returns the sum of all the \n    odd numbers.\n    '''\n    odd_nums = 0\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums += num\n    return odd_nums\n    \ndef is_bst(root, min_val, max_val):\n    '''\n    Write a function that takes in a binary search tree and two numbers as inputs and\n    returns True if the tree is a BST and False otherwise.\n    '''\n    if root is None:\n        return True\n    if root.left is not None and root.left.val > root.val:\n        return False\n    if root.right is not None and root.right.val < root.val:\n        return False\n    return is_bst(root.left, min_val, root.val) and is_bst(root.right, root.val, max_val)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    output = 0\n    for i in nums:\n        if i < 0:\n            output += i\n    return output\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    base = sqrt(2*n + 1)\n    return int(base)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(((2 * n + 1) ** 2 - 2) / 4)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagonal(n):\n        if n == 0:\n            return 1\n        else:\n            return 6 * hexagonal(n - 1) + 1\n    return hexagonal(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return -1\n    return n * (1 + 3*sqrt(5)) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (1 + sqrt(1 + 24 * n)) / 6\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    prev = 1\n    curr = 3\n    i = 2\n    while i <= n:\n        prev, curr = curr, prev + (curr * (3 ** 0.5))\n        i += 1\n    return curr\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return 0\n    return n*(3*n - 1)//2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 3\n    if n==2:\n        return 5\n    if n==3:\n        return 7\n    if n==4:\n        return 9\n    if n==5:\n        return 11\n    if n==6:\n        return 13\n    if n==7:\n        return 15\n    if n==8:\n        return 17\n    if n==9:\n        return 19\n    if n==10:\n        return 21\n    if n==11:\n        return 23\n    if n==12:\n        return 25\n    if n==13:\n        return 27\n    if n==14:\n        return 29\n    if n==15:\n        return 31\n    if n==16:\n        return 33\n    if n==17:\n        return 35\n    if n==18:\n        return 37\n    if n==19:\n        return 39\n    if n==20:\n        return 41\n    if n==21:\n        return 43\n    if n==22:\n        return 45\n    if n==23:\n        return 47\n    if n==24:\n        return 49\n    if n==25:\n        return 51\n    if n==26:\n        return 53\n    if n==27:\n        return 55\n    if n==28:\n        return 57\n    if n==29:\n        return 59\n    if n==30:\n        return 61\n    if n==31:\n        return 63\n    if n==32:\n        return 65\n    if n==33:\n        return 67\n    if n==34:\n        return 69\n    if n==35:\n        return 71\n    if n==36:\n        return 73\n    if n==37:\n        return 75\n    if n==38:\n        return 77\n    if n==39:\n        return 79\n    if n==40:\n        return 81\n    if n==41:\n        return 83\n    if n==42:\n        return 85\n    if n==43:\n        return 87\n    if n==44:\n        return 89\n    if n==45:\n        return 91\n    if n==46:\n        return 93\n    if n==47:\n        return 95\n    if n==48:\n        return 97\n    if n==49:\n        return 99\n    if n==50:\n        return 101\n    if n==51:\n        return 103\n    if n==52:\n        return 105\n    if n==53:\n        return 107\n    if n==54:\n        return 109\n    if n==55:\n        return 111\n    if n==56:\n        return 113\n    if n==57:\n        return 115\n    if n==58:\n        return 117\n    if n==59:\n        return 119\n    if n==60:\n        return 121\n    if n==61:\n        return 123\n    if n==62:\n        return 125\n    if n==63:\n        return 127\n    if n==64:\n        return 129\n    if n==65:\n        return 131\n    if n==66:\n        return 133\n    if n==67:\n        return 135\n    if n==68:\n        return 137\n    if n==69:\n        return 139\n    if n==70:\n        return 141\n    if n==71:\n        return 143\n    if n==72:\n        return 145\n    if n==73:\n        return 147\n    if n==74:\n        return 149\n    if n==75:\n        return 151\n    if n==76:\n        return 153\n    if n==77:\n        return 155\n    if n==78:\n        return 157\n    if n==79:\n        return 159\n    if n==80:\n        return 161\n    if n==81:\n        return 163\n    if n==82:\n        return 165\n    if n==83:\n        return 167\n    if n==84:\n        return 169\n    if n==85:\n        return 171\n    if n==86:\n        return 173\n    if n==87:\n        return 175\n    if n==88:\n        return 177\n    if n==89:\n        return 179\n    if n==90:\n        return 181\n    if n==91:\n        return 183\n    if n==92:\n        return 185\n    if n==93:\n        return 187\n    if n==94:\n        return 189\n    if n==95:\n        return 191\n    if n==96:\n        return 193\n    if n==97:\n        return 195\n    if n==98:\n        return 197\n    if n==99:\n        return 199\n    if n==100:\n        return 201\n    if n==101:\n        return 203\n    if n==102:\n        return 205\n    if n==103:\n        return 207\n    if n==104:\n        return 209\n    if n==105:\n        return 211\n    if n==106:\n        return 213\n    if n==107:\n        return 215\n    if n==108:\n        return 217\n    if n==109:\n        return 219\n    if n==110:\n        return 221\n    if n==111:\n        return 223\n    if n==112:\n        return 225\n    if n==113:\n        return 227\n    if n==114:\n        return 229\n    if n==115:\n        return 231\n    if n==116:\n        return 233\n    if n==117:\n        return 235\n    if n==118:\n        return 237\n    if n==119:\n        return 239\n    if n==120:\n        return 241\n    if n==121:\n        return 243\n    if n==122:\n        return 245\n    if n==123:\n        return 247\n    if n==124:\n        return 249\n    if n==125:\n        return 251\n    if n==126:\n        return 253\n    if n==127:\n        return 255\n    if n==128:\n        return 257\n    if n==129:\n        return 259\n    if n==130:\n        return 261\n    if n==131:\n        return 263\n    if n==132:\n        return 265\n    if n==133:\n        return 267\n    if n==134:\n        return 269\n    if n==135:\n        return 271\n    if n==136:\n        return 273\n    if n==137:\n        return 275\n    if n==138:\n        return 277\n    if n==139:\n        return 279\n    if n==140:\n        return 281\n    if n==141:\n        return 283\n    if n==142:\n        return 285\n    if n==143:\n        return 287\n    if n==144:\n        return 289\n    if n==145:\n        return 291\n    if n==146:\n        return 293\n    if n==147:\n        return 295\n    if n==148:\n        return 297\n    if n==149:\n        return 299\n    if n==150:\n        return 301\n    if n==151:\n        return 303\n    if n==152:\n        return 305\n    if n==153:\n        return 307\n    if n==154:\n        return 309\n    if n==155:\n        return 311\n    if n==156:\n        return 313\n    if n==157:\n        return 315\n    if n==158:\n        return 317\n    if n==159:\n        return 319\n    if n==160:\n        return 321\n    if n==161:\n        return 323\n    if n==162:\n        return 325\n    if n==163:\n        return 327\n    if n==164:\n        return 329\n    if n==165:\n        return 331\n    if n==166:\n        return 333\n    if n==167:\n        return 335\n    if n==168:\n        return 337\n    if n==169:\n        return 339\n    if n==170:\n        return 341\n    if n==171:\n        return 343\n    if n==172:\n        return 345\n    if n==173:\n        return 347\n    if n==174:\n        return 349\n    if n==175:\n        return 351\n    if n==176:\n        return 353\n    if n==177:\n        return 355\n    if n==178:\n        return 357\n    if n==179:\n        return 359\n    if n==180:\n        return 361\n    if n==181:\n        return 363\n    if n==182:\n        return 365\n    if "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        print(\"Invalid input\")\n    else:\n        c = 3 * (n - 1)\n        s = c + 1\n        return ((n * (c * c - s * s)) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return 6 * hexagonal_num(n - 1) - hexagonal_num(n - 2)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #todo return len(nums) - nums.count(0)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    ones = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/(ones+zeros)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeroes = 0\n    for x in nums:\n        if x == 0:\n            zeros += 1\n        else:\n            non_zeroes += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # nums = array('i', range(0, 100))\n    # print(nums)\n    zeros = 0\n    ones = 0\n    for num in nums:\n        if num == 0:\n            zeros = zeros + 1\n        else:\n            ones = ones + 1\n    return zeros / ones\nprint(zero_count([1,2,0,1]))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # your code here\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n    \n    '''\n    Write a function to find the largest value in an array of integers.\n    '''\n    def max(nums):\n        maximum = nums[0]\n        for i in nums:\n            if i > maximum:\n                maximum = i\n        return maximum\n    '''\n    Write a function to multiply all the numbers in an array.\n    '''\n    def multiply(nums):\n        if len(nums) == 0:\n            return 1\n        total = nums[0]\n        for i in range(1, len(nums)):\n            total = total * nums[i]\n        return total\n    \n    '''\n    Write a function to find the median in an array of integers.\n    '''\n    def median(nums):\n        nums.sort()\n        if len(nums)%2 == 0:\n            return nums[(len(nums)//2)]\n        else:\n            return (nums[(len(nums)//2)] + nums[(len(nums)//2)+1])/2\n    \n    '''\n    Write a function to find the mode in an array of integers.\n    '''\n    def mode(nums):\n        d = {}\n        for i in nums:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        max_val = max(d.values())\n        for i in d.keys():\n            if d[i] == max_val:\n                return i\n    '''\n    Write a function to find the median in an array of integers.\n    '''\n    def median(nums):\n        nums.sort()\n        if len(nums)%2 == 0:\n            return (nums[(len(nums)//2)] + nums[(len(nums)//2)+1])/2\n        else:\n            return nums[(len(nums)//2)]\n    '''\n    Write a function to find the mean in an array of integers.\n    '''\n    def mean(nums):\n        total = 0\n        for i in nums:\n            total += i\n        return total/len(nums)\n    '''\n    Write a function to find the minimum in an array of integers.\n    '''\n    def min(nums):\n        min_num = nums[0]\n        for i in nums:\n            if i < min_num:\n                min_num = i\n        return min_num\n    '''\n    Write a function to find the minimum in an array of integers.\n    '''\n    def max(nums):\n        max_num = nums[0]\n        for i in nums:\n            if i > max_num:\n                max_num = i\n        return max_num\n    '''\n    Write a function to check whether an array is sorted.\n    '''\n    def is_sorted(nums):\n        if len(nums) == 1:\n            return True\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                return False\n        return True\n    '''\n    Write a function to find the median in an array of integers.\n    '''\n    def median(nums):\n        nums.sort()\n        if len(nums)%2 == 0:\n            return (nums[(len(nums)//2)] + nums[(len(nums)//2)+1])/2\n        else:\n            return nums[(len(nums)//2)]\n    '''\n    Write a function to find the minimum in an array of integers.\n    '''\n    def min(nums):\n        min_num = nums[0]\n        for i in nums:\n            if i < min_num:\n                min_num = i\n        return min_num\n    '''\n    Write a function to find the maximum in an array of integers.\n    '''\n    def max(nums):\n        max_num = nums[0]\n        for i in nums:\n            if i > max_num:\n                max_num = i\n        return max_num\n    '''\n    Write a function to check whether an array is sorted.\n    '''\n    def is_sorted(nums):\n        if len(nums) == 1:\n            return True\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                return False\n        return True\n    '''\n    Write a function to find the minimum in an array of integers.\n    '''\n    def min(nums):\n        min_num = nums[0]\n        for i in nums:\n            if i < min_num:\n                min_num = i\n        return min_num\n    '''\n    Write a function to find the maximum in an array of integers.\n    '''\n    def max(nums):\n        max_num = nums[0]\n        for i in nums:\n            if i > max_num:\n                max_num = i\n        return max_num\n    '''\n    Write a function to check whether an array is sorted.\n    '''\n    def is_sorted(nums):\n        if len(nums) == 1:\n            return True\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                return False\n        return True\n    '''\n    Write a function to find the minimum in an array of integers.\n    '''\n    def min(nums):\n        min_num = nums[0]\n        for i in nums:\n            if i < min_num:\n                min_num = i\n        return min_num\n    '''\n    Write a function to find the maximum in an array of integers.\n    '''\n    def max(nums):\n        max_num = nums[0]\n        for i in nums:\n            if i > max_num:\n                max_num = i\n        return max_num\n    '''\n    Write a function to check whether an array is sorted.\n    '''\n    def is_sorted(nums):\n        if len(nums) == 1:\n            return True\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                return False\n        return True\n    '''\n    Write a function to find the minimum in an array of integers.\n    '''\n    def min(nums):\n        min_num = nums[0]\n        for i in nums:\n            if i < min_num:\n                min_num = i\n        return min_num\n    '''\n    Write a function to find the maximum in an array of integers.\n    '''\n    def max(nums):\n        max_num = nums[0]\n        for i in nums:\n            if i > max_num:\n                max_num = i\n        return max_num\n    '''\n    Write a function to check whether an array is sorted.\n    '''\n    def is_sorted(nums):\n        if len(nums) == 1:\n            return True\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                return False\n        return True\n    '''\n    Write a function to find the minimum in an array of integers.\n    '''\n    def min(nums):\n        min_num = nums[0]\n        for i in nums:\n            if i < min_num:\n                min_num = i\n        return min_num\n    '''\n    Write a function to find the maximum in an array of integers.\n    '''\n    def max(nums):\n        max_num = nums[0]\n        for i in nums:\n            if i > max_num:\n                max_num = i\n        return max_num\n    '''\n    Write a function to check whether an array is sorted.\n    '''\n    def is_sorted(nums):"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Count the zeroes and non-zeroes\n    zero_cnt, non_zero_cnt = 0, 0\n    for num in nums:\n        if num == 0:\n            zero_cnt += 1\n        else:\n            non_zero_cnt += 1\n    \n    # Calculate the ratio\n    return zero_cnt/non_zero_cnt\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Your code here\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    count = 0\n    zero = 0\n    for i in nums:\n        if i == 0:\n            zero += 1\n        else:\n            count += 1\n    return zero/count\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            continue\n        sum_of_two = i + i\n        if sum_of_two == n:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    while n>0:\n        if n%2==0:\n            n=n/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    max_power = int(math.log2(n))\n    while max_power > 0:\n        if n % (2**max_power)!= 0:\n            return False\n        n -= 2**max_power\n        max_power -= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n>0):\n        while(n>0):\n            if(n%2==0):\n                n/=2\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n < 1):\n        return False\n    if (n == 1):\n        return True\n    if (n == 0):\n        return False\n    while (n!= 1):\n        if ((n % 2)!= 0):\n            return False\n        n = n//2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Here we need to take one more variable and keep dividing the input number by 2 till we reach power of 2\n    # and take the remainder and add that to the variable\n    # Once we get to a number less than 2, return False\n    \n    powerOfTwo = 2\n    remainder = n\n    \n    while remainder >= powerOfTwo:\n        remainder = remainder - powerOfTwo\n        powerOfTwo = powerOfTwo * 2\n    \n    if remainder == 0:\n        return True\n    else:\n        return False\n        \n    \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n % 2 == 0): \n        n = n // 2\n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            n = n // i \n    if (n > 2): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    \n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n = n / 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n > 0:\n        while (n!= 0):\n            if (n % 2 == 0):\n                n = n / 2\n            else:\n                return False\n        return True\n    else:\n        return False\n    \nn = int(input(\"Enter a number : \"))\nif(is_Sum_Of_Powers_Of_Two(n)):\n    print(\"Yes,it is sum of non-zero powers of two.\")\nelse:\n    print(\"No,it is not sum of non-zero powers of two.\")\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    max_int = pow(2,31) - 1\n    while max_int % 2 == 0:\n        max_int = max_int // 2\n    max_int -= 1\n    if n > max_int:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*PI*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not test_list:\n        return test_list\n    if type(test_list[0]) == list:\n        return extract_singly(test_list[0]) + extract_singly(test_list[1:])\n    else:\n        return test_list[:1] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #no need to do anything\n    if not test_list:\n        return []\n    else:\n        pass\n    #copy the list\n    my_list = test_list.copy()\n    #if the list has one item, return that item\n    if len(my_list) == 1:\n        return my_list[0]\n    #if the list has multiple items, we need to iterate through each item\n    else:\n        #iterate through each item\n        for x in range(len(my_list)):\n            #set up a new list and set up the new list to the item in the list\n            new_list = []\n            for i in range(len(my_list)):\n                new_list.append(my_list[i])\n            #remove the item in the list\n            del new_list[x]\n            #append the new list to the original list\n            my_list = new_list + my_list\n        #return the new list\n        return my_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == None:\n        return None\n    \n    return reduce(lambda x,y: x + y, test_list, 0)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list)==0:\n        return None\n    else:\n        if len(test_list[0])==1:\n            return test_list[0][0]\n        else:\n            test_list.pop(0)\n            return extract_singly(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result_list = []\n    for item in test_list:\n        for i in item:\n            result_list.append(i)\n    return result_list\n    \ndef find_single_value(test_list):\n    '''\n    Write a function to find the first unique value in a list of lists. \n    The function should return None if no single value is found.\n    '''\n    for item in test_list:\n        if item.count(item[0]) == 1:\n            return item[0]\n    return None\n    \ndef find_values_in_common(test_list, num):\n    '''\n    Write a function that takes a list of lists and a single value and returns\n    a new list containing only the values that are common between the given \n    list and the list of lists.\n    '''\n    result_list = []\n    for item in test_list:\n        if num in item:\n            result_list.append(num)\n    return result_list\n    \ndef count_unique_values(test_list):\n    '''\n    Write a function that takes a list of lists and returns the number of unique\n    values in that list.\n    '''\n    result_dict = {}\n    for item in test_list:\n        for num in item:\n            if num not in result_dict:\n                result_dict[num] = 1\n            else:\n                result_dict[num] += 1\n    return len(result_dict.keys())\n    \ndef find_longest_word(test_list):\n    '''\n    Write a function that takes a list of lists and returns the longest word in \n    that list.\n    '''\n    result_list = []\n    for item in test_list:\n        result_list.append(item[0])\n    return max(result_list, key=len)\n    \ndef find_longest_word_using_sort(test_list):\n    '''\n    Write a function that takes a list of lists and returns the longest word in \n    that list. \n    This function should be implemented using the built-in list sort function.\n    '''\n    test_list.sort()\n    return test_list[-1][0]\n    \ndef find_longest_word_using_sorted(test_list):\n    '''\n    Write a function that takes a list of lists and returns the longest word in \n    that list. \n    This function should be implemented using a custom sort function.\n    '''\n    test_list.sort(key=lambda item: len(item[0]), reverse=True)\n    return test_list[-1][0]\n    \ndef find_first_unique_value(test_list):\n    '''\n    Write a function that takes a list of lists and returns the first unique value\n    in the list.\n    '''\n    for item in test_list:\n        if item.count(item[0]) == 1:\n            return item[0]\n    return None\n    \ndef sort_dict(test_dict):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary with \n    all the values in the dictionary sorted. \n    '''\n    result_dict = {}\n    for key in test_dict:\n        for value in test_dict[key]:\n            if value not in result_dict:\n                result_dict[value] = key\n    return result_dict\n    \ndef find_first_value_of_dict_key(test_dict):\n    '''\n    Write a function that takes a dictionary and returns the first value of the\n    first key in that dictionary.\n    '''\n    for key in test_dict:\n        return test_dict[key][0]\n    return None\n    \ndef count_occurrences(test_list):\n    '''\n    Write a function that takes a list of lists and returns the total number of\n    elements in that list.\n    '''\n    result_count = 0\n    for item in test_list:\n        result_count += len(item)\n    return result_count\n    \ndef merge_sort(test_list):\n    '''\n    Write a function that takes a list of lists and returns a new list with the\n    elements in the original list sorted in ascending order using the merge \n    sort algorithm.\n    '''\n    result_list = []\n    if len(test_list) == 1:\n        return test_list\n    else:\n        middle_index = len(test_list) // 2\n        left_list = merge_sort(test_list[:middle_index])\n        right_list = merge_sort(test_list[middle_index:])\n        \n        while len(left_list)!= 0 and len(right_list)!= 0:\n            if left_list[0] < right_list[0]:\n                result_list.append(left_list[0])\n                left_list.pop(0)\n            else:\n                result_list.append(right_list[0])\n                right_list.pop(0)\n        \n        if len(left_list)!= 0:\n            result_list += left_list\n        else:\n            result_list += right_list\n    return result_list\n    \ndef partition_recursive(test_list):\n    '''\n    Write a function that takes a list of lists and returns a list of lists with\n    the elements in the original list partitioned in such a way that all \n    elements in the first half are in the left side, and all elements in the\n    second half are in the right side.\n    '''\n    result_list = []\n    if len(test_list) == 0:\n        return []\n    else:\n        if len(test_list) % 2 == 0:\n            middle_index = len(test_list) // 2\n            left_list = partition_recursive(test_list[:middle_index])\n            right_list = partition_recursive(test_list[middle_index:])\n            for item in test_list:\n                if left_list:\n                    result_list.append(item)\n                    left_list.pop(0)\n            if right_list:\n                for item in right_list:\n                    result_list.append(item)\n                    result_list.pop(-1)\n        else:\n            middle_index = len(test_list) // 2\n            left_list = partition_recursive(test_list[:middle_index])\n            right_list = partition_recursive(test_list[middle_index:])\n            for item in test_list:\n                if left_list:\n                    result_list.append(item)\n                    left_list.pop(0)\n                else:\n                    result_list.append(item)\n                    result_list.pop(-1)\n    return result_list\n    \ndef partition_recursive_using_switch(test_list):\n    '''\n    Write a function that takes a list of lists and returns a list of lists with\n    the elements in the original list partitioned in such a way that all \n    elements in the first half are in the left side, and all elements in the\n    second half are in the right side.\n    '''\n    result_list = []\n    if len(test_list) == 0:\n        return []\n    else:\n        middle_index = len(test_list) // 2\n        middle_item = test_list[middle_index]\n        left_list = []\n        right_list = []\n        \n        for item in test_list:\n            if item < middle_item:\n                left_list.append(item)\n            else:\n                right_list.append(item)\n        \n        left_list = partition_recursive_using_switch(left_list)\n        right_list = partition_recursive_using_switch(right_list)\n        result_list.append(left_list)\n        result_list.append(middle_item)\n        result_list.append(right_list)\n    return result_list\n    \ndef is_all_duplicates(test_list):\n    '''\n    Write a function that takes a list of lists and returns True if every element\n    in the original list is the same, otherwise False.\n    '''\n    for item in test_list:\n        if len(item) == 1:\n            return True\n    return False\n    \ndef find_all_the_same(test_list):\n    '''\n    Write a function that takes a list of lists and returns a list with all the"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    l = []\n    for elem in test_list:\n        for elem2 in elem:\n            l.append(elem2)\n    return l\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n    \ndef extract_singly_rec(test_list):\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly_rec(test_list[1:])\n    \ndef test_extract_singly():\n    '''\n    Run the tests on the above function\n    '''\n    print (\"Testing extract_singly()...\", end=\"\")\n    assert extract_singly([]) == []\n    assert extract_singly([1]) == [1]\n    assert extract_singly([1,2,3]) == [1,2,3]\n    assert extract_singly([[1],2,3]) == [1,2,3]\n    assert extract_singly([[[1]],2,3]) == [1,2,3]\n    assert extract_singly([[[[1]],2,3]]) == [1,2,3]\n    assert extract_singly([[1],2,[3]]) == [1,2,3]\n    assert extract_singly([[1],2,3,[4]]) == [1,2,3,4]\n    assert extract_singly([[1,2],3,4]) == [1,2,3,4]\n    assert extract_singly([[1,2,3],4,5]) == [1,2,3,4,5]\n    assert extract_singly([[1],[2],[3],[4],[5]]) == [1,2,3,4,5]\n    assert extract_singly([[[[1]]]]) == [1]\n    assert extract_singly([[[[1]],2,3]]) == [1,2,3]\n    print (\"Done!\")\n    \ndef find_path_lengths(grid):\n    '''\n    A helper function for depth_first_search(). Given a 2D grid, return a dictionary of the path lengths\n    of each cell in the grid from the top-left to bottom-right corner, in the order of grid[0][0],\n    grid[1][0], etc.\n    '''\n    paths = {}\n    for x in range(len(grid)):\n        for y in range(len(grid[0])):\n            paths[(x,y)] = depth_first_search(grid, (x,y))\n    return paths\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for i in test_list:\n        for j in i:\n            final_list.append(j)\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list is None:\n        return None\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, -1, -1):\n        #print(i)\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, a, b):\n        tmp = nums[a]\n        nums[a] = nums[b]\n        nums[b] = tmp\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return []\n    nums_sorted = []\n    for i in range(len(nums)):\n        min_num = nums[0]\n        for j in range(len(nums)):\n            if nums[j] < min_num:\n                min_num = nums[j]\n                min_idx = j\n        nums_sorted.append(nums.pop(min_idx))\n    return nums_sorted + nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        pos = 0\n        for j in range(0,i+1):\n            if nums[j] > nums[j+1]:\n                pos = j\n        temp = nums[pos]\n        nums[pos] = nums[i]\n        nums[i] = temp\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums: return\n    \n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n    \n    # \n    # # O(n^2)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         max_index = 0\n    #         for j in range(i+1):\n    #             if nums[j] > nums[max_index]:\n    #                 max_index = j\n    #         temp = nums[max_index]\n    #         nums[max_index] = nums[i]\n    #         nums[i] = temp\n    #     return nums\n    # \n    # # O(n^2)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)):\n    #         for j in range(i+1, len(nums)):\n    #             if nums[j] > nums[i]:\n    #                 temp = nums[i]\n    #                 nums[i] = nums[j]\n    #                 nums[j] = temp\n    #     return nums\n    \n    # # O(n*n)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums) - 1, 0, -1):\n    #         max_index = 0\n    #         for j in range(i + 1):\n    #             if nums[j] > nums[max_index]:\n    #                 max_index = j\n    #         temp = nums[max_index]\n    #         nums[max_index] = nums[i]\n    #         nums[i] = temp\n    #     return nums\n    # \n    # # O(n*n)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         for j in range(i):\n    #             if nums[j] > nums[i]:\n    #                 temp = nums[i]\n    #                 nums[i] = nums[j]\n    #                 nums[j] = temp\n    #     return nums\n    \n    # # O(n)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         max_index = 0\n    #         for j in range(i+1):\n    #             if nums[j] > nums[max_index]:\n    #                 max_index = j\n    #         nums[max_index], nums[i] = nums[i], nums[max_index]\n    #     return nums\n    \n    \n    # # O(n)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         max_index = 0\n    #         for j in range(i+1):\n    #             if nums[j] > nums[max_index]:\n    #                 max_index = j\n    #         if max_index!= i:\n    #             nums[i], nums[max_index] = nums[max_index], nums[i]\n    #     return nums\n    \n    \n    # # O(n)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         max_index = 0\n    #         for j in range(i+1):\n    #             if nums[j] > nums[max_index]:\n    #                 max_index = j\n    #         if max_index!= i:\n    #             nums[max_index], nums[i] = nums[i], nums[max_index]\n    #     return nums\n    \n    # # O(n^2)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         max_index = 0\n    #         for j in range(i+1):\n    #             if nums[j] > nums[max_index]:\n    #                 max_index = j\n    #         if max_index!= i:\n    #             temp = nums[i]\n    #             nums[i] = nums[max_index]\n    #             nums[max_index] = temp\n    #     return nums\n    \n    \n    # # O(n)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         for j in range(i+1):\n    #             if nums[j] > nums[i]:\n    #                 temp = nums[i]\n    #                 nums[i] = nums[j]\n    #                 nums[j] = temp\n    #     return nums\n    \n    # # O(n^2)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         for j in range(i+1):\n    #             if nums[j] > nums[i]:\n    #                 temp = nums[i]\n    #                 nums[i] = nums[j]\n    #                 nums[j] = temp\n    #     return nums\n    \n    # # O(n^2)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         max_index = 0\n    #         for j in range(i+1):\n    #             if nums[j] > nums[max_index]:\n    #                 max_index = j\n    #         if max_index!= i:\n    #             temp = nums[i]\n    #             nums[i] = nums[max_index]\n    #             nums[max_index] = temp\n    #     return nums\n    \n    # # O(n)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         max_index = 0\n    #         for j in range(i+1):\n    #             if nums[j] > nums[max_index]:\n    #                 max_index = j\n    #         if max_index!= i:\n    #             nums[i], nums[max_index] = nums[max_index], nums[i]\n    #     return nums\n    \n    # # O(n^2)\n    # def pancake_sort(nums):\n    #     if not nums: return nums\n    #     for i in range(len(nums)-1, 0, -1):\n    #         max_index "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a stack that holds tuples of the index and element\n    pancake_stack = []\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_idx = i\n        for j in range(i, n):\n            if nums[max_idx] < nums[j]:\n                max_idx = j\n        temp = nums[i]\n        nums[i] = nums[max_idx]\n        nums[max_idx] = temp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # return \"\".join(sorted(nums))\n    \n    def swap(nums, idx1, idx2):\n        tmp = nums[idx1]\n        nums[idx1] = nums[idx2]\n        nums[idx2] = tmp\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = 0\n    while i < n:\n        largest = i\n        j = i + 1\n        while j < n:\n            if nums[j] > nums[largest]:\n                largest = j\n            j += 1\n        if largest!= i:\n            nums[i], nums[largest] = nums[largest], nums[i]\n        i += 1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # list1 = [1,2,2,2,2]\n    # list2 = [1,2,2,2,2]\n    # list3 = [1,2,2,2,2]\n    list1 = [1,2,2,2,2]\n    list2 = [1,2,2,2,2]\n    list3 = [1,2,2,2,2]\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=len(list1)\n    b=len(list2)\n    c=len(list3)\n    a=int(a)\n    b=int(b)\n    c=int(c)\n    list1=int(list1)\n    list2=int(list2)\n    list3=int(list3)\n    if a==0 or b==0 or c==0:\n        return \"Please enter the list\"\n    elif list1==list2 or list1==list3 or list2==list3:\n        return \"Please enter two different lists\"\n    else:\n        for i in range(a):\n            for j in range(b):\n                for k in range(c):\n                    if list1[i]==list2[j] and list1[i]==list3[k] and list1[i]!=list2[j] and list1[i]!=list3[k]:\n                        return print(list1[i])\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return -1\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count_same +=1\n    return count_same\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    o = 0\n    p = 0\n    q = 0\n    r = 0\n    s = 0\n    t = 0\n    u = 0\n    v = 0\n    w = 0\n    x = 0\n    y = 0\n    z = 0\n    aa = 0\n    ab = 0\n    ac = 0\n    ad = 0\n    ae = 0\n    af = 0\n    ag = 0\n    ah = 0\n    ai = 0\n    aj = 0\n    ak = 0\n    al = 0\n    am = 0\n    ao = 0\n    ap = 0\n    aq = 0\n    ar = 0\n    as = 0\n    at = 0\n    au = 0\n    av = 0\n    aw = 0\n    ax = 0\n    ay = 0\n    az = 0\n    ba = 0\n    bb = 0\n    bc = 0\n    bd = 0\n    be = 0\n    bf = 0\n    bg = 0\n    bh = 0\n    bi = 0\n    bj = 0\n    bk = 0\n    bl = 0\n    bm = 0\n    bn = 0\n    bo = 0\n    bp = 0\n    bq = 0\n    br = 0\n    bs = 0\n    bt = 0\n    bu = 0\n    bv = 0\n    bw = 0\n    bx = 0\n    by = 0\n    bz = 0\n    count = 0\n    \n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                k += 1\n            k = 0\n            j += 1\n        j = 0\n        i += 1\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < le"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    dic={}\n    for i in range(len(list1)):\n        key=list1[i]+list2[i]+list3[i]\n        if key in dic.keys():\n            dic[key]+=1\n        else:\n            dic[key]=1\n    return dic\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if(list1[i] == list2[j] and list2[j] == list3[k] and list3[k] == list1[i]):\n                    count += 1\n    print(count)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in range(len(Input)):\n        if type(Input[i])==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i,tuple):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in L:\n        count += 1\n    return count\n    \n    \ndef find_lists_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(0,len(L)):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_another(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_another_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_another_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_another_again_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_again_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_again_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_again_again_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_again_again_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_again_again_again_new(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_again_again_again_again(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    L = Input[:]\n    count = 0\n    for i in range(len(L)-1):\n        if i == 0:\n            count = 1\n        else:\n            count += 1\n    return count\n    \n    \ndef find_lists_again_again_again_again_again_again_again_again_new(Input): \n    '''\n    Write a function to find number of lists presen"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            print(\"Number of lists present in the tuple is \",i+1)\n            break\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = []\n    for i in Input:\n        L.append(i)\n    print(L)\n    return (len(set(L)))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # Get the length of the tuple\n    length = len(Input)\n    \n    # Initialize number of lists to 0\n    num_of_lists = 0\n    \n    # Traverse over the elements of the tuple\n    for i in range(length):\n        if type(Input[i]) is list:\n            num_of_lists += 1\n            \n    # Return the number of lists\n    return num_of_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return(Input.count([]))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists_count = 0\n    for i in Input:\n        if type(i) == list:\n            lists_count += 1\n    return lists_count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def list_num(Input):\n        if(type(Input) == tuple):\n            return(len(Input))\n        else:\n            return(\"Not a tuple\")\n    num = list_num(Input)\n    return(num)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] - arr[j] > max_diff:\n                max_diff = arr[i] - arr[j]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if max_diff < abs(arr[i] - arr[j]):\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n    \ndef flip(arr):\n    '''\n    Write a python function to flip an array in a way that preserves the original order of the elements.\n    '''\n    flipped_arr = []\n    i = 0\n    while i < len(arr):\n        flipped_arr.append(arr[len(arr) - i - 1])\n        i = i + 1\n    return flipped_arr\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -sys.maxsize-1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] - arr[j] > max_diff:\n                max_diff = arr[i] - arr[j]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr) \n    max_diff = -1\n    for i in range(n-1): \n        for j in range(i+1, n): \n            if abs(arr[i]-arr[j]) > max_diff: \n                max_diff = abs(arr[i]-arr[j]) \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0,len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(map(abs, arr))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    mx = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > mx:\n                mx = abs(arr[i]-arr[j])\n    return mx\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    n = len(arr)\n    max_diff = -99999999999999999999999\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff>max_diff:\n                max_diff = diff\n            # print(diff,arr[i],arr[j])\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = None\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = 0\n    for i in range(0, len(arr)):\n        if arr[i] - max > max:\n            max = arr[i] - max\n    return max\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    while x == y:\n        x = random.randint(0, 100)\n        y = random.randint(0, 100)\n    g = gcd(x, y)\n    x = x / g\n    y = y / g\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    # The code below is slow due to brute force calculation\n    x = 0\n    y = 0\n    for i in range(n):\n        a_i = a % i\n        b_i = b % i\n        if a_i == 0 and b_i == 0:\n            return (0, 0)\n        elif a_i!= 0 and b_i == 0:\n            y = i\n            break\n        elif a_i == 0 and b_i!= 0:\n            x = i\n            break\n        a = a / i\n        b = b / i\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a!= 0:\n        x = n / a\n        y = b / a\n        if x >= 0 and y >= 0 and x + y == n:\n            return (x, y)\n        else:\n            return None\n    elif b!= 0:\n        x = n / b\n        y = a / b\n        if x >= 0 and y >= 0 and x + y == n:\n            return (x, y)\n        else:\n            return None\n    else:\n        if n % 2 == 1:\n            return (1, 0)\n        else:\n            return (0, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a = a.replace(\" \", \"\")\n    a = a.split(',')\n    b = b.replace(\" \", \"\")\n    b = b.split(',')\n    x = 0\n    y = 0\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    for i in range(len(b)):\n        b[i] = int(b[i])\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            if a[i]*b[i] <= n:\n                x += 1\n            else:\n                y += 1\n    if x > y:\n        return x, y\n    else:\n        return y, x\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a, b = b, a\n    # a, b = b, a\n    for x in range(1, a+1):\n        for y in range(1, b+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if not (a == 0 or b == 0) and (a + b) % 2 == 0:\n        for x in range(1, n + 1):\n            if a * x + b * x == n:\n                return (a * x, b * x)\n        return None\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1,n):\n        for y in range(1,n):\n            if x**2 + y**2 == n and x + y == n:\n                return (x,y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = b // a\n    y = n - (a * x)\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    for i in range(1, n+1):\n        if (n % i) == 0:\n            x = i\n            y = n / i\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    for i in range(1,n):\n        if a*x + b*y == n:\n            return x, y\n        elif a*x + b*y > n:\n            y += 1\n        else:\n            x += 1\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #for val in list1:\n    #    if val in list2:\n    #        list1.remove(val)\n    #return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for ele in list1:\n        if ele not in list2:\n            new_list.append(ele)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    final_list = []\n    for i in list1:\n        if i not in list2:\n            final_list.append(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n    \n    \nlist1 = [\"apples\", \"bananas\", \"cherries\", \"orange\"]\nlist2 = [\"apple\", \"oranges\", \"banana\"]\nprint(remove_elements(list1, list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list1[:]\n    list2 = list2[:]\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    new_list = []\n    \n    for val in list1:\n        if val not in list2:\n            new_list.append(val)\n    \n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        if x in list1:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    if n < 0:\n        return None\n    for i in range(n):\n        sum += (n - 2 * i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(0,n):\n        s += n-i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n < 2):\n        return n\n    else:\n        return sum_series(n - 2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    assert(n >= 0), \"n must be > 0\"\n    i = 1\n    total = 0\n    while n >= i:\n        total += n\n        n -= i\n        i += 1\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # x = (n + (n-2) + (n-4) +...)\n    # 1 + 2 + 4 +... + n = x\n    # return x\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += i\n    return s\n    \nsum_series(4)"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 1\n    if n == 0:\n        return 0\n    while (n - i*2) >= 0:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n_minus_two = 2 * n - 1\n    return n + n_minus_two + n_minus_two - n\n    "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        raise ValueError('s must be positive, l must be positive')\n    else:\n        a = (s * s * tan(pi/s)) / (4 * tan(pi/s))\n        print(a)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / 2\ndef polygon_perimeter(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) + 2 * l\ndef circle_circumference(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2 * pi * r\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4 / 3 * pi * r * r\ndef sphere_area(r):\n    '''\n    Write a function to calculate the surface area of a sphere given its radius.\n    '''\n    return 4 * pi * r * r\ndef triangle_perimeter(b, h):\n    '''\n    Write a function to calculate the perimeter of a triangle given its base and height.\n    '''\n    return b + h + (b * tan(pi / 3))\ndef triangle_area(b, h):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return b * h / 2\ndef circle_circumference_2(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2 * pi * r\ndef circle_area_2(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef rectangle_perimeter(w, h):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its width and height.\n    '''\n    return 2 * w + 2 * h\ndef rectangle_area(w, h):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return w * h\ndef rectangle_perimeter_1(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return l + w\ndef rectangle_area_1(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return l * w\ndef rectangle_perimeter_2(b, h):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its base and height.\n    '''\n    return 2 * (b + h)\ndef rectangle_area_2(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    return b * h\ndef circle_circumference_3(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2 * pi * r\ndef circle_area_3(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef rectangle_perimeter_3(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return (l + w) * 2\ndef rectangle_area_3(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return l * w\ndef rectangle_perimeter_4(b, h):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its base and height.\n    '''\n    return (2 * b) + (2 * h)\ndef rectangle_area_4(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    return b * h\ndef circle_circumference_4(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2 * pi * r\ndef circle_area_4(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef rectangle_perimeter_5(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return (l + w) * 2\ndef rectangle_area_5(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return l * w\ndef rectangle_perimeter_6(b, h):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its base and height.\n    '''\n    return (2 * b) + (2 * h)\ndef rectangle_area_6(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    return b * h\ndef rectangle_perimeter_7(w, h):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its width and height.\n    '''\n    return (w + h) * 2\ndef rectangle_area_7(w, h):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return w * h\ndef circle_circumference_5(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2 * pi * r\ndef circle_area_5(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef rectangle_perimeter_8(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return (l + w) * 2\ndef rectangle_area_8(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return l * w\ndef rectangle_perimeter_9(b, h):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its base and height.\n    '''\n    return (2 * b) + (2 * h)\ndef rectangle_area_9(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    return b * h\ndef rectangle_perimeter_10(w, h):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its width and height.\n    '''\n    return (w + h) * 2\ndef rectangle_area_10(w, h):\n    '''\n    Write a function to calculate the area of a rectangle given its width and height.\n    '''\n    return w * h\ndef circle_circumference_6(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2 * pi * r\ndef circle_area_6(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r * r\ndef rectangle_perimeter_11(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return (l + w) * 2\ndef rectangle_area_11(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return l * w\ndef rectangle_perimeter_12(b, h):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its base and height.\n    '''\n    return (2 * b) + (2 * h)\ndef rectangle_area_12(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    return b * h\ndef rectangle_perimeter_13(w, h):\n    '''\n    Write a functio"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = int(l)\n    A = (s * (s - 2 * tan(pi / n)) ** 0.5) / 2\n    print(\"Area of the polygon is {}\".format(A))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s % 2!= 0 or s <= 0:\n        print('Wrong input. Area of polygon can only be calculated for an even number of sides.')\n    else:\n        a = s * pi / 2\n        #print(a)\n        return(a * (s - 2) + (s - 2) * (s - 1) / 2)\ndef area_triangle(s, l):\n    '''\n    Write a function to calculate the area of a triangle given the length and side of the triangle.\n    '''\n    a = (s * s) / 2\n    #print(a)\n    return(a * l)\ndef area_square(s, l):\n    '''\n    Write a function to calculate the area of a square given the length of the side of the square.\n    '''\n    a = s * s\n    #print(a)\n    return(a)\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius of the circle.\n    '''\n    a = pi * (r * r)\n    return(a)\ndef area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius of the sphere.\n    '''\n    a = 4 * pi * (r * r)\n    return(a)\ndef area_cylinder(r, h):\n    '''\n    Write a function to calculate the area of a cylinder given the radius and height of the cylinder.\n    '''\n    a = pi * (r * r) + pi * (h * h)\n    return(a)\ndef area_cone(r, h):\n    '''\n    Write a function to calculate the area of a cone given the radius and height of the cone.\n    '''\n    a = pi * (r * r) + pi * (h * h) - (2 * pi * r * h)\n    return(a)\ndef area_rectangle(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given the length and width of the rectangle.\n    '''\n    a = l * w\n    return(a)\ndef area_parallelogram(l, w):\n    '''\n    Write a function to calculate the area of a parallelogram given the length and width of the parallelogram.\n    '''\n    a = l * w\n    return(a)\ndef area_trapezium(l, w, h):\n    '''\n    Write a function to calculate the area of a trapezium given the length, width and height of the trapezium.\n    '''\n    a = (1 / 2) * (l + w) * h\n    return(a)\ndef area_trapezium_irregular(l, w, h):\n    '''\n    Write a function to calculate the area of a trapezium given the length, width and height of the trapezium.\n    '''\n    a = 0.5 * (l + w) * h\n    return(a)\ndef area_parabola(l, h):\n    '''\n    Write a function to calculate the area of a parabola given the length and height of the parabola.\n    '''\n    a = (1 / 2) * l * h\n    return(a)\ndef area_parabola_irregular(l, h):\n    '''\n    Write a function to calculate the area of a parabola given the length and height of the parabola.\n    '''\n    a = (1 / 2) * l * h\n    return(a)\ndef area_parabola_l_h(l, h):\n    '''\n    Write a function to calculate the area of a parabola given the length and height of the parabola.\n    '''\n    a = l * h\n    return(a)\ndef area_parabola_l_h_irregular(l, h):\n    '''\n    Write a function to calculate the area of a parabola given the length and height of the parabola.\n    '''\n    a = l * h\n    return(a)\ndef area_conical_trapezium(l, w, h):\n    '''\n    Write a function to calculate the area of a conical trapezium given the length, width and height of the trapezium.\n    '''\n    a = (l + w) * h\n    return(a)\ndef area_conical_trapezium_irregular(l, w, h):\n    '''\n    Write a function to calculate the area of a conical trapezium given the length, width and height of the trapezium.\n    '''\n    a = ((1 / 2) * (l + w) * h) - (2 * tan(pi / 4) * (l + w))\n    return(a)\ndef area_conical_parabola(l, h):\n    '''\n    Write a function to calculate the area of a conical parabola given the length and height of the parabola.\n    '''\n    a = (1 / 2) * l * h\n    return(a)\ndef area_conical_parabola_irregular(l, h):\n    '''\n    Write a function to calculate the area of a conical parabola given the length and height of the parabola.\n    '''\n    a = (1 / 2) * l * h\n    return(a)\ndef area_conical_parabola_l_h(l, h):\n    '''\n    Write a function to calculate the area of a conical parabola given the length and height of the parabola.\n    '''\n    a = (1 / 2) * l * h\n    return(a)\ndef area_conical_parabola_l_h_irregular(l, h):\n    '''\n    Write a function to calculate the area of a conical parabola given the length and height of the parabola.\n    '''\n    a = (1 / 2) * l * h\n    return(a)\ndef area_conical_cylinder(r, h):\n    '''\n    Write a function to calculate the area of a conical cylinder given the radius and height of the cylinder.\n    '''\n    a = pi * (r * r) + pi * (h * h)\n    return(a)\ndef area_conical_cylinder_irregular(r, h):\n    '''\n    Write a function to calculate the area of a conical cylinder given the radius and height of the cylinder.\n    '''\n    a = pi * (r * r) + pi * (h * h) - (2 * pi * r * h)\n    return(a)\ndef area_conical_sphere(r):\n    '''\n    Write a function to calculate the area of a conical sphere given the radius of the sphere.\n    '''\n    a = 4 * pi * (r * r)\n    return(a)\ndef area_conical_sphere_irregular(r):\n    '''\n    Write a function to calculate the area of a conical sphere given the radius of the sphere.\n    '''\n    a = 4 * pi * (r * r) - (4 * pi * r * r * r)\n    return(a)\ndef area_cone_irregular(r, h):\n    '''\n    Write a function to calculate the area of a cone given the radius and height of the cone.\n    '''\n    a = pi * (r * r) + pi * (h * h) - (2 * pi * r * h)\n    return(a)\ndef area_cone_irregular_2(r, h):\n    '''\n    Write a function to calculate the area of a cone given the radius and height of the cone.\n    '''\n    a = pi * (r * r) + pi * (h * h) - (2 * pi * r * h)\n    return(a)\ndef area_sphere_irregular(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius of the sphere.\n    '''\n    a = 4 * pi * (r * r)\n    return(a)\ndef area_sphere_irregular_2(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius of the sphere.\n    '''\n    a = 4 * pi * (r * r)\n    return(a)\ndef area_sphere_irregular_"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    l = int(l)\n    s = int(s)\n    return (l * (s - 2))/2 * math.sin(2 * pi / s)\ndef factorial(n):\n    '''\n    Write a function factorial() that returns the factorial of a number. For example:\n    >>> factorial(5)\n    120\n    '''\n    import math\n    return math.factorial(n)\ndef sum_n(n):\n    '''\n    Write a function sum_n() that returns the sum of the first n numbers. For example:\n    >>> sum_n(5)\n    15\n    '''\n    import math\n    n = int(n)\n    return math.floor(n * (math.exp(1) - 1)/2)\ndef maximum(a, b):\n    '''\n    Write a function maximum() that returns the maximum of two numbers. For example:\n    >>> maximum(10, 20)\n    20\n    '''\n    return max(a,b)\ndef tan_bisector(x1, y1, x2, y2):\n    '''\n    Write a function tan_bisector() that returns the tangent of an angle between the lines. It should use the hypotenuse of the triangle as the length of the tangent. For example:\n    >>> tan_bisector(0, 0, 3, 4)\n    1.0\n    '''\n    import math\n    return math.hypot((x1 - x2), (y1 - y2))/math.hypot((x1 - x2), (y1 - y2))\ndef max_length_triangle(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function max_length_triangle() that returns the maximum length of an edge of a triangle. For example:\n    >>> max_length_triangle(0, 0, 3, 4, 3, 4)\n    5\n    '''\n    import math\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef is_right(p1, p2, p3, p4):\n    '''\n    Write a function is_right() that returns True if and only if the angle formed by the points p1, p2, p3 and p4 is strictly right.\n    You can assume the angles will be in degrees. For example:\n    >>> is_right(1, 1, 0, 0)\n    True\n    '''\n    p1, p2, p3, p4 = map(float, [p1, p2, p3, p4])\n    a = tan_bisector(p1, p2, p3, p4)\n    return a\ndef is_right_triangle(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function is_right_triangle() that returns True if and only if the angle formed by the points (x1, y1), (x2, y2), and (x3, y3) is strictly right.\n    You can assume the angles will be in degrees. For example:\n    >>> is_right_triangle(0, 0, 3, 4, 3, 4)\n    True\n    '''\n    import math\n    return is_right(x1, y1, x2, y2) == is_right(x2, y2, x3, y3) == is_right(x1, y1, x3, y3)\ndef is_right_angle(angle, degree=True):\n    '''\n    Write a function is_right_angle() that returns True if and only if the angle formed by the points (0, 0), (1, 0), and (0, 1) is strictly right.\n    You can assume the angle will be in degrees or radians.\n    >>> is_right_angle(0)\n    True\n    >>> is_right_angle(45)\n    False\n    >>> is_right_angle(45, False)\n    True\n    '''\n    import math\n    angle = float(angle)\n    if degree:\n        return is_right(0, 0, 1, 0) == is_right(1, 0, 0, 1) == is_right(0, 1, 0, 1)\n    else:\n        return is_right(0, 0, 1, 0) == is_right(1, 0, 0, 1) == is_right(0, 1, 0, 1)\ndef is_right_side_of_polygon(x, y, s, l):\n    '''\n    Write a function is_right_side_of_polygon() that returns True if and only if the point (x, y) is on the right side of a polygon defined by a set of lines with lengths s and l.\n    For example:\n    >>> is_right_side_of_polygon(0, 0, 1, 1)\n    True\n    >>> is_right_side_of_polygon(0, 0, -1, 1)\n    True\n    >>> is_right_side_of_polygon(0, 0, 1, -1)\n    False\n    '''\n    import math\n    s = s.split(' ')\n    s = list(map(float, s))\n    l = l.split(' ')\n    l = list(map(float, l))\n    return (x + s[0] >= s[1]) and (x + l[0] >= l[1]) and (x <= l[2]) and (x <= s[2])\ndef is_right_side_of_triangle(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function is_right_side_of_triangle() that returns True if and only if the point (x, y) is on the right side of a triangle defined by three points (x1, y1), (x2, y2), and (x3, y3).\n    For example:\n    >>> is_right_side_of_triangle(0, 0, 3, 4, 3, 4)\n    True\n    >>> is_right_side_of_triangle(0, 0, 3, 4, 3, 4)\n    True\n    >>> is_right_side_of_triangle(0, 0, 3, 4, 3, 4)\n    True\n    '''\n    import math\n    x1, y1, x2, y2, x3, y3 = map(float, [x1, y1, x2, y2, x3, y3])\n    return (x1 + x2 >= x3) and (x2 + x3 >= x1) and (x1 + x3 >= x2) and (x3 + x1 >= x2)\ndef is_right_triangle(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function is_right_triangle() that returns True if and only if the point (x, y) is on the right side of a triangle defined by three points (x1, y1), (x2, y2), and (x3, y3).\n    For example:\n    >>> is_right_triangle(0, 0, 3, 4, 3, 4)\n    True\n    >>> is_right_triangle(0, 0, 3, 4, 3, 4)\n    True\n    >>> is_right_triangle(0, 0, 3, 4, 3, 4)\n    True\n    '''\n    import math\n    return is_right_side_of_triangle(x1, y1, x2, y2, x3, y3) == is_right_side_of_triangle(x2, y2, x3, y3, x1, y1) == is_right_side_of_triangle(x1, y1, x3, y3, x2, y2)\ndef is_right_angle(angle, degree=True):\n    '''\n    Write a function is_right_angle() that returns True if and only if the angle formed by the points (0, 0), (1, 0), and (0, 1) is strictly right.\n    You can assume the angle will be in degrees or radians.\n    >>> is_right_angle(0)\n    True\n    >>> is_right_angle(45)\n    False\n    >>> is_right_angle(45, False)\n    True\n    '''\n    import mat"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l * 0.5)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(round(s / l,2))\n    return round(s / l,2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert l > 0\n    assert s >= 3\n    \n    return 0.5 * pi * (l ** 2) / s\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * ((s - 2) * pi)) / 2.0\n    return(round(area, 3))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.25 * l * s * (s - 2)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = 0\n    divisor = n\n    return divisor == divisorSum(divisor) \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: return False\n    \n    # n = 4, divisors = 1,2,4, so we should return false\n    divisors = [] \n    divisor = 1\n    while divisor <= n: \n        if n % divisor == 0: \n            divisors.append(divisor)\n        divisor += 1\n    if sum(divisors) == n:\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    result = sum([i for i in range(1,int(n**0.5)+1) if n%i==0])\n    if result == n:\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n):\n        if(n%i==0 and div_sum(n/i)==True):\n            return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return (sum(factors(n)) == sum(factors(n*n)))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n1=1\n    n2=1\n    i=1\n    while i<=n:\n        if (n1%i==0):\n            n1=n1+i\n            if (n2%i==0):\n                n2=n2+i\n            else:\n                n2=n2+i\n        i=i+1\n    if (n1==n2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #pseudocode\n    #go through each number in range 0 to n\n    #if the number is divisible by either 1, or n, return False\n    #check if the sum of the divisors of the number is equal to itself\n    #if it is, return True\n    #return False\n    sum = 0\n    for x in range(1,n+1):\n        if n % x == 0:\n            sum += x\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    factors = 1\n    while factors <= math.sqrt(n): \n        if n % factors == 0: \n            sum = factors + (int(n/factors)) \n            if sum == n: \n                return True \n        factors += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n): \n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v3(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v4(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v5(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v6(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v7(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v8(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v9(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v10(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v11(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v12(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v13(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v14(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v15(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v16(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v17(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v18(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n    else:\n        return False\ndef div_sum_v19(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    sum_divisor = 0\n    for i in range(1,n):\n        if n % i == 0:\n            x += 1\n            sum_divisor += i\n    if x == 2:\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = 0\n    for i in range(1,n+1):\n        if (n%i == 0):\n            d += i\n    if d == n:\n        return True\n    return False\n    \ndef comp(n1,n2):\n    '''\n    Write a function to determine if two integers are the same. \n    '''\n    if n1 == n2:\n        return True\n    return False\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in str1:\n        d[i.lower()] = d.get(i.lower(), 0) + 1\n    return sum([i[1] for i in d.items()])\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(alphabet)):\n        for j in range(len(str1)):\n            if alphabet[i] == str1[j].lower():\n                count += 1\n    print(count)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    char_arr = []\n    \n    # O(n)\n    for char in str1:\n        if char not in char_arr:\n            char_arr.append(char)\n        else:\n            count += 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count += 1\n    return count\n    "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alpha:\n            count += 1\n    return count \n    \ndef get_string_frequency(str1): \n    '''\n    Write a function to get the string frequency of a string, i.e., how many times a given character appears in a string.\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alpha:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    output = {}\n    count = 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # str1 = input()\n    # print(count_char_position(str1))\n    str_list = list(str1)\n    output_dict = {}\n    for i in range(len(str_list)):\n        if str_list[i] in output_dict:\n            output_dict[str_list[i]] += 1\n        else:\n            output_dict[str_list[i]] = 1\n    return output_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d={}\n    for i in str1:\n        if i.isalpha():\n            d[i.lower()]=d.get(i.lower(),0)+1\n    return d\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str_len = len(str1)\n    for i in range(str_len):\n        if(i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # 1st approach\n    #count = {}\n    #for i in range(26):\n    #    count[chr(i + 97)] = 0\n    #\n    #for ch in str1:\n    #    count[ch] += 1\n    \n    # 2nd approach\n    count = 0\n    str1 = str1.lower()\n    for i in range(26):\n        count += str1.count(chr(i + 97))\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_count = 0\n    even_count = 0\n    \n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            \n            if xor % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    print(f'Number of pairs of even numbers: {even_count}')\n    print(f'Number of pairs of odd numbers: {odd_count}')\n    \n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Write your code here\n    n = len(A)\n    if n < 2:\n        return 0\n    m = max(A)\n    # print(m)\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if A[i] ^ A[j] == m:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    evens = []\n    for x in A:\n        if x ^ 2 in evens:\n            return 1\n        else:\n            evens.append(x ^ 2)\n    return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # init empty dictionary\n    d = {}\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for i in range(0, len(A)-1, 2):\n        if A[i] ^ A[i+1] == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum([x for x in A if x^2 > 0])\n    \ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    return sum([x for x in A if x^2 < 0])\n    \ndef find_highest_number(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific number.\n    '''\n    return sum([x for x in A if x == find_next_pair_number(A)])\n    \ndef find_next_pair_number(A):\n    '''\n    Write a function that finds the next pair number in a list that adds up to some value.\n    '''\n    return A[0] + A[-1]\n    \ndef find_num_of_pairs_with_sum_to_n(A, n):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number(A)])\n    \ndef find_num_of_pairs_with_sum_to_n_in_range(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number(A)])\n    \ndef find_next_pair_number_sorted(A):\n    '''\n    Write a function that finds the next pair number in a list that adds up to some value.\n    '''\n    return A[0] + A[-1]\n    \ndef find_num_of_pairs_with_sum_to_n_sorted(A, n):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_sorted(A)])\n    \ndef find_num_of_pairs_with_sum_to_n_sorted_in_range(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_sorted(A)])\n    \ndef find_next_pair_number_in_range(A):\n    '''\n    Write a function that finds the next pair number in a list that adds up to some value.\n    '''\n    return A[0] + A[-1]\n    \ndef find_num_of_pairs_with_sum_to_n_in_range(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_in_range(A)])\n    \ndef find_num_of_pairs_with_sum_to_n_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_in_range(A)])\n    \ndef find_next_pair_number_in_range_sorted(A):\n    '''\n    Write a function that finds the next pair number in a list that adds up to some value.\n    '''\n    return A[0] + A[-1]\n    \ndef find_num_of_pairs_with_sum_to_n_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_in_range_sorted(A)])\n    \ndef find_next_pair_number_in_range_sorted(A):\n    '''\n    Write a function that finds the next pair number in a list that adds up to some value.\n    '''\n    return A[0] + A[-1]\n    \ndef find_num_of_pairs_with_sum_to_n_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_in_range_sorted(A)])\n    \ndef find_num_of_pairs_in_range(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x < n or x > N])\n    \ndef find_num_of_pairs_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x < n or x > N])\n    \ndef find_num_of_pairs_with_sum_to_n_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x < n or x > N])\n    \ndef find_num_of_pairs_with_sum_to_n_sorted(A, n):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_sorted(A)])\n    \ndef find_num_of_pairs_with_sum_to_n_sorted_in_range(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_sorted(A)])\n    \ndef find_num_of_pairs_with_sum_to_n_sorted_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_sorted(A)])\n    \ndef find_num_of_pairs_with_sum_to_n_sorted_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x == find_next_pair_number_sorted(A)])\n    \ndef find_num_of_pairs_with_sum_to_n_in_range(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x < n or x > N])\n    \ndef find_num_of_pairs_with_sum_to_n_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add up to a specific value.\n    '''\n    return sum([x for x in A if x < n or x > N])\n    \ndef find_num_of_pairs_with_sum_to_n_in_range_sorted(A, n, N):\n    '''\n    Write a function that counts the number of pairs of integers in a list that add u"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def find_even_pair(A): \n        '''\n        Write a function that counts the number of pairs of integers in a list that xor to an even number.\n        '''\n        ans = 0\n        for i in range(len(A)):\n            for j in range(i+1,len(A)):\n                if (A[i]^A[j]) % 2 == 0:\n                    ans = ans + 1\n        return ans\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    n_2 = n >> 1\n    if n_2 == 0:\n        return 2\n    while n_2 > 1:\n        n_2 = n_2 >> 1\n        if n_2 == 0:\n            return n\n    return n_2 + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = n + 1\n    while True:\n        if (p & (p-1) == 0):\n            return p\n        else:\n            p = p + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # base case\n    if n < 1:\n        return 1\n    # recursive call\n    return 1 << (n >> 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while not (n & (n - 1)) == 0:\n        n = n + 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    k=0\n    while k!=n:\n        k+=1\n    return k\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    powers = []\n    power = 2\n    while power <= n:\n        powers.append(power)\n        power = 2**(power+1)-1\n    return min(powers)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    max_power_of_2 = 0\n    while (1 << max_power_of_2) < n:\n        max_power_of_2 += 1\n    return (1 << max_power_of_2)\nprint(next_power_of_2(10))\nprint(next_power_of_2(15))\nprint(next_power_of_2(16))\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = 2**n\n    while(l//2!= l):\n        l = l//2\n        if(l//2!= l):\n            return l\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    for i in range(1, 64): \n        if ((1 << i) > n): \n            return 1 << i\n    return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    occur=0\n    for i in range(len(a)):\n        if a[i]==x:\n            occur+=1\n    return occur\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if(i == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for element in a:\n        if element == x:\n            count +=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if(a[i]==x):\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\nprint(frequency([1,3,4,5,5,7,4,6,3],4))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #Create a function that finds the sum of all values in the list between the indices m and n, inclusive\n    #The function should return the sum\n    #The function should be recursive\n    if m > n:\n        return 0\n    else:\n        if m == n:\n            return list1[m]\n        else:\n            return list1[m] + sum_range_list(list1, m+1, n)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > 0 and n < len(list1) and m < n:\n        return sum(list1[m:n+1])\n    else:\n        print('ERROR: Incorrect indices')\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 0 or m >= len(list1) or n >= len(list1):\n        return 0\n    sum1 = 0\n    for i in range(m, n+1):\n        sum1 += list1[i]\n    return sum1\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    num_sum = 0\n    for i in range(m-1,n):\n        num_sum += list1[i]\n    return num_sum\nprint(sum_range_list([1,2,3,4,5],2,4))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n + 1):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > 0 and n < len(list1):\n        # Return the sum of the elements\n        # from list1[m] up to list1[n].\n        return sum(list1[m:n + 1])\n    else:\n        return \"Invalid indices\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # range_list = list1[m:n]\n    # for i in range_list:\n    #     print(i)\n    range_list = []\n    for i in range(m, n):\n        range_list.append(list1[i])\n    sum_range_list = 0\n    for i in range_list:\n        sum_range_list += i\n    return sum_range_list\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1)-1 or m < 0 or n > len(list1)-1 or n < 0:                                                                                                                     \n        return -1\n    else:\n        total = 0 \n        for i in range(m,n+1):\n            total += list1[i]\n        return total\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(5.0/2.0)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = ((a**2)*(5*math.sin(math.radians(60))/2))+((a**2)*math.sin(math.radians(60))/2)\n    return round(perimeter,2)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5*math.sin(math.pi/5)\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    assert a > 0, \"a > 0 is not a valid value, a must be a positive integer.\"\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #side\n    side = a\n    #side_2\n    side_2 = side * 2\n    #side_3\n    side_3 = side * 3\n    #side_4\n    side_4 = side * 4\n    #side_5\n    side_5 = side * 5\n    #side_6\n    side_6 = side * 6\n    #side_7\n    side_7 = side * 7\n    #side_8\n    side_8 = side * 8\n    #side_9\n    side_9 = side * 9\n    #side_10\n    side_10 = side * 10\n    #perimeter\n    perimeter = math.sqrt(8 * side * side)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return round(math.sqrt((a*(2*a-1)) / 4),3)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<=0:\n        print(\"The sides of the pentagon have to be greater than 0\")\n    else:\n        perimeter = (5*a)+(5*math.sqrt(5))\n        return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from its length of sides.\n    '''\n    if a<=0:\n        print(\"The sides of the pentagon have to be greater than 0\")\n    else:\n        area = math.sqrt((5*a*(a+5))/4)\n        return area\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = a * 2\n    return s * 5 / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # the formula for the perimeter is:\n    # p = (1/5) (a * a)\n    # where a is the side length\n    # example:\n    # p = 5 * 5 = 25\n    return ((1 / 5) * (a * a))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in s:\n        if i =='s':\n            cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance_count = 0\n    for letter in s:\n        if letter =='s' or letter == 'd':\n            occurance_count += 1\n    return occurance_count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    s = s.lower()\n    s = s.replace(' ','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace('-','')\n    s = s.replace('_','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('+','')\n    s = s.replace('!','')\n    s = s.replace('.','')\n    s = s.replace(':','')\n    s = s.replace(';','')\n    s = s.replace('?','')\n    s = s.replace('\\'','')\n    s = s.replace('*','')\n    s = s.replace(')','')\n    s = s.replace('(','')\n    s = s.replace('\\n','')\n    s = s.replace('/','')\n    s = s.replace('\"','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('|','')\n    s = s.replace('/','')\n    s = s.replace('=','')\n    s = s.replace('$','')\n    s = s.replace('@','')\n    s = s.replace('#','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('%','')\n    s = s.replace('^','')\n    s = s.replace('~','')\n    s = s.replace('>','')\n    s = s.replace('<','')\n    s = s.replace('`','')\n    s = s.replace('~','')\n    s = s.replace('`','')\n    s = s.replace('\\n','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('&','')\n    s = s.replace('^','')\n    s = s.replace('*','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('!','')\n    s = s.replace('=','')\n    s = s.replace('/','')\n    s = s.replace(';','')\n    s = s.replace('%','')\n    s = s.replace('$','')\n    s = s.replace('@','')\n    s = s.replace('#','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('&','')\n    s = s.replace('~','')\n    s = s.replace('`','')\n    s = s.replace('^','')\n    s = s.replace('%','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('!','')\n    s = s.replace('*','')\n    s = s.replace('~','')\n    s = s.replace('`','')\n    s = s.replace('|','')\n    s = s.replace('~','')\n    s = s.replace('.','')\n    s = s.replace('-','')\n    s = s.replace('.','')\n    s = s.replace('+','')\n    s = s.replace('~','')\n    s = s.replace('!','')\n    s = s.replace(';','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('_','')\n    s = s.replace('*','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('^','')\n    s = s.replace('$','')\n    s = s.replace('@','')\n    s = s.replace('#','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('&','')\n    s = s.replace('%','')\n    s = s.replace('\\'','')\n    s = s.replace('-','')\n    s = s.replace('&','')\n    s = s.replace('|','')\n    s = s.replace('~','')\n    s = s.replace('`','')\n    s = s.replace('%','')\n    s = s.replace('.','')\n    s = s.replace('-','')\n    s = s.replace('.','')\n    s = s.replace('+','')\n    s = s.replace('~','')\n    s = s.replace('`','')\n    s = s.replace('|','')\n    s = s.replace('~','')\n    s = s.replace('`','')\n    s = s.replace('\\'','')\n    s = s.replace('^','')\n    s = s.replace('$','')\n    s = s.replace('@','')\n    s = s.replace('#','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('&','')\n    s = s.replace('%','')\n    s = s.replace('^','')\n    s = s.replace('$','')\n    s = s.replace('@','')\n    s = s.replace('#','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('&','')\n    s = s.replace('*','')\n    s = s.replace('-','')\n    s = s.replace('+','')\n    s = s.replace('!','')\n    s = s.replace('=','')\n    s = s.replace('/','')\n    s = s.replace(';','')\n    s = s.replace('%','')\n    s = s.replace('$','')\n    s = s.replace('@','')\n    s = s.replace('#','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('&','')\n    s = s.replace('^','')\n    s = s.replace('$','')\n    s = s.replace('@','')\n    s = s.replace('#','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace("
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #code here\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # code here\n    s=s.lower()\n    s=s.replace(' ', '')\n    s=s.replace('-', '')\n    s=s.replace(',', '')\n    s=s.replace('.', '')\n    s=s.replace(':', '')\n    s=s.replace(';', '')\n    s=s.replace('!', '')\n    s=s.replace('?', '')\n    s=s.replace(\"'\", '')\n    count=s.count('std')\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if(s[i]=='d'):\n            count+=1\n        else:\n            count=count\n    return count\n    \ndef string_char_count(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if(s[i]=='d'):\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.split()\n    counter = 0\n    for i in range(len(s)):\n        if'std' in s[i]:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return False\n    else:\n        if test_tuple[0] == test_tuple[1]:\n            return check_type(test_tuple[2:])\n        else:\n            return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    from collections import namedtuple\n    from typing import List, Any\n    named_tuple = namedtuple('Data_type', ['a', 'b', 'c', 'd', 'e'])\n    # return True if all elements in tuple are of same type\n    # else return False\n    tuple_of_data_types = (1,2,3,'a',3.2)\n    named_tuple_1 = named_tuple('Data_type', ['a', 'b', 'c', 'd', 'e'])\n    named_tuple_2 = named_tuple('Data_type', ['a', 'b', 'c', 'd', 'e'])\n    named_tuple_3 = named_tuple('Data_type', ['a', 'b', 'c', 'd', 'e'])\n    named_tuple_4 = named_tuple('Data_type', ['a', 'b', 'c', 'd', 'e'])\n    named_tuple_5 = named_tuple('Data_type', ['a', 'b', 'c', 'd', 'e'])\n    if (type(tuple_of_data_types) == type(named_tuple_1)):\n        if (type(tuple_of_data_types) == type(named_tuple_2)):\n            if (type(tuple_of_data_types) == type(named_tuple_3)):\n                if (type(tuple_of_data_types) == type(named_tuple_4)):\n                    if (type(tuple_of_data_types) == type(named_tuple_5)):\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"tuple expected\")\n    for x in test_tuple:\n        if not isinstance(x, int):\n            raise TypeError(\"all elements must be int\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    from collections import namedtuple\n    TestTuple = namedtuple('TestTuple', ['name', 'age', 'gender', 'class_of_student', 'number_of_children', 'email','mob_no','religion', 'address', 'experience', 'occupation', 'education', 'kis_id', 'blood_group', 'height', 'weight'])\n    test_tuple = TestTuple(test_tuple[0], test_tuple[1], test_tuple[2], test_tuple[3], test_tuple[4], test_tuple[5], test_tuple[6], test_tuple[7], test_tuple[8], test_tuple[9], test_tuple[10], test_tuple[11], test_tuple[12], test_tuple[13], test_tuple[14], test_tuple[15], test_tuple[16], test_tuple[17])\n    test_tuple = test_tuple._asdict()\n    temp_dct = {'name': test_tuple.get('name'),\n                'age': test_tuple.get('age'),\n                'gender': test_tuple.get('gender'),\n                'class_of_student': test_tuple.get('class_of_student'),\n                'number_of_children': test_tuple.get('number_of_children'),\n                'email': test_tuple.get('email'),\n                'mob_no': test_tuple.get('mob_no'),\n                'religion': test_tuple.get('religion'),\n                'address': test_tuple.get('address'),\n                'experience': test_tuple.get('experience'),\n                'occupation': test_tuple.get('occupation'),\n                'education': test_tuple.get('education'),\n                'kis_id': test_tuple.get('kis_id'),\n                'blood_group': test_tuple.get('blood_group'),\n                'height': test_tuple.get('height'),\n                'weight': test_tuple.get('weight')}\n    for i in temp_dct:\n        if isinstance(temp_dct[i], int):\n            if temp_dct[i] < 0 or temp_dct[i] > 1000:\n                return False\n        if isinstance(temp_dct[i], str):\n            if temp_dct[i] == '':\n                return False\n        if isinstance(temp_dct[i], list):\n            for j in temp_dct[i]:\n                if isinstance(j, str):\n                    if j == '':\n                        return False\n        if isinstance(temp_dct[i], tuple):\n            for j in temp_dct[i]:\n                if isinstance(j, int):\n                    if j < 0 or j > 1000:\n                        return False\n        if isinstance(temp_dct[i], dict):\n            for j in temp_dct[i]:\n                if isinstance(temp_dct[i], str):\n                    if temp_dct[i] == '':\n                        return False\n        if isinstance(temp_dct[i], set):\n            for j in temp_dct[i]:\n                if isinstance(j, int):\n                    if j < 0 or j > 1000:\n                        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    a = 0\n    for i in test_tuple:\n        if type(i)!= type(a):\n            return False\n        a = i\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(f\"{'-'*40}\")\n    for t in test_tuple:\n        print(t)\n        if isinstance(t, tuple):\n            print(f\"{'-'*40}\")\n            for i in t:\n                print(i)\n                if isinstance(i, tuple):\n                    print(f\"{'-'*40}\")\n                    for j in i:\n                        print(j)\n                        if isinstance(j, tuple):\n                            print(f\"{'-'*40}\")\n                            for k in j:\n                                print(k)\n                                if isinstance(k, tuple):\n                                    print(f\"{'-'*40}\")\n                                    for l in k:\n                                        print(l)\n                                        if isinstance(l, tuple):\n                                            print(f\"{'-'*40}\")\n                                            for m in l:\n                                                print(m)\n                                                if isinstance(m, tuple):\n                                                    print(f\"{'-'*40}\")\n                                                    for n in m:\n                                                        print(n)\n                                                        if isinstance(n, tuple):\n                                                            print(f\"{'-'*40}\")\n                                                            for o in n:\n                                                                print(o)\n                                                                if isinstance(o, tuple):\n                                                                    print(f\"{'-'*40}\")\n                                                                    for p in o:\n                                                                        print(p)\n                                                                        if isinstance(p, tuple):\n                                                                            print(f\"{'-'*40}\")\n                                                                            for q in p:\n                                                                                print(q)\n                                                                                if isinstance(q, tuple):\n                                                                                    print(f\"{'-'*40}\")\n                                                                                    for r in q:\n                                                                                        print(r)\n                                                                                        if isinstance(r, tuple):\n                                                                                            print(f\"{'-'*40}\")\n                                                                                            for s in r:\n                                                                                                print(s)\n                                                                                                if isinstance(s, tuple):\n                                                                                                print(f\"{'-'*40}\")\n                                                                                                for t in s:\n                                                                                                print(t)\n                                                                                                if isinstance(t, tuple):\n                                                                                                    print(f\"{'-'*40}\")\n                                                                                                    for u in t:\n                                                                                                        print(u)\n                                                                                                        if isinstance(u, tuple):\n                                                                                                        print(f\"{'-'*40}\")\n                                                                                                        for v in u:\n                                                                                                            print(v)\n                                                                                                            if isinstance(v, tuple):\n                                                                                                        print(f\"{'-'*40}\")\n                                                                                                        for w in v:\n                                                                                                        print(w)\n                                                                                                        if isinstance(w, tuple):\n                                                                                                            print(f\"{'-'*40}\")\n                                                                                                            for x in w:\n                                                                                                            print(x)\n                                                                                                            if isinstance(x, tuple):\n                                                                                                            print(f\"{'-'*40}\")\n                                                                                                            for y in x:\n                                                                                                                print(y)\n                                                                                                            if isinstance(y, tuple):\n                                                                                                                print(f\"{'-'*40}\")\n                                                                                                                for z in y:\n                                                                                                                    print(z)\n                                                                                                                    if isinstance(z, tuple):\n                                                                                                                    print(f\"{'-'*40}\")\n                                                                                                                    for a in z:\n                                                                                                                        print(a)\n                                                                                                                        if isinstance(a, tuple):\n                                                                                                                            print(f\"{'-'*40}\")\n                                                                                                                            for b in a:\n                                                                                                                                print(b)\n                                                                                                                                if isinstance(b, tuple):\n                                                                                                                                print(f\"{'-'*40}\")\n                                                                                                                                for c in b:\n                                                                                                                                    print(c)\n                                                                                                                                    if isinstance(c, tuple):\n                                                                                                                                        print(f\"{'-'*40}\")\n                                                                                                                                        for d in c:\n                                                                                                                                        print(d)\n                                                                                                                                        if isinstance(d, tuple):\n                                                                                                                                            print(f\"{'-'*40}\")\n                                                                                                                                            for e in d:\n                                                                                                                                            print(e)\n                                                                                                                                            if isinstance(e, tuple):\n                                                                                                                                                print(f\"{'-'*40}\")\n                                                                                                                                                for f in e:\n                                                                                                                                                print(f)\n                                                                                                                                                if isinstance(f, tuple):\n                                                                                                                                                    print(f\"{'-'*40}\")\n                                                                                                                                                    for g in f:\n                                                                                                                                                    print(g)\n                                                                                                                                                    if isinstance(g, tuple):\n                                                                                                                                                        print(f\"{'-'*40}\")\n                                                                                                                                                            for h in g:\n                                                                                                                                                    print(h)\n                                                                                                                                                    if isinstance(h, tuple):\n                                                                                                                                                        print(f\"{'-'*40}\")\n                                                                                                                                                            for i in h:\n                                                                                                                                                    print(i)\n                                                                                                                                                    if isinstance(i, tuple):\n                                                                                                                                                        print(f\"{'-'*40}\")\n                                                                                                                                                        for j in i:\n                                                                                                                                                    print(j)\n                                                                                                                                                    if isinstance(j, tuple):\n                                                                                                                                                        print(f\"{'-'*40}\")\n                                                                                                                                                        for k in j:\n                                                                                                                                                    print(k)\n                                                                                                                                                    if isinstance(k, tuple):\n                                                                                                                                                        print(f\"{'-'*40}\")\n                                                                                                                                                    for l in k:\n                                                                                                                                                    print(l)\n                                                                                                                                                if isinstance(l, tuple):\n                                                                                                                                                        print(f\"{'-'*40}\")\n                                                                                                                                                for m in l:\n                                                                                                                                                    print(m)\n                                                                                                                                            if isinstance(m, tuple):\n                                                                                                                                                        print(f\"{'-'*40}\")\n                                                                                                                                                for n in m:\n                                                                                                                                                    print(n)\n                                                                                                                                            if isinstance(n, tuple):\n                                                                                                                                                    print(f\"{'-'*40}\")\n                                                                                                                                                for o in n:\n                                                                                                                                                    print(o)\n                                                                                                                                            if isinstance(o, tuple):\n                                                                                                                                                    print(f\"{'-'*40}\")\n                                                                                                                                                for p in o:\n                                                                                                                                                    print(p)\n                                                                                                                                            if isinstance(p, tuple):\n                                                                                                                                                    print(f\"{'-'*40}\")\n                                                                                                                                                for q in p:\n                                                                                                                                                    print(q)\n                                                                                                                                            if isinstance(q, tuple):\n                                                                                                                                                    print(f\"{'-'*40}\")\n                                                                                                                                                for r in q:\n                                                                                                                                                    print(r)\n                                                                                                                                            if isinstance(r, tuple):\n                                                                                                                                                    print(f\"{'-'*40}\")\n                                                                                                                                                for s in r:\n                                                                                                                                                "
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = True\n    for elem in test_tuple:\n        if type(elem)!= type(test_tuple[0]):\n            result = False\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i,(int,float,complex,str,bool)):\n            print(\"Your tuple does not contain the only types: int, float, complex, str and bool\")\n            break\n    else:\n        print(\"Your tuple contains only the types: int, float, complex, str and bool\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple)\n    if data_type!= tuple:\n        raise TypeError('Please provide a tuple')\n    if len(set([type(i) for i in test_tuple])) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n-1] == x:\n        return True\n    elif arr[0] == x:\n        return True\n    elif arr[n-1]!= x and arr[0]!= x:\n        return False\n    \n    start = 0\n    end = n-1\n    \n    while start <= end:\n        mid = (start+end)//2\n        \n        if arr[mid] == x:\n            end = mid - 1\n        elif arr[mid]!= x:\n            start = mid + 1\n            \n    return True if start <= n/2 else False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    curr_count = 0\n    idx = 0\n    if(n == 0):\n        return False\n    while(idx < n):\n        if(arr[idx] == x):\n            curr_count += 1\n        else:\n            curr_count -= 1\n        idx += 1\n    if(curr_count > (n/2)):\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = n - 1\n    while l <= r:\n        mid = (l + r)//2\n        count = 0\n        for i in range(l, r+1):\n            if arr[i] == x:\n                count += 1\n        if count > n//2:\n            return True\n        elif count < n//2:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    first = 0\n    last = n-1\n    while (first<=last):\n        mid = (first+last)//2\n        if arr[mid]==x:\n            if mid==0 or arr[mid-1]!=x:\n                return True\n            else:\n                last = mid-1\n        elif arr[mid]==arr[mid-1]:\n            first = mid+1\n        else:\n            last = mid-1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Write your code here.\n    start = 0\n    end = n - 1\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr = sorted(arr)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n    if count > (n/2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # First, we want to take in n, which is the length of the array. Also, we need to know the number of times that the element occurs.\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n    # If the number of times x occurs in the array is greater than n/2, return true.\n    if count > n/2:\n        return True\n    else:\n        return False\n    \n    # Overall runtime ~ O(n)\n    # Overall space ~ O(1)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n&1\n        n>>=1\n    return count\nif __name__ == \"__main__\":\n    print(count_Set_Bits(13))\n    print(count_Set_Bits(1))\n    print(count_Set_Bits(2)"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # number of set bits in n is (n&(n-1))-1\n    n = format(n,'b')\n    return n.count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    \n    while n:\n        count += 1\n        n = n & (n-1)\n    \n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # count = 0\n    # while n > 0:\n    #     if n & 1:\n    #         count += 1\n    #     n >>= 1\n    # return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n &= n-1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        count+=n&1\n        n>>=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    print(bin(n).count('1'))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # INPUT: n is a given number\n    # OUTPUT: number of set bits in the given number\n    \n    # Convert the integer into a list of binary digits\n    # AND each digit in the list with a 1 to get the number of set bits\n    # Then, count the number of 1 in the list\n    \n    # example: count_Set_Bits(9) = 5, count_Set_Bits(101) = 3\n    \n    num = bin(n)[2:] # convert the integer into a list of binary digits\n    count = 0\n    for i in num:\n        if(int(i)):\n            count += 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    length = len(str)\n    print(\"Original string:\",str)\n    for i in range(length):\n        if i % 2!= 0:\n            str = str.replace(str[i],'')\n    print(\"String after removing odd characters:\",str)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    my_string = str\n    return ''.join([''.join([my_string[i] for i in range(len(my_string)) if i%2==0])])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)<2:\n        return ''\n    if len(str)%2==0:\n        return str[::2]\n    else:\n        return str[0::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    i=0\n    str1=''\n    while i<len(str):\n        if i%2==0:\n            str1+=str[i]\n        i+=1\n    print(str1)\nodd_values_string('sfsafsdfa')\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s = list(str)\n    for i in range(len(s)):\n        if i % 2 == 1:\n            del s[i]\n    return \"\".join(s)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # str = \"mango\"\n    # str = \"banana\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mango\"\n    # str = \"mango\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = \"mangopap\"\n    # str = "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.replace(' ', '')\n    new_str = ''\n    i = 0\n    for character in str:\n        if i % 2 == 0:\n            new_str += character\n        i += 1\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([a for i, a in enumerate(str) if i % 2 == 1])\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str = str.lower()\n    result = ''\n    for i in range(len(str)):\n        if(i % 2 == 0):\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if i%2==0:\n            new_string+=str[i]\n    return new_string\nprint(odd_values_string(\"1234567890\"))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    if b <= a and b <= c:\n        return b\n    if c <= a and c <= b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\nprint(min_of_three(1,2,3))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    return'min of 3 is greater than 2'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b: \n        if a < c: \n            return a \n        else: \n            return c \n    else: \n        if b < c: \n            return b \n        else: \n            return c \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (1<<l)-1 == (1<<r)-1\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l,r = int(l),int(r)\n    for i in range(2**n):\n        if i>=l and i<=r:\n            if i-l==0:\n                print(l,\"and\",r)\n                return 1\n    return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n & (2**l-1)!= 0 and n & (2**r-1)!= 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(f\"{l} to {r} range:\")\n    for i in range(n):\n        if l <= i <= r:\n            print(i,end=\" \")\n    print()\n    for i in range(l,r+1):\n        print(i,end=\" \")\n        for j in range(1,n+1):\n            if i&j:\n                print(j,end=\" \")\n        print()\n    print()\n    for i in range(l,r+1):\n        print(i,end=\" \")\n        for j in range(1,n+1):\n            if i&j:\n                print(j,end=\" \")\n        print()\n    print()\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n&~(n>>l)&(n>>r)\n    \nprint(all_Bits_Set_In_The_Given_Range(7,0,5)) \nprint(all_Bits_Set_In_The_Given_Range(0xDEADBEADBEADBEAD,0,4)) \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count=0\n    i=0\n    while(i<n):\n        if(l & (1<<i)) or (r & (1<<i)):\n            count+=1\n        i+=1\n    if count==n:\n        print('\\nAll bits are set in the given range.')\n    else:\n        print('\\nSome bits are not set in the given range.')\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Write your code here\n    if l==0:\n        return False\n    if r==0:\n        return True\n    i = 0\n    while i<=l:\n        i += 1\n        print(i)\n    print(i)\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (r >= n):\n        r = n-1\n    if (l >= n or r >= n):\n        return 0\n    if ((l == 0 and r == n-1) or (l == n-1 and r == 0)):\n        return 1\n    if (l == r):\n        return 1\n    return all_Bits_Set_In_The_Given_Range(n,l>>1,r>>1) or all_Bits_Set_In_The_Given_Range(n,l>>1,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # bit = n & (2**i)  \n    # print (bit)\n    # while (bit!=0):\n    #     if (bit&2 == 2):\n    #         return False\n    #     bit = bit >> 1\n    # return True\n    # bit = 0\n    # for i in range(r):\n    #     bit = n & (2**i)\n    #     if (bit == 0):\n    #         return False\n    # return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        if i&n!= 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = n\n    pos = n\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg -= 1\n            arr.pop(i)\n            arr.insert(i, neg)\n        else:\n            pos -= 1\n            arr.pop(i)\n            arr.insert(i, pos)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start_idx = 0\n    end_idx = 0\n    for i in range(n):\n        if arr[i] > 0:\n            end_idx = i\n            break\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[start_idx], arr[end_idx], arr[i] = arr[i], arr[start_idx], arr[end_idx]\n            start_idx += 1\n            end_idx += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_n = []\n    arr = arr[:n]\n    for i in range(len(arr)):\n        if arr[i]<0:\n            arr_n.append(arr[i])\n    for i in range(len(arr)):\n        if arr[i]>=0:\n            arr_n.append(arr[i])\n    for i in range(len(arr)):\n        if arr[i]<0:\n            arr_n.append(arr[i])\n    return arr_n\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #Solution 1\n    # arr = [6, -1, 3, 5]\n    # output = [-1, 3, 5, 6]\n    \n    # Solution 2\n    # arr = [-1, 5, 3, 6, 0]\n    # output = [0, 3, 5, 6, -1]\n    \n    # Solution 3\n    # arr = [-1, -3, -5, -6, 0, 1, 2, 3, 4]\n    # output = [-6, -5, -3, -1, 0, 1, 2, 3, 4]\n    \n    # Solution 4\n    # arr = [-1, 3, 4, -5, -6, 0, 1, -2]\n    # output = [-5, -6, -4, -1, 0, 1, 3, 4, -1]\n    \n    # Solution 5\n    # arr = [-1, -3, -5, -6, 0, 1, 2, 3, 4]\n    # output = [-6, -5, -3, -1, 0, 1, 2, 3, 4]\n    \n    # Solution 6\n    # arr = [-1, 3, 4, -5, -6, 0, 1, -2]\n    # output = [-5, -6, -4, -1, 0, 1, 3, 4, -1]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr[:n] + arr[n:][::-1]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            pos = i\n            break\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr[n:] = arr[:n]\n    arr[:n] = sorted(arr[:n])\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] = arr[i] * -1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    res = []\n    for i in range(n):\n        if arr[i] < 0:\n            res.append(arr[i])\n        elif arr[i] > 0:\n            res.append(arr[i])\n            res.append(-arr[i])\n    return res\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #for negative numbers\n    for i in range(n):\n        #assign the negative numbers to the first\n        if arr[i]<0:\n            arr.insert(0, arr[i])\n            #remove the negative number\n            arr.pop(i+1)\n            break\n    \n    #for positive numbers\n    for i in range(n):\n        #assign the positive numbers to the first\n        if arr[i]>0:\n            arr.insert(0, arr[i])\n            #remove the positive number\n            arr.pop(i+1)\n            break\n    return arr\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    pos_arr = []\n    neg_arr = []\n    \n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    \n    for i in range(len(neg_arr)):\n        pos_arr.append(neg_arr[i])\n        \n    for i in range(len(pos_arr)):\n        arr.append(pos_arr[i])\n        \n    return arr\n    \ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_arr = []\n    neg_arr = []\n    \n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    \n    for i in range(len(neg_arr)):\n        pos_arr.append(neg_arr[i])\n    \n    for i in range(len(pos_arr)):\n        arr.append(pos_arr[i])\n        \n    return arr\n    \ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_arr = []\n    neg_arr = []\n    \n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    \n    for i in range(len(neg_arr)):\n        pos_arr.append(neg_arr[i])\n        \n    for i in range(len(pos_arr)):\n        arr.append(pos_arr[i])\n        \n    return arr\n    \n    \ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_arr = []\n    neg_arr = []\n    \n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    \n    for i in range(len(neg_arr)):\n        pos_arr.append(neg_arr[i])\n    \n    for i in range(len(pos_arr)):\n        arr.append(pos_arr[i])\n        \n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1.strip() == '':\n        return char\n    else:\n        return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s'%char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\\n\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1\n    \ndef replace_char(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces the character with the character, and returns the string.\n    '''\n    return str1.replace(char,\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #   str1 = \"Hi there, how are you doing?\"\n    #   char = \" \"\n    str1=str1.replace(\" \",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    blank = str1.find(' ')\n    str1 = str1[:blank] + char + str1[blank+1:]\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\".\",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\"?\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"(\",\"\")\n    str1 = str1.replace(\")\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\"\\\"\",\"\")\n    str1 = str1.replace(\"'\",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==' ':\n            str1=str1[:i]+char+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #largest_n = []\n    #for i in range(n):\n    #    largest_n.append(list1[i])\n    #return largest_n\n    h = []\n    heapq.heapify(h)\n    for i in range(n):\n        heapq.heappush(h,list1[i])\n    return h\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = []\n    for i in range(n):\n        heapq.heappush(l,list1[i])\n    return(l)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    largest = heapq.nlargest(n, list1)\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    while len(list1) > n:\n        heapq.heappop(list1)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    list_heap = []\n    for i in range(n):\n        heapq.heappush(list_heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i] > list_heap[0]:\n            heapq.heapreplace(list_heap,list1[i])\n    return list_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    i = 0\n    a = []\n    while i < n:\n        x = heapq.nlargest(n,list1)\n        if x[0] not in a:\n            a.append(x[0])\n            i = i + 1\n        else:\n            del(list1[0])\n    return(a)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest_nums = []\n    heapq.heapify(largest_nums)\n    for i in range(n):\n        heapq.heappush(largest_nums,list1[i])\n    return largest_nums\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i] > h[0]:\n            heapq.heappop(h)\n            heapq.heappush(h,list1[i])\n    return h\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    radius = r\n    height = h\n    pi = 3.14159265359\n    volume = pi*radius**2*height\n    return volume\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Finding the semi-radius and height of the cylinder\n    #using the equation\n    r = float(r)\n    h = float(h)\n    #If the semi-radius is 0, the function should return 0\n    if r == 0:\n        return 0\n    #The surface area is equal to the total surface area\n    #of the cylinder plus the area of the cylinder\n    #with the added lateral surface area\n    return 2 * pi * r * h + 2 * pi * r * 2 * h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    result = 2 * pi * r * h\n    return result\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # radius of cylinder = 1\n    # height = 1\n    # diameter = 1\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # diameter = 1\n    # height = 1\n    # radius = 1\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 2\n    # diameter = 1\n    # height = 1\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 1\n    # diameter = 2\n    # height = 1\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 1\n    # diameter = 2\n    # height = 1\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 2\n    # diameter = 3\n    # height = 1\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 2\n    # diameter = 3\n    # height = 2\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 2\n    # diameter = 3\n    # height = 2\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 1\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 1\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 1\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 1\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi*radius*diameter) + (pi*radius*height)\n    \n    # radius = 3\n    # diameter = 3\n    # height = 3\n    # total surface area of cylinder = (pi"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*(r*r + h*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # diameter\n    d=2*h\n    # radius\n    r=r\n    # surface area\n    s=math.pi*d*r**2\n    # lateral surface area\n    a=2*math.pi*r*d\n    # results\n    return s,a\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi,sin,cos\n    return pi*r**2*h\n    \ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi,sin,cos\n    from cmath import exp\n    return exp(1j*2*pi/3)*pi*r**2*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    p=2*pi\n    a=r*r\n    V=2*pi*r*h\n    return 2*pi*r*(a+h)-p*V\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_cylinder = 2*np.pi*(r+h/2)\n    return lateral_surface_cylinder\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l, 3)\n    # Return the volume of a cube with side length l.\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    assert l > 0, \"Side length must be a positive number.\"\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\nprint(volume_cube(5))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def set_even_bits(n): \n        n |= (1 << (n.bit_length() - 1))\n        return n\n    return set_even_bits(n) \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(n | 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n << 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = n\n    while(x):\n        if x&0x01:\n            x=x|0x04\n            x=x&0xF0\n        x=x>>1\n    return x\nprint(\"The number is:\",even_bit_set_number(0x1101))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(\"Original Binary Number:\", n)\n    n = ~n\n    print(\"Number after flipping bit:\", n)\n    \n    \neven_bit_set_number(0b1) "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0b100\nprint(even_bit_set_number(0x1C))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    number = n\n    \n    if number == 0:\n        return 0\n    \n    # Binary representation of the given number\n    binary_number = bin(number)[2:]\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #if (n & (1<<i)):\n    #    n -= 1 << i\n    n = (n & 0x55555555) + ((n & 0xAAAAAAAA) >> 1) \n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n | (n >> 1)) & ~(n >> 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_occurences = Counter(test_list)\n    return dict_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    ans = {}\n    for i in test_list:\n        if i not in ans:\n            ans[i] = 1\n        else:\n            ans[i] += 1\n    return ans\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    occurences = {}\n    for i in test_list:\n        if i in occurences.keys():\n            occurences[i] += 1\n        else:\n            occurences[i] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for key in test_list:\n        if key in occurences:\n            occurences[key] += 1\n        else:\n            occurences[key] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for t in test_list:\n        if t not in occurence_dict:\n            occurence_dict[t] = 1\n        else:\n            occurence_dict[t] += 1\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # your code here\n    test_list = [('a',1),('b',2),('c',3),('a',4),('a',5)]\n    test_dict = {}\n    for item in test_list:\n        test_dict[item] = 0\n    for item in test_dict:\n        for key, val in test_list:\n            if item == key:\n                test_dict[item] += 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in test_list:\n        occurences[i] = occurences.get(i, 0) + 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test = Counter(test_list)\n    return test\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = dict()\n    for tuple in test_list:\n        occurences[tuple] = occurences.get(tuple,0) + 1\n    return occurences\n    \ndef filter_occurences(occurences):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list and returns a dictionary of only the tuples that occur more than once in the list.\n    '''\n    return {k:v for k,v in occurences.items() if v > 1}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    c=0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if str[i:j+1]!= '':\n                c+=1\n    return c\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(str):\n        if str[i]!= \" \":\n            j = i + 1\n            while str[i] == \" \" and j < len(str):\n                count += 1\n                j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return str.count(' ') + 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    no_of_substrings = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            no_of_substrings += 1\n    return no_of_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return str.count(\" \") + 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    str_len = len(str) \n    count = 0\n    \n    for i in range(str_len): \n        for j in range(i, str_len): \n            sub_str = str[i:j+1] \n            if len(sub_str) > 0: \n                count += 1\n                \n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)):\n        for j in range(len(str)-i+1):\n            if (str[i:j+1]!= \"\"):\n                count += 1\n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        if str[i]!= \" \": \n            count = count + 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_number_of_sequences(m,n):\n        # table for storing cumulative counts\n        table = [0 for i in range(n+1)] \n        # table for storing count of each \n        # sequence of length n having at least 1\n        # element as 1\n        count = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence_numbers = {}\n    return_value = 0\n    return_value = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            if i == 0:\n                if sequence_numbers.get(j,0) == 0:\n                    sequence_numbers[j] = 1\n            else:\n                if sequence_numbers.get(j-1,0) == 0:\n                    sequence_numbers[j] = sequence_numbers.get(j,0) + sequence_numbers.get(j-i,0)\n                else:\n                    sequence_numbers[j] = sequence_numbers.get(j-1,0) + sequence_numbers.get(j,0)\n    for i in range(m,m+n):\n        return_value += sequence_numbers.get(i,0)\n    return return_value\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        if (m-2*i) >= 0:\n            total += 1\n        i += 1\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Convert to list of integers.\n    x = [int(i) for i in range(n+1)]\n    \n    # Using the formula, calculate the number of possible sequences.\n    y = 0\n    for i in x:\n        y += ((n-i+1)*i*(n-i+1))//2\n        y += i\n    \n    # Divide by m because we want the number of possible sequences.\n    y = y//m\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return -1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m==1:\n        return n\n    if n==0:\n        return 1\n    return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    import math\n    return int(math.factorial(n)/math.factorial(n-1)/math.factorial(n-2))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        count += m*(m-1)/2 + m*(m-2)/2\n        m = m*2\n    return int(count)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += (i * (i+1)) // 2\n    return (n * (n + 1) // 2) + sum\n    \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0 or m == 0: return 1\n    return (get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-1))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    new_list.append(list1[0])\n    for i in range(len(list2)):\n        new_list.append(list2[i])\n    new_list.append(list1[-1])\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    list1[-2] = list2[-2]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[0:len(list1)-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) >= len(list2):\n        for i in range(len(list2)):\n            list1.pop()\n            list1.append(list2[i])\n    else:\n        for i in range(len(list1)):\n            list2.pop()\n            list2.append(list1[i])\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    for i in range(1,len(list2)):\n        list1.append(list2[i])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    new_list.append(list2[len(list2) - 1])\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    list2 = list2[1:]\n    return list1+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count+1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    #Returning the number of characters\n    return str1.count(' ') + str1.count('\\n') + str1.count('\\t')\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for x in range(0,len(str1)):\n        if str1[x]!='':\n            count = count+1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    result = str1.__len__()\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count = count + 1\n    print(\"The total number of characters in the string is: \", count)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # print(type(str1))\n    # print(str1)\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=int(math.sqrt(N))\n    if(x*x==N):\n        return x*x\n    else:\n        return(x+1)\n    \n    '''\n    Write a python function to check if a given number is perfect square.\n    '''\ndef isPerfectSquare(n): \n    \n    x = int(round(math.sqrt(n))) \n    if x*x == n: \n        return True\n    else: \n        return False\n    \ndef isPrime(n):\n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    c=2\n    while(c*c<N):\n        c+=1\n    return c*c\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        raise Exception(\"Next number cannot be less than 0\")\n    while True: \n        if N < 2: \n            return 1\n        else: \n            N = math.floor(math.sqrt(N))\n            if N*N == N: \n                return N+1\n            else: \n                return N+1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.floor(math.sqrt(N))\n    print(root)\n    while not N == root * root:\n        root += 1\n    return root * root\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int((N**0.5)+0.5)**2"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    result=False\n    i=1\n    while i <= N:\n        j = 1\n        while j <= i:\n            if i*i == j*j:\n                result = i\n                break\n            j += 1\n        if result:\n            break\n        i += 1\n    return result\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    import math\n    a = N\n    while a * a > N:\n        a -= 1\n    return a * a\n    \n    "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        if N == 1:\n            break\n        else:\n            N = int(math.sqrt(N))\n    return N + 1\n    \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    assert type(N) == int and N >= 0\n    s = int(math.sqrt(N))\n    while True:\n        if (s*s == N):\n            break\n        s = s + 1\n    return s*s\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N + 1\n    while True: \n        y = math.sqrt(x) \n        y = int(y) \n        if y * y == x: \n            return x\n        x += 1\n        \ndef next_Fibonacci(N): \n    '''\n    Write a python function to find the next Fibonacci number greater than a given number.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    else:\n        return next_Fibonacci(N-1) + next_Fibonacci(N-2)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sum_helper(arr, max_sum, curr_sum, low, high): \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if low < high: \n            mid = (low + high) // 2\n            curr_sum = curr_sum + arr[mid]\n            max_sum = max_sum_helper(arr, max_sum, curr_sum, low, mid) \n            curr_sum = curr_sum - arr[mid] \n            max_sum = max_sum_helper(arr, max_sum, curr_sum, mid + 1, high) \n        return max_sum\n    return max_sum_helper(arr, -float('inf'), 0, 0, len(arr) - 1) \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        # max_so_far = max_ending_here\n        # arr = sorted(arr)\n        \n        # for i in range(1, len(arr)):\n            # if arr[i] > arr[i-1]:\n                # max_ending_here = max(max_ending_here, max_so_far + arr[i])\n            # else:\n                # max_ending_here = max(max_ending_here, max_so_far)\n        # return max_ending_here\n        return max(max_ending_here(arr, 0, len(arr)-1), max_ending_here(arr, 1, len(arr)-1))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    \n    # find the smaller element on left side and right side\n    sml = max_sum(arr[0:n//2])\n    sml_r = max_sum(arr[n//2:n])\n    \n    # if smaller on left side and smaller on right side\n    if sml <= sml_r:\n        return sml + max(arr[n//2:n])\n    \n    # if smaller on right side and smaller on left side\n    else:\n        return sml + max(arr[0:n//2])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            current_sum = sum(arr[i:j+1])\n            max_sum = max(current_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_s = -sys.maxsize-1\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            tmp = max_s\n            max_s = max(max_s, arr[i-1]+tmp)\n        tmp = max_s\n        max_s = max(max_s, arr[i-1]+tmp)\n    return max_s\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #O(n)\n    #using a dp to store the max sum of the list up to that point\n    #this is because it is a bitonic array, so the max sum of the sequence can be found using the dp table\n    #it is important that the dp array is also bitonic\n    #so we can make sure the dp array is correctly arranged and filled up\n    #because we will be iterating over the bitonic sequence\n    #we are also using the dp array to store the max values up to the current point, so we need to use a dp array\n    #we are also using the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #so we need to store the max values up to the current point in a 1D array\n    #we can use the dp array to store the max values up to the current point in a 1D array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #so we need to store the max values up to the current point in a 1D array\n    #we can use the dp array to store the max values up to the current point in a 1D array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #it is important that the dp array is also bitonic\n    #because it is a bitonic array, so the max sum of the sequence can be found using the dp table\n    #we can use the dp array to store the max values up to the current point in a 1D array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #it is important that the dp array is also bitonic\n    #so we can use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #we need to use a dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #we need to use a dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #we need to use a dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #we need to use a dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #we need to use a dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #we need to use a dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need to use a dp array\n    #this means that the dp array size will be 2n\n    #we need to use a dp array to store the max values up to the current point, so we need to use a dp array\n    #we also need to use the dp array to store the max values up to the current point, so we need t"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    if len(arr) == 1:\n        max_sum = arr[0]\n    else:\n        for i in range(1,len(arr)):\n            if arr[i] > arr[i-1] and max_sum < arr[i] + max_sum:\n                max_sum = arr[i] + max_sum\n            elif arr[i] < arr[i-1] and max_sum < arr[i-1] + max_sum:\n                max_sum = arr[i-1] + max_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Base case.\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # Base case \n    if n == 1: \n        return arr[0]\n    \n    # The smallest element in the array \n    # is the answer \n    min_elem = min(arr) \n    max_sum = max(min_elem, arr[0] + min_elem) \n    \n    # Pick the maximum of two cases : \n    # 1) The maximum sum can only come after the min. \n    # 2) The maximum sum can only come before the min. \n    for i in range(1, n): \n        max_sum = max(max_sum, max(arr[i], arr[i] + min_elem)) \n    \n    return max_sum \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    size = len(arr)\n    max_sum = float('-inf')\n    # for every item, compare it to the max of two adjacent items (always decreasing)\n    for i in range(size): \n        if i == size - 1:\n            break\n        \n        if arr[i] <= arr[i + 1]:\n            curr_max = arr[i] + arr[i + 1]\n            max_sum = max(max_sum, curr_max)\n            continue\n        \n        # if decreasing, compare to adjacent item\n        curr_max = arr[i] + arr[i + 1]\n        max_sum = max(max_sum, curr_max)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    from math import sqrt\n    n = number\n    epsilon = 0.0001\n    x = n/2.0\n    while True:\n        y = (x + n/x)/2\n        if abs(y-x) < epsilon:\n            break\n        x = y\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Base case\n    if number == 0:\n        return 0\n    \n    previous_root = 0\n    current_root = 1\n    \n    while current_root!= previous_root:\n        previous_root = current_root\n        current_root = (current_root + number / current_root) / 2\n        \n    return current_root\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0\n    high = number\n    guess = (low+high)/2\n    counter = 1\n    while True:\n        if guess**2 == number:\n            return guess\n        elif guess**2 < number:\n            low = guess\n            guess = (low+high)/2\n            counter += 1\n        else:\n            high = guess\n            guess = (low+high)/2\n            counter += 1\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Write your code below this line\n    # 1. Declare a variable for holding the square root\n    # 2. Declare a variable for holding the error\n    # 3. Initialize the error with the first square root\n    # 4. Initialize the counter with 1\n    # 5. Loop until the error is smaller than or equal to 0.01\n    # 6. Compute the next square root\n    # 7. Update the error and counter\n    # 8. Return the square root\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number >= 0:\n        while True:\n            previous_root = number\n            number = (number + 1) / 2\n            if previous_root == number:\n                return number\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    \n    epsilon = 0.000001\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    \n    guess = 1.0\n    \n    while guess*guess!= number:\n        guess = 0.5*(guess + number/guess)\n    \n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #check if number is even\n    if number % 2!= 0:\n        return number\n    #compute and return square root using k times\n    k = 1\n    while number > 1:\n        k += 1\n        number = number // 2\n    return k\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [[0 for i in range(n)] for j in range(n)]\n    # all the entries dp[i][j] \n    # are going to be zeros initially \n    # as there are no strings of length 1 \n    # of length n \n    max_length = 0\n    for i in range(n): \n        dp[i][i] = 1\n        max_length = 1\n    # finding the length of the\n    # longest palindromic subsequence \n    # of length 1 to n \n    for length in range(2, n + 1): \n        for i in range(n - length + 1): \n            j = i + length - 1\n            if str[i] == str[j] and length == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                # current substring of length 2 is \n                # palindromic so \n                # include it to get 2 more \n                # characters and check if this \n                # new substring is palindrome\n                dp[i][j] = 2 + dp[i + 1][j - 1] \n            else: \n                # current substring of length 2 is \n                # not palindrome so exclude it \n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) \n            max_length = max(max_length, dp[i][j])\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == \"\":\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def helper(str,L,R):\n        while(L>=0 and R<len(str) and str[L]==str[R]):\n            L-=1\n            R+=1\n        return R-L-1\n    #base case\n    if(len(str)<2):\n        return len(str)\n    #recursive case\n    dp=[0]*len(str)\n    for i in range(len(str)):\n        if(i<len(str)-1):\n            dp[i]=min(helper(str,i,i+1),helper(str,i,i+2))\n        else:\n            dp[i]=helper(str,i,i+1)\n    return dp\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l = 0\n    if len(str) == 1:\n        return 1\n    if len(str) == 2:\n        return 2\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1] == str[i:j+1][::-1]:\n                l = max(l, (j-i+1))\n    return l"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = len(str)\n    dp_table = [[0 for _ in range(length)] for _ in range(length)] \n    for i in range(length): \n        for j in range(length): \n            if str[i] == str[j] and (i == 0 or j == 0): \n                dp_table[i][j] = 1\n            elif str[i] == str[j]: \n                dp_table[i][j] = dp_table[i-1][j-1] + 2\n            else: \n                dp_table[i][j] = 0\n    # print(dp_table)\n    return max(max(row) for row in dp_table)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def is_palindrome(str):\n        if len(str) == 0:\n            return True\n        if str[0] == str[-1]:\n            return is_palindrome(str[1:-1])\n        else:\n            return False\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for i in range(len(str))] for i in range(len(str))]\n    for i in range(len(dp)):\n        dp[i][i] = 1\n    for i in range(len(dp)-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    for length in range(2,len(str)):\n        for i in range(len(dp)-length):\n            if str[i] == str[i+length]:\n                dp[i][i+length] = 2 + dp[i+1][i+length-1]\n            else:\n                dp[i][i+length] = max(dp[i][i+length-1], dp[i+1][i+length])\n    return dp[0][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == '':\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    dp = [[0 for i in range(len(str))] for j in range(len(str))] \n    \n    for i in range(len(str)):\n        dp[i][i] = 1\n    \n    for length in range(2, len(str) + 1):\n        for start in range(len(str) - length + 1):\n            end = start + length -1\n            if str[start] == str[end] and length == 2:\n                dp[start][end] = 2\n            elif str[start] == str[end] and dp[start + 1][end - 1] >= length -2:\n                dp[start][end] = 2 + dp[start + 1][end - 1]\n            else:\n                dp[start][end] = max(dp[start][end - 1], dp[start + 1][end])\n    return dp[0][len(str) -1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #str=\"ABBBAAB\"\n    n=len(str)\n    dp=[1]*n\n    for i in range(n):\n        if i==0:\n            dp[i]=1\n        elif i==1:\n            if str[0]==str[1]:\n                dp[i]=2\n            else:\n                dp[i]=1\n        else:\n            if str[i]==str[i-1]:\n                dp[i]=dp[i-1]+2\n            else:\n                dp[i]=1\n    return max(dp)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    ans = 0\n    for i in range(n-1):\n        ans = ans + 1 / (i+1)\n    return ans\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    count = 1\n    result = 0\n    while count <= n:\n        result = result + count\n        count += 1\n    return result\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def hs(n):\n        if n == 1:\n            return 1\n        else:\n            return 1/n + hs(n-1)\n    return hs(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    return (1 + n) / n\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n/2 + n/(2*(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/i for i in range(1, n+1)])\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (sum(range(n, 0, -1)))/n\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    n -= 1\n    while n > 0:\n        sum += 1.0 / n\n        n -= 1\n    return sum\n    \nprint(harmonic_sum(8)) # Should be 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8\nprint(harmonic_sum(10)) # Should be 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10\nprint(harmonic_sum(1))  # Should be 1\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n    for i in range(1,n):\n        total = total + 1 / i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    n_str = str(n)\n    # if n = 0 -> 0\n    if n == 0:\n        return 0\n    # if n = 1 -> 1\n    if n == 1:\n        return 1\n    # if n = 2 -> 1+1\n    if n == 2:\n        return 2\n    # if n = 3 -> 1+1+1\n    if n == 3:\n        return 3\n    # if n = 4 -> 1+1+1+1\n    if n == 4:\n        return 4\n    # if n > 4 then n can be calculated by first sum the harmonic sum of n-1\n    return int(n_str[0]) + int(n_str[1]) + int(n_str[2]) + int(n_str[3])\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n1=len(array_nums1)\n    n2=len(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    list_intersection = []\n    i = 0\n    while i < len(array_nums1):\n        if array_nums1[i] in array_nums2:\n            list_intersection.append(array_nums1[i])\n        i+=1\n    return list_intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = array_nums1\n    nums2 = array_nums2\n    len1 = len(nums1)\n    len2 = len(nums2)\n    intersection = []\n    for i in range(len1):\n        for j in range(len2):\n            if nums1[i] == nums2[j]:\n                intersection.append(nums1[i])\n                break\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    s_array1 = set(array_nums1)\n    s_array2 = set(array_nums2)\n    return list(s_array1 & s_array2)\n    \n    \ndef intersection_set(arr1,arr2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    # first create a set from the first list\n    set_arr1 = set(arr1)\n    # then create a set from the second list\n    set_arr2 = set(arr2)\n    # return the intersection of the two sets\n    return set_arr1 & set_arr2\n    \n    \ndef intersection_list_sets(lst1,lst2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    set_lst1 = set(lst1)\n    set_lst2 = set(lst2)\n    return list(set_lst1 & set_lst2)\n    \n    \ndef union_list_set(lst1,lst2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    return lst1 + lst2\n    \n    \ndef union_list_list(lst1,lst2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    set_lst1 = set(lst1)\n    set_lst2 = set(lst2)\n    return list(set_lst1 | set_lst2)\n    \n    \ndef union_set_set(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return set(s1) | set(s2)\n    \n    \ndef union_set_set_reversed(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return set(s2) | set(s1)\n    \n    \ndef union_set_set_list(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return list(set(s1) | set(s2))\n    \n    \ndef intersection_array_array(a1,a2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(a1) & set(a2))\n    \n    \ndef intersection_list_list(l1,l2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    return list(set(l1) & set(l2))\n    \n    \ndef intersection_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    return list(set(l2) & set(l1))\n    \n    \ndef intersection_set_set(s1,s2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    return list(set(s1) & set(s2))\n    \n    \ndef union_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    return list(set(l1) | set(l2))\n    \n    \ndef intersection_array_array_reversed(a1,a2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(a1) & set(a2))\n    \n    \ndef intersection_set_set_reversed(s1,s2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    return list(set(s2) & set(s1))\n    \n    \ndef union_set_set_reversed(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return list(set(s1) | set(s2))\n    \n    \ndef intersection_set_set_list(s1,s2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    return list(set(s1) & set(s2))\n    \n    \ndef union_set_set_list(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return list(set(s1) | set(s2))\n    \n    \ndef union_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    return list(set(l1) | set(l2))\n    \n    \ndef union_set_set_list_reversed(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return list(set(s2) | set(s1))\n    \n    \ndef union_set_set_list_reversed(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return list(set(s2) | set(s1))\n    \n    \ndef intersection_array_array_reversed(a1,a2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(a1) & set(a2))\n    \n    \ndef intersection_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    return list(set(l1) & set(l2))\n    \n    \ndef intersection_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    return list(set(l1) & set(l2))\n    \n    \ndef intersection_set_set_reversed(s1,s2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    return list(set(s2) & set(s1))\n    \n    \ndef intersection_array_array_reversed(a1,a2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(a1) & set(a2))\n    \n    \ndef intersection_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    return list(set(l1) & set(l2))\n    \n    \ndef intersection_set_set_reversed(s1,s2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    return list(set(s2) & set(s1))\n    \n    \ndef union_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    return list(set(l1) | set(l2))\n    \n    \ndef union_set_set_reversed(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return list(set(s1) | set(s2))\n    \n    \ndef union_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    return list(set(l1) | set(l2))\n    \n    \ndef union_set_set_reversed(s1,s2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return list(set(s1) | set(s2))\n    \n    \ndef union_list_list_reversed(l1,l2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    return list(set(l1) | set(l2))\n    \n    \ndef unio"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) == 0:\n        return []\n    if len(array_nums2) == 0:\n        return []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) < len(array_nums2):\n        return 'Shorter array'\n    elif len(array_nums1) > len(array_nums2):\n        return 'Longer array'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Your Code Here\n    # Create an empty array for storing the intersection of the two arrays\n    nums = []\n    # loop through the array_nums1 array\n    for i in range(len(array_nums1)):\n        # loop through the array_nums2 array\n        for j in range(len(array_nums2)):\n            # if the current value in array_nums1 and array_nums2 are equal\n            if array_nums1[i] == array_nums2[j]:\n                # add the current value to the new array\n                nums.append(array_nums1[i])\n    # return the final array of the intersection of the two arrays\n    return nums"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a_set = set(array_nums1)\n    b_set = set(array_nums2)\n    intersection_set = a_set.intersection(b_set)\n    intersection_list = list(intersection_set)\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1 = []\n    arr2 = []\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for element in tup:\n        if element == x:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef count_Y(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and returns the index of the first occurence of the element in the tuple.\n    '''\n    return tup.index(y)\n    \ndef count_Z(tup, z):\n    '''\n    Write a python function that takes in a tuple and an element and returns the index of the first occurence of the element in the tuple.\n    '''\n    if not z in tup:\n        raise Exception\n    else:\n        return tup.index(z)\n    \ndef count_tup(tup, *args):\n    '''\n    Write a python function that takes in a tuple and a variable number of arguments and returns the number of occurences of the variable number of arguments in the tuple.\n    '''\n    return tup.count(args)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    length = len(list)\n    for i in range(0,length):\n        if list[i] == element:\n            list.insert(i,element)\n            break\n        else:\n            continue\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    \n    for i in range(len(list)):\n        if i == len(list)-1:\n            list.append(element)\n            return list\n        list.insert(i,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if type(list) == list and type(element) == int:\n        for i in range(0,len(list)):\n            if element == list[i]:\n                list.insert(i,element)\n                return list\n    else:\n        print(\"List is not valid\")\n        return list\n        \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newlist = []\n    newlist.append(list[0])\n    for i in range(len(list)-1):\n        newlist.append(list[i])\n        newlist.append(list[i])\n    newlist.append(list[-1])\n    return newlist\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list[i] = element\n    return list\n    \ndef list_of_elems(list):\n    '''\n    Write a function that takes in a list and returns a copy of the list with each element in the list inserted before each element.\n    '''\n    for i in range(len(list)):\n        list[i] = insert_element(list,list[i])\n    return list\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the element from the list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            del list[i]\n    return list\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and removes duplicate elements from the list.\n    '''\n    for i in range(len(list)):\n        if list[i] in list[i+1:]:\n            del list[i+1:list.index(list[i])]\n    return list\n    \ndef remove_list_elements(list,eles):\n    '''\n    Write a function that takes in a list and a list of elements and removes the elements from the list.\n    '''\n    for i in range(len(list)):\n        if list[i] in eles:\n            del list[i]\n    return list\n    \ndef merge_lists(list_1, list_2):\n    '''\n    Write a function that takes in two lists and merges the two lists together in order.\n    '''\n    if len(list_1) > 0:\n        for i in range(len(list_1)):\n            list_2.append(list_1[i])\n    return list_2\n    \ndef replace_element(list,element,replacement):\n    '''\n    Write a function that takes in a list and an element and replaces the element with a replacement element.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list[i] = replacement\n    return list\n    \ndef replace_list_elements(list,els):\n    '''\n    Write a function that takes in a list and a list of elements and replaces the elements in the list with the replacements in the list.\n    '''\n    for i in range(len(els)):\n        for j in range(len(list)):\n            if list[j] == els[i]:\n                list[j] = els[i+1]\n                break\n    return list\n    \ndef sort_list_elements(list):\n    '''\n    Write a function that takes in a list and sorts the elements in ascending order.\n    '''\n    list.sort()\n    return list\n    \ndef reverse_list_elements(list):\n    '''\n    Write a function that takes in a list and reverses the order of the elements in the list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list[i] = list[i+1]\n        else:\n            list[i] = list[i-1]\n    return list\n    \ndef list_multiplication(list,n):\n    '''\n    Write a function that takes in a list and a number n and returns a new list that contains each number in the list multiplied by the n value.\n    '''\n    for i in range(len(list)):\n        list[i] = list[i]*n\n    return list\n    \ndef list_len(list):\n    '''\n    Write a function that takes in a list and returns the length of the list.\n    '''\n    return len(list)\n    \ndef list_element_count(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the count of the number of times the element appears in the list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count += 1\n    return count\n    \ndef list_max(list):\n    '''\n    Write a function that takes in a list and returns the maximum number in the list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        maximum = list[0]\n        for i in range(len(list)):\n            if list[i] > maximum:\n                maximum = list[i]\n        return maximum\n    \ndef list_min(list):\n    '''\n    Write a function that takes in a list and returns the minimum number in the list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        minimum = list[0]\n        for i in range(len(list)):\n            if list[i] < minimum:\n                minimum = list[i]\n        return minimum\n    \ndef list_sum(list):\n    '''\n    Write a function that takes in a list and returns the sum of all of the numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        sum += list[i]\n    return sum\n    \ndef list_average(list):\n    '''\n    Write a function that takes in a list and returns the average of the numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        sum += list[i]\n    average = sum/len(list)\n    return average\n    \ndef list_sort(list):\n    '''\n    Write a function that takes in a list and returns the sorted version of the list.\n    '''\n    list.sort()\n    return list\n    \ndef list_insert_after(list,element,replacement):\n    '''\n    Write a function that takes in a list and an element and inserts the element after each element in the list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list[i] = replacement\n            break\n    return list\n    \ndef list_append_list(list,list2):\n    '''\n    Write a function that takes in a list and a list2 and returns a new list that contains the two lists together.\n    '''\n    for i in range(len(list2)):\n        list.append(list2[i])\n    return list\n    \ndef list_remove_list_elements(list,list2):\n    '''\n    Write a function that takes in a list and a list2 and returns a new list that contains the elements in list that are not in list2.\n    '''\n    for i in range(len(list)):\n        if list[i] in list2:\n            del list[i]\n    return list\n    \ndef list_insert_list_elements(list,list2):\n    '''\n    Write a function that takes in a list and a list2 and returns a new list that contains the elements in list2 after each element in list.\n    '''\n    for i in range(len(list)):\n        list2.insert(i,list[i])\n    return list2\n    \ndef list_remove_list_elements_from(list,list2):\n    '''\n    Write a function that takes in a list and a list2 and returns a new list that contains the elements in list that are not in list2.\n    '''\n    for i in range(len(list2)):\n        if list2[i] in list:\n            list.remove(list2[i])\n    return list\n    \ndef list_remove_list_elements_from_at_index(list,list2,index):\n    '''\n    Write a function that takes in a list and a list2 and returns a new list that contains the elements in list2 after the index specified in the list.\n    '''\n    for i in range(len(list2)):\n        if index == len(list)-1:\n            list.insert(index,list2[i])\n        else:\n            list.insert(index+1,list2[i])\n    return list\n    \ndef list_insert_list_elements_at_index(list,list2,index):\n    '''\n    Write a function that takes in a list and a list2 and returns a new list tha"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element in list:\n        element = list.index(element)\n        while element > 0:\n            list.insert(element - 1, list.pop(element))\n            element = element - 1\n    else:\n        while element > 0:\n            list.insert(element, list.pop(element))\n            element = element - 1\n    return list\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:2]+[element]+list[2:]\n    \n    \n    \n    \ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes the element from the list and returns the resulting list.\n    '''\n    if element in list:\n        list.remove(element)\n    return list\n    \n    \n    \n    \ndef list_difference(list1,list2):\n    '''\n    Write a function that takes in a list and a second list and return the list with the elements from the first list that are not in the second.\n    '''\n    return list(set(list1)-set(list2))\n    \n    \n    \n    \ndef is_sorted(list):\n    '''\n    Write a function that takes in a list and returns a boolean indicating whether or not the list is sorted.\n    '''\n    return sorted(list) == list\n    \n    \n    \n    \ndef multiples_of_3(list):\n    '''\n    Write a function that takes in a list and returns a list that contains only the multiples of 3 in the given list.\n    '''\n    return [item for item in list if item%3==0]\n    \n    \n    \n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    return sorted(str1)==sorted(str2)\n    \n    \n    \n    \ndef update_string(str1,index,char):\n    '''\n    Write a function that takes in a string and an integer indicating where in the string you want to update and the character that you want to insert.\n    '''\n    return str1[:index]+char+str1[index+1:]\n    \n    \n    \n    \ndef coin_change(denominations,n):\n    '''\n    Write a function that takes in a list of coin denominations and a number representing the total amount of money in dollars that you want to use. \n    Return the number of ways to make change for that amount of money using the coin denominations given.\n    '''\n    table = [[0 for _ in range(n+1)] for _ in range(len(denominations)+1)]\n    \n    #Fill the first row with 0\n    for i in range(1,len(denominations)+1):\n        table[i][0]=0\n    \n    for i in range(1,len(denominations)+1):\n        for j in range(1,n+1):\n            if j<=denominations[i-1]:\n                table[i][j]=table[i-1][j]+table[i][j-denominations[i-1]]\n            else:\n                table[i][j]=table[i-1][j]\n    \n    return table[-1][-1]\n    \n    \n    \n    \ndef is_anagram_part_2(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether or not that string is a palindrome.\n    '''\n    return str1 == str1[::-1]\n    \n    \n    \n    \ndef is_palindrome_part_2(str1):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether or not that string is a palindrome.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_3(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef sum_of_squares(list):\n    '''\n    Write a function that takes in a list of integers and returns a list of the squares of the integers in that list.\n    '''\n    \n    \n    \n    \n    \ndef sum_of_squares_part_2(list):\n    '''\n    Write a function that takes in a list of integers and returns a list of the squares of the integers in that list.\n    '''\n    \n    \n    \n    \n    \ndef add_list_elements(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of the elements that are in either list but not both.\n    '''\n    \n    \n    \n    \n    \ndef add_list_elements_part_2(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of the elements that are in either list but not both.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_4(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_4(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_5(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_5(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_6(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_6(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_7(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_7(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_8(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_8(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_9(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_9(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_10(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are anagrams.\n    '''\n    \n    \n    \n    \n    \ndef is_anagram_part_10(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether or not those strings are a"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for x in range(len(list)):\n        if element < list[x]:\n            list.insert(x,element)\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list1 = list\n    list1.append(element)\n    return list1\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    x = 0\n    while x < len(list):\n        if list[x] == element:\n            list.insert(x, element)\n        x += 1\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if not isinstance(numbers, list):\n        return 'Please enter a list of numbers'\n    \n    polar_lst = []\n    for i in numbers:\n        if not isinstance(i, complex):\n            return 'Please enter a list of complex numbers'\n        \n        real = abs(i.real)\n        imag = abs(i.imag)\n        if real == 0 and imag == 0:\n            polar_lst.append((real, imag, 'zero'))\n        elif real == 0 and imag == 1:\n            polar_lst.append((real, imag, 'one'))\n        elif real == 1 and imag == 0:\n            polar_lst.append((real, imag, 'two'))\n        elif real == 1 and imag == 1:\n            polar_lst.append((real, imag, 'three'))\n        elif real > 1 and imag > 1:\n            polar_lst.append((real, imag, 'four'))\n        elif real > 1 and imag == 1:\n            polar_lst.append((real, imag, 'five'))\n        elif real == 1 and imag > 1:\n            polar_lst.append((real, imag,'six'))\n        elif real == 1 and imag == 1:\n            polar_lst.append((real, imag,'seven'))\n        elif real > 1 and imag > 1:\n            polar_lst.append((real, imag, 'eight'))\n        elif real == 1 and imag > 1:\n            polar_lst.append((real, imag, 'nine'))\n        else:\n            polar_lst.append((real, imag, 'ten'))\n    \n    return polar_lst\n    \nprint(convert([1+1j, 2-2j, 3+3j, 4-4j, 5+5j, 6-6j, 7+7j, 8-8j, 9+9j, 10-10j, 11+11j, 12-12j, 13+13j]))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    l = len(numbers)\n    for i in range(0,l):\n        x = abs(numbers[i])\n        y = cmath.phase(numbers[i])\n        if(x==0):\n            print(\"{:<10}{:<10}\".format(\"0.0\",\"0.0\"))\n            continue\n        if(y<=90):\n            print(\"{:<10}{:<10}\".format(x,y))\n        elif(y>=90 and y<180):\n            print(\"{:<10}{:<10}\".format(x,180-y))\n        else:\n            print(\"{:<10}{:<10}\".format(x,180-y))\ndef circle(n):\n    '''\n    Write a python function to draw a circle in python\n    '''\n    for i in range(0,n):\n        for j in range(0,i+1):\n            print(\"*\", end = \"\")\n        print(\"\\n\")\ndef hex(n):\n    '''\n    Write a python function to draw a hexagon in python\n    '''\n    for i in range(0,n):\n        for j in range(0,i+1):\n            print(\"#\", end = \"\")\n        print(\"\\n\")\ndef fibonacci(n):\n    '''\n    Write a python function to draw the Fibonacci sequence in python\n    '''\n    a=0\n    b=1\n    for i in range(0,n):\n        print(a)\n        a,b=b,a+b\ndef prime(n):\n    '''\n    Write a python function to check if a number is prime or not\n    '''\n    if(n <= 1):\n        return False\n    if(n <= 3):\n        return True\n    if(n % 2 == 0 or n % 3 == 0):\n        return False\n    i = 5\n    while i * i <= n:\n        if(n % i == 0 or n % (i+2) == 0):\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    res = []\n    for i in range(len(numbers)):\n        a = numbers[i]\n        r = abs(a)\n        if r == 0:\n            theta = 0\n        else:\n            theta = cmath.phase(a)\n        res.append([r,theta])\n    return res"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        if numbers[i] == complex(0,0):\n            numbers[i] = complex(0,0)\n        elif numbers[i] == complex(0,0.5) or numbers[i] == complex(0.5,0.5):\n            numbers[i] = complex(0,0.5)\n        elif numbers[i] == complex(0.5,0.5) or numbers[i] == complex(0.5,-0.5) or numbers[i] == complex(-0.5,-0.5) or numbers[i] == complex(-0.5,0.5):\n            numbers[i] = complex(0.5,0.5)\n        elif numbers[i] == complex(0.5,-0.5) or numbers[i] == complex(-0.5,0.5) or numbers[i] == complex(-0.5,-0.5) or numbers[i] == complex(-0.5,-0.5):\n            numbers[i] = complex(0.5,-0.5)\n        elif numbers[i] == complex(-0.5,-0.5) or numbers[i] == complex(-0.5,0.5) or numbers[i] == complex(-0.5,0.5) or numbers[i] == complex(-0.5,0.5):\n            numbers[i] = complex(-0.5,-0.5)\n        elif numbers[i] == complex(-0.5,0.5) or numbers[i] == complex(0.5,0.5) or numbers[i] == complex(0.5,0.5) or numbers[i] == complex(0.5,0.5):\n            numbers[i] = complex(-0.5,0.5)\n        else:\n            raise ValueError(\"{} is not a valid complex number!\".format(numbers[i]))\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    res = []\n    for x in numbers:\n        res.append(complex(x))\n    return res\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)==list:\n        if type(numbers[0])==complex:\n            for i in range(len(numbers)):\n                d=complex(numbers[i].real,numbers[i].imag)\n                #print d\n                p=abs(d)\n                #print p\n                x=p\n                y=abs(numbers[i])\n                #print y\n                r=y/p\n                #print r\n                theta=cmath.phase(numbers[i])\n                #print theta\n                return x,y,r,theta\n    else:\n        d=complex(numbers.real,numbers.imag)\n        p=abs(d)\n        x=p\n        y=abs(numbers)\n        r=y/p\n        theta=cmath.phase(numbers)\n        return x,y,r,theta\n    \ndef polar_to_cart(x,y,r,theta):\n    '''\n    Write a python function to convert polar coordinates to cartesian coordinates.\n    '''\n    if type(x)==complex:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=r.real\n        r2=r.imag\n        theta1=theta.real\n        theta2=theta.imag\n        x=x1*r1*cos(theta1)+x2*r2*sin(theta1)\n        y=y1*r1*cos(theta1)-y2*r2*sin(theta1)\n        return x,y\n    else:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=r.real\n        r2=r.imag\n        theta1=theta.real\n        theta2=theta.imag\n        x=x1*r1*cos(theta1)+x2*r2*sin(theta1)\n        y=y1*r1*cos(theta1)-y2*r2*sin(theta1)\n        return x,y\ndef cart_to_polar(x,y):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    if type(x)==complex:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\n    else:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\ndef cart_to_polar_order(x,y):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    if type(x)==complex:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\n    else:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\ndef cart_to_polar_order_diff(x,y):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    if type(x)==complex:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\n    else:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\ndef cart_to_polar_order_rad(x,y):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    if type(x)==complex:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\n    else:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\ndef cart_to_polar_order_rad(x,y):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    if type(x)==complex:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\n    else:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\ndef cart_to_polar_order_rad(x,y):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    if type(x)==complex:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\n    else:\n        x1=x.real\n        x2=x.imag\n        y1=y.real\n        y2=y.imag\n        r1=x1*x1+y1*y1\n        r2=x2*x2+y2*y2\n        r=sqrt(r1+r2)\n        theta=atan(y1/x1)\n        return r,theta\ndef car"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.phase(numbers), (cmath.polar(numbers)[1][0]) )\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar=[]\n    \n    if not numbers:\n        return polar\n    for number in numbers:\n        if isinstance(number,complex):\n            r=abs(number)\n            theta=cmath.phase(number)\n            polar.append((r,theta))\n    \n    return polar\ndef convert_back(polar):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    r=[]\n    for polar in polar:\n        r.append(complex(polar[0],polar[1]))\n    return r\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # list of x, y coordinates of all the points\n    X = []\n    Y = []\n    \n    # x-coordinate of center of polygon\n    x = 0\n    # y-coordinate of center of polygon\n    y = 0\n    # radius of polygon\n    r = 0\n    \n    # polygon coordinate matrix\n    polygon = [[] for i in range(numbers)]\n    \n    # counter to increment x, y coordinates of polygon\n    i = 0\n    \n    for xi in range(0,numbers):\n        for yi in range(0,numbers):\n            x = (xi-0.5) * 2\n            y = (yi-0.5) * 2\n            R = x**2 + y**2\n            \n            # find the angle between the vector from center of polygon\n            # to point and vector to its right\n            if y>0:\n                angle = -math.degrees(math.atan(x/y))\n            else:\n                angle = math.degrees(math.atan(x/y))\n            \n            # convert the polar coordinates into cartesian\n            R = math.sqrt(R)\n            x = R * math.cos(math.radians(angle))\n            y = R * math.sin(math.radians(angle))\n            \n            # add the point to the polygon coordinate matrix\n            polygon[xi].append(y)\n            polygon[yi].append(x)\n            \n            X.append(x)\n            Y.append(y)\n        i += 1\n        \n    # find the center point\n    center = (sum(X)/len(X), sum(Y)/len(Y))\n    \n    # find the radius of polygon\n    r = max(X) - min(X)\n    \n    # return the matrix of polygon coordinates\n    return X, Y, r, polygon, center\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # number = input('enter complex number : ')\n    # if number == '0+0i':\n    #     return\n    \n    # number = number.replace('i','')\n    # num = float(number)\n    # print('number is ', num)\n    \n    # abs_num = abs(num)\n    # if num >= 0:\n    #     print('sine = ', math.sin(abs_num))\n    #     print('cosine = ', math.cos(abs_num))\n    # else:\n    #     print('sine = ', math.sin(abs_num*-1))\n    #     print('cosine = ', math.cos(abs_num*-1))\n    \n    # return\n    \n    number = numbers\n    if number == '0+0i':\n        return '0+0i'\n    else:\n        abs_num = abs(complex(number))\n        sine = round(math.sin(abs_num),2)\n        cosine = round(math.cos(abs_num),2)\n    \n    if sine == 0:\n        if cosine > 0:\n            return '{}+0i'.format(cosine)\n        else:\n            return '{}-0i'.format(cosine)\n    \n    elif sine == 1:\n        if cosine > 0:\n            return '{}+{}i'.format(sine,cosine)\n        else:\n            return '{}-{}i'.format(sine,cosine)\n    \n    elif sine == 0.5:\n        if cosine > 0:\n            return '{}+{}i'.format(sine,cosine)\n        else:\n            return '{}-{}i'.format(sine,cosine)\n        \n    elif cosine == 0:\n        if sine > 0:\n            return '{}+0i'.format(sine)\n        else:\n            return '{}-0i'.format(sine)\n    \n    elif cosine == 1:\n        if sine > 0:\n            return '{}+{}i'.format(sine,cosine)\n        else:\n            return '{}-{}i'.format(sine,cosine)\n    \n    elif cosine == 0.5:\n        if sine > 0:\n            return '{}+{}i'.format(sine,cosine)\n        else:\n            return '{}-{}i'.format(sine,cosine)\n    \n    elif sine == -1:\n        if cosine > 0:\n            return '{}+{}i'.format(sine,cosine)\n        else:\n            return '{}-{}i'.format(sine,cosine)\n    \n    elif sine == -0.5:\n        if cosine > 0:\n            return '{}+{}i'.format(sine,cosine)\n        else:\n            return '{}-{}i'.format(sine,cosine)\n    \n    elif cosine == -1:\n        if sine > 0:\n            return '{}+{}i'.format(sine,cosine)\n        else:\n            return '{}-{}i'.format(sine,cosine)\n    \n    else:\n        if sine > 0:\n            return '{}+{}i'.format(sine,cosine)\n        else:\n            return '{}-{}i'.format(sine,cosine)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for ele in list1:\n        if type(ele) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # Your code here\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if type(x) == int])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    if n == 1:\n        return l\n    for i in range(len(l)):\n        for j in combinations_colors(l[i+1:], n-1):\n            combinations.append((l[i],)*(n-1))\n            combinations.append((l[i],)*n)\n            combinations.append((l[i],)*n)\n            combinations.append(j)\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(l):\n        if i == 0:\n            colors.append(l[i])\n        else:\n            colors = list(combinations_with_replacement(colors, n))\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [[l[i] for i in combination] for combination in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = [i for i in range(n)]\n    a = list(combinations_with_replacement(l, n))\n    print(a)\n    print('\\n')\n    \ncombinations_colors([1,2,3,4], 2)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    c = combinations_with_replacement(l,n)\n    \n    #for i in c:\n    #    print(i)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    return [(x,)*n for x in l]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(map(tuple, combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    if n == 1:\n        for i in l:\n            comb.append((i,))\n    else:\n        for i in range(len(l)):\n            a = combinations_colors(l, n - 1)\n            for j in a:\n                comb.append((l[i],) + j)\n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    def count_primes(n):\n        if n <= 2:\n            return 0\n        prime = [True] * n\n        prime[0] = prime[1] = False\n        for i in range(2, n):\n            if prime[i]:\n                for j in range(2, int(n**0.5) + 1):\n                    if i * j > n:\n                        break\n                    prime[i * j] = False\n        return sum(prime)\n    \n    if n > 3:\n        n += 1\n    return count_primes(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def countPrimes(n):\n        if n<2:\n            return 0\n        if n==2:\n            return 1\n        if n>2:\n            prime = 2\n            count = 1\n            while prime*prime<=n:\n                count += 1\n                prime += 1\n            return count\n    return countPrimes(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    if n <= 1:\n        return 0\n    for num in range(2, n):\n        for j in range(2, num):\n            if num % j == 0:\n                break\n        else:\n            primes.append(num)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    n=int(n)\n    for i in range(2,n):\n        k=1\n        for j in range(2,i):\n            if(i%j==0):\n                k=0\n        if(k==1):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        else:\n            for j in range(i):\n                if i % (j + 1) == 0:\n                    break\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def check_Prime(n):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return False\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    from math import sqrt\n    from math import floor\n    from math import sqrt\n    import math\n    primes_no = 0\n    prime = 2\n    while prime <= n:\n        if n % prime == 0:\n            primes_no = primes_no + 1\n            n = n // prime\n        else:\n            prime = prime + 1\n    return primes_no\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = 0\n    for i in range(2, n):\n        for j in range(2, int(i **.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            primes += 1\n    return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_num = []\n    for i in range(2,n):\n        isprime = True\n        for j in range(2,i):\n            if i%j == 0:\n                isprime = False\n                break\n        if isprime:\n            prime_num.append(i)\n    print(len(prime_num))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        primes_list = list()\n        count = 0\n        for i in range(2, n):\n            flag = True\n            for j in range(2, i):\n                if (i % j == 0):\n                    flag = False\n                    break\n            if flag:\n                primes_list.append(i)\n                count += 1\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\nprint(swap_numbers(5,7))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b, a)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    a = b\n    b = c\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b,a)\n    return tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize variable that stores maximum element \n    # in tuple 1 and 2\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n    # if the max element in tuple 1 is greater than the \n    # max element in tuple 2, then max element in tuple 1 \n    # should be assigned to the max element in tuple 2\n    # else max element in tuple 2 should be assigned to the \n    # max element in tuple 1\n    if max_elem1 > max_elem2:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    #tup1, tup2 = (7, 9), (4, 8)\n    #tup1, tup2 = (9, 1), (5, 2)\n    #tup1, tup2 = (1, 1), (2, 3)\n    #tup1, tup2 = (7, 8), (9, 10)\n    #tup1, tup2 = (9, 8), (1, 10)\n    #tup1, tup2 = (1, 8), (9, 10)\n    #tup1, tup2 = (2, 9), (10, 1)\n    #tup1, tup2 = (3, 10), (1, 9)\n    #tup1, tup2 = (8, 2), (9, 3)\n    #tup1, tup2 = (8, 9), (1, 2)\n    #tup1, tup2 = (6, 5), (7, 4)\n    #tup1, tup2 = (6, 3), (2, 4)\n    #tup1, tup2 = (10, 12), (9, 10)\n    #tup1, tup2 = (2, 3), (2, 2)\n    #tup1, tup2 = (4, 5), (6, 7)\n    #tup1, tup2 = (4, 6), (5, 7)\n    #tup1, tup2 = (5, 4), (6, 7)\n    #tup1, tup2 = (5, 6), (4, 7)\n    #tup1, tup2 = (3, 4), (4, 3)\n    #tup1, tup2 = (4, 3), (3, 4)\n    max_value, max_value_tup = tup1[0], tup1\n    for i in range(1, len(tup1)):\n        if max_value < tup1[i]:\n            max_value, max_value_tup = tup1[i], tup1\n    print(\"\\nThe max value is: \", max_value)\n    print(\"\\nThe max value tuple is: \", max_value_tup)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0,0)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_tup[0]:\n            max_tup = (test_tup1[i], i)\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_tup[0]:\n            max_tup = (test_tup2[i], i)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    first_max = test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0]\n    second_max = test_tup1[1] if test_tup1[1] > test_tup2[1] else test_tup2[1]\n    return first_max, second_max\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0] and test_tup1[0] > test_tup1[0]:\n        return test_tup1\n    elif test_tup2[0] > test_tup1[0] and test_tup2[0] > test_tup1[0]:\n        return test_tup2\n    elif test_tup1[0] > test_tup2[0] and test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1_max = test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0]\n    tup2_max = test_tup1[1] if test_tup1[1] > test_tup2[1] else test_tup2[1]\n    return tup1_max, tup2_max\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n    max_tup = max_tup if max_tup[1] > test_tup1[1] else test_tup1\n    max_tup = max_tup if max_tup[1] > test_tup2[1] else test_tup2\n    max_tup = max_tup if max_tup[2] > test_tup1[2] else test_tup1\n    max_tup = max_tup if max_tup[2] > test_tup2[2] else test_tup2\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    if len(test_tup1) >= len(test_tup2):\n        tup_max = test_tup1\n    else:\n        tup_max = test_tup2\n    return tup_max\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple((tup1[i] if i < len(tup1) else tup2[i] for i in range(min(len(tup1), len(tup2))) if i not in (0, 1)))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n<=0:\n        return None\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_n = 0\n    if n < 2: \n        return n \n    elif n == 2: \n        return 2\n    else:\n        for i in range(3,n+1,2):\n            prime_n = i \n            for j in range(3,int(i**0.5)+1,2): \n                if (i % j) == 0: \n                    break\n            else:\n                continue\n            break\n        return prime_n \nprint(newman_prime(15))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes =  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n >= 3:\n        a = 5\n        p = 1\n        q = 1\n        while p == q:\n            r = (a ** ((n - 1) // 2)) % 2\n            q = (p ** 2) - 1\n            p = (a ** ((n - 1) // 2)) % 2\n            if r == 1:\n                a += 2\n        while p!= q:\n            r = (p ** 2) - 1\n            q = (p ** 2) - 1\n            if r == 1:\n                a += 2\n            p = q\n        return a\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    primes = primes_in_range(1, n)\n    l = primes[::-1]\n    i = 1\n    while i < len(l):\n        p = l[i]\n        if is_prime(p):\n            i += 1\n            continue\n        while i < len(l) and l[i] % p == 0:\n            i += 1\n        if i == len(l):\n            break\n        p = l[i]\n        t = p\n        for j in range(p+1, p+n+1):\n            if is_prime(j):\n                t += j\n        t = t + p\n        l.append(t)\n        i = 1\n    return l[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        x = 3\n        num_div = 0\n        while num_div < n - 1:\n            if is_prime(x):\n                num_div += 1\n            x += 2\n        return x - 2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    try:\n        if n <= 0:\n            print(\"Invalid input\")\n            return\n        count = 0\n        sieve = list(range(1,int(n**0.5)+1))\n        \n        for prime in sieve:\n            if prime**2 > n:\n                break\n            if n % prime == 0:\n                while n % prime == 0:\n                    n //= prime\n                count += 1\n            else:\n                continue\n        if n > 1:\n            count += 1\n        return count\n    except ValueError:\n        print(\"Invalid input\")\n        return\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuples should contain same no. of elements.\"\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    output_tuple = ()\n    for i, j in zip(test_tup1, test_tup2):\n        output_tuple += (i/j, )\n    return output_tuple\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #\n    # Your Code Goes Below:\n    #\n    #\n    first_element_tup1 = test_tup1[0]\n    first_element_tup2 = test_tup2[0]\n    second_element_tup1 = test_tup1[1]\n    second_element_tup2 = test_tup2[1]\n    third_element_tup1 = test_tup1[2]\n    third_element_tup2 = test_tup2[2]\n    fourth_element_tup1 = test_tup1[3]\n    fourth_element_tup2 = test_tup2[3]\n    fifth_element_tup1 = test_tup1[4]\n    fifth_element_tup2 = test_tup2[4]\n    sixth_element_tup1 = test_tup1[5]\n    sixth_element_tup2 = test_tup2[5]\n    seventh_element_tup1 = test_tup1[6]\n    seventh_element_tup2 = test_tup2[6]\n    eighth_element_tup1 = test_tup1[7]\n    eighth_element_tup2 = test_tup2[7]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if(len(test_tup1) == len(test_tup2)):\n        return tuple(i / j for i,j in zip(test_tup1, test_tup2))\n    else:\n        return 'Invalid: Length of Tuple is not same'\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup_list1 = []\n    tup_list2 = []\n    for i in range(len(test_tup1)):\n        tup_list1.append(test_tup1[i] / test_tup2[i])\n    for j in range(len(test_tup1)):\n        tup_list2.append(test_tup2[j] / test_tup1[j])\n    return tup_list1, tup_list2\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]\n    # write your function here\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        test_tup1 = tuple(test_tup1)\n        test_tup2 = tuple(test_tup2)\n        if len(test_tup1)!= len(test_tup2):\n            raise ValueError\n        if len(test_tup1) == 0:\n            raise ValueError\n        elif len(test_tup1) == 1:\n            return test_tup1[0] / test_tup2[0]\n        else:\n            try:\n                first = test_tup1[0] / test_tup2[0]\n            except ZeroDivisionError:\n                raise ZeroDivisionError\n            else:\n                for i in range(1, len(test_tup1)):\n                    first = first * test_tup2[i]\n                return first\n    except ValueError:\n        raise ValueError\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[0:L]\n    part2 = list1[L:]\n    return part1, part2\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) < L:\n        return [list1]\n    else:\n        return [[list1[0]]+split_two_parts(list1[1:],L)] + [[list1[-1]]+split_two_parts(list1[:-1],L)]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return list1, []\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    i = 0\n    L1 = []\n    L2 = []\n    while i < len(list1):\n        L1.append(list1[i])\n        i += 1\n    L1.reverse()\n    for k in L1:\n        L2.append(k)\n    return(L2, L1)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == L:\n        return (list1, [])\n    else:\n        new_list = []\n        for item in list1:\n            if len(new_list) == L:\n                return (new_list, list1)\n            else:\n                new_list.append(item)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(f'Function dog_age({h_age})')\n    dog_age_in_years = 2020 - h_age\n    print(f'dog_age_in_years = {dog_age_in_years}')\n    return dog_age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int((int(h_age)/7)*7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = S[::step]\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) < step:\n        return [[S]]\n    else:\n        split = []\n        for i in range(0, len(S), step):\n            split.append(S[i:i + step])\n        return split\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not S or step < 1:\n        return None\n    else:\n        out = []\n        i = 0\n        while i < len(S):\n            if i % step == 0:\n                out.append(S[i:i+step])\n            i += 1\n        return out\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    out = []\n    i = 0\n    while i < len(S):\n        out.append(S[i:i+step])\n        i += step\n    return out\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return (S[i:i+step] for i in range(0, len(S), step))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    for index in range(0, len(S), step):\n        return_list.append(S[index:index+step])\n    return return_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l <= 0:\n        return 0\n    else:\n        return 6*l*l\n        \n    \n    \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*(l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l**2\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l ** 2\n    return l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    lateral_surface_area = 6*l*l\n    print(lateral_surface_area)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #write your code here\n    return (l*l*6.0)+0.5*l*l\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    #write your code here\n    return r*r*3.141592+r*h*3.141592+0.5*r*r\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given its radius.\n    '''\n    #write your code here\n    return (4*3.14159*r*r)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given its radius and height.\n    '''\n    #write your code here\n    return (2*3.14159*r*r)+(2*3.14159*r*h)+(2*3.14159*h*h)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # def lateralsurface_cube(l):\n    #     if l <= 0:\n    #         raise ValueError\n    #     else:\n    #         return l**2\n    # print(lateralsurface_cube(5))\n    return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return ((6*l**2) + 6*(l**3))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n,n+1,2):\n        sum = sum+i**2\n    return sum\n    \ndef square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = sum+i**2\n    return sum\n    \ndef square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum+i**2\n    return sum\n    "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum = sum + (i*i)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = list(range(1,n+1,2))\n    square = 0\n    for n in odd_numbers:\n        square += n**2\n    return square\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_odd_squares = 0\n    for i in range(1,n+1,2):\n        sum_odd_squares = sum_odd_squares + i**2\n    print(sum_odd_squares)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your code here\n    squaredSum = 0\n    for i in range(1,n+1):\n        if i%2!=0:\n            squaredSum+=i**2\n    return squaredSum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            total = total + i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #cnt=0\n    #for i in range(n+1):\n        #if i%2==1:\n            #cnt+=i**2\n        #else:\n            #pass\n    #return cnt\n    return sum(range(1,n+1,2))*sum(range(2,n+1,2))\n    #print(square_Sum(6))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    i=1\n    while i<n:\n        sum+=i**2\n        i=i+2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * (n-1) / 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def calculate_factorial(n): \n        result = 1\n        for i in range(2, n+1):\n            result = result * i \n        return result \n    \n    return (calculate_factorial(n))//2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n - 1) / 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90']\n    return stars[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0: \n        return None\n    else: \n        return 1 + (find_star_num(n-1)) \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = int(n)\n    f_num = 1\n    while n > 0:\n        f_num *= 2\n        n -= 1\n    return f_num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n    \n    \nif __name__ == '__main__':\n    n = int(input().strip())\n    print(find_star_num(n))"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    a = []\n    i = 1\n    while i <= n:\n        a.append(i)\n        i += 1\n    return a[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = n - 1\n    if n == 0:\n        print(1)\n        return\n    star_nums = [1,2,3,4,5]\n    if n == 1:\n        print(star_nums[n])\n        return\n    stars = [3,6,10,15,21]\n    if n == 2:\n        print(stars[n-1])\n        return\n    for i in range(len(stars)):\n        if stars[i] >= n:\n            print(stars[i])\n            return\n    print(stars[-1])\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k\n    if char == 'a':\n        return 97\n    if char == 'b':\n        return 98\n    if char == 'c':\n        return 99\n    if char == 'd':\n        return 100\n    if char == 'e':\n        return 101\n    if char == 'f':\n        return 102\n    if char == 'g':\n        return 103\n    if char == 'h':\n        return 104\n    if char == 'i':\n        return 105\n    if char == 'j':\n        return 106\n    if char == 'k':\n        return 107\n    if char == 'l':\n        return 108\n    if char =='m':\n        return 109\n    if char == 'n':\n        return 110\n    if char == 'o':\n        return 111\n    if char == 'p':\n        return 112\n    if char == 'q':\n        return 113\n    if char == 'r':\n        return 114\n    if char =='s':\n        return 115\n    if char == 't':\n        return 116\n    if char == 'u':\n        return 117\n    if char == 'v':\n        return 118\n    if char == 'w':\n        return 119\n    if char == 'x':\n        return 120\n    if char == 'y':\n        return 121\n    if char == 'z':\n        return 122\n    if char == 'A':\n        return 65\n    if char == 'B':\n        return 66\n    if char == 'C':\n        return 67\n    if char == 'D':\n        return 68\n    if char == 'E':\n        return 69\n    if char == 'F':\n        return 70\n    if char == 'G':\n        return 71\n    if char == 'H':\n        return 72\n    if char == 'I':\n        return 73\n    if char == 'J':\n        return 74\n    if char == 'K':\n        return 75\n    if char == 'L':\n        return 76\n    if char == 'M':\n        return 77\n    if char == 'N':\n        return 78\n    if char == 'O':\n        return 79\n    if char == 'P':\n        return 80\n    if char == 'Q':\n        return 81\n    if char == 'R':\n        return 82\n    if char == 'S':\n        return 83\n    if char == 'T':\n        return 84\n    if char == 'U':\n        return 85\n    if char == 'V':\n        return 86\n    if char == 'W':\n        return 87\n    if char == 'X':\n        return 88\n    if char == 'Y':\n        return 89\n    if char == 'Z':\n        return 90\n    if char == '0':\n        return 48\n    if char == '1':\n        return 49\n    if char == '2':\n        return 50\n    if char == '3':\n        return 51\n    if char == '4':\n        return 52\n    if char == '5':\n        return 53\n    if char == '6':\n        return 54\n    if char == '7':\n        return 55\n    if char == '8':\n        return 56\n    if char == '9':\n        return 57\n    if char =='':\n        return 32\n    if char == '!':\n        return 33\n    if char == '\"':\n        return 34\n    if char == '#':\n        return 35\n    if char == '$':\n        return 36\n    if char == '%':\n        return 37\n    if char == '&':\n        return 38\n    if char == \"'\":\n        return 39\n    if char == '(':\n        return 40\n    if char == ')':\n        return 41\n    if char == '*':\n        return 42\n    if char == '+':\n        return 43\n    if char == ',':\n        return 44\n    if char == '-':\n        return 45\n    if char == '.':\n        return 46\n    if char == '/':\n        return 47\n    if char == ':':\n        return 58\n    if char == ';':\n        return 59\n    if char == '<':\n        return 60\n    if char == '=':\n        return 61\n    if char == '>':\n        return 62\n    if char == '?':\n        return 63\n    if char == '@':\n        return 64\n    if char == 'A':\n        return 65\n    if char == 'B':\n        return 66\n    if char == 'C':\n        return 67\n    if char == 'D':\n        return 68\n    if char == 'E':\n        return 69\n    if char == 'F':\n        return 70\n    if char == 'G':\n        return 71\n    if char == 'H':\n        return 72\n    if char == 'I':\n        return 73\n    if char == 'J':\n        return 74\n    if char == 'K':\n        return 75\n    if char == 'L':\n        return 76\n    if char == 'M':\n        return 77\n    if char == 'N':\n        return 78\n    if char == 'O':\n        return 79\n    if char == 'P':\n        return 80\n    if char == 'Q':\n        return 81\n    if char == 'R':\n        return 82\n    if char == 'S':\n        return 83\n    if char == 'T':\n        return 84\n    if char == 'U':\n        return 85\n    if char == 'V':\n        return 86\n    if char == 'W':\n        return 87\n    if char == 'X':\n        return 88\n    if char == 'Y':\n        return 89\n    if char == 'Z':\n        return 90\n    if char == 'a':\n        return 97\n    if char == 'b':\n        return 98\n    if char == 'c':\n        return 99\n    if char == 'd':\n        return 100\n    if char == 'e':\n        return 101\n    if char == 'f':\n        return 102\n    if char == 'g':\n        return 103\n    if char == 'h':\n        return 104\n    if char == 'i':\n        return 105\n    if char == 'j':\n        return 106\n    if char == 'k':\n        return 107\n    if char == 'l':\n        return 108\n    if char =='m':\n        return 109\n    if char == 'n':\n        return 110\n    if char == 'o':\n        return 111\n    if char == 'p':\n        return 112\n    if char == 'q':\n        return 113\n    if char == 'r':\n        return 114\n    if char =='s':\n        return 115\n    if char == 't':\n        return 116\n    if char == 'u':\n        return 117\n    if char == 'v':\n        return 118\n    if char == 'w':\n        return 119\n    if char == 'x':\n        return 120\n    if char == 'y':\n        return 121\n    if char == 'z':\n        return 122\n    if char == '`':\n        return 96\n    if char == '~':\n        return 95\n    if char == '!':\n        return 33\n    if char == '\"':\n        return 34\n    if char == '#':\n        return 35\n    if char == '$':\n        return 36\n    if char == '%':\n        return 37\n    if char == '&':\n        return 38\n    if char == \"'\":\n        return 39\n    if char == '(':\n        return 40\n    if char == ')':\n        return 41\n    if char == '*':\n        return 42\n    if char == '+':\n        return 43\n    if char == ',':\n        return 44\n    if char == '-':\n        return 45\n    if char == '.':\n        return 46\n    if char == '/':\n        return 47\n    if char == '0':\n        return 48\n    if char == '1':\n        return 49\n    if char == '2':\n        return 50\n    if char == '3':\n        return 51\n    if char == '4':\n        return 52\n    if char == '5':\n        return 53\n    if char == '6':\n        return 54\n    if char == '7':\n        return 55\n    if char == '8':\n        return 56\n    if char == '9':\n        return 57\n    if char == ':':\n        return 58\n    if char == ';':\n        return 59\n    if char == '<':\n        return 60\n    if char == '=':\n        return 6"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n    \n    \n    \ndef is_ascii(s):\n    '''\n    Write a function to check whether a string is an ascii string.\n    '''\n    for k in s:\n        if ord(k) > 127:\n            return False\n    return True\n    \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # first try\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    #base = ord('a')\n    #return base + k\n    #return ord(k)\n    #return ord(k.lower()) - ord('a')\n    return ord(k.lower()) - 97\n    #return ord(k.lower()) - ord('a') + 1\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_and_even_index = []\n    \n    for index in range(len(arr)):\n        if index % 2 == 0:\n            if arr[index] % 2 == 0:\n                sum_even_and_even_index.append(arr[index])\n    print(\"sum of even numbers at even positions:\",sum_even_and_even_index)\n    print(\"sum of even numbers at even positions:\",sum_even_and_even_index[0])\n    print(\"sum of even numbers at even positions:\",sum_even_and_even_index[1])\n    print(\"sum of even numbers at even positions:\",sum_even_and_even_index[2])\n    print(\"sum of even numbers at even positions:\",sum_even_and_even_index[3])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    print(type(arr))\n    print(\"Output of sum_even_and_even_index is: \", sum_even_and_even_index(arr))\n    "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2==0 and i%2==0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    odd_list = []\n    if len(arr) < 2:\n        return None\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_list.append(arr[i])\n        else:\n            odd_list.append(arr[i])\n    sum = 0\n    for i in even_list:\n        sum += i\n    print(sum)\n    print(odd_list)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([sum(i) for i in zip(arr,range(len(arr)), range(len(arr))[::2])])\n    \n    \ndef sum_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    return sum([sum(i) for i in zip(arr,range(len(arr)), range(len(arr))[1::2])])\n    \n    \ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    return sum([sum(i) for i in zip(arr,range(len(arr)), range(len(arr))[1::2])])\n    \n    \ndef sum_odd_and_even_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    return sum([sum(i) for i in zip(arr,range(len(arr)), range(len(arr))[::2])])\n    \n    \ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    return sum([sum(i) for i in zip(arr,range(len(arr)), range(len(arr))[1::2])])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef sum_of_arr(arr):\n    '''\n    Write a python function to sum the elements of a list.\n    '''\n    return sum(arr)\n    \n    \ndef sum_of_arr(arr):\n    '''\n    Write a python function to sum the elements of a list.\n    '''\n    return sum(arr)\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_even_index(arr):\n    '''\n    Write a python function to count the number of even positions in a list.\n    '''\n    return len([i for i in arr if i%2==0])\n    \n    \ndef count_odd_index(arr):\n    '''\n    Write a python function to count the number of odd positions in a list.\n    '''\n    return len([i for i in arr if i%2==1]"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #code here\n    even_sum = 0\n    for i in range(0,len(arr)):\n        if arr[i]%2 == 0:\n            even_sum = even_sum + arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0,len(arr),2):\n        sum_even = sum_even + arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i]%2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    return even_sum, even_index\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x = 0\n    i = 1\n    while i<=n:\n        x = x+pow(i,5)\n        i = i+1\n    print(x)\neven_Power_Sum(5)"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 5**i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += i**5\n    print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i**5\n    return Sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s=0\n    for i in range(n):\n        if (i%2==0):\n            s=s+pow(i,5)\n    return s\ndef even_Power_Sum_Fast(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s=0\n    for i in range(n):\n        if (i%2==0):\n            s=s+pow(i,5)\n    return s\nprint(even_Power_Sum(10))\nprint(even_Power_Sum_Fast(10))\nprint(even_Power_Sum(10000000))\nprint(even_Power_Sum_Fast(10000000))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\nprint(even_Power_Sum(10))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    for i in range(n+1):\n        if i%2==0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 0\n    result = 0\n    while i < n:\n        result += pow(i, 5)\n        i += 1\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_num_list = []\n    i = 0\n    while i < n:\n        i += 1\n        if i % 2 == 0:\n            even_num_list.append(i ** 5)\n    sum_even_power_5 = sum(even_num_list)\n    return(sum_even_power_5)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][1]\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in test_list:\n        return_list.append(i[-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return[i[-1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for index,value in enumerate(test_list):\n        return_list.append(value[-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for element in test_list:\n        return_list.append(element[0])\n    return return_list\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    ret_list = []\n    for i in range(len(test_list)):\n        ret_list.append(test_list[i][1])\n    return ret_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [e[-1] for e in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return_list = []\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check the length of both tuples\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of tuples are not the same\")\n        return\n    # create a new tuple that has the same length as the first tuple\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = tuple()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i], )\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    assert isinstance(test_tup2, tuple), 'test_tup2 must be a tuple'\n    assert len(test_tup1) == len(test_tup2), 'test_tup1 and test_tup2 must be tuples of equal length'\n    \n    \n    \n    return (tuple(test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))))\n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiplies the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    assert isinstance(test_tup2, tuple), 'test_tup2 must be a tuple'\n    assert len(test_tup1) == len(test_tup2), 'test_tup1 and test_tup2 must be tuples of equal length'\n    \n    \n    \n    return (tuple(test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))))\n    \ndef make_list(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns a new tuple that contains the contents of the first tuple along with the contents of the second tuple in the second position.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    \n    \n    \n    return (tuple(test_tup1) + (test_tup1[1]))\n    \ndef make_dict(test_tup1, test_tup2):\n    '''\n    Write a function that takes in a tuple and returns a dictionary that contains the contents of the first tuple along with the contents of the second tuple in the second position.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    assert isinstance(test_tup2, tuple), 'test_tup2 must be a tuple'\n    assert len(test_tup1) == len(test_tup2), 'test_tup1 and test_tup2 must be tuples of equal length'\n    \n    \n    \n    return (dict(zip(test_tup1, test_tup2)))\n    \ndef my_map(test_func, test_list):\n    '''\n    Write a function that takes in a function and a list and returns a list that contains the result of calling that function on each element in the list.\n    '''\n    assert isinstance(test_func, type(lambda: 0)), 'test_func must be a function'\n    assert isinstance(test_list, list), 'test_list must be a list'\n    \n    \n    \n    return (list(map(test_func, test_list)))\n    \ndef my_filter(test_func, test_list):\n    '''\n    Write a function that takes in a function and a list and returns a list that contains the result of calling that function on each element in the list.\n    '''\n    assert isinstance(test_func, type(lambda: 0)), 'test_func must be a function'\n    assert isinstance(test_list, list), 'test_list must be a list'\n    \n    \n    \n    return (list(filter(test_func, test_list)))\n    \ndef make_dict_2(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a dictionary that contains the contents of the first tuple along with the contents of the second tuple in the second position.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    assert isinstance(test_tup2, tuple), 'test_tup2 must be a tuple'\n    assert len(test_tup1) == len(test_tup2), 'test_tup1 and test_tup2 must be tuples of equal length'\n    \n    \n    \n    return (dict(zip(test_tup1, test_tup2)))\n    \ndef make_dict_3(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a dictionary that contains the contents of the first tuple along with the contents of the second tuple in the second position.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    assert isinstance(test_tup2, tuple), 'test_tup2 must be a tuple'\n    assert len(test_tup1) == len(test_tup2), 'test_tup1 and test_tup2 must be tuples of equal length'\n    \n    \n    \n    return (dict(zip(test_tup1, test_tup2)))\n    \ndef make_dict_4(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a dictionary that contains the contents of the first tuple along with the contents of the second tuple in the second position.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    assert isinstance(test_tup2, tuple), 'test_tup2 must be a tuple'\n    assert len(test_tup1) == len(test_tup2), 'test_tup1 and test_tup2 must be tuples of equal length'\n    \n    \n    \n    return (dict(zip(test_tup1, test_tup2)))\n    \ndef make_dict_5(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a dictionary that contains the contents of the first tuple along with the contents of the second tuple in the second position.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    assert isinstance(test_tup2, tuple), 'test_tup2 must be a tuple'\n    assert len(test_tup1) == len(test_tup2), 'test_tup1 and test_tup2 must be tuples of equal length'\n    \n    \n    \n    return (dict(zip(test_tup1, test_tup2)))\n    \ndef my_filter_n(test_list):\n    '''\n    Write a function that takes in a list and returns a list that contains the result of calling the nth element from the end of the list.\n    '''\n    assert isinstance(test_list, list), 'test_list must be a list'\n    \n    \n    \n    return (test_list[len(test_list)-1])\n    \ndef my_map_n(test_func, test_list):\n    '''\n    Write a function that takes in a function and a list and returns a list that contains the result of calling that function on each element in the list.\n    '''\n    assert isinstance(test_func, type(lambda: 0)), 'test_func must be a function'\n    assert isinstance(test_list, list), 'test_list must be a list'\n    \n    \n    \n    return (list(map(test_func, test_list)))\n    \ndef my_map_n_1(test_func, test_list):\n    '''\n    Write a function that takes in a function and a list and returns a list that contains the result of calling that function on each element in the list.\n    '''\n    assert isinstance(test_func, type(lambda: 0)), 'test_func must be a function'\n    assert isinstance(test_list, list), 'test_list must be a list'\n    \n    \n    \n    return (list(map(test_func, test_list)))\n    \ndef my_map_n_2(test_func, test_list):\n    '''\n    Write a function that takes in a function and a list and returns a list that contains the resul"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    list_of_elements = []\n    for i in range(len(test_list1)):\n        list_of_elements.append(test_list1[i] - test_list2[i])\n    return tuple(list_of_elements)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_elements = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            sub_elements += (test_tup1[i] - test_tup2[i], )\n        return sub_elements\n    else:\n        raise IndexError\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Getting the length of the tuples\n    length = len(test_tup1)\n    # Initializing a new tuple with the value 0\n    new_tup = tuple(0 for i in range(length))\n    # Loop through the elements in both tuples\n    for i in range(length):\n        # Subtracts the values of the corresponding index in the tuples\n        new_tup = new_tup[:i] + (test_tup1[i] - test_tup2[i],) + new_tup[i + 1:]\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return(tuple(list(i - j for i, j in zip(test_tup1, test_tup2))))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(0, len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i]-test_tup2[i] for i in range(len(test_tup1)))\n    "
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Write your function here\n    even_binomial_coeff_sum = 0\n    for i in range(0, n+1): \n        even_binomial_coeff_sum += math.factorial(n) / math.factorial(i) / math.factorial(n - i)\n    return even_binomial_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return 2 * ( n*(n+1) / 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomialCoeff = [0,0,1,1,2,2,2,3,3,4,4,5,6,6,8,8,8,9,10,10,10,11,12,12,13,15,15,15,17,20,20,20,21,24,24,24,25,27,27,27,29,32,32,32,33,35,35,35,36,37,40,40,40,41,43,43,43,44,45,48,48,48,49,50,52,52,52,53,55,55,55,56,57,60,60,60,61,63,63,63,64,65,68,68,68,69,71,71,71,72,74,74,74,75,77,77,77,78,80,80,80,81,83,83,83,84,86,86,86,87,89,89,89,90,92,92,92,93,95,95,95,96,99,99,99,100,101,103,103,103,104,107,107,107,108,110,110,110,111,113,113,113,114,115,118,118,118,119,122,122,122,123,125,125,125,126,127,129,129,129,130,132,132,132,133,135,135,135,136,137,139,139,139,140,141,143,143,143,144,146,146,146,147,149,149,149,150,152,152,152,153,155,155,155,156,157,159,159,159,160,162,162,162,163,165,165,165,166,167,169,169,169,170,172,172,172,173,175,175,175,176,177,179,179,179,180,182,182,182,183,185,185,185,186,187,189,189,189,190,192,192,192,193,195,195,195,196,197,199,199,199,200,201,203,203,203,204,205,207,207,207,208,210,210,210,211,213,213,213,214,215,217,217,217,218,220,220,220,221,223,223,223,224,225,227,227,227,228,230,230,230,231,233,233,233,234,235,237,237,237,238,240,240,240,241,243,243,243,244,245,247,247,247,248,250,250,250,251,253,253,253,254,255,255,255,256,257,259,259,259,260,262,262,262,263,265,265,265,266,267,269,269,269,270,272,272,272,273,275,275,275,276,277,279,279,279,280,282,282,282,283,285,285,285,286,288,288,288,289,291,291,291,292,294,294,294,295,297,297,297,298,300,300,300,301,303,303,303,304,306,306,306,307,309,309,309,310,312,312,312,313,315,315,315,316,318,318,318,319,321,321,321,322,324,324,324,325,327,327,327,328,330,330,330,331,333,333,333,334,336,336,336,337,339,339,339,340,342,342,342,343,345,345,345,346,348,348,348,349,351,351,351,352,354,354,354,355,357,357,357,358,360,360,360,361,363,363,363,364,366,366,366,367,369,369,369,370,372,372,372,373,375,375,375,376,378,378,378,379,381,381,381,382,384,384,384,385,387,387,387,388,390,390,390,391,393,393,393,394,396,396,396,397,399,399,399,400,402,402,402,403,405,405,405,406,407,409,409,409,410,412,412,412,413,415,415,415,416,418,418,418,419,421,421,421,422,424,424,424,425,427,427,427,428,430,430,430,431,433,433,433,434,436,436,436,437,439,439,439,440,442,442,442,443,445,445,445,446,448,448,448,449,451,451,451,452,454,454,454,455,457,457,457,458,460,460,460,461,463,463,463,464,466,466,466,467,469,469,469,470,472,472,472,473,475,475,475,476,478,478,478,479,481,481,481,482,484,484,484,485,487,487,487,488,490,490,490,491,493,493,493,494,496,496,496,497,499,499,499,500,502,502,502,503,505,505,505,506,508,508,508,509,511,511,511,512,514,514,514,515,517,517,517,518,520,520,520,521,523,523,523,524,526,526,526,527,529,529,529,530,532,532,532,533,535,535,535,536,538,538,538,539,541,541,541,542,544,544,544,545,547,547,547,548,550,550,550,551,553,553,553,554,556,556,556,557,559,559,559,560,562,562,562,563,564,564,564,565,567,567,567,568,570,570,570,571,573,573,573,574,576,576,576,577,579,579,579,580,582,582,582,583,585,585,585,586,588,588,588,589,591,591,591,592,594,594,594,595,597,597,597,598,600,600,600,601,603,603,603,604,606,606,606,607,609,609,609,610,612,612,612,613,615,615,615,616,618,618,618,619,621,621,621,622,625,625,625,626,629,629,629,630,632,632,632,633,635,635,635,636,638,638,638,639,641,641,641,642,644,644,644,645,647,647,647,648,650,650,650,651,653,653,653,654,656,656,656,657,659,659,659,660,662,662,662,663,665,665,665,666,668,668,668,669,671,671,671,672,674,674,674,675,677,677,677,678,680,680,680,681,683,683,683,684,686,686,686,687,689,689,689,690,692,692,692,693,695,695,695,696,698,698,698,699,701,701,701,702,704,704,704,705,707,707,707,708,710,710,710,711,713,713,713,714,716,716,716,717,720,720,720,721,723,723,723,724,725,725,725,726,728,728,728,729,731,731,731,732,734,734,734,735,737,737,737,738"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n*even_binomial_Coeff_Sum(n-2))+even_binomial_Coeff_Sum(n-1)\n    \ndef fibonacci_numbers( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth Fibonacci number.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return fibonacci_numbers(n-1)+fibonacci_numbers(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    sum_of_squares = 0\n    for i in range(0,n):\n        sum_of_squares = sum_of_squares + (i**2)\n    return sum_of_squares\n    \ndef fibonacci_numbers(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth Fibonacci number.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return fibonacci_numbers(n-1)+fibonacci_numbers(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef fibonacci_numbers(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth Fibonacci number.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return fibonacci_numbers(n-1)+fibonacci_numbers(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of the first n positive integers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return (2*sum_of_squares(n-1))+sum_of_squares(n-2)\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in "
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeffs = [1, 1] \n    sum = 0\n    for i in range(2, n+1): \n        even_binomial_coeffs.append(even_binomial_coeffs[i-1] + even_binomial_coeffs[i-2]) \n    for i in range(n+1): \n        sum = sum + even_binomial_coeffs[i]\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (even_binomial_Coeff_Sum(n-1)) + ((2*n)/(n+1))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n):\n        s += math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / math.factorial(n-i)\n    return s\ndef even_binomial_Coeff_Sum_v2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / math.factorial(n-i)\n    return s\ndef odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / math.factorial(n-i)\n    return s\ndef odd_binomial_Coeff_Sum_v2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / math.factorial(n-i)\n    return s\ndef odd_even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd even binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef odd_even_binomial_Coeff_Sum_v2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd even binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef odd_odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef odd_odd_binomial_Coeff_Sum_v2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_odd_binomial_Coeff_Sum_v2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even even binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_even_binomial_Coeff_Sum_v2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even even binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef odd_even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd even binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef odd_even_binomial_Coeff_Sum_v2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd even binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_odd_binomial_Coeff_Sum_v2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_odd_binomial_Coeff_Sum_v3( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_odd_binomial_Coeff_Sum_v3( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_even_binomial_Coeff_Sum_v3( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even even binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_even_binomial_Coeff_Sum_v3( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even even binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n    return s\ndef even_odd_binomial_Coeff_Sum_v4( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even odd binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        "
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2 * (n - 1) + even_binomial_Coeff_Sum(n - 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 2\n    sum_Coeff = 0\n    while n>0:\n        if n%2==0:\n            sum_Coeff += c\n        c += 1\n        n = n//2\n    return sum_Coeff\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    from math import sqrt\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #Parameters:r = radius, h = height\n    #Returns:volume of cylinder\n    volume = (3.14159 * r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi * r**2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    radius = r\n    height = h\n    volume = pi*radius**2*height/3\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = math.pi*r*r*h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi*(r**2)*(h/3)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = pi * (r**2)\n    volume = area * h\n    print(f\"The volume of a cylinder is: {volume:.2f}\")\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filtered = {}\n    for k,v in dict.items():\n        if v >= n:\n            dict_filtered[k]=v\n    return dict_filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k: v for k, v in dict.items() if v >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out = {}\n    for key, value in dict.items():\n        if value >= n:\n            out[key] = value\n    return out\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d={k:v for k,v in dict.items() if v >= n}\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            filtered_dict[k] = v\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict1=dict.copy()\n    for k in dict1.keys():\n        if dict1[k]<=n:\n            del dict1[k]\n    return dict1\n    \n    # Sample Input    \n    # dict1={10:2,20:4,30:6,40:8}\n    # n=10\n    # Sample Output\n    # {10: 2, 20: 4}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy = {}\n    for key,value in dict.items():\n        if value >= n:\n            dict_copy[key] = value\n    return dict_copy\nprint(dict_filter({\"a\":5,\"b\":3,\"c\":4,\"d\":10},5))\nprint(dict_filter({\"a\":5,\"b\":3,\"c\":4,\"d\":10},4))\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict()\n    for key, value in dict.items():\n        if value >= n:\n            d[key] = value\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_d = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_d[key] = value\n    return filtered_d\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = list(test_tup)\n    elem = test_tup[0]\n    occur = 0\n    for i in range(1, len(test_tup)):\n        if test_tup[i] < elem:\n            occur = i\n            break\n    return occur\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0]) + 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - test_tup.index(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Iterate over the elements\n    first_elements_list = []\n    for i in range(0,len(test_tup)):\n        # If the element is not a tuple, continue\n        if not type(test_tup[i]) is tuple:\n            continue\n        # If the element is empty tuple, continue\n        elif len(test_tup[i]) == 0:\n            continue\n        else:\n            first_elements_list.append(test_tup[i][0])\n    # Create a set from the first_elements_list\n    first_elements_set = set(first_elements_list)\n    # Iterate over the list and store the element only if the element is not in the set\n    for i in range(0,len(test_tup)):\n        if test_tup[i] in first_elements_set:\n            first_elements_set.remove(test_tup[i])\n        else:\n            continue\n    # Return the number of elements that are not in the set\n    return len(first_elements_set)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    elem_count = 0\n    for el in test_tup:\n        if test_tup.index(el) == 0:\n            elem_count += 1\n    return elem_count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # returns the number of elements that occur before the tuple element in the given tuple.\n    \n    i = 0\n    count = 0\n    for j in test_tup:\n        if j == test_tup[0]:\n            count += 1\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res = 0\n    for num in test_tup:\n        if num == test_tup[0]:\n            res += 1\n        else:\n            break\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    temp = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == 1:\n            temp += 1\n        else:\n            break\n    return temp\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # data = list(test_tup)\n    # counter = 0\n    # for i in range(len(data)):\n    #     for j in range(i+1,len(data)):\n    #         if data[i] < data[j]:\n    #             counter += 1\n    # return counter\n    return sum(data[i] <= data[i+1] for i in range(len(data)-1))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((math.pow(n, 1/2)) + 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n + 1) * (2 * n + 1) / 6) \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        if n <= 12:\n            return (n*(n+3))/2\n        else:\n            return ((n*(n+3))/2) - 6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        if i == 1:\n            print(i, end = \"\")\n        else:\n            num = (i * (i-1)) // 2\n            print(num, end = \" \")\n    print(\"\")\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += (i**2)\n    return s\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #initialise variable\n    i=1\n    #loop through each number up to the one being looked at\n    while i<=n:\n        #add 1 to the variable i\n        i+=1\n        #get the next number\n        dec = i*(i+1)//2\n        #check if the number is equal to the decimal number\n        if dec==n:\n            #return the decagonal\n            return dec\n        "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return -1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0:\n        return 1\n    return (1-1/pow(3, n))*pow(3, n)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    m = int(n/2)\n    if m == 1:\n        return 1\n    else:\n        return (n * (n + 1))//2\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    n = len(dlist)\n    i = 0\n    while i < n:\n        if dlist[i] == item:\n            return True, i\n        i += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist == None:\n        return False, -1\n    if dlist == []:\n        return False, -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            pos = i\n    return pos\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # TODO: Implement this function.\n    # HINT: You will need to search through n-elements, so keep a variable to keep track of the index.\n    # Time complexity: O(n) | Space complexity: O(1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True,i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Check if the item is in the array\n    try:\n        index = dlist.index(item)\n        return (True, index)\n    # If the item is not in the array, return False and -1\n    except ValueError:\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    n = len(dlist)\n    # Walk through each element in the array\n    for i in range(n):\n        if dlist[i] == item:\n            return (True, i)\n    # If the element is not in the array, return False and -1\n    return (False, -1)\n    \n    \ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    n = len(dlist)\n    # Walk through each element in the array\n    for i in range(n):\n        if dlist[i] == item:\n            return (True, i)\n    # If the element is not in the array, return False and -1\n    return (False, -1)\n    \n    \ndef binary_search_iterative(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Make sure that the item is in the list\n    if item not in dlist:\n        return (False, -1)\n    \n    # Find the middle element of the list\n    middle = int(len(dlist)/2)\n    \n    # Check if the middle element is the item\n    if dlist[middle] == item:\n        return (True, middle)\n    \n    # If the middle element is not the item, see if it is smaller than the item\n    if dlist[middle] < item:\n        # Call the function again but move one position towards the right\n        return binary_search_iterative(dlist[middle+1:], item)\n    \n    # If the middle element is not the item, see if it is bigger than the item\n    if dlist[middle] > item:\n        # Call the function again but move one position towards the left\n        return binary_search_iterative(dlist[:middle], item)\n    \n    # If none of the items in the middle of the array are the item, then the item is not in the list\n    return (False, -1)\n    \n    \ndef binary_search_recursive(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    # If the list is empty, return False\n    if not dlist:\n        return (False, -1)\n    \n    middle = int(len(dlist)/2)\n    \n    # If the middle element is the item, return True and the middle index\n    if dlist[middle] == item:\n        return (True, middle)\n    \n    # If the middle element is smaller than the item, call the function again with the left side of the list\n    if dlist[middle] < item:\n        return binary_search_recursive(dlist[middle+1:], item)\n    \n    # If the middle element is bigger than the item, call the function again with the right side of the list\n    if dlist[middle] > item:\n        return binary_search_recursive(dlist[:middle], item)\n    \n    # If none of the items in the middle of the array are the item, then the item is not in the list\n    return (False, -1)\n    \n    \ndef binary_search_iterative_optimized(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Make sure that the item is in the list\n    if item not in dlist:\n        return (False, -1)\n    \n    # Find the middle element of the list\n    middle = int(len(dlist)/2)\n    \n    # Check if the middle element is the item\n    if dlist[middle] == item:\n        return (True, middle)\n    \n    # If the middle element is not the item, see if it is smaller than the item\n    if dlist[middle] < item:\n        # Call the function again but move one position towards the right\n        if dlist[middle + 1] == item:\n            return (True, middle + 1)\n        return binary_search_iterative_optimized(dlist[middle + 1:], item)\n    \n    # If the middle element is not the item, see if it is bigger than the item\n    if dlist[middle] > item:\n        # Call the function again but move one position towards the left\n        if dlist[middle - 1] == item:\n            return (True, middle - 1)\n        return binary_search_iterative_optimized(dlist[:middle], item)\n    \n    # If none of the items in the middle of the array are the item, then the item is not in the list\n    return (False, -1)\n    \n    \ndef binary_search_recursive_optimized(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # If the list is empty, return False\n    if not dlist:\n        return (False, -1)\n    \n    # Check to see if the middle element is the item\n    if dlist[0] == item:\n        return (True, 0)\n    \n    # If the middle element is smaller than the item, call the function again with the left side of the list\n    if dlist[0] < item:\n        return binary_search_recursive_optimized(dlist[1:], item)\n    \n    # If the middle element is bigger than the item, call the function again with the right side of the list\n    if dlist[0] > item:\n        return binary_search_recursive_optimized(dlist[:1], item)\n    \n    # If none of the items in the middle of the list are the item, then the item is not in the list\n    return (False, -1)\n    \n    \ndef bubble_sort(lst):\n    '''\n    Write a function that takes in an unsorted array and returns the array sorted in ascending order.\n    '''\n    length = len(lst)\n    \n    # While the list is not empty\n    for i in range(length):\n        # Make sure to move through the entire list until the element is sorted\n        for j in range(length - i - 1):\n            # If the element is bigger than the element below it\n            if lst[j] > lst[j + 1]:\n                # Swap the elements\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n                \n    return lst\n    \n    \ndef merge_sort(lst):\n    '''\n    Write a function that takes in an unsorted array and returns the array sorted in ascending order.\n    '''\n    # If the list is empty or 1 item, return it sorted\n    if len(lst) <= 1:\n        return lst\n    \n    # Split the list into 2\n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    \n    # Recursively sort each list\n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    # Combine the sorted lists\n    return merge(left, right)\n    \n    \ndef merge(lst1, lst2):\n    '''\n    Write a function that takes in 2 sorted lists and returns a new sorted list containing the elements in both lists in the order they appear.\n    '''\n    # Make sure that the lengths of both lists are the same\n    assert len(lst1) == len(lst2)\n    \n    # Create a new list to hold the merged lists\n    newlist = []\n    \n    # While both lists are not empty\n    while len(lst1)!= 0 and le"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # iterate over the list\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    flag=False\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i]==test_list[j]:\n                flag=True\n                break\n        if(flag):\n            break\n    if(flag):\n        print(\"List contains duplicates\")\n    else:\n        print(\"List does not contain duplicates\")\n    return\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #print(len(test_list))\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and i!= j:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > 1:\n        seen = set()\n        return all(x not in seen and not seen.add(x) for x in test_list)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    if test_list == sorted(test_list):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = []\n    if len(test_list) == 0:\n        return False\n    for i in test_list:\n        if i in temp_list:\n            return False\n        else:\n            temp_list.append(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    # Return the True if the length of list is 1 and it has unique elements. \n    # Else, return False.\n    return len(test_list) == 1 and len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n        \ndef reverse_string(test_str):\n    '''\n    Write a python function to reverse a string using recursion.\n    '''\n    if len(test_str) == 0:\n        return test_str\n    else:\n        return reverse_string(test_str[1:]) + test_str[0]\n        \ndef find_unique_words(test_list):\n    '''\n    Write a python function to check if the words in a given sentence are unique or not.\n    '''\n    test_list.sort()\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n        \ndef get_input(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    test_str = input('Enter the string:')\n    return test_str\n    \ndef factorial(num):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * factorial(num-1)\n    \ndef get_input_factorial(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter the number:')\n        return int(test_str)\n    except ValueError:\n        return get_input_factorial(test_str)\n    \ndef sum_of_list(test_list):\n    '''\n    Write a python function to sum the elements of a given list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        return test_list[0] + sum_of_list(test_list[1:])\n    \ndef get_input_sum_of_list(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter the list elements:')\n        return test_str.split(',')\n    except ValueError:\n        return get_input_sum_of_list(test_str)\n        \ndef convert_seconds(test_str):\n    '''\n    Write a python function to convert time from days, hours, minutes, seconds into hours, minutes, and seconds.\n    '''\n    if len(test_str) == 0:\n        return (0,0,0)\n    else:\n        list_of_num = test_str.split(':')\n        seconds = int(list_of_num[2]) * 3600 + int(list_of_num[1]) * 60 + int(list_of_num[0])\n        return (seconds//3600, seconds//60, seconds%60)\n    \ndef get_input_convert_seconds(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter time in format: x:y:z')\n        return test_str\n    except ValueError:\n        return get_input_convert_seconds(test_str)\n        \ndef string_to_number(test_str):\n    '''\n    Write a python function to convert a string to number.\n    '''\n    if len(test_str) == 0:\n        return 0\n    else:\n        return int(test_str)\n    \ndef get_input_string_to_number(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter the number:')\n        return test_str\n    except ValueError:\n        return get_input_string_to_number(test_str)\n        \ndef reverse_word_order(test_str):\n    '''\n    Write a python function to reverse the order of a given sentence.\n    '''\n    test_str = test_str.split(' ')\n    if len(test_str) == 0:\n        return 'Empty string'\n    else:\n        test_str.reverse()\n        return''.join(test_str)\n    \ndef get_input_reverse_word_order(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter the string:')\n        return test_str\n    except ValueError:\n        return get_input_reverse_word_order(test_str)\n        \ndef convert_date_to_days(test_str):\n    '''\n    Write a python function to convert date from dd/mm/yyyy to days.\n    '''\n    test_str = test_str.split('/')\n    if len(test_str) == 3:\n        if int(test_str[0]) < 31:\n            return int(test_str[0]) * 365\n        else:\n            return int(test_str[0]) * 365 + int(test_str[1]) * 30\n    else:\n        return 0\n    \ndef get_input_convert_date_to_days(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter the date:')\n        return test_str\n    except ValueError:\n        return get_input_convert_date_to_days(test_str)\n        \ndef find_unique_numbers(test_list):\n    '''\n    Write a python function to find the unique elements of a given list.\n    '''\n    test_list.sort()\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n        \ndef get_input_unique_numbers(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter the numbers:')\n        return test_str\n    except ValueError:\n        return get_input_unique_numbers(test_str)\n        \ndef sum_of_even_numbers(test_list):\n    '''\n    Write a python function to sum the even elements of a given list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        if test_list[0] % 2 == 0:\n            return test_list[0] + sum_of_even_numbers(test_list[1:])\n        else:\n            return sum_of_even_numbers(test_list[1:])\n            \ndef get_input_sum_of_even_numbers(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter the numbers:')\n        return test_str\n    except ValueError:\n        return get_input_sum_of_even_numbers(test_str)\n        \ndef count_odd_even(test_list):\n    '''\n    Write a python function to count the number of odd and even numbers from a given list.\n    '''\n    if len(test_list) == 0:\n        return (0,0)\n    else:\n        if test_list[0] % 2 == 0:\n            return (count_odd_even(test_list[1:])[0] + 1, count_odd_even(test_list[1:])[1])\n        else:\n            return (count_odd_even(test_list[1:])[0], count_odd_even(test_list[1:])[1] + 1)\n    \ndef get_input_count_odd_even(test_str):\n    '''\n    Write a python function to get the input from console.\n    '''\n    try:\n        test_str = input('Enter the numbers:')\n        return test_str\n    except ValueError:\n        return get_input_count_odd_even(test_str)\n        \ndef get_string_length(test_str):\n    '''\n    Write a python function to get the length of a string.\n    '''\n    if len(tes"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    if len(nums1) == len(nums2):\n        for i in range(0,len(nums1)):\n            new_list.append(nums1[i]-nums2[i])\n    else:\n        return \"The length of the lists are not equal\"\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #create new list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    diffs = []\n    nums1.sort()\n    nums2.sort()\n    len1 = len(nums1)\n    len2 = len(nums2)\n    if len1 == len2:\n        for i in range(len1):\n            if nums1[i] == nums2[i]:\n                continue\n            else:\n                diffs.append(nums1[i] - nums2[i])\n        return diffs\n    else:\n        return \"list length must be the same\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums_len = len(nums1)\n    for i in range(nums_len):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y, nums1, nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    x = nums1[:]\n    y = nums2[:]\n    \n    for i in range(len(x)):\n        x[i] -= y[i]\n    return x\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        for i in range(len(nums2)-len(nums1)):\n            nums1.append(0)\n    else:\n        for i in range(len(nums1)-len(nums2)):\n            nums2.append(0)\n    nums1 = list(map(int,nums1))\n    nums2 = list(map(int,nums2))\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #code here\n    n = str(n)\n    freq = {}\n    for i in n:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    for i in range(len(n)):\n        if freq[n[i]] > i+1:\n            return False\n    return True\n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import re\n    \n    if n==0:\n        return True\n    elif n<0:\n        return False\n    else:\n        count=0\n        while(n!=0):\n            d=n%10\n            if d>=1 and d<=9:\n                count=count+1\n            n=n//10\n        return count<=1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = {}\n    while n:\n        digits[n%10] = digits.get(n%10, 0) + 1\n        n = n//10\n    for i in digits:\n        if digits[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) is not int:\n        raise TypeError(\"This is not an integer\")\n    if n <= 0:\n        raise ValueError(\"This is not an integer\")\n    if n >= 1:\n        for i in str(n):\n            if int(i) > n:\n                return False\n        return True\n        \n        \n        \n        \ndef max_square_size(matrix):\n    '''\n    Write a python function takes in a matrix of integers. If the sum of the integers in the row is greater than the row then return the row else return the row otherwise return the column.\n    '''\n    if type(matrix) is not list:\n        raise TypeError(\"This is not a list\")\n    if any(type(x) is not int for x in matrix):\n        raise TypeError(\"This is not an integer\")\n    for x in matrix:\n        if any(type(y) is not int for y in x):\n            raise TypeError(\"This is not an integer\")\n    if any(len(x)!= len(matrix[0]) for x in matrix):\n        raise ValueError(\"This is not a square matrix\")\n    if any(x > y for x in matrix for y in matrix):\n        return max(map(max,matrix))\n    else:\n        return max(x for row in matrix for x in row)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    number = str(n)\n    freq = {}\n    for i in number:\n        if i in freq:\n            freq[i] = freq[i] + 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    while n > 0:\n        freq[n % 10] = freq.get(n % 10, 0) + 1\n        n //= 10\n    return all([x <= y for x, y in freq.items()])\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (type(n) == int) and (n > 0):\n        s = str(n)\n        for i in range(len(s)):\n            if (int(s[i]) > int(s[i])):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n>0:\n        count+=1\n        n=n//10\n    return count<=1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n==0:\n        return True\n    if n<0:\n        return False\n    d = {}\n    while n>0:\n        r = n%10\n        d[r] = d.get(r,0)+1\n        n = n//10\n    for i in range(0,9):\n        if d[i]>=i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    digit_freq = {}\n    for i in n:\n        if i not in digit_freq:\n            digit_freq[i] = 1\n        else:\n            digit_freq[i] += 1\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    list_equal = []\n    for i in list:\n        if i == element:\n            list_equal.append(i)\n    if len(list_equal) == len(list):\n        print(\"Elements in the list are equal to the given element\")\n    else:\n        print(\"Elements in the list are not equal to the given element\")\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    print('Checking if list contains {}'.format(element))\n    for i in list:\n        if i == element:\n            print('{} matches to {}'.format(i,element))\n    else:\n        print('{} does not match to {}'.format(i,element))\n    print()\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    list_is_equal = element in list\n    return list_is_equal\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element) == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_text = re.findall(r'\\ba\\bb\\b', text)\n    return bool(match_text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 5:\n        return False\n    if re.search(r'ab+', text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('a.b', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return len(re.findall(r'a.{2,3}b', text)) > 0\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    test = re.search(r\"ab*\", text)\n    if test:\n        print(test)\n        print(\"Found a match!\")\n    else:\n        print(\"Not found.\")\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    for i in text:\n        if i == 'a':\n            if len(text) >= 3 and text[-1] == 'b' and text[-2] == 'b':\n                return 'True'\n            elif len(text) >= 3 and text[-1] == 'b' and text[-2]!= 'b':\n                return 'True'\n            elif len(text) >= 2 and text[-1] == 'b' and text[-2]!= 'b':\n                return 'True'\n            else:\n                return 'False'\n        else:\n            return 'False'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #function should return True or False\n    match = re.findall('a.b.b', text)\n    return match\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'[ab]b'\n    match = re.search(pattern, text)\n    print(match.group())\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('b') == 0:\n        return False\n    else:\n        if text.count('b') == 1 and text.find('ab')!= -1:\n            return True\n        else:\n            if text.count('b') == 2 and text.find('ab')!= -1 and text.find('ba')!= -1:\n                return True\n            else:\n                if text.count('b') == 3 and text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('ba')!= -1:\n                    return True\n                else:\n                    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    print(text[0:3])\n    if text[0:3]=='aab':\n        return True\n    else:\n        return False\n    \ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    print(text[0:4])\n    if text[0:4]=='aaabbb':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # getting length of the array\n    N = len(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 0\n    sum = 0\n    max_sum = 0\n    while i<n:\n        if k<=i:\n            break\n        sum = a[i]+sum\n        if sum > max_sum:\n            max_sum = sum\n        i += 1\n    if i!=n:\n        if max_sum == 0:\n            return max(a)\n        return max_sum\n    else:\n        return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1000000001\n    sub_array_sum = 0\n    for i in range(n):\n        sub_array_sum += a[i]\n        if sub_array_sum < 0:\n            sub_array_sum = 0\n        elif sub_array_sum == k:\n            max_sum = max(max_sum, sub_array_sum)\n            sub_array_sum = 0\n    if max_sum!= -1000000001:\n        return max_sum\n    else:\n        return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = float('-inf')\n    for i in range(n): \n        \n        temp_sum = 0\n        for j in range(i, n + i, k):\n            temp_sum += a[j]\n            max_sum = max(max_sum, temp_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0 or n == k:\n        return 0\n    if k == 1:\n        return max(a)\n    \n    for i in range(k,n+1):\n        sum1 = max_sub_array_sum_repeated(a, i-1, k) + a[i-1]\n        sum2 = max_sub_array_sum_repeated(a, n, k-1)\n        \n        if sum1 > sum2:\n            return sum1\n        \n        if sum1 < sum2:\n            return sum2\n        \ndef max_sub_array_sum(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return max(a[0], a[1])\n    \n    return max(max_sub_array_sum(a, n-1), max_sub_array_sum(a, n-2)) + a[n-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    start, end = 0, 0\n    lst = []\n    while end<n:\n        lst.append(a[end])\n        if max_sum < sum(lst):\n            max_sum = sum(lst)\n            start = end\n        end += k\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float(\"-inf\")\n    for i in range(0, n - k + 1):\n        curr_sum = 0\n        for j in range(0, k):\n            curr_sum += a[i + j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    n = len(a)\n    k = k % n\n    i = 0\n    while(i < n):\n        curr_sum += a[i]\n        if(curr_sum >= k):\n            max_sum = max(max_sum, curr_sum)\n        i += 1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # O(n)\n    if n == 0 or k == 0:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    sum = 0\n    k_size = k\n    a = a[:n]\n    for i in range(n):\n        sum += a[i]\n        if sum == k_size:\n            max_sum = max(max_sum, sum)\n            sum -= a[i]\n            k_size = k_size + k_size\n        elif sum > max_sum:\n            max_sum = sum\n            k_size = k_size + k_size\n        else:\n            sum = sum - a[i]\n    return max_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += i ** 2\n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # your code here\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**2)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0;\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum = sum + i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**2\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(n):\n        sum_squares += i * i\n    return sum_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #code here\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            result += i**2\n    return result"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (sum(i**2 for i in range(1,n+1) if i%2==0))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_numbers = []\n    sum = 0\n    for i in range(n):\n        square_numbers.append(i*i)\n    for j in square_numbers:\n        if j % 2 == 0:\n            sum = sum + j\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i%2 == 0:\n            sum += (i**2)\n        i+=1\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for each in list1:\n        if len(each) > max_length:\n            max_length = len(each)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for item in list1:\n        if len(item) > max:\n            max = len(item)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(len(max(list1, key=len)) for list1 in list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1)==0:\n        print(\"No Elements!\")\n    else:\n        max_length_of_list=len(list1[0])\n        for i in list1:\n            if len(i)>max_length_of_list:\n                max_length_of_list=len(i)\n        print(\"Maximum Length Of The List : \",max_length_of_list)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return None\n    max_length = max([len(i) for i in list1])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = -1\n    for ele in list1:\n        if max_len < len(ele):\n            max_len = len(ele)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    max_len_list = []\n    for i in range(len(list1)):\n        max_len_list.append(len(list1[i]))\n    max_len = max(max_len_list)\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n < 2: \n        return 1\n    \n    if n == 2: \n        return 2\n    \n    if k == 0: \n        return 1\n    \n    if k == 1: \n        return 2\n    \n    if k > 1: \n        return count_no_of_ways(n - 1, k - 1) + count_no_of_ways(n - 1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case \n    if n==0 or k==0: \n        return 0\n    # Recursive case \n    if k>0: \n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k) \n    return count_no_of_ways(n-1, k) \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # =============================================================\n    # 1) Brute Force - 32ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # ans = 0\n    # for i in range(1, N - k + 2):\n    #     cnt = 1\n    #     for j in range(i, i + k):\n    #         if colors[j]!= colors[j + 1]:\n    #             cnt += 1\n    #     ans = max(ans, cnt)\n    # return ans\n    # \n    # 2) Dynamic Programming - 32ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # ans = [[0] * N for _ in range(k)]\n    # ans[0][0] = 1\n    # \n    # for i in range(1, k):\n    #     for j in range(N - i):\n    #         if colors[j]!= colors[j + 1]:\n    #             ans[i][j] = ans[i][j + 1] + 1\n    # \n    # for i in range(k):\n    #     for j in range(N - i):\n    #         ans[i][j + 1] += ans[i][j]\n    # \n    # return ans[k - 1][0]\n    # =============================================================\n    \n    # =============================================================\n    # 3) Greedy - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # ans = 1\n    # for i in range(1, k):\n    #     ans *= N - i + 1\n    #     ans %= (10 ** 9 + 7)\n    # return ans\n    # =============================================================\n    \n    # =============================================================\n    # 4) Dynamic Programming - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # dp = [[0] * N for _ in range(k)]\n    # \n    # for i in range(1, k):\n    #     dp[i][0] = 1\n    # \n    # for i in range(1, k):\n    #     for j in range(1, N - i + 1):\n    #         if colors[j]!= colors[j + 1]:\n    #             dp[i][j] = dp[i][j - 1] + 1\n    # \n    # for i in range(k):\n    #     for j in range(N - i + 1):\n    #         dp[i][j + 1] += dp[i][j]\n    # \n    # return dp[k - 1][0]\n    # =============================================================\n    \n    # =============================================================\n    # 5) DP with Dictionary - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # dp = dict()\n    # \n    # for i in range(1, k):\n    #     dp[i] = 1\n    # \n    # for i in range(1, k):\n    #     for j in range(1, N - i + 1):\n    #         if colors[j]!= colors[j + 1]:\n    #             dp[i] = dp[i] + dp[i - 1]\n    # \n    # return dp[k - 1]\n    # =============================================================\n    \n    # =============================================================\n    # 6) DP with Heap - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # dp = [0] * N\n    # \n    # for i in range(1, k):\n    #     dp[0] = 1\n    # \n    # for i in range(1, k):\n    #     for j in range(1, N - i + 1):\n    #         if colors[j]!= colors[j + 1]:\n    #             dp[j] = max(dp[j], dp[j - 1] + 1)\n    # \n    # return dp[N - 1]\n    # =============================================================\n    \n    # =============================================================\n    # 7) DP with Bitmask - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # dp = [0] * (1 << N)\n    # \n    # for i in range(1, k):\n    #     dp = update(dp, i, 0)\n    # \n    # for i in range(1, N - k + 1):\n    #     dp = update(dp, i, 1 << i)\n    # \n    # return dp[-1]\n    # =============================================================\n    \n    # =============================================================\n    # 8) DP with Bitmask + Bitmask - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # dp = [0] * (1 << N)\n    # \n    # for i in range(1, k):\n    #     dp = update(dp, i, 0)\n    # \n    # for i in range(1, N - k + 1):\n    #     dp = update(dp, i, 1 << i)\n    # \n    # return dp[-1]\n    # =============================================================\n    \n    # =============================================================\n    # 9) DP with Bitmask + Longest Common Subsequence - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # dp = [[0] * N for _ in range(N)]\n    # \n    # for i in range(1, k):\n    #     dp[0][0] = 1\n    # \n    # for i in range(1, k):\n    #     for j in range(1, N - i + 1):\n    #         if colors[j]!= colors[j + 1]:\n    #             dp[j][j + 1] = dp[j][j] + 1\n    # \n    # for i in range(k, N):\n    #     for j in range(i):\n    #         dp[i][j + 1] = max(dp[i][j] + 1, dp[i][j + 1])\n    # \n    # return dp[N - 1][N - 1]\n    # =============================================================\n    \n    # =============================================================\n    # 10) DP with Bitmask + Longest Common Subsequence + DP - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # dp = [[0] * N for _ in range(1 << N)]\n    # \n    # for i in range(1, k):\n    #     dp = update(dp, i, 0)\n    # \n    # for i in range(1, N - k + 1):\n    #     dp = update(dp, i, 1 << i)\n    # \n    # return dp[-1][-1]\n    # =============================================================\n    \n    # =============================================================\n    # 11) DP with Bitmask + Longest Common Subsequence + DP + DP - 20ms\n    # \n    # N = len(colors)\n    # if N < k: return 0\n    # \n    # dp = [[0] * N for _ in range(1 << N)]\n    # \n    # for i in range(1, k):\n    #     dp = update(dp, i, 0)\n    # \n    # for i in range(1, N - k + 1):\n    #     dp = update(dp, i, 1 << i)\n    # \n    # dp = [[0] * N for _ in range(1 << N)]\n    # \n    # for i in range(1, N):\n    #     dp = update(dp, i, 1 << i)\n    # \n    # return dp[-1][-1]\n    # =============================================================\n    \n    # =============================================================\n    # 12) Dynamic Programming + DP "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0] * (k+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                ways[i][j] = 1\n            elif j == 2:\n                ways[i][j] = 2\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n    return ways[-1][-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1, k+1):\n        dp[1][i] = 1\n    \n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            for k in range(1, j+1):\n                dp[i][j] += dp[i-1][k-1]\n                dp[i][j] += dp[i-1][j]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0 or k==0:\n        return 0\n    if k==1:\n        return n\n    if k==2:\n        return 2*n-2\n    dp = [[0] * k for _ in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = n\n    dp[0][2] = n*(n-1)\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] - dp[i-1][j-1]\n    return dp[n-1][k-1]\n    \n    \n    \n    "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def _count_no_of_ways(n, k, rem_c): \n        if n < 0 or k < 0: \n            return 0\n        elif n == 0 and k == 0: \n            return 1\n        elif k == 0: \n            return 0\n        elif rem_c == 0: \n            return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1 and k == 1:\n        return 1\n    if k == 1:\n        return n\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Return the number of ways\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If the number of colors in the fence is less than k, return 0\n    if n < k:\n        return 0\n    # If the number of colors in the fence is equal to k, return 1\n    if n == k:\n        return 1\n    \n    # Store the color combinations in a 2d array (n+1) x (k+1) matrix\n    p = [[0 for x in range(k+1)] for x in range(n+1)]\n    \n    # Initalize the first row and first column\n    for i in range(n+1):\n        p[i][0] = 1\n    for j in range(k+1):\n        p[0][j] = 1\n        \n    # Fill the rest of the rows and columns\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the color is the same, the number of ways is the sum of the number of ways of painting the adjacent posts with different colors.\n            if i!= j:\n                p[i][j] = p[i-1][j] + p[i-1][j-1]\n            # If the color is not the same, then only the last row and last column are the same.\n            else:\n                p[i][j] = p[i-1][j]\n                \n    # Return the number of ways of painting the fence\n    return p[n][k]\n    \n    \nprint(count_no_of_ways(3, 2))\nprint(count_no_of_ways(7, 3))\nprint(count_no_of_ways(5, 1))\nprint(count_no_of_ways(8, 1))\nprint(count_no_of_ways(8, 2))"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n    \ndef test_find():\n    assert(find(4,2) == 2)\n    assert(find(9,3) == 3)\n    assert(find(3,2) == 1)\n    assert(find(7,2) == 1)\n    assert(find(8,2) == 1)\n    assert(find(8.5,2) == 2)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return math.floor(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n==0):\n        return 0\n    if(n>0 and m<0):\n        return -find(n, -m)\n    if(n>0 and m>0):\n        return find(n, m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # number = int(input(\"Enter the number : \"))\n    # divisor = int(input(\"Enter the divisor : \"))\n    # result = number / divisor\n    # print(result)\n    # number = int(input(\"Enter the number : \"))\n    # divisor = int(input(\"Enter the divisor : \"))\n    # result = number // divisor\n    # print(result)\n    # number = int(input(\"Enter the number : \"))\n    # divisor = int(input(\"Enter the divisor : \"))\n    # result = number % divisor\n    # print(result)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n    # print(\"quotient of n and m\",n//m)\n    # return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    if n%m==0:\n        return q\n    return q+1\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w*w) + (h*h))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2)-(w**2)*(h**2)+(h**2)*(w**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s=math.sqrt(w**2 + h**2)\n    s=round(s)\n    return s\ndef otherside_rightcircle(r):\n    '''\n    Write a function to find the third side of a right circle.\n    '''\n    s=r**2*math.pi\n    s=round(s)\n    return s\ndef otherside_righttriangle(a,b):\n    '''\n    Write a function to find the third side of a right triangle.\n    '''\n    s=a*b/2\n    s=round(s)\n    return s\ndef otherside_rightr(r,h):\n    '''\n    Write a function to find the third side of a right rectangularangle.\n    '''\n    s=r*h\n    s=round(s)\n    return s\ndef otherside_rightrhombus(a,b):\n    '''\n    Write a function to find the third side of a right rhombus.\n    '''\n    s=(a**2+b**2)**0.5\n    s=round(s)\n    return s\ndef otherside_rightkite(a,h):\n    '''\n    Write a function to find the third side of a right kite.\n    '''\n    s=2*a*h\n    s=round(s)\n    return s\ndef otherside_rightparallelogram(a,b):\n    '''\n    Write a function to find the third side of a right parallelogram.\n    '''\n    s=2*a*b\n    s=round(s)\n    return s\ndef otherside_righthyperbolic(r):\n    '''\n    Write a function to find the third side of a right hyperbolic triangle.\n    '''\n    s=math.pi*r**2\n    s=round(s)\n    return s\ndef otherside_righttrapezium(a,b):\n    '''\n    Write a function to find the third side of a right trapezium.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttangent(a,b):\n    '''\n    Write a function to find the third side of a right tangent.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_rightparabola(a,h):\n    '''\n    Write a function to find the third side of a right parabola.\n    '''\n    s=a*h\n    s=round(s)\n    return s\ndef otherside_rightparabolasquare(a,h):\n    '''\n    Write a function to find the third side of a right parabolasquare.\n    '''\n    s=a*h\n    s=round(s)\n    return s\ndef otherside_rightscattereright(a,b):\n    '''\n    Write a function to find the third side of a right scattereright.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_rightscattererightd(a,b):\n    '''\n    Write a function to find the third side of a right scattererightd.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_rightscattererighthorizontal(a,b):\n    '''\n    Write a function to find the third side of a right scattererighthorizontal.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_rightscattererightvertical(a,b):\n    '''\n    Write a function to find the third side of a right scattererightvertical.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_rightsquare(a,h):\n    '''\n    Write a function to find the third side of a right square.\n    '''\n    s=a*h\n    s=round(s)\n    return s\ndef otherside_rightsquaresquare(a,h):\n    '''\n    Write a function to find the third side of a right squaresquare.\n    '''\n    s=a*h\n    s=round(s)\n    return s\ndef otherside_righttrianglebottom(a,b):\n    '''\n    Write a function to find the third side of a right trianglebottom.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_righttriangleright(a,b):\n    '''\n    Write a function to find the third side of a right triangleright.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_righttrianglebottomright(a,b):\n    '''\n    Write a function to find the third side of a right trianglebottomright.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_righttrianglebottomleft(a,b):\n    '''\n    Write a function to find the third side of a right trianglebottomleft.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_righttriangleleft(a,b):\n    '''\n    Write a function to find the third side of a right triangleleft.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_righttrianglebottomleft(a,b):\n    '''\n    Write a function to find the third side of a right trianglebottomleft.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumbottom(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumbottom.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumtop(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumtop.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumleft(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumleft.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumright(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumright.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumlower(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumlower.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttriangleupper(a,b):\n    '''\n    Write a function to find the third side of a right triangleupper.\n    '''\n    s=a*b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumlower(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumlower.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumupper(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumupper.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumupperlower(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumupperlower.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumupperleft(a,b):\n    '''\n    Write a function to find the third side of a right trapeziumupperleft.\n    '''\n    s=a+b\n    s=round(s)\n    return s\ndef otherside_righttrapeziumlowerleft(a,b):\n    ''"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2) - w\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    return (a*a) + (b*b) - (a*b)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(h**2 + w**2)\n    b = math.sqrt(w**2 + h**2)\n    return a + b\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w = float(w)\n    h = float(h)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(f\"Third side of Right angled triangle is: {math.sqrt(w**2+h**2)}\")\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(math.pow(h, 2) - math.pow(w, 2))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_item = listval[0]\n    for item in listval:\n        if item > max_item:\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in range(len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in listval:\n        if i > val:\n            val = i\n    return val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1,len(listval)):\n        if max_value < listval[i]:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    res = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > res:\n            res = listval[i]\n    return res\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxi = 0\n    for i in listval:\n        if maxi < i:\n            maxi = i\n    return maxi\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    \n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    \n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 1\n    for i in range(1, number):\n        if number % i == 0:\n            result += i\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div += i\n    return div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 0:\n        return None\n    return sum(\n        [i for i in range(1, number) if number % i == 0]\n    )\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(range(1, number + 1))\n    \nsum_div(1)  # Should be 1\nsum_div(10) # Should be 2\nsum_div(100) # Should be 50\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                inversion += 1\n    print(inversion)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base Case\n    if len(arr)==1:\n        return 0\n    \n    else:\n        # Consider first element as pivot\n        pivot = arr[0]\n        # Create two sub array arr1 and arr2 based on this pivot\n        arr1 = arr[1:]\n        arr2 = arr[1:]\n        \n        # Sort the sub array arr1, and store the result in arr1\n        arr1 = mergeSort(arr1)\n        \n        # Sort the sub array arr2, and store the result in arr2\n        arr2 = mergeSort(arr2)\n        \n        # Compare the elements between arr1 and arr2\n        count = merge(arr1, arr2)\n        return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)): \n        for j in range(0, len(arr)): \n            if (arr[i] > arr[j] and i < j): \n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res=0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort(arr, left, right): \n        if left < right: \n            p = partition(arr, left, right) \n            sort(arr, left, p-1) \n            sort(arr, p+1, right) \n    def partition(arr, left, right): \n        inv_count = 0\n        i = (left - 1) \n        pivot = arr[right] \n        for j in range(left, right): \n            if arr[j] < pivot: \n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + (right - j) \n        arr[i+1], arr[right] = arr[right], arr[i+1] \n        return (i+1) \n    sort(arr, 0, len(arr)-1) \n    return inv_count \ndef get_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort(arr, left, right): \n        if left < right: \n            p = partition(arr, left, right) \n            sort(arr, left, p-1) \n            sort(arr, p+1, right) \n    def partition(arr, left, right): \n        inv_count = 0\n        i = (left - 1) \n        pivot = arr[right] \n        for j in range(left, right): \n            if arr[j] < pivot: \n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + (right - j) \n        arr[i+1], arr[right] = arr[right], arr[i+1] \n        return (i+1) \n    sort(arr, 0, len(arr)-1) \n    return inv_count \ndef get_Count_v1(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort(arr, left, right): \n        if left < right: \n            p = partition_v1(arr, left, right) \n            sort(arr, left, p-1) \n            sort(arr, p+1, right) \n    def partition_v1(arr, left, right): \n        inv_count = 0\n        i = (left - 1) \n        pivot = arr[right] \n        for j in range(left, right): \n            if arr[j] < pivot: \n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + (right - j) \n        arr[i+1], arr[right] = arr[right], arr[i+1] \n        return (i+1) \n    sort(arr, 0, len(arr)-1) \n    return inv_count \ndef get_Count_v2(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort(arr, left, right): \n        if left < right: \n            p = partition_v2(arr, left, right) \n            sort(arr, left, p-1) \n            sort(arr, p+1, right) \n    def partition_v2(arr, left, right): \n        inv_count = 0\n        i = (left - 1) \n        pivot = arr[right] \n        for j in range(left, right): \n            if arr[j] < pivot: \n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + (right - j) \n        arr[i+1], arr[right] = arr[right], arr[i+1] \n        return (i+1) \n    sort(arr, 0, len(arr)-1) \n    return inv_count \ndef get_Count_v3(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort(arr, left, right): \n        if left < right: \n            p = partition_v3(arr, left, right) \n            sort(arr, left, p-1) \n            sort(arr, p+1, right) \n    def partition_v3(arr, left, right): \n        inv_count = 0\n        i = (left - 1) \n        pivot = arr[right] \n        for j in range(left, right): \n            if arr[j] < pivot: \n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + (right - j) \n        arr[i+1], arr[right] = arr[right], arr[i+1] \n        return (i+1) \n    sort(arr, 0, len(arr)-1) \n    return inv_count \ndef get_Count_v4(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort(arr, left, right): \n        if left < right: \n            p = partition_v4(arr, left, right) \n            sort(arr, left, p-1) \n            sort(arr, p+1, right) \n    def partition_v4(arr, left, right): \n        inv_count = 0\n        i = (left - 1) \n        pivot = arr[right] \n        for j in range(left, right): \n            if arr[j] < pivot: \n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + (right - j) \n        arr[i+1], arr[right] = arr[right], arr[i+1] \n        return (i+1) \n    sort(arr, 0, len(arr)-1) \n    return inv_count \ndef get_Count_v5(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort(arr, left, right): \n        if left < right: \n            p = partition_v5(arr, left, right) \n            sort(arr, left, p-1) \n            sort(arr, p+1, right) \n    def partition_v5(arr, left, right): \n        inv_count = 0\n        i = (left - 1) \n        pivot = arr[right] \n        for j in range(left, right): \n            if arr[j] < pivot: \n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + (right - j) \n        arr[i+1], arr[right] = arr[right], arr[i+1] \n        return (i+1) \n    sort(arr, 0, len(arr)-1) \n    return inv_count \ndef get_Count_v6(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort(arr, left, right): \n        if left < right: \n            p = partition_v6(arr, left, right) \n            sort(arr, left, p-1) \n            sort(arr, p+1, right) \n    def partition_v6(arr, left, right): \n        inv_count = 0\n        i = (left - 1) \n        pivot = arr[right] \n        for j in range(left, right): \n            if arr[j] < pivot: \n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + (right - j) \n        arr[i+1], arr[right] = arr[right], arr[i+1] \n        return (i+1) \n    sort(arr, 0, len(arr)-1) \n    return inv_count \ndef get_Count_v"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n    # else:\n    #     inv = 0\n    #     for i in range(0, len(arr)):\n    #         for j in range(i+1, len(arr)):\n    #             if arr[j] > arr[i]:\n    #                 inv += 1\n    #     return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(left, right): \n        result = [] \n        i, j = 0, 0\n        while i < len(left) and j < len(right): \n            if left[i] <= right[j]: \n                result.append(left[i]) \n                i += 1\n            else: \n                result.append(right[j]) \n                j += 1\n        while i < len(left): \n            result.append(left[i])\n            i += 1\n        while j < len(right): \n            result.append(right[j])\n            j += 1\n        return result \n    \n    def mergeSort(arr): \n        if len(arr) > 1: \n            mid = len(arr) // 2 \n            left = arr[:mid] \n            right = arr[mid:] \n            mergeSort(left) \n            mergeSort(right) \n            merge(left, right) \n    \n    mergeSort(arr) \n    return arr \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def count(arr,l,h):\n        if l > h:\n            return 0\n        m = (l+h)//2\n        cnt = count(arr, l, m) + count(arr, m+1, h)\n        i,j = m,m+1\n        tmp = 0\n        while i<=h and j<=h:\n            if arr[i]>arr[j]:\n                tmp += j-i\n                j += 1\n            else:\n                i += 1\n        return cnt+tmp\n    return count(arr,0,len(arr)-1)\n    \ndef get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def count(arr,l,h):\n        if l > h:\n            return 0\n        m = (l+h)//2\n        cnt = count(arr, l, m) + count(arr, m+1, h)\n        i,j = m,m+1\n        tmp = 0\n        while i<=h and j<=h:\n            if arr[i]>arr[j]:\n                tmp += j-i\n                j += 1\n            else:\n                i += 1\n        return cnt+tmp\n    return count(arr,0,len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return 0\n    if len(arr)==2:\n        return 0 if arr[0]<arr[1] else 1\n    count = 0\n    #print(arr)\n    for i in range(0, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count = count+1\n    return count+get_Inv_Count(arr[:len(arr)-count])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain.from_iterable(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return [*flatten_list(list1[0]), *flatten_list(list1[1:])]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Your Code here\n    result_list = []\n    for lst in list1:\n        if type(lst) == list:\n            result_list += flatten_list(lst)\n        else:\n            result_list.append(lst)\n    return result_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) == list:\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened += flatten_list(sublist)\n        else:\n            flattened.append(sublist)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    elif type(list1[0]) == int:\n        return [list1[0]] + flatten_list(list1[1:])\n    else:\n        list1 = list(map(flatten_list,list1))\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Invalid input, not a nested list')\n    if not list1:\n        return list1\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # TODO: Write your solution here\n    max_ = 0\n    for i in stdata:\n        if max_ < i[1]:\n            max_ = i[1]\n    return max_\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # print(stdata)\n    max_values = defaultdict(int)\n    for i in range(len(stdata)):\n        if stdata[i][0] in max_values.keys():\n            max_values[stdata[i][0]] += stdata[i][1]\n        else:\n            max_values[stdata[i][0]] = stdata[i][1]\n    return max_values\n    # print(max_values)\n    # return max(max_values.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # max_agg = None\n    # max_agg_sum = -1\n    # for i in range(len(stdata)):\n    #     agg_val = stdata[i][0]\n    #     agg_sum = stdata[i][1]\n    #     if agg_val > max_agg_sum:\n    #         max_agg = agg_val\n    #         max_agg_sum = agg_sum\n    # return max_agg,max_agg_sum\n    \n    max_agg = None\n    agg_sum = None\n    for t in stdata:\n        if not max_agg or max_agg < t[0]:\n            max_agg = t[0]\n            agg_sum = t[1]\n        elif max_agg and max_agg < t[0] and agg_sum < t[1]:\n            max_agg = t[0]\n            agg_sum = t[1]\n    return max_agg,agg_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    all_aggregate = {}\n    max_value = 0\n    for items in stdata:\n        all_aggregate[items[0]] = items[1]\n        if items[1] > max_value:\n            max_value = items[1]\n    return max_value, all_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    values = defaultdict(lambda:0)\n    for t in stdata:\n        values[t[0]] += t[1]\n    return max(values.keys(), key=(lambda k: values[k]))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n_max_aggregate = max([max(t) for t in stdata])\n    #print(f\"The maximum aggregate is {n_max_aggregate}\")\n    return n_max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for ele in stdata:\n        max_val = max(max_val, ele[1])\n    return max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    max_val = defaultdict(int)\n    for d in stdata:\n        for x in d[1]:\n            max_val[x] = max(max_val[x],d[0])\n    return max(max_val.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Your code here\n    final_list=[]\n    for i in range(len(stdata)):\n        final_list.append(stdata[i][1])\n    return max(final_list)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = 0\n    d = defaultdict(int)\n    for data in stdata:\n        d[data[0]] += data[1]\n    for item in d:\n        result = max(result, d[item])\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_all_seq(n):\n        if n == 0:\n            return 0\n        return (n % 2) + count_all_seq(n//2)\n    \n    print(count_all_seq(n))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1<<(2*n)):\n        binary_string = bin(i)[2:]\n        binary_string = binary_string.zfill(2*n)\n        if binary_string[:n] == binary_string[n:2*n]:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n):\n        \n        ans = 0\n        \n        if n < 2:\n            return 1\n        \n        def binary_seq(a,b):\n            return (a & b) == 0\n        \n        def add_binary(a,b):\n            return a+b\n        \n        for i in range(2**n):\n            a = binary_seq(i,i)\n            b = add_binary(i,i)\n            \n            if a and b:\n                continue\n            \n            if a or b:\n                continue\n            \n            ans += 1\n        \n        return ans\n    \n    return count(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    i = 0\n    j = 0\n    while i < 2**n:\n        k = n\n        while k > 0:\n            if i & (1<<k) == 0:\n                k -= 1\n            else:\n                break\n        if k == 0:\n            j += 1\n        i += 1\n    print(j)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if (i + j) == (n - 1):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def helper(n, pos, sum_binary):\n        if pos == n:\n            # print(sum_binary)\n            return\n        else:\n            helper(n, pos+1, sum_binary)\n            helper(n, pos+1, sum_binary)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # we can use a recursive function to get the count of all the binary sequences of lenght n. \n    # i can make a base case of returning (1<<n) if sum of first n bits is same as sum of last n bits.\n    # we can also use a recursion.\n    def count_binary_seq(n): \n        '''\n        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        # we can use a recursive function to get the count of all the binary sequences of lenght n. \n        # i can make a base case of returning (1<<n) if sum of first n bits is same as sum of last n bits.\n        # we can also use a recursion.\n        if n == 0: \n            return 1\n        if n == 1: \n            return 2\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n        \n    def count_binary_seq_to_last_n_bit_sum(n, d): \n        '''\n        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        # we can use a recursive function to get the count of all the binary sequences of lenght n. \n        # i can make a base case of returning (1<<n) if sum of first n bits is same as sum of last n bits.\n        # we can also use a recursion.\n        if n == 0: \n            return 1\n        if d == 0: \n            return 0\n        if d == 1: \n            return 1\n        return count_binary_seq_to_last_n_bit_sum(n-1, d-1) + count_binary_seq_to_last_n_bit_sum(n-2, d-1)\n        \n        \n    def count_binary_seq_to_first_n_bit_sum(n, d): \n        '''\n        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        # we can use a recursive function to get the count of all the binary sequences of lenght n. \n        # i can make a base case of returning (1<<n) if sum of first n bits is same as sum of last n bits.\n        # we can also use a recursion.\n        if n == 0: \n            return 1\n        if d == 0: \n            return 0\n        if d == 1: \n            return 1\n        return count_binary_seq_to_first_n_bit_sum(n-1, d) + count_binary_seq_to_first_n_bit_sum(n-2, d)\n        \n    def count_binary_seq_to_first_n_bit_sum_without_base_case(n, d): \n        '''\n        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        # we can use a recursive function to get the count of all the binary sequences of lenght n. \n        # i can make a base case of returning (1<<n) if sum of first n bits is same as sum of last n bits.\n        # we can also use a recursion.\n        if d == 1: \n            return 1\n        if d == 2: \n            return 2\n        if d == 3: \n            return 3\n        if d == 4: \n            return 4\n        if d == 5: \n            return 5\n        if d == 6: \n            return 6\n        if d == 7: \n            return 7\n        if d == 8: \n            return 8\n        if d == 9: \n            return 9\n        if d == 10: \n            return 10\n        if d == 11: \n            return 11\n        if d == 12: \n            return 12\n        if d == 13: \n            return 13\n        if d == 14: \n            return 14\n        if d == 15: \n            return 15\n        if d == 16: \n            return 16\n        if d == 17: \n            return 17\n        if d == 18: \n            return 18\n        if d == 19: \n            return 19\n        if d == 20: \n            return 20\n        if d == 21: \n            return 21\n        if d == 22: \n            return 22\n        if d == 23: \n            return 23\n        if d == 24: \n            return 24\n        if d == 25: \n            return 25\n        if d == 26: \n            return 26\n        if d == 27: \n            return 27\n        if d == 28: \n            return 28\n        if d == 29: \n            return 29\n        if d == 30: \n            return 30\n        if d == 31: \n            return 31\n        if d == 32: \n            return 32\n        if d == 33: \n            return 33\n        if d == 34: \n            return 34\n        if d == 35: \n            return 35\n        if d == 36: \n            return 36\n        if d == 37: \n            return 37\n        if d == 38: \n            return 38\n        if d == 39: \n            return 39\n        if d == 40: \n            return 40\n        if d == 41: \n            return 41\n        if d == 42: \n            return 42\n        if d == 43: \n            return 43\n        if d == 44: \n            return 44\n        if d == 45: \n            return 45\n        if d == 46: \n            return 46\n        if d == 47: \n            return 47\n        if d == 48: \n            return 48\n        if d == 49: \n            return 49\n        if d == 50: \n            return 50\n        if d == 51: \n            return 51\n        if d == 52: \n            return 52\n        if d == 53: \n            return 53\n        if d == 54: \n            return 54\n        if d == 55: \n            return 55\n        if d == 56: \n            return 56\n        if d == 57: \n            return 57\n        if d == 58: \n            return 58\n        if d == 59: \n            return 59\n        if d == 60: \n            return 60\n        if d == 61: \n            return 61\n        if d == 62: \n            return 62\n        if d == 63: \n            return 63\n        if d == 64: \n            return 64\n        if d == 65: \n            return 65\n        if d == 66: \n            return 66\n        if d == 67: \n            return 67\n        if d == 68: \n            return 68\n        if d == 69: \n            return 69\n        if d == 70: \n            return 70\n        if d == 71: \n            return 71\n        if d == 72: \n            return 72\n        if d == 73: \n            return 73\n        if d == 74: \n            return 74\n        if d == 75: \n            return 75\n        if d == 76: \n            return 76\n        if d == 77: \n            return 77\n        if d == 78: \n            return 78\n        if d == 79: \n            return 79\n        if d == 80: \n            return 80\n        if d == 81: \n            return 81\n        if d == 82: \n            return 82\n        if d == 83: \n            return 83\n        if d == 84: \n            return 84\n        if d == 85: \n            return 85\n        if d == 86: \n            return 86\n        if d == 87: \n            return 87\n        if d == 88: \n            return 88\n        if d == 89: \n            return 89\n        if d == 90: \n            return 90\n        if d == 91: \n            return 91\n        if d == 92: \n            return 92\n        if d == 93: \n            return 93\n        if d == 94: \n            return 94\n        if d == 95: \n            return 95\n        if d == 96: \n            return 96\n        if d == 97: \n            return 97\n        if d == 98: \n            return 98\n        if "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seqs(n,k):\n        ans = 0\n        for i in range(k+1):\n            ans = ans + count_seq(n,i)\n        return ans\n    \n    def count_seq(n,k):\n        if k == 0:\n            return 1\n        ans = 0\n        for i in range(k):\n            ans = ans + count_seq(n-1,i)\n        return ans\n    \n    # ans = count_seq(n,k)\n    print(count_seqs(n,n))\n    \n    '''\n    Write a function that takes a string (a paragraph) and returns a list of the most frequent \n    non-overlapping sequences of English lowercase letters. \n    For example, given the following paragraph:\n       Aaabcccccaaa\n    your function should return the list\n       ['aa', 'cc', 'ca', 'a']\n    \n    NOTE: In the event of ties, always return the shortest list.\n    '''\n    \n    def most_frequent(str):\n        d = {}\n        for i in str:\n            if i in d.keys():\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n        max = 0\n        keys = []\n        for k,v in d.items():\n            if v > max:\n                max = v\n                keys = [k]\n            elif v == max:\n                keys.append(k)\n        return keys\n    \n    print(most_frequent(\"Aaabcccccaaa\"))\n    \n    '''\n    Write a function that takes a string (a paragraph) and returns a list of the most frequent \n    non-overlapping sequences of letters in the string. \n    For example, given the following paragraph:\n       Aaabcccccaaa\n    your function should return the list\n       ['aa', 'cc', 'ca', 'a']\n    \n    NOTE: In the event of ties, always return the shortest list.\n    '''\n    \n    def most_frequent_2(str):\n        d = {}\n        for i in str:\n            if i in d.keys():\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n        max = 0\n        keys = []\n        for k,v in d.items():\n            if v > max:\n                max = v\n                keys = [k]\n            elif v == max:\n                keys.append(k)\n        return keys\n    \n    print(most_frequent_2(\"Aaabcccccaaa\"))\n    \n    '''\n    Write a function that takes a string (a paragraph) and returns a list of the most frequent \n    non-overlapping sequences of letters in the string. \n    For example, given the following paragraph:\n       Aaabcccccaaa\n    your function should return the list\n       ['aa', 'cc', 'ca', 'a']\n    \n    NOTE: In the event of ties, always return the shortest list.\n    '''\n    \n    def most_frequent_3(str):\n        d = {}\n        for i in str:\n            if i in d.keys():\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n        max = 0\n        keys = []\n        for k,v in d.items():\n            if v > max:\n                max = v\n                keys = [k]\n            elif v == max:\n                keys.append(k)\n        return keys\n    \n    print(most_frequent_3(\"Aaabcccccaaa\"))\n    \n    '''\n    Write a function that takes a string (a paragraph) and returns a dictionary of all of the \n    letter counts in the string.\n    For example, given the following paragraph:\n       Aaabcccccaaa\n    your function should return the dictionary\n       {'a': 4, 'b': 2, 'c': 2, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    \n    NOTE: In the event of ties, always return the shortest list.\n    '''\n    \n    def letter_counts(str):\n        d = {}\n        for i in str:\n            if i in d.keys():\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n        max = 0\n        keys = []\n        for k,v in d.items():\n            if v > max:\n                max = v\n                keys = [k]\n            elif v == max:\n                keys.append(k)\n        return keys\n    \n    print(letter_counts(\"Aaabcccccaaa\"))\n    \n    '''\n    Write a function that takes a string (a paragraph) and returns a dictionary of all the \n    letter counts in the string.\n    For example, given the following paragraph:\n       Aaabcccccaaa\n    your function should return the dictionary\n       {'a': 4, 'b': 2, 'c': 2, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    \n    NOTE: In the event of ties, always return the shortest list.\n    '''\n    \n    def letter_counts(str):\n        d = {}\n        for i in str:\n            if i in d.keys():\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n        max = 0\n        keys = []\n        for k,v in d.items():\n            if v > max:\n                max = v\n                keys = [k]\n            elif v == max:\n                keys.append(k)\n        return keys\n    \n    print(letter_counts(\"Aaabcccccaaa\"))\n    \n    '''\n    Write a function that takes a list of integers, and returns the index of the integer \n    that is most frequent. If there are multiple most frequent integers, return the smallest \n    index.\n    For example, given the following list:\n       [1, 4, 5, 5, 4, 3, 4, 2, 4, 3, 2]\n    your function should return 3\n    \n    NOTE: In the event of ties, always return the smallest index.\n    '''\n    \n    def most_common_index(lst):\n        d = {}\n        for i in lst:\n            if i in d.keys():\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n        max = 0\n        keys = []\n        for k,v in d.items():\n            if v > max:\n                max = v\n                keys = [k]\n            elif v == max:\n                keys.append(k)\n        return keys[0]\n    \n    print(most_common_index([1, 4, 5, 5, 4, 3, 4, 2, 4, 3, 2]))\n    \n    '''\n    Write a function that takes a list of integers and returns the list of integers that are \n    repeated at least 5 times.\n    For example, given the following list:\n       [1, 2, 3, 4, 5, 4, 3, 2, 1]\n    your function should return the list\n       [1, 3, 5]\n    \n    NOTE: In the event of ties, always return the shortest list.\n    '''\n    \n    def repeat_at_least_five(lst):\n        d = {}\n        for i in ls"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(n+1):\n        for j in range(n-i):\n            if sum(range(2**i, 2**(i+j))) == sum(range(2**(n-i), 2**(n-i+j))):\n                count += 1\n    print(count)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def bin_sum(n):\n        return (1 << n) - 1\n    return bin_sum(n) - bin_sum(n-2)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    elif type(d)!= dict:\n        return 1\n    else:\n        return 1 + max([dict_depth(v) for v in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(dict_depth, d.values()))+1 if d else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return max(map(lambda x: dict_depth(x), d.keys())) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    \n    depth = 0\n    for key in d.keys():\n        depth = max(depth, dict_depth(d[key]))\n    return depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def get_depth(d, depth=0):\n        if type(d) == dict:\n            for k in d:\n                get_depth(d[k], depth+1)\n        elif type(d) == list:\n            for item in d:\n                get_depth(item, depth+1)\n        else:\n            return depth\n        return depth\n    return get_depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.values():\n        if type(i) is dict:\n            depth += 1\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dict_depth2(d):\n        if isinstance(d, dict):\n            return 1 + max(map(dict_depth2, d.values()))\n        else:\n            return 0\n    return dict_depth2(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, int):\n        return d\n    else:\n        if len(d) == 0:\n            return 0\n        return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == type({}):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,index+rotations):\n        if i >= len(arr):\n            break\n        ranges.append(arr[i])\n    return ranges\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start,end = ranges\n    if end-start >1 :\n        for i in range(len(rotations)) :\n            if rotations[i] == index :\n                start = start + (end-start)//2\n                if index == start :\n                    return start\n                elif index == end :\n                    return start + 1\n                else :\n                    return find_Element(arr,(start,end),rotations,index-1)\n    elif end-start == 1 :\n        return end if index == start else start + 1\n    else :\n        return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # if index not in ranges :\n    #     return -1\n    if index >= len(arr) :\n        return -1\n    \n    # print(\"index : \",index)\n    if index in ranges :\n        return ranges[index]\n    \n    rotations = rotations * (-1)\n    # print(\"rotations : \",rotations)\n    i = index + rotations\n    # print(\"i : \",i)\n    # print(\"index : \",index)\n    if i > len(arr) :\n        return -1\n    \n    return find_Element(arr,ranges,rotations,i)\n    \n    \n    \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index<=ranges) :\n        if(rotations%2==0) :\n            return arr[index]\n        else :\n            return arr[ranges-index]\n    else :\n        return find_Element(arr,ranges,rotations-1,index-(ranges-1))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    indx = 0\n    for x in range(ranges):\n        if indx+1 == index :\n            return arr[x]\n        indx += rotations\n    return arr[indx]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index) :\n        arr = np.rot90(arr)\n        ranges = np.rot90(ranges)\n    print(arr,ranges)\n    if index < ranges.shape[0] :\n        if arr[index] == 0 :\n            return 1,0\n        elif arr[index] == 1 :\n            return 0,1\n    else :\n        if index >= len(arr) :\n            return 1,0\n        elif arr[index] == 0 :\n            return 0,1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    temp = arr[index]\n    for i in range(rotations) :\n        arr[index] = arr[index + ranges]\n        index += ranges\n        \n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index -= 1\n    arr_len = len(arr)\n    if index < 0 or index >= arr_len :\n        raise Exception(\"Index out of bounds\")\n    i = 0\n    while i <= ranges :\n        if i < arr_len :\n            if index >= arr[i] :\n                index -= arr[i]\n            else :\n                index -= arr[i-1]\n        i += rotations\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    #print(ranges)\n    #print(rotations)\n    #print(index)\n    for i in range(n):\n        if (arr[i] > ranges[index]):\n            #print(\"I am here\")\n            if (rotations[i] == 0):\n                #print(\"I am here\")\n                #print(arr[i], ranges[index])\n                if(arr[i] <= ranges[index]):\n                    #print(\"I am here\")\n                    return i\n            if(rotations[i] > 0):\n                #print(\"I am here\")\n                #print(arr[i], ranges[index])\n                if (arr[i] >= ranges[index]):\n                    #print(\"I am here\")\n                    return i\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    res = 0\n    for i in range(rotations) :\n        for j in range(index) :\n            res = arr[index - j - 1]\n            break\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = 'p'\n    return_word = None\n    for word in words:\n        if word.startswith(p):\n            return_word = word\n    return return_word\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    word_list =[]\n    for word in words:\n        if word.startswith('p'):\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for i in words:\n        if i[0] == 'p':\n            p_list.append(i)\n    return p_list[0],p_list[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split()\n    for i in words:\n        if i.startswith('p'):\n            return i, words[words.index(i) + 1]\ndef capitalize(words):\n    '''\n    Write a function to capitalize the first letter of each word in a sentence.\n    '''\n    words = words.split()\n    capital_words = []\n    for i in words:\n        capital_words.append(i.capitalize())\n    return''.join(capital_words)\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    s = s.replace(\" \",\"\").lower()\n    return s==s[::-1]\ndef is_palindrome_recursive(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    s = s.replace(\" \",\"\").lower()\n    if len(s) == 0 or len(s) == 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome_recursive(s[1:-1])\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"p\"\n    n = \"n\"\n    for i in words:\n        if i.startswith(p):\n            return i, n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = [\"pajamas\",\"apple\",\"kia\",\"lemon\"]\n    return words[0],words[1]\ndef front_back(string):\n    '''\n    Write a function to take a string and return a string with the front and back\n    of the string reversed.\n    '''\n    return string[::-1]+string[:1]+string[-1:]\ndef front3(string):\n    '''\n    Write a function to return the first three letters of a string.\n    If the length of the string is less than 3\n    just return the whole string.\n    '''\n    return string[:3]\ndef front_n_back(string,n):\n    '''\n    Write a function that takes a string and a number as input,\n    and returns a new string that is n copies of the original string.\n    '''\n    return string*n\ndef front_10(string):\n    '''\n    Write a function that takes a string and returns a new string\n    that is 10 copies of the original string.\n    '''\n    return string*10\ndef string_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef back_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_end(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the end,\n    and the new string inserted before this string.\n    '''\n    return string[:len(string)-len(replace_what)]+replace_with\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_end(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the end,\n    and the new string inserted before this string.\n    '''\n    return string[:len(string)-len(replace_what)]+replace_with\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_front(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the front,\n    and the new string inserted at the front.\n    '''\n    return replace_with+replace_what+string[len(string)-len(replace_what):]\ndef front3(string):\n    '''\n    Write a function that takes a string and returns the original string with the front\n    of the string replaced by three exclamation marks.\n    '''\n    return \"!\".join(string[:3])\ndef replace_front(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the front,\n    and the new string inserted at the front.\n    '''\n    return replace_with+replace_what+string[len(string)-len(replace_what):]\ndef front3(string):\n    '''\n    Write a function that takes a string and returns the original string with the front\n    of the string replaced by three exclamation marks.\n    '''\n    return \"!\".join(string[:3])\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_end(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the end,\n    and the new string inserted before this string.\n    '''\n    return string[:len(string)-len(replace_what)]+replace_with\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_end(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the end,\n    and the new string inserted before this string.\n    '''\n    return string[:len(string)-len(replace_what)]+replace_with\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_front(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the front,\n    and the new string inserted at the front.\n    '''\n    return replace_with+replace_what+string[len(string)-len(replace_what):]\ndef front3(string):\n    '''\n    Write a function that takes a string and returns the original string with the front\n    of the string replaced by three exclamation marks.\n    '''\n    return \"!\".join(string[:3])\ndef replace_front(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the front,\n    and the new string inserted at the front.\n    '''\n    return replace_with+replace_what+string[len(string)-len(replace_what):]\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_end(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the end,\n    and the new string inserted before this string.\n    '''\n    return string[:len(string)-len(replace_what)]+replace_with\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_end(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the end,\n    and the new string inserted before this string.\n    '''\n    return string[:len(string)-len(replace_what)]+replace_with\ndef front_times(string,n):\n    '''\n    Write a function that takes a string and an integer as input,\n    and returns a new string that is the original string repeated n times.\n    '''\n    return string*n\ndef replace_front(string,replace_what,replace_with):\n    '''\n    Write a function that takes a string and two strings as input,\n    and returns the original string with the second string removed from the front,\n    and th"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Your code here\n    p = words[0]\n    # Your code here\n    return(p)\n    \ndef compare_s(s,a,b):\n    '''\n    Write a function to return True if's' is greater than or equal to 'a' and\n    less than or equal to 'b'. Return False otherwise.\n    '''\n    # Your code here\n    return(s >= a and s <= b)\n    \ndef common_words(words_a, words_b):\n    '''\n    Write a function to return the common words from two lists. \n    Words are sorted in ascending order of length.\n    '''\n    # Your code here\n    words_a.sort(key=len)\n    words_b.sort(key=len)\n    i = 0\n    j = 0\n    while i < len(words_a) and j < len(words_b):\n        if words_a[i] == words_b[j]:\n            i += 1\n            j += 1\n        else:\n            break\n    return(words_a[i:j])\n    \ndef find_k_to_t_consecutive(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive2(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive3(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive4(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive5(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive6(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive7(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive8(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive9(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive10(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive11(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive12(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive13(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive14(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive15(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive16(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive17(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive18(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive19(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000, then return -1.\n    '''\n    # Your code here\n    # Your code here\n    return(k)\n    \ndef find_k_to_t_consecutive20(s,k,t):\n    '''\n    Write a function to return the minimum number of operations to convert a string s \n    into a string t. If the number of operations exceeds 10,000"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [\"p\", \"p\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = sorted(words)\n    i = -1\n    while (words[i]!= 'p' and i >= -len(words)):\n        i -= 1\n    print(words[i + 1])\n    print(words[i])\n    return words[i + 1],words[i]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return ['pagetelescope','pagetelescope']\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if k > n:\n        return -1\n    \n    if k == n:\n        return a[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -float(\"inf\")\n    for j in range(i,n):\n        #print(i,j)\n        tmp_sum = 0\n        for l in range(i,j):\n            tmp_sum += a[l]\n            max_sum = max(max_sum,tmp_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # return max(max_sum_increasing_subseq_util(a, n, i, k) for i in range(n))\n    max_sum = -1\n    for i in range(index, n):\n        if i >= k:\n            max_sum = max(max_sum, max_sum_increasing_subseq_util(a, n, i, k))\n        else:\n            max_sum = max(max_sum, max_sum_increasing_subseq_util(a, n, i, k) + a[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -1\n    while index <= n:\n        if max_sum < (sum(a[index:k+1]) - sum(a[0:k])):\n            max_sum = sum(a[index:k+1]) - sum(a[0:k])\n        index += 1\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        if a[0] == k:\n            return a[0]\n        else:\n            return k\n    if n == 0:\n        if a[0] == k:\n            return a[0]\n        else:\n            return k\n    if k > a[index]:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    if k < a[index]:\n        return max_sum_increasing_subseq(a, n-1, index, k)\n    return max(a[index]+max_sum_increasing_subseq(a, n, index+1, k), a[index]+max_sum_increasing_subseq(a, n-1, index, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == len(a) - 1:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    \n    #recursive calls\n    #first calls for i == 0\n    curr = a[0]\n    max_sum_arr = max_sum_increasing_subseq(a, n, index, k)\n    #second calls for i == index\n    max_sum_arr = max(max_sum_arr, max_sum_increasing_subseq(a, n - 1, index, k))\n    #third calls for i > index\n    if index > 0:\n        curr = max(curr, a[index])\n    \n    #base cases\n    if curr < a[index] and index >= k:\n        return curr + max_sum_increasing_subseq(a, n - 1, index - 1, k)\n    elif curr > a[index] and index > k:\n        return curr + max_sum_increasing_subseq(a, n - 1, index - 1, k)\n    elif curr > a[index] and index < k:\n        return curr + max_sum_increasing_subseq(a, n - 1, index, k)\n    else:\n        return curr\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    else:\n        if a[index] > k:\n            if a[index] >= a[index+1]:\n                return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n        else:\n            return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # edge case\n    if n == 1:\n        if a[index] >= k:\n            return a[index]\n        else:\n            return a[index] + k\n    # prefix of length n\n    prefix = [0] * n\n    prefix[0] = a[index]\n    max_sum = prefix[0]\n    # we need to set prefix[i] so that when we reach i+1, we need to set prefix[i+1] so that we can get max sum of increasing subsequence\n    for i in range(1, n):\n        prefix[i] = a[index] + max(prefix[i - 1], max_sum)\n        max_sum = max(max_sum, prefix[i])\n    if a[index] >= k:\n        return prefix[n - 1]\n    else:\n        return prefix[n - 1] + k\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[None]*(n+1) for i in range(n+1)]\n    # fill in from bottom up\n    for i in range(n+1):\n        for j in range(i, n+1):\n            # if i is 0, we have nothing before it\n            if i==0:\n                dp[i][j] = a[j-1]\n                continue\n            # if we are already at i index, we can't add anything\n            if j==i:\n                dp[i][j] = 0\n                continue\n            # if we are at j index and we want to add k, we can add it\n            if j==k:\n                dp[i][j] = a[j-1] + k\n            # if we are at j index and want to add k, we can't add it\n            if j==k:\n                continue\n            # if we are at i+1 index\n            dp[i][j] = max(a[j-1]+dp[i][j-1], a[j-1]+dp[i][j])\n    # find the maximum\n    maximum = -sys.maxsize\n    for i in range(1, n+1):\n        maximum = max(maximum, dp[i][n])\n    # return\n    return maximum\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return m[tuplex[1]]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = list(tuplex)\n    k = len(tuplex)\n    for i in range(0,m):\n        for j in range(0,n):\n            x.append((k*j)+i)\n    return tuple(x)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=list(tuplex)\n    i=0\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j]==(0,0,0,0,0,0,0,0,0):\n                tuplex[i][j]=None\n            else:\n                tuplex[i][j]=tuplex[i][j]\n    return tuple(tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #Get the length of the tuple\n    #If the length is not equal to the number of rows\n    if len(tuplex)!= m:\n        #Throw an error\n        raise Exception('The tuple does not have as many elements as the number of rows')\n    #Else, create an empty list to store the elements\n    out_list=[]\n    #For each element in the tuple\n    for i in range(len(tuplex)):\n        #Get the length of the column\n        col_len = len(tuplex[i])\n        #If the length is not equal to the number of elements in the column\n        if col_len!= n:\n            #Throw an error\n            raise Exception('The tuple does not have as many elements as the number of columns')\n        #Else, add the element to the out_list\n        out_list.append(tuplex[i])\n    #Return the colon\n    return tuple(out_list)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ''\n    for i in range(m,n):\n        colon += tuplex[i]\n    return colon\ndef digsub(input_tuplex,n):\n    '''\n    Write a function to convert a tuple into a dictionary.\n    '''\n    temp_dict = {}\n    m = 0\n    n = len(input_tuplex)\n    for i in range(0,n):\n        if i!= n - 1:\n            temp_dict[m] = input_tuplex[i]\n            m += 1\n        else:\n            temp_dict[m] = input_tuplex[i]\n            m += 1\n    return temp_dict\ndef tuplen(input_dict):\n    '''\n    Write a function to convert a dictionary into a tuple.\n    '''\n    tuplex = ()\n    m = 0\n    n = len(input_dict)\n    for i in range(n):\n        tuplex += (input_dict[m],)\n        m += 1\n    return tuplex\ndef remove_tuplex(input_tuplex,n):\n    '''\n    Write a function to remove a tuple from a list.\n    '''\n    temp_list = []\n    m = 0\n    n = len(input_tuplex)\n    for i in range(n):\n        if i!= n - 1:\n            temp_list.append(input_tuplex[i])\n            m += 1\n        else:\n            temp_list.append(input_tuplex[i])\n            m += 1\n    return temp_list\ndef merge_tuplex(input_tuplex):\n    '''\n    Write a function to merge two tuples.\n    '''\n    m = 0\n    n = len(input_tuplex)\n    temp_tuplex = ()\n    for i in range(n):\n        if i == 0:\n            temp_tuplex = input_tuplex[i]\n        else:\n            temp_tuplex = tuple(temp_tuplex) + (input_tuplex[i],)\n    return temp_tuplex\ndef rep_tuplex(input_tuplex):\n    '''\n    Write a function to repeat a tuple.\n    '''\n    m = 1\n    n = len(input_tuplex)\n    temp_tuplex = input_tuplex\n    temp_tuplex = tuple(temp_tuplex)\n    for i in range(1,m):\n        temp_tuplex += temp_tuplex\n    return tuple(temp_tuplex)\ndef digsub1(input_tuplex,n):\n    '''\n    Write a function to convert a tuple into a dictionary.\n    '''\n    temp_dict = {}\n    m = 0\n    n = len(input_tuplex)\n    for i in range(0,n):\n        if i!= n - 1:\n            temp_dict[m] = input_tuplex[i]\n            m += 1\n        else:\n            temp_dict[m] = input_tuplex[i]\n            m += 1\n    return temp_dict\ndef merge_tuplex_1(input_tuplex):\n    '''\n    Write a function to merge two tuples.\n    '''\n    m = 0\n    n = len(input_tuplex)\n    temp_tuplex = ()\n    for i in range(n):\n        if i == 0:\n            temp_tuplex = input_tuplex[i]\n        else:\n            temp_tuplex = tuple(temp_tuplex) + (input_tuplex[i],)\n    return temp_tuplex\ndef rep_tuplex_1(input_tuplex):\n    '''\n    Write a function to repeat a tuple.\n    '''\n    m = 1\n    n = len(input_tuplex)\n    temp_tuplex = input_tuplex\n    temp_tuplex = tuple(temp_tuplex)\n    for i in range(1,m):\n        temp_tuplex += temp_tuplex\n    return tuple(temp_tuplex)\ndef div(input_list):\n    '''\n    Write a function to divide a list into two lists.\n    '''\n    temp_list = []\n    m = 0\n    n = len(input_list)\n    for i in range(n):\n        temp_list.append(input_list[m])\n        m += 1\n    return temp_list\ndef tuple_sum(input_tuplex,n):\n    '''\n    Write a function to sum a tuple.\n    '''\n    temp_tuplex = ()\n    m = 0\n    n = len(input_tuplex)\n    for i in range(n):\n        if i!= n - 1:\n            temp_tuplex += (input_tuplex[i] + n)\n            m += 1\n        else:\n            temp_tuplex += (input_tuplex[i] + n)\n            m += 1\n    return temp_tuplex\ndef tuplen_1(input_dict):\n    '''\n    Write a function to convert a dictionary into a tuple.\n    '''\n    temp_tuplex = ()\n    m = 0\n    n = len(input_dict)\n    for i in range(n):\n        if i!= n - 1:\n            temp_tuplex += (input_dict[m],)\n            m += 1\n        else:\n            temp_tuplex += (input_dict[m],)\n            m += 1\n    return temp_tuplex\ndef digsub1_1(input_tuplex):\n    '''\n    Write a function to convert a tuple into a dictionary.\n    '''\n    temp_dict = {}\n    m = 0\n    n = len(input_tuplex)\n    for i in range(n):\n        if i!= n - 1:\n            temp_dict[m] = input_tuplex[i]\n            m += 1\n        else:\n            temp_dict[m] = input_tuplex[i]\n            m += 1\n    return temp_dict\ndef rep_tuplex_1_1(input_tuplex):\n    '''\n    Write a function to repeat a tuple.\n    '''\n    m = 1\n    n = len(input_tuplex)\n    temp_tuplex = ()\n    temp_tuplex = tuple(temp_tuplex)\n    for i in range(1,m):\n        temp_tuplex += temp_tuplex\n    return tuple(temp_tuplex)\ndef merge_tuplex_1_1(input_tuplex):\n    '''\n    Write a function to merge two tuples.\n    '''\n    m = 0\n    n = len(input_tuplex)\n    temp_tuplex = ()\n    for i in range(n):\n        if i!= n - 1:\n            temp_tuplex += (input_tuplex[i],)\n            m += 1\n        else:\n            temp_tuplex += (input_tuplex[i],)\n            m += 1\n    return temp_tuplex\ndef div_1(input_list):\n    '''\n    Write a function to divide a list into two lists.\n    '''\n    temp_list = []\n    m = 0\n    n = len(input_list)\n    for i in range(n):\n        temp_list.append(input_list[m])\n        m += 1\n    return temp_list\ndef tuple_sum_1(input_tuplex,n):\n    '''\n    Write a function to sum a tuple.\n    '''\n    temp_tuplex = ()\n    m = 0\n    n = len(input_tuplex)\n    for i in range(n):\n        if i!= n - 1:\n            temp_tuplex += (input_tuplex[i] + n)\n            m += 1\n        else:\n            temp_tuplex += (input_tuplex[i] + n)\n            m += 1\n    return temp_tuplex\ndef tuplen_1_1(input_dict):\n    '''\n    Write a function to convert a dictionary into a tuple.\n    '''\n    temp"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    n = 0\n    tuplex = deepcopy(tuplex)\n    while(tuplex[n] ==''):\n        n = n + 1\n    m = m + n + 1\n    while(tuplex[n]!=''):\n        n = n + 1\n    new_colon = tuplex[m:n]\n    tuplex = deepcopy(tuplex)\n    n = n - 1\n    while(tuplex[n]!=''):\n        n = n - 1\n    new_colon = new_colon + tuplex[n+1:m]\n    return new_colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[:m]+tuplex[m+1:n]+tuplex[n+1:])\ndef get_colon(tuples):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m = len(tuples)//2\n    n = len(tuples)\n    return colon_tuplex(tuples,m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m] + (tuplex[m:n],) + tuplex[n:]\ndef get_column(matrix,column):\n    '''\n    Write a function to get a column of a matrix.\n    '''\n    return list(zip(*matrix))[column]\ndef transpose(matrix):\n    '''\n    Write a function to get the transpose of a matrix.\n    '''\n    return list(zip(*matrix))\ndef get_diagonal_sum(matrix,i,j):\n    '''\n    Write a function to get the sum of the diagonal of a matrix.\n    '''\n    return sum(matrix[x][x] for x in range(len(matrix)))\ndef get_diagonal(matrix):\n    '''\n    Write a function to get the diagonal of a matrix.\n    '''\n    return sum(matrix[i][i] for i in range(len(matrix)))\ndef get_tuple_sum(tuplex1, tuplex2):\n    '''\n    Write a function to get the sum of tuples.\n    '''\n    return tuple(map(sum, zip(tuplex1, tuplex2)))\ndef get_tuple_diff(tuplex1, tuplex2):\n    '''\n    Write a function to get the difference of tuples.\n    '''\n    return tuple(map(lambda a,b: a-b, tuplex1, tuplex2))\ndef get_tuple_product(tuplex1, tuplex2):\n    '''\n    Write a function to get the product of tuples.\n    '''\n    return tuple(map(lambda a,b: a*b, tuplex1, tuplex2))\ndef get_tuple_div(tuplex1, tuplex2):\n    '''\n    Write a function to get the quotient of tuples.\n    '''\n    return tuple(map(lambda a,b: a//b, tuplex1, tuplex2))\ndef get_tuple_mod(tuplex1, tuplex2):\n    '''\n    Write a function to get the modulo of tuples.\n    '''\n    return tuple(map(lambda a,b: a%b, tuplex1, tuplex2))\ndef get_list_sum(list1, list2):\n    '''\n    Write a function to get the sum of lists.\n    '''\n    return list(map(sum, zip(list1, list2)))\ndef get_list_diff(list1, list2):\n    '''\n    Write a function to get the difference of lists.\n    '''\n    return list(map(lambda a,b: a-b, list1, list2))\ndef get_list_product(list1, list2):\n    '''\n    Write a function to get the product of lists.\n    '''\n    return list(map(lambda a,b: a*b, list1, list2))\ndef get_list_div(list1, list2):\n    '''\n    Write a function to get the quotient of lists.\n    '''\n    return list(map(lambda a,b: a//b, list1, list2))\ndef get_list_mod(list1, list2):\n    '''\n    Write a function to get the modulo of lists.\n    '''\n    return list(map(lambda a,b: a%b, list1, list2))\ndef check_equal_tuples(tuplex1, tuplex2):\n    '''\n    Write a function to check if the tuples are equal.\n    '''\n    return tuple(tuplex1) == tuple(tuplex2)\ndef check_equal_lists(list1, list2):\n    '''\n    Write a function to check if the lists are equal.\n    '''\n    return list1 == list2\ndef get_row_sum(matrix, row):\n    '''\n    Write a function to get the sum of a row.\n    '''\n    return sum(matrix[row])\ndef get_row_diff(matrix, row):\n    '''\n    Write a function to get the difference of a row.\n    '''\n    return matrix[row]\ndef get_row_product(matrix, row):\n    '''\n    Write a function to get the product of a row.\n    '''\n    return product(matrix[row])\ndef get_row_div(matrix, row):\n    '''\n    Write a function to get the quotient of a row.\n    '''\n    return div(matrix[row])\ndef get_row_mod(matrix, row):\n    '''\n    Write a function to get the modulo of a row.\n    '''\n    return mod(matrix[row])\ndef get_col_sum(matrix, col):\n    '''\n    Write a function to get the sum of a column.\n    '''\n    return sum(matrix[x][col] for x in range(len(matrix)))\ndef get_col_diff(matrix, col):\n    '''\n    Write a function to get the difference of a column.\n    '''\n    return matrix[col]\ndef get_col_product(matrix, col):\n    '''\n    Write a function to get the product of a column.\n    '''\n    return product(matrix[col])\ndef get_col_div(matrix, col):\n    '''\n    Write a function to get the quotient of a column.\n    '''\n    return div(matrix[col])\ndef get_col_mod(matrix, col):\n    '''\n    Write a function to get the modulo of a column.\n    '''\n    return mod(matrix[col])\ndef check_equal_rows(matrix1, matrix2):\n    '''\n    Write a function to check if the rows are equal.\n    '''\n    return matrix1 == matrix2\ndef check_equal_cols(matrix1, matrix2):\n    '''\n    Write a function to check if the columns are equal.\n    '''\n    return matrix1 == matrix2\ndef check_equal_matrices(matrix1, matrix2):\n    '''\n    Write a function to check if the matrices are equal.\n    '''\n    return matrix1 == matrix2\ndef get_diagonal_sum_by_col(matrix, i, j):\n    '''\n    Write a function to get the sum of the diagonal of a column.\n    '''\n    return sum(matrix[x][x] for x in range(i,len(matrix)))\ndef get_diagonal_sum_by_row(matrix, i, j):\n    '''\n    Write a function to get the sum of the diagonal of a row.\n    '''\n    return sum(matrix[i][i] for i in range(len(matrix)))\ndef get_diagonal_sum_by_diagonal(matrix):\n    '''\n    Write a function to get the sum of the diagonal of a matrix.\n    '''\n    return sum(matrix[i][i] for i in range(len(matrix)))\ndef get_diagonal_diff_by_col(matrix, i, j):\n    '''\n    Write a function to get the difference of the diagonal of a column.\n    '''\n    return get_diagonal_sum_by_col(matrix, i, j) - matrix[i][i]\ndef get_diagonal_diff_by_row(matrix, i, j):\n    '''\n    Write a function to get the difference of the diagonal of a row.\n    '''\n    return get_diagonal_sum_by_row(matrix, i, j) - matrix[i][i]\ndef get_diagonal_diff_by_diagonal(matrix):\n    '''\n    Write a function to get the difference of the diagonal of a matrix.\n    '''\n    return get_diagonal_sum_by_diagonal(matrix) - matrix[0][len(matrix)-1]\ndef get_diagonal_product_by_col(matrix, i, j):\n    '''\n    Write a function to get the product of the diagonal of a column.\n    '''\n    return matrix[i][i] * matrix[i+1][i+1] * matrix[i+2][i+"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c=[]\n    for i in range(m):\n        for j in range(n):\n            c.append(tuplex[i][j])\n    return tuple(c)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m]+(tuplex[m:m+n],)+tuplex[m+n:]\ndef col_part(colon):\n    '''\n    Write a function to partition a tuple into a pair of tuples.\n    '''\n    #print(colon)\n    if type(colon)==type((1,2,3,4,5,6,7,8)):\n        return colon[0],colon[1:]\n    elif type(colon)==type((1,2,3,4,5,6)):\n        return colon[0],colon[1:2]\n    elif type(colon)==type((1,2,3)):\n        return colon[0],colon[1:2]\n    else:\n        return colon[0],colon\ndef col_part_rev(colon):\n    '''\n    Write a function to partition a tuple into a pair of tuples.\n    '''\n    if type(colon)==type((1,2,3,4,5,6,7,8)):\n        return colon[1:],colon[0]\n    elif type(colon)==type((1,2,3,4,5,6)):\n        return colon[1:],colon[0]\n    elif type(colon)==type((1,2,3)):\n        return colon[0:2],colon[0]\n    else:\n        return colon[1:],colon\ndef new_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a new tuple from a tuple.\n    '''\n    return tuplex[0:m]+(tuplex[m:m+n],)+tuplex[m+n:]\ndef change_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a new tuple from a tuple.\n    '''\n    return tuplex[0:m]+(tuplex[m+1:m+n]+tuplex[m],)+tuplex[m+n:]\ndef alter_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a new tuple from a tuple.\n    '''\n    return tuplex[0:m]+(tuplex[m+1:m+n]+tuplex[m],)+tuplex[m+n:]\ndef rev_tuplex(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_2(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex)>1:\n        return tuplex[1:][::-1]+(tuplex[0],)\n    else:\n        return tuplex[0]\ndef rev_tuplex_3(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex)>1:\n        return tuplex[1:][::-1]\n    else:\n        return tuplex[0]\ndef rev_tuplex_4(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex)>1:\n        return tuplex[1:][::-1]\n    else:\n        return tuplex\ndef rev_tuplex_5(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex)>1:\n        return tuplex[1:][::-1]\n    else:\n        return (tuplex[0],)\ndef rev_tuplex_6(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_7(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex)>1:\n        return tuplex[1:][::-1]\n    else:\n        return ()\ndef rev_tuplex_8(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex)>1:\n        return tuplex[1:][::-1]\n    else:\n        return tuplex\ndef rev_tuplex_9(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex)>1:\n        return tuplex[1:][::-1]\n    else:\n        return tuplex\ndef rev_tuplex_10(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_11(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_12(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_13(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_14(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_15(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_16(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_17(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_18(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_19(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_20(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_21(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_22(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_23(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_24(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_25(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_26(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_27(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_28(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef rev_tuplex_29(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Method 1: O(N*M)\n    m = len(nums1)\n    n = len(nums2)\n    res = []\n    for i in range(m):\n        for j in range(n):\n            if nums1[i] < nums2[j]:\n                res.append(nums2[j] * nums1[i])\n                break\n            elif nums1[i] > nums2[j]:\n                res.append(nums1[i] * nums2[j])\n                break\n            else:\n                res.append(nums1[i] * nums2[j])\n                break\n    return sorted(res, reverse=True)[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find product of all factors\n    product = []\n    for i in nums1:\n        product.append(i)\n    for j in nums2:\n        if j in product:\n            product.remove(j)\n    \n    # Find product of all factors\n    if len(product) < N:\n        product = product + product\n    else:\n        product = product[0:N]\n    \n    # Find the largest product\n    result = 1\n    for i in range(0, N):\n        if product[i] > result:\n            result = product[i]\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    d = {}\n    res = 0\n    for i in range(N):\n        if nums1[i]*nums2[i] > res:\n            res = nums1[i]*nums2[i]\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    lst = []\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                lst.append(nums1[i] * nums2[j])\n    lst.sort(reverse = True)\n    print(lst[:N])\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    p = 0\n    for i in range(N):\n        if nums1[i] * nums2[i] > p:\n            p = nums1[i] * nums2[i]\n    return p\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the lists\n    nums1.sort()\n    nums2.sort()\n    \n    # Run the two lists to find the largest product\n    largest = -float('inf')\n    i1 = 0\n    i2 = 0\n    while i1 < N and i2 < N:\n        \n        # Check for smaller number\n        if nums1[i1] < nums2[i2]:\n            largest = max(largest, nums1[i1] * nums2[i2])\n            i1 += 1\n            i2 += 1\n        else:\n            largest = max(largest, nums1[i1] * nums2[i2])\n            i2 += 1\n    \n    return largest\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def product(nums,N):\n        d={}\n        for i in nums:\n            d[i]=0\n        for i in nums:\n            d[i]+=1\n        res = []\n        for k in d:\n            if d[k]==1:\n                continue\n            else:\n                for i in range(d[k]):\n                    res.append(k)\n        return res[:N]\n    return product(nums1,N)+product(nums2,N)\nprint(large_product([3,5,6,7], [4,6,1,4],4))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in range(N):\n        res.append((nums1[i], nums2[i]))\n    res.sort(key=lambda x: x[0] * x[1], reverse=True)\n    for i in range(N):\n        print(res[i][0], res[i][1])\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    def lcm(a, b):\n        return abs(a * b) // math.gcd(a, b)\n    \n    # N <= len(nums1) * len(nums2)\n    # return lcm(nums1[-1], nums2[-1]) * (nums1[-1] * nums2[-1] // lcm(nums1[-1], nums2[-1]))\n    \n    # N <= len(nums1) * len(nums2)\n    def max_product(nums1, nums2, N):\n        '''\n        nums1 = [4, 5, 8]\n        nums2 = [3, 6, 7]\n        '''\n        # N = 4\n        \n        # if len(nums1) < N or len(nums2) < N:\n        #     return -1\n        \n        nums1 = sorted(nums1)[::-1]\n        nums2 = sorted(nums2)[::-1]\n        \n        def helper(index, l, N):\n            '''\n            l: list to be sorted\n            index: index of l\n            N: max product size\n            '''\n            # print(f'index {index}')\n            # print(f'l {l}')\n            # print(f'N {N}')\n            if index == len(l):\n                return []\n            \n            if index > N:\n                return []\n            \n            res = []\n            for i in range(index, len(l)):\n                res.append([i, l[i]])\n                \n            for i in range(index, len(l)):\n                if i + N <= len(l):\n                    for j in range(i, i + N):\n                        res.append([i, l[j]])\n            \n            # print(f'res {res}')\n            return res\n        \n        res = []\n        \n        for i in range(len(nums1)):\n            res.append(helper(i, nums1, N))\n        \n        for i in range(len(nums2)):\n            res.append(helper(i, nums2, N))\n            \n        # print(res)\n        # print('--------------------')\n        for i in res:\n            if len(i) <= N:\n                print(i)\n                \n        return lcm(nums1[-1], nums2[-1]) * (nums1[-1] * nums2[-1] // lcm(nums1[-1], nums2[-1]))\n    \n    # N <= len(nums1) * len(nums2)\n    def min_product(nums1, nums2, N):\n        '''\n        nums1 = [4, 5, 8]\n        nums2 = [3, 6, 7]\n        '''\n        # N = 4\n        \n        # if len(nums1) < N or len(nums2) < N:\n        #     return -1\n        \n        nums1 = sorted(nums1)[::-1]\n        nums2 = sorted(nums2)[::-1]\n        \n        def helper(index, l, N):\n            '''\n            l: list to be sorted\n            index: index of l\n            N: max product size\n            '''\n            # print(f'index {index}')\n            # print(f'l {l}')\n            # print(f'N {N}')\n            if index == len(l):\n                return []\n            \n            if index > N:\n                return []\n            \n            res = []\n            for i in range(index, len(l)):\n                res.append([i, l[i]])\n                \n            for i in range(index, len(l)):\n                if i + N <= len(l):\n                    for j in range(i, i + N):\n                        res.append([i, l[j]])\n            \n            # print(f'res {res}')\n            return res\n        \n        res = []\n        \n        for i in range(len(nums1)):\n            res.append(helper(i, nums1, N))\n        \n        for i in range(len(nums2)):\n            res.append(helper(i, nums2, N))\n            \n        # print(res)\n        # print('--------------------')\n        for i in res:\n            if len(i) <= N:\n                print(i)\n                \n        return lcm(nums1[-1], nums2[-1]) * (nums1[-1] * nums2[-1] // lcm(nums1[-1], nums2[-1]))\n    \n    # N <= len(nums1) * len(nums2)\n    def max_product_subarray(nums1, nums2, N):\n        '''\n        nums1 = [4, 5, 8]\n        nums2 = [3, 6, 7]\n        '''\n        # N = 4\n        \n        # if len(nums1) < N or len(nums2) < N:\n        #     return -1\n        \n        nums1 = sorted(nums1)[::-1]\n        nums2 = sorted(nums2)[::-1]\n        \n        def helper(index, l, N):\n            '''\n            l: list to be sorted\n            index: index of l\n            N: max product size\n            '''\n            # print(f'index {index}')\n            # print(f'l {l}')\n            # print(f'N {N}')\n            if index == len(l):\n                return []\n            \n            if index > N:\n                return []\n            \n            res = []\n            for i in range(index, len(l)):\n                res.append([i, l[i]])\n                \n            for i in range(index, len(l)):\n                if i + N <= len(l):\n                    for j in range(i, i + N):\n                        res.append([i, l[j]])\n            \n            # print(f'res {res}')\n            return res\n        \n        res = []\n        \n        for i in range(len(nums1)):\n            res.append(helper(i, nums1, N))\n        \n        for i in range(len(nums2)):\n            res.append(helper(i, nums2, N))\n            \n        # print(res)\n        # print('--------------------')\n        for i in res:\n            if len(i) <= N:\n                print(i)\n                \n        return lcm(nums1[-1], nums2[-1]) * (nums1[-1] * nums2[-1] // lcm(nums1[-1], nums2[-1]))\n    \n    # N <= len(nums1) * len(nums2)\n    def max_product_subarray_slow(nums1, nums2, N):\n        '''\n        nums1 = [4, 5, 8]\n        nums2 = [3, 6, 7]\n        '''\n        # N = 4\n        \n        # if len(nums1) < N or len(nums2) < N:\n        #     return -1\n        \n        nums1 = sorted(nums1)[::-1]\n        nums2 = sorted(nums2)[::-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1:\n        return\n    nums1 = deque(nums1)\n    nums2 = deque(nums2)\n    p1 = p2 = 0\n    res = []\n    while len(res) < N:\n        while p1 < len(nums1) and p2 < len(nums2):\n            x = nums1[p1]\n            y = nums2[p2]\n            if x == y:\n                res.append(x * y)\n                break\n            if x > y:\n                p2 += 1\n            else:\n                p1 += 1\n        if len(res) == N:\n            return res\n        while p1 < len(nums1) and nums1[p1] > 0:\n            nums1[p1] -= 1\n            p1 += 1\n        while p2 < len(nums2) and nums2[p2] > 0:\n            nums2[p2] -= 1\n            p2 += 1\n    return res\n    \n    \ndef find_maximum_product(nums, k):\n    '''\n    Write a function that takes an array of non-negative integers and an integer representing a target value, and returns a boolean representing whether or not the array can be partitioned into two subsets of equal sums.\n    '''\n    if not nums:\n        return\n    nums = sorted(nums)\n    if len(nums) < k:\n        return False\n    if k == 1:\n        return nums[-1] == 0\n    if k == 2:\n        return nums[0] == 0 and nums[-1] == 0\n    sum_left = 0\n    sum_right = 0\n    for i in range(k - 1):\n        sum_left += nums[i]\n    for i in range(k):\n        sum_right += nums[-1 - i]\n    return sum_left == sum_right\n    \n    \ndef new_find_maximum_product(nums, k):\n    '''\n    Write a function that takes an array of non-negative integers and an integer representing a target value, and returns a boolean representing whether or not the array can be partitioned into two subsets of equal sums.\n    '''\n    if not nums:\n        return\n    nums = sorted(nums)\n    if len(nums) < k:\n        return False\n    if k == 1:\n        return nums[-1] == 0\n    if k == 2:\n        return nums[0] == 0 and nums[-1] == 0\n    \n    for i in range(len(nums)):\n        left = nums[i: k]\n        right = nums[k: ]\n        if sum(left) == sum(right):\n            return True\n        \n    return False\n    \n    \ndef find_the_number(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    dict = {}\n    for i in nums:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n            \n    for key, value in dict.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again_2(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again_3(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again_4(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again_5(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again_6(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again_7(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again_8(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again_9(nums):\n    '''\n    Write a function that takes an array of integers and returns the integer that appears an odd number of times.\n    '''\n    if not nums:\n        return\n    \n    hash = {}\n    for i in nums:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    for key, value in hash.items():\n        if value % 2!= 0:\n            return key\n            \n    return None\n    \n    \ndef find_the_number_again"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\nprint(maximum(10,20))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n        \nmaximum(10,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"%d is maximum\"%a)\n    elif a==b:\n        print(\"Both are equal\")\n    else:\n        print(\"%d is maximum\"%b)\n    \nmaximum(12,10)\nmaximum(8,10)\nmaximum(-5,-10)\nmaximum(-2,0)\nmaximum(-4,-3)\nmaximum(-1,2)\nmaximum(2,-4)\nmaximum(10,-10)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b \n    \nprint(maximum(1,2))\nprint(maximum(2,1))\nprint(maximum(2,1.3))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(f\"Max of {a} and {b} is {max(a,b)}\")\n    \nmaximum(10,11)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(10,20))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s = list(str1)\n    t = tuple(s)\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code here\n    a=str1.split()\n    b=tuple(a)\n    return b\n    \ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters into a string.\n    '''\n    # your code here\n    a=''\n    for i in tup:\n        a=a+i\n    return a\n    \ndef string_reverser(str1):\n    '''\n    Write a function that takes a string as input and reverses it using recursion.\n    '''\n    # your code here\n    a=len(str1)\n    if a==0:\n        return str1\n    return str1[a-1]+string_reverser(str1[:a-1])\n    \ndef string_reverser_using_for(str1):\n    '''\n    Write a function that takes a string as input and reverses it using recursion.\n    '''\n    # your code here\n    a=len(str1)\n    str1=str1[::-1]\n    return str1\n    \ndef string_reverser_using_while(str1):\n    '''\n    Write a function that takes a string as input and reverses it using recursion.\n    '''\n    # your code here\n    a=len(str1)\n    b=0\n    for i in range(0,a):\n        b=b+1\n        if b==a:\n            str1=str1[::-1]\n            return str1\n        else:\n            str1=str1[:b]+str1[b+1:]\n            \ndef get_maximum_from_list(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the largest one.\n    '''\n    # your code here\n    a=max(l)\n    return a\n    \ndef get_maximum_from_list_using_while(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the largest one.\n    '''\n    # your code here\n    while len(l)!=0:\n        a=max(l)\n        l.remove(a)\n    return a\n    \ndef get_sum_of_list_odd_or_even(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the sum of all the odd numbers.\n    '''\n    # your code here\n    i=0\n    sum=0\n    while i<len(l):\n        if i%2!=0:\n            sum=sum+l[i]\n        i+=1\n    return sum\n    \ndef get_sum_of_list_odd_or_even_using_while(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the sum of all the odd numbers.\n    '''\n    # your code here\n    i=0\n    sum=0\n    while i<len(l):\n        if i%2!=0:\n            sum=sum+l[i]\n        i+=1\n    return sum\n    \ndef reverse_sublist_odd(l):\n    '''\n    Write a function that takes a list of numbers and returns a new list where all the odd numbers are reversed.\n    '''\n    # your code here\n    i=0\n    j=0\n    l1=[]\n    while i<len(l):\n        if i%2!=0:\n            l1.append(l[i])\n        i+=1\n    while j<len(l1):\n        l.append(l1[j])\n        j+=1\n    return l\n    \ndef reverse_sublist_odd_using_while(l):\n    '''\n    Write a function that takes a list of numbers and returns a new list where all the odd numbers are reversed.\n    '''\n    # your code here\n    i=0\n    j=0\n    l1=[]\n    while i<len(l):\n        if i%2!=0:\n            l1.append(l[i])\n        i+=1\n    while j<len(l1):\n        l.append(l1[j])\n        j+=1\n    return l\n    \ndef get_average(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the average of the numbers.\n    '''\n    # your code here\n    i=0\n    sum=0\n    while i<len(l):\n        sum=sum+l[i]\n        i+=1\n    return sum/len(l)\n    \ndef get_average_using_while(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the average of the numbers.\n    '''\n    # your code here\n    i=0\n    sum=0\n    while i<len(l):\n        sum=sum+l[i]\n        i+=1\n    return sum/len(l)\n    \ndef rotate_list(l,k):\n    '''\n    Write a function that takes a list of numbers and a positive integer k as input and returns a new list that contains the elements of the original list rotated k positions clockwise.\n    '''\n    # your code here\n    i=0\n    k1=k%len(l)\n    l1=[]\n    while i<len(l):\n        l1.append(l[(i+k1)%len(l)])\n        i+=1\n    return l1\n    \ndef rotate_list_using_while(l,k):\n    '''\n    Write a function that takes a list of numbers and a positive integer k as input and returns a new list that contains the elements of the original list rotated k positions clockwise.\n    '''\n    # your code here\n    i=0\n    k1=k%len(l)\n    l1=[]\n    while i<len(l):\n        l1.append(l[(i+k1)%len(l)])\n        i+=1\n    return l1\n    \ndef is_list_palindrome(l):\n    '''\n    Write a function that takes a list of numbers as input and returns True if the list is a palindrome and False otherwise.\n    '''\n    # your code here\n    i=0\n    j=len(l)-1\n    while i<j:\n        if l[i]!=l[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \ndef is_list_palindrome_using_while(l):\n    '''\n    Write a function that takes a list of numbers as input and returns True if the list is a palindrome and False otherwise.\n    '''\n    # your code here\n    i=0\n    j=len(l)-1\n    while i<j:\n        if l[i]!=l[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \ndef is_list_palindrome_using_recursion(l):\n    '''\n    Write a function that takes a list of numbers as input and returns True if the list is a palindrome and False otherwise.\n    '''\n    # your code here\n    if l==l[::-1]:\n        return True\n    return False\n    \ndef is_list_palindrome_using_recursion_using_while(l):\n    '''\n    Write a function that takes a list of numbers as input and returns True if the list is a palindrome and False otherwise.\n    '''\n    # your code here\n    i=0\n    j=len(l)-1\n    while i<j:\n        if l[i]!=l[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \ndef remove_duplicate_from_list(l):\n    '''\n    Write a function that takes a list as input and returns a new list with all duplicates removed.\n    '''\n    # your code here\n    i=0\n    k=0\n    l1=[]\n    while i<len(l):\n        if l[i] not in l1:\n            l1.append(l[i])\n            i+=1\n        else:\n            k=i\n        if k!=len(l)-1:\n            i+=1\n        else:\n            break\n    return l1\n    \nde"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return (tuple(str1))\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = []\n    for i in str1:\n        l.append(i)\n    print(tuple(l))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = ()\n    for i in str1:\n        result = result + (i,)\n    return result\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1 == \"\":\n        return ()\n    str1 = str1.strip()\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    while (n & 1) == 0:\n        n = n >> 1\n    return (n)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return set_left_most_unset_bit(n & (n - 1))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 0x1 : \n        return n | 0x1 \n    else: \n        return n & ~0x1 \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # it is same as xor operation\n    # n &= ~(1<<(x)) \n    # where x = left most unset bit\n    # print(n)\n    return n & ~(1<<(n))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & ~(n - 1))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~n & 0x1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(\"The left most unset bit in {} is: {}\".format(n,~n))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # return (n | (1 << n.bit_length() - 1))\n    if n == 0:\n        return 1\n    return n | (1 << (n.bit_length() - 1))"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n | (~1))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n << 1) | 1\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=3/5*math.pi*r*h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r*r*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*r*r*r\n    return volume\ndef volume_pyramid(l,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=l*b*math.sqrt(3/5)\n    return volume\ndef volume_prism(a,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume=a*h\n    return volume\ndef volume_right_angle_cone(r1,h):\n    '''\n    Write a function to find the volume of a right-angle cone.\n    '''\n    volume=1/3*math.pi*r1*h\n    return volume\ndef volume_right_angle_cylinder(r1,h):\n    '''\n    Write a function to find the volume of a right-angle cylinder.\n    '''\n    volume=1/3*math.pi*r1*r1*h\n    return volume\ndef volume_right_angle_sphere(r1):\n    '''\n    Write a function to find the volume of a right-angle sphere.\n    '''\n    volume=4/3*math.pi*r1*r1*r1\n    return volume\ndef volume_right_angle_pyramid(l,b):\n    '''\n    Write a function to find the volume of a right-angle pyramid.\n    '''\n    volume=l*b*math.sqrt(3/5)\n    return volume\ndef volume_right_angle_prism(a,h):\n    '''\n    Write a function to find the volume of a right-angle prism.\n    '''\n    volume=a*h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r*h\n    return volume\ndef volume_pyramid(l,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=l*b*math.sqrt(3/5)\n    return volume\ndef volume_prism(a,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume=a*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=3/5*math.pi*r*h\n    return volume\ndef volume_right_angle_cone(r1,h):\n    '''\n    Write a function to find the volume of a right-angle cone.\n    '''\n    volume=1/3*math.pi*r1*h\n    return volume\ndef volume_right_angle_cylinder(r1,h):\n    '''\n    Write a function to find the volume of a right-angle cylinder.\n    '''\n    volume=1/3*math.pi*r1*r1*h\n    return volume\ndef volume_right_angle_sphere(r1):\n    '''\n    Write a function to find the volume of a right-angle sphere.\n    '''\n    volume=4/3*math.pi*r1*r1*r1\n    return volume\ndef volume_right_angle_pyramid(l,b):\n    '''\n    Write a function to find the volume of a right-angle pyramid.\n    '''\n    volume=l*b*math.sqrt(3/5)\n    return volume\ndef volume_right_angle_prism(a,h):\n    '''\n    Write a function to find the volume of a right-angle prism.\n    '''\n    volume=a*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*r*r*r\n    return volume\ndef volume_pyramid(l,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=l*b*math.sqrt(3/5)\n    return volume\ndef volume_prism(a,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume=a*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=3/5*math.pi*r*h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r*h\n    return volume\ndef volume_pyramid(l,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=l*b*math.sqrt(3/5)\n    return volume\ndef volume_prism(a,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume=a*h\n    return volume\ndef volume_right_angle_cone(r1,h):\n    '''\n    Write a function to find the volume of a right-angle cone.\n    '''\n    volume=1/3*math.pi*r1*h\n    return volume\ndef volume_right_angle_cylinder(r1,h):\n    '''\n    Write a function to find the volume of a right-angle cylinder.\n    '''\n    volume=1/3*math.pi*r1*r1*h\n    return volume\ndef volume_right_angle_sphere(r1):\n    '''\n    Write a function to find the volume of a right-angle sphere.\n    '''\n    volume=4/3*math.pi*r1*r1*r1\n    return volume\ndef volume_right_angle_pyramid(l,b):\n    '''\n    Write a function to find the volume of a right-angle pyramid.\n    '''\n    volume=l*b*math.sqrt(3/5)\n    return volume\ndef volume_right_angle_prism(a,h):\n    '''\n    Write a function to find the volume of a right-angle prism.\n    '''\n    volume=a*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=3/5*math.pi*r*h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*r*r*r\n    return volume\ndef volume_pyramid(l,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=l*b*math.sqrt(3/5)\n    return volume\ndef volume_prism(a,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume=a*h\n    return volume\ndef volume_right_angle_cone(r1,h):\n    '''\n    Write a function to find the volume of a right-angle cone.\n    '''\n    volume=1/3*math.pi*r1*h\n    return volume\ndef volume_right_angle_cylinder(r1,h):\n    '''\n    Write a function to find the volume of a right-angle cylinder.\n    '''\n    volume=1/3*math.pi*r1*r1*h\n    return volume\ndef volume_right_angle_sphere(r1):\n    '''"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * math.pow(r,2) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r > 0 and h > 0:\n        v = math.pi * (r**2) * h\n    elif r < 0 or h < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    if r > 0 and h > 0:\n        sa = (2 * math.pi * r * h) + ((2 * math.pi * r**2) * math.sin(math.pi/6))\n    elif r < 0 or h < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    if b > 0 and h > 0:\n        v = b * h\n    elif b < 0 or h < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    if b > 0 and h > 0:\n        sa = b * h\n    elif b < 0 or h < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    if a > 0 and b > 0 and c > 0 and d > 0:\n        v = (a + b + c + d) / 2\n    elif a < 0 or b < 0 or c < 0 or d < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    if a > 0 and b > 0 and c > 0 and d > 0:\n        sa = ((a * b * c * d) / 2)\n    elif a < 0 or b < 0 or c < 0 or d < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_octahedron(a,b,c,d):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    if a > 0 and b > 0 and c > 0 and d > 0:\n        v = ((a + b + c + d) / 2)**2\n    elif a < 0 or b < 0 or c < 0 or d < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_octahedron(a,b,c,d):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    if a > 0 and b > 0 and c > 0 and d > 0:\n        sa = ((a * b * c * d) / 2)\n    elif a < 0 or b < 0 or c < 0 or d < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_dodecahedron(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    if a > 0 and b > 0 and c > 0 and d > 0 and e > 0:\n        v = ((a + b + c + d + e) / 3)**2\n    elif a < 0 or b < 0 or c < 0 or d < 0 or e < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_dodecahedron(a,b,c,d,e):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    if a > 0 and b > 0 and c > 0 and d > 0 and e > 0:\n        sa = ((a * b * c * d * e) / 3)\n    elif a < 0 or b < 0 or c < 0 or d < 0 or e < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_icosahedron(a,b,c,d,e,f):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    if a > 0 and b > 0 and c > 0 and d > 0 and e > 0 and f > 0:\n        v = ((a + b + c + d + e + f) / 5)**2\n    elif a < 0 or b < 0 or c < 0 or d < 0 or e < 0 or f < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_icosahedron(a,b,c,d,e,f):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    if a > 0 and b > 0 and c > 0 and d > 0 and e > 0 and f > 0:\n        sa = ((a * b * c * d * e * f) / 5)\n    elif a < 0 or b < 0 or c < 0 or d < 0 or e < 0 or f < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_tricylinder(h,r,r2):\n    '''\n    Write a function to find the volume of a tricylinder.\n    '''\n    if r > 0 and r2 > 0 and h > 0:\n        v = (h / 3) * math.pi * (r**2) * r2\n    elif r < 0 or r2 < 0 or h < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_tricylinder(h,r,r2):\n    '''\n    Write a function to find the surface area of a tricylinder.\n    '''\n    if r > 0 and r2 > 0 and h > 0:\n        sa = 2 * math.pi * (r**2) * (r2 + math.sqrt(2 * (r2**2) - ((math.pi * (r**2)) * (r2))))\n    elif r < 0 or r2 < 0 or h < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_pyramid(b,h,r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    if b > 0 and h > 0 and r > 0:\n        v = (b * h) / 3\n    elif b < 0 or h < 0 or r < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_pyramid(b,h,r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    if b > 0 and h > 0 and r > 0:\n        sa = ((b * h)/3) * math.sqrt(2)\n    elif b < 0 or h < 0 or r < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_cone(r,h,r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r > 0 and h > 0 and r2 > 0:\n        v = math.pi * r * h + math.pi * r2 * math.sin(math.pi / 6)\n    elif r < 0 or h < 0 or r2 < 0:\n        v = \"Volume not possible\"\n    return v\ndef surface_cone(r,h,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    if r > 0 and h > 0 and r2 > 0:\n        sa = (math.pi * r * h + math.pi * r2 * math.sin(math.pi / 6))\n    elif r < 0 or h < 0 or r2 < 0:\n        sa = \"Volume not possible\"\n    return sa\ndef volume_cone(r,h,r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r > 0 and h > 0 and r2 > 0:\n        v = math.pi * r * h + math.pi * r2 * math.sin(math.pi / 6)\n    elif r < 0 or h < 0 or r2 < 0:\n        "
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.1415926536\n    volume = pi*((r*r)+(h*h)/3)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2*math.pi * r * h\ndef volume_cone_hollow(r,h,g):\n    '''\n    Write a function to find the volume of a cone with a hollow bottom.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h)\ndef volume_cylinder_hollow(r,h,g):\n    '''\n    Write a function to find the volume of a cylinder with a hollow bottom.\n    '''\n    return math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + 2*g*h)\ndef volume_cone_sphere_hollow(r,h,g):\n    '''\n    Write a function to find the volume of a cone with a sphere in the bottom.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + 2*g*h)\ndef volume_cylinder_sphere_hollow(r,h,g):\n    '''\n    Write a function to find the volume of a cylinder with a sphere in the bottom.\n    '''\n    return math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + 2*g*h)\ndef volume_cone_sphere(r,h,g):\n    '''\n    Write a function to find the volume of a cone with a sphere in the top.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h)\ndef volume_cylinder_sphere(r,h,g):\n    '''\n    Write a function to find the volume of a cylinder with a sphere in the top.\n    '''\n    return math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + 2*g*h)\ndef volume_cone_sphere_angle(r,h,g):\n    '''\n    Write a function to find the volume of a cone with a sphere in the top.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h)\ndef volume_cylinder_sphere_angle(r,h,g):\n    '''\n    Write a function to find the volume of a cylinder with a sphere in the top.\n    '''\n    return math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + 2*g*h)\ndef volume_cone_sphere_top_angle(r,h,g):\n    '''\n    Write a function to find the volume of a cone with a sphere in the top.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h)\ndef volume_cylinder_sphere_top_angle(r,h,g):\n    '''\n    Write a function to find the volume of a cylinder with a sphere in the top.\n    '''\n    return math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + 2*g*h)\ndef volume_cone_sphere_bottom_angle(r,h,g):\n    '''\n    Write a function to find the volume of a cone with a sphere in the bottom.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h)\ndef volume_cylinder_sphere_bottom_angle(r,h,g):\n    '''\n    Write a function to find the volume of a cylinder with a sphere in the bottom.\n    '''\n    return math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + 2*g*h)\ndef volume_cone_cone_hollow_angle(r,h,g,b):\n    '''\n    Write a function to find the volume of a cone with a cone in the bottom.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h) + (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + b)\ndef volume_cylinder_cone_hollow_angle(r,h,g,b):\n    '''\n    Write a function to find the volume of a cone with a cone in the bottom.\n    '''\n    return math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h) + (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + b)\ndef volume_cone_cone_hollow_angle_left(r,h,g,b):\n    '''\n    Write a function to find the volume of a cone with a cone in the bottom.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h) + (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + b) - (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h + g)\ndef volume_cylinder_cone_cone_hollow_angle_left(r,h,g,b):\n    '''\n    Write a function to find the volume of a cone with a cone in the bottom.\n    '''\n    return math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h) + (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + b) - (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + b + g)\ndef volume_cone_cone_hollow_angle_right(r,h,g,b):\n    '''\n    Write a function to find the volume of a cone with a cone in the bottom.\n    '''\n    return (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h) + (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + b) - (4/3) * math.pi * (r**2 + 2*r*math.sin(math.pi/g)*math.sin(math.pi/g) + h + g)\ndef volume_cylinder_cone_cone_hollow_angle_right(r,h,g,b):\n    '''\n    Write a function to find th"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*math.pow(r,2)*h\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n < 1:\n        return -1\n    \n    m = 0\n    while n >= (1 << m):\n        m += 1\n        \n    return m-1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    i = 1\n    while (i * 2) <= n: \n        if (i * 2) ** 2 > n: \n            break\n        if (i * 2) ** 2 < n: \n            max_power = i * 2\n        i = i + 1\n    return max_power \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    max_pow = 0\n    \n    while n > 1: \n        n = n // 2\n        if n > max_pow: \n            max_pow = n\n    \n    return max_pow\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while(power_of_2 <= n):\n        power_of_2 *= 2\n    return power_of_2 -1\n    "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    low = 0\n    high = n\n    mid = 0\n    \n    while low <= high: \n        mid = low + (high - low) // 2\n        if mid > 0 and mid & (mid - 1) == 0:\n            return mid\n        elif mid > 0 and mid & (mid - 1)!= 0:\n            high = mid - 1\n        else: \n            low = mid + 1\n    return mid\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = 0\n    while n > 0:\n        if n >= 2**max:\n            max += 1\n    return max\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i <<= 1\n    return i >> 1\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def check(n):\n        while n > 0:\n            n = n >> 1\n        return n == 0\n    while check(n):\n        n >>= 1\n    return n\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return (n-1).bit_length()\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 0:\n        n >>= 1\n    return n\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 0:\n        n = n >> 1\n    return n\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = (n + 1)\n    while n % 2 == 0:\n        n >>= 1\n    return n\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def high(n):\n        return n.bit_length() - 1\n    while n > 0:\n        n = n >> 1\n    return high(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def high(n):\n        return n.bit_length() - 1\n    while n > 0:\n        n = n >> 1\n    return high(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    return 2**(high(n))\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    def half(n):\n        return power(n) >> 1\n    return half(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    def half(n):\n        return power(n) >> 1\n    return half(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    return 2**(highest_Power_of_2(n - 1))\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power(n):\n        if n == 2:\n            return 0\n        return 1 + power(n >> 1)\n    while n > 0:\n        n = n >> 1\n    return power(n)\n    \n    \ndef highest_Power_of_2(n):\n    '''\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<0:\n        print(\"Error: negative numbers not allowed\")\n        return\n    if n==0:\n        print(\"Error: No such power\")\n        return\n    max_power=0\n    power=0\n    while(True):\n        if(2**power<=n):\n            max_power=power\n            n-=2**power\n        else:\n            if max_power==0:\n                print(\"Error: No such power\")\n                return\n            break\n        power+=1\n    print(max_power)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 0\n    while 2**x <= n:\n        x += 1\n    return x\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    k = 1\n    while k*2 <= n:\n        k = k*2\n    return k\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1\n    return sum\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 2\n    if n == 0:\n        return lucas\n    if n == 1:\n        return lucas\n    for i in range(2, n):\n        lucas = lucas + lucas\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    lucas = find_lucas(n-1) + find_lucas(n-2)\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    elif n == 1:\n        return 2\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    def lucas_nth_number(n):\n        x = 2\n        result = 1\n        while x <= n:\n            result = result + 1\n            x = x + 1\n        return result\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return (list_.__add__([string.format(i) for i in list_]))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for x in range(len(list_)):\n        list_[x] = string % list_[x]\n    return list_\n    \ndef string_transform(list_):\n    '''\n    Write a function to convert the string representation of a list into a list.\n    '''\n    list_ = list_.replace(\"[\", \"\")\n    list_ = list_.replace(\"]\", \"\")\n    list_ = list_.replace(\"\\'\", \"\")\n    list_ = list_.replace(\" \", \"\")\n    list_ = list_.split(\",\")\n    for x in range(len(list_)):\n        list_[x] = int(list_[x])\n    return list_\n    \ndef count_occurences(list_):\n    '''\n    Write a function that returns the count of each item in a given list.\n    '''\n    for x in range(len(list_)):\n        list_[x] = list_.count(list_[x])\n    return list_\n    \ndef show_index(list_):\n    '''\n    Write a function that returns the index of each item in a given list.\n    '''\n    for x in range(len(list_)):\n        list_[x] = list_.index(list_[x])\n    return list_\n    \ndef print_list(list_):\n    '''\n    Write a function that returns the string representation of a given list.\n    '''\n    list_ = str(list_)\n    list_ = list_.replace(\"[\", \"\")\n    list_ = list_.replace(\"]\", \"\")\n    list_ = list_.replace(\"\\'\", \"\")\n    list_ = list_.replace(\" \", \"\")\n    return list_\n    \ndef print_list_sorted(list_):\n    '''\n    Write a function that returns the string representation of a given list, sorted in ascending order.\n    '''\n    list_.sort()\n    return print_list(list_)\n    \ndef sum_list(list_):\n    '''\n    Write a function that returns the sum of a given list.\n    '''\n    sum = 0\n    for x in range(len(list_)):\n        sum += list_[x]\n    return sum\n    \ndef reverse_list(list_):\n    '''\n    Write a function that returns the reversed list.\n    '''\n    list_ = list_.copy()\n    list_.reverse()\n    return list_\n    \ndef remove_duplicates(list_):\n    '''\n    Write a function that returns the new list that contains all unique elements of the given list.\n    '''\n    list_ = list_.copy()\n    if len(list_) == 0:\n        return list_\n    for x in range(len(list_)):\n        if list_[x] in list_[x+1:]:\n            list_.remove(list_[x])\n    return list_\n    \ndef double_list(list_):\n    '''\n    Write a function that returns the new list that contains twice each of its elements.\n    '''\n    list_ = list_.copy()\n    if len(list_) == 0:\n        return list_\n    for x in range(len(list_)):\n        list_.append(list_[x])\n    for x in range(len(list_)):\n        list_.append(list_[x])\n    return list_\n    \ndef add_two_numbers(number_1, number_2):\n    '''\n    Write a function that returns the sum of two given numbers.\n    '''\n    number_1 = int(number_1)\n    number_2 = int(number_2)\n    if number_1 >= number_2:\n        total = number_1 + number_2\n        return str(total)\n    else:\n        total = number_1 + number_2\n        return str(total)\n    \ndef add_three_numbers(number_1, number_2, number_3):\n    '''\n    Write a function that returns the sum of three given numbers.\n    '''\n    total = number_1 + number_2 + number_3\n    return str(total)\n    \ndef add_four_numbers(number_1, number_2, number_3, number_4):\n    '''\n    Write a function that returns the sum of four given numbers.\n    '''\n    total = number_1 + number_2 + number_3 + number_4\n    return str(total)\n    \ndef multiply_numbers(number_1, number_2):\n    '''\n    Write a function that returns the product of two given numbers.\n    '''\n    number_1 = int(number_1)\n    number_2 = int(number_2)\n    if number_1 >= number_2:\n        total = number_1 * number_2\n        return str(total)\n    else:\n        total = number_1 * number_2\n        return str(total)\n    \ndef multiply_three_numbers(number_1, number_2, number_3):\n    '''\n    Write a function that returns the product of three given numbers.\n    '''\n    total = number_1 * number_2 * number_3\n    return str(total)\n    \ndef multiply_four_numbers(number_1, number_2, number_3, number_4):\n    '''\n    Write a function that returns the product of four given numbers.\n    '''\n    total = number_1 * number_2 * number_3 * number_4\n    return str(total)\n    \ndef divide_numbers(number_1, number_2):\n    '''\n    Write a function that returns the quotient of two given numbers.\n    '''\n    number_1 = int(number_1)\n    number_2 = int(number_2)\n    if number_1 >= number_2:\n        total = number_1 / number_2\n        return str(total)\n    else:\n        total = number_1 / number_2\n        return str(total)\n    \ndef divide_three_numbers(number_1, number_2, number_3):\n    '''\n    Write a function that returns the quotient of three given numbers.\n    '''\n    total = number_1 / number_2 / number_3\n    return str(total)\n    \ndef divide_four_numbers(number_1, number_2, number_3, number_4):\n    '''\n    Write a function that returns the quotient of four given numbers.\n    '''\n    total = number_1 / number_2 / number_3 / number_4\n    return str(total)\n    \ndef get_size(list_):\n    '''\n    Write a function that returns the size of a given list.\n    '''\n    list_ = list_.copy()\n    if len(list_) == 0:\n        return 0\n    for x in range(len(list_)):\n        list_.pop()\n    return len(list_)\n    \ndef get_count_in_range(list_, start, end):\n    '''\n    Write a function that returns the count of elements of a given list, that are in a given range.\n    '''\n    list_ = list_.copy()\n    if end == None:\n        for x in range(len(list_)):\n            if list_[x] >= start:\n                list_.pop(x)\n    else:\n        for x in range(len(list_)):\n            if start <= list_[x] <= end:\n                list_.pop(x)\n    return len(list_)\n    \ndef get_count_in_list(list_, element):\n    '''\n    Write a function that returns the count of elements of a given list, that are equal to the given element.\n    '''\n    list_ = list_.copy()\n    if len(list_) == 0:\n        return 0\n    for x in range(len(list_)):\n        if list_[x] == element:\n            list_.pop(x)\n    return len(list_)\n    \ndef get_count_in_sublist(list_, start, end):\n    '''\n    Write a function that returns the count of elements of a given list, that are in a given sublist.\n    '''\n    list_ = list_.copy()\n    if end == None:\n        for x in range(len(list_)):\n            if start <= list_"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return[string.format(elem) for elem in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(string, list_) for list_ in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(string, '20s') % i for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        list_.append(string.format(item))\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)==0 and len(l2)==0:\n        return l3\n    if len(l1)==0:\n        return {l2[i] : l3[i] for i in range(len(l2))}\n    if len(l2)==0:\n        return {l1[i] : l3[i] for i in range(len(l1))}\n    return {l1[i] : {l2[j]: l3[i][j] for j in range(len(l2))} for i in range(len(l1))}\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = []\n    dct = {}\n    for i in range(len(l1)):\n        dct[l1[i]] = l2[i]\n        lst.append(dct)\n    lst.append(l3)\n    return lst\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    Dict = dict(zip(l1, l2))\n    Dict = dict(zip(l1, l2))\n    Dict = dict(zip(l1, l2))\n    Dict = dict(zip(l1, l2))\n    Dict = dict(zip(l1, l2))\n    Dict = dict(zip(l1, l2))\n    Dict = dict(zip(l1, l2))\n    Dict = dict(zip(l1, l2))\n    return Dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        l = []\n        for j in range(len(l2)):\n            l.append(l3[j])\n        d[l1[i]] = l\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dictionary = dict()\n    for i in range(len(l1)):\n        nested_dictionary[l1[i]] = l2[i]\n        nested_dictionary[l3[i]] = l2[i]\n    return nested_dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(l1)):\n        my_dict.update({l1[i]: l2[i], l3[i]: l1[i]})\n    return my_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    assert(len(l1) == len(l2))\n    assert(len(l2) == len(l3))\n    assert(len(l1) > 0)\n    assert(len(l2) > 0)\n    assert(len(l3) > 0)\n    \n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {'id': l2[i], 'name': l3[i]}\n    \n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = l2[i]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    final = dict()\n    for i in range(len(l1)):\n        final[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        final[l3[i]] = l1[i]\n    return final\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    assert type(n) is int and n>=0, 'Incorrect input'\n    if n == 0:\n        return 0\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1 or n == 2:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n<1:\n        return 0\n    a=1\n    b=2\n    c=3\n    d=4\n    max_sum = 0\n    while a<=n:\n        max_sum = max(max_sum,a+b+c+d)\n        a = a*2\n        b = b*2\n        c = c*3\n        d = d*4\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    def max_sum_helper(n):\n        nonlocal max_sum\n        if n == 1:\n            return n\n        return max(max_sum_helper(n/2), max_sum_helper(n/3), max_sum_helper(n/4), max_sum_helper(n/5), n)\n        \n    max_sum = max_sum_helper(n)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n):\n        max_sum = max( max_sum, (f(i//2) + f(i//3) + f(i//4) + f(i//5)), i)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    assert(n>=0)\n    result = 0\n    for i in range(1, n+1):\n        result = max(result, max(n/2, n/3, n/4, n/5) + i)\n    return result\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Function declaration\n    def max_sum(n):\n        # Base case\n        if n < 1:\n            return 0\n        # Recursive call\n        return max(max_sum(n/2) + max_sum(n/3) + max_sum(n/4) + max_sum(n/5), n)\n    \n    # Driver Code\n    print(\"Maximum sum of a set of integers using the above given equation is:\",max_sum(n))\n    "
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def helper_f (n):\n        if n == 0:\n            return 0\n        if n%2 == 0:\n            return helper_f(n/2) + n\n        else:\n            return helper_f(n/3) + n\n    \n    return helper_f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = []\n        if len(i) == max_len:\n            max_list.append(i)\n    return max_list\n    \nprint(max_length_list([\"a\", \"bbb\", \"ccc\"])) #should return [\"a\", \"bbb\", \"ccc\"]\nprint(max_length_list([\"bbb\", \"ccc\", \"aaa\", \"d\", \"eeee\", \"eee\"])) #should return [\"ccc\", \"aaa\", \"eee\"]\nprint(max_length_list([\"bbb\", \"ccc\", \"aaa\", \"d\"])) #should return [\"ccc\", \"aaa\", \"d\"]\nprint(max_length_list([1,2,3,4,5,6,7,8,9,0])) #should return [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nprint(max_length_list([\"bbb\", \"ccc\", \"aaa\", \"d\"])) #should return [\"ccc\", \"aaa\", \"d\"]\nprint(max_length_list([\"\"])) #should return []\nprint(max_length_list([])) #should return []\nprint(max_length_list([1,2,3,4,5,6,7,8,9,0])) #should return [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    temp_list = []\n    for item in input_list:\n        if len(item) >= max_len:\n            temp_list = input_list\n            max_len = len(item)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_string = i\n    return max_string\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = []\n    for i in input_list:\n        list_length.append(len(i))\n    return max(list_length)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = -9999\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    longest = 0\n    for i in input_list:\n        if len(i) > longest:\n            longest = len(i)\n    for i in input_list:\n        if len(i) == longest:\n            print(i)\n    return longest\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = max(len(x) for x in input_list)\n    max_list = []\n    for i in range(max_len):\n        tmp_list = []\n        for x in input_list:\n            if i < len(x):\n                tmp_list.append(x[i])\n        max_list.append(tmp_list)\n    return max_list\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = test_tup\n    if len(tup) < len(set(tup)):\n        print(\"No duplicate items\")\n        return False\n    else:\n        print(\"Duplicate items\")\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(test_tup)!= len(set_tup):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_list = []\n    for i in range(len(test_tup)):\n        if test_tup[i] not in distinct_list:\n            distinct_list.append(test_tup[i])\n    if len(distinct_list) == len(test_tup):\n        print(f'All elements are distinct')\n    else:\n        print(f'Not all elements are distinct')\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    is_distinct = True\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            is_distinct = False\n            break\n    return is_distinct\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(sorted(test_tup))\n    if len(test_tup) == len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set(str1)\n    if'' in char_set:\n        char_set.remove(' ')\n    if ',' in char_set:\n        char_set.remove(',')\n    if '.' in char_set:\n        char_set.remove('.')\n    if '-' in char_set:\n        char_set.remove('-')\n    if '/' in char_set:\n        char_set.remove('/')\n    if ':' in char_set:\n        char_set.remove(':')\n    if ';' in char_set:\n        char_set.remove(';')\n    if '?' in char_set:\n        char_set.remove('?')\n    if '!' in char_set:\n        char_set.remove('!')\n    if '(' in char_set:\n        char_set.remove('(')\n    if ')' in char_set:\n        char_set.remove(')')\n    if '{' in char_set:\n        char_set.remove('{')\n    if '}' in char_set:\n        char_set.remove('}')\n    if '[' in char_set:\n        char_set.remove('[')\n    if ']' in char_set:\n        char_set.remove(']')\n    if '<' in char_set:\n        char_set.remove('<')\n    if '>' in char_set:\n        char_set.remove('>')\n    if '_' in char_set:\n        char_set.remove('_')\n    if '-' in char_set:\n        char_set.remove('-')\n    if '|' in char_set:\n        char_set.remove('|')\n    if '`' in char_set:\n        char_set.remove('`')\n    if '~' in char_set:\n        char_set.remove('~')\n    for char in char_set:\n        if char_set.count(char) == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    res = dict()\n    for ch in str1:\n        if ch in res:\n            res[ch] = res[ch]+1\n        else:\n            res[ch] = 1\n    for k,v in res.items():\n        if v==1:\n            return k\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    char_set = set()\n    for char in str1:\n        char_set.add(char)\n    \n    for char in str1:\n        if char in char_set:\n            return char\n        \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    res = \"\"\n    count = {}\n    for i in str1:\n        count[i] = count.get(i, 0) + 1\n    for i in str1:\n        if count[i] == 1:\n            res = i\n            break\n    return res\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    set1 = set()\n    for i in str1:\n        if i not in set1:\n            set1.add(i)\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    string = str1\n    char_list = []\n    for char in string:\n        if char not in char_list:\n            char_list.append(char)\n        else:\n            continue\n    print(\"The first non-repeated character is: \",char_list[0])\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_dict = {}\n    for char in str1:\n        if char in str_dict:\n            str_dict[char] += 1\n        else:\n            str_dict[char] = 1\n    for key, value in str_dict.items():\n        if value == 1:\n            return key\n    return 'No repeating character'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1=list(str1)\n    cnt=0\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    letters = list(str1)\n    for letter in letters:\n        if letters.count(letter) == 1:\n            return letter\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) and (string[0] == string[-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string1 = string\n    string2 = string1[::-1]\n    return string1[0] == string2[0] and string1[-1] == string2[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if string[0] == string[-1] else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (len(string)>0 and len(string)<3 and len(string)>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # code goes here\n    return True if (re.match(regex, string)!= None) else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex,string) else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    print(f\"{a}, {b}, {c}\")\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    elif c <= a and c <= b:\n        return c\n    else:\n        return 0\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = []\n    if a <= b:\n        lst.append(a)\n        if c <= b:\n            lst.append(b)\n            lst.append(c)\n        else:\n            lst.append(c)\n            lst.append(b)\n    elif b < a:\n        lst.append(b)\n        if c <= a:\n            lst.append(a)\n            lst.append(c)\n        else:\n            lst.append(c)\n            lst.append(a)\n    elif a < b:\n        lst.append(a)\n        if c <= b:\n            lst.append(b)\n            lst.append(c)\n        else:\n            lst.append(c)\n            lst.append(b)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a,b,c])\n    median = numbers[len(numbers)//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c and b<a:\n        return b\n    else:\n        return c\nprint(median_numbers(3,4,2))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        if b >= c:\n            return a\n        else:\n            return b\n    if b >= a and b >= c:\n        if a >= c:\n            return b\n        else:\n            return a\n    if c >= a and c >= b:\n        if a >= b:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and b<c:\n        if a<=b:\n            return a\n        else:\n            return b\n    elif a<b and b>c:\n        if a<=b:\n            return a\n        else:\n            return c\n    else:\n        if a>b:\n            if a<=c:\n                return a\n            else:\n                return c\n        else:\n            if b<c:\n                return b\n            else:\n                return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list=[a,b,c]\n    list.sort()\n    if(list[0]==list[1]):\n        return list[0]\n    elif(list[1]==list[2]):\n        return list[1]\n    elif(list[0]==list[2]):\n        return list[0]\n    else:\n        return list[1]\nprint(median_numbers(1,2,3))"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>c and b>a:\n        return b\n    if c>a and c>b:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b <= c:\n        return b\n    if b <= a <= c:\n        return a\n    if c <= a <= b:\n        return a\n    if b <= c <= a:\n        return c\n    if a <= b <= c:\n        return b\n    if b <= c <= a:\n        return c\n    if a <= c <= b:\n        return c\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for num in nums:\n        digits.append(sum(int(i) for i in str(num)))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(sum_of_digits(i))\n    return new_list\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s += sum_of_digits(nums[i])\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums_list = []\n    for num in nums:\n        nums_list.append(str(num))\n    for num in nums_list:\n        num = int(num)\n        if len(str(num)) == 1:\n            print(num)\n            print(num+0)\n        else:\n            print(num)\n            print(num+num)\n            print(num+num+num)\n            print(num+num+num+num)\n    print(sum(map(int, nums_list)))\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in range(len(nums)):\n        num = nums[i]\n        while num > 0:\n            sum_of_digits += num % 10\n            num = num // 10\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = []\n    for num in nums:\n        # Convert to integer, sum and return\n        sums.append(sum(int(i) for i in str(num)))\n    return sums\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Example:\n    # sum_of_digits([12,345,2,6,7896]) # should return 944\n    # sum_of_digits([999,999,999]) # should return 3\n    # sum_of_digits([999,999,999,999]) # should return 4\n    \n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in range(len(nums)):\n        sum_of_digits += int(nums[i])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(map(int, list(str(num)))))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a,b=test_tup1\n    c,d=test_tup2\n    return ((a|b)^(c|d))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] ^ test_tup2[i], )\n    return new_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #print(tup1, tup2)\n    tup1 = test_tup1\n    tup2 = test_tup2\n    if len(tup1)!= len(tup2):\n        return False\n    \n    result = 0\n    for i in range(0, len(tup1)):\n        result = result ^ tup1[i]\n        \n    return result\n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup_one, tup_two = test_tup1[0], test_tup2[0]\n    print(\"xor tup1: \", tup_one)\n    print(\"xor tup2: \", tup_two)\n    \n    if len(tup_one)!= len(tup_two):\n        return None\n    \n    xor_result = []\n    for i in range(len(tup_one)):\n        xor_result.append(int(tup_one[i]) ^ int(tup_two[i]))\n        \n    return tuple(xor_result)\n    \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0]), (test_tup1[1] ^ test_tup2[1]), (test_tup1[2] ^ test_tup2[2])\n    \n    #SOLUTION:\n    #return (test_tup1[0] ^ test_tup2[0]) ^ (test_tup1[1] ^ test_tup2[1]) ^ (test_tup1[2] ^ test_tup2[2])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    # tup1 = (0, 1, 2, 3, 5)\n    # tup2 = (5, 5, 5, 2, 3)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #create a new list to store the result\n    result = []\n    #looping through the list of tuples\n    for i in range(0, len(test_tup1)):\n        #extracting the first tuple\n        first_tuple = test_tup1[i]\n        #extracting the second tuple\n        second_tuple = test_tup2[i]\n        #extracting the first tuple's length\n        first_length = len(first_tuple)\n        #extracting the second tuple's length\n        second_length = len(second_tuple)\n        #checking if the length of first tuple is equal to the length of second tuple\n        if first_length == second_length:\n            #concatenate the first and second tuple\n            result_tuple = first_tuple + second_tuple\n            #concatenate the result\n            result.append(result_tuple)\n        #if the length of first tuple is not equal to the length of second tuple, then concatenate the second tuple and empty list\n        else:\n            #concatenate the second tuple\n            result.append(second_tuple)\n    #return the concatenated tuple\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for i in range(len(test_list)):\n        freq.append(1)\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    print(len(freq_dict))\n    # freq_dict = {item: freq_dict[item] for item in freq_dict}\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(l) for l in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #freq = {}\n    #for x in test_list:\n    #    if x not in freq:\n    #        freq[x] = 1\n    #    else:\n    #        freq[x] += 1\n    freq = set()\n    for x in test_list:\n        if x not in freq:\n            freq.add(x)\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            freq_list.append((test_list[i],test_list[j]))\n    return len(set(freq_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = set(test_list)\n    return len(unique_tuple)\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    a=set(test_list)\n    return len(a)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(i) for i in test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    def add_tuple(tup1, tup2):\n        nested_tup = []\n        for i in range(len(tup1)):\n            nested_tup.append(tup1[i] + tup2[i])\n        return nested_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1, test_tup2 = map(tuple, (test_tup1, test_tup2))\n    return tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Your code here\n    for i in range(len(test_tup1)):\n        tuple_element = test_tup1[i] + test_tup2[i]\n        test_tup1[i] = tuple_element\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    a,b = test_tup1\n    c,d = test_tup2\n    \n    return (a + c, b + d)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        tup = ()\n        for i in range(len(test_tup1)):\n            tup += (test_tup1[i] + test_tup2[i],)\n        return tup\n    else:\n        return None\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tuple_list = []\n    for idx in range(len(test_tup1)):\n        nested_tuple_list.append((test_tup1[idx] + test_tup2[idx],))\n    return nested_tuple_list\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tuple = ()\n    if len(test_tup1) > len(test_tup2):\n        longer_tuple = test_tup1\n        shorter_tuple = test_tup2\n    else:\n        longer_tuple = test_tup2\n        shorter_tuple = test_tup1\n    for i in range(len(shorter_tuple)):\n        if i < len(longer_tuple):\n            result_tuple += (longer_tuple[i] + shorter_tuple[i], )\n        else:\n            result_tuple += (shorter_tuple[i], )\n    return result_tuple\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \nprint(minimum(4,5))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return(min(a,b))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min_num = None\n    if a < b:\n        min_num = a\n    else:\n        min_num = b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \nprint(minimum(10,20))  # 10\nprint(minimum(20,10))  # 10\nprint(minimum(10,10))  # 10\nprint(minimum(10,20))  # 10\nprint(minimum(10,20))  # 10\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        print(\"a is greater than b\")\n    else:\n        print(\"b is greater than a\")\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(\"Minimum is \",a)\n    else:\n        print(\"Minimum is \",b)\n        \nminimum(10,5)\nminimum(10,10)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # if tuplex in tuple1:\n    #     return True\n    # else:\n    #     return False\n    return tuplex in tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"True\")\n    else:\n        print(\"False\")\n    \ndef check_setx(setx,set1): \n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    if setx in set1:\n        print(\"True\")\n    else:\n        print(\"False\")\n    \ndef check_sety(sety,set1): \n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    if sety in set1:\n        print(\"True\")\n    else:\n        print(\"False\")\n    \ndef check_setz(setz,set1): \n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    if setz in set1:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \ndef check_set(set1): \n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    setx=int(input(\"Enter the first element : \"))\n    sety=int(input(\"Enter the second element : \"))\n    setz=int(input(\"Enter the third element : \"))\n    set1.add(setx)\n    set1.add(sety)\n    set1.add(setz)\n    check_setx(setx,set1)\n    check_sety(sety,set1)\n    check_setz(setz,set1)\n    \ndef check_set1(set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    set1.add(int(input(\"Enter the element : \")))\n    if set1:\n        for x in set1:\n            print(x,end=\" \")\n        print()\n    else:\n        print(\"Empty set.\")\n    \ndef check_set2(set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    for x in set1:\n        print(x,end=\" \")\n    print()\n    \ndef check_set3(set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    if set1:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n        else:\n            return False\n    \n    \ndef filter_tuple(tuplex,tuple1): \n    '''\n    Write a function to filter a tuple based on whether an element exists within a tuple or not.\n    '''\n    return tuple(filter(lambda i: i in tuple1, tuplex))\n    \ndef filter_list(list1,list2):\n    '''\n    Write a function to filter the list based on the filter_tuple function.\n    '''\n    return filter(lambda i: check_tuplex(i,list2), list1)\n    \n    \n    \n    \ndef filter_list_2(list1,list2):\n    '''\n    Write a function to filter the list based on the filter_tuple function.\n    '''\n    return filter(lambda i: check_tuplex(i,list2), list1)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1)==0:\n        print('not in',tuple1)\n    else:\n        print('in',tuple1)\n    \n        \nif __name__ == '__main__':\n    tuplex=('one','two','three','four','five','six','seven','eight','nine','ten')\n    tuple1=(10,20,30)\n    # a=check_tuplex(tuplex,tuple1)\n    check_tuplex(tuplex,tuple1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(x in tuplex for x in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    x = tuplex.index(tuple1)\n    return x \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 == tuplex else False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            print(\"{} is a member of the tuple\".format(i))\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(x,\"is even\") \n    else: \n        print(x,\"is odd\") \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x & -x\n    return(x!= 0)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return ((x & 1) == 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return ((x ^ (x+1)) + 1) & 1\n    \ndef find_Parity1(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n    \ndef find_Parity3(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n    \ndef find_Parity4(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return not x & (x + 1)\n    \ndef find_Parity5(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return not x & (x + 1)\n    \ndef find_Parity6(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return not x & (x + 1)\n    \ndef find_Parity7(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity8(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity9(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity10(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity11(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity12(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity13(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity14(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity15(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity16(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity17(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity18(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity19(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity20(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity21(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity22(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity23(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity24(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity25(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity26(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity27(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity28(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity29(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity30(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity31(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity32(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity33(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity34(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity35(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity36(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity37(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity38(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity39(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity40(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity41(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity42(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity43(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n    \ndef find_Parity44(x):\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2 == 0):\n        return \"Parity is Even\"\n    else:\n        return \"Parity is Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x & 1 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    for i in range(len(n) - 1):\n        if n[i] > n[i + 1]:\n            n[i], n[i + 1] = n[i + 1], n[i]\n    n = \"\".join(n)\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    n_sorted = sorted(n_str)\n    ans = 0\n    for i in range(len(n_sorted) - 1):\n        ans += int(n_sorted[i]) * 10 ** (len(n_sorted) - 1 - i)\n    ans += int(n_sorted[-1])\n    return ans\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        digit_list = list(map(int,str(n)))\n        #print(digit_list)\n        max_digit = max(digit_list)\n        #print(max_digit)\n        for i in range(len(digit_list)-1):\n            if digit_list[i] < max_digit and digit_list[i+1] > digit_list[i]:\n                #print(i,i+1)\n                tmp = digit_list[i]\n                digit_list[i] = digit_list[i+1]\n                digit_list[i+1] = tmp\n        \n        return int(''.join(map(str,digit_list)))\n    \n    \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    max_l = len(n)\n    while max_l > 1:\n        max_l -= 1\n        j = 0\n        while j <= max_l:\n            if n[j] < n[max_l]:\n                return int(''.join(reversed(n)))\n            j += 1\n        n = ''.join(reversed(n))\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # if input is 0, return 0\n    if n == 0:\n        return n\n    # return next bigger number by rearranging the digits\n    return int(''.join(sorted(str(n), reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = list(str(n))\n    temp = -1\n    for i in range(len(num)-1):\n        if temp < int(num[i]):\n            temp = int(num[i])\n            new_num = num[i+1:]\n            new_num.extend(sorted(num[:i], reverse=True))\n            new_num.append(temp)\n            print(new_num)\n            return int(''.join(new_num))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s=str(n)\n    temp=\"\"\n    for i in range(len(s)-1,-1,-1):\n        temp=temp+s[i]\n    return int(temp)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0: return 0\n    str_num = str(n)\n    str_num = str_num[::-1]\n    list_num = list(str_num)\n    list_num.sort()\n    list_num = ''.join(list_num)\n    # print(list_num)\n    return int(list_num)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 9:\n        return n\n    result = []\n    while n > 0:\n        result.append(n%10)\n        n = n//10\n    result = result[::-1]\n    while len(result) < 4:\n        result.append(0)\n    return int(''.join(str(i) for i in result))\n    "
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or not k:\n        return []\n    if len(nums1) < k or len(nums2) < k:\n        return []\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-1 * nums1[i], nums2[i]))\n    result = []\n    for i in range(k):\n        min1, min2 = heapq.heappop(heap)\n        if min1[0] < -1 * min2:\n            result.append([-1 * min1[0], min2])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (num, nums2.index(num), nums1.index(num)))\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[2])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or not k:\n        return\n    #build a max heap of (n, n+i) tuples, where n = second array, i = first array\n    #time: O(n log n)\n    #space: O(n)\n    n = len(nums2)\n    pairs = [(nums2[i], nums1[i]) for i in range(n)]\n    heapq.heapify(pairs)\n    #sort by the first element\n    #time: O(n)\n    #space: O(n)\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(pairs))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # 1. Count the occurrences of each value in the first array and second array\n    # 2. Sort the counts and then iterate through nums1 and nums2\n    # 3. If the pairs count is less than k, return None\n    # 4. Otherwise, return the pairs\n    count = []\n    for i in range(len(nums1)):\n        count.append([nums1[i], nums2[i]])\n    count.sort()\n    pairs = []\n    pairs.append([count[0], count[0][0]])\n    for i in range(len(count)):\n        if len(pairs) == k:\n            break\n        if count[i][1] < count[i+1][1]:\n            pairs.append(count[i+1])\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # idea: same as find smallest k pairs in two sorted array, just all three are sorted\n    #  we need to use min heap, heapq.heapify(nums) and heapq.heappushpop(nums,...)\n    #  we need to use this heaps to get k smallest pairs\n    #  we maintain k min heap and push -1 to indicate unsorted\n    #  we use heapq.heappop and heapq.heappushpop to maintain min heap \n    #  we use a min heap to maintain k smallest pairs\n    #  if only one element is in the 2nd array, we need to push it into the heap, and in the case of duplicate element, we need to push it with a -1 key\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    l = len(nums1)\n    r = len(nums2)\n    k_c = k + 1\n    def lk(arr, k):\n        lk = 0\n        for i in range(0, k+1):\n            lk += arr[i] * i\n        return lk\n    def rk(arr, k):\n        rk = 0\n        for i in range(k, len(arr)):\n            rk += arr[i] * (len(arr)-i)\n        return rk\n    \n    def min_pairs(arr1, arr2, k):\n        '''\n        Note - we can use heapq to solve this problem\n        '''\n        heap = []\n        for i in range(k):\n            heapq.heappush(heap, (lk(arr1, i), i, 0))\n        for i in range(k, len(arr1)):\n            if len(heap) == 0:\n                break\n            while arr1[i] > heap[0][0]:\n                heapq.heappop(heap)\n            heapq.heappush(heap, (rk(arr2, i-heap[0][2]) + heap[0][1], heap[0][1], i))\n        output = []\n        for i in range(len(heap)):\n            output.append((arr1[heap[i][1]], arr2[heap[i][2]]))\n        return output\n    \n    arr1 = list(nums1)\n    arr2 = list(nums2)\n    print(min_pairs(arr1, arr2, k_c))\n    return min_pairs(arr1, arr2, k_c)"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # time complexity: O(n1 + n2)\n    # space complexity: O(n1 + n2)\n    result = []\n    min_heap = []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # return [(a, b) for a in nums1 for b in nums2 if a < b]\n    # return [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2)) if nums1[i] < nums2[j]]\n    heap = [(nums1[i], nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n    heapq.heapify(heap)\n    res = []\n    while k:\n        v, w, i, j = heapq.heappop(heap)\n        res.append((v, w))\n        if i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i + 1], w, i + 1, j))\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums2[j + 1], v, i, j + 1))\n        k -= 1\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[i], i))\n    result = []\n    for i in range(min(k, len(nums1))):\n        result.append((nums1[heapq.heappop(min_heap)[1]], nums2[heapq.heappop(min_heap)[1]]))\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1e8\n    for tup in list1:\n        # print(tup)\n        if tup[0] == 1 and tup[1] == 1:\n            continue\n        if tup[0] == 0 and tup[1] == 0:\n            continue\n        if tup[0] == 0 and tup[1] == 1:\n            min_product = min(min_product, tup[0] * tup[1])\n            continue\n        if tup[0] == 1 and tup[1] == 0:\n            min_product = min(min_product, tup[0] * tup[1])\n            continue\n        min_product = min(min_product, tup[0] * tup[1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(map(lambda x: x[0]*x[1],list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #print(list1)\n    #print(len(list1))\n    if len(list1) < 2:\n        return None\n    elif len(list1) == 2:\n        return (list1[0][0] * list1[1][0],list1[0][1] * list1[1][1])\n    else:\n        #print(len(list1))\n        first = (list1[0][0] * list1[1][0],list1[0][1] * list1[1][1])\n        #print(first)\n        second = min_product_tuple(list1[2:])\n        #print(second)\n        return (first,second)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for item1,item2 in zip(list1,list1):\n        if item1 > item2:\n            list2.append(item2)\n        else:\n            list2.append(item1)\n    print('Minimum value is:', min(list2))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        if list1[i][0] * list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    min_product = 1\n    \n    if list1:\n        for i in range(len(list1)-1):\n            if min_product > list1[i][0] * list1[i+1][1]:\n                min_product = list1[i][0] * list1[i+1][1]\n    \n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    if len(list1) == 1:\n        return list1[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min = list1[0][0]*list1[0][1]\n    for i in range(1, len(list1)):\n        if (list1[i][0] * list1[i][1])<min:\n            min = list1[i][0] * list1[i][1]\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # list2 = []\n    # for i in range(len(list1)):\n    #     list2.append((list1[i][0], list1[i][1]))\n    # return min(list2, key = lambda x:x[1])\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    min = list1[0]\n    min_prod = 1\n    for i in range(1, n):\n        if list1[i] < min:\n            min = list1[i]\n            min_prod = 1\n        elif list1[i] == min:\n            min_prod *= list1[i]\n    return min_prod\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in range(1,len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # min = listval[0]\n    # for val in listval:\n    #     if val < min:\n    #         min = val\n    # return min\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    n=[]\n    m=[]\n    l=[]\n    for i in listval:\n        if type(i)==list:\n            for j in i:\n                n.append(j)\n        else:\n            n.append(i)\n    for i in range(len(n)):\n        if i%2==0:\n            m.append(n[i])\n        else:\n            m.append(n[i])\n    for i in range(len(m)):\n        if i%2==0:\n            l.append(m[i])\n        else:\n            l.append(m[i])\n    return min(l)\nprint(min_val([[4,4,4],[[1,2,4,4],[3,4,5,6],[8,4,5,2]],[[9,9,9,9]],1,6,9,3,5,3,4,3,4,1,1,4,3,4,5,3,2,5,1,1,1,4,2,2,1,4,6,7,3,2,1,4,5,2,1,1,2,1,6,2,5,1,4,3,3,4,4,2,1,3,5,4,2,5,4,5,1,4,2,4,3,4,5,4,3,5,2,5,4,4,1,1,2,3,3,2,4,1,1,3,2,5,5,1,1,2,4,1,2,4,1,4,2,2,2,2,4,1,2,1,1,2,1,4,1,1,3,3,1,4,5,1,2,5,2,3,1,1,4,3,1,4,2,5,3,1,2,1,4,3,1,1,3,3,5,1,1,4,2,4,3,4,4,4,4,4,3,4,1,4,3,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    def min_helper(l):\n        if len(l) == 1:\n            return l[0]\n        if l[0] < min_helper(l[1:]):\n            return l[0]\n        if l[0] == min_helper(l[1:]):\n            return min_helper(l[2:])\n    return min_helper(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \n    \ndef mean_val(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    return sum(listval)/len(listval)\n    \n    \ndef sort_by_attr(dictval, attr, value):\n    '''\n    Write a function to sort a dictionary of heterogeneous values using a specific attribute.\n    '''\n    return sorted(dictval, key=lambda k: (k[attr], k[value]))\n    \n    \ndef sorted_by_attr(dictval, attr, value):\n    '''\n    Write a function to sort a dictionary of heterogeneous values using a specific attribute.\n    '''\n    return sorted(dictval, key=lambda k: (k[attr], k[value]))\n    \n    \ndef num_and_char(listval):\n    '''\n    Write a function to find the number of elements having an even and the number of elements having an odd number of characters in a given heterogeneous list.\n    '''\n    count_odd, count_even = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            count_even += 1\n        elif (val % 2) == 1:\n            count_odd += 1\n    return count_even, count_odd\n    \n    \ndef even_and_odd(listval):\n    '''\n    Write a function to find the number of elements having an even and the number of elements having an odd number of characters in a given heterogeneous list.\n    '''\n    count_odd, count_even = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            count_even += 1\n        elif (val % 2) == 1:\n            count_odd += 1\n    return count_even, count_odd\n    \n    \ndef mean_of_even_odd(listval):\n    '''\n    Write a function to find the mean of elements having an even number of characters and the number of elements having an odd number of characters in a given heterogeneous list.\n    '''\n    even_count, odd_count = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            even_count += 1\n        elif (val % 2) == 1:\n            odd_count += 1\n    return even_count, odd_count\n    \n    \ndef find_keys_with_value(dictval, value):\n    '''\n    Write a function to find the keys in a dictionary having a given value.\n    '''\n    return [key for key, val in dictval.items() if val == value]\n    \n    \ndef find_keys_with_value2(dictval, value):\n    '''\n    Write a function to find the keys in a dictionary having a given value.\n    '''\n    return [key for key, val in dictval.items() if val == value]\n    \n    \ndef max_key_in_value(dictval):\n    '''\n    Write a function to find the key in a dictionary having the maximum value.\n    '''\n    return max(dictval.items(), key = lambda x: x[1])\n    \n    \ndef find_keys_with_max_value(dictval):\n    '''\n    Write a function to find the keys in a dictionary having the maximum value.\n    '''\n    return max(dictval.items(), key = lambda x: x[1])\n    \n    \ndef min_key_in_value(dictval):\n    '''\n    Write a function to find the key in a dictionary having the minimum value.\n    '''\n    return min(dictval.items(), key = lambda x: x[1])\n    \n    \ndef find_keys_with_min_value(dictval):\n    '''\n    Write a function to find the key in a dictionary having the minimum value.\n    '''\n    return min(dictval.items(), key = lambda x: x[1])\n    \n    \ndef find_keys_with_min_max_value(dictval):\n    '''\n    Write a function to find the keys in a dictionary having the minimum and maximum values.\n    '''\n    return (min(dictval.items(), key = lambda x: x[1]), max(dictval.items(), key = lambda x: x[1]))\n    \n    \ndef find_keys_with_min_max_min_value(dictval):\n    '''\n    Write a function to find the keys in a dictionary having the minimum, maximum and minimum values.\n    '''\n    return (min(dictval.items(), key = lambda x: x[1]), max(dictval.items(), key = lambda x: x[1]), min(dictval.items(), key = lambda x: x[1]))\n    \n    \ndef diff_between_min_and_max(dictval):\n    '''\n    Write a function to find the difference between the minimum and maximum values of a dictionary.\n    '''\n    return max(dictval.items(), key = lambda x: x[1])[1] - min(dictval.items(), key = lambda x: x[1])[1]\n    \n    \ndef count_odd_even(listval):\n    '''\n    Write a function to find the number of odd and the number of even elements in a given heterogeneous list.\n    '''\n    odd_count, even_count = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            even_count += 1\n        elif (val % 2) == 1:\n            odd_count += 1\n    return odd_count, even_count\n    \n    \ndef sum_of_odd_even(listval):\n    '''\n    Write a function to find the sum of odd and the sum of even elements in a given heterogeneous list.\n    '''\n    odd_sum, even_sum = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            even_sum += val\n        elif (val % 2) == 1:\n            odd_sum += val\n    return odd_sum, even_sum\n    \n    \ndef odd_even_count(listval):\n    '''\n    Write a function to find the number of odd and the number of even elements in a given heterogeneous list.\n    '''\n    odd_count, even_count = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            even_count += 1\n        elif (val % 2) == 1:\n            odd_count += 1\n    return odd_count, even_count\n    \n    \ndef odd_even_sum(listval):\n    '''\n    Write a function to find the sum of odd and the sum of even elements in a given heterogeneous list.\n    '''\n    odd_sum, even_sum = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            even_sum += val\n        elif (val % 2) == 1:\n            odd_sum += val\n    return odd_sum, even_sum\n    \n    \ndef even_odd_sum(listval):\n    '''\n    Write a function to find the sum of even and the sum of odd elements in a given heterogeneous list.\n    '''\n    even_sum, odd_sum = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            even_sum += val\n        elif (val % 2) == 1:\n            odd_sum += val\n    return odd_sum, even_sum\n    \n    \ndef sum_of_odd_even_count(listval):\n    '''\n    Write a function to find the sum of even and the sum of odd elements in a given heterogeneous list.\n    '''\n    odd_sum, even_sum = 0, 0\n    for val in listval:\n        if (val % 2) == 0:\n            even_sum += val\n        elif (val % 2) == 1:\n            odd_sum += val\n    return odd_sum, even_sum\n    \n    \ndef odd_even_count_sum(listval):\n    '''\n    Write a function to find the number of odd and the number of even elements in a given heterogeneous list.\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = word.split('_')\n    return s[0] + ''.join(i.title() for i in s[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('(.)([A-Z][a-z]+)')\n    s1 = pattern.sub(r'\\2 \\1',word)\n    s2 = s1.title()\n    return s2\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #loop till get the first upper case character\n    word = re.sub('_',' ',word)\n    first = re.sub('[^A-Za-z0-9]+','', word)\n    first = re.sub(' +','', first)\n    first = first.split(' ')\n    first = list(filter(None, first))\n    res = []\n    for i in range(len(first)):\n        if first[i].isupper():\n            res.append(first[i])\n        else:\n            res.append(first[i].upper())\n    res = ''.join(res)\n    return res\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Your code here\n    return ''.join(map(str.capitalize, word.split('_')))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return word.title()\n    list1 = list(word)\n    new_list = []\n    i = 0\n    while i < len(list1):\n        if list1[i] == \"_\":\n            new_list.append(list1[i+1])\n            new_list.append(list1[i+2])\n            i += 2\n        else:\n            new_list.append(list1[i])\n        i += 1\n    return \"\".join(new_list)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for i in word:\n        result = result + i.capitalize()\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # check whether it is a valid word or not\n    if not re.search(r'[a-z0-9]', word):\n        return 'Error: Input must be a valid word'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Your Code here\n    word = word.replace(\"_\",\" \")\n    x = word.split(\" \")\n    n = len(x)\n    m = str(x[n-1])\n    for i in range(0,n-2):\n        m += \" \" + x[i+1]\n    return(m)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_str = ''\n    camel_case = word.split('_')\n    for i in camel_case:\n        new_str += i.title()\n    return new_str\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.split('_')).title()\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if type(l) == list:\n        a = []\n        for i in range(len(l)):\n            if l[i] % 2 == 0:\n                a.append(l[i])\n        return a\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [int(i) for i in l]\n    return [i for i in l if i % 2 == 0]\n    \n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2==0:\n            del l[i]\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[::2]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(filter(lambda x: x%2==0,l))\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.pop(i)\n    return l\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7]))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #return list(filter(lambda x: x % 2 == 0,l))\n    odd_numbers = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            odd_numbers.append(l[i])\n    return odd_numbers\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2!=0]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list=[]\n    for i in l:\n        if i%2==0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Remove odd numbers using while loop\n    while(l):\n        if l[0] % 2!= 0:\n            l.remove(l[0])\n        else:\n            break\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = []\n    for i in range(len(list1)):\n        nth_element.append(list1[i][n])\n    return nth_element\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    length = len(list1)\n    index = n-1\n    for i in range(length):\n        if i == index:\n            return list1[i]\n        index += 1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n - 1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #list1 = input(\"Enter the list: \")\n    #n = input(\"Enter the nth element you want to get: \")\n    return(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Create a new list from the given list of tuples\n    new_list = []\n    for tup in list1:\n        new_list.append(tup[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i)\n            break\n    else:\n        print(\"No Overlapping values found\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        # only the longer list is checked\n        if len(list1) > len(list2):\n            list1,list2 = list2,list1\n        for i in range(len(list1)):\n            # if there is any common element in the shorter list, return True\n            if list1[i] in list2:\n                return True\n        return False\n    else:\n        if len(list1) < len(list2):\n            # only the longer list is checked\n            if len(list1) < len(list2):\n                list1,list2 = list2,list1\n            for i in range(len(list2)):\n                # if there is any common element in the shorter list, return True\n                if list2[i] in list1:\n                    return True\n            return False\n        else:\n            # both the lists are of same length\n            for i in range(len(list1)):\n                # if there is any common element in the shorter list, return True\n                if list1[i] in list2:\n                    return True\n            return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print(\"List1: {}\\nList2: {}\".format(list1,list2))\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            continue\n    return False\n    \ndef missing(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence is not in a sequence or not.\n    '''\n    print(\"List1: {}\\nList2: {}\".format(list1,list2))\n    for i in list1:\n        if i not in list2:\n            return True\n        else:\n            continue\n    return False\n    \ndef reversed_value(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence is not in a sequence or not.\n    '''\n    print(\"List1: {}\\nList2: {}\".format(list1,list2))\n    for i in list1:\n        if i not in list2:\n            return True\n        else:\n            continue\n    return False\n    \ndef non_overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence is not in a sequence or not.\n    '''\n    print(\"List1: {}\\nList2: {}\".format(list1,list2))\n    for i in list1:\n        if i in list2:\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return False\n    elif len(list1) == 0:\n        return True\n    elif len(list2) == 0:\n        return True\n    else:\n        if list1[0] == list2[0]:\n            return overlapping(list1[1:],list2[1:])\n        else:\n            return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    x=0\n    for i in list1:\n        if i in list2:\n            x+=1\n            print(i,end=\" \")\n    if x==0:\n        print(\"Not Overlapping\")\n    else:\n        print(\"Overlapping\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n        \n        \n    "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    start = 0\n    end = len(arr) -1\n    max_prod = 0\n    while (start < end):\n        prod = arr[start] * arr[end]\n        if prod > max_prod:\n            max_prod = prod\n        if prod == max_prod:\n            return max_prod\n        elif prod < max_prod:\n            max_prod = prod\n        start += 1\n        end -= 1\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    return (arr[0]*arr[1])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    print(arr)\n    max_prod = arr[0] * arr[1]\n    print(max_prod)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = -999999\n    min_num = 9999999\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]*arr[i+1] > max_num:\n            max_num = arr[i]*arr[i+1]\n        if arr[i]*arr[i+1] < min_num:\n            min_num = arr[i]*arr[i+1]\n    return max_num,min_num\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    #print(arr)\n    product = 1\n    count = 1\n    for i in range(len(arr)-1):\n        if arr[i]!=0:\n            count += 1\n        if product*arr[i]<arr[i+1]:\n            product = product*arr[i]\n            count = 1\n        if product*arr[i] == arr[i+1]:\n            count+=1\n    print(\"highest product is:\",product)\n    print(\"count of product is:\",count)\nmax_Product([2,4,1,-4,6,-5,2,7,8])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    print(arr)\n    max_product = 0\n    for i in range(len(arr)-2):\n        for j in range(i+1,len(arr)-1):\n            for k in range(j+1,len(arr)):\n                if arr[i]*arr[j]*arr[k] > max_product:\n                    max_product = arr[i]*arr[j]*arr[k]\n                    print(arr[i],arr[j],arr[k])\n                    print(max_product)\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse = True)\n    print(arr)\n    \n    max_val = 0\n    for i in range(len(arr)-1):\n        if(arr[i]*arr[i+1] > max_val):\n            max_val = arr[i]*arr[i+1]\n    \n    print(max_val)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = 0\n    max_value = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i] * arr[j] > result):\n                result = arr[i] * arr[j]\n                max_value = max(max_value, arr[i])\n                max_value = max(max_value, arr[j])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = -1\n    max_index = -1\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                max_index = i\n                break\n    print(max_index)\n    print(max_product)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    arr.sort()\n    p=1\n    q=1\n    for i in range(1,n):\n        if arr[i]>0:\n            p=max(p,arr[i])\n        else:\n            q=max(q,arr[i])\n    if p==0 and q==0:\n        return -1\n    if p==0:\n        return q\n    if q==0:\n        return p\n    return p*q\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    def common(arr): \n        first = arr[0][0] \n        for i in range(1, len(arr)): \n            if first not in arr[i]: \n                return first \n        return -1\n    \n    return common(Input) \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    fst_element = []\n    lst_element = []\n    for i in Input: \n        fst_element.append(i[0])\n    for j in Input: \n        lst_element.append(j[1])\n    com_element = list(set(fst_element) & set(lst_element))\n    if len(com_element) == 0: \n        print(\"No common element found\")\n    else:\n        print(\"Common element is: \", com_element[0])\n    return\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dic = {}\n    for i in Input:\n        if i[0] in dic:\n            dic[i[0]] += 1\n        else:\n            dic[i[0]] = 1\n    if len(dic) == 1:\n        return [next(iter(dic))]\n    else:\n        return [(next(iter(dic))) for i in range(len(dic))]\n        \nprint(group_tuples([('a',1),('b',2),('b',1),('c',4),('a',1),('b',1),('a',3)]))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = set(Input)\n    return list(Input)\n    #return [key for key, _ in collections.Counter(Input).items()]\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print('Input is:', Input)\n    new_list = []\n    for i in range(len(Input)):\n        new_list.append(Input[i][0])\n    print('Common first elements are: ', set(new_list))\n    return new_list\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    A = []\n    B = []\n    Common = []\n    for i in range(0,len(Input)):\n        A.append(Input[i][0])\n    for i in range(0,len(Input)):\n        B.append(Input[i][1])\n    for i in range(0,len(Input)):\n        if A[i] == B[i]:\n            Common.append(A[i])\n    return Common\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Return if the input is empty\n    if not Input:\n        return False\n    # Get the first element of the list of tuple\n    first_element = Input[0]\n    # Initialize the variable to store the common first element\n    common_first_element = first_element\n    # Initialize the variable to store the common count\n    common_count = 1\n    for i in range(1, len(Input)):\n        # Check if the current element is common with the first element\n        if first_element == Input[i]:\n            # Increment the count\n            common_count += 1\n        # Update the first element if needed\n        if common_count == len(Input):\n            common_first_element = first_element\n    # Return the common first element\n    return common_first_element\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    s = set()\n    for i in Input:\n        if i[0] in s:\n            return i[0]\n        else:\n            s.add(i[1])\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common=[]\n    for x in range(len(Input)):\n        Common.append(set(Input[x]) & set(Input[x+1]))\n    Common = tuple(Common)\n    return Common\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    First = []\n    Common_first = []\n    for i in Input:\n        First.append(i[0])\n    Common_first = list(set(First))\n    return Common_first\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 1: \n        return lst[0]\n    else: \n        return Find_Max(lst[1:]) \n        \n    \n    \n    \n    \ndef Rotate_List(lst):\n    '''\n    Write a python function to rotate a list by N.\n    '''\n    \n    n = len(lst)\n    if n == 0: \n        return lst\n    else: \n        lst = lst[1:] + [lst[0]]\n        return lst\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # write your python function here\n    max_ = 0\n    for i in range(0,len(lst)):\n        if(len(lst[i]) > max_):\n            max_ = len(lst[i])\n            \n    return max_\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        print(\"\\nThere are no elements in the list\")\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        length = len(lst[0])\n        for i in range(1, len(lst)):\n            if len(lst[i]) > length:\n                length = len(lst[i])\n                Max_length = lst[i]\n        return Max_length\nlst = [[1,2,3],[4,5,6],[7,8,9]]\nFind_Max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max1 = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max1:\n            max1 = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max1:\n            return lst[i]\n            break\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = 0\n    for i in range(len(lst)): \n        if (len(lst[i])) > max_length: \n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element\n    "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x=0\n    for i in range(len(lst)):\n        if(len(lst[i])>x):\n            x=len(lst[i])\n    return lst[x]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if (len(lst[i]) > max_len):\n            max_len = len(lst[i])\n    for j in range(len(lst)):\n        if (len(lst[j]) == max_len):\n            print(\"Element : \",lst[j])\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)>0:\n        for i in range(len(lst)):\n            if len(lst[i])>len(lst[i+1]):\n                max=i\n    else:\n        max=None\n    return max\ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if len(lst)>0:\n        for i in range(len(lst)):\n            if len(lst[i])<len(lst[i+1]):\n                min=i\n    else:\n        min=None\n    return min\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    result = 0\n    for i in lst:\n        if len(i)>=result:\n            result=len(i)\n            if result == len(i):\n                return i\n            else:\n                return i\n                \n    \n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_val = 0\n    for i in range(len(lst)): \n        if max_len <= len(lst[i]): \n            max_len = len(lst[i]) \n            max_val = lst[i] \n    return max_val\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    print(sum(list1)*len(list1))\n    return\nround_and_sum([1.1, 2.2, 3.3])\nround_and_sum([1.0, 2.0, 3.0])\nround_and_sum([1.01, 2.01, 3.01])\nround_and_sum([1.001, 2.001, 3.001])\nround_and_sum([1.0001, 2.0001, 3.0001])\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    i = 0\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(round(list1[i]))\n    \n    total = 0\n    for i in range(len(list2)):\n        total += list2[i] * len(list2)\n    print(total)\n    \n    \ndef get_input():\n    '''\n    Write a function that prompts the user to enter a series of numbers and then converts it to a list.\n    '''\n    \n    list1 = []\n    while True:\n        num1 = int(input(\"Enter a number : \"))\n        if num1 == 0:\n            break\n        list1.append(num1)\n    \n    return list1\n    \ndef find_single_numbers(list1):\n    '''\n    Write a function that takes a list of numbers as input and returns the indices of all the numbers in the list that are even.\n    '''\n    \n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            print(i)\n            \ndef first_last_values(list1):\n    '''\n    Write a function that takes a list as input and returns a list with the first and last elements of the list.\n    '''\n    \n    list2 = []\n    list2.append(list1[0])\n    list2.append(list1[len(list1)-1])\n    \n    return list2\n    \ndef max_of_list(list1):\n    '''\n    Write a function that takes a list of numbers and returns the maximum of the list.\n    '''\n    \n    max_n = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > max_n:\n            max_n = list1[i]\n    \n    return max_n\n    \ndef min_of_list(list1):\n    '''\n    Write a function that takes a list of numbers and returns the minimum of the list.\n    '''\n    \n    min_n = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < min_n:\n            min_n = list1[i]\n            \n    return min_n\n    \ndef sum_of_list(list1):\n    '''\n    Write a function that takes a list of numbers and returns the sum of the numbers.\n    '''\n    \n    total = 0\n    for i in range(len(list1)):\n        total += list1[i]\n    \n    return total\n    \ndef factorial(num):\n    '''\n    Write a function that takes a number as input and returns its factorial.\n    '''\n    \n    factorial = 1\n    if num == 0:\n        return factorial\n    else:\n        for i in range(1,num+1):\n            factorial = factorial * i\n            \n    return factorial\n    \ndef sorted_list(list1):\n    '''\n    Write a function that takes a list of numbers as input and returns a new list of the same size, \n    sorted in ascending order, based on the numbers in the input list.\n    '''\n    \n    list2 = []\n    while len(list2)!= len(list1):\n        for i in range(len(list1)):\n            if i+1 < len(list1):\n                if list1[i] > list1[i+1]:\n                    temp = list1[i]\n                    list1[i] = list1[i+1]\n                    list1[i+1] = temp\n        list2.append(list1[0])\n        for i in range(1,len(list1)):\n            if list1[i] < list1[i-1]:\n                temp = list1[i]\n                list1[i] = list1[i-1]\n                list1[i-1] = temp\n    \n    return list2\n    \ndef sort_list_by_third(list1):\n    '''\n    Write a function that takes a list of numbers as input and returns a new list of the same size, \n    sorted in ascending order, based on the numbers in the input list.\n    '''\n    \n    list2 = []\n    while len(list2)!= len(list1):\n        for i in range(len(list1)):\n            if i+1 < len(list1):\n                if list1[i] > list1[i+1]:\n                    temp = list1[i]\n                    list1[i] = list1[i+1]\n                    list1[i+1] = temp\n        list2.append(list1[0])\n        for i in range(1,len(list1)):\n            if list1[i] < list1[i-1]:\n                temp = list1[i]\n                list1[i] = list1[i-1]\n                list1[i-1] = temp\n    \n    return list2\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes a list of numbers as input and returns a new list of the same size, \n    sorted in ascending order, based on the numbers in the input list.\n    '''\n    \n    list2 = []\n    while len(list2)!= len(list1):\n        for i in range(len(list1)):\n            if i+1 < len(list1):\n                if list1[i] > list1[i+1]:\n                    temp = list1[i]\n                    list1[i] = list1[i+1]\n                    list1[i+1] = temp\n        list2.append(list1[len(list1)-1])\n        for i in range(len(list1)-2,0,-1):\n            if list1[i] < list1[i+1]:\n                temp = list1[i]\n                list1[i] = list1[i+1]\n                list1[i+1] = temp\n    \n    return list2\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes a list of numbers as input and returns a new list of the same size, \n    sorted in ascending order, based on the numbers in the input list.\n    '''\n    \n    list2 = []\n    while len(list2)!= len(list1):\n        for i in range(len(list1)):\n            if i+1 < len(list1):\n                if list1[i] == list1[i+1]:\n                    list1.remove(list1[i+1])\n        list2.append(list1[0])\n        for i in range(1,len(list1)):\n            if list1[i] < list1[i-1]:\n                temp = list1[i]\n                list1[i] = list1[i-1]\n                list1[i-1] = temp\n    \n    return list2\n    \ndef count_val(list1, val):\n    '''\n    Write a function that takes a list of numbers as input and returns the number of occurrences \n    of the given value in the list.\n    '''\n    \n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == val:\n            count += 1\n    return count\n    \ndef duplicates(list1):\n    '''\n    Write a function that takes a list of numbers as input and returns a list of the numbers that \n    are duplicates in the original list.\n    '''\n    \n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    \n    return list2\n    \ndef largest(list1):\n    '''\n    Write a function that takes a list of numbers as input and returns the largest number.\n    '''\n    \n    max_n = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > max_n:\n            max_n = list1[i]\n            \n    return max_n\n    \ndef smallest(list1):\n    '''\n    Write a function that takes a list of numbers as input and returns the smallest number.\n    '''\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total = total + round(i)\n    print(total)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    nums_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 2)\n        nums_sum += list1[i]\n    return nums_sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=round(list1[i],2)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_sum = 0\n    for i in range(len(list1)):\n        list_sum += list1[i]\n        list_sum = round(list_sum)\n    print(list_sum)\n    print(len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_numbers = []\n    for n in list1:\n        rounded_numbers.append(round(n, 2))\n    sum_of_list = sum(rounded_numbers)\n    print(sum_of_list)\n    print(sum_of_list * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        list1[i] = int(round(list1[i]))\n        sum = sum + (list1[i] * len(list1))\n    print(sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_to_round = []\n    for index, num in enumerate(list1):\n        list_to_round.append(round(num))\n    return (sum(list_to_round)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += (list1[i] * len(list1))\n    return total_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    Sum=0\n    for i in range(1,n+1):\n        Sum=Sum+i**3\n    print(Sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(x**3 for x in range(n) if x % 2 == 0) \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n=int(n)\n    sum=0\n    for i in range(n):\n        sum=sum+(i**3)\n    print(sum)\ncube_Sum(5)\ncube_Sum(6)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for num in range(n):\n        if num % 2 == 0:\n            cube_sum += num**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    cube_sum = 0\n    while n>0:\n        cube_sum = cube_sum + n*n*n\n        n = n - 2\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(0,n,2):\n        cube_sum += i ** 3\n    print(cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**3\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum\ncube_Sum(10)\ncube_Sum(4)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    print(\"The sum of cube of even numbers is :\", sum)\n    return sum\ncube_Sum(10)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum = sum + i**3\n    return sum\nprint(cube_Sum(5))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''.join(str(x) for x in test_tup)\n    return result\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for ele in test_tup:\n        result = result + ele + \" \"\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3] + test_tup[4] + test_tup[5] + test_tup[6] + test_tup[7] + test_tup[8] + test_tup[9]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    final_str = ''\n    for i in range(len(test_tup)):\n        final_str += str(test_tup[i])\n    return final_str\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n    return result\n    \ndef first_occurrence(test_list, element):\n    '''\n    Write a function to find and return the index position of first occurrence of an element.\n    '''\n    try:\n        return test_list.index(element)\n    except:\n        return -1\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_list = []\n    for i in range(len(test_tup)):\n        new_list.append(test_tup[i] + \"|\")\n    return \"\".join(new_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=i**3\n    print(\"The average of cubes of first\",n,\"natural numbers is\",sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n=int(n)\n    total=0\n    for i in range(1,n+1):\n        total=total+i**3\n    return total/(n)\nprint(find_Average_Of_Cube(10))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i ** 3)\n    print(sum / n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0;\n    count = 0;\n    while count < n:\n        sum += pow(count,3)\n        count += 1\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # Initializing values\n    total = 0\n    cnt = 0\n    \n    while cnt < n:\n        total += pow(cnt, 3)\n        cnt += 1\n        \n    return total / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg=0.0\n    for i in range(1,n+1):\n        avg=avg+i**3\n    avg=avg/n\n    print(\"The average of cubes of first\",n,\"natural numbers is\",avg)\n    \ndef add(num1,num2):\n    '''\n    Write a python function to add two numbers\n    '''\n    total=num1+num2\n    print(\"The total is\",total)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n<=0):\n        raise Exception('n must be greater than 0')\n    sum=0\n    for i in range(n):\n        sum=sum+i**3\n    return sum/(n*n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube_2(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(n)])/n\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cube = 0\n    count = 0\n    for i in range(1,n+1):\n        sum_of_cube += i**3\n        count += 1\n    return sum_of_cube / count\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n+1):\n        cube_sum += i**3\n    return(cube_sum/n)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if isinstance(test_tuple,tuple):\n        for i in range(len(test_tuple)):\n            if i == 2:\n                print(test_tuple[i])\n            else:\n                print(test_tuple[i])\n    else:\n        print(\"Input is not a tuple\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(type(test_tuple))\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            list1.append(test_tuple[i][-1])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef extract_all_elements(test_tuple):\n    '''\n    Write a function to extract all the elements of a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            list1.append(test_tuple[i])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef extract_element_at_index(test_tuple, index):\n    '''\n    Write a function to extract the element at a given index position from a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if index == i:\n                list1.append(test_tuple[i])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef extract_substring(test_tuple, start, end):\n    '''\n    Write a function to extract a substring from a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if start <= i <= end:\n                list1.append(test_tuple[i])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef extract_second_occurring_element(test_tuple, element):\n    '''\n    Write a function to extract the second occuring element from a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if test_tuple.count(element) == 1:\n                list1.append(element)\n            else:\n                pass\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef remove_occurence_of_element(test_tuple, element):\n    '''\n    Write a function to remove the occurence of a element from a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if test_tuple.count(element) == 1:\n                pass\n            else:\n                list1.append(test_tuple[i])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef remove_occurence_of_element_by_value(test_tuple, element):\n    '''\n    Write a function to remove the occurence of a element from a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if test_tuple[i]!= element:\n                list1.append(test_tuple[i])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef remove_tuple_value(test_tuple, value):\n    '''\n    Write a function to remove a given value from a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if test_tuple[i]!= value:\n                list1.append(test_tuple[i])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef delete_tuple_value(test_tuple, index):\n    '''\n    Write a function to delete a given value from a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if i!= index:\n                list1.append(test_tuple[i])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef delete_tuple_index(test_tuple, index):\n    '''\n    Write a function to delete a given index position from a given tuple\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            if i!= index:\n                list1.append(test_tuple[i])\n        return tuple(list1)\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef convert_to_list(test_tuple):\n    '''\n    Write a function to convert a given tuple into a list\n    '''\n    list1 = []\n    if type(test_tuple) is tuple:\n        for i in range(len(test_tuple)):\n            list1.append(test_tuple[i])\n        return list1\n    else:\n        raise TypeError(\"Inputs should be a tuple\")\n        \n        \ndef convert_to_tuple(test_list):\n    '''\n    Write a function to convert a given list into a tuple\n    '''\n    tuple1 = tuple(test_list)\n    return tuple1\n    \n    \ndef convert_to_set(test_list):\n    '''\n    Write a function to convert a given list into a set\n    '''\n    set1 = set(test_list)\n    return set1\n    \n    \ndef convert_to_dict(test_list):\n    '''\n    Write a function to convert a given list into a dictionary\n    '''\n    dict1 = dict(test_list)\n    return dict1\n    \n        \ndef get_largest_number_from_list(test_list):\n    '''\n    Write a function to get the largest element from a given list\n    '''\n    if type(test_list) is list:\n        list1 = []\n        for i in range(len(test_list)):\n            list1.append(test_list[i])\n        list1 = sorted(list1, reverse = True)\n        return list1[0]\n    else:\n        raise TypeError(\"Inputs should be a list\")\n        \n        \ndef get_smallest_number_from_list(test_list):\n    '''\n    Write a function to get the smallest element from a given list\n    '''\n    if type(test_list) is list:\n        list1 = []\n        for i in range(len(test_list)):\n            list1.append(test_list[i])\n        list1 = sorted(list1, reverse = False)\n        return list1[0]\n    else:\n        raise TypeError(\"Inputs should be a list\")\n        \n        \ndef get_second_largest_number_from_list(test_list):\n    '''\n    Write a function to get the second largest element from a given list\n    '''\n    if type(test_list) is list:\n        list1 = []\n        for i in range(len(test_list)):\n            list1.append(test_list[i])\n        list1 = sorted(list1, reverse = True)\n        list1 = list1[1:]\n        return list1[0]\n    else:\n        raise TypeError(\"Inputs should be a list\")\n        \n        \ndef get_second_smallest_number_from_list(test_list):\n    '''\n    Write a function to get the second smallest element from a given list\n    '''\n    if type(test_list) is list:\n        list1 = []\n        for i in range(len(test_list)):\n            list1.append(test_list[i])\n        list1 = sorted(list1, reverse = False"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[0][-1],test_tuple[1][-1],test_tuple[2][-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list=[]\n    for tup in test_tuple:\n        rear_list.append(tup[-1])\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_1 = list(test_tuple)\n    return tuple(list_1[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # X = (\"Arjan\", \"Rajesh\", \"Pradeep\")\n    # return tuple([x[-1] for x in X])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((test_tuple[1][0:5]))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((test_tuple[2][0], test_tuple[2][1], test_tuple[2][2], test_tuple[2][3]))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # Your Code here\n    return (test_tuple[1])\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        count += (sublist.count(x))\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for element in list1:\n        if element == x:\n            counter += 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for elem in list1:\n        if x in elem:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Remove line below when your code is done\n    return\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    res = []\n    for num in nums:\n        if num % 2!= 0:\n            res.append(num)\n    return res\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = None\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n%2==1]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n    \nprint(filter_oddnumbers([1, 2, 4, 5, 6, 7, 8, 9]))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for number in nums:\n        if number % 2!= 0:\n            oddnumbers.append(number)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    x = dt.split('-')\n    for i in range(len(x)):\n        x[i] = int(x[i])\n    return f'{x[2]}-{x[1]}-{x[0]}'\n    \n    \ndef find_age(dt1, dt2):\n    '''\n    Write a function to calculate and return the age of a person.\n    Input: two dates as strings in dd-mm-yyyy format.\n    Output: age in years.\n    Example:\n    Input: \"01-01-2000\" and \"12-12-2010\"\n    Output: 23\n    '''\n    \n    y1,m1,d1 = dt1.split('-')\n    y2,m2,d2 = dt2.split('-')\n    return int(y2) - int(y1)\n    \n    \ndef find_taxi_stops(lines):\n    '''\n    Write a function to return the number of stops and the stop info.\n    The function will return a list of tuples (stop_name, stop_name_original, stop_name_url,\n    stop_id, stop_latitude, stop_longitude, stop_url).\n    stop_name: stop name in the original stop name format.\n    stop_name_original: the name in the original stop name format.\n    stop_name_url: the name in the stop name url format.\n    stop_id: stop id in the format of ABCD.\n    stop_latitude: stop latitude.\n    stop_longitude: stop longitude.\n    stop_url: stop url.\n    '''\n    \n    stops = []\n    for i in range(len(lines)):\n        i = lines[i].split('\\n')\n        for j in i:\n            if j == '\\t\\t\\t\\t\\t\\t\\t':\n                stops.append(('', '', '', '', '', '', ''))\n            else:\n                stops.append(j.split('\\t'))\n    return stops\n    \n    \ndef find_transport_types(lines):\n    '''\n    Write a function to return the transport type id and the transport type name.\n    The function will return a list of tuples (transport_type_id, transport_type_name).\n    transport_type_id: transport type id in the format of ABCD.\n    transport_type_name: transport type name.\n    '''\n    \n    transport_type_id = []\n    transport_type_name = []\n    for i in range(len(lines)):\n        i = lines[i].split('\\n')\n        for j in i:\n            if j == '\\t\\t\\t\\t\\t\\t\\t':\n                transport_type_id.append('')\n                transport_type_name.append('')\n            else:\n                transport_type_id.append(j.split('\\t')[0])\n                transport_type_name.append(j.split('\\t')[1])\n    return list(zip(transport_type_id, transport_type_name))\n    \n    \ndef find_ticket_types(lines):\n    '''\n    Write a function to return the ticket type id and the ticket type name.\n    The function will return a list of tuples (ticket_type_id, ticket_type_name).\n    ticket_type_id: ticket type id in the format of ABCD.\n    ticket_type_name: ticket type name.\n    '''\n    \n    ticket_type_id = []\n    ticket_type_name = []\n    for i in range(len(lines)):\n        i = lines[i].split('\\n')\n        for j in i:\n            if j == '\\t\\t\\t\\t\\t\\t\\t':\n                ticket_type_id.append('')\n                ticket_type_name.append('')\n            else:\n                ticket_type_id.append(j.split('\\t')[0])\n                ticket_type_name.append(j.split('\\t')[1])\n    return list(zip(ticket_type_id, ticket_type_name))\n    \n    \ndef find_routes(lines):\n    '''\n    Write a function to return the route id and the route name.\n    The function will return a list of tuples (route_id, route_name).\n    route_id: route id in the format of ABCD.\n    route_name: route name.\n    '''\n    \n    route_id = []\n    route_name = []\n    for i in range(len(lines)):\n        i = lines[i].split('\\n')\n        for j in i:\n            if j == '\\t\\t\\t\\t\\t\\t\\t':\n                route_id.append('')\n                route_name.append('')\n            else:\n                route_id.append(j.split('\\t')[0])\n                route_name.append(j.split('\\t')[1])\n    return list(zip(route_id, route_name))\n    \n    \ndef find_route_stops(lines):\n    '''\n    Write a function to return the route id and the route stop id.\n    The function will return a list of tuples (route_id, route_stop_id).\n    route_stop_id: route stop id in the format of ABCD.\n    route_id: route id in the format of ABCD.\n    '''\n    \n    route_stop_id = []\n    route_id = []\n    for i in range(len(lines)):\n        i = lines[i].split('\\n')\n        for j in i:\n            if j == '\\t\\t\\t\\t\\t\\t\\t':\n                route_stop_id.append('')\n                route_id.append('')\n            else:\n                route_stop_id.append(j.split('\\t')[0])\n                route_id.append(j.split('\\t')[1])\n    return list(zip(route_stop_id, route_id))\n    \n    \ndef find_routes_by_station(lines):\n    '''\n    Write a function to return a list of routes with stops.\n    The function will return a list of tuples (route_id, route_stop_id).\n    route_id: route id in the format of ABCD.\n    route_stop_id: route stop id in the format of ABCD.\n    '''\n    \n    routes_with_stops = []\n    for i in range(len(lines)):\n        i = lines[i].split('\\n')\n        for j in i:\n            if j == '\\t\\t\\t\\t\\t\\t\\t':\n                routes_with_stops.append(('', ''))\n            else:\n                routes_with_stops.append(j.split('\\t'))\n    return list(zip(routes_with_stops[0], routes_with_stops[1]))\n    \n    \ndef find_stops(lines):\n    '''\n    Write a function to return the stop id and the stop name.\n    The function will return a list of tuples (stop_id, stop_name).\n    stop_id: stop id in the format of ABCD.\n    stop_name: stop name in the original stop name format.\n    '''\n    \n    stop_id = []\n    stop_name = []\n    for i in range(len(lines)):\n        i = lines[i].split('\\n')\n        for j in i:\n            if j == '\\t\\t\\t\\t\\t\\t\\t':\n                stop_id.append('')\n                stop_name.append('')\n            else:\n                stop_id.append(j.split('\\t')[0])\n                stop_name.append(j.split('\\t')[1])\n    return list(zip(stop_id, stop_name))\n    \n    \ndef find_stop_times(lines):\n    '''\n    Write a function to return the stop id, the trip id, and the trip direction, trip start time, trip end time,\n    and trip duration.\n    The function will retur"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:] + \"-\" + dt[5:7] + \"-\" + dt[:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    #Pattern to match date\n    pattern = '^\\d{4}-\\d{2}-\\d{2}$'\n    if re.match(pattern, dt):\n        d = dt.split(\"-\")\n        d[0] = d[0].zfill(2)\n        d[1] = d[1].zfill(2)\n        d[2] = d[2].zfill(4)\n        return \"-\".join(d)\n    else:\n        return \"Invalid date\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_str = dt.split('-')\n    date = '-'.join(date_str[::-1])\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    dt_list = dt.split('-')\n    converted_date = dt_list[2] + '-' + dt_list[1] + '-' + dt_list[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = dt.split(\"-\")\n    new_dt = \"-\".join(new_dt)\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    return dt[2] + '-' + dt[1] + '-' + dt[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(dt)\n    date = dt.split(\"-\")\n    if len(date) == 3:\n        return date[2] + \"-\" + date[1] + \"-\" + date[0]\n    else:\n        return \"Incorrect date\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    month = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}\n    month = month.get(int(dt[0]))\n    dt = dt[2] + '-' + dt[1] + '-' + dt[0]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    dd = date[2].split(' ')\n    mm = date[1].split(' ')\n    yyyy = date[0].split(' ')\n    dd = int(dd[0])\n    mm = int(mm[0])\n    yyyy = int(yyyy[0])\n    d = dd + mm/12\n    m = mm%12\n    y = yyyy - d + m/12\n    return str(d) + '/' + str(m) + '/' + str(y)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    start = 1\n    while start < len(my_list):\n        temp = my_list[start-1]\n        for index in range(start, len(my_list)):\n            if my_list[index] < temp:\n                my_list[index], my_list[index-start] = my_list[index-start], my_list[index]\n        start = start*2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # calculate the length of the given list\n    l = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            tmp = my_list[i]\n            while j >= gap and my_list[j - gap] > tmp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = tmp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            temp = my_list[i]\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j-=gap\n            my_list[j] = temp\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    l = len(my_list)\n    gap = 1\n    while gap < l//3:\n        gap = gap*3 + 1\n    while gap >= 1:\n        for i in range(gap,l):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j],my_list[j-gap] = my_list[j-gap],my_list[j]\n                j -= gap\n        gap = int(gap/3)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    length_of_list = len(my_list)\n    step = 1\n    \n    while step < length_of_list:\n        \n        for i in range(length_of_list):\n            \n            if i+step < length_of_list:\n                \n                if my_list[i] > my_list[i+step]:\n                    \n                    my_list[i], my_list[i+step] = my_list[i+step], my_list[i]\n            \n        step = step * 2\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # range of the array\n    # find range of the array\n    length_of_array = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while gap < n:\n        gap = gap * 3 + 1\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for x, y in zip(test_tup1, test_tup2):\n        result += (x and y,)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    return ((element_a == element_b) for element_a, element_b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 and tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([tup1_val if tup1_val >= tup2_val else tup2_val for tup1_val, tup2_val in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup for tup in test_tup1 if tup in test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (i and j) for i, j in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a = ()\n    for i,j in zip(test_tup1,test_tup2):\n        a = a + (i,j)\n    return a\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (6, 5, 4, 3, 2, 1)\n    print(test_tup1)\n    print(test_tup2)\n    print(f\"\\n{and_tuples.__doc__}\")\n    print(f\"Expected Result: \\n{test_tup1}\")\n    print(f\"Actual Result: \\n{and_tuples(test_tup1, test_tup2)}\")\n    print(\"\")\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Base case\n    if a == 0:\n        return 0\n    else:\n        return (-2*b)/(a**2 - 1)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-c - a*c) / (2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return 0.5*(a+b)*((c**2)-4)**0.5\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    parabola = lambda x: a * x ** 2 + b * x + c\n    x = float(input())\n    x_min = -float(input())\n    x_max = float(input())\n    f = parabola(x)\n    if f >= 0:\n        print(\"%.2f\" % x_min)\n        print(\"%.2f\" % x_max)\n    else:\n        print(\"%.2f\" % x_max)\n        print(\"%.2f\" % x_min)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    k = ((a*a)+(b*b))**(1/2)\n    x = (-b/a) + (k/2)\n    y = (c*x)/a\n    return x, y\n    \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a**2) + (b**2) >= (c**2): \n        x1 = -c/b\n        x2 = -c/b + a**2 / (2 * b**2)\n        return x1, x2\n    else:\n        x1 = -c/b + a**2 / (2 * b**2)\n        x2 = -c/b\n        return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a**2 + b**2 - 2 * a * b * c\n    x = x ** 0.5\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(f'Directrix of parabola: \\n{a:.2f}x\u00b2 + {b:.2f}x + {c:.2f}')\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + np.sqrt(b**2 - 4*a*c))/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b - sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    x2 = (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    return x1, x2\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elem = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common_elem.append(list1[i])\n    if common_elem:\n        return common_elem\n    else:\n        return 'No common elements'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    list1_copy = list1.copy()\n    list2_copy = list2.copy()\n    while len(list1) > 0:\n        if list1_copy.pop(0) == list2_copy.pop(0):\n            common = True\n            break\n    return common\n    "
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if(len(list1)<=1):\n        return False\n    elif(len(list2)<=1):\n        return False\n    elif (list1[0]==list2[0]):\n        return common_element(list1[1:], list2[1:])\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return set(list1).intersection(set(list2))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                common += 1\n        if common >= 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) >= len(list2) and all(elem in list2 for elem in list1)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        smaller = list2\n        bigger = list1\n    else:\n        smaller = list1\n        bigger = list2\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        return False\n    else:\n        return bool(set(list1).intersection(set(list2)))\n    \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= 0 or base2 <= 0 or height <= 0:\n        raise ValueError('bad input')\n    if base1 <= base2:\n        raise ValueError('bad input')\n    if height > 0:\n        # 1st condition, base1 < height + base2\n        # 2nd condition, base2 < height + base1\n        # 3rd condition, base1 < height + base2\n        if base1 + height < base2 or base2 + height < base1:\n            raise ValueError('bad input')\n        else:\n            # trapezium = base1 + height + base2\n            # median length = ((base1 + base2) / 2) - height\n            return (base1 + base2) / 2 - height\n    else:\n        # height >= 0\n        # base1 >= 0\n        # base2 >= 0\n        if base1 <= height or base2 <= height:\n            raise ValueError('bad input')\n        else:\n            # trapezium = base1 + height + base2\n            # median length = (base1 + base2) / 2 - height\n            return (base1 + base2) / 2 - height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        base1,base2 = base2,base1\n    if base1 == 0:\n        return 0\n    h = abs(height)\n    return (base1+base2)/2 + (h/2)*(base1+base2+height) / 3\nprint(median_trapezium(3,4,2)"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # height of base 1\n    base1_height = height\n    # height of base 2\n    base2_height = height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 < 0 or base2 < 0 or height < 0:\n        return None\n    return 1/2*(base1 + base2) + height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = base1 + height\n    b = base2 + height\n    c = base1 + base2 - height\n    return (a+b+c)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    assert type(base1) == float and type(base2) == float and type(height) == float, \"All values must be floats\"\n    assert height > 0, \"Height must be a positive number\"\n    return 1.5 * (base1 + base2) + (height/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    length = base1 + base2\n    height = 2 * height\n    area = (base1 * base2) / 2\n    \n    return (height + area) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = (base1+base2) / 2\n    h = height\n    return a * h\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for element in arr:\n        if element > number:\n            flag = True\n    return flag\n    \ndef check_even(arr):\n    '''\n    Write a function to check whether all the elements of the given array are even numbers.\n    '''\n    flag = False\n    for element in arr:\n        if element % 2 == 1:\n            flag = True\n    return flag\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return False if (number < arr[0]) else True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    arr_length = len(arr)\n    \n    for i in range(0, arr_length):\n        \n        if arr[i] > number:\n            return True\n    \n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Loop through the entire array and return True if the number is greater than each element. \n    # if number is greater than each element, then return True. Otherwise return False.\n    # Base case: If there are no elements in the array, return False.\n    if not arr:\n        return False\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr[arr.index(number):]\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.findall(r'a+b', text)\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab\")\n    if(re.search(pattern,text)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # if text.find('a')!=-1:\n    #     pattern = re.compile(r'a+')\n    #     return pattern.match(text)\n    # else:\n    #     return None\n    if text.find('a')!=-1:\n        return re.match(r'a+',text)\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    print(result.group())\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r'(ab)', text))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('ab*')\n    result = re.search(pattern, text)\n    if result is not None:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"(b+)a\")\n    match = re.search(pattern, text)\n    return match!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_pattern = 'ab*'\n    # result = re.findall(match_pattern, text)\n    # return result\n    return re.match(match_pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"a+b\")\n    result = pattern.match(text)\n    return result!= None\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return(int(n % 10))\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = n%100\n    if n == 0 :\n        return 0\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return (n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    return n%10\n    \n    "
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    n = n[::-1]\n    return int(n[0])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    num = n\n    while (num > 0):\n        num = num//10\n    return num\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if(n < 0):\n        return -1\n    elif (n == 0):\n        return 0\n    else:\n        while(n > 0):\n            n = n//10\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i = 0\n    # while i < len(list1):\n    while i < len(list1):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n        i = i + 1\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return[-x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        new_list.append(-num)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in list1:\n        if i < 0:\n            negative.append(i)\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in range(len(list1)):\n        l1.append(list1[i] * -1)\n    return l1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #empty list\n    new_list = []\n    #iterating through the list\n    for i in list1:\n        #if i is negative\n        if i < 0:\n            #appending -1 to the new_list\n            new_list.append(-1)\n        #otherwise, it appends i to the new_list\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1_len = len(list1)\n    for i in range(list1_len):\n        list1[i] = -list1[i]\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg=[]\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    #Step 1: Go through each character and check if it is an integer.\n    #Step 2: Check if the character is an integer.\n    #Step 3: If it is an integer, modify the character.\n    #Step 4: Else return the original string.\n    \n    # 1. Go through each character in the string\n    # 2. Check if the character is an integer.\n    # 3. If the character is an integer, modify the character.\n    # 4. Else return the original string.\n    \n    # for x in str1:\n    #     if x.isdigit():\n    #         print(x)\n    \n    #1.\n    # for x in str1:\n    #     if x.isdigit():\n    #         str1 = str1.replace(x, '')\n    \n    # 2.\n    # new_str = ''\n    # for x in str1:\n    #     if not x.isdigit():\n    #         new_str += x\n    # return new_str\n    \n    # 3.\n    new_str = ''\n    for x in str1:\n        if not x.isdigit():\n            new_str += x\n    return new_str\n    "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    n = len(str1)\n    for i in range(n):\n        if i % 2 == 0:\n            str1 = str1.replace(str1[i], \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_str = ''\n    for i in str1:\n        if i.isalnum():\n            if i.isdigit():\n                if int(i) % 2 == 0:\n                    odd_str = odd_str + i\n        else:\n            odd_str = odd_str + i\n    return odd_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i]!= str1[i+1]:\n            return str1[0:i]\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(' ', '')\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list_str = list(str1)\n    for index in range(len(list_str)):\n        if index % 2 == 0:\n            list_str[index] = \"\"\n    return ''.join(list_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = \"!@#$%^&*()_+={}[]|\\:;'?.,<>/\\n\"\n    for char in odd_chars:\n        if char in str1:\n            str1 = str1.replace(char, \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    s = \"\"\n    while i<len(str1):\n        if str1[i]%2 == 0:\n            s += str1[i]\n        i+=1\n    return s\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = \"*-;:_+=()?!{}[]$%^&'\"\n    new_string = \"\"\n    for c in str1:\n        if c not in odd_chars:\n            new_string += c\n    return new_string\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if (test_list[i][0] == test_list[i+1][0] or test_list[i][0] == test_list[i+1][0]):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][0] < test_list[i+1][0] and test_list[i][1] < test_list[i+1][1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import Counter\n    counter = Counter()\n    for pair in test_list:\n        counter[pair] += 1\n        counter[pair[::-1]] += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i] < test_list[j] and test_list[i + 1] > test_list[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        a = test_list[i]\n        b = test_list[i+1]\n        if a == b:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    l = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            l.append((test_list[i], test_list[j]))\n    return len(l)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if(is_bidirectional(test_list[i], test_list[j])):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    dict_b = {}\n    for item in test_list:\n        if item not in dict_b:\n            dict_b[item] = 1\n        else:\n            dict_b[item] += 1\n    return dict_b\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    length = len(test_list)\n    count = 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    a = str(L[0])\n    for i in range(1, len(L)):\n        a += \"-\" + str(L[i])\n    return a\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(i) for i in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    joined = \"\"\n    for i in range(len(L)):\n        joined = joined + str(L[i])\n    return int(joined)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(L[0])*100 + int(L[1])*10 + int(L[2])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    a = L.pop()\n    b = L.pop()\n    c = L.pop()\n    d = L.pop()\n    e = L.pop()\n    f = L.pop()\n    g = L.pop()\n    h = L.pop()\n    j = L.pop()\n    k = L.pop()\n    l = L.pop()\n    m = L.pop()\n    n = L.pop()\n    o = L.pop()\n    p = L.pop()\n    q = L.pop()\n    r = L.pop()\n    s = L.pop()\n    t = L.pop()\n    u = L.pop()\n    v = L.pop()\n    w = L.pop()\n    x = L.pop()\n    y = L.pop()\n    z = L.pop()\n    al = []\n    al.append(a)\n    al.append(b)\n    al.append(c)\n    al.append(d)\n    al.append(e)\n    al.append(f)\n    al.append(g)\n    al.append(h)\n    al.append(j)\n    al.append(k)\n    al.append(l)\n    al.append(m)\n    al.append(n)\n    al.append(o)\n    al.append(p)\n    al.append(q)\n    al.append(r)\n    al.append(s)\n    al.append(t)\n    al.append(u)\n    al.append(v)\n    al.append(w)\n    al.append(x)\n    al.append(y)\n    al.append(z)\n    single = int(al.pop())\n    return single\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # method 1\n    \"\"\"\n    1-2\n    1-2-3\n    1-2-3-4\n    1-2-3-4-5\n    1-2-3-4-5-6\n    1-2-3-4-5-6-7\n    1-2-3-4-5-6-7-8\n    1-2-3-4-5-6-7-8-9\n    \"\"\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #n = len(L)\n    #if n == 0:\n    #    return None\n    #elif n == 1:\n    #    return L[0]\n    #else:\n    #    return L[0] + L[1]\n    if not L:\n        return None\n    else:\n        return L[0] * (len(L) - 1) + L[-1]\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = L[0]\n    for i in range(1, len(L)):\n        result *= 10\n        result += L[i]\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(L)\n    temp = 1\n    for i in range(len(L)):\n        temp = temp * L[i]\n    return temp\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(\\w+ )+'\n    regex = re.findall(pattern,text)\n    \n    try:\n        start = regex.index('to') + 2\n        end = regex.index('be')\n    except ValueError as e:\n        print('Word \"to\" not found in text')\n        return None, None\n    else:\n        return start, end\n    \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not text: return None\n    # text = text.replace('.', '')\n    # text = text.replace(',', '')\n    # text = text.replace('!', '')\n    # text = text.replace(':', '')\n    # text = text.replace(';', '')\n    text = text.strip()\n    pos = None\n    adverb = None\n    adverb_list = []\n    regex = re.compile('[a-zA-Z]')\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'am':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'are':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'are':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'is':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'am':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'am':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'am':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'are':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'am':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'am':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'am':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'am':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'be':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == 'being':\n            pos = match.start()\n            break\n    ma"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # TODO\n    # write your code here\n    # return a list of tuples with tuples in the format (index_of_first_adverb, index_of_last_adverb)\n    adverb_positions = re.finditer(r\"\\bAD\\b|\\bA\\d\\b|\\ba\\d\\b\", text)\n    return [(pos.start(), pos.end()) for pos in adverb_positions]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    pos = re.search(r'\\b(?:\\'\\'\\s*?\\b|-\\s*?\\b|\\'\\b|\\b)adverb', text)\n    if pos:\n        return pos.start()\n    else:\n        return -1\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text == None:\n        return None\n    else:\n        word_list = text.split(' ')\n        adverb_list = list()\n        for word in word_list:\n            if re.search('[a-zA-Z]*ad[\\s]+',word):\n                adverb_list.append(word)\n        return(adverb_list)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.replace(\"\\n\",\"\")\n    sentence = re.finditer(r'\\w+', text)\n    \n    for i in sentence:\n        if i.group() in \"adverb\":\n            print(i.group())\n            print(i.start())\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'(^| )adverb$', re.IGNORECASE)\n    adverb_positions = re.finditer(adverb_pattern, text)\n    if adverb_positions:\n        return [(position.group().lower(), position.start()) for position in adverb_positions]\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    adverb_positions = []\n    text = text.split()\n    for i in range(0, len(text)):\n        if text[i] == \"is\":\n            adverb_positions.append(i)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # defining the words to be searched in the sentence\n    word = ['and', 'at', 'of', 'with', 'in', 'from', 'over', 'between', 'around', 'inside', 'in', 'to', 'on', 'before', 'after', 'behind', 'up', 'down', 'at', 'next', 'last', 'after', 'afterwards', 'before', 'against', 'among', 'along', 'beside', 'between', 'around', 'outside', 'inside', 'on', 'until', 'below', 'up', 'down','since', 'near', 'toward', 'until', 'above', 'beside', 'besides']\n    # creating a dictionary to store the adverb and their positions\n    adverb = {}\n    # using regular expressions to split the sentence into words\n    text = text.split()\n    # for each word in the text\n    for i in range(len(text)):\n        # if the word matches the words in word\n        if text[i] in word:\n            # adding the word and its position to the dictionary\n            adverb[text[i]] = i\n    # returning the dictionary\n    return adverb\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    adverb_pattern = r\"(?<=\\w)(adverb|adverbs|adv|advanced|advancedly|advancedness|advanceds|adversal|adversals|adversary|adversary|adversarial|adversaries|adversars|adversary|adversary|adversarial|adversaries|adversars|advanced|advense|advens|advent|advent|advanced|advent|adventure|adventurer|adventurers|advanced|adventurer|adventurers|adventures|adventures|advances|advances|advancing|advances|advancing|advance|advance|advanced|advances|advances|advancing|advances|advancing|advance|advance|advanced|advance|advances|advances|advanced|advance|advances|advance|advance|advanced|advance|advanced|advanced|advanced|advanced|advance|advances|advance|advance|advanced|advance|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced|advance|advanced"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #your code here\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # base = l * 4\n    # length = l * 6\n    # height = l * 2\n    # surface = base * height\n    # return surface + 2 * length\n    return (l*l)*6 + 2*l*2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    cube_area = 6 * (l ** 2)\n    return cube_area\n    \ndef surfacearea_octahedron(r):\n    '''\n    Write a function to find the surface area of an octahedron of a given radius.\n    '''\n    \n    oct_area = 2 * r * (3 ** 0.5)\n    return oct_area\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = 6 * (l * l)\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    x = l**2\n    y = x*6\n    z = x*5\n    \n    surfacearea = 2*x + 2*y + 2*z\n    print(\"The surface area of the cube is:\",surfacearea)\n    \nsurfacearea_cube(10)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i >= 0:\n            count += 1\n    return count\ndef almost_sorted(nums):\n    '''\n    Write a function to tell if the array is nearly sorted.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] <= nums[i+1]:\n            continue\n        else:\n            return False\n    return True\ndef rotate_array(nums, k):\n    '''\n    Write a function to rotate an array of size n by k.\n    '''\n    if len(nums) == 0:\n        return []\n    for i in range(k):\n        nums.insert(0, nums.pop())\n    return nums\ndef rotate_array_2(nums, k):\n    '''\n    Write a function to rotate an array of size n by k.\n    '''\n    if len(nums) == 0:\n        return []\n    for i in range(k):\n        temp = nums[0]\n        for j in range(len(nums)-1):\n            nums[j] = nums[j+1]\n        nums[len(nums)-1] = temp\n    return nums\ndef print_array(nums):\n    '''\n    Write a function to print an array in a user-friendly manner.\n    '''\n    for i in nums:\n        print(i)\ndef find_duplicate(nums):\n    '''\n    Write a function to find the first duplicate number in an array of integers.\n    '''\n    for i in nums:\n        if nums.count(i) > 1:\n            return i\ndef is_power(num):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if num < 0:\n        return False\n    sq = int(num**0.5)\n    if sq*sq == num:\n        return True\n    else:\n        return False\ndef min_swaps(arr, n):\n    '''\n    Write a function that takes an array of integers and a number N as inputs, and returns the minimum number of swaps required for sorting the array from smallest to largest.\n    Each integer in the input array represents a color in the array.\n    A swap consists of choosing two adjacent elements and exchanging their positions.\n    Example:\n    Input: arr[] = {3, 4, 1, 2}, N = 2\n    Output: 2\n    Explanation: Swap 4 and 3.\n    '''\n    if arr is None or n < 0:\n        return -1\n    #First we'll put all elements in a dictionary with their frequencies\n    dict = {}\n    for i in arr:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    #Now we have a dictionary of the counts of each element in the array\n    count = 0\n    for i in dict.keys():\n        #We'll count the number of times each element appears in the array\n        count += dict[i]\n    #To check if all elements appear n times\n    if count!= n:\n        return -1\n    #We can now create a list with all of the elements in the array\n    arr = sorted(arr)\n    return count\ndef num_to_char(num):\n    '''\n    Write a function to convert a number to its character representation as a string.\n    '''\n    if num < 0 or num > 26:\n        return -1\n    chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    return chars[num]\ndef smallest_range(nums):\n    '''\n    Write a function that takes an array of numbers and returns the smallest range that includes every number in the array.\n    The range includes both endpoints.\n    The smallest range is the tuple (min, max), where min is the minimum value in the array, and max is the maximum value in the array.\n    If a number does not fall in the range, return (-1, -1).\n    '''\n    if len(nums) == 0:\n        return (-1, -1)\n    if len(nums) == 1:\n        return (nums[0], nums[0])\n    min_num = nums[0]\n    max_num = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n        if nums[i] > max_num:\n            max_num = nums[i]\n    if min_num < max_num:\n        return (min_num, max_num)\n    else:\n        return (-1, -1)\ndef sorted_squares(arr):\n    '''\n    Write a function that takes in an array of integers and returns a new array of the same length where each element is the square of the number in the same index in the original array.\n    The square of the number at index i in the new array is i^2 in the original array.\n    The input array may contain negative numbers.\n    '''\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    for i in range(len(arr)):\n        result[i] = result[i]**2\n    return result\ndef most_frequent(arr, n):\n    '''\n    Write a function that takes an array of integers and returns the most frequent integer in the array.\n    The frequency of the most frequent integer in an array is the number of times it occurs in the array.\n    '''\n    if len(arr) == 0:\n        return -1\n    dict = {}\n    for i in arr:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    max_freq = 0\n    max_freq_key = -1\n    for i in dict.keys():\n        if dict[i] > max_freq:\n            max_freq = dict[i]\n            max_freq_key = i\n    return max_freq_key\ndef common_elements(arr1, arr2):\n    '''\n    Write a function that takes in two arrays of integers, arr1 and arr2.\n    Return a sorted array that contains all the elements that appear in either arr1 or arr2, but not both.\n    The input arrays may contain duplicate integers.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return []\n    if len(arr1) == 0:\n        return arr2\n    if len(arr2) == 0:\n        return arr1\n    #We'll create two dictionaries, one to keep track of the counts in arr1, and one to keep track of counts in arr2\n    dict1 = {}\n    for i in arr1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    dict2 = {}\n    for i in arr2:\n        if i in dict2:\n            dict2[i] += 1\n        else:\n            dict2[i] = 1\n    #We need to return a list of all common elements\n    common_elems = []\n    for key in dict1.keys():\n        if key in dict2:\n            if dict1[key] > 0 and dict2[key] > 0:\n                common_elems.append(key)\n    common_elems.sort()\n    return common_elems\ndef matrix_multiply(a, b):\n    '''\n    Write a function that takes two matrices and returns their product.\n    The input matrices are two lists of equal size, representing the rows and columns of the matrices.\n    Example:\n    Input:\n    [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n    ]\n    [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n    ]\n    Output:\n    [\n    [16, 17, 18],\n    [26, 27, 28],\n    [4"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    counter = 0\n    for num in nums:\n        if num > 0:\n            counter += 1\n    print(counter)\n    return counter/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return sum(1 for num in nums if num > 0) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return sum(x > 0 for x in nums) / len(nums)\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for n in nums:\n        if n > 0:\n            positives += 1\n    return positives / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    l.sort()\n    return l[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    if list1 == None:\n        return 0\n    \n    n = len(list1)\n    if n == 0:\n        return 0\n    \n    for i in range(n):\n        if list1[i] < 0:\n            return list1[i]\n    \n    return -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    list1.sort()\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    list2.sort(reverse=True)\n    print(list2[0])\n    "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    max = list1[len(list1)-1]\n    if max < 0:\n        return max\n    else:\n        return -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    highest_num = -9999999999\n    for num in list1:\n        if num < 0 and num > highest_num:\n            highest_num = num\n    return highest_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Checking empty list\n    if list1 == []:\n        return -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    for i in range(len(list1)):\n        if list1[i]<0:\n            return list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    highest = -1\n    for i in range(len(list1)):\n        if list1[i] > highest:\n            highest = list1[i]\n    return highest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    for i in range(len(list1)-1):\n        if list1[i]<0 and list1[i+1]<0:\n            return list1[i]\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in range(1, len(list1)):\n        if list1[num] < 0:\n            max_neg = max(max_neg, list1[num])\n    return max_neg\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(K):\n        test_list.remove(test_list[0])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize variables\n    trimmed_list = []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple_element in test_list:\n        tuple_element = tuple_element[0:K]\n        new_list.append(tuple_element)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # your code here\n    # for k in range(1,K+1):\n    #     test_list = [i[0:k] for i in test_list]\n    for k in range(1, K + 1):\n        for i in range(len(test_list)):\n            test_list[i] = test_list[i][0:k]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for ele in test_list:\n        if len(ele) > K:\n            trimmed_list.append(ele[:K])\n        else:\n            trimmed_list.append(ele)\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_list = []\n    for item in test_list:\n        if len(item) <= K:\n            trim_list.append(item)\n        else:\n            trim_list.append(item[:K])\n    return trim_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    if len(test_list) == 1:\n        return test_list\n    for i in range(len(test_list)-1):\n        if len(test_list[i]) < K:\n            test_list.pop(i)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # Your code here\n    return(test_list[0:K])\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(trim(i, K) for i in test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list(test_list[i])\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i][j] = 0\n    test_list = tuple(test_list)\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # try this and test your code\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i]*test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # index_multiplication(tup1 = (1, 2, 3), tup2 = (4, 5, 6)) \u2192 (4, 10, 18)\n    return (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1], test_tup1[2] * test_tup2[2])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    out_tup = ()\n    for i in range(0,len(test_tup1)):\n        out_tup = out_tup + (test_tup1[i] * test_tup2[i],)\n    return out_tup\n    \ndef index_division(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise division of tuple elements in the given two tuples.\n    '''\n    out_tup = ()\n    for i in range(0,len(test_tup1)):\n        out_tup = out_tup + (test_tup1[i] / test_tup2[i],)\n    return out_tup\n    \ndef test_index_multiplication():\n    tup1 = (1,2,3,4,5)\n    tup2 = (1,2,3)\n    print(\"Original Tuple 1: \", tup1)\n    print(\"Original Tuple 2: \", tup2)\n    out_tup = index_multiplication(tup1, tup2)\n    print(\"Product of Tuples: \", out_tup)\n    \ndef test_index_division():\n    tup1 = (1,2,3,4,5)\n    tup2 = (1,2,3)\n    print(\"Original Tuple 1: \", tup1)\n    print(\"Original Tuple 2: \", tup2)\n    out_tup = index_division(tup1, tup2)\n    print(\"Division of Tuples: \", out_tup)\n    \ntest_index_multiplication()\ntest_index_division()"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for i in range(len(test_tup1)):\n        test_list1.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        test_list2.append(test_tup2[i])\n    product = []\n    for i in range(len(test_list1)):\n        product.append(test_list1[i] * test_list2[i])\n    return product\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #write your code here\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    mul_tup = []\n    for i in range(len(tup1)):\n        mul_tup.append(tup1[i] * tup2[i])\n    mul_tup = tuple(mul_tup)\n    return mul_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(0,len(test_tup1)):\n        test_tup1[i] = test_tup1[i]*test_tup2[i]\n    return test_tup1\n    \n    \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x*y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_product = tuple(t1 * t2 for t1, t2 in zip(test_tup1, test_tup2))\n    return test_product\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (tup1[0] * tup2[0], tup1[1] * tup2[1], tup1[2] * tup2[2], tup1[3] * tup2[3])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    for i in tup:\n        print(cnt[i])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for t in tup:\n        if t in lst:\n            cnt = cnt + 1\n    return cnt \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in tup:\n            tup = tup + (x,)\n    print(tup)\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in tup:\n        print(occ[x])\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in tup:\n        print(occ[x])\n        \n        '''\n        Write a python function to count the occurence of all elements of list in a tuple.\n        '''\n        \n    occ = Counter(lst)\n    print(occ[x])\n        \n        \n    \n    \n    \n    \ndef count_Occurrence(lst,lst1): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in lst1:\n            lst1 = lst1 + (x,)\n    print(lst1)\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n        \n        '''\n        Write a python function to count the occurence of all elements of list in a tuple.\n        '''\n        \n    occ = Counter(lst)\n    print(occ[x])\n        \n        \n    \n    \n    \n    \n    \ndef count_Occurrence(lst,lst1): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in lst1:\n            lst1 = lst1 + (x,)\n    print(lst1)\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n        \n        '''\n        Write a python function to count the occurence of all elements of list in a tuple.\n        '''\n        \n    occ = Counter(lst)\n    print(occ[x])\n        \n        \n    \n    \n    \n    \ndef count_Occurrence(lst,lst1): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in lst1:\n            lst1 = lst1 + (x,)\n    print(lst1)\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n        \n        '''\n        Write a python function to count the occurence of all elements of list in a tuple.\n        '''\n        \n    occ = Counter(lst)\n    print(occ[x])\n        \n        \n    \n    \n    \n    \n    \ndef count_Occurrence(lst,lst1): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in lst1:\n            lst1 = lst1 + (x,)\n    print(lst1)\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n        \n        '''\n        Write a python function to count the occurence of all elements of list in a tuple.\n        '''\n        \n    occ = Counter(lst)\n    print(occ[x])\n        \n        \n    \n    \n    \n    \ndef count_Occurrence(lst,lst1): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in lst1:\n            lst1 = lst1 + (x,)\n    print(lst1)\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n        \n        '''\n        Write a python function to count the occurence of all elements of list in a tuple.\n        '''\n        \n    occ = Counter(lst)\n    print(occ[x])\n        \n        \n    \n    \n    \n    \ndef count_Occurrence(lst,lst1): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in lst1:\n            lst1 = lst1 + (x,)\n    print(lst1)\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n        \n        '''\n        Write a python function to count the occurence of all elements of list in a tuple.\n        '''\n        \n    occ = Counter(lst)\n    print(occ[x])\n        \n        \n    \n    \n    \n    \ndef count_Occurrence(lst,lst1): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in lst1:\n            lst1 = lst1 + (x,)\n    print(lst1)\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n    \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    for x in lst1:\n        print(occ[x])\n        \n        '''\n        Write a python function to count the occurence of all elements of list in a tuple.\n        '''\n        \n    occ = Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    for i in range(len(tup)):\n        if tup[i] in count_dict.keys():\n            count_dict[tup[i]]+=1\n        else:\n            count_dict[tup[i]]=1\n    return count_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for element in lst:\n        if element in tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Initializing counter variable.\n    count = 0\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if tup.count(i) > 0: \n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    count += len(Counter(tup).keys())\n    count += len(Counter(lst).keys())\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i == tup[0]:\n            count += 1\n    return count\n        \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if nums == []:\n        return []\n    else:\n        return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return[x**3 for x in nums]\n    \n    \ndef square_nums(nums):\n    '''\n    Write a function to find the squares of individual elements in a list.\n    '''\n    return[x**2 for x in nums]\n    \n    \ndef update_count(data_dict, x):\n    '''\n    Write a function to add an element to a dictionary.\n    '''\n    data_dict[x] = data_dict.get(x, 0) + 1\n    return data_dict\n    \n    \ndef sort_by_count(data_dict):\n    '''\n    Write a function to sort a dictionary by count (descending) order.\n    '''\n    sorted_dic = sorted(data_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dic\n    \n    \ndef no_duplicates(x, y):\n    '''\n    Write a function to check if an element is in a list without duplicates.\n    '''\n    return x not in y\n    \n    \ndef is_palindrome(x):\n    '''\n    Write a function to check if the input is a palindrome.\n    '''\n    y = x[::-1]\n    return x == y\n    \n    \ndef is_palindrome_pythonic(x):\n    '''\n    Pythonic way of doing the same thing.\n    '''\n    return x == x[::-1]\n    \n    \ndef simple_func(a,b):\n    '''\n    Create a function which takes 2 numbers as arguments, and returns their sum.\n    '''\n    return a + b\n    \n    \ndef more_simple_func(a, b):\n    '''\n    Create a function which takes 2 numbers as arguments, and returns their product.\n    '''\n    return a * b\n    \n    \ndef add_mult(x,y):\n    '''\n    Write a function which takes 2 numbers and returns their sum and product.\n    '''\n    return x + y, x * y\n    \n    \ndef add_mult_test(x,y):\n    '''\n    Tests the function.\n    '''\n    sum, product = add_mult(x,y)\n    print(f\"The sum of {x} and {y} is {sum}.\")\n    print(f\"The product of {x} and {y} is {product}.\")\n    \n    \ndef is_member(x, y):\n    '''\n    Write a function which takes 2 lists as arguments, and returns whether the first list contains a particular element in the second list.\n    '''\n    return x.count(y) > 0\n    \n    \ndef is_member_test(x, y):\n    '''\n    Tests the function.\n    '''\n    if is_member(x,y):\n        print(f\"{x} contains {y}\")\n    else:\n        print(f\"{x} does not contain {y}\")\n    \n    \ndef find_common_elements(x, y):\n    '''\n    Write a function which takes 2 lists as arguments, and returns a list containing only the elements that are common between the lists.\n    '''\n    return x & y\n    \n    \ndef find_common_elements_test(x, y):\n    '''\n    Tests the function.\n    '''\n    common_elements = find_common_elements(x, y)\n    print(f\"Common elements between {x} and {y}: {common_elements}\")\n    \n    \ndef find_common_elements_alternative(x, y):\n    '''\n    Alternative implementation of find_common_elements\n    '''\n    return set(x) & set(y)\n    \n    \ndef find_common_elements_alternative_test(x, y):\n    '''\n    Tests the function.\n    '''\n    common_elements = find_common_elements_alternative(x, y)\n    print(f\"Common elements between {x} and {y}: {common_elements}\")\n    \n    \ndef get_middle(x):\n    '''\n    Write a function which takes a list as an argument, and returns a new list containing the middle elements of the list.\n    '''\n    return x[1:len(x)//2]\n    \n    \ndef get_middle_test(x):\n    '''\n    Tests the function.\n    '''\n    middle = get_middle(x)\n    print(f\"The middle elements of {x} are {middle}.\")\n    \n    \ndef get_middle_alternative(x):\n    '''\n    Alternative implementation of get_middle.\n    '''\n    return x[(len(x) + 1) // 2:]\n    \n    \ndef get_middle_alternative_test(x):\n    '''\n    Tests the function.\n    '''\n    middle = get_middle_alternative(x)\n    print(f\"The middle elements of {x} are {middle}.\")\n    \n    \ndef is_subsequence(x, y):\n    '''\n    Write a function which takes 2 strings as arguments, and returns whether x is a subsequence of y.\n    '''\n    return x in y\n    \n    \ndef is_subsequence_test(x, y):\n    '''\n    Tests the function.\n    '''\n    if is_subsequence(x, y):\n        print(f\"{x} is a subsequence of {y}\")\n    else:\n        print(f\"{x} is not a subsequence of {y}\")\n    \n    \ndef is_subsequence_alternative(x, y):\n    '''\n    Alternative implementation of is_subsequence.\n    '''\n    return x in y\n    \n    \ndef is_subsequence_alternative_test(x, y):\n    '''\n    Tests the function.\n    '''\n    if is_subsequence_alternative(x, y):\n        print(f\"{x} is a subsequence of {y}\")\n    else:\n        print(f\"{x} is not a subsequence of {y}\")\n    \n    \ndef is_subsequence_p_q(x, y):\n    '''\n    Write a function which takes 2 lists as arguments, and returns whether all elements of the first list is also elements of the second list.\n    '''\n    return set(x) <= set(y)\n    \n    \ndef is_subsequence_p_q_test(x, y):\n    '''\n    Tests the function.\n    '''\n    if is_subsequence_p_q(x, y):\n        print(f\"{x} and {y} are both subsequences of {x}.\")\n    else:\n        print(f\"{x} and {y} are not subsequences of {x}.\")\n    \n    \ndef is_subsequence_p_q_alternative(x, y):\n    '''\n    Alternative implementation of is_subsequence_p_q.\n    '''\n    return set(x) <= set(y)\n    \n    \ndef is_subsequence_p_q_alternative_test(x, y):\n    '''\n    Tests the function.\n    '''\n    if is_subsequence_p_q_alternative(x, y):\n        print(f\"{x} and {y} are both subsequences of {x}.\")\n    else:\n        print(f\"{x} and {y} are not subsequences of {x}.\")\n    \n    \ndef is_subsequence_alternative(x, y):\n    '''\n    Alternative implementation of is_subsequence\n    '''\n    return all(x[i] == y[i] for i in range(len(x)))\n    \n    \ndef is_subsequence_alternative_test(x, y):\n    '''\n    Tests the function.\n    '''\n    if is_subsequence_alternative(x, y):\n        print(f\"{x} is a subsequence of {y}.\")\n    else:\n        print(f\"{x} is not a subsequence of {y}.\")\n    \n    \ndef is_subsequence_alternative_n(x, y):\n    '''\n    Alternative implementation of is_subsequence.\n    '''\n    return x in y\n    \n    \ndef is_subsequence_alter"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num*num)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print(list(map(lambda x: x**3, nums)))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = 0\n    while (n < n):\n        sum = n\n        n = n + 1\n        print(sum)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 0:\n        return 0\n    sum = 1\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    while n!= 0: \n        res += n % 10\n        n = n // 10\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n_sum = 0\n    for i in range(n):\n        n_sum += 2**i\n    return n_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1,n):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1,n):\n        if is_prime(i):\n            total = total + i\n    print(total)\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    print (\"cal_sum\")\n    return n + n**2 + n**3 \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    while n > 0: \n        total += n \n        n = n // 10\n    return total\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(l):\n        print(str[i])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l is None or l == []:\n        return None\n    l = [str for str in l if str is not None]\n    if l == []:\n        return None\n    if len(l) >= l:\n        return ''.join(l[0:l])\n    else:\n        return ''.join(l)\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = []\n    i = 0\n    while i < l:\n        i = i + 1\n        s.append(str[i])\n    return ''.join(s)\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    temp = []\n    for i in str:\n        if len(temp)<l:\n            temp.append(i)\n        else:\n            break\n    return temp\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(l):\n        s1 = str[i]\n        s2 = str[i+1]\n        s3 = str[i+2]\n        if(len(s1) == l1):\n            l2.append(s1)\n        elif(len(s2) == l1):\n            l2.append(s2)\n        else:\n            l3.append(s1)\n    return l2, l3\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    t = []\n    while len(str) > 0:\n        for i in range(l):\n            if len(str) == 0:\n                return t\n            else:\n                t.append(str.pop(0))\n        l = len(t)\n        if l == 2:\n            break\n    return t\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l is None or str is None or len(str) == 0 or l == 0 or l < 0 or len(l) < 0 or len(str) > l:\n        return None\n    if len(str) == l:\n        return str\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    string_values = []\n    for i in range(l):\n        string_values.append(str[i*2:i*2+2])\n    \n    return string_values\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str = list(str)\n    for i in range(len(str)):\n        if len(str[i]) > l:\n            str[i] = str[i][0:l]\n    str = str[0].join(str)\n    return str\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.strip()\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # your code here\n    return text1.strip()\n    \ndef count_punctuation(text2):\n    '''\n    Write a function to count the number of punctuation symbols in the given string.\n    '''\n    # your code here\n    return sum(1 for char in text2 if char in '!?,.')\n    \ndef count_symbols(text3):\n    '''\n    Write a function to count the number of symbols in the given string.\n    '''\n    # your code here\n    return len(re.sub(r'\\W', '', text3))\n    \ndef check_if_word_exists(text4):\n    '''\n    Write a function to check if the given word exists in the given sentence.\n    '''\n    # your code here\n    return text4 in'samsung'\n    \ndef check_if_sentence_ends_with_period(text5):\n    '''\n    Write a function to check if the sentence ends with a period.\n    '''\n    # your code here\n    return text5.endswith('.')\n    \ndef check_if_sentence_starts_with_capital_letter(text6):\n    '''\n    Write a function to check if the sentence starts with a capital letter.\n    '''\n    # your code here\n    return text6[0].isupper()\n    \ndef check_if_sentence_ends_with_capital_letter(text7):\n    '''\n    Write a function to check if the sentence ends with a capital letter.\n    '''\n    # your code here\n    return text7.endswith('.')\n    \ndef count_words(text8):\n    '''\n    Write a function to count the number of words in the given sentence.\n    '''\n    # your code here\n    return len(text8.split())\n    \ndef check_if_sentence_has_prefix(text9):\n    '''\n    Write a function to check if the sentence starts with a prefix.\n    '''\n    # your code here\n    return text9.startswith('Hey')\n    \ndef check_if_sentence_ends_with_suffix(text10):\n    '''\n    Write a function to check if the sentence ends with a suffix.\n    '''\n    # your code here\n    return text10.endswith('.')\n    \ndef count_words_starting_with_v(text11):\n    '''\n    Write a function to count the number of words starting with vowel 'a'.\n    '''\n    # your code here\n    return sum(1 for word in text11.split() if word[0].lower() in 'aeiou')\n    \ndef count_words_starting_with_v(text12):\n    '''\n    Write a function to count the number of words starting with vowel 'a'.\n    '''\n    # your code here\n    return sum(1 for word in text12.split() if word[0].lower() in 'aeiou')\n    \ndef count_vowels(text13):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text13 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text14):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text14 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text15):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text15 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text16):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text16 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text17):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text17 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text18):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text18 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text19):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text19 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text20):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text20 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text21):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text21 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text22):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text22 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text23):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text23 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text24):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text24 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text25):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text25 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text26):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text26 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text27):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text27 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text28):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text28 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text29):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n    return sum(1 for char in text29 if char in 'aeiouAEIOU')\n    \ndef count_vowels_in_padded_sentence(text30):\n    '''\n    Write a function to count the number of vowels in the given sentence.\n    '''\n    # your code here\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #return text1.replace(' ','')\n    return re.sub(\"\\s+\", \" \", text1).strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    a = re.sub(r\"\\s+\", \"\", text1)\n    print(a)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = str(text1)\n    return text.strip()\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount < 0:\n        return 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # write your logic here\n    if actual_cost - sale_amount > 0:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount \n    return loss_amount \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost==0:\n        return 0\n    else:\n        return sale_amount-(actual_cost/100)*sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return (actual_cost - sale_amount)\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\nprint(loss_amount(10,5)) \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0 if actual_cost == sale_amount else actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1,1):\n        if (n%i == 0):\n            sum += i\n    if (n%2 == 0):\n        sum += n/2\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(2,n) :\n        if(n%i == 0) :\n            count = count+i\n    print(count)\n    return count\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    if n % 2 == 0 :\n        while n > 1 :\n            sum = sum + n / 2\n            n = n / 2\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n//2 + 1) : \n        if n % i == 0 : \n            sum += i \n    return sum \n    "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= math.sqrt(n) :\n        if n%i == 0 :\n            sum += i\n            if i!= n/i :\n                sum += n/i\n        i += 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if(n%i == 0) :\n            total = total + i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    ans=0\n    i=1\n    while i*i<=n:\n        if n%i==0:\n            if i%2==0:\n                ans+=i\n            i+=1\n    return ans\nprint(sumofFactors(36))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n) :\n        if n%i==0 :\n            sum = sum+i\n    return sum\nn = int(input())\nprint(sumofFactors(n))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s=0\n    for i in range(1, n+1):\n        if n%i==0:\n            s+=i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    num = int(math.sqrt(n)) \n    sum = 0\n    for i in range(1, num+1) : \n        if n % i == 0: \n            sum += i\n    if sum % 2 == 0 : \n        return sum \n    else:\n        return -1\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.search(r'\\bz\\b', text)\n    if word:\n        print(word.group())\n    else:\n        print(False)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m=re.match('z',text)\n    if m!=None:\n        return True\n    else:\n        return False\n    \ndef upper_case(str):\n    '''\n    Write a function that converts the first letter of a string to upper case.\n    '''\n    return str.upper()\n    \ndef is_a_number(str):\n    '''\n    Write a function that checks if a string is a number.\n    '''\n    try:\n        float(str)\n        return True\n    except ValueError:\n        return False\n    \ndef count_occurrences(text, word):\n    '''\n    Write a function that counts how many times a word occurs in a text.\n    '''\n    m = text.count(word)\n    return m\n    \ndef multiply_strings(text1, text2):\n    '''\n    Write a function that multiplies two strings.\n    '''\n    return text1 + text2\n    \ndef word_length(str):\n    '''\n    Write a function that counts the length of a string and returns it.\n    '''\n    return len(str)\n    \ndef is_lowercase(str):\n    '''\n    Write a function that checks if a string contains only lowercase letters.\n    '''\n    return str.islower()\n    \ndef is_lowercase(str):\n    '''\n    Write a function that checks if a string contains only lowercase letters.\n    '''\n    return str.islower()\n    \ndef is_lowercase(str):\n    '''\n    Write a function that checks if a string contains only lowercase letters.\n    '''\n    return str.islower()\n    \ndef has_e(str):\n    '''\n    Write a function that checks if a string contains the letter \"e\".\n    '''\n    return 'e' in str\n    \ndef has_e(str):\n    '''\n    Write a function that checks if a string contains the letter \"e\".\n    '''\n    return 'e' in str\n    \ndef has_e(str):\n    '''\n    Write a function that checks if a string contains the letter \"e\".\n    '''\n    return 'e' in str\n    \ndef is_in_list(str, lst):\n    '''\n    Write a function that checks if a string is a member of a list.\n    '''\n    return str in lst\n    \ndef is_in_list(str, lst):\n    '''\n    Write a function that checks if a string is a member of a list.\n    '''\n    return str in lst\n    \ndef is_in_list(str, lst):\n    '''\n    Write a function that checks if a string is a member of a list.\n    '''\n    return str in lst\n    \ndef is_upper(str):\n    '''\n    Write a function that checks if a string is all uppercase.\n    '''\n    return str.isupper()\n    \ndef is_upper(str):\n    '''\n    Write a function that checks if a string is all uppercase.\n    '''\n    return str.isupper()\n    \ndef is_upper(str):\n    '''\n    Write a function that checks if a string is all uppercase.\n    '''\n    return str.isupper()\n    \ndef is_upper(str):\n    '''\n    Write a function that checks if a string is all uppercase.\n    '''\n    return str.isupper()\n    \ndef is_lowercase(str):\n    '''\n    Write a function that checks if a string contains only lowercase letters.\n    '''\n    return str.islower()\n    \ndef is_lowercase(str):\n    '''\n    Write a function that checks if a string contains only lowercase letters.\n    '''\n    return str.islower()\n    \ndef is_lowercase(str):\n    '''\n    Write a function that checks if a string contains only lowercase letters.\n    '''\n    return str.islower()\n    \ndef is_lowercase(str):\n    '''\n    Write a function that checks if a string contains only lowercase letters.\n    '''\n    return str.islower()\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \ndef is_word_in_str(str, word):\n    '''\n    Write a function that checks if a word is in a string.\n    '''\n    return str.find(word)\n    \nde"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #find all words in text containing 'z' and return them\n    # Return all words in text that contain 'z'\n    return re.findall('z',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text=text.lower()\n    return re.findall(r'z+',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for word in re.finditer(\"[zZ]\", text):\n        print(word.start(), word.end())\n        print(text[word.start():word.end()])\n    return\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pat = re.compile(r'z+')\n    match_list = pat.findall(text)\n    return match_list\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = re.finditer(r'\\bz\\w+',text)\n    for match in matches:\n        print(match.group())\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z'\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        monthnum2 = int(monthnum2)\n    except ValueError:\n        print(\"Please enter a valid month number\")\n        return\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0:\n        print(\"Incorrect Input\")\n    elif monthnum2 % 2!= 0:\n        print(\"No, 31 days\")\n    elif monthnum2 > 0:\n        print(\"Yes, 31 days\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 < 1) or (monthnum2 > 12):\n        return 0\n    if (monthnum2 == 2):\n        return 29\n    elif (monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11):\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10:\n            print(True)\n        else:\n            print(False)\n    else:\n        if monthnum2 == 2:\n            print(True)\n        else:\n            print(False)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2:\n            print('the year is leap')\n            print('the month number is correct')\n        else:\n            print('the month number is correct')\n    else:\n        print('the month number is wrong')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return 30\n        else:\n            return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    return False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for each_string in stringlist:\n        new_list.append(each_string[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1,-1,-1):\n        print(i)\n        stringlist[i] = stringlist[i][::-1]\n        print(stringlist)\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # if the list is empty, return\n    if not stringlist:\n        return []\n    \n    # else, return a reversed list\n    else:\n        return reverse_list_helper(stringlist, 0, len(stringlist)-1)\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # TODO: Write your function here\n    s = \"\"\n    return(stringlist[::-1])\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist.reverse()\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    mn = min(lst,key=len)\n    return mn\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=len(lst[0])\n    for x in lst:\n        if len(x)<min_len:\n            min_len=len(x)\n    if min_len==len(lst[0]):\n        return lst\n    else:\n        return Find_Min(Find_Min(lst))\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0][0]\n    min_len_idx = 0\n    for i in range(1,len(lst)):\n        if min_len > lst[i][0]:\n            min_len = lst[i][0]\n            min_len_idx = i\n    return min_len_idx\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    l = 0\n    r = n-1\n    while l < r:\n        if lst[l] > lst[r]:\n            r -= 1\n        else:\n            l += 1\n    return lst[l]\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst=sorted(lst)\n    min=lst[0]\n    for i in range(len(lst)):\n        if len(lst[i])<len(min):\n            min=lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    x = lst\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            if len(x[i]) > len(x[j]):\n                break\n        if j == len(x) - 1:\n            return x[i]\n            \nx = list(map(int, input().split()))\nprint(Find_Min(x))"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    while (i < len(lst)):\n        if i == len(lst) - 1:\n            return lst\n        if len(lst[i]) < len(lst[i+1]):\n            return lst[i]\n        i = i + 1\n    return lst[i]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    if n == 0:\n        return []\n    ans = lst[0]\n    for i in range(1, n):\n        if len(lst[i]) < len(ans):\n            ans = lst[i]\n    return ans\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = 0\n    while min < len(lst) and lst[min] == 0:\n        min += 1\n    min_lst = []\n    for i in range(min, len(lst)):\n        if lst[i]!= 0:\n            min_lst.append(lst[i])\n        else:\n            min_lst.append(9999999)\n    # print(min_lst)\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst)\n    for i in range(m):\n        for j in range(i+1,m):\n            if(len(lst[i])<len(lst[j])):\n                min_sub = lst[i]\n                break\n    print(min_sub)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (l+b)*2\ndef circle_area(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*radius*radius\ndef circle_circumference(radius):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*radius\ndef circle_area_by_radius(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*r*r\ndef circle_circumference_by_radius(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\ndef rectangle_area_by_height_and_width(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_2(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_3(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_4(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_5(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_6(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_7(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_8(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_9(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_10(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_11(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_12(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_13(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_14(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_15(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_16(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_17(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_18(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_19(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_20(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_21(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_22(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_23(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_24(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_25(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_26(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_27(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_28(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_29(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_30(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_31(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_32(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_33(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_34(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_35(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_36(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_37(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_38(h,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*w\ndef rectangle_area_by_height_and_width_39(h,"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = str1.lower()\n    result = result.replace(result.upper(), '')\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    list = []\n    for i in str1:\n        if i.isupper():\n            list.append(i)\n    return \"\".join(list)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''\n    for ch in str1:\n        if ch.isalpha():\n            result += ch\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if not str1:\n        return str1\n    if str1[0].isupper():\n        return str1[0].lower() + str1[1:]\n    else:\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.casefold()\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    a = list(map(lambda x: x[0], lst)) \n    print (a) \n    # Write your code here \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n    return lst1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return([item[0] for item in lst])\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in range(0,len(lst)-1,2):\n        res.append(lst[i])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst_iter = iter(lst)\n    return [next(lst_iter) for ele in lst_iter]\n    \n    \ndef main():\n    lst = [[1,2,3],['a','b','c'],['p','q','r']]\n    print(Extract(lst))\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    newList = [] \n    for i in lst:\n        newList.append(i[0]) \n    return newList\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n    \ndef main():\n    '''\n    Input:\n        [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [10, 11, 12]]\n    Output:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    '''\n    x = [[1, 2, 3],\n         [4, 5, 6],\n         [7, 8, 9],\n         [10, 11, 12]]\n    print(Extract(x))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return (lst[0]) \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return([i[0] for i in lst])\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    return [x[0] for x in lst]\n    #python code\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count+1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    print(\"The number of upper case characters in the given string is: \",len(str.upper()))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = 0\n    for i in str:\n        if i.isupper():\n            result += 1\n    return result\n    \nif __name__ == '__main__':\n    str = 'Hello'\n    print('The upper case characters in string:', upper_ctr(str))"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] >='A' and str[i] <= 'Z':\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    print(\"The count of upper case characters in a string:\",count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isupper():\n            cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isupper()):\n            count+=1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    combination = []\n    for i in range(0, len(list1)):\n        combination.append(list1[i])\n        if len(combination) == 1:\n            combinations.append(combination)\n        else:\n            for j in range(i, len(list1)):\n                combination[j] = list1[j]\n                if len(combination) == 1:\n                    combinations.append(combination)\n                else:\n                    combinations.extend(combinations_list(combination))\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    list2 = []\n    temp = []\n    combi_dict = {}\n    # copy the list so we don't mess up the original list\n    list1 = list1[:]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    # no need to copy again since they're already there\n    for i in list2:\n        # make sure the list2 is not empty\n        if list2:\n            # start from 1 so we don't get the list itself\n            for j in range(1,len(list2)):\n                for k in range(j+1,len(list2)+1):\n                    temp = list2[0:j]\n                    temp.extend(list2[j:k])\n                    temp.append(list2[k-1])\n                    combi_dict[tuple(temp)] = i\n            list2 = []\n        # if it's an empty list2, we're done and can move on\n        else:\n            break\n    for i in range(len(list1)):\n        temp = list1[:]\n        temp.pop(i)\n        result.append(combi_dict[tuple(temp)])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    if len(list1) == 0:\n        return output\n    combs = []\n    output = combinations_list(list1[1:])\n    for i in output:\n        combs.append([list1[0]] + i)\n    for i in combs:\n        if i not in output:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1) + 1):\n        combinations.append(list1[:i])\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    elif len(list1)==1:\n        return [[list1[0]]]\n    elif len(list1)==2:\n        return [[list1[0], list1[1]], [list1[1], list1[0]]]\n    else:\n        result=[]\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                s=list1[i]+list1[j]\n                if sorted(s) not in result:\n                    result.append(sorted(s))\n        return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    returned_list = []\n    combinable_list = []\n    \n    for x in range(len(list1)):\n        combinable_list.append(list1[x])\n        \n        if len(combinable_list) >= 2:\n            combinable_list.pop(0)\n            returned_list.append(combinable_list)\n            combinable_list = []\n    \n    return returned_list\n    \nprint(combinations_list([1,2,3]))\nprint(combinations_list([1,2,3,4]))\nprint(combinations_list([1,2,3,4,5]))\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = list1\n    combinations = []\n    if len(l) == 0:\n        combinations.append([])\n    else:\n        for i in range(len(l)):\n            current = l[i]\n            for j in range(i+1,len(l)):\n                next = l[j]\n                for k in range(j+1,len(l)):\n                    third = l[k]\n                    for l in range(k+1,len(l)):\n                        fourth = l\n                        combinations.append([current,next,third,fourth])\n    print(combinations)\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #import pdb; pdb.set_trace()\n    if len(list1) == 0:\n        return []\n    else:\n        # list1.sort()\n        # print(list1)\n        result = []\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                if (list1[i], list1[j]) not in result:\n                    result.append((list1[i], list1[j]))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = len(list1)\n    res = []\n    for i in range(l):\n        for j in range(i,l):\n            res.append(list1[i:j])\n    return res\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        return arr[0]\n    if arr[1] > arr[0]:\n        return arr[1]\n    for i in range(2, len(arr)):\n        #print(i, arr[i])\n        if arr[i] > arr[i-1]:\n            return max(arr[i], arr[i]*arr[i-1], arr[i]*arr[i-2])\n        if arr[i] < arr[i-1]:\n            return max(arr[i], arr[i-1]*arr[i], arr[i-2]*arr[i])\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr.append(0)\n    max_prod = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            arr[i] = arr[i] * arr[i-1]\n            max_prod = max(max_prod, arr[i])\n    \n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return max(arr)\n    max_prod = max(arr)\n    curr_prod = max_prod\n    curr_max_prod = max_prod\n    for i in range(1, len(arr)):\n        curr_prod = max(curr_prod * arr[i], arr[i])\n        curr_max_prod = max(curr_prod, curr_max_prod)\n    return curr_max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Let's check for the subarray of length 1.\n    if len(arr) <= 1:\n        return max(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    return maxProductSubarray(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # initialize the max_product variable and the start and end indexes\n    max_product = -float('inf')\n    start = 0\n    end = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #Optimal Solution:\n    #Make two arrays with the maximum possible values and the final array.\n    #The first array contains the final values.\n    #The second array contains the indexes where the final value is.\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #define a variable to keep track of the max product so far\n    max_product = 1\n    #define a variable to keep track of the curr max product so far\n    curr_max_product = 1\n    for i in range(len(arr)):\n        #define a variable to track the current product\n        curr_product = 1\n        #define a variable to track the current max product\n        curr_max_product = 1\n        #set the current value to the current product and the current max product to the current value\n        curr_product = arr[i]\n        curr_max_product = arr[i]\n        #loop through the array backwards\n        for j in range(i-1, -1, -1):\n            #get the value and the max product\n            #if the value is greater than 0 and the current max product is less than 1, set it to the current max product\n            if arr[j] > 0 and curr_max_product < 1:\n                curr_max_product = arr[j]\n            #if the value is less than 0 and the current max product is greater than 1, set it to the current max product\n            if arr[j] < 0 and curr_max_product > 1:\n                curr_max_product = arr[j]\n            #if the current product is greater than the current max product, set the new product to the current product\n            if curr_product > curr_max_product:\n                curr_product = curr_max_product\n            #if the current product is less than the current max product, set the new product to the current product\n            if curr_product < curr_max_product:\n                curr_product = curr_max_product\n        #set the max product to the curr max product\n        max_product = max(max_product, curr_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        product = arr[0]\n        max_product = product\n        for i in range(1, len(arr)):\n            max_product = max(product * arr[i], max_product)\n            product = max(product, arr[i])\n        return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = arr[0]\n    max_product = product\n    for i in range(1, len(arr)):\n        product = product * arr[i]\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if val!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    assert isinstance(dict, dict)\n    assert isinstance(n, int)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    is_true = True\n    for i in dict:\n        if dict[i]!= n:\n            is_true = False\n            break\n    return is_true\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict.values() == [n]\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # if dict.values().count(n) == len(dict):\n    if n in dict.values():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[key] == dict[key] for key in dict.keys())\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values())!= n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new = dict1.copy()\n    for i, j in dict1.items():\n        if j is None:\n            new.pop(i)\n    return new\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys = []\n    for key in dict1.keys():\n        if dict1[key]!= \"\":\n            keys.append(key)\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    list1 = list(dict1.keys())\n    list2 = list(dict1.values())\n    dict2 = {list1[i]:list2[i] for i in range(len(list2)) if list2[i]!=''}\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_dict = dict()\n    for key, value in dict1.items():\n        if value:\n            empty_dict[key] = value\n    return empty_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1)!= 0:\n        dict2 = {}\n        for key,value in dict1.items():\n            if value!= '':\n                dict2[key] = value\n    else:\n        dict2 = {}\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if v=='':\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            result[key] = value\n    return result\n    \nprint(drop_empty({\"fname\":\"jon\", \"lname\": \"Doe\", \"city\":\"Seattle\"}))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # your code here\n    # print(dict1)\n    for i in dict1.items():\n        if i[1] == {}:\n            del dict1[i[0]]\n    # return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            del dict1[key]\n        else:\n            break\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    return dict1.pop(None, None)\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    ans = arr[0]\n    temp_max = 1\n    temp_min = 1\n    for i in range(len(arr)):\n        temp_max *= arr[i]\n        temp_min *= arr[i]\n        if temp_max > ans:\n            ans = temp_max\n        if temp_min < ans:\n            ans = temp_min\n    return ans\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    l = len(arr)\n    maxi = arr[0]\n    if l == 1:\n        return maxi\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr or len(arr)==0: return 0\n    max_product_curr=arr[0]\n    max_product_curr_prev=arr[0]\n    max_product_curr_product=arr[0]\n    \n    for i in range(1,len(arr)):\n        max_product_curr=max(max_product_curr,max_product_curr_prev*arr[i])\n        max_product_curr_prev=max_product_curr_prev*arr[i-1]\n        max_product_curr_product=max(max_product_curr_product,max_product_curr)\n    return max_product_curr_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #this is a backtracking problem so you may want to think about this in terms of graph.\n    #the idea is to keep track of the last valid maximum number in the array.\n    #the idea is to keep track of the maximum product after i/p array is sorted.\n    #start at the back and keep track of the last valid number.\n    #keep track of the current maximum product.\n    #when the next number is greater than the last valid product,\n    #update the last valid product and set current maximum product to 0.\n    #when the next number is smaller than the last valid product,\n    #update the last valid product and set current maximum product to 0.\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    result = arr[0]\n    for i in range(1,n):\n        result = max(result*arr[i], arr[i])\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    start = 0\n    end = 0\n    while start < len(arr):\n        #print(start, end, arr[start], arr[end])\n        if end == len(arr)-1:\n            end = start + 1\n            continue\n        if arr[start]*arr[end] > max_prod:\n            max_prod = arr[start]*arr[end]\n        if arr[end]*arr[start] < max_prod:\n            end += 1\n        else:\n            start += 1\n            end = start + 1\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    for i in range(1,len(arr)):\n        arr[i] = max(arr[i], arr[i] * arr[i-1])\n    return arr[-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    from collections import deque\n    \n    # max_product will hold the result \n    max_product = -999999999\n    \n    # Declare the input array\n    arr = deque(arr)\n    \n    # for all the numbers in the input array\n    for i in range(len(arr)):\n        \n        # extract the first number of the input array\n        # since we know that this number will be multiplied with the other numbers in the array\n        num1 = arr.popleft()\n        \n        # Calculate the product of the number and the product of the remaining numbers in the input array\n        # this operation will be done to the first number of the input array\n        # and then multiply the product with the rest of numbers in the array\n        product = num1 * max_product\n        max_product = max(max_product, product)\n        \n        # Iterate over the input array\n        # multiply the first number with the product of the remaining numbers\n        # and keep track of the maximum product\n        for j in range(len(arr)):\n            \n            # calculate the product of the first number and the remaining numbers in the input array\n            product = num1 * arr.popleft()\n            max_product = max(max_product, product)\n            \n            # add the last number to the left of the input array\n            # since we know that this number will be multiplied with the other numbers in the array\n            arr.appendleft(num1)\n            \n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # There are several ways to solve this problem.\n    # One way to solve this problem is to keep a variable (max_product) which stores the maximum product. \n    # This gives us the concept of \"Monotonic stack\" which has the idea of keeping track of the maximum product. \n    # This variable has the value that we will be comparing for each iteration. \n    # If we have a new maximum product, then we replace it.\n    # If we have a new maximum product, but it is smaller than the previous max_product, then we replace it. \n    # This is a simple and intuitive way to solve the problem. \n    # We can do the same problem in a similar way with an additional stack.\n    # We can solve the problem with just one stack, which contains the products of the sub-sequence. \n    # Then we can keep track of the max_product with the help of the maximum product in the stack.\n    # We will create a new stack and push the maximum product of the current stack into it.\n    # At the end of the function, we will return the maximum value in the stack. \n    \n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    \n    max_product = 0\n    stack = []\n    \n    for i in range(len(arr)):\n        curr_num = arr[i]\n        \n        # If stack is empty\n        if len(stack) == 0:\n            stack.append(curr_num)\n        \n        # If stack is not empty\n        else:\n            \n            # Find the maximum product\n            if stack[-1]*curr_num > max_product:\n                max_product = stack[-1]*curr_num\n            \n            # If current number is smaller than the maximum product\n            if curr_num > max_product:\n                stack.append(curr_num)\n                \n    return max_product\n    \narr = [1,2,3,4,5,6,7]\nprint(max_product(arr))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    lst = []\n    for i in range(len(tup)-1):\n        lst.append(tup[i]+tup[i+1])\n    lst.append(tup[len(tup)-1])\n    return tuple(lst)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    i = 0\n    i_list = []\n    for item in test_tup:\n        i_list.append(i)\n        i += 1\n    \n    result_tup = []\n    for item in range(len(i_list)):\n        if item + 1 == i_list[item]:\n            result_tup.append(test_tup[i_list[item]] + test_tup[i_list[item + 1]])\n        else:\n            result_tup.append(test_tup[i_list[item]] + test_tup[i_list[item + 1]])\n            \n    return result_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return []\n    else:\n        pair_list = []\n        for i in range(len(test_tup)-1):\n            pair_list.append(test_tup[i] + test_tup[i+1])\n        pair_list.append(test_tup[-1] + test_tup[0])\n        return pair_list\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # your code here\n    s=test_tup[0]\n    pairwise=[]\n    for i in range(len(test_tup)-1):\n        pairwise.append(s+test_tup[i+1])\n        s=pairwise[i]\n    pairwise.append(s+test_tup[-1])\n    return tuple(pairwise)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not test_tup:\n        return None\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # print(test_tup)\n    # print(type(test_tup))\n    # print(type(test_tup[0]))\n    # print(type(test_tup[1]))\n    # print(type(test_tup[2]))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    first = test_tup[0]\n    second = test_tup[1]\n    print(first + second)\n    print(first, second)\n    return\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(f'Given tuple: {test_tup}')\n    print(f'Pairwise addition of neighboring elements: {tuple(map(lambda x, y: x + y, test_tup[:-1], test_tup[1:]))}')\n    \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x=test_tup[0]\n    y=test_tup[1]\n    pw_add_tup=((x+y),(x-y))\n    return(pw_add_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup\n    sum = 0\n    for i in range(len(a)):\n        if i == 0:\n            sum = sum + a[i]\n        else:\n            sum = sum + a[i]\n        if i == len(a)-1:\n            return (sum,a)\n        if i == len(a)-2:\n            sum = sum - a[i]\n        else:\n            sum = sum - a[i]\n    return (sum,a)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for ele in arr:\n        product = product * ele % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    p = 1\n    for i in range(n):\n        p *= arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod = (prod * arr[i]) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1: \n        return (sum(arr))\n    else: \n        temp = find_remainder(arr, n//2) \n        if n & 1: \n            return ((temp + temp) % n) * arr[-1] \n        else: \n            return (temp * temp) % n \n  \nn = int(input())\na = list(map(int,input().split()))\nprint(find_remainder(a,n)"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    n=sum(arr)\n    return (n*(n-1))%n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code here\n    p = 1\n    for i in range(len(arr)):\n        p = (p * arr[i]) % n\n    return p\n    \n    \n    \n    \n    "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod = prod * arr[i]\n    \n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, n):\n        prod = prod * arr[i]\n    return prod % n\n    \n    \n    \ndef find_multiple(arr, n): \n    '''\n    Write a python function to find the multiple of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, n):\n        prod = prod * arr[i]\n    return prod % n\n        \n    \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n==1: \n        return arr[0] \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i % n\n    return product\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(0,len(l)-1):\n        if l[i]!=l[i+1]:\n            return 0\n    return 1\n    \n    \n    \n    \n    \n    \n    \ndef check_sequence(l):\n    '''\n    Write a python function to check whether a given list contains all the elements of a sequence or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    if l==l[::-1]:\n        return 1\n    else:\n        return 0\n    \n    \n    \n    \n    \n    \n    \ndef check_all_different(l):\n    '''\n    Write a python function to check whether a given list contains all the different elements or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    if len(l)==len(set(l)):\n        return 1\n    else:\n        return 0\n    \n    \n    \n    \n    \n    \n    \ndef check_greater_than_n(l,n):\n    '''\n    Write a python function to check whether a given list contains all the elements greater than n or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    if len(l)>n:\n        return 1\n    else:\n        return 0\n    \n    \n    \n    \n    \n    \ndef check_same_first_and_last(l):\n    '''\n    Write a python function to check whether the given list contains same first and last elements or not.\n    '''\n    \n    if len(l)==1 and l[0]==l[-1]:\n        return 1\n    else:\n        return 0\n    \n    \n    \n    \n    \n    \ndef check_same_first_and_last_every_other(l):\n    '''\n    Write a python function to check whether the given list contains same first and last elements in all the odd positions or not.\n    '''\n    \n    if len(l)==1:\n        return 1\n    \n    else:\n        l.sort()\n        if l[0]==l[-1]:\n            if len(l)%2==0:\n                return 1\n            else:\n                return 0\n        else:\n            return 0\n    \n    \n    \n    \n    \n    \ndef check_odd_even_divisible(l):\n    '''\n    Write a python function to check whether the given list contains odd and even divisible or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i]%2==0:\n            if l[i+1]%2!=0:\n                return 0\n        else:\n            if l[i+1]%2!=0:\n                return 0\n    return 1\n    \n    \n    \n    \n    \n    \ndef check_odd_even_divisible_pairs(l):\n    '''\n    Write a python function to check whether the given list contains odd and even divisible or not in pairs.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i]%2==0:\n            if l[i+1]%2!=0:\n                return 0\n        else:\n            if l[i+1]%2!=0:\n                return 0\n    return 1\n    \n    \n    \n    \n    \n    \ndef check_odd_even_divisible_pairs_v2(l):\n    '''\n    Write a python function to check whether the given list contains odd and even divisible or not in pairs.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    l1=[]\n    for i in range(len(l)-1):\n        if l[i]%2==0:\n            l1.append(l[i])\n        else:\n            l1.append(l[i+1])\n    l1.sort()\n    for i in range(len(l1)-1):\n        if l1[i]%2!=0:\n            return 0\n    return 1\n    \n    \n    \n    \n    \n    \ndef check_pairs(l):\n    '''\n    Write a python function to check whether the given list contains pairs of equal elements or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return 1\n    return 0\n    \n    \n    \n    \n    \n    \ndef check_pairs_v2(l):\n    '''\n    Write a python function to check whether the given list contains pairs of equal elements or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return 1\n    return 0\n    \n    \n    \n    \n    \n    \ndef check_odd_even_divisible_v2(l):\n    '''\n    Write a python function to check whether the given list contains odd and even divisible or not in pairs.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    l1=[]\n    for i in range(len(l)-1):\n        if l[i]%2==0:\n            l1.append(l[i])\n        else:\n            l1.append(l[i+1])\n    l1.sort()\n    for i in range(len(l1)-1):\n        if l1[i]%2!=0:\n            return 0\n    return 1\n    \n    \n    \n    \n    \n    \ndef check_divisible_in_sequence(l):\n    '''\n    Write a python function to check whether a given list contains a sequence of numbers which are divisible by 5 or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i]%5!=0:\n            return 0\n    return 1\n    \n    \n    \n    \n    \n    \ndef check_divisible_in_sequence_v2(l):\n    '''\n    Write a python function to check whether a given list contains a sequence of numbers which are divisible by 5 or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    l1=[]\n    for i in range(len(l)-1):\n        if l[i]%5!=0:\n            l1.append(l[i])\n    l1.sort()\n    for i in range(len(l1)-1):\n        if l1[i]%5!=0:\n            return 0\n    return 1\n    \n    \n    \n    \n    \n    \ndef check_divisible_in_sequence_v3(l):\n    '''\n    Write a python function to check whether a given list contains a sequence of numbers which are divisible by 5 or not.\n    '''\n    \n    l=set(l)\n    l=list(l)\n    l.sort()\n    l1=[]\n    for i in range(len(l)-1):\n        if l[i]%5!=0:\n            l1.append(l[i])\n    l1.sort()\n    l2=[]\n    for i in range(len(l1)-1):\n        if l1[i]%5!=0:\n            l2.append(l1[i])\n    l2.sort()\n    for i in range(len(l2)-1):\n        if l2[i]%5!=0:\n            return 0\n    return 1\n    \n    \n    \n    \n    \n    \ndef check_consecutive_v2(l):\n    '''\n    Write a python function t"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i-1] + 1!= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return False\n    if len(l) <= 1:\n        return True\n    \n    cnt = 0\n    for i in range(0, len(l)):\n        if i+1 < len(l) and l[i] == l[i+1]:\n            cnt += 1\n        else:\n            if cnt == 0:\n                return False\n            cnt = 0\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i=0\n    temp=[]\n    if len(l)==0:\n        return False\n    for i in range(len(l)):\n        if len(temp)==0:\n            temp.append(l[i])\n        else:\n            if l[i]==temp[-1]+1:\n                temp.append(l[i])\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    lst = list(l)\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1] + 1:\n            print(True)\n            return\n    print(False)\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l is None:\n        return False\n    if len(l) <= 1:\n        return False\n    for i in range(len(l)-1):\n        if l[i]!= l[i+1]-1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l) - 1:\n        if l[i] + 1!= l[i + 1]:\n            break\n        i += 1\n    if i == len(l) - 1:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        print(\"Invalid list\")\n        return\n    prev = l[0]\n    count = 1\n    for i in range(1, len(l)):\n        if l[i] == prev + 1:\n            count += 1\n        else:\n            if count == 2:\n                return True\n            else:\n                count = 1\n                prev = l[i]\n    if count == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = 0\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            flag = 1\n    if flag == 0:\n        print(\"No consecutive numbers.\")\n    else:\n        print(\"Consecutive numbers.\")\n        \nl = [4,7,10,4,9,11]\ncheck_Consecutive(l)\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    union_set = set(test_list1 + test_list2)\n    intersection_set = set(test_list1) & set(test_list2)\n    return intersection_set\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    ans = []\n    ans = set(test_list1) & set(test_list2)\n    return ans\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # traverse through the first list\n    for ele1 in test_list1:\n        # traverse through the second list\n        for ele2 in test_list2:\n            # if same element found, then return the tuple\n            if ele1 == ele2:\n                return ele1\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection_list.append(item)\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    set_1 = set(test_list1)\n    set_2 = set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        if i in test_list2 and i not in result:\n            result.append(i)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tup_1 = test_list1\n    tup_2 = test_list2\n    tup_set = set(tup_1) & set(tup_2)\n    return tuple(tup_set)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    return str2\n    \ndef is_positive_number(num):\n    '''\n    Write a function to determine if a number is positive or not.\n    '''\n    if num>0:\n        print(\"number is positive\")\n    else:\n        print(\"number is not positive\")\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    ch = str1.find(ch)\n    new_string = str1[:ch] + newch + str1[ch+1:]\n    return new_string\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            result += newch\n        else:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,''.join(newch))\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    lst=list(str1)\n    lst1=list(ch)\n    for i in range(len(lst1)):\n        lst[i]=newch\n    return ''.join(lst)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #newstr=str1[:ch]+newch+str1[ch+1:]\n    newstr=str1[:ch]+newch+str1[ch+1:]\n    print(newstr)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1\n    for i in range(0,len(str1)):\n        if str1[i]==ch:\n            str2=str2.replace(ch,newch)\n        else:\n            str2=str2\n    return str2\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    \ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    \ndef num_char_freq(text):\n    '''\n    Write a function to print the frequency of each character.\n    '''\n    if text is None:\n        return 'Empty'\n    return dict(Counter(text))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #return list(dict1.items())\n    # return sorted(dict1.items(), key=lambda x:x[1])\n    # return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    # return sorted(dict1.items(), key=lambda x:x[1])\n    # return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    # return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # dict1 = {1: 3, 2: 3, 3: 5, 4: 4, 5: 5}\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    # output = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    # return output\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda kv:(kv[1],kv[0]),reverse=True))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # print(sorted(dict1.items(), key=lambda x: x[1]))\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n    #return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda kv: kv[1]))\ndef sort_counter_v2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda kv: (kv[1], kv[0])))\ndef get_max_elem(dict1):\n    '''\n    Write a function to get the maximum value in a dictionary.\n    '''\n    return max(dict1.keys(), key=(lambda x: dict1[x]))\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    if len(str1)!= len(str2):\n        return False\n    \n    # list1 = list(str1)\n    # list2 = list(str2)\n    # str1 = sorted(list1)\n    # str2 = sorted(list2)\n    # if str1 == str2:\n    #     return True\n    # else:\n    #     return False\n    \n    dict1 = Counter(str1)\n    dict2 = Counter(str2)\n    \n    if dict1 == dict2:\n        return True\n    else:\n        return False\ndef get_longest_substr(str1):\n    '''\n    Write a function to get the longest substring that does not contain any repeating characters.\n    '''\n    str1 = str1.lower()\n    dict1 = {}\n    \n    if len(str1) < 2:\n        return str1\n    \n    for i in range(len(str1)):\n        char = str1[i]\n        if char in dict1:\n            dict1[char] += 1\n        else:\n            dict1[char] = 1\n            \n    longest_substr = ''\n    for j in range(len(str1)):\n        char = str1[j]\n        if dict1[char] == 1:\n            longest_substr += char\n            \n            if len(longest_substr) > len(str1):\n                return longest_substr\n    \n    return longest_substr\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    my_dict = dict()\n    temp_dict = dict()\n    result = list()\n    for key, value in dict1.items():\n        if value not in my_dict:\n            my_dict[value] = key\n        else:\n            temp_dict[value] = key\n    for key in sorted(my_dict):\n        result.append(my_dict[key])\n        if key in temp_dict:\n            result.append(temp_dict[key])\n    return result\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    print(nums[0]+nums[-1])\n    return nums[0]+nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max=0\n    min=0\n    for i in nums:\n        if(max<i):\n            max=i\n        if(min>i):\n            min=i\n    return max+min\ndef find_max(nums):\n    '''\n    Write a python function to find the max value in a given array.\n    '''\n    max=-1\n    for i in nums:\n        if(max<i):\n            max=i\n    return max\ndef find_min(nums):\n    '''\n    Write a python function to find the min value in a given array.\n    '''\n    min=100000\n    for i in nums:\n        if(min>i):\n            min=i\n    return min\ndef find_abs(nums):\n    '''\n    Write a python function to find the absolute value of a given number.\n    '''\n    if(nums>0):\n        return nums\n    else:\n        return -nums\ndef find_div(a,b):\n    '''\n    Write a python function to find the largest common factor of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a\ndef find_div2(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div3(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div4(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div5(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div6(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div7(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div8(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div9(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div10(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div11(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div12(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div13(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div14(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div15(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div16(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div17(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div18(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div19(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div20(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div21(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div22(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        a,b=b,a\n    while(a%b!=0):\n        a,b=b,a%b\n    return a*b\ndef find_div23(a,b):\n    '''\n    Write a pytho"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    print(f'Sum of maximum and minimum value is: {max_val + min_val}')\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    biggest = 0\n    smallest = 0\n    for i in nums:\n        if i > biggest:\n            biggest = i\n    for i in nums:\n        if i < smallest:\n            smallest = i\n    print(biggest, smallest)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # second approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        if num_arr[i] < min_num:\n            min_num = num_arr[i]\n    \n    return max_num + min_num\n    '''\n    # first approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    \n    return max_num + min_num\n    '''\n    \n    # second approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    \n    return max_num + min_num\n    '''\n    \n    # first approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    \n    return max_num + min_num\n    '''\n    \n    # second approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    \n    return max_num + min_num\n    '''\n    \n    # third approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # fourth approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # fifth approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # sixth approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # seventh approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # eighth approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # ninth approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # tenth approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # eleventh approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # twelfth approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] < min_num:\n            min_num = num_arr[i]\n    return max_num + min_num\n    '''\n    \n    # thirteenth approach:\n    '''\n    num_arr = nums\n    max_num = num_arr[0]\n    min_num = num_arr[0]\n    for i in range(1, len(num_arr)):\n        if num_arr[i] > max_num:\n            max_num = num_arr[i]\n        elif num_arr[i] "
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = nums[0]\n    for i in nums:\n        if i < sum:\n            sum = i\n    sum = sum - nums[0]\n    for i in nums:\n        if i > sum:\n            sum = i\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = 0\n    min_val = 0\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return min_val + max_val\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    result = \"\"\n    for char in string:\n        if ord(char) >= ord('a') and ord(char) <= ord('z'):\n            result += chr(ord(char) - ord('a') + ord('a'))\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n    "
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = []\n    for ch in string:\n        if ch.islower():\n            new_string.append(ch.lower())\n        else:\n            new_string.append(ch)\n    return ''.join(new_string)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #your code here\n    #return string.lower()\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    print(lower_case)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new = str1.replace(str1.lower(), \"\")\n    return new\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # *\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # |\n    # "
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = ''\n    str_list = list(str1)\n    for ch in str_list:\n        if ch.isupper():\n            new_str = new_str+ch\n        else:\n            new_str = new_str + ch.lower()\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l = []\n    for i in range(0,len(str1)):\n        if(str1[i].isupper()):\n            l.append(str1[i])\n    print(l)\n    new_string = \"\".join(l)\n    print(new_string)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.replace('abc', '')\n    str1 = str1.replace('Aca', '')\n    str1 = str1.replace('abc', '')\n    str1 = str1.replace('ABC', '')\n    str1 = str1.replace('ac', '')\n    str1 = str1.replace('a', '')\n    str1 = str1.replace('Bca', '')\n    str1 = str1.replace('bc', '')\n    str1 = str1.replace('b', '')\n    str1 = str1.replace('Cca', '')\n    str1 = str1.replace('cc', '')\n    str1 = str1.replace('c', '')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(\"the\",\"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return str1\n    return ''.join([s for s in str1 if s.isalpha()])\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # your code here\n    n = int(input(\"Enter the number : \"))\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    dig = 1\n    while(n/10 > 0) :\n        dig = n%10\n        n = n//10\n    return dig\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 0:\n        return n % 10\n    else:\n        return -(abs(n) % 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = int(n)\n    while(n >= 10) :\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while (n >= 10):\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    for i in range(10) :\n        if n % 10 == i :\n            return i\n    return -1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if isinstance(n,int) :\n        if n > 0 :\n            x = n % 10\n            return x\n        else :\n            return None\n    else :\n        return None\n    "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n < 10 :\n        return n\n    else :\n        n = n % 10\n        return first_Digit(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n) == int:\n        return int(n)\n    else :\n        return -1\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    my_list = []\n    for i in list:\n        if i % 2!= 0:\n            my_list.append(i)\n    return my_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_odd = []\n    for i in list:\n        if i % 2!= 0:\n            list_odd.append(i)\n    return list_odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if(i%2!= 0):\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Write your code here\n    return list[::2]\n    "
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list:\n        if i%2 == 0:\n            list.remove(i)\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for i in range(len(list)): \n        if list[i] % 2!= 0: \n            odd_list.append(list[i])\n    return odd_list \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2 ==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\nprint(Split([1,2,3,4,5]))\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Write your code here\n    odd_list=[]\n    for i in list:\n        if i%2==1:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (cube(n) - cube(n-1))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1=0\n    sum2=0\n    for i in range(n+1):\n        sum1=sum1+i**3\n    for i in range(n+1):\n        sum2=sum2+i\n    return abs(sum1-sum2)\n    #test code\nn=10\nprint(difference(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    n = int(n)\n    sum1 = 0\n    sum2 = 0\n    for i in range(n):\n        sum1 = sum1 + i**3\n    for i in range(n):\n        sum2 = sum2 + i\n    return sum2 - sum1\n        \n        \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1) :\n        s+=i**3\n    s1=0\n    for i in range(1,n+1) :\n        s1+=i\n    print(s-s1)\n    return s-s1\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    sum_n = 0\n    for i in range(n+1) :\n        result += i**3\n        sum_n += i\n    return result - sum_n\n    '''\n    # Method 2:\n    print(sum(list(map(lambda x: x**3, range(n+1)))))\n    '''\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumOfSquares(n): \n        if (n == 1): \n            return 1\n        return (n * (n + 1) * (2 * n + 1)) // 6\n    \n    def difference(n): \n    \n        return abs((sumOfSquares(n) - sumOfSquares(n - 1)))\n        \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 :\n        return \"n must be a positive integer.\"\n    else :\n        return (n*(n+1))/2 - sum(list(range(1,n+1)))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def firstn_sum_of_cube(n):\n        def firstn_sum(n):\n            sum = 0\n            for i in range(n):\n                sum += i**3\n            return sum\n        def difference(n):\n            diff = firstn_sum_of_cube(n) - firstn_sum(n)\n            return diff\n        return difference(n)\n    \n    print(firstn_sum_of_cube(10))\n    print(difference(10))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    ans = 0\n    if n == 0 :\n        print(0)\n    for i in range(1, n + 1) :\n        ans += i ** 3\n    print(ans)\n    for i in range(1, n + 1) :\n        ans -= i ** 3\n    print(ans)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    a = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                a = a + 1\n    return a\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0 \n    for i in range(N) : \n        if (A[i]&1)==1 : \n            cnt+=1\n    return cnt \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    if(N==1) : \n        return 0\n    xor_arr = []\n    xor_arr.append(A[0])\n    for i in range(1,N):\n        xor_arr.append(xor_arr[-1] ^ A[i])\n    return (len([i for i in xor_arr if i%2 == 1]))\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #code here\n    count = 0\n    for i in range(N):\n        if A[i] % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    sum=0\n    for i in range(1,N):\n        xor=A[i]^A[i-1]\n        if xor%2!= 0:\n            sum+=1\n    return sum\n    \nA=[1,3,5,6,6,6,7,8,9]"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i=0\n    count=0\n    while i < N :\n        if A[i] & 1 :\n            count = count + 1\n        i = i + 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if(A[i]^A[j] > 0):\n                count += 1\n    print(\"odd number of pairs\",count)\n    return count\n    \ndef find_Odd_Pair_2(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if(A[i] ^ A[j] > 0):\n                count += 1\n    print(\"odd number of pairs\",count)\n    return count\n    \ndef find_Odd_Pair_3(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if(A[i] ^ A[j] > 0):\n                count += 1\n    print(\"odd number of pairs\",count)\n    return count\n    \ndef find_Odd_Pair_4(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if(A[i] ^ A[j] > 0):\n                count += 1\n    print(\"odd number of pairs\",count)\n    return count\n    \n    "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count=0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                odd_count+=1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N+1) :\n        if A[i]&1 : \n            count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    x = N\n    count = 0\n    while (x!= 0): \n        if ((x % 10) ^ (x // 10)) % 2 == 1: \n            count += 1\n        x = x // 10\n    return count \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isupper():\n        return string.swapcase()\n    elif string.islower():\n        return string.swapcase()\n    else:\n        return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # TODO: Write your code here\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        return string\n    for i in range(len(string)):\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        else:\n            string = string[:i] + string[i].lower() + string[i+1:]\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    t_string = ''\n    if string == '':\n        return ''\n    elif string[0] == 'A':\n        t_string = 'a'\n    elif string[0] == 'a':\n        t_string = 'A'\n    elif string[0] == '9':\n        t_string = '9'\n    elif string[0] == '9':\n        t_string = '9'\n    elif string[0] == '9':\n        t_string = '9'\n    elif string[0] == '0':\n        t_string = 'o'\n    elif string[0] == '0':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = '0'\n    elif string[0] == 'o':\n        t_string = '0'\n    elif string[0] == 'O':\n        t_string = '0'\n    elif string[0] == 'O':\n        t_string = '0'\n    elif string[0] == 'u':\n        t_string = 'U'\n    elif string[0] == 'U':\n        t_string = 'u'\n    elif string[0] == 'U':\n        t_string = 'U'\n    elif string[0] == 'u':\n        t_string = 'U'\n    elif string[0] == 'U':\n        t_string = 'U'\n    elif string[0] == 'U':\n        t_string = 'U'\n    elif string[0] == 'x':\n        t_string = 'X'\n    elif string[0] == 'X':\n        t_string = 'x'\n    elif string[0] == 'X':\n        t_string = 'X'\n    elif string[0] == 'x':\n        t_string = 'X'\n    elif string[0] == 'X':\n        t_string = 'X'\n    elif string[0] == 'X':\n        t_string = 'X'\n    elif string[0] == 'e':\n        t_string = 'E'\n    elif string[0] == 'E':\n        t_string = 'e'\n    elif string[0] == 'E':\n        t_string = 'E'\n    elif string[0] == 'e':\n        t_string = 'E'\n    elif string[0] == 'E':\n        t_string = 'E'\n    elif string[0] == 'E':\n        t_string = 'E'\n    elif string[0] == 'i':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'i'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'i':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'i':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'o':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'o'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'o':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'o':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'u':\n        t_string = 'U'\n    elif string[0] == 'U':\n        t_string = 'u'\n    elif string[0] == 'U':\n        t_string = 'U'\n    elif string[0] == 'u':\n        t_string = 'U'\n    elif string[0] == 'U':\n        t_string = 'U'\n    elif string[0] == 'U':\n        t_string = 'U'\n    elif string[0] == 'x':\n        t_string = 'X'\n    elif string[0] == 'X':\n        t_string = 'x'\n    elif string[0] == 'X':\n        t_string = 'X'\n    elif string[0] == 'x':\n        t_string = 'X'\n    elif string[0] == 'X':\n        t_string = 'X'\n    elif string[0] == 'X':\n        t_string = 'X'\n    elif string[0] == 'e':\n        t_string = 'E'\n    elif string[0] == 'E':\n        t_string = 'e'\n    elif string[0] == 'E':\n        t_string = 'E'\n    elif string[0] == 'e':\n        t_string = 'E'\n    elif string[0] == 'E':\n        t_string = 'E'\n    elif string[0] == 'E':\n        t_string = 'E'\n    elif string[0] == 'i':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'i'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'i':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'i':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'I':\n        t_string = 'I'\n    elif string[0] == 'o':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'o'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'o':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'o':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    elif string[0] == 'O':\n        t_string = 'O'\n    eli"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = str(n1), str(n2)\n    dist = 0\n    for i in range(len(n1)):\n        if n1[i]!= n2[i]:\n            dist += abs(int(n1[i]) - int(n2[i]))\n    return dist\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = [int(x) for x in str(n1)]\n    d2 = [int(x) for x in str(n2)]\n    diff = 0\n    for i in range(max(len(d1), len(d2))):\n        if i >= len(d1):\n            d1.insert(0,0)\n        if i >= len(d2):\n            d2.insert(0,0)\n        if d1[i] == d2[i]:\n            diff += 0\n        else:\n            diff += abs(d1[i]-d2[i])\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Write your code here\n    s = 0\n    for i in range(len(str(n1))):\n        s += abs(n1-n2)\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    d1 = len(n1)\n    d2 = len(n2)\n    i = 0\n    dist = 0\n    while i < d1 and i < d2:\n        n1_char = ord(n1[i]) - ord('0')\n        n2_char = ord(n2[i]) - ord('0')\n        if n1_char > n2_char:\n            dist += n1_char - n2_char\n        else:\n            dist += n2_char - n1_char\n        i += 1\n    if d1 < d2:\n        while i < d2:\n            dist += ord(n2[i]) - ord('0')\n            i += 1\n    else:\n        while i < d1:\n            dist += ord(n1[i]) - ord('0')\n            i += 1\n    return dist\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(n1-n2) for i in range(len(str(n1))))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get digit distance\n    if (n1 > n2):\n        x = n1 - n2\n    else:\n        x = n2 - n1\n    # Get digit difference\n    if (n1 == 0):\n        return x * 10\n    else:\n        return (x % 10) + digit_distance_nums(x // 10, n1)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    print(f\"Output of digit_distance_nums function = {digit_distance_nums(n1, n2)}\")\n    print(f\"Test case = {digit_distance_nums(12, 50)}\")\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    while n2 > 0:\n        total += abs(n2%10 - n1%10)\n        n2 = n2//10\n        n1 = n1//10\n    return total\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    a = int(n1)\n    b = int(n2)\n    s = 0\n    while a:\n        s += abs(a%10 - b%10)\n        a = a // 10\n        b = b // 10\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    max_start_index = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start_index = i\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum, max_start_index\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_sub_sum = a[0]\n    for i in range(1,size):\n        if a[i]>0:\n            max_sum = max(a[i], max_sum+a[i])\n            if max_sum>max_sub_sum:\n                max_sub_sum = max_sum\n    return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        current_sum = 0\n        maximum = -sys.maxsize-1\n        for i in range(size):\n            current_sum += a[i]\n            if current_sum > maximum:\n                maximum = current_sum\n            if current_sum < 0:\n                current_sum = 0\n        return maximum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sub_list = []\n    for i in range(size):\n        for j in range(i, size):\n            sum = 0\n            for k in range(i, j+1):\n                sum += a[k]\n            if sum > max_sum:\n                max_sum = sum\n                sub_list = a[i:j+1]\n    print(max_sum)\n    print(sub_list)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        max_sub_sum = max(max_sub_sum, curr_sum)\n        if curr_sum <= 0:\n            curr_sum = 0\n    return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    total_sum = 0\n    max_sum = 0\n    max_index = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    max_sub = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_sum = -1\n    i = 0\n    while i < size - 1:\n        if a[i] > 0:\n            curr_sum = 0\n            j = i + 1\n            while j < size:\n                curr_sum += a[j]\n                j += 1\n                \n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        i += 1\n    \n    return max_sum\n        \nprint(max_sub_array_sum([1, 2, -1, 1, -2, 1], 5))"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n    \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # This method is very similar to Kadane's Algorithm.\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1).union(set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    print(\"Union of {} and {} is {}\".format(test_tup1, test_tup2, sorted(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            union_list.append(i)\n    union_list.extend(test_tup2)\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union_elements(\n    #     [(0, 5), (10, 15), (20, 25), (30, 35), (40, 45)],\n    #     [(0, 6), (10, 16), (20, 26), (30, 36), (41, 46)]\n    # )\n    # Output: [(0, 5), (10, 16), (20, 26), (30, 36), (40, 45), (41, 46)]\n    #\n    # union_elements(\n    #     [(0, 5), (10, 15), (20, 25), (30, 35), (40, 45)],\n    #     [(0, 6), (10, 16), (20, 26), (30, 36), (41, 46)]\n    # )\n    # Output: [(0, 6), (10, 16), (20, 26), (30, 36), (40, 45), (41, 46)]\n    #\n    # union_elements(\n    #     [(0, 5), (10, 15), (20, 25), (30, 35), (40, 45)],\n    #     [(0, 6), (10, 16), (20, 26), (30, 36), (41, 46)]\n    # )\n    # Output: [(0, 6), (10, 16), (20, 26), (30, 36), (40, 45), (41, 46)]\n    #\n    # union_elements(\n    #     [(0, 5), (10, 15), (20, 25), (30, 35), (40, 45)],\n    #     [(0, 6), (10, 16), (20, 26), (30, 36), (41, 46)]\n    # )\n    # Output: [(0, 6), (10, 16), (20, 26), (30, 36), (40, 45), (41, 46)]\n    #\n    # union_elements(\n    #     [(0, 5), (10, 15), (20, 25), (30, 35), (40, 45)],\n    #     [(0, 6), (10, 16), (20, 26), (30, 36), (41, 46)]\n    # )\n    # Output: [(0, 6), (10, 16), (20, 26), (30, 36), (40, 45), (41, 46)]\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    return tuple(tup1.union(tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Make a list of the union of both tuples.\n    union_list = []\n    for i in range(len(test_tup1)):\n        union_list.append(test_tup1[i])\n    for j in range(len(test_tup2)):\n        if test_tup2[j] not in union_list:\n            union_list.append(test_tup2[j])\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    final_list = []\n    for each in test_tup1:\n        if each not in final_list:\n            final_list.append(each)\n    for each in test_tup2:\n        if each not in final_list:\n            final_list.append(each)\n    return final_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    for j in test_tup2:\n        if j not in union_tup:\n            union_tup.append(j)\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    \n    for tup in test_tup1:\n        if tup not in test_tup2:\n            union_tup.append(tup)\n        else:\n            pass\n    \n    for tup in test_tup2:\n        if tup not in test_tup1:\n            union_tup.append(tup)\n        else:\n            pass\n    \n    union_tup.sort()\n    print(union_tup)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(len(i) for i in lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sub_list in lst:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    current_len = 0\n    for i in range(len(lst)):\n        if max_len < len(lst[i]):\n            max_len = len(lst[i])\n        current_len += len(lst[i])\n        if max_len == current_len:\n            return max_len\n    return max_len\n            "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_sublist = 0\n    max_length = 0\n    for i in lst:\n        if max_length < len(i):\n            max_length = len(i)\n            max_sublist = i\n    print(max_sublist)\n    return max_sublist\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen=0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if(len(lst[i])+len(lst[j])>maxLen):\n                maxLen=len(lst[i])+len(lst[j])\n    return maxLen\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    len_lst = []\n    for i in range(len(lst)):\n        if len(lst[i]) > len(len_lst):\n            len_lst = lst[i]\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        max_len=1\n        curr_len=1\n        for i in range(1,len(lst)):\n            if lst[i]==lst[i-1]:\n                curr_len+=1\n            else:\n                curr_len=1\n            if curr_len>max_len:\n                max_len=curr_len\n        return max_len\n            \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 0:\n        return 0\n    \n    max_length = 1\n    for i in range(n):\n        curr = Find_Max_Length(lst[0:i])\n        if curr + 1 > max_length:\n            max_length = curr + 1\n            \n    return max_length\n    \ndef length_of_longest_substring(string, k):\n    '''\n    Find length of the longest substring that contains at least k distinct characters.\n    '''\n    char_count = collections.defaultdict(int)\n    start = 0\n    max_length = 0\n    for i, c in enumerate(string):\n        char_count[c] += 1\n        while len(char_count) > k:\n            char_count[string[start]] -= 1\n            if char_count[string[start]] == 0:\n                del char_count[string[start]]\n            start += 1\n        max_length = max(max_length, i - start + 1)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        max_length = 1\n        for i in range(0,len(lst)-1):\n            if lst[i] == lst[i+1]:\n                max_length = max_length + 1\n            else:\n                max_length = max(max_length, Find_Max_Length(lst[i+1:]))\n        return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst.sort()\n    min_len = 1\n    max_len = 0\n    for i in range(len(lst)-1):\n        curr_len = lst[i+1]-lst[i]\n        if curr_len < min_len:\n            min_len = curr_len\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    import re\ndef extract_values(text):\n    '''\n    Write "
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r\"\\\"(.+)\\\"\", text)\nprint(extract_values('Hi, my name is Michele, and I\\'m 26 years old'))\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # print(\"extract_values\")\n    text = str(text)\n    # print(text)\n    # print(text.find(\"\\\"\"))\n    if text.find(\"\\\"\")!= -1:\n        # print(text.index(\"\\\"\"))\n        # print(text[text.index(\"\\\"\")+1:text.index(\"\\\"\")+2])\n        # print(text[text.index(\"\\\"\")+1:text.index(\"\\\"\")+2].strip())\n        # print(text[text.index(\"\\\"\")+1:text.index(\"\\\"\")+2].replace(\"\\\"\",\"\").strip())\n        return text[text.index(\"\\\"\")+1:text.index(\"\\\"\")+2].replace(\"\\\"\",\"\").strip()\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #pattern = re.compile(r'\"(.*?)\"')\n    pattern = re.compile(r'\"(.*?)\"', re.DOTALL)\n    values = pattern.findall(text)\n    #values = re.findall(r'\"(.*?)\"', text)\n    print(values)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('[^\\\"]*', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\"(.*?)\"', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', '')\n    # print(text)\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'[\\'\"\\s]+')\n    return pattern.findall(text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"\\\"(.*?)\\\"\"\n    result = re.search(pattern, text)\n    if result:\n        print(result.group(1))\n    else:\n        print(\"No values\")\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string = text.split(\"\\\"\")\n    for i in string:\n        if i!= \"\":\n            print(i)\ndef extract_values_from_html_file(html_path):\n    '''\n    Write a function to extract values between quotation marks from a html file.\n    '''\n    with open(html_path, 'r') as html_file:\n        text = html_file.read()\n    string = re.findall('\\\"(.+?)\\\"', text)\n    for i in string:\n        if i!= \"\":\n            print(i)\ndef extract_values_from_html_file_with_regex(html_path):\n    '''\n    Write a function to extract values between quotation marks from a html file using regex.\n    '''\n    with open(html_path, 'r') as html_file:\n        text = html_file.read()\n    # You can use re.findall to find all matches of the given pattern\n    string = re.findall('<([^>]*)>', text)\n    for i in string:\n        if i!= \"\":\n            print(i)\ndef extract_values_from_html_file_with_regex_2(html_path):\n    '''\n    Write a function to extract values between quotation marks from a html file using regex.\n    '''\n    with open(html_path, 'r') as html_file:\n        text = html_file.read()\n    # You can use re.findall to find all matches of the given pattern\n    string = re.findall('<([^>]*)>', text)\n    for i in string:\n        if i!= \"\":\n            print(i)\ndef replace_space_with_underscore(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_space_with_underscore_2(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_2(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_3(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_4(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_space_with_underscore_4(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_space_with_underscore_5(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_space_with_underscore_6(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_6(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_7(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_8(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_9(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_10(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_11(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_12(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_13(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_14(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_15(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_16(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_17(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_18(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_19(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_20(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_21(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_22(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_23(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_24(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space_with_underscore_25(text):\n    '''\n    Write a function to replace space with underscore in a string.\n    '''\n    string = text.replace(\" \", \"_\")\n    print(string)\ndef replace_string_space"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr = set(arr)\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i!=j and i+j == n:\n                count+=1\n    return count\n    \ndef fizzBuzz(num):\n    '''\n    Write a python function which takes a number as input and returns \u201cFizzBuzz\u201d for multiples of 3, \u201cFizz\u201d for multiples of 5 and \u201cBuzz\u201d for multiples of both 3 and 5.\n    '''\n    if num%15 == 0:\n        return 'FizzBuzz'\n    elif num%5 == 0:\n        return 'Fizz'\n    elif num%3 == 0:\n        return 'Buzz'\n    else:\n        return str(num)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr_dict={}\n    for i in arr:\n        if i in arr_dict:\n            arr_dict[i]+=1\n        else:\n            arr_dict[i]=1\n    for i in arr:\n        for j in range(i+1,n):\n            if (i!=j) and (i in arr_dict.keys()) and (j in arr_dict.keys()):\n                if arr_dict[i]<2 or arr_dict[j]<2:\n                    print(f'{i} and {j}')\n                    break\n                if arr_dict[i]==2 and arr_dict[j]==2:\n                    print(f'{i} and {j}')\n                    break\n                \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    print(\"No of Pairs: \",count)\n    \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter\n    d = Counter(arr)\n    return sum(1 for v in d.values() if v==2)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                x=x+1\n    return x\ndef count_UnorderedPairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                x=x+1\n    return x\ndef count_UnorderedPairs_with_Duplicates(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                x=x+1\n    return x\ndef find_Longest_Substring(str,n):\n    '''\n    Write a python function which takes a string and returns the length of the longest substring which does not contain any other character.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if str[i]==str[j]:\n                x=x+1\n    return x\ndef find_Longest_Substring_with_Duplicates(str,n):\n    '''\n    Write a python function which takes a string and returns the length of the longest substring which does not contain any other character.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if str[i]==str[j]:\n                x=x+1\n    return x\ndef sortArrayByParity(arr,n):\n    '''\n    Write a python function which takes a list of integers and sorts the elements in an array in ascending order by adding 1 to the even elements and subtracting 1 from the odd elements.\n    '''\n    if n==0:\n        return\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]%2!=0 and arr[j]%2==0:\n                arr[i],arr[j]=arr[j],arr[i]\n                x=x+1\n    return x\ndef sortArrayByParity_with_duplicates(arr,n):\n    '''\n    Write a python function which takes a list of integers and sorts the elements in an array in ascending order by adding 1 to the even elements and subtracting 1 from the odd elements.\n    '''\n    if n==0:\n        return\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]%2!=0 and arr[j]%2==0:\n                arr[i],arr[j]=arr[j],arr[i]\n                x=x+1\n    return x\ndef find_Single_Duplicate(arr,n):\n    '''\n    Write a python function which takes a list of integers and returns the single duplicate element.\n    '''\n    if n==0:\n        return\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                x=x+1\n    return x\ndef find_Single_Duplicate_with_duplicates(arr,n):\n    '''\n    Write a python function which takes a list of integers and returns the single duplicate element.\n    '''\n    if n==0:\n        return\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                x=x+1\n    return x\ndef check_sum_of_subarray(arr,n,k):\n    '''\n    Write a python function which takes a list of integers and returns true if the sum of any contiguous subarray of size k is equal to the given number, else false.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]+arr[j])==k:\n                x=x+1\n    return x\ndef check_sum_of_subarray_with_duplicates(arr,n,k):\n    '''\n    Write a python function which takes a list of integers and returns true if the sum of any contiguous subarray of size k is equal to the given number, else false.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]+arr[j])==k:\n                x=x+1\n    return x\ndef is_two_sum_equal(arr,n,k):\n    '''\n    Write a python function which takes a list of integers and returns true if there are two numbers such that they add up to k, else false.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]+arr[j])==k:\n                x=x+1\n    return x\ndef is_two_sum_equal_with_duplicates(arr,n,k):\n    '''\n    Write a python function which takes a list of integers and returns true if there are two numbers such that they add up to k, else false.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]+arr[j])==k:\n                x=x+1\n    return x\ndef sum_of_array(arr,n):\n    '''\n    Write a python function which takes a list of integers and returns the sum of all the integers in the array.\n    '''\n    x=0\n    for i in range(n):\n        x=x+arr[i]\n    return x\ndef sum_of_array_with_duplicates(arr,n):\n    '''\n    Write a python function which takes a list of integers and returns the sum of all the integers in the array.\n    '''\n    x=0\n    for i in range(n):\n        x=x+arr[i]\n    return x\ndef find_largest_substring(str,n):\n    '''\n    Write a python function which takes a string and returns the length of the largest substring which does not contain any other character.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if str[i]!=str[j]:\n                x=x+1\n    return x\ndef find_largest_substring_with_duplicates(str,n):\n    '''\n    Write a python function which takes a string and returns the length of the largest substring which does not contain any other character.\n    '''\n    x=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if str[i]!=str[j]:\n                x=x+1\n    return x\ndef is_rotation(str1,str2):\n    '''\n    Write a python function which takes two strings as input and returns true if they are rotation of each other, else false.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    if str1==str2:\n        return True\n    for i in range(len(str2)):\n        if str1.find(str2[i])==-1:\n            return False\n    return True\ndef is_rotation_with_duplicates(str1,str2):\n    '''\n    Write a python function which takes two strings as input and returns true if they are rotation of each other, else false.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    if str1==str2:\n        return True\n    for i in range(len(str2)):\n        if str1.find(str2[i])==-1"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    l=list(word)\n    return l\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \ndef remove(word): \n    '''\n    Write a python function to remove all the vowels from a string.\n    '''\n    return \"\".join(filter(lambda x: not x.lower() in \"aeiou\", word))\n    \ndef count(word): \n    '''\n    Write a python function to count the occurence of a char in a word.\n    '''\n    return word.count(word[0])\n    \ndef reverse(word): \n    '''\n    Write a python function to reverse a word.\n    '''\n    return word[::-1]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word)==0:\n        return []\n    chars=[]\n    for i in range(len(word)):\n        chars.append(word[i])\n    return chars\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n % 10 + sum_digits(n // 10) if n > 0 else 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        n*=-1\n    ans=0\n    while n>0:\n        ans+=n%10\n        n//=10\n    return ans\nprint(sum_digits(123))\nprint(sum_digits(-123))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    if n > 0:\n        while n > 0:\n            result += int(n % 10)\n            n = int(n / 10)\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n <= 0:\n        raise ValueError(\"Only non-negative integers are allowed\")\n    return n if n < 10 else sum_digits(n // 10) + n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    s = 0\n    for i in range(0, len(n)):\n        s += int(n[i])\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return n\n    return (n % 10) + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -1\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while(n>0):\n        s += n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digits = 0\n    while n>0:\n        rem = n%10\n        sum_digits += rem\n        n = n//10\n    return sum_digits\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #if list1 is empty or has only 1 element, then it is already sorted.\n    if list1 == [] or len(list1) == 1:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    count = 0\n    for i in range(1,len(list1)):\n        if list1[i]<=list1[i-1]:\n            count += 1\n    if count == len(list1)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check = True\n    list1_len = len(list1)\n    if list1_len > 0:\n        i = 0\n        while i < list1_len:\n            if list1[i] > list1[i+1]:\n                check = False\n                break\n            else:\n                i += 1\n    else:\n        check = False\n    return check\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #return sorted(list1) == list1\n    if len(list1) == 0:\n        return True\n    return list1[0] <= list1[1]\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    import math\n    def is_sorted(list1):\n        for i in range(0,len(list1) - 1):\n            if(list1[i] > list1[i+1]):\n                return False\n        return True\n    return is_sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    low = 0\n    high = len(list1) - 1\n    while low <= high:\n        if list1[low] > list1[high]:\n            return False\n        low += 1\n        high -= 1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 1\n    while i < len(list1):\n        if list1[i] > list1[i - 1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if it has elements in the list\n    if list1:\n        # then check the element at index 0 and the element at index len-1\n        if list1[0]<list1[-1]:\n            # then return true\n            return True\n        # else return false\n        else:\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if sorted(list1) == list1:\n    #     return True\n    # else:\n    #     return False\n    return sorted(list1) == list1\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    my_list = []\n    for i in range(length):\n        my_list.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index in range(len(list1)):\n        list1[index] = sorted(list1[index])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Solution 1 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i))\n    # print(sorted_list)\n    \n    # Solution 2 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 3 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 4 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 5 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 6 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    \n    # Solution 7 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 8 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    \n    \n    # Solution 9 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 10 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 11 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 12 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd']]\n    # sorted_list = [['a', 'd', 'e', 'h', 'i', 'l'], ['t', 'q', 'w','s', 't', 'k']]\n    \n    # sorted_list = []\n    # for i in list1:\n    #     sorted_list.append(sorted(i, key=lambda x: x[0]))\n    # print(sorted_list)\n    \n    # Solution 13 - Using lambda functions\n    # Example:\n    # list1 = [['t', 'h', 'i','s', 'k', 'e'], ['a', 'q', 't', 'w', 'l', 'd"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    final_list=[]\n    for sublist in list1:\n        final_list.append(sorted(sublist))\n    return final_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for lst in list1:\n        lst.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    sublists = []\n    for i in range(len(list1)):\n        sublists.append([])\n        for j in range(len(list1[i])):\n            sublists[i].append(list1[i][j])\n    for i in range(len(sublists)):\n        sublists[i].sort()\n    return sublists\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = 0\n    for sublist in list1:\n        sublist.sort()\n    return(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            continue\n        seen.add(num)\n    return list(seen)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Empty list\n    if len(nums) == 0:\n        return []\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #     return_values = []\n    #     for i in nums:\n    #         if i not in return_values:\n    #             return_values.append(i)\n    #     return return_values\n    return_values = []\n    for i in nums:\n        if i not in return_values:\n            return_values.append(i)\n    return return_values\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return sorted(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set\n    nums_set = set()\n    # loop through numbers in list\n    for num in nums:\n        # check if the number already exists in the set\n        if num in nums_set:\n            # if it exists, delete it\n            nums_set.remove(num)\n        # add the number to the set\n        else:\n            nums_set.add(num)\n    # return the set\n    return nums_set\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    for num in nums:\n        if num not in nums_set:\n            nums_set.add(num)\n        else:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if i == 0:\n            continue\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    uniques = []\n    for num in nums:\n        if num not in seen:\n            uniques.append(num)\n            seen.add(num)\n    return uniques\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) < 1:\n        raise ValueError(\"List should contain at least one element.\")\n    \n    result = 1\n    for item in list_data:\n        if not isinstance(item, (int, float)):\n            raise TypeError(\"All items of the list should be numbers.\")\n        result *= item\n    \n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for x in list_data:\n        if type(x) == int:\n            result *= x\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    return product(unique_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    set_data = set(list_data)\n    result = 1\n    for number in set_data:\n        result *= number\n    return result\n    \n    \n    \ndef unique_product_optimized(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for number in set(list_data):\n        result *= number\n    return result\n    \n    \n    \ndef sum_list(list_data):\n    '''\n    Write a python function to calculate the sum of a list.\n    '''\n    result = 0\n    for number in list_data:\n        result += number\n    return result\n    \n    \n    \ndef sum_list_optimized(list_data):\n    '''\n    Write a python function to calculate the sum of a list.\n    '''\n    return sum(list_data)\n    \n    \n    \ndef sum_numbers(list_data):\n    '''\n    Write a python function to calculate the sum of a list of numbers.\n    '''\n    result = 0\n    for number in list_data:\n        result += number\n    return result\n    \n    \n    \ndef sum_numbers_optimized(list_data):\n    '''\n    Write a python function to calculate the sum of a list of numbers.\n    '''\n    result = sum(list_data)\n    return result\n    \n    \n    \ndef max_element(list_data):\n    '''\n    Write a python function to get the maximum element from a given list.\n    '''\n    max_number = list_data[0]\n    for number in list_data:\n        if number > max_number:\n            max_number = number\n    return max_number\n    \n    \n    \ndef max_element_optimized(list_data):\n    '''\n    Write a python function to get the maximum element from a given list.\n    '''\n    return max(list_data)\n    \n    \n    \ndef min_element(list_data):\n    '''\n    Write a python function to get the minimum element from a given list.\n    '''\n    min_number = list_data[0]\n    for number in list_data:\n        if number < min_number:\n            min_number = number\n    return min_number\n    \n    \n    \ndef min_element_optimized(list_data):\n    '''\n    Write a python function to get the minimum element from a given list.\n    '''\n    return min(list_data)\n    \n    \n    \ndef reverse_list(list_data):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    reversed_list = list_data[::-1]\n    return reversed_list\n    \n    \n    \ndef reverse_list_optimized(list_data):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return list_data[::-1]\n    \n    \n    \ndef reversed_list(list_data):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    reversed_list = list(list_data)[::-1]\n    return reversed_list\n    \n    \n    \ndef reversed_list_optimized(list_data):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return list(list_data)[::-1]\n    \n    \n    \ndef reverse_even_odd_list(list_data):\n    '''\n    Write a python function to reverse even and odd numbers of a given list.\n    '''\n    list_data = list_data[::-1]\n    odd_list = []\n    even_list = []\n    for index, number in enumerate(list_data):\n        if index % 2 == 0:\n            even_list.append(number)\n        else:\n            odd_list.append(number)\n    odd_list = list_data[::-1]\n    return odd_list, even_list\n    \n    \n    \ndef reverse_even_odd_list_optimized(list_data):\n    '''\n    Write a python function to reverse even and odd numbers of a given list.\n    '''\n    return list_data[::-1]\n    \n    \n    \ndef count_occurrence_in_list(list_data, number):\n    '''\n    Write a python function to count occurrences of a number in a given list.\n    '''\n    occurrence = 0\n    for number in list_data:\n        if number == number:\n            occurrence += 1\n    return occurrence\n    \n    \n    \ndef count_occurrence_in_list_optimized(list_data, number):\n    '''\n    Write a python function to count occurrences of a number in a given list.\n    '''\n    return list_data.count(number)\n    \n    \n    \ndef count_occurrence_in_list_with_index(list_data, number):\n    '''\n    Write a python function to count occurrences of a number in a given list.\n    '''\n    occurrence = 0\n    for index, number in enumerate(list_data):\n        if number == number:\n            occurrence += 1\n    return occurrence\n    \n    \n    \ndef count_occurrence_in_list_with_index_optimized(list_data, number):\n    '''\n    Write a python function to count occurrences of a number in a given list.\n    '''\n    return list_data.count(number)\n    \n    \n    \ndef count_occurrence_in_list_with_index_with_value(list_data, value):\n    '''\n    Write a python function to count occurrences of a number in a given list.\n    '''\n    occurrence = 0\n    for index, number in enumerate(list_data):\n        if number == value:\n            occurrence += 1\n    return occurrence\n    \n    \n    \ndef count_occurrence_in_list_with_index_with_value_optimized(list_data, value):\n    '''\n    Write a python function to count occurrences of a number in a given list.\n    '''\n    return list_data.count(value)\n    \n    \n    \ndef get_index_of_first_occurrence_in_list(list_data, number):\n    '''\n    Write a python function to get the first occurrence of a number in a given list.\n    '''\n    index = 0\n    for index, number in enumerate(list_data):\n        if number == number:\n            return index\n        else:\n            return -1\n    return -1\n    \n    \n    \ndef get_index_of_first_occurrence_in_list_optimized(list_data, number):\n    '''\n    Write a python function to get the first occurrence of a number in a given list.\n    '''\n    return list_data.index(number)\n    \n    \n    \ndef get_index_of_last_occurrence_in_list(list_data, number):\n    '''\n    Write a python function to get the last occurrence of a number in a given list.\n    '''\n    index = 0\n    for index in range(len(list_data)):\n        if list_data[index] == number:\n            return index\n    return -1\n    \n    \n    \ndef get_index_of_last_occurrence_in_list_optimized(list_data, number):\n    '''\n    Write a python function to get the last occurrence of a number in a given list.\n    '''\n    return list_data.index(number)\n    \n    \n    \ndef get_index_of_first_occurrence_in_list_with_value(list_data, value):\n    '''\n    Write a python function to get the first occurrence of a number in a given list.\n    '''\n    index = 0\n    for index, number in enumerate(list_data):\n        if number == value:\n            return index\n    return -1\n    \n    \n    \ndef get_index_of_first_occurrence_in_list_with_value_optimized(list_data, value):\n    '''\n    Write a python function to get the first occurrence of a number in a given list.\n    '''\n    return list_data.index(value)\n    \n    \n    \ndef get_index_o"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in range(len(list_data)):\n        if list_data.count(list_data[i]) == 1:\n            product = product * list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list_data.sort()\n    list_data = set(list_data)\n    list_data = list(list_data)\n    list_data = list_data[::-1]\n    product = 1\n    for i in range(len(list_data)):\n        product = product * list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from collections import Counter\n    import math\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #Solution:\n    # unique_number=[]\n    # for i in list_data:\n    #     if i not in unique_number:\n    #         unique_number.append(i)\n    # return (reduce(lambda x,y: x*y, unique_number))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) < 1:\n        print(\"The list is empty, no product will be computed.\")\n        return\n    product = 1\n    for i in list_data:\n        product = product * i\n    print(\"The product of the unique numbers in the list is\", product)\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=[]\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list[0]*unique_list[1]*unique_list[2]*unique_list[3]*unique_list[4]\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r ** 2 * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*pi*r*h+2*pi*r*2\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    \n    surface_area = (2*pi*r*h)+2*pi*r**2\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = pi * r ** 2 + 2 * pi * r * h + 2 * pi * r ** 2\n    return area\n    \n    \n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * pi * r ** 2\n    return area\n    \n    \n    \ndef surfacearea_torus(r1,r2):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    area = 2 * pi * (r1 + r2) * (r1 - r2)\n    return area\n    \n    \n    \ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    area = 6 * l ** 2\n    return area\n    \n    \n    \ndef surfacearea_parallelepiped(a,h,w):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    area = a * h + a * w + (a + h + w)\n    return area\n    \n    \n    \ndef surfacearea_pyramid(l,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    area = 2 * l * h + 2 * l * (l - h)\n    return area\n    \n    \n    \ndef surfacearea_rectangle(w,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = 2 * w * h\n    return area\n    \n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (4/3) * pi * r ** 3 + 2 * pi * r * h\n    return volume\n    \n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * pi * r ** 3\n    return volume\n    \n    \n    \ndef volume_torus(r1,r2):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    volume = pi * (r1**2 + r2**2) - pi * (r1**2 + r2**2 - 2 * r1 * r2 * sin(pi/6))\n    return volume\n    \n    \n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = 6 * l ** 3\n    return volume\n    \n    \n    \ndef volume_parallelepiped(a,h,w):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = a * h + a * w + (a + h + w)\n    return volume\n    \n    \n    \ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = 2 * l * h + 2 * l * (l - h)\n    return volume\n    \n    \n    \ndef volume_rectangle(w,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = 2 * w * h\n    return volume\n    \n    \n    \ndef change(m):\n    '''\n    Write a function to change a given list m into an even list by alternating values between it.\n    '''\n    for i in range(0,len(m)-1,2):\n        m[i],m[i+1]=m[i+1],m[i]\n    return m\n    \n    \n    \ndef change_alternatively(m):\n    '''\n    Write a function to change a given list m into an even list by alternating values between it.\n    '''\n    i = 0\n    while len(m) > 0:\n        m.insert(i, m.pop())\n        i += 2\n    return m\n    \n    \n    \ndef change_alternatively_2(m):\n    '''\n    Write a function to change a given list m into an even list by alternating values between it.\n    '''\n    m.reverse()\n    return m\n    \n    \n    \ndef remove_duplicates_2(m):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    for i in range(len(m) - 1):\n        if m[i] == m[i + 1]:\n            m.pop(i)\n    return m\n    \n    \n    \ndef remove_duplicates_3(m):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    return list(set(m))\n    \n    \n    \ndef insert_in_order(lst):\n    '''\n    Write a function to insert a value in an ascending order.\n    '''\n    lst.sort()\n    return lst\n    \n    \n    \ndef insert_in_order_2(lst):\n    '''\n    Write a function to insert a value in an ascending order.\n    '''\n    lst.sort(key=lambda x: x[0])\n    return lst\n    \n    \n    \ndef insert_in_order_3(lst):\n    '''\n    Write a function to insert a value in an ascending order.\n    '''\n    lst.sort(key=lambda x: x[1])\n    return lst\n    \n    \n    \ndef insert_in_order_4(lst):\n    '''\n    Write a function to insert a value in an ascending order.\n    '''\n    lst.sort(key=lambda x: (x[0], x[1]))\n    return lst\n    \n    \n    \ndef longest_word(lst):\n    '''\n    Write a function to find the longest word in the list.\n    '''\n    longest_word = ''\n    for i in range(len(lst)):\n        if len(longest_word) < len(lst[i]):\n            longest_word = lst[i]\n    return longest_word\n    \n    \n    \ndef longest_word_2(lst):\n    '''\n    Write a function to find the longest word in the list.\n    '''\n    longest_word = ''\n    for i in range(len(lst)):\n        if len(lst[i]) > len(longest_word):\n            longest_word = lst[i]\n    return longest_word\n    \n    \n    \ndef longest_word_3(lst):\n    '''\n    Write a function to find the longest word in the list.\n    '''\n    longest_word = ''\n    for i in range(len(lst)):\n        if len(lst[i]) > len(longest_word):\n            longest_word = lst[i]\n    return longest_word\n    \n    \n    \ndef longest_word_4(lst):\n    '''\n    Write a function to find the longest word in the list.\n    '''\n    longest_word = ''\n    for i in range(len(lst)):\n        if len(lst[i]) > len(longest_word):\n            longest_word = lst[i]\n    return longest_word\n    \n    \n    \ndef longest_word_5(lst):\n    '''\n    Write a function to find the longest word in the list.\n    '''\n    longest_word = ''\n    for i in range(len(lst)):\n        if len(lst[i]) > len(longest_word):\n            longest_word = lst[i]\n    return longest_word\n    \n    \n    \ndef longest_word_6(lst):\n    '''\n    Write a function to find the longest word in the list.\n    '''\n    longest_word = ''\n    for i in range(len(lst)):\n        if len(lst[i]) > len(longest_word):\n            longest_word = lst[i]\n    return longest_word\n    \n    \n    \ndef longest_word_7(lst):\n    '''"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if not isinstance(r,int) or not isinstance(h,int):\n        raise ValueError(\"Invalid input\")\n    pi = 3.14\n    return pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = pi*r**2\n    print(sa)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h+2*pi*r**2\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B): \n        return False\n    if len(A)==0 and len(B)==0:\n        return True\n    if A[0]==B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    return is_Sub_Array(A[1:],B) or is_Sub_Array(A,B[1:])\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if (len(A) >= len(B) and len(A) == len(set(A))):\n        return True\n    elif (len(B) > len(A) and len(B) == len(set(B))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > 0 and len(A) < len(B) :\n        return True\n    elif len(A) == 0 and len(A) < len(B):\n        return False\n    elif len(A) == 0 and len(A) > len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    if (m > n): \n        return False\n    for i in range(n): \n        for j in range(m): \n            if A[i] == B[j]: \n                break\n        if j == m - 1: \n            return True\n    return False\n        \ndef sum_divisors(n): \n    '''\n    Write a python function to find sum of divisors of a number.\n    '''\n    total = 1\n    if n == 0: \n        return 0\n    for i in range(1, (n//2) + 1): \n        if n % i == 0: \n            total = total + i + n/i \n    return total\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # if len(A) == len(B):\n    #     for i in range(len(A)):\n    #         if A[i]!= B[i]:\n    #             return False\n    #     return True\n    \n    # return all(x in A for x in B)\n    \n    return all(x in A for x in B)\n    \n    \n    \n    # A = list(map(int, input().split()))\n    # #print(A)\n    \n    # n = int(input())\n    # #print(n)\n    \n    # B = list(map(int, input().split()))\n    # print(B)\n    \n    \n    # if len(A) == len(B):\n    #     for i in range(len(A)):\n    #         if A[i]!= B[i]:\n    #             return False\n    #     return True\n    \n    # return all(x in A for x in B)\n    \n    \n    # A = list(map(int, input().split()))\n    # #print(A)\n    \n    # n = int(input())\n    # #print(n)\n    \n    # B = list(map(int, input().split()))\n    # print(B)\n    \n    # if len(A) == len(B):\n    #     for i in range(len(A)):\n    #         if A[i]!= B[i]:\n    #             return False\n    #     return True\n    \n    # return all(x in A for x in B)\n    \n    \n    "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    for i in range(len(A)):\n        if A[i:len(B)+i] == B:\n            flag = True\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if i not in B:\n            return False\n    return True\nA = [1,2,3,4,5,6,7]\nB = [1,4,5]\nprint(is_Sub_Array(A,B))"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A):\n        if A[i]==B[j]:\n            j+=1\n        else:\n            i+=1\n            j=0\n        if j==len(B):\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    for i in range(len(A)):\n        if A[i]!=B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while(i<len(A) and j<len(B)):\n        if A[i]==B[j]:\n            j=j+1\n            i=i+1\n        else:\n            i=i-1\n            j=j-1\n        if j==len(B):\n            return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    i = 1\n    while(i <= n):\n        fact = fact * i\n        i = i + 1\n    \n    if(n > 0):\n        fact = fact % 10\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return n%10*last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return None\n    if n==0:\n        return 0\n    fact=1\n    while n>=10:\n        n=n//10\n        fact=fact*n\n    return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        raise ValueError('Only positive numbers are allowed.')\n    else:\n        n1=n\n        fact=1\n        while n1>0:\n            fact=fact*n1\n            n1=n1-1\n        return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 10: \n        return n \n    else: \n        n = str(n)\n        num = 0\n        for i in range(len(n)-1,-1,-1):\n            num = num * 10 + int(n[i])\n    return num \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    last_digit = fact % 10\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    res = 1\n    for i in range(n,0,-1):\n        res *= i\n    return res % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        result = 0\n        while n>0:\n            result = result*10 + n%10\n            n = n//10\n        return result\n    \ndef last_Digit_Fibonacci(n):\n    '''\n    Write a python function to find the last digit in Fibonacci of a given number.\n    '''\n    if n<1:\n        return -1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return last_Digit_Fibonacci(n-1)+last_Digit_Fibonacci(n-2)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    length = len(list1)\n    if len(list2) == length and len(list3) == length:\n        interleavedList = []\n        for i in range(length):\n            interleavedList.append(list1[i])\n            interleavedList.append(list2[i])\n            interleavedList.append(list3[i])\n        return interleavedList\n    else:\n        raise TypeError('interleave_lists: lists must have equal length')\n    \n    \n    \n    \ndef find_min_index(list):\n    '''\n    Write a function that takes in a list and returns its index of the smallest element.\n    '''\n    min = list[0]\n    for i in range(len(list)):\n        if list[i] < min:\n            min = list[i]\n    for j in range(len(list)):\n        if list[j] == min:\n            return j\n            \n    \n    \n    \ndef make_rgb_list(hex_list):\n    '''\n    Write a function that takes in a list of hexadecimal strings and returns a list of RGB tuples.\n    '''\n    rgbList = []\n    for i in range(len(hex_list)):\n        rgb = convert_hex_to_rgb(hex_list[i])\n        rgbList.append(rgb)\n    return rgbList\n    \n    \n    \ndef convert_hex_to_rgb(hex):\n    '''\n    Write a function that takes in a string representing a hexadecimal number and returns\n    the tuple (r, g, b) as specified in the problem.\n    '''\n    if len(hex) == 7:\n        return (hex[0:2], hex[2:4], hex[4:])\n    elif len(hex) == 4:\n        return (hex[0:2], hex[2:4], hex[0:2])\n    else:\n        raise TypeError('convert_hex_to_rgb: hexadecimal must be 7 or 4 characters long')\n    \n    \n    \n    \ndef make_list_unique(list):\n    '''\n    Write a function that takes in a list and returns a new list with only unique values.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if list[i] not in newList:\n            newList.append(list[i])\n    return newList\n    \n    \n    \ndef count_hi(str):\n    '''\n    Write a function that takes in a string and returns the number of times the letter \"hi\" occurs in the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == 'hi':\n            count += 1\n    return count\n    \n    \n    \ndef make_change(amount, denominations):\n    '''\n    Write a function that takes in an amount and a list of coin denominations.\n    Return the number of ways to make change for that amount, using the\n    denominations given.\n    '''\n    denominations = sorted(denominations, reverse=True)\n    numWays = 0\n    for i in range(len(denominations)):\n        if amount >= denominations[i]:\n            numWays += helper(amount, denominations[i:])\n    return numWays\n    \n    \n    \ndef helper(amount, coins):\n    if amount == 0:\n        return 1\n    if amount < 0:\n        return 0\n    if len(coins) == 0:\n        return 0\n    return helper(amount, coins[1:]) + helper(amount - coins[0], coins)\n    \n    \n    \ndef is_power_of_two(n):\n    '''\n    Write a function that takes in a number and returns True if it is a power of 2,\n    otherwise returns False.\n    '''\n    if n > 0 and n & (n - 1) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef balancedBrackets(string):\n    '''\n    Write a function that takes in a string of opening and closing brackets, and\n    returns whether the brackets are balanced in that order (the brackets can\n    be nested).\n    '''\n    if string == '':\n        return True\n    if len(string) % 2!= 0:\n        return False\n    else:\n        openBrackets = []\n        closeBrackets = []\n        for i in range(len(string)):\n            if string[i] == '(':\n                openBrackets.append(i)\n            if string[i] == ')':\n                closeBrackets.append(i)\n        if len(openBrackets)!= len(closeBrackets):\n            return False\n        if len(openBrackets) == 0:\n            return True\n        if len(openBrackets) == len(closeBrackets) and len(openBrackets) == 1:\n            return True\n        if len(openBrackets) == len(closeBrackets) and len(openBrackets) == 2:\n            return True\n        else:\n            return False\n    \n    \n    \ndef num_to_base(number, base):\n    '''\n    Write a function that takes in a number and a base and returns the number as a base\n    system representation.\n    '''\n    if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    elif number < 0:\n        number = -number\n        result = ''\n        while number > 0:\n            result += '0'\n            number -= 1\n        result = '-' + result\n        return result\n    else:\n        result = ''\n        while number > 0:\n            result += '0'\n            number -= 1\n        while len(result) < base:\n            result += '1'\n        return result\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if it is a\n    palindrome and False otherwise.\n    '''\n    s = s.lower()\n    reversedS = s[::-1]\n    if s == reversedS:\n        return True\n    else:\n        return False\n    \n    \n    \ndef has_duplicates(list):\n    '''\n    Write a function that takes in a list and returns True if it has any\n    duplicates and False otherwise.\n    '''\n    if len(list) == 0:\n        return False\n    if len(list) == 1:\n        return False\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if list[i] == list[j] and i!= j:\n                return True\n    return False\n    \n    \n    \ndef product_except_self(lst):\n    '''\n    Write a function that takes in a list and returns the product of all the\n    numbers except the first and last.\n    '''\n    product = 1\n    for i in range(len(lst)-1):\n        product = product * lst[i]\n    product = product * lst[len(lst)-1]\n    return product\n    \n    \n    \ndef reverse(lst):\n    '''\n    Write a function that takes in a list and reverses it.\n    '''\n    reversedList = lst[::-1]\n    return reversedList\n    \n    \n    \ndef remove_duplicates(lst):\n    '''\n    Write a function that takes in a list and returns a new list with\n    duplicates removed.\n    '''\n    for i in range(len(lst)-1, 0, -1):\n        if lst[i] == lst[i-1]:\n            del lst[i]\n    return lst\n    \n    \n    \ndef remove_k_duplicates(lst, k):\n    '''\n    Write a function that takes in a list and returns a new list with\n    the first k duplicates removed.\n    '''\n    if k > len(lst):\n        return lst\n    if k == 0:\n        return []\n    if k == len(lst):\n        return lst\n    else:\n        for i in range(k):\n            if lst[i] == lst[k]:\n                del lst[i]\n    return "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    for item1, item2, item3 in zip(list1, list2, list3):\n        final_list.append(item1)\n        final_list.append(item2)\n        final_list.append(item3)\n    return final_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result += list1[i]\n        result += list2[i]\n        result += list3[i]\n    return result\n    \ndef only_odd_numbers(list1):\n    '''\n    Write a function that computes the length of a list of only the odd numbers in it.\n    '''\n    result = 0\n    for x in list1:\n        if x%2!= 0:\n            result += 1\n    return result\n    \ndef multiply_even_numbers(list1):\n    '''\n    Write a function that computes the product of all the even numbers in the list.\n    '''\n    result = 1\n    for x in list1:\n        if x%2 == 0:\n            result *= x\n    return result\n    \ndef check_if_positive_and_odd(n):\n    '''\n    Write a function that determines whether a number is positive and odd.\n    '''\n    return n > 0 and n%2 == 1\n    \ndef find_outlier(integers):\n    '''\n    Write a function that finds the 5th largest element in the list of integers.\n    '''\n    integers.sort(reverse = True)\n    return integers[4]\n    \ndef three_odd_numbers(list1):\n    '''\n    Write a function that computes the sum of all the odd numbers in a list.\n    '''\n    result = 0\n    for x in list1:\n        if x%2 == 1:\n            result += x\n    return result\n    \ndef frequency(string,search):\n    '''\n    Write a function that determines how many times a character appears in a string.\n    '''\n    count = 0\n    for x in string:\n        if x == search:\n            count += 1\n    return count\n    \ndef only_odd_numbers(list1):\n    '''\n    Write a function that computes the length of a list of only the odd numbers in it.\n    '''\n    result = 0\n    for x in list1:\n        if x%2!= 0:\n            result += 1\n    return result\n    \ndef get_strings(num):\n    '''\n    Write a function that computes the length of a list of strings.\n    '''\n    return len(str(num))\n    \ndef get_longest(list1):\n    '''\n    Write a function that computes the length of the longest string in the list.\n    '''\n    longest = ''\n    for x in list1:\n        if len(x) > len(longest):\n            longest = x\n    return len(longest)\n    \ndef is_prime(n):\n    '''\n    Write a function that determines whether a number is prime.\n    '''\n    if n > 1:\n        for x in range(2, n):\n            if (n % x) == 0:\n                return False\n    else:\n        return False\n    return True\n    \ndef is_palindrome(string):\n    '''\n    Write a function that determines whether a string is a palindrome.\n    '''\n    x = string.lower()\n    x = x.replace(\" \",\"\")\n    x = x.replace(\"-\",\"\")\n    x = x.replace(\":\",\"\")\n    x = x.replace(\"'\",\"\")\n    x = x.replace(\"?\",\"\")\n    x = x.replace(\".\",\"\")\n    x = x.replace(\"(\",\"\")\n    x = x.replace(\")\",\"\")\n    x = x.replace(\"-\",\"\")\n    x = x.replace(\"/\",\"\")\n    x = x.replace(\"%\",\"\")\n    x = x.replace(\"&\",\"\")\n    x = x.replace(\"*\",\"\")\n    x = x.replace(\"_\",\"\")\n    x = x.replace(\"+\",\"\")\n    x = x.replace(\"=\",\"\")\n    x = x.replace(\"<\",\"\")\n    x = x.replace(\">\",\"\")\n    x = x.replace(\"$\",\"\")\n    x = x.replace(\"#\",\"\")\n    x = x.replace(\"@\",\"\")\n    x = x.replace(\"[\",\"\")\n    x = x.replace(\"]\",\"\")\n    x = x.replace(\"{\",\"\")\n    x = x.replace(\"}\",\"\")\n    x = x.replace(\"[\",\"\")\n    x = x.replace(\"]\",\"\")\n    x = x.replace(\";\",\"\")\n    x = x.replace(\"&\",\"\")\n    x = x.replace(\":\",\"\")\n    x = x.replace(\"\\\"\",\"\")\n    x = x.replace(\"'\",\"\")\n    x = x.replace(\"(\",\"\")\n    x = x.replace(\")\",\"\")\n    x = x.replace(\"(\",\"\")\n    x = x.replace(\")\",\"\")\n    x = x.replace(\"(\",\"\")\n    x = x.replace(\"(\",\"\")\n    x = x.replace(\"(\",\"\")\n    x = x.replace(\"(\",\"\")\n    x = x.replace(\"(\",\"\")\n    x = x.replace(\"(\",\"\")\n    return x == x[::-1]\n    \ndef reverse_list_in_place(list1):\n    '''\n    Write a function that reverses the contents of the given list in place (i.e., without creating a new list).\n    '''\n    n = len(list1)-1\n    for x in range(n):\n        list1[x],list1[n] = list1[n],list1[x]\n        n -= 1\n    return list1\n    \ndef reverse_list_in_place_2(list1):\n    '''\n    Write a function that reverses the contents of the given list in place (i.e., without creating a new list).\n    '''\n    return list1[::-1]\n    \ndef merge_two_lists(list1,list2):\n    '''\n    Write a function that merges the given lists into one sorted list.\n    '''\n    result = []\n    result += sorted(list1)\n    result += sorted(list2)\n    return result\n    \ndef is_odd(num):\n    '''\n    Write a function that determines whether a number is odd.\n    '''\n    return num%2!= 0\n    \ndef average_weights(weights):\n    '''\n    Write a function that determines the average weight of a list of people.\n    '''\n    return sum(weights) / len(weights)\n    \ndef check_leap_year(year):\n    '''\n    Write a function that determines whether a year is a leap year.\n    '''\n    return year%400 == 0 or (year%100!= 0 and year%4 == 0)\n    \ndef sum_numbers(x,y):\n    '''\n    Write a function that sums up the numbers in a list.\n    '''\n    return x + y\n    \ndef is_prime(num):\n    '''\n    Write a function that determines whether a number is prime.\n    '''\n    if num > 1:\n        for x in range(2, num):\n            if (num % x) == 0:\n                return False\n    else:\n        return False\n    return True\n    \ndef solve_quadratic(a,b,c):\n    '''\n    Write a function that solves quadratic equations.\n    '''\n    discriminant = b**2 - 4*a*c\n    return (-b+discriminant**0.5)/(2*a),(-b-discriminant**0.5)/(2*a)\n    \ndef solve_quadratic_2(a,b,c):\n    '''\n    Write a function that solves quadratic equations.\n    '''\n    return (-b+sqrt(b**2-4*a*c))/(2*a),(-b-sqrt(b**2-4*a*c))/(2*a)\n    \ndef my_sqrt(number):\n    '''\n    Write a function that computes the square root of a number.\n    '''\n    result = 0\n    if number > 0:\n        result = number**0.5\n    else:\n        result = 0\n    return result\n    \ndef my_sqrt_2(number):\n    '''\n    Write a function that computes the square root of a number.\n    '''\n    result = 1\n    if number > 0:\n        resul"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert(len(list1) == len(list2) == len(list3)), \"Input lists should be of the same length\"\n    x = []\n    for i in range(len(list1)):\n        x.extend([list1[i], list2[i], list3[i]])\n    return x"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.extend((list1[i],list2[i],list3[i]))\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    if len(list1) == len(list2) == len(list3):\n        for i in range(len(list1)):\n            result.append(list1[i])\n            result.append(list2[i])\n            result.append(list3[i])\n        return result\n    else:\n        print(\"Error: The length of list1, list2, list3 are not equal\")\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list = []\n    for i in range(len(list1)):\n        inter_list.append(list1[i])\n        inter_list.append(list2[i])\n        inter_list.append(list3[i])\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] if i<len(list1) else list2[i] if i<len(list2) else list3[i] for i in range(len(list1+list2+list3))]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    res_dissimilar_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            res_dissimilar_elems.append(test_tup1[i])\n    return res_dissimilar_elems\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dif_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dif_elements.append(test_tup1[i])\n    return dif_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #print(set(test_tup1)-set(test_tup2))\n    return set(test_tup1)-set(test_tup2)\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set_one = set(test_tup1)\n    set_two = set(test_tup2)\n    print(set_one)\n    print(set_two)\n    common_ele = set_one.intersection(set_two)\n    print(common_ele)\n    diff_ele = set_one.union(set_two).difference(common_ele)\n    print(diff_ele)\n    return(diff_ele)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # print('\\n\\ntest_tup1: ', test_tup1)\n    # print('test_tup2: ', test_tup2)\n    test_tup1_dict = {}\n    test_tup2_dict = {}\n    for i in test_tup1:\n        # print('\\ni: ', i)\n        # print('\\ntest_tup1: ', test_tup1[i])\n        # print('\\ntest_tup2: ', test_tup2[i])\n        # print('test_tup1_dict: ', test_tup1_dict)\n        # print('test_tup2_dict: ', test_tup2_dict)\n        test_tup1_dict[i] = test_tup1[i]\n        test_tup2_dict[i] = test_tup2[i]\n    # print('\\ntest_tup1_dict: ', test_tup1_dict)\n    # print('\\ntest_tup2_dict: ', test_tup2_dict)\n    # print('len(test_tup1_dict): ', len(test_tup1_dict))\n    # print('len(test_tup2_dict): ', len(test_tup2_dict))\n    # print('test_tup1_dict.values(): ', test_tup1_dict.values())\n    # print('test_tup2_dict.values(): ', test_tup2_dict.values())\n    dissimilar_index = []\n    for i in range(len(test_tup1_dict.keys())):\n        # print('i: ', i)\n        if test_tup1_dict.values()[i]!= test_tup2_dict.values()[i]:\n            dissimilar_index.append(i)\n            # print('i: ', i)\n            # print('test_tup1_dict.values()[i]: ', test_tup1_dict.values()[i])\n            # print('test_tup2_dict.values()[i]: ', test_tup2_dict.values()[i])\n            # print('\\ntest_tup1_dict[i]: ', test_tup1_dict.keys()[i])\n            # print('test_tup2_dict[i]: ', test_tup2_dict.keys()[i])\n    # print('\\ndissimilar_index: ', dissimilar_index)\n    # print('\\ntest_tup1_dict.values(): ', test_tup1_dict.values())\n    # print('\\ntest_tup2_dict.values(): ', test_tup2_dict.values())\n    return dissimilar_index\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_indices = []\n    for i,j in zip(test_tup1, test_tup2):\n        if i!= j:\n            dissimilar_indices.append(i)\n    return dissimilar_indices\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for element in test_tup1:\n        if element not in test_tup2:\n            return element\n    return None\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    i, j = 0, 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i]!= test_tup2[j]:\n            return test_tup1[i], test_tup2[j]\n        i += 1\n        j += 1\n    return None\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    m1 = set(test_tup1)\n    m2 = set(test_tup2)\n    dissim_list = list(m1.symmetric_difference(m2))\n    return dissim_list\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for each_elem in test_tuple:\n        if isinstance(each_elem, tuple):\n            for each_sub_elem in even_fnc(each_elem):\n                new_tuple = new_tuple + (each_sub_elem,)\n        else:\n            new_tuple = new_tuple + (each_elem,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for element in test_tuple:\n        if even_fnc(element):\n            even_list.append(element)\n    \n    return tuple(even_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_odd_tuple(test_tuple):\n        '''\n        Return tuple containing only even and odd elements of the given tuple.\n        '''\n        new_tuple = []\n        for item in test_tuple:\n            if even_fnc(item) == False:\n                new_tuple.append(item)\n        return tuple(new_tuple)\n    return even_odd_tuple(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    while True:\n        try:\n            test_tuple = even_fnc(test_tuple)\n            break\n        except TypeError:\n            print(\"TypeError: tuple is not a mixed tuple\")\n            return None\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([i for i in test_tuple if even_fnc(i)])\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    if type(test_tuple) == tuple:\n        return tuple(even_fnc(i) for i in test_tuple)\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) > 0:\n        if len(test_tuple) % 2!= 0:\n            return even_ele(test_tuple[1:], even_fnc)\n        else:\n            return even_fnc(test_tuple)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = test_tuple\n    if test_tuple == (): \n        return ()\n    elif isinstance(test_tuple, tuple): \n        if test_tuple[0] % 2 == 0: \n            return even_ele(test_tuple[1:], even_fnc) \n        else: \n            return even_ele(test_tuple[1:], even_fnc) + (test_tuple[0],)\n    else: \n        return (test_tuple, )\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return test_tuple[1::2] if even_fnc(test_tuple) else test_tuple[::2]\n    \ndef mixed_tuple(test_tuple): \n    '''\n    Write a function to convert the nested tuple into the nested list.\n    '''\n    return test_tuple[::2]\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if not s:\n        return 0\n    return (s * s) * 0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = float(input(\"Enter the base edge:\"))\n    height = float(input(\"Enter the height:\"))\n    area = (base*height)/2\n    print(\"The surface area of the pyramid is \",area,\" sq. units\")\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    h = b * 2 + s * 2\n    a = h * 2\n    area = a + (a / 2) * s\n    return (area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surfaceArea(b,s):\n        # if height is 1 then the surface area of a square pyramid is 2*(base edge)\n        if (b == s):\n            return 2 * (b)\n        #if height is more than 2 then the surface area of a square pyramid is (2*(base edge) + 2*(base edge)*(height-2))\n        else:\n            return 2*(b) + 2*(b)*(s-2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base=b\n    height=s\n    a=(base*height)/2\n    print(a)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = s*b\n    print(\"The surface area of the pyramid is\",a,\"m^2\")\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=b*s*2\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    print(\"Surface area is: %.2f\" %area)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*s\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    if b <= 0 or s <= 0:\n        return -1\n    else:\n        for i in range(1,s+1):\n            area = area + (b * i)\n        return area\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    print(type(dict1))\n    if dict1:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print('It is not empty!')\n    else:\n        print('It is empty')\nmy_dict({})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1== {}\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # if len(dict1) == 0:\n    #     print(\"the dictionary is empty\")\n    # else:\n    #     print(\"the dictionary is not empty\")\n    # return\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \nmy_dict1 = {1:'a', 2:'b'}\nprint(my_dict(my_dict1))\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        print('This dictionary is empty')\n    else:\n        print('This dictionary is not empty')\nmy_dict({})\nmy_dict({2:2})\nmy_dict({1:1,2:2,3:3})\nmy_dict({'name':'Tom',2:2,3:3})\nmy_dict({'name':'Tommi', 'age':21,'sex':'M', 2:2, 3:3})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num * catalan_number(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(num):\n        if num == 1:\n            return 1\n        else:\n            return num*factorial(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 1:\n        return 1\n    \n    return num * catalan_number(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return math.factorial(2*num) / (math.factorial(num) * math.factorial(num+1))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def fact(n):\n        '''\n        Factorial of a number\n        '''\n        if n == 0:\n            return 1\n        elif n == 1:\n            return n\n        elif n > 1:\n            return (n * fact(n - 1))\n    return fact(num) // (fact(2) * fact(num - 2))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        raise ValueError('Number must be greater than 0.')\n    if num == 1:\n        return 1\n    result = 0\n    for i in range(1, num + 1):\n        result = result + (catalan_number(i - 1) * catalan_number(num - i))\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = []\n    for i in range(num+1):\n        catalan_list.append(0)\n    catalan_list[0] = 1\n    catalan_list[1] = 1\n    for i in range(2, num+1):\n        for j in range(i):\n            catalan_list[i] = catalan_list[i] + catalan_list[j] * catalan_list[i-j-1]\n    return catalan_list[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    catalan = 0\n    for i in range(num):\n        catalan += catalan_number(i) * catalan_number(num-i-1)\n    return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        raise ValueError('n must be a positive integer')\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num + 1):\n        for j in range(0, i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #! We do not need the regex to match everything because only the lastly will be matched\n    #! I mean, it needs to match everything after the lastly. Not all the text is important to be matched\n    text = text.lower()\n    #! Assume that the lastly will be the last match\n    adverbs = re.findall(r'ly|-ly', text)\n    for i in range(len(adverbs)):\n        adverbs[i] = adverbs[i][:-1]\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # some code here\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for m in re.finditer(r'ly$', text):\n        result.append((m.start(), m.end()))\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [\"a\", \"an\", \"the\"]\n    adverbs_regex = \"|\".join(adverbs)\n    result = re.findall(adverbs_regex, text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'(?<!\\wly)\\b(ly\\w+)', text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'(ly)', text)\n    adverbs = map(lambda x: x.rstrip('ly'), adverbs)\n    adverbs = list(adverbs)\n    adverbs = filter(lambda x: x[-1] in ['a', 'e', 'i', 'o', 'u'], adverbs)\n    adverbs = list(adverbs)\n    adverbs = filter(lambda x: x[0] == 'e', adverbs)\n    adverbs = list(adverbs)\n    adverbs = filter(lambda x: x[0] == 'a', adverbs)\n    adverbs = list(adverbs)\n    adverbs = filter(lambda x: x[0] == 'i', adverbs)\n    adverbs = list(adverbs)\n    adverbs = filter(lambda x: x[0] == 'e', adverbs)\n    adverbs = list(adverbs)\n    adverbs = filter(lambda x: x[0] == 'o', adverbs)\n    adverbs = list(adverbs)\n    adverbs = filter(lambda x: x[0] == 'u', adverbs)\n    adverbs = list(adverbs)\n    return(adverbs)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if text == \"\":\n        return \"Empty string\"\n    text = text.split()\n    adverb = []\n    adverb_pos = []\n    for i in range(len(text)):\n        if re.match(r\"\\w+ly$\", text[i]):\n            adverb.append(text[i])\n            adverb_pos.append(i)\n    return adverb,adverb_pos\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'(ly)$')\n    result = []\n    for i in regex.finditer(text):\n        result.append(i.start())\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'ly$',text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    if 'in' in text:\n        for i in range(0, len(text)):\n            if text[i] == 'in' and text[i+1] =='':\n                if text[i+2] == 'ly':\n                    adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # TODO: Write your function here\n    items = sorted(items, key = lambda x: x[1],reverse = True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    elif n==len(items):\n        return items\n    else:\n        expensive_items_sorted=sorted(items, key=lambda x: x[0], reverse=True)\n        max_heap=[]\n        for i in range(n):\n            heapq.heappush(max_heap,expensive_items_sorted[i][0])\n        return max_heap\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    res = []\n    h = []\n    for i in items:\n        heapq.heappush(h,(-i,i))\n    for i in range(n):\n        res.append(heapq.heappop(h)[1])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] += 1\n    print(d)\n    l = []\n    for item in d:\n        if d[item] > n:\n            l.append(item)\n    return l\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # A n-length list of (item, price) tuples.\n    # heapify is a fast operation, and we want to keep it constant time.\n    heap = []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # n=3\n    # items =[3,2,1,2]\n    # n=2\n    # items =[3,2,1]\n    item_value = []\n    for i in items:\n        item_value.append([i,items.index(i)])\n    item_value = sorted(item_value,key=lambda x: x[1])\n    for i in range(len(item_value)):\n        if i < n:\n            print(item_value[i][0],end=' ')\n    print()\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pq = []\n    for i in items:\n        heapq.heappush(pq, i)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of items with the price as the item and the item name as the item.\n    heap = []\n    # Iterate through the list of items.\n    for item in items:\n        # Store the price of the item in an item_price variable.\n        item_price = item[\"price\"]\n        # Populate the heap with the item_price.\n        heapq.heappush(heap,(-1 * item_price, item[\"name\"]))\n        # Keep track of the number of items in the heap.\n        count = len(heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_items=[]\n    for i in range(n):\n        max_items.append((items[0],0))\n        for j in range(1,len(items)):\n            if items[j]>max_items[i][0]:\n                max_items[i]=(items[j],i)\n            else:\n                continue\n    return max_items\ndef k_smallest_price(prices,n):\n    '''\n    Write a function to find the n smallest price in a given dataset.\n    '''\n    #Code here\n    i=0\n    for j in range(1,len(prices)):\n        if prices[j]<prices[i]:\n            i=j\n    return i\ndef add_one(x):\n    '''\n    Write a function which takes an integer as input and returns the same integer incremented by 1.\n    If the integer is 0 then return 1.\n    '''\n    if x==0:\n        return 1\n    else:\n        return x+1\ndef remove_one(x):\n    '''\n    Write a function which takes an integer as input and returns the same integer decremented by 1.\n    If the integer is 1 then return 0.\n    '''\n    if x==1:\n        return 0\n    else:\n        return x-1\ndef closest(arr,n,x):\n    '''\n    Write a function which takes an integer array arr and an integer n and returns the pair with the \n    smallest difference.\n    '''\n    arr.sort()\n    diff=999999999999\n    for i in range(n):\n        if abs(arr[i]-x)<diff:\n            diff=abs(arr[i]-x)\n            res=i\n    return res\ndef item_swap(arr,n):\n    '''\n    Write a function which takes an array and an integer n and returns the array with the elements of the array in the same order, except they have been reversed.\n    For example, given [1,2,3,4], if n = 2 then the function should return [4,3,2,1].\n    '''\n    arr.sort(reverse=True)\n    return arr\ndef item_swap2(arr,n):\n    '''\n    Write a function which takes an array and an integer n and returns the array with the elements of the array in the same order, except they have been reversed.\n    For example, given [1,2,3,4], if n = 2 then the function should return [4,3,2,1].\n    '''\n    arr.sort(reverse=True)\n    return arr\ndef sum_digits(n):\n    '''\n    Write a function which takes an integer and returns the sum of the digits in that integer.\n    '''\n    res=0\n    while n>0:\n        res+=n%10\n        n=n//10\n    return res\ndef sum_digits_2(n):\n    '''\n    Write a function which takes an integer and returns the sum of the digits in that integer.\n    '''\n    res=0\n    while n>0:\n        res+=n%10\n        n=n//10\n    return res\ndef reverse_number(n):\n    '''\n    Write a function which takes an integer n and returns the integer corresponding to the reversal of the digits in that integer.\n    '''\n    res=0\n    while n>0:\n        res=res*10+n%10\n        n=n//10\n    return res\ndef reverse_number_2(n):\n    '''\n    Write a function which takes an integer n and returns the integer corresponding to the reversal of the digits in that integer.\n    '''\n    res=0\n    while n>0:\n        res=res*10+n%10\n        n=n//10\n    return res\ndef vowel_count(str):\n    '''\n    Write a function which takes a string s as input and returns the number of vowels present in it.\n    '''\n    vowels='aeiou'\n    count=0\n    for i in range(len(str)):\n        if str[i] in vowels:\n            count+=1\n    return count\ndef vowel_count_2(str):\n    '''\n    Write a function which takes a string s as input and returns the number of vowels present in it.\n    '''\n    vowels='aeiou'\n    return sum(1 for i in str if i in vowels)\ndef remove_duplicates(str):\n    '''\n    Write a function which takes a string as input and returns the string without duplicate characters.\n    '''\n    str1=\"\"\n    for i in str:\n        if i not in str1:\n            str1+=i\n    return str1\ndef remove_duplicates_2(str):\n    '''\n    Write a function which takes a string as input and returns the string without duplicate characters.\n    '''\n    str1=\"\"\n    for i in str:\n        if i not in str1:\n            str1+=i\n    return str1\ndef string_to_int(str):\n    '''\n    Write a function which takes a string and returns its integer equivalent.\n    '''\n    num=0\n    for i in range(len(str)):\n        num=num*10+int(str[i])\n    return num\ndef string_to_int_2(str):\n    '''\n    Write a function which takes a string and returns its integer equivalent.\n    '''\n    num=0\n    for i in str:\n        num=num*10+int(i)\n    return num\ndef sort_strings(str):\n    '''\n    Write a function which takes a string and returns the string with the same characters arranged alphabetically.\n    '''\n    str.sort()\n    return str\ndef sort_strings_2(str):\n    '''\n    Write a function which takes a string and returns the string with the same characters arranged alphabetically.\n    '''\n    str1=\"\"\n    for i in range(len(str)-1):\n        if str[i]<str[i+1]:\n            str1+=str[i]+\"\\n\"\n    str1+=str[-1]+\"\\n\"\n    return str1\ndef sort_strings_3(str):\n    '''\n    Write a function which takes a string and returns the string with the same characters arranged alphabetically.\n    '''\n    str1=\"\"\n    i=0\n    while i<len(str):\n        j=i\n        while j<len(str):\n            if str[j]<str[i]:\n                str1+=\"\\n\"+str[j]+\"\\n\"\n            j+=1\n        i+=1\n    return str1\ndef sort_strings_4(str):\n    '''\n    Write a function which takes a string and returns the string with the same characters arranged alphabetically.\n    '''\n    str1=\"\"\n    for i in range(len(str)-1):\n        if str[i]<str[i+1]:\n            str1+=str[i]+\"\\n\"\n    str1+=str[-1]+\"\\n\"\n    return str1\ndef int_to_string(num):\n    '''\n    Write a function which takes an integer and returns the string equivalent.\n    '''\n    str=\"\"\n    while num>0:\n        str=str+chr(num%10+ord('0'))\n        num=num//10\n    return str\ndef int_to_string_2(num):\n    '''\n    Write a function which takes an integer and returns the string equivalent.\n    '''\n    return chr(num%10+ord('0'))+str(num//10)\ndef int_to_string_3(num):\n    '''\n    Write a function which takes an integer and returns the string equivalent.\n    '''\n    return chr(num%10+ord('0'))+str(num//10)+\"\\n\"\ndef int_to_string_4(num):\n    '''\n    Write a function which takes an integer and returns the string equivalent.\n    '''\n    return chr(num%10+ord('0'))+str(num//10)+\"\\n\"\ndef int_to_string_5(num):\n    '''\n    Write a function which takes an integer and returns the string equivalent.\n    '''\n    res=\"\"\n    while num>0:\n        res=chr(num%10+ord('0"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    res = []\n    for key in sorted(items, key = lambda x: items[x]):\n        if len(res) < n:\n            res.append(key)\n    return res\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 0:\n        return l\n    else:\n        return l[:n] + l[n:n+1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n<=0:\n        return l\n    if n == 1:\n        return l[1:] + l[:1]\n    else:\n        return l[n:] + l[:n-1] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    length = len(l)\n    if length <= 0 or length < n:\n        return\n    else:\n        i = 0\n        while length!= 0:\n            l[i], l[length - 1] = l[length - 1], l[i]\n            length = length - 1\n            i = i + 1\n        \n        for j in range(i, length):\n            l[j], l[length - 1] = l[length - 1], l[j]\n        \n        return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a, b = l[:n], l[n:]\n    a, b = l[:n], l[n:]\n    return a, b\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l[:]\n    print(arr)\n    arr = arr[:n] + arr[n + 1:]\n    print(arr)\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    my_list = []\n    for i in range(len(l)):\n        my_list.append(l[i])\n        if i == (len(l) - 1):\n            break\n        else:\n            continue\n    new_list = my_list[:n]\n    new_list.extend(my_list[n:])\n    return new_list\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = l[:n]\n    l.extend(new_list)\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        raise ValueError(\"First argument must be > 0\")\n    if l == None or len(l) < n:\n        return []\n    else:\n        return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        return []\n    if n == 0:\n        return l\n    new = []\n    for i in range(len(l)):\n        if i == n-1:\n            new.append(l[i])\n            new.append(l[0:i])\n        else:\n            new.append(l[i])\n    return new\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    x = tuple(listx)\n    return x\n    \ndef list_to_dictionary(listx,listy):\n    '''\n    Write a function to convert a list of tuples to a dictionary.\n    '''\n    \n    x = dict(listx, **listy)\n    return x\n    \ndef find_numbers_occurrences(listx, number, n):\n    '''\n    Write a function to find the numbers of occurrences of a number in a list.\n    '''\n    \n    listx.sort()\n    count = 0\n    for i in range(len(listx)):\n        if number == listx[i]:\n            count = count + 1\n    if count == n:\n        return True\n    else:\n        return False\n    \ndef add_string_at_index(string, index, substring):\n    '''\n    Write a function to add a substring to a string at the given index.\n    '''\n    \n    listx = string.split(\" \")\n    listx.insert(index, substring)\n    return \" \".join(listx)\n    \ndef add_string_at_index_multi_strings(string, index, *args):\n    '''\n    Write a function to add multiple strings to a string at the given indexes.\n    '''\n    \n    listx = string.split(\" \")\n    for i in range(len(args)):\n        listx.insert(index + i, args[i])\n    return \" \".join(listx)\n    \ndef create_sentence(word):\n    '''\n    Write a function to create a sentence from a list of words.\n    '''\n    \n    listx = word.split(\" \")\n    listx.reverse()\n    return \" \".join(listx)\n    \ndef reverse_string(word):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    word = word[::-1]\n    return word\n    \ndef replace_last_character_string(word, old, new):\n    '''\n    Write a function to replace the last character in a string.\n    '''\n    \n    word = word[:-1] + new\n    return word\n    \ndef replace_character_string(word, old, new):\n    '''\n    Write a function to replace the character in a string.\n    '''\n    \n    new = new[0]\n    word = word.replace(old, new)\n    return word\n    \ndef replace_all_character_string(word, old, new):\n    '''\n    Write a function to replace all occurrences of the character in a string.\n    '''\n    \n    word = word.replace(old, new)\n    return word\n    \ndef find_substring_in_string(string, substring):\n    '''\n    Write a function to check if a substring exists in a string.\n    '''\n    \n    if substring in string:\n        return True\n    else:\n        return False\n        \ndef find_substring_in_string_at_index(string, substring, index):\n    '''\n    Write a function to check if a substring exists in a string at the given index.\n    '''\n    \n    if substring in string[index:]:\n        return True\n    else:\n        return False\n        \ndef remove_substring_from_string(string, substring):\n    '''\n    Write a function to remove a substring from a string.\n    '''\n    \n    word = string.split(substring)\n    return word[0]\n    \ndef remove_character_string(word, old):\n    '''\n    Write a function to remove the character in a string.\n    '''\n    \n    word = word.replace(old, \"\")\n    return word\n    \ndef remove_word_occurrences_in_string(string, word):\n    '''\n    Write a function to remove word occurrences in a string.\n    '''\n    \n    word = word.lower()\n    word = word.replace(\" \", \"\")\n    word = word.split(\" \")\n    for i in word:\n        if i in string:\n            string = string.replace(i, \"\")\n    return string\n    \ndef capitalize_string(string):\n    '''\n    Write a function to capitalize a string.\n    '''\n    \n    x = string.capitalize()\n    return x\n    \ndef capitalise_string(string):\n    '''\n    Write a function to capitalize the first character of a string.\n    '''\n    \n    x = string[0].capitalize()\n    return x + string[1:]\n    \ndef add_string_before_word(string, word):\n    '''\n    Write a function to add a string before a word.\n    '''\n    \n    return word + \" \" + string\n    \ndef add_string_after_word(string, word):\n    '''\n    Write a function to add a string after a word.\n    '''\n    \n    return string + \" \" + word\n    \ndef add_string_after_n_words(string, word, n):\n    '''\n    Write a function to add a string after n words.\n    '''\n    \n    x = string.split()\n    for i in range(n):\n        x.append(word)\n    return \" \".join(x)\n    \ndef add_string_after_first_word(string, word):\n    '''\n    Write a function to add a string after the first word.\n    '''\n    \n    x = string.split()\n    x.append(word)\n    return \" \".join(x)\n    \ndef add_string_after_last_word(string, word):\n    '''\n    Write a function to add a string after the last word.\n    '''\n    \n    x = string.split()\n    x.append(word)\n    return \" \".join(x[:-1])\n    \ndef add_string_after_word_multiple_times(string, word, n):\n    '''\n    Write a function to add a string after a word multiple times.\n    '''\n    \n    x = string.split()\n    for i in range(n):\n        x.append(word)\n    return \" \".join(x)\n    \ndef capitalize_first_letter_in_word(string):\n    '''\n    Write a function to capitalize the first letter of a word.\n    '''\n    \n    x = string.split()\n    x[0] = x[0][0].upper() + x[0][1:]\n    return \" \".join(x)\n    \ndef reverse_string_word_by_word(string):\n    '''\n    Write a function to reverse a string word by word.\n    '''\n    \n    x = string.split()\n    x.reverse()\n    return \" \".join(x)\n    \ndef remove_string_occurrences_from_string(string, substring):\n    '''\n    Write a function to remove occurrences of a substring from a string.\n    '''\n    \n    word = string.split(substring)\n    return word[1]\n    \ndef remove_string_occurrences_from_list(listx, substring):\n    '''\n    Write a function to remove occurrences of a substring from a list.\n    '''\n    \n    listx.remove(substring)\n    return listx\n    \ndef remove_first_and_last_occurrences_of_substring_from_string(string, substring):\n    '''\n    Write a function to remove the first and the last occurrences of a substring\n    from a string.\n    '''\n    \n    if substring in string:\n        word = string.split(substring)\n        word = word[1]\n        return word\n    else:\n        return string\n    \ndef remove_first_and_last_occurrences_of_substring_from_list(listx, substring):\n    '''\n    Write a function to remove the first and the last occurrences of a substring\n    from a list.\n    '''\n    \n    listx.remove(substring)\n    return listx\n    \ndef find_last_index_of_substring_in_string(string, substring):\n    '''\n    Write a function to find the last index of a substring in a string.\n    '''\n    \n    word = string.split(substring)\n    word.reverse()\n    return wor"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if not isinstance(listx, list):\n        raise TypeError(\"The argument must be a list object\")\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    \nprint(list_tuple(['1','2','3','4','5']))\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex=tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    a = tuple(listx)\n    return a\nprint(list_tuple([1,2,3,4]))\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_element = max(nums)\n    min_element = min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    from math import inf\n    \n    max_val = inf\n    min_val = -inf\n    \n    for i in nums:\n        if i > max_val:\n            max_val = i\n        if i < min_val:\n            min_val = i\n    \n    return max_val - min_val\n    \nprint(big_diff([10, 4, 2, 10]))\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return abs(smallest - largest)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(\"Given list: \", nums)\n    print(\"Maximum value is: \", max(nums))\n    print(\"Minimum value is: \", min(nums))\n    print(\"Difference between maximum and minimum: \", max(nums) - min(nums))\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest_number = nums[0]\n    smallest_number = nums[0]\n    for num in nums:\n        if num > largest_number:\n            largest_number = num\n        elif num < smallest_number:\n            smallest_number = num\n    return largest_number - smallest_number\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_n = max(nums)\n    min_n = min(nums)\n    return max_n - min_n\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(max(nums)-min(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    if l == 1:\n        return max_num - min_num\n    \n    elif l == 2:\n        return max_num - min_num\n    \n    elif l == 3:\n        diff = abs(max_num - min_num)\n        return diff\n    \n    else:\n        mid = l//2\n        left_max = max(nums[:mid])\n        left_min = min(nums[:mid])\n        \n        right_max = max(nums[mid:])\n        right_min = min(nums[mid:])\n        \n        left_diff = abs(left_max - left_min)\n        right_diff = abs(right_max - right_min)\n        \n        return left_diff if left_diff > right_diff else right_diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = max(nums) - min(nums)\n    return diff\n    \n    \ndef odd_even_count(nums):\n    '''\n    Write a python function to count the number of odd and even numbers in a given list.\n    '''\n    odd, even = 0, 0\n    for num in nums:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return odd, even\n        \n        \ndef odd_even_no_switch_count(nums):\n    '''\n    Write a python function to count the number of odd and even numbers in a given list.\n    '''\n    odd, even = 0, 0\n    for num in nums:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return odd, even\n        \n        \ndef odd_even_swap_count(nums):\n    '''\n    Write a python function to swap odd and even numbers in a given list.\n    '''\n    odd, even = 0, 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i], nums[odd] = nums[odd], nums[i]\n            odd += 1\n    return nums\n        \n        \ndef longest_consecutive_count(nums):\n    '''\n    Write a python function to count the number of longest consecutive numbers in a given list.\n    '''\n    longest, start, end = 0, 0, 0\n    nums = list(dict.fromkeys(nums))\n    if len(nums) == 0:\n        return 0\n    else:\n        for i in range(len(nums)):\n            if nums[i] == nums[end]:\n                end += 1\n            else:\n                if nums[start] == nums[end]:\n                    end += 1\n                else:\n                    start = end\n                    end = i + 1\n        longest = end - start\n        return longest\n        \n        \ndef longest_consecutive_count_no_switch(nums):\n    '''\n    Write a python function to count the number of longest consecutive numbers in a given list.\n    '''\n    longest, start, end = 0, 0, 0\n    nums = list(dict.fromkeys(nums))\n    if len(nums) == 0:\n        return 0\n    else:\n        for i in range(len(nums)):\n            if nums[i] == nums[end]:\n                end += 1\n            else:\n                if nums[start] == nums[end]:\n                    end += 1\n                else:\n                    start = end\n                    end = i + 1\n        longest = end - start\n        return longest\n        \n        \ndef palindrome_permutation(str):\n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    str = list(str)\n    str.sort()\n    if str == list(reversed(str)):\n        return True\n    else:\n        return False\n    \n        \ndef palindrome_permutation_no_switch(str):\n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    str = list(str)\n    str.sort()\n    str = list(reversed(str))\n    if str == list(reversed(str)):\n        return True\n    else:\n        return False\n    \n        \ndef palindrome_permutation_count(str):\n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    str = list(str)\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    if count == len(str):\n        return True\n    else:\n        return False\n        \n        \ndef palindrome_permutation_count_no_switch(str):\n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    str = list(str)\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    if count == len(str):\n        return True\n    else:\n        return False\n    \n        \ndef max_char_counter(str):\n    '''\n    Write a python function to count the number of distinct characters in a given string.\n    '''\n    str = str.lower()\n    str = list(str)\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    return count\n    \n        \ndef max_char_counter_no_switch(str):\n    '''\n    Write a python function to count the number of distinct characters in a given string.\n    '''\n    str = str.lower()\n    str = list(str)\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    return count\n    \n        \ndef max_char_count_no_switch(str):\n    '''\n    Write a python function to count the number of distinct characters in a given string.\n    '''\n    str = str.lower()\n    str = list(str)\n    count = 0\n    str = list(dict.fromkeys(str))\n    for i in str:\n        count = max(count, str.count(i))\n    return count\n    \n        \ndef max_char_count(str):\n    '''\n    Write a python function to count the number of distinct characters in a given string.\n    '''\n    str = str.lower()\n    str = list(str)\n    count = 0\n    str = list(dict.fromkeys(str))\n    for i in str:\n        count = max(count, str.count(i))\n    return count\n    \n        \ndef max_char_count_no_switch(str):\n    '''\n    Write a python function to count the number of distinct characters in a given string.\n    '''\n    str = str.lower()\n    str = list(str)\n    count = 0\n    str = list(dict.fromkeys(str))\n    for i in str:\n        count = max(count, str.count(i))\n    return count\n    \n        \ndef sum_digits(num):\n    '''\n    Write a python function to sum the digits in a given integer.\n    '''\n    total = 0\n    while num!= 0:\n        total += num % 10\n        num = num // 10\n    return total\n    \n    \ndef sum_digits_no_switch(num):\n    '''\n    Write a python function to sum the digits in a given integer.\n    '''\n    total = 0\n    while num!= 0:\n        total += num % 10\n        num = num // 10\n    return total\n    \n        \ndef sum_digits_count(num):\n    '''\n    Write a python function to sum the digits in a given integer.\n    '''\n    num = list(str(num))\n    total = 0\n    for i in num:\n        total += int(i)\n    return total\n    \n        \ndef sum_digits_count_no_switch(num):\n    '''\n    Write a python function to sum the digits in a given integer.\n    '''\n    num = list(str(num))\n    total = 0\n    for i in num:\n        total += int(i)\n    return total\n    \n        \ndef sum_digits_sum(num):\n    '''\n    Write a python function to sum the digits in a given integer.\n    '''\n    total = 0\n    while num!= 0:\n        total += num % 10\n        num = num // 10\n    retur"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    return max(nums) - min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while True:\n        x = a**2\n        y = b**2\n        if x == y:\n            return a, b\n        elif x > y:\n            return a, y\n        else:\n            return y, a\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a,b+1):\n        if i ** 2 == i:\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #print (a**2)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a,b):\n        if i*i==i:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        return None\n    \n    perfect_square_range = range(a,b+1)\n    perfect_square_range_sq = set(map(lambda x: x**2, perfect_square_range))\n    \n    return perfect_square_range_sq\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for x in range(a, b+1):\n        if x**2 == x:\n            print(x, end ='')\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print(f\"The perfect squares between {a} and {b} are : {[x**2 for x in range(a, b+1) if x**2%2==0]}\")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return f'{a}'\n    else:\n        r1 = sqrt(a)\n        r2 = sqrt(b)\n        if r1 == int(r1) and r2 == int(r2):\n            if r1 == r2:\n                return f'{a}'\n            else:\n                return f'{r1},{r2}'\n        else:\n            return f'{a} {r1}'\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    numbers = list(range(a, b + 1))\n    for i in numbers:\n        if i**0.5 == int(i**0.5):\n            print(i)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = x ** 2 + y ** 2\n    angle = cmath.acos(x / radius)\n    return radius * math.cos(angle), radius * math.sin(angle)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = y\n    theta = x * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a,b\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    return [r*cos(theta), r*sin(theta)]\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x * x\n    b = y * y\n    radius = a + b\n    return a / radius, b / radius\ndef rect_polar(r,a):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    angle = math.acos(r)\n    return a / math.sin(angle), 2 * angle\ndef trig(a,b,c):\n    '''\n    Write a function to calculate the trigonometric inverse tangent function.\n    '''\n    return cmath.degrees(cmath.acos((a**2 + b**2 - c**2)/(2*a*b)))\ndef inverse_tangent(degrees,x1,y1,x2,y2):\n    '''\n    Write a function to calculate the inverse tangent function.\n    '''\n    a = math.cos(math.radians(degrees))\n    b = math.sin(math.radians(degrees))\n    return (x2 - x1) / (a * y1 + b * y2) + x1, (y2 - y1) / (a * y1 + b * y2) + y1\ndef func_int(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the integral of a function.\n    '''\n    def f(t):\n        return math.cos(math.radians(t))\n    \n    return y2 * (y3 - y4) + y1 * (y4 - y1) / 2 + f((x1 + x2) / 2) * (x4 - x3) / 2\ndef func_int_cubic(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the integral of a function.\n    '''\n    def f(t):\n        return math.cos(math.radians(t))\n    \n    return y2 * (y3 - y4) + y1 * (y4 - y1) / 2 + f((x1 + x2) / 2) * (x4 - x3) / 2 + f((x1 + x2 + x3 + x4) / 4) * (x2 - x1) / 2 * (x4 - x3) / 4\ndef func_fraction(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the fractional part of a function.\n    '''\n    x = (x2 + x3 + x4) / 3\n    y = (y2 + y3 + y4) / 3\n    return x * (y4 - y3) + (x3 - x) * (y3 + y4) / 2 + (x2 - x1) * y3 / 2, x * (y3 - y4) + (x4 - x3) * (y1 + y2) / 2 + (x3 - x) * y1 / 2\ndef func_mul(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the multiple of a function.\n    '''\n    return x1 * x2 * x3 * x4, y1 * y2 * y3 * y4\ndef func_add(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the sum of a function.\n    '''\n    return x1 + x2 + x3 + x4, y1 + y2 + y3 + y4\ndef func_diff(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the difference of a function.\n    '''\n    return x1 - x2, y1 - y2\ndef func_div(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the division of a function.\n    '''\n    return x1 / x2, y1 / y2\ndef func_min(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the minimum of a function.\n    '''\n    return min(x1,x2,x3,x4), min(y1,y2,y3,y4)\ndef func_max(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the maximum of a function.\n    '''\n    return max(x1,x2,x3,x4), max(y1,y2,y3,y4)\ndef func_pow(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the power of a function.\n    '''\n    return pow(x1,x2), pow(y1,y2)\ndef func_log(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the logarithm of a function.\n    '''\n    return math.log(x1,x2), math.log(y1,y2)\ndef func_tan(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the tangent of a function.\n    '''\n    return cmath.tan(cmath.pi / 2 + cmath.atan((x2 - x1) / (y2 - y1))), cmath.tan(cmath.pi / 2 + cmath.atan((y2 - y1) / (x2 - x1)))\ndef func_asin(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the arc sine of a function.\n    '''\n    return cmath.asin(x1/x2), cmath.asin(y1/y2)\ndef func_acos(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the arc cosine of a function.\n    '''\n    return cmath.acos(x1/x2), cmath.acos(y1/y2)\ndef func_asinh(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the arc hyperbolic sine of a function.\n    '''\n    return cmath.asinh(x1/x2), cmath.asinh(y1/y2)\ndef func_acosh(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the arc hyperbolic cosine of a function.\n    '''\n    return cmath.acosh(x1/x2), cmath.acosh(y1/y2)\ndef func_atanh(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the arc hyperbolic tangent of a function.\n    '''\n    return cmath.atanh(x1/x2), cmath.atanh(y1/y2)\ndef func_atan(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the arc tangent of a function.\n    '''\n    return cmath.atan(x1/x2), cmath.atan(y1/y2)\ndef func_sinh(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the hyperbolic sine of a function.\n    '''\n    return cmath.sinh(x1/x2), cmath.sin"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\ndef polar_to_rect(p):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = p[0]\n    t = p[1]\n    x = r*cos(t)\n    y = r*sin(t)\n    return (x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = sqrt((x*x)+(y*y))\n    t = atan2(y,x)\n    return (r,t)\ndef rect_to_polar_v2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (sqrt((x*x)+(y*y)), atan2(y,x))\ndef rect_to_polar_v3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (sqrt((x*x)+(y*y)), atan2(y,x))\ndef polar_to_rect_v2(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cos(t)\n    y = r*sin(t)\n    return (x,y)\ndef polar_to_rect_v3(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t),r*sin(t))\ndef rect_to_polar_v4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x))\ndef polar_to_rect_v4(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t))\ndef rect_to_polar_v5(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x), sqrt(x*x+y*y))\ndef polar_to_rect_v5(r,t,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t), s)\ndef rect_to_polar_v6(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x))\ndef polar_to_rect_v6(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t))\ndef rect_to_polar_v7(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x), sqrt(x*x+y*y))\ndef polar_to_rect_v7(r,t,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t), s)\ndef rect_to_polar_v8(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x))\ndef polar_to_rect_v8(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t))\ndef rect_to_polar_v9(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x), sqrt(x*x+y*y))\ndef polar_to_rect_v9(r,t,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t), s)\ndef rect_to_polar_v10(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x))\ndef polar_to_rect_v10(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t))\ndef rect_to_polar_v11(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x), sqrt(x*x+y*y))\ndef polar_to_rect_v11(r,t,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t), s)\ndef rect_to_polar_v12(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x))\ndef polar_to_rect_v12(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t))\ndef rect_to_polar_v13(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x), sqrt(x*x+y*y))\ndef polar_to_rect_v13(r,t,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t), s)\ndef rect_to_polar_v14(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x))\ndef polar_to_rect_v14(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t))\ndef rect_to_polar_v15(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x), sqrt(x*x+y*y))\ndef polar_to_rect_v15(r,t,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t), s)\ndef rect_to_polar_v16(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x))\ndef polar_to_rect_v16(r,t):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t), r*sin(t))\ndef rect_to_polar_v17(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*x+y*y, atan2(y,x), sqrt(x*x+y*y))\ndef polar_to_rect_v17(r,t,s):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r*cos(t)"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex(x,y)\n    theta = cmath.phase(r)\n    return complex(r.real*cos(theta),r.imag*sin(theta))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    polar_rect = x*(2*(1/2*cmath.sqrt((x**2)+(y**2))))\n    rect_polar = polar_rect*(1/2*(1/2*cmath.sqrt((x**2)+(y**2))))\n    return rect_polar\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # x,y = polar_coordinates\n    return (x * y, y * cmath.sqrt(x**2 + y**2))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    real_part = x * cmath.sqrt(1 + y*y)\n    real_part = real_part.real\n    imaginary_part = x * cmath.sqrt(1 + y*y)\n    imaginary_part = imaginary_part.imag\n    return (real_part,imaginary_part)\n    \nx = float(input('enter x value'))\ny = float(input('enter y value'))\nprint(polar_rect(x,y))\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print('The new list is ', newList) \n    return\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = newList\n    l[0], l[len(l)-1] = l[len(l)-1], l[0]\n    print(l)\n    return l\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #if len(newList) < 1:\n    #    return \"List size is zero, no swapping possible\"\n    #    exit()\n    #a = newList.pop(0)\n    #b = newList.pop(len(newList) - 1)\n    #newList.insert(0,a)\n    #newList.append(b)\n    #return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # newList[0],newList[-1]=newList[-1],newList[0]\n    # print(newList)\n    newList[0],newList[-1]=newList[-1],newList[0]\n    # print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length - 1]\n    newList.pop()\n    newList.append(first)\n    newList.append(last)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap adjacent elements in a list.\n    '''\n    newList.sort()\n    for i in range(0,len(newList)-1):\n        newList[i],newList[i+1] = newList[i+1],newList[i]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to swap the two elements at the middle position in a list.\n    '''\n    newList.sort()\n    for i in range(0,len(newList)-1,2):\n        newList[i],newList[i+1] = newList[i+1],newList[i]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    l1 = []\n    for i in newList:\n        if i not in l1:\n            l1.append(i)\n    return l1\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    temp = []\n    for i in newList:\n        if i not in temp:\n            temp.append(i)\n    return temp\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.remove()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.pop()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.pop(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.clear()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.copy()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.count()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.extend()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.index()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.insert()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.pop(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.remove(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.reverse()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=True)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=False)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.remove(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.remove(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.reverse()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=True)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=False)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.reverse()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=False)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.pop(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.pop(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.remove(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.reverse()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=True)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=False)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.remove(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.reverse()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=True)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort(reverse=False)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.remove(2)\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.reverse()\n    \ndef swap_List(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return newList.sort("
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return(comb(n,k))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or n==k:\n        return 1\n    else:\n        return (binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c=1\n    for i in range(n+1):\n        c=c*(i+1)\n        \n    return(c-(k*(k+1))/2)\n    "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a=1\n    for i in range(1,k+1):\n        a=a*i\n    b=1\n    for i in range(1,n-k+1):\n        b=b*i\n    return a/b\n    \nprint(binomial_Coeff(5,4))\nprint(binomial_Coeff(4,2))"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_coeff(n,k):\n        if(k>n-k):\n            k=n-k\n        ans=1\n        for i in range(k):\n            ans*=(n-i)*(i+1)\n        return(ans)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    lst = []\n    res = 0\n    if k<0 or k>n:\n        return None\n    else:\n        for i in range(1,n+1):\n            if i<=k:\n                lst.append(i)\n            else:\n                if i==k:\n                    res = lst[i-1]*(i-1)\n                    lst.pop()\n                    lst.append(res)\n                elif i>k:\n                    res = lst[i-1]*(i-1)\n                    lst.pop()\n                    lst.append(res)\n    return(lst[0])\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k == 0 or n == k): \n        return 1\n    else: \n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #print(binomial_Coeff_recursive(n,k))\n    return binomial_Coeff_recursive(n,k)\n    \ndef binomial_Coeff_recursive(n,k):\n    if k > n:\n        return 0\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff_recursive(n,k+1) + n * binomial_Coeff_recursive(n,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    import math \n    m = int(math.factorial(n)/math.factorial(k)/math.factorial(n-k))\n    return m\n    \nprint(binomial_Coeff(10,5))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    k = k\n    s = 0\n    while k < n:\n        a = a+1\n        k = k+1\n        s = s+a\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to sum the first and second product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < n:\n        a = a+1\n        b = b+1\n        s = s+a\n        s = s+b\n    return s\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = n\n    b = k\n    s = 0\n    while b < "
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return \".\".join(ip.split(\".\")[:-1])\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+$','',ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip.split('.')[0])*(256**3) + int(ip.split('.')[1])*(256**2) + int(ip.split('.')[2])*(256**1) + int(ip.split('.')[3])\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = '^0+'\n    if not re.match(pattern, ip):\n        return ip\n    else:\n        return ip[1:]\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    while True:\n        if(ip.startswith('0')):\n            ip = ip[1:]\n        else:\n            break\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\ndef int_ip(ip):\n    '''\n    Write a function to convert an ip address into integer format.\n    '''\n    return int(ip)\ndef ip_to_binary(ip):\n    '''\n    Write a function to convert an ip address into binary format.\n    '''\n    return int(ip,2)\ndef binary_to_ip(binary):\n    '''\n    Write a function to convert a binary address into decimal format.\n    '''\n    return str(int(binary,2))\ndef decimal_binary(binary):\n    '''\n    Write a function to convert a decimal address into binary format.\n    '''\n    return str(bin(int(binary)))[2:]\ndef decimal_ip(ip):\n    '''\n    Write a function to convert a decimal ip address into ip address.\n    '''\n    return str(int(ip)) + '.' + str(int(ip)) + '.' + str(int(ip)) + '.' + str(int(ip))\ndef is_ip_valid(ip):\n    '''\n    Write a function to check whether a given ip address is valid or not.\n    '''\n    return bool(re.match('^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',ip))\ndef ip_range(start,end):\n    '''\n    Write a function to check whether a given ip address is in ip address range or not.\n    '''\n    return True if start<=int(end) else False\ndef ip_in_network(ip,network):\n    '''\n    Write a function to check whether a given ip address is in network range or not.\n    '''\n    return True if ip_range(ip_to_binary(ip),network) else False\ndef subnet_mask(network):\n    '''\n    Write a function to get subnet mask for a given network.\n    '''\n    return int_ip(decimal_binary(network)[:int(network.split('.')[3])])\ndef number_of_subnets(network):\n    '''\n    Write a function to get the number of subnets in a given network.\n    '''\n    return int(network.split('.')[3])\ndef network_prefix(subnet):\n    '''\n    Write a function to get the network prefix for a given subnet.\n    '''\n    return int(network_prefix(subnet)[:int(network_prefix(subnet).split('.')[3])])\ndef network_address(network):\n    '''\n    Write a function to get the network address for a given subnet.\n    '''\n    return int_ip(network.split('.')[0])\ndef broadcast_address(network):\n    '''\n    Write a function to get the broadcast address for a given subnet.\n    '''\n    return int_ip(network.split('.')[0])+number_of_subnets(network)\ndef ip_range_set(ip_range):\n    '''\n    Write a function to get the ip range set.\n    '''\n    return ip_range.split('-')\ndef ip_range_set_to_ip_range(ip_range_set):\n    '''\n    Write a function to convert ip range set to ip range.\n    '''\n    return ip_range_set[0] + '-' + ip_range_set[1]\ndef ip_range_set_to_ip_range_set(ip_range_set):\n    '''\n    Write a function to convert ip range set to ip range set.\n    '''\n    return set(range(int_ip(ip_range_set[0]),int_ip(ip_range_set[1])+1))\ndef number_of_hosts_in_network(network):\n    '''\n    Write a function to get the number of hosts in a given network.\n    '''\n    return int(number_of_subnets(network))*256+int_ip(network.split('.')[3])\ndef number_of_hosts_in_subnet(subnet):\n    '''\n    Write a function to get the number of hosts in a given subnet.\n    '''\n    return int(number_of_subnets(subnet))*256+int(subnet.split('.')[3])\ndef hosts_in_subnet(subnet):\n    '''\n    Write a function to get the hosts in a given subnet.\n    '''\n    return set(range(int(subnet.split('.')[3])+1,int(subnet.split('.')[3])+256))\ndef hosts_in_network(network):\n    '''\n    Write a function to get the hosts in a given network.\n    '''\n    return set(range(1,int_ip(network.split('.')[3])))\ndef is_host_in_network(host,network):\n    '''\n    Write a function to check whether a given host is in a given network.\n    '''\n    return True if hosts_in_network(network).__contains__(host) else False\ndef is_host_in_subnet(host,subnet):\n    '''\n    Write a function to check whether a given host is in a given subnet.\n    '''\n    return True if hosts_in_subnet(subnet).__contains__(host) else False\ndef is_host_in_network_with_network_number(host,network):\n    '''\n    Write a function to check whether a given host is in a given network with network number.\n    '''\n    return True if hosts_in_network(network).__contains__(host) and int_ip(network.split('.')[3])==int_ip(host) else False\ndef is_host_in_subnet_with_network_number(host,subnet):\n    '''\n    Write a function to check whether a given host is in a given subnet with network number.\n    '''\n    return True if hosts_in_subnet(subnet).__contains__(host) and int_ip(subnet.split('.')[3])==int_ip(host) else False\ndef broadcast_address_in_network(network):\n    '''\n    Write a function to get the broadcast address in a given network.\n    '''\n    return broadcast_address(network)\ndef broadcast_address_in_network_with_network_number(network,network_number):\n    '''\n    Write a function to get the broadcast address in a given network with network number.\n    '''\n    return broadcast_address(network) - int_ip(network.split('.')[3]) + network_number\ndef broadcast_address_in_subnet(subnet):\n    '''\n    Write a function to get the broadcast address in a given subnet.\n    '''\n    return broadcast_address(subnet) - int_ip(subnet.split('.')[3])\ndef broadcast_address_in_subnet_with_subnet_number(subnet,subnet_number):\n    '''\n    Write a function to get the broadcast address in a given subnet with subnet number.\n    '''\n    return broadcast_address(subnet) - int_ip(subnet.split('.')[3]) - subnet_number\ndef hosts_in_range(ip,network):\n    '''\n    Write a function to get the hosts in a given range.\n    '''\n    return set(range(int(ip.split('.')[3])+1,int(ip.split('.')[3])+256)) - hosts_in_network(network)\ndef hosts_in_range_with_network_number(ip,network,network_number):\n    '''\n    Write a function to get the hosts in a given range with network number.\n    '''\n    return set(range(int(ip.split('.')[3])+1,int(ip.split('.')[3])+256)) - hosts_in_network(network) - network_number\ndef hosts_in_range_with_subnet_number(ip,subnet,subnet_number):\n    '''\n    Write a function to get the hosts in a given range with subnet number.\n    '''\n    return set(range(int(ip.split('.')[3])+1,int(ip.split('.')[3])+256)) - hosts_in_subnet(subnet) "
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return str(int(re.sub('^0+','',ip)))\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(len(ip) == 0):\n        return('')\n    while(ip[0] == '0'):\n        ip = ip[1:]\n    return(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip)>2:\n        for i in range(1,len(ip)-1):\n            if ip[i]==\"0\":\n                if ip[i+1]==\".\":\n                    ip=ip[i+2:]\n                else:\n                    ip=ip[i+1:]\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    print(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    odd_num = 0\n    even_num = 0\n    for i in list1:\n        if i%2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even_num.append(list1[i])\n        else:\n            odd_num.append(list1[i])\n    return even_num[0] - odd_num[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0]-1\n    for i in range(1, len(list1)):\n        if i%2 == 0:\n            if list1[i]!= list1[i-1]:\n                diff = list1[i] - list1[i-1]\n                break\n        else:\n            if list1[i]!= list1[i-1]:\n                diff = list1[i] - list1[i-1]\n                break\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)<2:\n        return 0\n    else:\n        if list1[0]%2==0:\n            return abs(list1[0]-list1[1])\n        else:\n            return abs(list1[0]-list1[1])"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n            break\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            first_odd = list1[i]\n            break\n    return first_even - first_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            sum1 = sum1 + list1[i]\n        else:\n            list2.append(list1[i])\n    for j in range(len(list2)):\n        sum2 = sum2 + list2[j]\n    return sum2-sum1\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n    for x in list1:\n        if x % 2 == 0:\n            even += x\n        else:\n            odd += x\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n    for i in range(len(list1)):\n        if(i%2 == 0):\n            even = even + list1[i]\n        else:\n            odd = odd + list1[i]\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even_odd.append(list1[i])\n        else:\n            even_odd.append(list1[i])\n    return (even_odd[0]-even_odd[1])\nprint(diff_even_odd([10, 20, 30, 40, 50])) # Output: 10\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == 0 or len(str2) == 0 :\n        return -1\n    if len(str1)!= len(str2) :\n        return -1\n    \n    str1 = list(str1)\n    str2 = list(str2)\n    swaps = 0\n    i = 0\n    j = 0\n    while(i < len(str1)) :\n        if str1[i] == str2[j] :\n            i += 1\n            j += 1\n        elif str1[i]!= str2[j] :\n            if j!= 0 :\n                j = j - 1\n            else :\n                str1[i], str2[j] = str2[j], str1[i]\n                i += 1\n                j += 1\n                swaps += 1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Convert input strings to integer arrays\n    str1 = list(str1)\n    str2 = list(str2)\n    #initializing counters\n    string_length = len(str1)\n    counter1 = 0\n    counter2 = 0\n    #converting string into an array of 0's and 1's\n    for i in range(string_length) :\n        if str1[i] == '0' :\n            str1[i] = '1'\n            break\n        elif str1[i] == '1' :\n            str1[i] = '0'\n            break\n    for j in range(string_length) :\n        if str2[j] == '0' :\n            str2[j] = '1'\n            break\n        elif str2[j] == '1' :\n            str2[j] = '0'\n            break\n    #pushing 0's and 1's\n    for i in range(string_length) :\n        if str1[i] == '1' :\n            str1.append('0')\n            break\n        elif str1[i] == '0' :\n            str1.append('1')\n            break\n    for i in range(string_length) :\n        if str2[i] == '1' :\n            str2.append('0')\n            break\n        elif str2[i] == '0' :\n            str2.append('1')\n            break\n    #Now we can use a 'dictionary' to store the number of 1's in each position\n    dictionary = {}\n    for i in range(string_length) :\n        if str1[i] == '0' :\n            dictionary[i] = '1'\n            counter1 += 1\n            break\n        elif str1[i] == '1' :\n            dictionary[i] = '1'\n            counter1 += 1\n            break\n    for i in range(string_length) :\n        if str2[i] == '0' :\n            dictionary[i] = '1'\n            counter2 += 1\n            break\n        elif str2[i] == '1' :\n            dictionary[i] = '1'\n            counter2 += 1\n            break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str1[i] == '1' :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n        else :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str2[i] == '1' :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n        else :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str1[i] == '1' :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n        else :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str2[i] == '1' :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n        else :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str1[i] == '1' :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n        else :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str2[i] == '1' :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n        else :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str1[i] == '1' :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n        else :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str2[i] == '1' :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n        else :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str1[i] == '1' :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n        else :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str2[i] == '1' :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n        else :\n            if str2[i] in dictionary :\n                dictionary[str2[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if str1[i] == '1' :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n        else :\n            if str1[i] in dictionary :\n                dictionary[str1[i]] += 1\n                break\n    #Now, we need to find the position of 1's in str1 and str2 such that it is at the first index and so on\n    #The first index will be the index of the last '0'\n    for i in range(string_length) :\n        if st"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            x = str1.find(str2[i])\n            y = str2.find(str1[i])\n            if x!= y:\n                swaps += 1\n                str1 = str1[:x] + str1[x+1:]\n                str2 = str2[:y] + str2[y+1:]\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            count += 1\n            i = len(str1)-1\n            while str1[i]!= str2[-1] :\n                i -= 1\n            str1 = str1[:i] + str1[i+1:] + str1[i]\n    return count \ndef min_swaps2(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = ''.join(str1[i] if str2[i]!= str1[-1] else '0' for i in range(len(str1))) + str1[-1]\n            count += 1\n    return count \ndef min_swaps3(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1,str2 = str1[::-1],str2[::-1]\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = ''.join(str1[i] if str2[i]!= str1[-1] else '0' for i in range(len(str1))) + str1[-1]\n            count += 1\n    return count \ndef min_swaps4(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1,str2 = str1[::-1],str2[::-1]\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps5(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1,str2 = str1[::-1],str2[::-1]\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps6(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1,str2 = str1[::-1],str2[::-1]\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps7(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps8(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps9(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps10(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps11(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps12(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps13(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps14(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps15(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    while str1!= str2 :\n        if str1[-1] == str2[-1] :\n            str2 = str2[:-1]\n        else :\n            str1 = str1[:-1] + str1[-1]\n            count += 1\n    return count \ndef min_swaps16(str1,str2) : \n    '"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    num_of_swaps=0\n    counter=0\n    for i in range(0,len(str1)):\n        if str1[i]!=str2[i]:\n            num_of_swaps+=1\n            counter+=1\n    return counter,num_of_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swap = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            swap += 1\n    return swap\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    str2 = list(str2)\n    count = 0\n    for i in range(n) :\n        if str1[i] == str2[i] :\n            count = count\n        elif str1[i] == '0' and str2[i] == '1' :\n            count = count + 1\n        elif str1[i] == '1' and str2[i] == '0' :\n            count = count + 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    length = len(str1)\n    count = 0\n    for i in range(0,length) :\n        if str1[i]!= str2[i] :\n            temp = str1[i]\n            str1 = str1[:i]+str2[i]+str1[i+1:]\n            str2 = str2[:i]+temp+str2[i+1:]\n            count += 1\n    print(str1,str2)\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = ''.join(sorted(str1))\n    s2 = ''.join(sorted(str2))\n    return sum([i for i,j in zip(s1,s2) if i!=j])\n    \n    \ndef min_Swaps_l(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = ''.join(sorted(str1))\n    s2 = ''.join(sorted(str2))\n    return min(sum([i!=j for i,j in zip(s1,s2)]),sum([i!=j for i,j in zip(s2,s1)]))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for element in tuple_list:\n        result = result + sys.getsizeof(element)\n    return result\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for index in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[index])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sizes = []\n    for tuple in tuple_list:\n        sizes.append(sys.getsizeof(tuple))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_list = []\n    for i in range(len(tuple_list)):\n        size_list.append(sys.getsizeof(tuple_list[i]))\n    return size_list\n    \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \ndef first_ele(tuple_list):\n    '''\n    Write a function that finds the first element in the tuple and returns it.\n    '''\n    return tuple_list[0]\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    list_length=len(tuple_list)\n    result = 0\n    for i in range(list_length):\n        result += sys.getsizeof(tuple_list[i])\n    return result\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    i = 0\n    while(i < len(tuple_list)):\n        i+=1\n    return i\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[-1] > arr2[-1]:\n        arr1, arr2 = arr2, arr1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # if arr1 is empty then return arr2's kth element\n    if not arr1:\n        return arr2[k - 1]\n    # if arr2 is empty then return arr1's kth element\n    if not arr2:\n        return arr1[k - 1]\n    # if both arrays are empty then the kth element is None\n    if not arr1 and not arr2:\n        return None\n    # if k is greater than the smaller array\n    if k > len(arr1) + len(arr2):\n        # return kth element from the biggest array\n        return find_kth(arr1, arr2, k - len(arr1) - len(arr2))\n    # return the kth element from the leftmost array\n    if k <= len(arr1):\n        return arr1[k - 1]\n    # if k is greater than the smaller array\n    if k > len(arr1) + len(arr2):\n        # return kth element from the rightmost array\n        return find_kth(arr1, arr2, k - len(arr1) - len(arr2) - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx_arr1 = binary_search(arr1, 0, len(arr1)-1, k)\n    idx_arr2 = binary_search(arr2, 0, len(arr2)-1, k)\n    return sorted(arr1)[idx_arr1] + sorted(arr2)[idx_arr2]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k<=0 or len(arr1)<k or len(arr2)<k:\n        return None\n    i,j=0,0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return arr1[i-1] if i==len(arr1) else arr2[j-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if arr1[0] > arr2[0]:\n        return find_kth(arr2, arr1, k)\n    else:\n        return find_kth(arr1, arr2, k)"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n    if len(arr1) == 1 and len(arr2) == 1:\n        if arr1[0] == k:\n            return arr2[0]\n        if arr2[0] == k:\n            return arr1[0]\n        if k < arr1[0] or k < arr2[0]:\n            return None\n        if k > arr1[0] and k > arr2[0]:\n            return None\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1, idx2 = 0, 0\n    while idx1 < len(arr1) and idx2 < len(arr2):\n        if arr1[idx1] < arr2[idx2]:\n            idx1 += 1\n        else:\n            idx2 += 1\n    if idx1 == len(arr1):\n        return arr2[idx2 + k - 1]\n    return arr1[idx1 + k - 1]\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #number = int(input(\"Enter the number: \"))\n    #start from 1 \n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit**3\n        temp = temp // 10\n    #print(sum)\n    if number == sum:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    for num in str(number):\n        total += int(num) ** len(str(number))\n    return True if total == number else False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    n = number\n    while n > 0:\n        dig = n % 10\n        result = result * dig + result\n        n = n // 10\n    if result == number:\n        print(\"{} is an armstrong number\".format(number))\n    else:\n        print(\"{} is not an armstrong number\".format(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp!= 0:\n        temp = temp // 10\n        sum = sum + (temp ** 3)\n    if sum == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    number=str(number)\n    for i in number:\n        sum+=int(i)**3\n    return sum == int(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    res = 0\n    while number > 0:\n        digit = number % 10\n        res = res * digit\n        number = number // 10\n    return res == number\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = abs(number)\n    while n!= 0:\n        digit = n % 10\n        sum += digit ** 3\n        n //= 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    num=number\n    while(num>0):\n        dig=num%10\n        sum=sum+(dig**3)\n        num=num//10\n    return (number==sum)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n_str = str(number)\n    num_len = len(n_str)\n    product = 0\n    for i in range(num_len):\n        product += int(n_str[i])**num_len\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = number\n    while n > 0:\n        sum += n%10\n        n = n // 10\n    return True if number == sum**3 else False\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    total += number\n    for i in range(1,number+1):\n        total += i\n    average = total/number\n    print(f'The sum of first {number} natural numbers is {total}.')\n    print(f'The average of first {number} natural numbers is {average}.')\n    print(f'The sum of first {number} natural numbers is {total} and the average of first {number} natural numbers is {average}.')\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum,average\n    "
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        print(0)\n        print(0.0)\n        return 0\n    else:\n        sum = 0\n        for i in range(1,number + 1):\n            sum = sum + i\n        average = sum / number\n        print(sum)\n        print(average)\n    \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    return sum / number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for x in range(number + 1):\n        sum = sum + x\n    print(sum)\n    average = sum/number\n    print(average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    assert number > 0, \"Input number should be more than zero\"\n    s = 0\n    a = 0\n    for i in range(1, number+1):\n        s += i\n        a += i/number\n    return s, a\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    n = 0\n    while n < number:\n        sum += n\n        n += 1\n    average = sum / n\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    return sum(range(1, number+1)) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    avg = 0\n    while n > 0:\n        sum += n\n        n -= 1\n        avg = sum / n\n    print(f'Sum of {n} natural numbers: {sum}')\n    print(f'Average of {n} natural numbers: {avg}')\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) : \n        print(\"The given number is even\") \n    else : \n        print(\"The given number is odd\") \n        "
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0):\n        print(n,\" is even\")\n    else:\n        print(n,\" is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #pass\n    if n%2==0:\n        print(f\"the number {n} is even\")\n    else:\n        print(f\"the number {n} is odd\")\ndef is_Odd(n) :\n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    #pass\n    if n%2==0:\n        print(f\"the number {n} is even\")\n    else:\n        print(f\"the number {n} is odd\")\ndef is_Prime(n) :\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n>1:\n        for i in range(2,n):\n            if n%i==0:\n                print(f\"the number {n} is not prime\")\n                break\n        else:\n            print(f\"the number {n} is prime\")\n    else:\n        print(f\"the number {n} is not prime\")\ndef is_Prime2(n) :\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    import math\n    if n<2:\n        return False\n    for i in range(2,math.ceil(math.sqrt(n))):\n        if n%i==0:\n            return False\n    return True\ndef is_Prime3(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_Prime4(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime5(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime6(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime7(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime8(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime9(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime10(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime11(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime12(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime13(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime14(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime15(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime16(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime17(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime18(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime19(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime20(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime21(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    #pass\n    if n<2:\n        return False\n    for i in range(2,int(n/2)):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_Prime22(n):\n    '''\n    Write a python function to check whether the given number is prime or not."
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if (n % 2) == 1 : \n        return True\n    else : \n        return False\n    \ndef is_MultipleOfFive(n) : \n    '''\n    Write a python function to check whether the given number is multiple of five or not.\n    '''\n    if n % 5 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_MultipleOfTen(n) : \n    '''\n    Write a python function to check whether the given number is multiple of ten or not.\n    '''\n    if n % 10 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy7(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 7 or not.\n    '''\n    if n % 7 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy9(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 9 or not.\n    '''\n    if n % 9 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy11(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 11 or not.\n    '''\n    if n % 11 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy13(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 13 or not.\n    '''\n    if n % 13 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy17(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 17 or not.\n    '''\n    if n % 17 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy19(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 19 or not.\n    '''\n    if n % 19 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy23(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 23 or not.\n    '''\n    if n % 23 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy29(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 29 or not.\n    '''\n    if n % 29 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy31(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 31 or not.\n    '''\n    if n % 31 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy37(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 37 or not.\n    '''\n    if n % 37 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy39(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 39 or not.\n    '''\n    if n % 39 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy41(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 41 or not.\n    '''\n    if n % 41 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy43(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 43 or not.\n    '''\n    if n % 43 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy47(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 47 or not.\n    '''\n    if n % 47 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy53(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 53 or not.\n    '''\n    if n % 53 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy59(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 59 or not.\n    '''\n    if n % 59 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy61(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 61 or not.\n    '''\n    if n % 61 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy67(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 67 or not.\n    '''\n    if n % 67 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy69(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 69 or not.\n    '''\n    if n % 69 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy71(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 71 or not.\n    '''\n    if n % 71 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy73(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 73 or not.\n    '''\n    if n % 73 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy79(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 79 or not.\n    '''\n    if n % 79 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy83(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 83 or not.\n    '''\n    if n % 83 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy89(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 89 or not.\n    '''\n    if n % 89 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy91(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 91 or not.\n    '''\n    if n % 91 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy97(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 97 or not.\n    '''\n    if n % 97 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy99(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 99 or not.\n    '''\n    if n % 99 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_DivisibleBy101(n) : "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return ''\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    x = set(str1)\n    for i in x:\n        if str1.count(i) > 1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # using dictionary\n    # for key in str1:\n    #     if str1.count(key) == 2:\n    #         return(key)\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # 1\n    # str = input()\n    # dict = {}\n    # for i in range(len(str)):\n    #     if str[i] in dict:\n    #         return str[i]\n    #     else:\n    #         dict[str[i]] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return 'None'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 is None:\n        return None\n    count = 0\n    for i in range(0,len(str1)):\n        if str1[i] in str1[i+1:]:\n            count += 1\n    if count == 0:\n        return None\n    return str1[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(str1)\n    n=len(str1)\n    for i in range(0,n):\n        if str1.find(str1[i])!= -1:\n            return i\n    return -1\n    \ndef print_first_repeated_character(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(str1)\n    n=len(str1)\n    for i in range(0,n):\n        if str1.find(str1[i])!= -1:\n            return i\n    return -1\n    \ndef print_first_repeated_character_custom(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(str1)\n    n=len(str1)\n    i=0\n    while i < n:\n        if str1.find(str1[i])!= -1:\n            return i\n        i+=1\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = str1.lower()\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i, j in d.items():\n        if j > 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    \n    # initializing the dictionary\n    d = {}\n    # checking for repeating characters\n    for i in str1:\n        # if the character is present in the dictionary\n        if i in d:\n            # update the count of the character\n            d[i] = d[i]+1\n        # if the character is not in the dictionary\n        else:\n            # add the character and its count\n            d[i] = 1\n        \n    # if the length of the dictionary is more than 1\n    if len(d) > 1:\n        # return the first character\n        return d.keys()[0]\n    # if the dictionary is empty\n    else:\n        # return None\n        return None\n    \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = []\n    for i in range(0,len(str1)):\n        if str1[i] in lst:\n            return str1[i]\n        lst.append(str1[i])\n    return -1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    assert n >= 0, 'n must be a positive integer'\n    if n == 0:\n        return [0]\n    ludics = get_ludics(n)\n    ludics = sorted(ludics)\n    return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def luc(n):\n        if n<=0: return []\n        if n==1: return [1]\n        return luc(n-1) + luc(n-2) + [n]\n    return luc(n)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(n+1):\n        if i == 1:\n            ludics.append(i)\n        elif i%2 == 0:\n            ludics.append(i)\n        else:\n            j = i\n            while j <= n:\n                ludics.append(j)\n                j += i\n    return ludics\n    # #\n    # for i in range(2, n+1):\n    #     if i == 1:\n    #         ludics.append(i)\n    #     elif i%2 == 0:\n    #         ludics.append(i)\n    #     else:\n    #         j = i\n    #         while j <= n:\n    #             ludics.append(j)\n    #             j += i\n    # return ludics\n    # #\n    # # #\n    # # for i in range(2, n+1):\n    # #     if i == 1:\n    # #         ludics.append(i)\n    # #     else:\n    # #         j = i\n    # #         while j <= n:\n    # #             ludics.append(j)\n    # #             j += i\n    # # return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        if (i%7 == 0) or (i%5 == 0):\n            ludic.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    def get_lucids_list():\n        '''\n        Returns the list of all lucid numbers smaller than n.\n        '''\n        return [x for x in range(1, n + 1) if is_lucid(x)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(1, n) if is_ludic(x)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [(i, i*2) for i in range(2, n + 1) if is_lucid(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = 0\n    while l <= n:\n        l = 3*l + 1\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    if n == 1:\n        return []\n    for i in range(1, n+1):\n        x = i\n        while x > 0:\n            if x % 10 == 4:\n                ludics.append(i)\n                break\n            else:\n                x = x // 10\n    return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    i = len(words) - 1\n    j = len(words)\n    while i >= 0:\n        words[j - i] = words[i]\n        i -= 1\n    return \" \".join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    s = \" \".join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word_list = s.split()\n    for i in range(len(word_list)):\n        word_list[i] = word_list[i][::-1]\n    \n    return''.join(word_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_str = ''\n    for i in s.split():\n        new_str = i +'' + new_str\n    return new_str.strip()\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # reverse the order of the words\n    words = s.split(' ')\n    # reverse the order of the words\n    return''.join(list(reversed(words)))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    temp = s.split(' ')\n    temp = list(reversed(temp))\n    return''.join(temp)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split_string = s.split()\n    # split_string = ''.join(split_string[::-1])\n    # print(split_string)\n    # return split_string\n    # \n    # '''\n    # Solution - 2: \n    # '''\n    # s = s.split()\n    # s = s[::-1]\n    # s =''.join(s)\n    # return s\n    \n    '''\n    Solution - 3: \n    '''\n    # s = s.split(' ')\n    # s =''.join(s[::-1])\n    # return s\n    \n    '''\n    Solution - 4: \n    '''\n    # return''.join(s.split()[::-1])\n    \n    '''\n    Solution - 5:\n    '''\n    return''.join(s.split()[::-1])\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word = ''\n    for i in range(len(s)):\n        if s[i]!='':\n            word += s[i]\n        else:\n            print(word)\n            word = ''\n    print(word)\n    \n    return word\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    count = 0\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef prime_number_in_a_list(nums):\n    '''\n    Write a function to get all prime numbers in the given list.\n    '''\n    prime_nums = []\n    for i in range(2, nums):\n        if prime_num(i):\n            prime_nums.append(i)\n    return prime_nums\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # If the number is not even, it is not prime\n    if num % 2 == 0:\n        return False\n    # if the number is even and greater than 2\n    if num > 2:\n        # find the factor, which must be even\n        for i in range(3, int(num**0.5) + 1, 2):\n            # if a factor is found, then it is not prime\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num <= 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_num2(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_num3(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    for i in range(3, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_num4(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    for i in range(3, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_num5(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    for i in range(3, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_num6(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num7(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num8(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num9(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num10(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num11(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num12(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num13(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num14(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num15(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num16(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num17(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num18(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num19(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 2!= 0:\n        return True\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_num20(num):\n    '''\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    count = 2\n    while count < num:\n        if num%count == 0:\n            return False\n        count += 1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for divisor in range(2, num):\n        if num % divisor == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = degree\n    radian = degree*180/math.pi\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = degree\n    radian = degree*180/math.pi\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree*math.pi/180\n    return radian\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degre"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180.0 / math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.pi / 180 * degree\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef cartesian_to_spherical(x, y, z):\n    '''\n    Write a function to convert cartesian to spherical coordinates.\n    '''\n    r = math.sqrt(x**2 + y**2 + z**2)\n    theta = math.acos(z/r)\n    phi = math.acos(x/math.sqrt(x**2 + y**2 + z**2))\n    return (r, theta, phi)\ndef spherical_to_cartesian(r, theta, phi):\n    '''\n    Write a function to convert spherical to cartesian coordinates.\n    '''\n    x = r*math.sin(theta)*math.cos(phi)\n    y = r*math.sin(theta)*math.sin(phi)\n    z = r*math.cos(theta)\n    return (x, y, z)\ndef rotate_point(point, angle, axis):\n    '''\n    Write a function to rotate a point about an axis by an angle.\n    '''\n    x = point[0]\n    y = point[1]\n    z = point[2]\n    new_x = x*math.cos(angle)-z*math.sin(angle)\n    new_y = y*math.cos(angle)+x*math.sin(angle)\n    new_z = z*math.cos(angle)+y*math.sin(angle)\n    return (new_x, new_y, new_z)\ndef rotate_vector(vector, angle, axis):\n    '''\n    Write a function to rotate a vector about an axis by an angle.\n    '''\n    x = vector[0]\n    y = vector[1]\n    z = vector[2]\n    x_prime = x*math.cos(angle)-z*math.sin(angle)\n    y_prime = y*math.cos(angle)+x*math.sin(angle)\n    z_prime = z*math.cos(angle)+y*math.sin(angle)\n    return (x_prime, y_prime, z_prime)\ndef normalize(vector):\n    '''\n    Write a function to normalize a vector.\n    '''\n    return (vector[0]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2), \\\n            vector[1]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2), \\\n            vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))\ndef cross_product(vector1, vector2):\n    '''\n    Write a function to compute cross product of two vectors.\n    '''\n    vector1 = normalize(vector1)\n    vector2 = normalize(vector2)\n    return (vector1[1]*vector2[2]-vector1[2]*vector2[1], \\\n            vector1[2]*vector2[0]-vector1[0]*vector2[2], \\\n            vector1[0]*vector2[1]-vector1[1]*vector2[0])\ndef cross_product_multiply(vector1, vector2):\n    '''\n    Write a function to compute cross product of two vectors.\n    '''\n    vector1 = normalize(vector1)\n    vector2 = normalize(vector2)\n    return (vector1[0]*vector2[1]-vector1[1]*vector2[0], \\\n            vector1[1]*vector2[0]-vector1[0]*vector2[1], \\\n            vector1[0]*vector2[2]-vector1[2]*vector2[0])\ndef dot_product(vector1, vector2):\n    '''\n    Write a function to compute dot product of two vectors.\n    '''\n    return (vector1[0]*vector2[0]+vector1[1]*vector2[1]+vector1[2]*vector2[2])\ndef multiply_vector_by_scalar(vector, scalar):\n    '''\n    Write a function to multiply a vector by a scalar.\n    '''\n    return (scalar*vector[0], scalar*vector[1], scalar*vector[2])\ndef multiply_vector_by_vector(vector1, vector2):\n    '''\n    Write a function to multiply two vectors.\n    '''\n    return (vector1[0]*vector2[0]+vector1[1]*vector2[1]+vector1[2]*vector2[2], \\\n            vector1[0]*vector2[1]+vector1[1]*vector2[0]+vector1[2]*vector2[2], \\\n            vector1[0]*vector2[2]+vector1[2]*vector2[0]+vector1[1]*vector2[2])\ndef dot_product_with_scalar(scalar, vector):\n    '''\n    Write a function to compute dot product of a vector by a scalar.\n    '''\n    return (scalar*vector[0], scalar*vector[1], scalar*vector[2])\ndef dot_product_with_vector(vector1, vector2):\n    '''\n    Write a function to compute dot product of two vectors.\n    '''\n    return (vector1[0]*vector2[0]+vector1[1]*vector2[1]+vector1[2]*vector2[2])\ndef normalize_vector(vector):\n    '''\n    Write a function to normalize a vector.\n    '''\n    return (vector[0]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2), \\\n            vector[1]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2), \\\n            vector[2]/math.sqrt(vector[0]**2 + vector[1]**2 + vector[2]**2))\ndef multiply_vectors(vector1, vector2):\n    '''\n    Write a function to multiply two vectors.\n    '''\n    return (vector1[0]*vector2[0]+vector1[1]*vector2[1]+vector1[2]*vector2[2], \\\n            vector1[0]*vector2[1]+vector1[1]*vector2[0]+vector1[2]*vector2[2], \\\n            vector1[0]*vector2[2]+vector1[2]*vector2[0]+vector1[1]*vector2[2])\ndef scalar_vector_product(vector1, vector2):\n    '''\n    Write a function to compute dot product of a vector by a scalar.\n    '''\n    return (vector1[0]*vector2[0]+vector1[1]*vector2[1]+vector1[2]*vector2[2])\ndef vector_to_vector(vector):\n    '''\n    Write a function to convert a vector to a vector.\n    '''\n    return (vector[0], vector[1], vector[2])\ndef get_vector_of_two_points(point1, point2):\n    '''\n    Write a function to compute a vector from two points.\n    '''\n    return (point1[0]-point2[0], point1[1]-point2[1], point1[2]-point2[2])\ndef get_vector_of_three_points(point1, point2, point3):\n    '''\n    Write a function to compute a vector from three points.\n    '''\n    return (point1[0]-point2[0], point1[1]-point2[1], point1[2]-point2[2], \\\n            point2[0]-point3[0], point2[1]-point3[1], point2[2]-point3[2], \\\n            point3[0]-point1[0], point3[1]-point1[1], point3[2]-point1[2])\ndef get_vector_of_four_points(point1, point2, point3, point4):\n    '''\n    Write a function to compute a vector from four points.\n    '''\n    return (point1[0]-point2[0], point1[1]-point2[1], point1"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # match_object = re.match(pattern, text)\n    match_object = re.search(pattern, text)\n    if match_object:\n        return match_object.group(), match_object.start(), match_object.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #find the pattern in the text\n    #if the pattern doesn't exist in the text\n    #return -1, 0, 0\n    pattern_match = re.search(pattern, text)\n    if pattern_match:\n        return pattern_match.group(0), pattern_match.start(0), pattern_match.end(0)\n    else:\n        return -1, 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    match = p.search(text)\n    return match.group(), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if re.match(pattern, text) is None:\n        return \"\"\n    else:\n        return re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    return pattern.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # use a regular expression to find the start index and the end index of the matching string\n    pattern = re.compile(pattern)\n    start = re.search(pattern,text)\n    if start:\n        return text[start.start():start.end()],start.start(),start.end()\n    else:\n        return \"\",0,0\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = []\n    start_index = 0\n    end_index = 0\n    if pattern == r'\\w+':\n        return re.findall(pattern,text)\n    else:\n        for i in range(len(text)):\n            if re.match(pattern,text[i:]):\n                end_index = i\n                start_index = i\n                break\n            else:\n                end_index = 0\n    return text[start_index:end_index], start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    return matches\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # n1 = n2 = 1\n    # count = 0\n    # i = 0\n    # while(i<n):\n    #     n1 = n2\n    #     n2 = n1 + n2\n    #     count += 1\n    #     i += 1\n    # return count\n    n1 = 1\n    n2 = 1\n    i = 0\n    count = 0\n    while(i<n):\n        n1 = n2\n        n2 = n1 + n2\n        count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return bell(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_n = 1\n    fact_n = 1\n    for i in range(1, n+1):\n        bell_n *= (i+1)\n        fact_n *= i\n    return bell_n/fact_n\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n        "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(1, n+1):\n        bell += int((i*(i+1))/2)\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    # general case\n    # 1st n-th bell number = 1 + 1 + 2 + 3 + 5 + 7 + 11 +...\n    # kth bell number = k*(k+1)\n    # a= 1 + 1 + 2 + 3 + 5 + 7 + 11 + 13 + 17 + 23 + 29 +...\n    # b = k*(k+1)\n    a = 1\n    b = 2\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b\n    "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #code here\n    i=1\n    l=[]\n    while len(l)<=n:\n        l.append(i)\n        i*=2\n    \n    return l[n-1]\n    "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    sum = n*bell_Number(n-1) + bell_Number(n-2)\n    return sum\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L.index(L[int(len(L) - 1) - int(L"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list1[:L-1] + list1[L:]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return False\n    if L < 0 or L > len(list1) - 1:\n        return False\n    del list1[L]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(0, len(list1)):\n        if i!= L:\n            print(list1[i])\n    return list1[:L] + list1[L + 1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    #SOLUTION - 1\n    # new_list = []\n    # for i in range(0,len(list1)):\n    #     if i!= L:\n    #         new_list.append(list1[i])\n    # return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    if len(list1)>L:\n        k = k+1\n    i = 0\n    n = 0\n    if len(list1) == 1:\n        return -1\n    else:\n        while i < len(list1) and n <= k:\n            if i == k:\n                n = n + 1\n            else:\n                list1[i] = list1[i+1]\n                i = i + 2\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    elif k <= 0:\n        return L\n    else:\n        list1[k - 1] = list1[-1]\n        list1.pop()\n        return remove_kth_element(list1, L)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # TODO: Write your solution here\n    if N == 1:\n        return test_list[0]\n    if N == 2:\n        return max(test_list[0], test_list[1])\n    if N == 3:\n        return max(max(test_list[0], test_list[1]), max(test_list[2], test_list[1]))\n    # if N == 4:\n    #     return max(max(max(test_list[0], test_list[1]), test_list[2]), max(test_list[3], test_list[1]))\n    # if N == 5:\n    #     return max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), max(test_list[4], test_list[1]))\n    # if N == 6:\n    #     return max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), max(test_list[5], test_list[1]))\n    # if N == 7:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]))\n    # if N == 8:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7])\n    # if N == 9:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8])\n    # if N == 10:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9])\n    # if N == 11:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10])\n    # if N == 12:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11])\n    # if N == 13:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12])\n    # if N == 14:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13])\n    # if N == 15:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14])\n    # if N == 16:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14], test_list[15])\n    # if N == 17:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14], test_list[15], test_list[16])\n    # if N == 18:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14], test_list[15], test_list[16], test_list[17]))\n    # if N == 19:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14], test_list[15], test_list[16], test_list[17], test_list[18]))\n    # if N == 20:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], test_list[13], test_list[14], test_list[15], test_list[16], test_list[17], test_list[18], test_list[19]))\n    # if N == 21:\n    #     return max(max(max(max(max(max(test_list[0], test_list[1]), test_list[2]), test_list[3]), test_list[4]), test_list[5]), max(test_list[6], test_list[1]), test_list[7], test_list[8], test_list[9], test_list[10], test_list[11], test_list[12], tes"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # define a function which gives the max of then'th column.\n    def max_of_nth_column(matrix, n):\n        max = 0\n        for i in range(len(matrix)):\n            if matrix[i][n-1] > max:\n                max = matrix[i][n-1]\n        return max\n    # call the function with the test_list and N and get the result\n    return max_of_nth_column(test_list, N)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n_rows = len(test_list)\n    n_cols = len(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for col in range(len(test_list)):\n        max_col.append(max(test_list[col]))\n    return max_col[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    import math\n    max = -math.inf\n    for row in test_list:\n        max = max(max, max_of_nth_column(row, N))\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = 0\n    for index, list in enumerate(test_list):\n        if index == N - 1:\n            return max(list)\n        else:\n            result = max(result, max(list))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = -1\n    for i in range(len(test_list)):\n        if max_value < test_list[i][N - 1]:\n            max_value = test_list[i][N - 1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    l = len(test_list)\n    for i in range(l):\n        for j in range(l):\n            if i == N - 1:\n                return max(test_list[i][j], test_list[i][j+1])\n            elif j == N - 1:\n                return max(test_list[i][j], test_list[i+1][j])\n            elif i == N - 1:\n                return max(test_list[i][j], test_list[i][j+1])\n            else:\n                return max(test_list[i][j], test_list[i+1][j], test_list[i][j+1])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        if max < test_list[i][N - 1]:\n            max = test_list[i][N - 1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list.sort(reverse=True)\n    return test_list[N-1]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    merged_list.append([])\n    merged_list.append([])\n    for i in range(len(lst)):\n        merged_list[0].append(lst[i][0])\n        merged_list[1].append(lst[i][1])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            lst[i] = merge(lst[i])\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge(lst):  \n        lst = sorted(lst)  \n        return lst[0],lst[1]  \n    if len(lst) <= 1:  \n        return lst  \n    middle = len(lst)//2  \n    left, right = merge(lst[:middle]), merge(lst[middle:])  \n    return merge(left, right)  \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append([lst[i][0], lst[i][1]])\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1]])\n    return result\n    \n    \n    \ndef unique(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1],i[2],i[3]])\n    return result\n    \n    \n    \ndef unique_exclude_repeats(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1],i[2],i[3]])\n    result = list(set(result))\n    return result\n    \n    \n    \ndef find_lsts(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1],i[2],i[3]])\n    result = list(set(result))\n    return result\n    \n    \n    \ndef subsets(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        subsets(lst1)\n    return result\n    \n    \n    \ndef subsets_iterative(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        lst1 = lst[1:]\n        subsets_iterative(lst1)\n    return result\n    \n    \n    \ndef subsets_recursive(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        lst1 = lst[1:]\n        subsets_recursive(lst1)\n    return result\n    \n    \n    \ndef find_index_and_remove_duplicates(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        lst1 = lst[1:]\n        find_index_and_remove_duplicates(lst1)\n    return result\n    \n    \n    \ndef find_index_and_remove_duplicates_iterative(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        lst1 = lst[1:]\n        find_index_and_remove_duplicates_iterative(lst1)\n    return result\n    \n    \n    \ndef find_index_and_remove_duplicates_recursive(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second, third one has the third and the last one has the last one.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        lst1 = lst[1:]\n        find_index_and_remove_duplicates_recursive(lst1)\n    return result\n    \n    \n    \ndef is_empty(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a boolean.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        lst1 = lst[1:]\n        is_empty(lst1)\n    return result\n    \n    \n    \ndef is_empty_iterative(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a boolean.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        lst1 = lst[1:]\n        is_empty_iterative(lst1)\n    return result\n    \n    \n    \ndef is_empty_recursive(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns a boolean.\n    '''\n    result = []\n    lst1 = lst[0]\n    result.append(lst1)\n    lst1.remove(lst1[0])\n    if len(lst1) > 0:\n        result.append(lst1)\n        lst1 = lst[1:]\n        is_empty_recursive(lst1)\n    return result\n    \n    \n    \ndef is_sorted(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has four elements, and returns "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    ans=[]\n    n=len(lst)\n    for i in range(0,n-1):\n        if lst[i]==lst[i+1]:\n            for j in range(0,2):\n                ans.append([lst[i][j]])\n    return ans\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[i[0], i[1]] for i in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i = 0\n    while i < len(lst):\n        lst[i][0], lst[i][1] = lst[i][0], lst[i][1]\n        i += 1\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    sorted_list = []\n    for i in range(0, len(lst)):\n        sorted_list.append([lst[i][0], lst[i][1]])\n    sorted_list.sort(key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #for i in range(len(test_list)):\n        #test_list[i] = i + 1\n    #print(test_list)\n    if len(test_list) == 0:\n        return 0\n    \n    #cummulative_sum = 0\n    #for i in range(len(test_list)):\n        #cummulative_sum += test_list[i]\n    #return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total = total + test_list[i]\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Naive approach:\n    #sum = 0\n    #for x in test_list:\n    #    sum += x\n    #return sum\n    # Using List Comprehension:\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == 0:\n            test_list[i] = test_list[i-1]\n        else:\n            test_list[i] = test_list[i] + test_list[i-1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return ()\n    return (test_list[0] + cummulative_sum(test_list[1:]))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(0, len(test_list)):\n        value = 0\n        for j in range(0, i+1):\n            value += test_list[j]\n        result.append(value)\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for item in test_list:\n        result = item + result\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # make a new list from the given list\n    new_list = []\n    for i in test_list:\n        new_list.append(i)\n    # make a new list from the given list\n    new_list = list(set(new_list))\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # make a new list from the given list\n    new_list = list(set(new_list))\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n    # make a new list from the given list\n    for i in range(len(new_list)):\n        new_list.append(new_list[i])\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # sort the new list\n    new_list.sort()\n    # change the list to a tuple\n    new_list = tuple(new_list)\n    # initialise the new list\n    new_list = []\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for value in test_list:\n        result += value\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        nums[i] = list(nums[i])\n        avg = sum(nums[i])/len(nums[i])\n        averages.append(avg)\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return (sum(nums) / len(nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # nums = (\n    #     (1, 2, 3),\n    #     (4, 5, 6),\n    #     (7, 8, 9)\n    # )\n    # nums_sum = (\n    #     (1 + 4 + 7),\n    #     (2 + 5 + 8),\n    #     (3 + 6 + 9)\n    # )\n    nums_sum = []\n    nums_sum.append((nums[0]))\n    nums_sum.append((nums[1]))\n    nums_sum.append((nums[2]))\n    total = 0\n    for i in nums_sum:\n        total += i\n    for x in range(0, 3):\n        nums_sum[x] = (nums_sum[x]/3)\n    return nums_sum\n    # return nums_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple1 = (1, 2, 3)\n    tuple2 = (4, 5, 6)\n    tuple3 = (7, 8, 9)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    '''\n    def average_tuple(nums):\n    tuple = ((1, 2, 3, 4), (2, 3, 4, 5))\n    first_tuple = (1, 2, 3, 4)\n    second_tuple = (2, 3, 4, 5)\n    average_first_tuple = sum(first_tuple)/len(first_tuple)\n    average_second_tuple = sum(second_tuple)/len(second_tuple)\n    average_tuple = (average_first_tuple, average_second_tuple)\n    return average_tuple\n    '''\n    first_tuple = []\n    for i in range(0, len(nums)):\n        first_tuple.append(sum(nums[i])/len(nums[i]))\n    second_tuple = []\n    for i in range(0, len(nums)):\n        second_tuple.append(sum(nums[i])/len(nums[i]))\n    return (first_tuple, second_tuple)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in range(len(nums)):\n        nums[i] = tuple(nums[i])\n        total.append(sum(nums[i])/len(nums[i]))\n    return tuple(total)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tuple in nums:\n        result.append(round(sum(tuple) / len(tuple), 2))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(sum(nums[i])/len(nums[i]))\n    return new_list\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple lengths are different')\n    if len(test_tup1) == 0:\n        raise ValueError('Tuple lengths are zero')\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup_a, tup_b = test_tup1, test_tup2\n    return tuple(a%b for a, b in zip(tup_a, tup_b))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] % test_tup2[i],)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Convert to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        final = []\n        for i in range(len(test_tup1)):\n            final.append(test_tup1[i] % test_tup2[i])\n        return tuple(final)\n    else:\n        print(\"Please enter a tuple with the same length\")\n        "
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Your code here\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # we can make use of the below example to get answer\n    n = len(steps)\n    # first we need to check if the number of steps\n    # given is more than the jumps required to reach origin\n    if (n - 1) > (d * 2):\n        return -1\n    else:\n        # initialize a dp array of size n * d\n        dp = [0] * (n)\n        # the dp array to store the number of jumps required\n        # to reach the point (0,0) from the origin.\n        dp[0] = 1\n        # find the number of jumps for all the other points\n        for i in range(1, n):\n            # j is used to store the number of jumps required\n            # from point (i, i) to reach the origin.\n            j = dp[i - 1]\n            # k is used to store the number of jumps required\n            # from point (i, i + 1) to reach the origin.\n            k = dp[i - 1]\n            # l is used to store the number of jumps required\n            # from point (i + 1, i) to reach the origin.\n            l = dp[i - 1]\n            # we need to check if the jumps from (i, i) to reach\n            # the origin are more than the number of jumps\n            # required from point (i, i - 1) to reach the origin.\n            # if yes, then update the dp array.\n            if i > 1 and steps[i - 1] + 1 == steps[i]:\n                j += dp[i - 2]\n            # we need to check if the jumps from (i, i + 1) to reach\n            # the origin are more than the number of jumps\n            # required from point (i, i) to reach the origin.\n            # if yes, then update the dp array.\n            if i + 1 < n and steps[i] + 1 == steps[i + 1]:\n                k += dp[i]\n            # we need to check if the jumps from (i + 1, i) to reach\n            # the origin are more than the number of jumps\n            # required from point (i, i) to reach the origin.\n            # if yes, then update the dp array.\n            if i + 1 < n and steps[i + 1] + 1 == steps[i]:\n                l += dp[i + 2]\n            # we need to check if the jumps from (i + 1, i + 1) to reach\n            # the origin are more than the number of jumps\n            # required from point (i, i) to reach the origin.\n            # if yes, then update the dp array.\n            if i + 2 < n and steps[i + 2] + 1 == steps[i + 1]:\n                l += dp[i + 3]\n            # we need to check if the jumps from (i, i + 1) to reach\n            # the origin are more than the number of jumps\n            # required from point (i, i) to reach the origin.\n            # if yes, then update the dp array.\n            if i > 1 and steps[i - 1] + 1 == steps[i]:\n                j += dp[i - 2]\n            # we need to check if the jumps from (i + 1, i + 1) to reach\n            # the origin are more than the number of jumps\n            # required from point (i, i) to reach the origin.\n            # if yes, then update the dp array.\n            if i + 2 < n and steps[i + 2] + 1 == steps[i + 1]:\n                k += dp[i + 3]\n            # update the dp array.\n            dp[i] = max(j, k, l)\n        # if the last point in the steps is 0, then return\n        # the number of jumps required.\n        if steps[n - 1] == 0:\n            return dp[n - 2]\n        else:\n            return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # STEP 1: Check if d is greater than the total steps or not\n    if d > steps:\n        return False\n    \n    # STEP 2: Create a list of d positions, starting from (0,0) and form a matrix of size d*d\n    M = [[0]*d for _ in range(d)]\n    # STEP 3: Fill the first row, coloumn and last element of the matrix with 1\n    for i in range(d):\n        M[i][0] = 1\n    for j in range(d):\n        M[0][j] = 1\n    M[d-1][d-1] = 1\n    \n    # STEP 4: Populate the rest of the matrix elements using the formulas\n    for i in range(1,d):\n        for j in range(1,d):\n            # Check if current position is equal to next position and fill the value\n            if j==d-1:\n                M[i][j] = M[i][j-1] + 1\n            else:\n                M[i][j] = M[i][j-1] + M[i][j+1]\n    \n    # STEP 5: Check if there is a path from origin to destination in the matrix\n    if (M[0][d-1] == M[d-1][0]):\n        return True\n    return False\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from collections import deque\n    # The deque will store the points of the path to be searched. The maximum size of the deque should be the max possible length of the \n    # path.\n    path = deque()\n    path.append((d,0))\n    # The main variable to keep track of the number of jumps required is j.\n    j = 0\n    while path:\n        # Get the current point from the left of the deque.\n        current = path.popleft()\n        # Check if the current point is reached.\n        if current[0] == 0:\n            # If it is, the number of jumps required is j+1.\n            j = j + 1\n            # Break the loop.\n            break\n        # Get the next points from the right of the deque.\n        next = (current[0]-steps, current[1]+steps)\n        # Check if the next points is in the list of points.\n        if next in path:\n            # If it is, the number of jumps required is j+1.\n            j = j + 1\n            # Break the loop.\n            break\n        # If the next points is not in the list of points, add it to the left.\n        path.appendleft(next)\n    # Return the number of jumps required.\n    return j\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if not d:\n        return\n    ans = 0\n    i = 0\n    while i < steps:\n        if i + d < steps:\n            i += d\n        else:\n            i = steps\n        ans += 1\n    return ans\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    if d < 0: return -1\n    if steps == 0: return 1\n    if steps < 0: return -1\n    count = 0\n    # if d > 0 and steps > 0:\n    #     count += min_Jumps(steps-1, d-1)\n    if d > 0 and steps > 0:\n        count += 1 + min_Jumps(steps-1, d-1)\n    if d < 0 and steps > 0:\n        count += 1 + min_Jumps(steps-1, -d)\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    if d < 0:\n        return -1\n    return min_Jumps(steps+1, d-1) if (steps+1) % d!= 0 else min_Jumps(steps+1, d)\n    \ndef j_count(a, d): \n    '''\n    Write a function to count the number of ways to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 1\n    if d < 0:\n        return 0\n    return j_count(a, d-1) + a if (a-1) % d!= 0 else j_count(a, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if d == 0:\n        return 0\n    \n    jumps = 0\n    while(d):\n        d = d//steps\n        jumps += 1\n    \n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==1:\n        return 1\n    \n    min_steps = steps \n    steps = d\n    while steps > 0:\n        steps = steps - 1\n        if steps % d == 0:\n            min_steps = min(min_steps, steps)\n    return min_steps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    jumps = jumps + steps + 1\n    for i in range(0, d):\n        if d - i <= 0:\n            break\n        jumps = jumps + 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d < 0:\n        return -1\n    for i in range(1, steps+1):\n        if abs(d) >= i:\n            return i\n        else:\n            d = d - i\n            \n    return -1\n    \ndef no_of_ways_of_sum(n, k):\n    '''\n    Write a function to find number of ways to split a number into parts, such that the sum of the parts are equal to k.\n    '''\n    if k == 0:\n        return 0\n    if k == n:\n        return 1\n    if k < 0 or n < 0:\n        return -1\n    a = no_of_ways_of_sum(n, k)\n    b = no_of_ways_of_sum(n, k - n)\n    return a + b\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    newlist = []\n    for i in range(len(nums1)):\n        newlist.append(nums1[i]/nums2[i])\n    return newlist\nprint(div_list([1,2,3],[4,5,6]))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list=[]\n    for i,j in zip(nums1,nums2):\n        if i%j==0:\n            div_list.append(i//j)\n        else:\n            div_list.append(0)\n    return div_list\n        \n        \n        \n    \n    \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        return div_list(nums2,nums1)\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    length = len(nums1)\n    result = []\n    for i in range(0,length):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) < len(nums2):\n        return (nums1[:len(nums2)] + nums1[len(nums1):] + nums2[:len(nums1)] + nums2[len(nums2):])\n    else:\n        return (nums1[:len(nums2)] + nums1[len(nums1):] + nums2[:len(nums1)] + nums2[len(nums2):])\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # method 1\n    return [x / y for x, y in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    final_lst = []\n    for i in range(len(nums1)):\n        final_lst.append(nums1[i]/nums2[i])\n    return final_lst\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            count += 1\n    test_str = test_str[count:] + test_str[:count]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    print(test_str)\n    for i in range(0,len(test_str)):\n        if test_str[i].isdigit():\n            print(test_str.replace(test_str[i],\"\",1))\n    return print(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for i in test_str:\n        if not i.isdigit():\n            result += i\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    #remove all white spaces\n    test_str = test_str.strip()\n    \n    #initialize the new string\n    new_str = ''\n    \n    #iterate through the string\n    for ch in test_str:\n        #if the character is not a digit, skip it\n        if not ch.isdigit():\n            continue\n        else:\n            #add the char to the new string\n            new_str = new_str + ch\n    \n    #return the new string\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # final_string = list(test_str)\n    # for i in range(len(test_str)):\n    #     if test_str[i].isnumeric():\n    #         final_string[i] = test_str[i+1]\n    #         final_string[i+1] = test_str[i]\n    # return ''.join(final_string)\n    return ''.join([test_str[i] for i in range(len(test_str)) if test_str[i].isnumeric()]) + \\\n           ''.join([test_str[i] for i in range(len(test_str)) if not test_str[i].isnumeric()])\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # move_str = test_str\n    move_str = test_str[0]\n    # count = 0\n    for i in test_str:\n        if i.isnumeric() == False:\n            move_str += i\n            # count += 1\n        else:\n            continue\n    for i in range(len(test_str)):\n        if test_str[i].isnumeric() == False:\n            move_str += test_str[i]\n    # print(move_str)\n    # print(count)\n    # print('----------------')\n    return move_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = list(test_str)\n    for i, val in enumerate(s):\n        if val.isdigit():\n            for i2 in range(i, len(s)):\n                if s[i2].isdigit():\n                    s[i2], s[i] = s[i], s[i2]\n    return ''.join(s)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #Step 1\n    # Return a new string\n    new_str = \"\"\n    #Step 2\n    for char in test_str:\n        if char.isdigit():\n            new_str += char\n    #Step 3\n    for num in range(len(new_str)):\n        if num == 0:\n            new_str = new_str[1:] + new_str[0]\n        else:\n            new_str = new_str[:num] + new_str[num+1:]\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s=test_str\n    length=len(s)\n    i=0\n    while i<length:\n        if ord(s[i]) in range(48,58):\n            i+=1\n            continue\n        s=s[:i]+s[i+1:]\n        length-=1\n        i-=1\n    print(s)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(str(x) for x in test_str if x.isnumeric()) + ''.join(str(x) for x in test_str if x.isalpha())\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    c = 1\n    if n==0:\n        return c\n    dp = [[-1 for i in range(n)] for j in range(n)]\n    if a[0] == 1:\n        dp[0][0] = 1\n    else:\n        dp[0][0] = 0\n    for i in range(1,n):\n        dp[i][0] = 1\n    for j in range(1,n):\n        for i in range(j):\n            if j%i == 0:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i][j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def subset(a):\n        import math\n        # a = list(map(int,input().split()))\n        a.sort()\n        def divisor(n):\n            d = []\n            i = int(math.sqrt(n))\n            while(n%i==0):\n                d.append(i)\n                n = n/i\n                i = int(math.sqrt(n))\n            if(n>i):\n                d.append(n)\n            return d\n        def find_div(a):\n            d = divisor(a)\n            res = []\n            for i in range(len(d)):\n                if(d[i] in res):\n                    continue\n                else:\n                    res.append(d[i])\n            return res\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_len = 1\n    for i in range(len(a)):\n        if i == 0 or a[i]!= a[i-1]:\n            if a[i] == a[i-1]:\n                max_len = max_len + 1\n            else:\n                max_len = max(max_len, 2)\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a == []:\n        return []\n    if a == [[]]:\n        return a\n    result = []\n    for i in range(len(a)):\n        if i==0:\n            result.append(a[i])\n        else:\n            temp = []\n            for j in range(len(result)):\n                temp.append(result[j]+a[i])\n            result = temp\n    return max(result)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    num_set = set(a)\n    if len(num_set) == 1:\n        return len(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    dp = [[1, 1] for _ in range(len(a))]\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i][0] = max(dp[i][0], dp[j][0] + 1)\n                dp[i][1] = max(dp[i][1], dp[j][1])\n    return max(dp[-1])\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1,n):\n        if a[i]%a[0] == 0:\n            count += 1\n        else:\n            break\n    return max(count,largest_subset(a[1:]))\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return []\n    if len(a) == 1:\n        return a\n    m = 0\n    for i in a:\n        if i % 2 == 0:\n            return a\n        else:\n            a.remove(i)\n    return largest_subset(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def can_divide(x):\n        if x==0 or x==1:\n            return False\n        for i in range(2,int(x**0.5)+1):\n            if x%i==0:\n                return False\n        return True\n    b=[1]\n    for i in a:\n        if i==0 or i==1:\n            b.append(1)\n            continue\n        if i==2:\n            b.append(2)\n            continue\n        if can_divide(i):\n            b.append(i)\n            continue\n        k=i-1\n        if can_divide(k):\n            b.append(i)\n            b.append(k)\n            continue\n        if can_divide(k-1):\n            b.append(i)\n            b.append(k)\n            b.append(k-1)\n            continue\n        b.append(i)\n        b.append(i-1)\n        b.append(i-2)\n    return max(b)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return len(a)\n    a = sorted(a)\n    #find largest_subset of list by each element\n    largest_subset_size = 0\n    for i in range(len(a)-1):\n        #print(i)\n        #print(a[i:i+2])\n        #print(a[i:i+2])\n        if a[i] % a[i+1] == 0:\n            #print(a[i],a[i+1])\n            largest_subset_size = max(largest_subset_size,2)\n            #print(largest_subset_size)\n        elif a[i+1] % a[i] == 0:\n            #print(a[i],a[i+1])\n            largest_subset_size = max(largest_subset_size,1)\n            #print(largest_subset_size)\n        else:\n            #print(\"else\")\n            largest_subset_size = max(largest_subset_size,0)\n            #print(largest_subset_size)\n    return largest_subset_size\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        return get_k_th_element(arr1, arr2, n)\n    else:\n        return (get_k_th_element(arr1, arr2, n//2) + get_k_th_element(arr1, arr2, n//2 - 1))/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2==0:\n        m = (n//2)-1\n        return (arr1[m] + arr2[m])/2\n    else:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr = arr1 + arr2\n    sorted_arr.sort()\n    n = len(sorted_arr)\n    if n % 2!= 0:\n        return sorted_arr[(n//2)]\n    else:\n        return (sorted_arr[(n//2)-1] + sorted_arr[(n//2)]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the lists and find the middle element.\n    merged_arr = merge_sorted_arr(arr1, arr2)\n    return get_median_helper(merged_arr, 0, len(merged_arr) - 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    p1 = 0\n    p2 = n - 1\n    while(p1 < p2):\n        m1 = p1 + (p2 - p1)//2\n        m2 = n - 1 - m1\n        if(arr1[m1] < arr2[m2]):\n            p1 = m1 + 1\n        else:\n            p2 = m1\n    # print(\"p1 = {} and p2 = {}\".format(p1, p2))\n    if(p1 < n-1):\n        return arr1[p1+1]\n    else:\n        return arr1[p1]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(n%2==1):\n        return get_smallest(arr1, arr2, n)\n    else:\n        return (get_smallest(arr1, arr2, n) + get_biggest(arr1, arr2, n)) / 2.0\n    \ndef get_smallest(arr1, arr2, n):\n    '''\n    Write a function to find the smallest element of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(arr1[0]<arr2[0]):\n        return arr1[0]\n    else:\n        return arr2[0]\n    \ndef get_biggest(arr1, arr2, n):\n    '''\n    Write a function to find the biggest element of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(arr1[0]>arr2[0]):\n        return arr1[0]\n    else:\n        return arr2[0]\n        \ndef get_sorted_list(arr, n):\n    '''\n    Write a function to sort an array of numbers.\n    '''\n    if(n==1):\n        return arr\n    else:\n        mid = n // 2\n        arr1 = arr[:mid]\n        arr2 = arr[mid:]\n        return get_sorted_list(arr1, len(arr1)) + get_sorted_list(arr2, len(arr2))\n        \ndef get_multiple_medians(arr, n):\n    '''\n    Write a function to find the multiple medians of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(n%2==1):\n        return get_multiple_medians_odd(arr, n)\n    else:\n        return get_multiple_medians_even(arr, n)\n        \ndef get_multiple_medians_odd(arr, n):\n    '''\n    Write a function to find the multiple medians of an odd-sized list of numbers.\n    '''\n    if(n==1):\n        return arr[0]\n    else:\n        mid = n // 2\n        arr1 = arr[:mid]\n        arr2 = arr[mid:]\n        return get_multiple_medians_odd(arr1, len(arr1)) + get_multiple_medians_odd(arr2, len(arr2))\n        \ndef get_multiple_medians_even(arr, n):\n    '''\n    Write a function to find the multiple medians of an even-sized list of numbers.\n    '''\n    if(n==1):\n        return arr[0]\n    else:\n        mid = n // 2\n        arr1 = arr[:mid]\n        arr2 = arr[mid:]\n        return get_multiple_medians_even(arr1, len(arr1)) + get_multiple_medians_even(arr2, len(arr2))\n        \ndef get_intersection(arr1, arr2, n):\n    '''\n    Write a function to find the intersection of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(n==1):\n        return arr1[0]\n    else:\n        mid = n // 2\n        arr1_1 = arr1[:mid]\n        arr1_2 = arr1[mid:]\n        arr2_1 = arr2[:mid]\n        arr2_2 = arr2[mid:]\n        return get_intersection(arr1_1, arr2_1, len(arr1_1)) + get_intersection(arr1_2, arr2_2, len(arr1_2))\n        \ndef get_union(arr1, arr2, n):\n    '''\n    Write a function to find the union of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(n==1):\n        return arr1[0]\n    else:\n        mid = n // 2\n        arr1_1 = arr1[:mid]\n        arr1_2 = arr1[mid:]\n        arr2_1 = arr2[:mid]\n        arr2_2 = arr2[mid:]\n        return get_union(arr1_1, arr2_1, len(arr1_1)) + get_union(arr1_2, arr2_2, len(arr1_2))\n        \ndef get_union_of_two_lists(arr1, arr2, n):\n    '''\n    Write a function to find the union of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(n==1):\n        return arr1[0]\n    else:\n        mid = n // 2\n        arr1_1 = arr1[:mid]\n        arr1_2 = arr1[mid:]\n        arr2_1 = arr2[:mid]\n        arr2_2 = arr2[mid:]\n        return get_union_of_two_lists(arr1_1, arr2_1, len(arr1_1)) + get_union_of_two_lists(arr1_2, arr2_2, len(arr1_2))\n        \ndef get_intersection_of_two_lists(arr1, arr2, n):\n    '''\n    Write a function to find the intersection of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(n==1):\n        return arr1[0]\n    else:\n        mid = n // 2\n        arr1_1 = arr1[:mid]\n        arr1_2 = arr1[mid:]\n        arr2_1 = arr2[:mid]\n        arr2_2 = arr2[mid:]\n        return get_intersection_of_two_lists(arr1_1, arr2_1, len(arr1_1)) + get_intersection_of_two_lists(arr1_2, arr2_2, len(arr1_2))\n        \ndef get_union_of_two_lists(arr1, arr2, n):\n    '''\n    Write a function to find the union of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(n==1):\n        return arr1[0]\n    else:\n        mid = n // 2\n        arr1_1 = arr1[:mid]\n        arr1_2 = arr1[mid:]\n        arr2_1 = arr2[:mid]\n        arr2_2 = arr2[mid:]\n        return get_union_of_two_lists(arr1_1, arr2_1, len(arr1_1)) + get_union_of_two_lists(arr1_2, arr2_2, len(arr1_2))\n        \ndef get_intersection_of_two_lists_with_skipping(arr1, arr2, n):\n    '''\n    Write a function to find the intersection of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(n==1):\n        return arr1[0]\n    else:\n        mid = n // 2\n        arr1_1 = arr1[:mid]\n        arr1_2 = arr1[mid:]\n        arr2_1 = arr2[:mid]\n        arr2_2 = arr2[mid:]\n        return get_intersection_of_two_lists_with_skipping(arr1_1, arr2_1, len(arr1_1)) + get_intersection_of_two_lists_with_skipping(arr1_2, arr2_2, len(arr1_2))\n        \ndef get_union_of_two_lists_with_skipping(arr1, arr2, n):\n    '''\n    Write a function to find the union of two sorted lists of same size.\n    '''\n    if(n==0):\n        return None\n    if(n==1):\n        return arr1[0]\n    else:\n        mid = n // 2\n        arr1_1 = arr1[:mid]\n        arr1_2 = arr1[mid:]\n        arr2_1 = arr2[:mid]\n        arr2_2 = arr2[mid:]\n    "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    \n    if n == 1:\n        return arr1[len(arr1)//2]\n    elif n == 2:\n        return max(arr1[len(arr1)//2], arr2[len(arr2)//2])\n    elif n == 3:\n        return max(min(arr1[len(arr1)//2], arr2[len(arr2)//2]), max(arr1[len(arr1)//2 -1], arr2[len(arr2)//2 -1]))\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    median = 0\n    left_pointer, right_pointer = 0, len(arr1)-1\n    while left_pointer <= right_pointer:\n        middle_element = left_pointer + (right_pointer - left_pointer)//2\n        if arr1[middle_element] < arr2[len(arr1) - 1]:\n            left_pointer = middle_element + 1\n        elif arr1[middle_element] > arr2[len(arr1) - 1]:\n            right_pointer = middle_element - 1\n        else:\n            median = arr1[middle_element]\n            break\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = int(n/2)\n    if n % 2 == 0:\n        return (arr1[mid] + arr2[mid]) / 2\n    else:\n        return arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    def median_of_two_sorted_arrays(arr1, arr2):\n        '''\n        Returns the median of two sorted arrays.\n        '''\n        sorted_arr1 = sorted(arr1)\n        sorted_arr2 = sorted(arr2)\n        median = []\n        if len(sorted_arr1) == len(sorted_arr2):\n            if len(sorted_arr1) % 2 == 0:\n                median.append((sorted_arr1[len(sorted_arr1)//2] + sorted_arr2[len(sorted_arr2)//2])/2)\n                median.append(sorted_arr1[len(sorted_arr1)//2])\n            else:\n                median.append(sorted_arr1[len(sorted_arr1)//2])\n                median.append(sorted_arr2[len(sorted_arr2)//2])\n        else:\n            median.append(sorted_arr1[len(sorted_arr1)//2])\n        return median\n    return median_of_two_sorted_arrays(arr1, arr2)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # if(n == 1):\n    #     return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) <= 1:\n        return [n ** i for i in nums]\n    else:\n        result = []\n        result.append(n ** nums[0])\n        result.append(n ** nums[1])\n        for i in range(2, len(nums)):\n            result.append(n ** nums[i])\n        return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    a = list(map(lambda x: x**n,nums))\n    return a\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # result = []\n    # for i in nums:\n    #     result.append(pow(i,n))\n    # return result\n    return map(pow,nums,repeat(n))\n    # for i in nums:\n    #     return pow(i,n)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums = list(nums)\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(x, n):\n        if n == 0:\n            return 1\n        else:\n            return x * power(x, n-1)\n    \n    for i in range(len(nums)):\n        nums[i] = power(nums[i],n)\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    a = []\n    for i in nums:\n        a.append(i**n)\n    print(a)\n    return a\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\nprint(is_upper(\"h\"))\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\nprint(is_upper('Hello World'))\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #return string.upper()\n    \n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(0)\n    newList.pop(-1)\n    newList.insert(0, newList.pop(-1))\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n    \nif __name__ == '__main__': \n    \n    # Input list \n    newList = [1, 2, 3, 4, 5] \n    \n    # Function call \n    print(swap_List(newList)) \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList.pop()\n    b = newList.pop(0)\n    newList.append(b)\n    newList.append(a)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)):\n        if i==0:\n            temp=newList[i]\n            newList[i]=newList[len(newList)-1]\n            newList[len(newList)-1]=temp\n    return newList\n    \ndef swap_Dict(newDict):\n    '''\n    Write a python function to interchange the first and last element in a given dictionary.\n    '''\n    for i in range(len(newDict)):\n        if i==0:\n            temp=newDict[i]\n            newDict[i]=newDict[len(newDict)-1]\n            newDict[len(newDict)-1]=temp\n    return newDict\n    \ndef remove_List(newList):\n    '''\n    Write a python function to remove an element from a given list.\n    '''\n    for i in range(len(newList)):\n        if newList[i]==2:\n            del newList[i]\n            break\n    return newList\n    \ndef remove_Dict(newDict):\n    '''\n    Write a python function to remove an element from a given dictionary.\n    '''\n    for i in range(len(newDict)):\n        if newDict[i]==3:\n            del newDict[i]\n            break\n    return newDict\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_Dict(newDict):\n    '''\n    Write a python function to reverse a given dictionary.\n    '''\n    newDict.reverse()\n    return newDict\n    \ndef reverse_Str(newStr):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    newStr=newStr[::-1]\n    return newStr\n    \ndef Palindrome_List(newList):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    for i in range(len(newList)):\n        if newList[i]!=newList[len(newList)-i-1]:\n            return False\n    return True\n    \ndef Palindrome_Dict(newDict):\n    '''\n    Write a python function to check whether a given dictionary is a palindrome or not.\n    '''\n    temp=newDict.copy()\n    for i in range(len(temp)):\n        if newDict[i]!=newDict[len(newDict)-i-1]:\n            return False\n    return True\n    \ndef Palindrome_Str(newStr):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    newStr=newStr[::-1]\n    for i in range(len(newStr)):\n        if newStr[i]!=newStr[len(newStr)-i-1]:\n            return False\n    return True\n    \ndef rotate_List(newList):\n    '''\n    Write a python function to rotate a list by k elements.\n    '''\n    newList.append(newList[0])\n    del newList[0]\n    return newList\n    \ndef rotate_Dict(newDict):\n    '''\n    Write a python function to rotate a dictionary by k elements.\n    '''\n    temp=newDict.copy()\n    newDict.clear()\n    for i in range(len(temp)):\n        newDict[i]=temp[(len(temp)-i-1)]\n    return newDict\n    \ndef rotate_Str(newStr):\n    '''\n    Write a python function to rotate a string by k elements.\n    '''\n    newStr=newStr[::-1]\n    newStr=newStr[len(newStr)-k:]+newStr[0:len(newStr)-k]\n    newStr=newStr[::-1]\n    return newStr\n    \ndef sliding_window(arr,n,k):\n    '''\n    Write a python function to calculate the sum of the contiguous subarray of size k in the array.\n    '''\n    for i in range(n-k+1):\n        sum=0\n        for j in range(i,i+k):\n            sum+=arr[j]\n        yield sum\n    \ndef coin_change(arr,n,target):\n    '''\n    Write a python function to calculate the count of minimum coins required to make change.\n    '''\n    from collections import Counter\n    temp=Counter(arr)\n    for i in range(n):\n        if target-i in temp:\n            yield 1\n        else:\n            yield 0\n        \ndef coin_change_brute(arr,target):\n    '''\n    Write a python function to calculate the count of minimum coins required to make change.\n    '''\n    arr.sort()\n    n=len(arr)\n    count=0\n    for i in range(n):\n        count=0\n        for j in range(i,n):\n            if arr[j]-arr[i]==target:\n                count+=1\n        yield count\n        \ndef coin_change_memo(arr,target):\n    '''\n    Write a python function to calculate the count of minimum coins required to make change.\n    '''\n    memo=dict()\n    arr.sort()\n    n=len(arr)\n    count=0\n    for i in range(n):\n        if target-arr[i] in memo:\n            yield memo[target-arr[i]]\n        else:\n            yield 0\n        memo[arr[i]]=1+memo[target-arr[i]]\n        \ndef coin_change_dp(arr,target):\n    '''\n    Write a python function to calculate the count of minimum coins required to make change.\n    '''\n    dp=[[0]*(target+1) for i in range(len(arr))]\n    for i in range(len(dp)):\n        dp[i][0]=1\n    for i in range(1,target+1):\n        if i in arr:\n            dp[0][i]=1\n    for i in range(1,len(arr)):\n        for j in range(1,target+1):\n            if arr[i]-j in arr:\n                dp[i][j]=dp[i-1][j]+dp[i-1][arr[i]-j]\n            else:\n                dp[i][j]=dp[i-1][j]\n    return dp[len(arr)-1][target]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef append_List(newList,data):\n    '''\n    Write a python function to insert data at the end of the list.\n    '''\n    newList.append(data)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[::-1]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    #print (length)\n    #print (newList[length - 1])\n    #print (newList[0])\n    newList[length - 1], newList[0] = newList[0], newList[length - 1]\n    #print(newList)\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def f1(r) :  \n        a = (r**2 * math.sqrt(3)/4) + r - 3\n        return a\n    def f2(r) :  \n        a = (r**2 * math.sqrt(3)/4) + 3\n        return a\n    a = f1(r)\n    b = f2(r)\n    if a > b :\n        c = a\n    else :\n        c = b\n    return c\nprint('the area of the largest triangle inscribed in a semicircle with a given radius is',triangle_area(2))\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi * (r**2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    PI = 3.14159265359\n    pi = PI\n    a = 2 * r * PI\n    b = PI * (r ** 2)\n    c = a * b\n    area = (a + b + c) / 2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def side_len(a,b) : \n        return math.sqrt(a**2+b**2)\n    def area_of_triangle(a,b,c) : \n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return area\n    def smallest_radius_for_triangle(a,b,c) : \n        r = side_len(a,b)\n        r = side_len(r,c)\n        r = side_len(r,a)\n        return r\n    def largest_radius_for_triangle(a,b,c) : \n        r = side_len(a,b)\n        r = side_len(r,c)\n        r = side_len(r,a)\n        return r\n    def largest_area(a,b,c) : \n        r = smallest_radius_for_triangle(a,b,c)\n        return largest_radius_for_triangle(a,b,c) * 2\n    def smallest_area(a,b,c) : \n        r = largest_radius_for_triangle(a,b,c)\n        return largest_radius_for_triangle(a,b,c) * 2\n    def largest_area_triangle(a,b,c) : \n        r = largest_radius_for_triangle(a,b,c)\n        area = area_of_triangle(a,b,c)\n        return area\n    def smallest_area_triangle(a,b,c) : \n        r = smallest_radius_for_triangle(a,b,c)\n        area = area_of_triangle(a,b,c)\n        return area\n    a,b,c = int(input()),int(input()),int(input())\n    a,b,c = sorted([a,b,c])\n    if a == 0 and b == 0 and c == 0 :\n        print(\"Invalid\")\n    elif a == 0 and b == 0 and c == 1 :\n        print(\"Triangle\")\n    elif a == b == c :\n        print(\"Equilateral\")\n    elif a == b or a == c or b == c :\n        print(\"Isosceles\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a == 0 and b == 0 :\n        print(\"Isosceles\")\n    elif a == 0 and b == 1 :\n        print(\"Isosceles\")\n    elif a == 1 and b == 0 :\n        print(\"Isosceles\")\n    elif a == 1 and b == 1 :\n        print(\"Isosceles\")\n    elif a == b and b == c :\n        print(\"Equilateral\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a == 0 :\n        print(\"Isosceles\")\n    elif a == 1 :\n        print(\"Isosceles\")\n    elif b == 0 :\n        print(\"Isosceles\")\n    elif c == 0 :\n        print(\"Isosceles\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a == 0 and b == 0 :\n        print(\"Isosceles\")\n    elif a == b and b == c :\n        print(\"Equilateral\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 1 :\n        print(\"Isosceles\")\n    elif a!= 0 and b!= 1 and c!= 0 :\n        print(\"Isosceles\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a == 0 and b == 0 and c == 1 :\n        print(\"Isosceles\")\n    elif a == 1 and b == 0 and c == 1 :\n        print(\"Isosceles\")\n    elif a == 1 and b == 1 and c == 0 :\n        print(\"Isosceles\")\n    elif a == 1 and b == 1 and c == 1 :\n        print(\"Isosceles\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 1 :\n        print(\"Isosceles\")\n    elif a!= 0 and b!= 0 and c!= 1 :\n        print(\"Isosceles\")\n    elif a!= 0 and b!= 0 and c!= 1 :\n        print(\"Isosceles\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!= 0 and a+b+c!= 4 :\n        print(\"Scalene\")\n    elif a!= 0 and b!= 0 and c!"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi, sqrt, pow\n    # pythagoras theoram to find the triangle area\n    area = pow(r,2)*(pi/4)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        return 0\n    for x in range(1,int(r)) :\n        area_of_triangle = r * x * (x + 1) / 2\n        if area_of_triangle > area :\n            area = area_of_triangle\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    # area of a triangle with radius r\n    def area_of_a_triangle(r) :\n        p=r*r\n        area=0.5*p*(p-r)\n        return area\n    # area of a circle with radius r\n    def area_of_a_circle(r) :\n        area=pi*r*r\n        return area\n    # find the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    def find_area_of_largest_triangle(r) :\n        # initialize the list of area of a triangle and a circle\n        triangle_area_list = []\n        circle_area_list = []\n        for i in range(1,r+1):\n            # calculate the area of a triangle with radius i\n            triangle_area = area_of_a_triangle(i)\n            # calculate the area of a circle with radius i\n            circle_area = area_of_a_circle(i)\n            # add the area of a triangle and a circle to the list\n            triangle_area_list.append(triangle_area)\n            circle_area_list.append(circle_area)\n            # add the maximum area to the list\n            area_max = max(triangle_area_list)\n            area_max_index = triangle_area_list.index(area_max)\n            max_triangle = r*r-r+area_max_index+1\n            area_max_circle = circle_area_list[area_max_index]\n        # return the maximum area of a triangle and circle\n        return max_triangle, area_max_circle\n    # find the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    largest_triangle, largest_circle = find_area_of_largest_triangle(r)\n    print(\"The area of the largest triangle inscribed in a semicircle with radius\",r,\"is\",largest_triangle)\n    print(\"The area of the largest circle inscribed in a semicircle with radius\",r,\"is\",largest_circle)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0:\n        return 0\n    else:\n        return (0.25 * r * r * r)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (3.0*r*r)\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.pi * r * r) / 2\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #For calculating the minimum value of the list, one can use any number as the range, as long as the range is of type 'int' or 'long'.\n    #We can assume that the first value in the list is the minimum value.\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not isinstance(array,list):\n        return -1\n    if len(array) == 0:\n        return -1\n    if end == None:\n        end = len(array)\n    for i in range(start,end+1):\n        if i == array[i] or array[i] > end or array[i] < 0:\n            return array[i]\n    return array[end]\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if i not in array:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if end - start < 1:\n        return -1\n    if array[start] == array[end]:\n        return array[start] + 1\n    mid = (start + end)//2\n    if array[mid] == array[start] or array[mid] == array[end]:\n        return find_First_Missing(array,start,mid)\n    else:\n        if array[mid] > array[start]:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid] < array[start]:\n            return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return start\n    if array[start]==start:\n        return find_First_Missing(array,start+1,end)\n    elif array[start]==end:\n        return find_First_Missing(array,start+1,end-1)\n    else:\n        return find_First_Missing(array,start+1,end)\n    \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    # Base case \n    if end is None:\n        end = len(array)-1\n    \n    if start == end:\n        return start\n    \n    mid = (start + end)//2\n    \n    if array[mid] == mid+1:\n        return find_First_Missing(array,start,mid)\n    elif array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array)-1 if end == None else end\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return len(array)+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array)\n    if end == 0:\n        return 1\n    elif start == end:\n        return start + 1\n    elif end - start == 1:\n        return array[start] + 1\n    else:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    if array[start]==start+1:\n        return start+1\n    if array[start]==start+2:\n        return start+2\n    while start<end:\n        middle=(start+end)//2\n        if array[middle]==middle+1:\n            start=middle+1\n        else:\n            end=middle\n    return start+1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char =='':\n            new_string += '%20'\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    #print(string)\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n    \ndef count_string(string):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    return len(string)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return string == string[::-1]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse the string given\n    '''\n    string_list = list(string)\n    string_list.reverse()\n    return ''.join(string_list)\n    \ndef max_even_number(string):\n    '''\n    Write a function to find the maximum even number in a given string\n    '''\n    string_list = string.split()\n    maximum = 0\n    for i in range(len(string_list)):\n        if int(string_list[i]) % 2 == 0:\n            if maximum < int(string_list[i]):\n                maximum = int(string_list[i])\n    return maximum\n    \ndef format_name(string):\n    '''\n    Write a function to format the given string in such a way that the words are separated by a space.\n    '''\n    string_list = string.split()\n    return''.join(string_list)\n    \ndef check_string(string):\n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    reverse_string_1 = reverse_string(string)\n    return string == reverse_string_1\n    \ndef string_shuffle(string):\n    '''\n    Write a function to shuffle and print the given string.\n    '''\n    shuffle_string = random.sample(string, len(string))\n    return ''.join(shuffle_string)\n    \ndef check_number_bitwise(number):\n    '''\n    Write a function to check if a given number is a power of two or not.\n    '''\n    return number > 0 and (number & (number - 1)) == 0\n    \ndef single_element_in_list(list):\n    '''\n    Write a function to check if a given list has only one element or not.\n    '''\n    if len(list) == 1:\n        return True\n    else:\n        return False\n    \ndef two_numbers_divisible_by_3(list_1, list_2):\n    '''\n    Write a function to check whether 2 numbers are divisiable by 3 or not.\n    '''\n    divisibles_by_3 = []\n    for i in range(len(list_1)):\n        if list_1[i] % 3 == 0 or list_2[i] % 3 == 0:\n            divisibles_by_3.append(True)\n        else:\n            divisibles_by_3.append(False)\n    if True in divisibles_by_3:\n        return True\n    else:\n        return False\n    \ndef print_dots(num):\n    '''\n    Write a function to print the given string num of dots\n    '''\n    num = list(num)\n    for i in range(len(num)):\n        print('.', end = '')\n    print('\\n')\n    \ndef print_same_line(num):\n    '''\n    Write a function to print the given string num of dots and print them on a single line\n    '''\n    num = list(num)\n    for i in range(len(num)):\n        print(num[i], end = '')\n    print('\\n')\n    \ndef print_same_line_dots(num):\n    '''\n    Write a function to print the given string num of dots and print them on a single line\n    '''\n    num = list(num)\n    for i in range(len(num)):\n        print('.', end = '')\n    print('\\n')\n    \ndef print_same_line_dots_numbers(num):\n    '''\n    Write a function to print the given string num of dots and print them on a single line\n    '''\n    num = list(num)\n    for i in range(len(num)):\n        print('{}'.format(num[i]), end = '')\n    print('\\n')\n    \ndef print_in_rows(string):\n    '''\n    Write a function to print the given string in rows\n    '''\n    for i in range(len(string)):\n        print(string[i], end = '')\n    print('\\n')\n    \ndef print_in_columns(string):\n    '''\n    Write a function to print the given string in columns\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        print(string[i], end = '')\n    print()\n    \ndef print_in_grid(string):\n    '''\n    Write a function to print the given string in grid\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        print(string[i], end = '')\n    print()\n    \ndef maximum_gap(list_1):\n    '''\n    Write a function to print the given list and return the maximum gap\n    '''\n    list_1 = sorted(list_1)\n    max_gap = 0\n    for i in range(len(list_1)):\n        gap = list_1[i + 1] - list_1[i]\n        if gap > max_gap:\n            max_gap = gap\n    return max_gap\n    \ndef swap_first_last_elements(list):\n    '''\n    Write a function to swap the first and last elements of the given list.\n    '''\n    list.pop(0)\n    list.pop(-1)\n    list.insert(0, list.pop(-1))\n    list.insert(-1, list.pop(0))\n    return list\n    \ndef swap_first_last_elements_in_place(list):\n    '''\n    Write a function to swap the first and last elements in place of the given list.\n    '''\n    list.pop(0)\n    list.pop(-1)\n    list[0], list[-1] = list[-1], list[0]\n    return list\n    \ndef rotate_list(list):\n    '''\n    Write a function to rotate the given list.\n    '''\n    list.reverse()\n    return list\n    \ndef rotate_list_in_place(list):\n    '''\n    Write a function to rotate the given list in place.\n    '''\n    start = 0\n    end = len(list) - 1\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n    return list\n    \ndef break_words(stuff):\n    '''\n    Write a function that will break up words for us.\n    '''\n    stuff = stuff.split(' ')\n    return stuff\n    \ndef sort_words(words):\n    '''\n    Write a function that will sort the words.\n    '''\n    words.sort()\n    return words\n    \ndef sort_sentence(sentence):\n    '''\n    Write a function that will sort the words.\n    '''\n    sentence = sentence.split(' ')\n    sentence.sort()\n    return sentence\n    \ndef reverse_sentence(sentence):\n    '''\n    Write a function that will reverse the words.\n    '''\n    sentence = sentence.split(' ')\n    sentence.reverse()\n    return''.join(sentence)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return string == reverse_string(string)\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse the string\n    '''\n    return string[::-1]\n    \ndef number_of_teams(teams):\n    '''\n    Write a function to count the number of teams in a given list.\n    '''\n    return len(teams)\n    \ndef number_of_teams_with_max_number"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in range(len(list)):\n        if list[i]%2 == 0:\n            list[i] = list[i]//2\n            print(list[i])\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for i in list:\n        if i % 2 == 0:\n            even_nums.append(i)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if(i%2==0):\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for x in range(len(list)):\n        if list[x]%2==0:\n            print(list[x])\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for i in range(len(list)):\n        if(list[i]%2==0):\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even,odd\n    \ndef ListPermutation(l):\n    '''\n    Write a python function to return all permutations of the list.\n    '''\n    if len(l)<2:\n        return(l)\n    else:\n        l1 = l[:]\n        l2 = []\n        for i in range(len(l1)):\n            l2.append(l1.pop())\n        l1 = l2[:]\n        return(ListPermutation(l1) + ListPermutation(l))\n    \ndef ListChunks(l, n):\n    '''\n    Write a python function to split the list l into n even length sublists (sublist size = 2n).\n    '''\n    if(len(l)%2!=0 or n<=0):\n        return l\n    else:\n        return(ListChunks(l[0::2],n) + ListChunks(l[1::2],n))\n    \ndef ListToString(l):\n    '''\n    Write a python function to convert list into string.\n    '''\n    return ''.join(l)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_number = []\n    for i in list:\n        if i%2==0:\n            even_number.append(i)\n    print even_number\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_of_even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            list_of_even.append(list[i])\n    return list_of_even\nprint(Split([1,2,3,4,5,6]))\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if(len(sub)==0):\n        sub.append(ele)\n        return sub\n    else:\n        adjac = []\n        adjac = adjac(ele,sub)\n        sub.append(ele)\n        return adjac\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ((x, y) for x in range(ele[0] - 1, ele[0] + 2) for y in range(ele[1] - 1, ele[1] + 2))\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele) == tuple:\n        if ele in sub:\n            return\n        sub.append(ele)\n        if ele[0] == 0:\n            return adjac((ele[0]+1, ele[1]+1), sub)\n        if ele[1] == 0:\n            return adjac((ele[0]+1, ele[1]+1), sub)\n        if ele[0] == 0:\n            return adjac((ele[0]+1, ele[1]-1), sub)\n        if ele[1] == 0:\n            return adjac((ele[0]+1, ele[1]-1), sub)\n        if ele[0] == len(grid)-1:\n            return adjac((ele[0]-1, ele[1]+1), sub)\n        if ele[1] == len(grid[0])-1:\n            return adjac((ele[0]-1, ele[1]+1), sub)\n        if ele[0] == len(grid)-1:\n            return adjac((ele[0]-1, ele[1]-1), sub)\n        if ele[1] == len(grid[0])-1:\n            return adjac((ele[0]-1, ele[1]-1), sub)\n        if ele[0] == 0:\n            return adjac((ele[0], ele[1]+1), sub)\n        if ele[1] == 0:\n            return adjac((ele[0], ele[1]+1), sub)\n        if ele[0] == len(grid)-1:\n            return adjac((ele[0], ele[1]-1), sub)\n        if ele[1] == len(grid[0])-1:\n            return adjac((ele[0], ele[1]-1), sub)\n        if ele[0] == 0:\n            return adjac((ele[0]+1, ele[1]), sub)\n        if ele[1] == 0:\n            return adjac((ele[0]-1, ele[1]), sub)\n        if ele[0] == len(grid)-1:\n            return adjac((ele[0]-1, ele[1]), sub)\n        if ele[1] == len(grid[0])-1:\n            return adjac((ele[0]+1, ele[1]), sub)\n        else:\n            return adjac((ele[0], ele[1]+1), sub) + adjac((ele[0], ele[1]-1), sub) + adjac((ele[0]+1, ele[1]), sub) + adjac((ele[0]-1, ele[1]), sub)\n    else:\n        return\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0 and ele[0] - 1 not in sub:\n        sub.append(ele[0] - 1)\n    if ele[1] > 0 and ele[1] - 1 not in sub:\n        sub.append(ele[1] - 1)\n    if ele[0] < len(grid) - 1 and ele[0] + 1 not in sub:\n        sub.append(ele[0] + 1)\n    if ele[1] < len(grid[0]) - 1 and ele[1] + 1 not in sub:\n        sub.append(ele[1] + 1)\n    return(sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele!= None:\n        # print(sub)\n        if ele[0] == 0 and ele[1] == 0:\n            sub.append((ele[0]+1, ele[1]))\n            sub.append((ele[0]+1, ele[1]+1))\n            sub.append((ele[0], ele[1]+1))\n            sub.append((ele[0]-1, ele[1]+1))\n            sub.append((ele[0]-1, ele[1]))\n            sub.append((ele[0]-1, ele[1]-1))\n            sub.append((ele[0], ele[1]-1))\n            sub.append((ele[0]+1, ele[1]-1))\n            sub.append((ele[0]+1, ele[1]))\n        elif ele[0] == 0:\n            sub.append((ele[0], ele[1]-1))\n            sub.append((ele[0]+1, ele[1]-1))\n            sub.append((ele[0]+1, ele[1]))\n            sub.append((ele[0]+1, ele[1]+1))\n            sub.append((ele[0], ele[1]+1))\n            sub.append((ele[0]-1, ele[1]+1))\n            sub.append((ele[0]-1, ele[1]))\n            sub.append((ele[0]-1, ele[1]-1))\n        elif ele[1] == 0:\n            sub.append((ele[0]-1, ele[1]))\n            sub.append((ele[0]-1, ele[1]+1))\n            sub.append((ele[0], ele[1]+1))\n            sub.append((ele[0]+1, ele[1]+1))\n            sub.append((ele[0]+1, ele[1]))\n            sub.append((ele[0]+1, ele[1]-1))\n            sub.append((ele[0], ele[1]-1))\n            sub.append((ele[0]-1, ele[1]-1))\n        else:\n            sub.append((ele[0]-1, ele[1]-1))\n            sub.append((ele[0]-1, ele[1]))\n            sub.append((ele[0]-1, ele[1]+1))\n            sub.append((ele[0], ele[1]+1))\n            sub.append((ele[0]+1, ele[1]+1))\n            sub.append((ele[0]+1, ele[1]))\n            sub.append((ele[0]+1, ele[1]-1))\n            sub.append((ele[0], ele[1]-1))\n            sub.append((ele[0]-1, ele[1]-1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 2:\n        sub = [sub]\n    if type(ele)!= tuple:\n        raise Exception(\"First argument must be a tuple\")\n    if ele == tuple([-1,-1,-1]):\n        sub.append(tuple([-1,-1,-1]))\n        return sub\n    sub = sub + [tuple([ele[0]+i, ele[1]+j, ele[2]+k]) for i in range(-1,2) for j in range(-1,2) for k in range(-1,2) if i!=0 or j!=0 or k!=0]\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [i for i in range(ele[0]-1, ele[0]+2) if (i, ele[1]) in sub and (i, ele[1])!= ele]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    #incrementing in x direction\n    sub.append((x,y+1))\n    #decreasing in y direction\n    sub.append((x+1,y))\n    #incrementing in x direction\n    sub.append((x+1,y+1))\n    #decreasing in x direction\n    sub.append((x,y-1))\n    #incrementing in x direction\n    sub.append((x-1,y))\n    #decreasing in x direction\n    sub.append((x-1,y-1))\n    #increasing in x direction\n    sub.append((x+1,y-1))\n    #decreasing in y direction\n    sub.append((x-1,y+1))\n    #increasing in x direction\n    sub.append((x+1,y+1))\n    #increasing in y direction\n    sub.append((x-1,y-1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j)!= ele:\n                yield (i, j)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    nx, ny = ele[0] + 1, ele[1] + 1\n    if nx == 9 and ny == 9:\n        return sub\n    else:\n        sub.append((nx, ny))\n        return adjac((nx, ny), sub)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text.replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # return text.replace(' ', '_').replace('_','')\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    if text == \" \":\n        return text\n    \n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #clean up the text\n    text = text.replace(' ','_')\n    text = text.replace('_',' ')\n    \n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # text = 'Hello  World'\n    # text = 'Hello World'\n    \n    # text = text.replace(' ', '_')\n    # print(text)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'.join(text.split())\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero = num_list.count(0)\n    num_list.pop(zero)\n    num_list.append(0)\n    return num_list\n    \ndef merge_list(list1, list2):\n    '''\n    Write a python function to merge two sorted list.\n    Input list1 : [1,3,5]\n    Input list2 : [2,4,6]\n    Output : [1,2,3,4,5,6]\n    '''\n    i = 0\n    j = 0\n    final_list = []\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        final_list.append(list2[j])\n        j += 1\n    return final_list\n        \ndef remove_duplicates(num_list):\n    '''\n    Write a python function to remove all duplicate numbers from a given list.\n    Input : [10,20,20,30,40,50]\n    Output : [10,20,30,40,50]\n    '''\n    new_list = []\n    for num in num_list:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    Note : String can also be palindrome if it's a combination of reverse of original string.\n    Input : 'aba'\n    Output : True\n    Input : 'abcba'\n    Output : True\n    Input : 'abcdefg'\n    Output : False\n    '''\n    reverse_string = ''\n    for i in range(len(string)-1,-1,-1):\n        reverse_string += string[i]\n    return string == reverse_string\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate the given matrix.\n    Input : [[1,2,3],[4,5,6],[7,8,9]]\n    Output : [[7,4,1],[8,5,2],[9,6,3]]\n    '''\n    # transpose matrix\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(i, cols):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    \n    # reverse each column\n    for i in range(rows):\n        matrix[i].reverse()\n        \n    return matrix\n    \ndef remove_duplicates_from_sorted_array(arr):\n    '''\n    Write a python function to remove all duplicate elements from a given sorted array.\n    Input : [1,1,2,2,3,4,5,6,5,5,6]\n    Output : [1,2,3,4,5,6]\n    '''\n    temp = []\n    for num in arr:\n        if num not in temp:\n            temp.append(num)\n    return temp\n    \ndef remove_duplicates_from_sorted_array_brute_force(arr):\n    '''\n    Write a python function to remove all duplicate elements from a given sorted array.\n    Brute force approach :\n    Time Complexity : O(n^2)\n    Space Complexity : O(1)\n    '''\n    arr_length = len(arr)\n    for i in range(arr_length):\n        for j in range(i+1,arr_length):\n            if arr[i] == arr[j]:\n                arr.remove(arr[j])\n                break\n    return arr\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    i = 0\n    for j in range(n):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n    return num_list\n    \ndef swap_list(num_list_1, num_list_2):\n    '''\n    Write a python function to swap nums at index i and j in the given list.\n    '''\n    n = len(num_list_1)\n    for i in range(n):\n        num_list_1[i], num_list_2[i] = num_list_2[i], num_list_1[i]\n    return num_list_1\n    \ndef swap_list_using_extended_slice_notation(num_list_1, num_list_2):\n    '''\n    Write a python function to swap nums at index i and j in the given list.\n    '''\n    n = len(num_list_1)\n    num_list_1[:]=num_list_2[:]\n    num_list_2[:]=num_list_1[:]\n    return num_list_1\n    \ndef rotate_list(num_list, n):\n    '''\n    Write a python function to rotate the given list by n places to the left.\n    '''\n    n = len(num_list)\n    for i in range(n):\n        num_list[i], num_list[0] = num_list[0], num_list[i]\n        i += 1\n    return num_list\n    \ndef rotate_list_using_extended_slice_notation(num_list, n):\n    '''\n    Write a python function to rotate the given list by n places to the left.\n    '''\n    n = len(num_list)\n    num_list[:]=num_list[n:]\n    num_list[:]=num_list[:n]\n    return num_list\n    \ndef insertion_sort(num_list):\n    '''\n    Write a python function to sort the given list using insertion sort algorithm.\n    '''\n    n = len(num_list)\n    for i in range(1, n):\n        curr = num_list[i]\n        j = i-1\n        while j >= 0 and curr < num_list[j]:\n            num_list[j+1] = num_list[j]\n            j -= 1\n        num_list[j+1] = curr\n    return num_list\n    \ndef insertion_sort_using_extended_slice_notation(num_list):\n    '''\n    Write a python function to sort the given list using insertion sort algorithm.\n    '''\n    n = len(num_list)\n    for i in range(1, n):\n        curr = num_list[i]\n        j = i-1\n        while j >= 0 and curr < num_list[j]:\n            num_list[j+1] = num_list[j]\n            j -= 1\n        num_list[j+1] = curr\n    return num_list\n    \ndef merge_sort(num_list):\n    '''\n    Write a python function to sort the given list using merge sort algorithm.\n    '''\n    n = len(num_list)\n    if n <= 1:\n        return num_list\n    \n    mid = n//2\n    left_list = num_list[:mid]\n    right_list = num_list[mid:]\n    \n    left_list = merge_sort(left_list)\n    right_list = merge_sort(right_list)\n    \n    return merge(left_list, right_list)\n    \ndef merge(left_list, right_list):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    merged_list = []\n    i, j = 0, 0\n    \n    while i < len(left_list) and j < len(right_list):\n        if left_list[i] <= right_list[j]:\n            merged_list.append(left_list[i])\n            i += 1\n        else:\n            merged_list.append(right_list[j])\n            j += 1\n    merged_list.extend(left_list[i:])\n    merged_list.extend(right_list[j:])\n    return merged_list\n    \ndef merge_sort_using_extended_slice_notation(num_list):\n    '''\n    Write a python function to sort the given list using merge sort algorithm.\n    '''\n    n = len(num_list)\n    if n <= 1:\n        return num_list\n    \n    mid = n//2\n    left_list = num_list[:mid]\n    right_list = num_list[mid:]\n    \n    left_list = merge_sort_using_extended_slice_notation(left_list)\n    right_list = merge_sort_using_extended_slice_notation(right_list)\n    \n    return merge_using_extended_slice_notation(left_list, right_list)\n    \ndef merge_using_extended_slice_notation(left_list, right_list):\n    '''\n    Write a python function to merge two sorted lists using extended slice notation.\n    '''\n    merged_list = []\n    i, j = 0, 0\n    \n    while i < len(left_list) and j < len(right_list):\n        if left_list[i] <= right_list[j]:\n            merged_list.append(left_list[i])\n            i += 1\n        else:\n            merged_list.append(right_list[j])\n            j += 1\n    merged_list.extend(left_list[i:])\n    merged_list.extend(right_list[j:])\n    return merged_list\n    \ndef partition(num_list, low, high):\n    '''\n    Write a python function to partition a given list by picking a pivot element.\n    '''\n    i = low-1\n    pivot = num_list[high]\n    for j in range(low, high):\n        if num_list[j] <= pivot:\n            i += 1\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n    num_list[i+1], num_list[high] = num_list[high], num_list[i+1]\n    return i+1\n    \ndef partition_using_extended_slice_notation(num_list, low, high):\n    '''\n    Write a python function to partition a given list by picking a pivot element.\n    '''\n    i = low-1\n    pivot = num_list[high]\n    num_list[:]=num_list[low:high+1]\n    for j in range(low, high):\n        if num_list[j] <= pivot:\n            i += 1\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n    num_list[i+1], num_list[high] = num_list[high], num_list[i+1]\n    return i+1\n    \ndef quick_sort(num_list, low, high):\n    '''\n    Write a python function to sort the given list using quick sort algorithm.\n    '''\n    if low >= high:\n        return num_list\n    \n    pivot_index = partition(num_list, low, high)\n    num_list[low:pivot_index] = quick_sort(num_list, low, pivot_index-1)\n    num_list[pivot_index+1:high] = quick_sort(num_list, pivot_index+1, high)\n    return num_list\n    \ndef quick_sort_using_extended_slice_notation(num_list, low, high):\n    '''\n    Write a python function to sort the given list using quick sort algorithm.\n    '''\n    if low >= high:\n        return num_list\n    \n    pivot_index = partition_using_extended_slice_notation(num_list, low, high)\n    num_list[low:pivot_index] = quick_sort_using_extended_slic"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == [] or num_list == [[]]:\n        return num_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            while(i<len(num_list) and num_list[i]==0):\n                i+=1\n            break\n    if i == len(num_list):\n        return num_list\n    while(i<len(num_list)):\n        num_list.append(num_list.pop(i))\n        i+=1\n    return num_list\n    \n    \n    \ndef find_missing_number(nums):\n    '''\n    Write a python function to find missing number in a sorted array.\n    The input array can contain duplicate numbers\n    but we need to find the missing number.\n    '''\n    if len(nums) == 0:\n        return -1\n    if len(nums) == 1:\n        return nums[0] + 1\n    \n    start = 0\n    end = len(nums) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid == nums[mid]:\n            start = mid + 1\n        else:\n            if mid + 1 == nums[mid]:\n                end = mid - 1\n            else:\n                return nums[mid] + 1\n    return start + 1\n    \n    \ndef find_sum_of_two_arrays(list1, list2):\n    '''\n    Write a python function to find the sum of two given array.\n    If the sum is same, then return the array whose index is greater.\n    If the sum is greater, then return the array whose index is less.\n    If the sum is smaller, then return the smaller array.\n    '''\n    if list1 == [] or list2 == []:\n        return -1\n    if len(list1) == 1 or len(list2) == 1:\n        return list1 if len(list1) == 1 else list2\n    \n    start = 0\n    end = len(list1) - 1\n    while start <= end:\n        if list1[start] + list2[end] == 0:\n            return list1 if list1[start] < list2[end] else list2\n        elif list1[start] + list2[end] > 0:\n            end -= 1\n        else:\n            start += 1\n    return -1\n    \n    \ndef find_smallest_num_in_list(num_list):\n    '''\n    Write a python function to find the smallest number in a given list of integers.\n    The input list can contain duplicate numbers.\n    '''\n    if len(num_list) == 0:\n        return -1\n    if len(num_list) == 1:\n        return num_list[0]\n    start = 0\n    end = len(num_list) - 1\n    while start <= end:\n        if num_list[start] == num_list[end]:\n            end -= 1\n        else:\n            return min(num_list[start], num_list[end])\n            \n            \ndef find_missing_element(num_list):\n    '''\n    Write a python function to find missing element in a given sorted array.\n    The array can contain duplicate numbers and can be empty.\n    '''\n    if num_list == []:\n        return -1\n    if len(num_list) == 1:\n        return num_list[0] + 1\n    start = 0\n    end = len(num_list) - 1\n    while start <= end:\n        if num_list[start] == num_list[end]:\n            end -= 1\n        else:\n            return num_list[start] + 1\n            \n            \ndef reverse_string(string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return string[::-1]\n    \n    \ndef reverse_list(num_list):\n    '''\n    Write a python function to reverse a given list of integers.\n    '''\n    if num_list == []:\n        return num_list\n    if len(num_list) == 1:\n        return num_list\n    start = 0\n    end = len(num_list) - 1\n    while start <= end:\n        num_list[start], num_list[end] = num_list[end], num_list[start]\n        start += 1\n        end -= 1\n    return num_list\n    \n    \ndef compare_lists(list1, list2):\n    '''\n    Write a python function to compare two lists and print them in the same format.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return \"Both the lists are empty\"\n    elif len(list1) == 0 and len(list2)!= 0:\n        return \"List 1 is empty\"\n    elif len(list1)!= 0 and len(list2) == 0:\n        return \"List 2 is empty\"\n    else:\n        if list1 == list2:\n            return \"The lists are equal\"\n        else:\n            return f\"The list 1 is {list1} and the list 2 is {list2}\"\n            \n            \ndef multiply_list(list1, list2):\n    '''\n    Write a python function to multiply two list of integers.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return -1\n    if len(list1) == 1:\n        return list1[0] * list2[0]\n    if len(list2) == 1:\n        return list1[0] * list2[0]\n    else:\n        list1 = list1[1:]\n        list2 = list2[1:]\n        if list1[0] == 0 or list2[0] == 0:\n            return 0\n        else:\n            return list1[0] * list2[0] + multiply_list(list1[1:], list2)\n            \n            \ndef rotate_list(list1, n):\n    '''\n    Write a python function to rotate a given list by n positions in a clockwise direction.\n    '''\n    if len(list1) == 0:\n        return -1\n    if len(list1) == 1:\n        return list1\n    if n == 0:\n        return list1\n    list1 = list1[1:] + [list1[0]]\n    return rotate_list(list1, n - 1)\n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num > 2 and num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef remove_duplicate(string):\n    '''\n    Write a python function to remove duplicates in a given string.\n    '''\n    if string == \"\":\n        return \"\"\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        return string[0] + string[1]\n    start = 0\n    end = len(string) - 1\n    while start <= end:\n        if string[start] == string[end]:\n            end -= 1\n        else:\n            return string[:start] + string[end+1:]\n            \n            \ndef compare_strings(string1, string2):\n    '''\n    Write a python function to compare two strings and return a list of strings of length 2\n    whose first element is string1 and whose second element is string2.\n    '''\n    if len(string1) == 0 and len(string2) == 0:\n        return [\"\", \"\"]\n    elif len(string1) == 0 or len(string2) == 0:\n        return [\"\", \"\"] if len(string1) == 0 else [\"\", \"\"]\n    else:\n        if string1[0] == string2[0]:\n            return compare_strings(string1[1:], string2[1:])\n        else:\n            return [\"\", \"\"] if string1[0] < string2[0] else [\"\", \"\"]\n            \n            \ndef find_second_maximum_number(nu"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    while index < len(num_list):\n        if num_list[index] == 0:\n            num_list.pop(index)\n            num_list.append(0)\n            continue\n        index += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)):\n        for j in range(0, len(num_list)-1):\n            if num_list[j] == 0:\n                num_list.append(num_list.pop(j))\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    index = 0\n    n = len(num_list)\n    \n    for i in range(n):\n        if num_list[i]!= 0:\n            num_list[index] = num_list[i]\n            index += 1\n            \n    for i in range(index, n):\n        num_list[i] = 0\n            \n    return num_list\n    \ndef move_zero_end(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    n = len(num_list)\n    \n    for i in range(n):\n        if num_list[i] == 0:\n            while num_list[i]!= 0:\n                num_list.append(num_list.pop(i))\n            break\n            \n    return num_list\n    \ndef move_zero_end_v2(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    n = len(num_list)\n    \n    for i in range(n):\n        if num_list[i] == 0:\n            j = i\n            while j < n:\n                if num_list[j]!= 0:\n                    num_list[j], num_list[i] = num_list[i], num_list[j]\n                    break\n                j += 1\n            break\n    \n    return num_list\n    \ndef move_zero_end_v3(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    n = len(num_list)\n    \n    for i in range(n):\n        if num_list[i] == 0:\n            num_list.append(0)\n            \n    for i in range(n):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            \n    return num_list\n    \ndef move_zero_end_v4(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    n = len(num_list)\n    \n    for i in range(n):\n        if num_list[i] == 0:\n            num_list.append(0)\n            \n    for i in range(n):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            \n    return num_list\n    \ndef move_zero_end_v5(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    n = len(num_list)\n    \n    for i in range(n):\n        if num_list[i] == 0:\n            num_list.append(0)\n            \n    for i in range(n):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            \n    return num_list\n    \ndef rotate_array(arr, k):\n    '''\n    Write a python function to rotate the array by k positions clockwise.\n    '''\n    \n    n = len(arr)\n    \n    k = k % n\n    \n    arr.reverse()\n    \n    return arr\n    \ndef rotate_array_v2(arr, k):\n    '''\n    Write a python function to rotate the array by k positions clockwise.\n    '''\n    \n    n = len(arr)\n    \n    k = k % n\n    \n    n = n - k\n    \n    a = []\n    b = []\n    \n    for i in range(n):\n        a.append(arr[i])\n        \n    for i in range(n):\n        b.append(arr[n+i])\n        \n    arr = a + b\n    \n    return arr\n    \ndef rotate_array_v3(arr, k):\n    '''\n    Write a python function to rotate the array by k positions clockwise.\n    '''\n    \n    n = len(arr)\n    \n    k = k % n\n    \n    n = n - k\n    \n    return arr[n:] + arr[:n]\n    \ndef rotate_array_v4(arr, k):\n    '''\n    Write a python function to rotate the array by k positions clockwise.\n    '''\n    \n    n = len(arr)\n    \n    k = k % n\n    \n    n = n - k\n    \n    temp = arr[n:]\n    \n    for i in range(n):\n        arr[i] = arr[i+n]\n    \n    for i in range(n):\n        arr[i+n] = temp[i]\n        \n    return arr\n    \ndef rotate_array_v5(arr, k):\n    '''\n    Write a python function to rotate the array by k positions clockwise.\n    '''\n    \n    n = len(arr)\n    \n    k = k % n\n    \n    n = n - k\n    \n    a = arr[n:]\n    b = arr[:n]\n    \n    arr = b + a\n    \n    return arr\n    \ndef rotate_array_v6(arr, k):\n    '''\n    Write a python function to rotate the array by k positions clockwise.\n    '''\n    \n    n = len(arr)\n    \n    k = k % n\n    \n    n = n - k\n    \n    a = arr[n:]\n    b = arr[:n]\n    \n    arr = b + a\n    \n    return arr\n    \ndef reverse_array_v1(arr):\n    '''\n    Write a python function to reverse the array.\n    '''\n    \n    n = len(arr)\n    \n    a = arr[:n]\n    \n    b = arr[n:]\n    \n    arr = a + b\n    \n    return arr\n    \ndef reverse_array_v2(arr):\n    '''\n    Write a python function to reverse the array.\n    '''\n    \n    n = len(arr)\n    \n    a = arr[n:]\n    \n    b = arr[:n]\n    \n    arr = a + b\n    \n    return arr\n    \ndef reverse_array_v3(arr):\n    '''\n    Write a python function to reverse the array.\n    '''\n    \n    n = len(arr)\n    \n    a = arr[n:]\n    \n    b = arr[:n]\n    \n    arr = b + a\n    \n    return arr\n    \ndef reverse_array_v4(arr):\n    '''\n    Write a python function to reverse the array.\n    '''\n    \n    n = len(arr)\n    \n    a = arr[:n]\n    \n    b = arr[n:]\n    \n    arr = a + b\n    \n    return arr\n    \ndef reverse_array_v5(arr):\n    '''\n    Write a python function to reverse the array.\n    '''\n    \n    n = len(arr)\n    \n    a = arr[n:]\n    \n    b = arr[:n]\n    \n    arr = a + b\n    \n    return arr\n    \ndef reverse_array_v6(arr):\n    '''\n    Write a python function to reverse the array.\n    '''\n    \n    n = len(arr)\n    \n    a = arr[n-1:n-1-n:-1]\n    \n    b = arr[:n-1]\n    \n    arr = b + a\n    \n    return arr\n    \ndef reverse_array_v7(arr):\n    '''\n    Write a python function to reverse the array.\n    '''\n    \n    n = len(arr)\n    \n    a = arr[n-1:n-1-n:-1]\n    \n    b = arr[:n-1]\n    \n    arr = b + a\n    \n    return arr\n    \ndef reverse_array_v8(arr):\n    '''\n    Write a python function to reverse the array.\n    '''\n    \n    n = len(arr)\n    \n    for i in range(n//2):\n        arr[i], arr[n-i-1"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while (num_list.count(0) > 0):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            for j in range(i+1, len(num_list)):\n                if num_list[j] == 0:\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # O(n) time | O(1) space\n    for i in range(len(num_list)-1):\n        if num_list[i] == 0:\n            continue\n        elif num_list[i+1]!= 0:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count = count + arr[i] ^ arr[j]\n    print(count)\n    return count\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor+=arr[i]^arr[j]\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ret = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            ret = ret + (arr[i] ^ arr[j])\n    return ret\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    result = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            result += arr[i] ^ arr[j]\n    return result\n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    from collections import defaultdict\n    \n    xor = 0\n    xor_dict = defaultdict(int)\n    for i in range(n):\n        xor_dict[arr[i]] += 1\n    for i in range(1,n):\n        xor ^= arr[i]\n    for key in xor_dict:\n        if xor_dict[key]%2 == 0:\n            xor ^= key\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    \n    for i in range(n): \n        for j in range(i+1, n): \n            result += (arr[i] ^ arr[j]) \n    return result \n    \n    \n    \n    \n    \n    \n    \nif __name__ == '__main__': \n    a = [1, 2, 3, 4] \n    print(pair_xor_Sum(a, len(a))) \n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair_xor = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n):\n            pair_xor = pair_xor ^ (arr[i] + arr[j])\n    return pair_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr)==2:\n        return (arr[0] ^ arr[1])\n    else:\n        m = int((n-1)/2)\n        return (pair_xor_Sum(arr[:m+1],m) ^ pair_xor_Sum(arr[m+1:],n-m-1))\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum + arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while len(iterable)!= 0:\n        temp = hq.heappop(iterable)\n        sorted_list.append(temp)\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [heapq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    numbers = iterable\n    hq.heapify(numbers)\n    return numbers\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    result = []\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    while h:\n        result.append(hq.heappop(h))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    min_heap = []\n    for x in iterable:\n        hq.heappush(min_heap, x)\n    result = []\n    while min_heap:\n        result.append(hq.heappop(min_heap))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    new_list = []\n    for i in iterable:\n        hq.heappush(new_list, i)\n    return new_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return_list = []\n    hq.heapify(iterable)\n    while len(iterable)!= 0:\n        return_list.append(iterable.pop())\n    return return_list\n    # list_ = list(iterable)\n    # hq.heapify(list_)\n    # while len(list_) > 1:\n    #     list_.pop(0)\n    #     list_.pop(0)\n    # return list_\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(f\"No Profit and No Loss\")\n    elif actual_cost < sale_amount:\n        print(f\"Profit is {sale_amount - actual_cost}\")\n    else:\n        print(f\"Loss is {actual_cost - sale_amount}\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n        \n        \n    \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = actual_cost.strip()\n    sale_amount = sale_amount.strip()\n    if actual_cost == sale_amount:\n        print(\"No loss, No profit!\")\n    elif actual_cost > sale_amount:\n        print(\"No loss, No profit!\")\n    else:\n        print(\"Profit, No loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_profit = actual_cost - sale_amount\n    if actual_profit > 0:\n        print(\"No Profit\")\n        return\n    elif actual_profit < 0:\n        print(\"No Loss\")\n        return\n    else:\n        print(\"In-between Profit\")\n        return\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    print(actual_cost,sale_amount)\n    if actual_cost>sale_amount:\n        return 'No Profit'\n    else:\n        return 'No Loss'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print('NO Profit and Losses')\n    else:\n        print('Profit and Losses')\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    try: \n        if actual_cost <= 0 or sale_amount <= 0:\n            raise Exception('Invalid inputs')\n        if actual_cost > sale_amount:\n            raise Exception('Invalid inputs')\n    except Exception as e:\n        print(e)\n    else:\n        return 'No profit/loss'\n    return actual_cost\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return f'No Profit/Loss from actual cost'\n    elif actual_cost<sale_amount:\n        return f'Profit from actual cost'\n    elif actual_cost>sale_amount:\n        return f'Loss from actual cost'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.00028\n    f = -44.9\n    return round((a + ((b * t) - (c * v ** 0.16)) * (d + (e * v ** 0.16))) + f,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    windchill = 35.74 + 0.6215*t - 35.75 * (v**0.16) + 0.4275*t*(v**0.16)\n    return windchill\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 5.74 + 0.6215 * t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    return w\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v\n    t = t\n    #temp in C\n    u_2 = 1.75 * (v**0.16)\n    u_4 = u_2 + 35.75\n    f = 35.75\n    u_0 = 2.45 * (t + f)\n    wc = 35.74 + 0.6215 * t - 35.75 * math.pow(u_0,0.16) + 0.4275 * math.pow(u_2,0.16) + 0.1365 * math.pow(u_4,0.16)\n    print(round(wc))\nwind_chill(3,30"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=round(v)\n    t=round(t)\n    windchill = 35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * v ** 0.16)\n    return windchill\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 13.12+0.6215*t+11.37*v**0.16\n    #return v * (0.7536 + 0.00165 * t)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    W0 = 35.74\n    W1 = 0.6215\n    W2 = -0.3965\n    W3 = 0.85\n    W4 = -0.0432\n    W5 = 0.1414\n    W6 = -0.0364\n    W7 = 0.00946\n    W8 = 0.00085\n    t_max = 100.0\n    t_min = 0.0\n    v = math.sqrt(v**2+2.0*t)\n    v_max = 3.6\n    v_min = 0.1\n    if v < v_min or v > v_max:\n        return None\n    elif v == v_min:\n        return W0\n    elif v == v_max:\n        return W1\n    else:\n        v = v * 1.8\n        t = t + 273.15\n        T_max = 35.74\n        T_min = 0.0\n        if t < T_min or t > T_max:\n            return None\n        else:\n            t = t - T_min\n            u = 6.112 * math.exp((17.67 * t) / (t + 243.5))\n            a = 35.74\n            b = 0.6215\n            c = -0.3965\n            d = 0.85\n            e = -0.0432\n            f = 0.1414\n            g = -0.0364\n            h = 0.00946\n            i = 0.00085\n            if v < a:\n                return (u + (b + (c * t) + (d * t**2) + (e * t**3)) * (v**0.5)) * 0.5\n            elif v < b:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)))))) * 0.5\n            elif v < c:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)) + (0.00132 * (v**6)))))) * 0.5\n            elif v < d:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)) + (0.00132 * (v**6)) + (0.00336 * (v**7)))))) * 0.5\n            elif v < e:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)) + (0.00132 * (v**6)) + (0.00336 * (v**7)) + (0.00473 * (v**8)))))) * 0.5\n            elif v < f:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)) + (0.00132 * (v**6)) + (0.00336 * (v**7)) + (0.00473 * (v**8)) + (0.00579 * (v**9)))))) * 0.5\n            elif v < g:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)) + (0.00132 * (v**6)) + (0.00336 * (v**7)) + (0.00473 * (v**8)) + (0.00579 * (v**9)) + (0.00666 * (v**10)))))) * 0.5\n            elif v < h:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)) + (0.00132 * (v**6)) + (0.00336 * (v**7)) + (0.00473 * (v**8)) + (0.00579 * (v**9)) + (0.00666 * (v**10)) + (0.00792 * (v**11)))))) * 0.5\n            elif v < i:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)) + (0.00132 * (v**6)) + (0.00336 * (v**7)) + (0.00473 * (v**8)) + (0.00579 * (v**9)) + (0.00666 * (v**10)) + (0.00792 * (v**11)) + (0.0102 * (v**12)))))) * 0.5\n            else:\n                return (u + (a * (1 - math.exp((-0.00015 * (v**2)) + (2.0829 * (v**3)) - (0.00032 * (v**4)) + (0.00028 * (v**5)) + (0.00132 * (v**6)) + (0.00336 * (v**7)) + (0.00473 * (v**8)) + (0.00579 * (v**9)) + (0.00666 * (v**10)) + (0.00792 * (v**11)) + (0.0102 * (v**12)) + (0.0143 * (v**13)))))) * 0.5\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    windchill=(v * 11.7) + (0.622 * t) - (0.1178 * (t ** 0.16) + 13.12)\n    return int(windchill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_unit = v * math.pow(0.6,1.8)\n    t_unit = (v * (math.pow(2.5, 0.56) - 1.0)) + 32.0\n    return int((v_unit * t_unit)/1.8)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if i[0].islower():\n            count += len(i)\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    length = []\n    for i in range(len(sample_names)):\n        length.append(len(sample_names[i]))\n    return length\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(n) for n in sample_names if n[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # some of the names that start with lower case letters\n    lower_case_names = ['james', 'RUISA', 'DILAH', 'AJAY']\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_lower = list(filter(lambda x: x[0].islower(), sample_names))\n    return sum(len(name) for name in sample_names_lower)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for name in sample_names:\n        if name[0].islower():\n            new_list.append(name)\n    return sum([len(x) for x in new_list])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam = ''\n    for i in range(len(sample_names)):\n        if nam == '':\n            nam = nam + sample_names[i]\n        else:\n            nam = nam +'' + sample_names[i]\n    return len(nam)\nprint(sample_nam([\"Jonh\", \"John\", \"john\"]))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = input(\"Enter a list of names: \")\n    names = names.split()\n    names = list(map(str, names))\n    names_to_remove = []\n    names_to_remove = list(filter(lambda x: not x.startswith(\"j\"), names))\n    for name in names_to_remove:\n        names.remove(name)\n    return len(names)\n    \nsample_nam([\"John\", \"Jerry\", \"Panda\", \"Jill\"])\nsample_nam([\"Jenny\", \"Lucy\", \"Lucas\", \"Luke\"])\nsample_nam([\"Tim\", \"Mac\", \"Chris\", \"Tom\"])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #return sum([len(name) for name in sample_names if not name[0].islower()])\n    return sum(len(name) for name in sample_names if not name[0].islower())\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    i = 0\n    while i < len(sample_names):\n        if sample_names[i][0].lower() in ['a', 'e', 'i', 'o', 'u']:\n            sample_names.pop(i)\n        else:\n            i += 1\n    return sum(len(name) for name in sample_names)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace(\"(\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\",\", \"\").replace(\".\", \"\").replace(\"-\", \"\")\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        item = re.sub(r'(\\([^)]+\\)).*', '', item)\n        if item:\n            new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return(items.strip('(').strip(')').strip())\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''\n    for item in items:\n        if item.isalpha():\n            s += item\n    return s\n    \ndef remove_parenthesis1(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''\n    for item in items:\n        if item.isalpha() and item!= '(' and item!= ')':\n            s += item\n    return s\n    \ndef remove_parenthesis2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = ''\n    for item in items:\n        if item.isalpha() and item!= '(':\n            s += item\n    return s\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    items = items.split(\",\")\n    return items\ndef select_type(items):\n    '''\n    Write a function that takes a list and returns the item that is the type of the item.\n    '''\n    items = items.split(\",\")\n    new_list = []\n    for item in items:\n        if item.isdigit():\n            item = int(item)\n        elif item.isalpha():\n            item = item.upper()\n        elif item == \"true\":\n            item = True\n        elif item == \"false\":\n            item = False\n        else:\n            item = item\n        new_list.append(item)\n    return new_list\ndef date_parser(date_string):\n    '''\n    Write a function that takes a date string and converts it to a date object.\n    '''\n    date_string = date_string.replace(\"/\", \"-\")\n    date_string = date_string.replace(\":\",\"-\")\n    date_string = date_string.replace(\"-\",\"/\")\n    date_string = date_string.split(\"-\")\n    return date_string\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    items = items.split(\",\")\n    return items\ndef select_type(items):\n    '''\n    Write a function that takes a list and returns the item that is the type of the item.\n    '''\n    items = items.split(\",\")\n    new_list = []\n    for item in items:\n        if item.isdigit():\n            item = int(item)\n        elif item.isalpha():\n            item = item.upper()\n        elif item == \"true\":\n            item = True\n        elif item == \"false\":\n            item = False\n        else:\n            item = item\n        new_list.append(item)\n    return new_list\ndef date_parser(date_string):\n    '''\n    Write a function that takes a date string and converts it to a date object.\n    '''\n    date_string = date_string.replace(\"/\", \"-\")\n    date_string = date_string.replace(\":\",\"-\")\n    date_string = date_string.replace(\"-\",\"/\")\n    date_string = date_string.split(\"-\")\n    return date_string\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    items = items.split(\",\")\n    return items\ndef select_type(items):\n    '''\n    Write a function that takes a list and returns the item that is the type of the item.\n    '''\n    items = items.split(\",\")\n    new_list = []\n    for item in items:\n        if item.isdigit():\n            item = int(item)\n        elif item.isalpha():\n            item = item.upper()\n        elif item == \"true\":\n            item = True\n        elif item == \"false\":\n            item = False\n        else:\n            item = item\n        new_list.append(item)\n    return new_list\ndef date_parser(date_string):\n    '''\n    Write a function that takes a date string and converts it to a date object.\n    '''\n    date_string = date_string.replace(\"/\", \"-\")\n    date_string = date_string.replace(\":\",\"-\")\n    date_string = date_string.replace(\"-\",\"/\")\n    date_string = date_string.split(\"-\")\n    return date_string\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    items = items.split(\",\")\n    return items\ndef select_type(items):\n    '''\n    Write a function that takes a list and returns the item that is the type of the item.\n    '''\n    items = items.split(\",\")\n    new_list = []\n    for item in items:\n        if item.isdigit():\n            item = int(item)\n        elif item.isalpha():\n            item = item.upper()\n        elif item == \"true\":\n            item = True\n        elif item == \"false\":\n            item = False\n        else:\n            item = item\n        new_list.append(item)\n    return new_list\ndef date_parser(date_string):\n    '''\n    Write a function that takes a date string and converts it to a date object.\n    '''\n    date_string = date_string.replace(\"/\", \"-\")\n    date_string = date_string.replace(\":\",\"-\")\n    date_string = date_string.replace(\"-\",\"/\")\n    date_string = date_string.split(\"-\")\n    return date_string\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    items = items.split(\",\")\n    return items\ndef select_type(items):\n    '''\n    Write a function that takes a list and returns the item that is the type of the item.\n    '''\n    items = items.split(\",\")\n    new_list = []\n    for item in items:\n        if item.isdigit():\n            item = int(item)\n        elif item.isalpha():\n            item = item.upper()\n        elif item == \"true\":\n            item = True\n        elif item == \"false\":\n            item = False\n        else:\n            item = item\n        new_list.append(item)\n    return new_list\ndef date_parser(date_string):\n    '''\n    Write a function that takes a date string and converts it to a date object.\n    '''\n    date_string = date_string.replace(\"/\", \"-\")\n    date_string = date_string.replace(\":\",\"-\")\n    date_string = date_string.replace(\"-\",\"/\")\n    date_string = date_string.split(\"-\")\n    return date_string\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    items = items.split(\",\")\n    return items\ndef select_type(items):\n    '''\n    Write a function that takes a list and returns the item that is the type of the item.\n    '''\n    items = items.split(\",\")\n    new_list = []\n    for item in items:\n        if item.isdigit():\n            item = int(item)\n        elif item.isalpha():\n            item = item.upper()\n        elif item == \"true\":\n            item = True\n        elif item == \"false\":\n            item = False\n        else:\n            item = item\n        new_list.append(item)\n    return new_list\ndef date_parser(date_string):\n    '''\n    Write a function that takes a date string and converts it to a date object.\n    '''\n    date_string = date_string.replace(\"/\", \"-\")\n    date_string = date_string.replace(\":\",\"-\")\n    date_string = date_string.replace(\"-\",\"/\")\n    date_string = date_string.split(\"-\")\n    return date_string\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    items = items.split(\",\")\n    return items\ndef select_type(items):"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not items:\n        return None\n    else:\n        items = items.replace('(','').replace(')','')\n        return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # code goes here\n    items = re.sub(r'\\(([^)]+)\\)', r'\\1', items)\n    #print(items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # TODO: Write a function that removes parenthesis and what is inbetween them from a string.\n    # example: remove_parenthesis(\"Hi (there)!\") => \"Hi there!\"\n    return items.replace(\"(\", \"\").replace(\")\", \"\")\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        x = re.sub(r'\\(.*?\\)', '', item)\n        new_items.append(x)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in range(0, len(items)):\n        if items[i]!= \" \":\n            new_items.append(items[i])\n    new_items = \"\".join(new_items)\n    return new_items\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int((n * (n + 1)) / 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    lst = []\n    while n > 0:\n        lst.append(n)\n        n -= 1\n    return lst\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n > 0:\n        return n*(n-1)\n    else:\n        return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # if n is odd then the next odd number will be non-diagonal\n    if n % 2 == 1:\n        n += 1\n    \n    # calculate the nth non-diagonal number\n    nth_non_diagonal = n * (n + 1) // 2\n    \n    # if nth_non_diagonal is less than 2 then the answer is 1\n    if nth_non_diagonal < 2:\n        return 1\n    \n    # otherwise return the nth non-diagonal number\n    return nth_non_diagonal"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    x = 1\n    y = 1\n    n_sum = 0\n    while x <= n:\n        x += 1\n        y += 1\n        n_sum += x**2\n    return n_sum-1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1)/2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n*(n+1))//2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    ans = 1\n    for x in range(n):\n        ans += x + 1\n    return ans\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    return (n**2 + 1) % 4 == 1\n    \nif __name__ == \"__main__\":\n    import sys\n    for line in sys.stdin:\n        print(is_nonagonal(line)"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    t = text.lower()\n    \n    #if we have a z at the start or at the end of the word, then we return false\n    if re.search(r'\\bz', t)!= None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz=[]\n    list_a = re.split(r'[^a-zA-Z0-9]',text)\n    for i in range(len(list_a)):\n        list_a[i]=list_a[i].lower()\n    for i in range(len(list_a)):\n        if list_a[i] not in wordz:\n            wordz.append(list_a[i])\n    return wordz\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.match(\"^.*z$\", text)\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    #m = re.search(r'[aeiou]{2,}(z|Z)?[aeiou]{2,}', text)\n    m = re.search(r'[aeiou]{2,}(z|Z)?$', text)\n    return m!= None\n    \ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    m = re.search(r'^[aeiou]{2,}[aeiou]{2,}(z|Z)?', text)\n    return m!= None\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    m = re.search(r'z(e|E)?[aeiou]{2,}', text)\n    return m!= None\n    \ndef text_match_wordz_both_ends(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'z(e|E)?[aeiou]{2,}', text)\n    return m!= None\n    \ndef text_match_double_words(text):\n    '''\n    Write a function that checks if a strings contains double words: \n    A double word is defined as a sequence of non-space characters, including the space but not including the quote.\n    In other words, a double word is a sequence of non-space characters (no quote), with at least two characters and not \n    including the quote. \n    E.g. in the string '\"The quick brown fox jumps over the lazy dog\"'  we have 3 words: 'The', 'quick' and 'brown'.\n    '''\n    \n    #m = re.search(r'[^\\s]{2,}(?<!\\\\)\\\\(?:[^\\\\]|\\\\\\)|\\\\)(?:[^\\\\]|\\\\\\)|\\\\)\\\\(?:[^\\\\]|\\\\\\)|\\\\)', text)\n    m = re.search(r'\\b(?:[^\\s]|\\s){2,}\\b(?<!\\\\)\\\\(?:[^\\\\]|\\\\\\)|\\\\)(?:[^\\\\]|\\\\\\)|\\\\)\\\\(?:[^\\\\]|\\\\\\)|\\\\)', text)\n    return m!= None\n    \ndef text_match_dashes(text):\n    '''\n    Write a function that checks if a strings contains only dashes.\n    '''\n    \n    #m = re.search(r'[-]{2,}', text)\n    m = re.search(r'\\-+', text)\n    return m!= None\n    \ndef text_match_underscores(text):\n    '''\n    Write a function that checks if a strings contains only underscores.\n    '''\n    \n    #m = re.search(r'_{2,}', text)\n    m = re.search(r'_+', text)\n    return m!= None\n    \ndef text_match_spaces(text):\n    '''\n    Write a function that checks if a strings contains only spaces.\n    '''\n    \n    #m = re.search(r'\\s{2,}', text)\n    m = re.search(r'\\s+', text)\n    return m!= None\n    \ndef text_match_upper_lower(text):\n    '''\n    Write a function that checks if a strings contains only uppercase and lowercase letters.\n    '''\n    \n    #m = re.search(r'[A-Z]+[a-z]+', text)\n    m = re.search(r'[A-Z][a-z]+', text)\n    return m!= None\n    \ndef text_match_digits(text):\n    '''\n    Write a function that checks if a strings contains only digits.\n    '''\n    \n    #m = re.search(r'\\d+', text)\n    m = re.search(r'\\d+', text)\n    return m!= None\n    \ndef text_match_one_of(words):\n    '''\n    Write a function that checks if a strings contains only words from a list.\n    '''\n    \n    #m = re.search(r'\\b[^\\s]{2,}(?<!\\\\)\\\\(?:[^\\\\]|\\\\\\)|\\\\)(?:[^\\\\]|\\\\\\)|\\\\)\\\\(?:[^\\\\]|\\\\\\)|\\\\)', text)\n    m = re.search(r'\\b(?:[^\\s]|\\s){2,}\\b(?<!\\\\)\\\\(?:[^\\\\]|\\\\\\)|\\\\)(?:[^\\\\]|\\\\\\)|\\\\)\\\\(?:[^\\\\]|\\\\\\)|\\\\)', text)\n    return m!= None\n    \ndef text_match_emoticon(text):\n    '''\n    Write a function that checks if a strings contains any emoticons.\n    '''\n    \n    #m = re.search(r':\\)|:-|=|:-|=|=|=|=|=|=:|=|=:|=:|=|:|=|:|=|=|=|=|=|=|=|=|=|:|:|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|="
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    mid = text.find('z')\n    if mid == 0:\n        return False\n    if mid == (len(text) - 1):\n        return False\n    if (mid - 1) >= 0 and (mid + 1) < len(text):\n        if text[mid - 1].lower() == 'z' and text[mid + 1].lower() == 'z':\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #https://stackoverflow.com/questions/193696/regular-expression-to-check-if-a-string-contains-a-substring-with-spaces\n    #https://www.w3schools.com/python/python_regex.asp\n    #https://www.w3schools.com/python/python_ref_string.asp\n    #https://www.w3schools.com/python/python_regular_expressions.asp\n    #https://stackoverflow.com/questions/1936828/how-to-check-if-a-string-contains-a-substring-with-spaces\n    #https://www.w3schools.com/python/python_regex.asp\n    #https://www.w3schools.com/python/python_ref_string.asp\n    #https://www.w3schools.com/python/python_regular_expressions.asp\n    #https://stackoverflow.com/questions/1936828/how-to-check-if-a-string-contains-a-substring-with-spaces\n    \n    #print(re.search(r'(z)([\\W_]+)(z)([\\W_]+)', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = text.lower()\n    #text = re.sub(r\"\\s+\", \" \", text)\n    if re.match(r\"[a-z]+\\s?z\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # correct_words = re.compile(r'\\bz\\b')\n    # return correct_words.search(text)\n    #correct_words = re.compile(r'\\bz\\b')\n    #return correct_words.search(text)\n    # return text[1:-1]\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #print(len(text))\n    text = text.lower()\n    #print(text)\n    regex_str = r\"(z)(.*\\w\\w)\"\n    result = re.search(regex_str, text)\n    print(result)\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_middle_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z' inside the word, except at the start and end of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_start_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z' inside the word, except at the start of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_end_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z' inside the word, except at the end of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_wordz_middle_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' inside the word, except at the start of the word, except at the start of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' inside the word, except at the end of the word, except at the end of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_middle_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' inside the word, except at the start of the word, except at the start of the word, except at the start of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_middle_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' inside the word, except at the end of the word, except at the end of the word, except at the end of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\ndef text_match_wordz_middle_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' inside the word, except at the end of the word, except at the end of the word, except at the start of the word.\n    '''\n    match = re.search(r'z', text)\n    if match:\n        return True\n    return False\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[-k:] + input[:-k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #print(\"The original input list is : {}\".format(input))\n    start = 0\n    end = len(input) - 1\n    while start <= end: \n        if end < k: \n            break\n        if end < k: \n            end -= 1\n            continue\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    result = []\n    for i in range(len(arr)):\n        if i <= k:\n            result.append(arr[i])\n    return result"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input.copy()\n    arr.reverse()\n    if k >= len(arr):\n        return arr\n    else:\n        return arr[0:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    j = len(input)-1\n    while i<=j:\n        temp = input[i]\n        input[i] = input[j]\n        input[j] = temp\n        j-=1\n        i+=1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k <= 0:\n        return None\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    array = input[:k]\n    reverse_array(array)\n    input[:k] = array\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input) -1\n    while start < end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start += 1\n        end -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #Make use of array slicing\n    \n    #Take input\n    n = len(input) \n    \n    #Initalize output\n    output = []\n    \n    #Iterate till input is not zero\n    while k:\n        #Store and pop\n        temp = input.pop()\n        output.append(temp)\n        #Decrement\n        k -= 1\n    #Reverse output\n    output.reverse()\n    \n    #Return output\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # For the first element, reverse the entire array \n    # Recursively call for the remaining array\n    if k<=0: return\n    input[0],input[k] = input[k],input[0]\n    return reverse_Array_Upto_K(input, k-1)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # write your function here\n    return (test_tup + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #test_tup[0].append(test_dict)\n    test_tup[0] += (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if isinstance(test_tup, tuple) and isinstance(test_dict, dict):\n        if len(test_tup) == 0:\n            return test_dict\n        else:\n            return test_tup + (test_dict,)\n    else:\n        return None\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup_1 = test_tup[0]\n    for k in test_dict.keys():\n        tup_1 = tup_1 + (k,test_dict[k])\n    return tup_1\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if test_tup:\n        if len(test_tup) == 0:\n            test_tup = (test_dict, )\n        else:\n            test_tup = tuple(list(test_tup) + list(test_dict.items()))\n    else:\n        test_tup = (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    list_tup = list(test_tup)\n    list_tup.append(test_dict)\n    return tuple(list_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = test_tup + (test_dict,)\n    return tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #First, we will store the cost of each path (the sum of the cost of the path) and the number of paths that have that cost\n    visited_cost = {}\n    \n    #Now, we will have to traverse through the matrix. We will build a stack of cells that we have yet to visit. The stack will keep track of a cell, its current cost, and the path cost. When we visit a cell, we will add it to the stack, and we will check if the cell is in the visited_cost dictionary. If it is, we will update the current cost of the cell with the current cost + cost of the cell in the path and the number of paths that have this cost\n    #The following code takes care of the corner cases, and will allow us to access the matrix by indexing the matrix\n    for i in range(0, N):\n        for j in range(0, N):\n            if i == 0 and j == 0:\n                visited_cost[(i, j)] = cost[i][j]\n            if i == 0 and j == N - 1:\n                visited_cost[(i, j)] = cost[i][j]\n            if i == N - 1 and j == 0:\n                visited_cost[(i, j)] = cost[i][j]\n            if i == N - 1 and j == N - 1:\n                visited_cost[(i, j)] = cost[i][j]\n            \n            if i!= 0 and i!= N - 1 and j!= 0 and j!= N - 1:\n                if (i, j) in visited_cost:\n                    visited_cost[(i, j)] = cost[i][j] + visited_cost[(i-1, j)] + visited_cost[(i, j-1)] - visited_cost[(i-1, j-1)]\n                else:\n                    visited_cost[(i, j)] = cost[i][j] + visited_cost[(i-1, j)] + visited_cost[(i, j-1)]\n    \n    #We will now check each path for the maximum cost and return the maximum\n    max_path = []\n    max_path_cost = 0\n    max_path_count = 0\n    \n    #We need to traverse the dictionary, from the maximum to the minimum, and check if the key exists, if it does, we will update the max_path_cost, max_path_count, and max_path\n    for i in sorted(visited_cost, key=visited_cost.get, reverse=True):\n        if visited_cost[i] >= max_path_cost:\n            max_path = [i]\n            max_path_cost = visited_cost[i]\n            max_path_count = 1\n        elif visited_cost[i] == max_path_cost:\n            max_path.append(i)\n            max_path_count += 1\n    \n    #We will return the maximum cost of the path\n    return max_path_cost\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    from collections import deque\n    m, n = len(cost), len(cost[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    visited = {}\n    max_avg = -sys.maxsize - 1\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if (i,j) in visited:\n                visited[i,j] += cost[i][j]\n            else:\n                visited[i,j] = cost[i][j]\n    for i in visited:\n        avg = visited[i] / len(visited[i])\n        if avg > max_avg:\n            max_avg = avg\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total_cost = 0\n    row_count = len(cost)\n    col_count = len(cost[0])\n    visited_cells = 0\n    # print \"row_count: \", row_count, \"col_count: \", col_count\n    for i in range(0, row_count):\n        for j in range(0, col_count):\n            if cost[i][j]!= 0:\n                visited_cells += 1\n                total_cost += cost[i][j]\n                # print i, j, cost[i][j], total_cost, visited_cells\n                # print \"************************\"\n    print total_cost, visited_cells\n    return int(total_cost/visited_cells)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    res = 0\n    n = len(cost)\n    if n == 0:\n        return res\n    m = len(cost[0])\n    visited = set()\n    visited.add((0, 0))\n    visited.add((n-1, m-1))\n    q = deque()\n    q.append((0, 0))\n    while q:\n        x, y = q.popleft()\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        res += cost[x][y]\n        if x < n-1:\n            q.append((x+1, y))\n        if x > 0:\n            q.append((x-1, y))\n        if y < m-1:\n            q.append((x, y+1))\n        if y > 0:\n            q.append((x, y-1))\n    return res/len(visited)"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Can use dynamic programming to make the problem solvable.\n    # For each cell, we have 4 options - diagonal (right and down), horizontal and vertical.\n    # Store this information in a table - each cell is a 2-D array and the matrix of distances is used for this.\n    # Calculate the maximum path possible in each cell.\n    # Combine both paths and return the maximum of both.\n    # DP table is then used for the solution.\n    \n    # DP table\n    table = [[[0,0] for _ in range(n)] for _ in range(n)]\n    \n    # DP table for computing max path\n    max_path = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # for each cell we have 4 possibilities - diagonal (right and down), horizontal and vertical\n    for i in range(n):\n        for j in range(n):\n            # cell has 4 options:\n            # 1) diagonal (right and down)\n            if (i+1 < n and j+1 < n):\n                max_path[i][j] = min(max_path[i][j], max_path[i+1][j] + cost[i][j], max_path[i][j+1] + cost[i][j])\n            # 2) horizontal\n            if (i+1 < n):\n                max_path[i][j] = min(max_path[i][j], max_path[i][j+1] + cost[i][j])\n            # 3) vertical\n            if (j+1 < n):\n                max_path[i][j] = min(max_path[i][j], max_path[i][j+1] + cost[i][j])\n            # 4) diagonal (right and down)\n            if (i-1 >= 0 and j+1 < n):\n                max_path[i][j] = min(max_path[i][j], max_path[i-1][j] + cost[i][j], max_path[i][j+1] + cost[i][j])\n    \n    # for each cell we have two possibilities - diagonal (right and down), horizontal and vertical\n    for i in range(n):\n        for j in range(n):\n            # if we are not at a diagonal or a horizontal or a vertical cell,\n            # then we need to take the minimum of the two options\n            if (i+1 < n and j+1 < n) or (i+1 < n) or (j+1 < n):\n                table[i][j] = min(max_path[i][j], max_path[i+1][j] + cost[i][j], max_path[i][j+1] + cost[i][j])\n    \n    # return the table\n    return table\n    \ncost = [[0,10,12,0],\n        [10,0,0,14],\n        [12,0,0,0],\n        [0,14,0,15]]\nprint(maxAverageOfPath(cost))"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    dp = [[0]*n for _ in range(m)]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # If the list is empty\n    if len(cost) == 0:\n        return -1\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m=len(cost)\n    n=len(cost[0])\n    \n    #matrix to store the path cost.\n    cost_matrix=[[0 for i in range(n)] for j in range(m)]\n    \n    \n    #initlaise cost matrix.\n    for i in range(m):\n        for j in range(n):\n            cost_matrix[i][j]=cost[i][j]\n    \n    \n    #iterate through the matrix row-wise and column wise.\n    for i in range(m):\n        for j in range(n):\n            \n            #if we have not yet visited this cell, then we will visit it in the future.\n            if cost_matrix[i][j]==0:\n                \n                #if we are at the right end, we can go left.\n                if j==0:\n                    cost_matrix[i][j] = cost_matrix[i][j+1] + cost_matrix[i-1][j]\n                    \n                #if we are at the bottom end, we can go up.\n                elif i==0:\n                    cost_matrix[i][j] = cost_matrix[i+1][j] + cost_matrix[i][j-1]\n                    \n                #if we are on the top right, we can go down.\n                elif j==n-1 and i==m-1:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j-1]\n                    \n                #if we are on the top left, we can go down.\n                elif j==0 and i==m-1:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j+1]\n                    \n                #if we are on the bottom left, we can go up.\n                elif j==n-1 and i==0:\n                    cost_matrix[i][j] = cost_matrix[i+1][j] + cost_matrix[i][j-1]\n                    \n                #if we are on the bottom right, we can go up.\n                elif j==n-1 and i==0:\n                    cost_matrix[i][j] = cost_matrix[i+1][j] + cost_matrix[i][j+1]\n                    \n                #if we are on the right, we can go down.\n                elif j==n-1:\n                    cost_matrix[i][j] = cost_matrix[i][j-1] + cost_matrix[i+1][j]\n                    \n                #if we are on the left, we can go down.\n                elif j==0:\n                    cost_matrix[i][j] = cost_matrix[i][j+1] + cost_matrix[i-1][j]\n                    \n                #if we are on the diagonal upper left, we can go up and down.\n                elif i==0 and j==0:\n                    cost_matrix[i][j] = cost_matrix[i+1][j] + cost_matrix[i][j+1]\n                    \n                #if we are on the diagonal upper right, we can go up and down.\n                elif i==0 and j==n-1:\n                    cost_matrix[i][j] = cost_matrix[i+1][j] + cost_matrix[i][j-1]\n                    \n                #if we are on the diagonal lower left, we can go up and down.\n                elif i==m-1 and j==0:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j+1]\n                    \n                #if we are on the diagonal lower right, we can go up and down.\n                elif i==m-1 and j==n-1:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j-1]\n                \n                #if we are on the left, we can go up.\n                elif j==0:\n                    cost_matrix[i][j] = cost_matrix[i][j+1] + cost_matrix[i-1][j]\n                    \n                #if we are on the right, we can go up.\n                elif j==n-1:\n                    cost_matrix[i][j] = cost_matrix[i][j-1] + cost_matrix[i-1][j]\n                \n                #if we are on the top, we can go up.\n                elif i==0:\n                    cost_matrix[i][j] = cost_matrix[i+1][j] + cost_matrix[i][j-1]\n                \n                #if we are on the bottom, we can go down.\n                elif i==m-1:\n                    cost_matrix[i][j] = cost_matrix[i][j-1] + cost_matrix[i-1][j]\n                \n                #if we are on the bottom left, we can go down.\n                elif j==0 and i==m-1:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j+1]\n                \n                #if we are on the bottom right, we can go down.\n                elif j==n-1 and i==m-1:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j-1]\n                \n                #if we are on the diagonal lower left, we can go down and up.\n                elif i==0 and j==0:\n                    cost_matrix[i][j] = cost_matrix[i][j+1] + cost_matrix[i+1][j]\n                \n                #if we are on the diagonal lower right, we can go down and up.\n                elif i==0 and j==n-1:\n                    cost_matrix[i][j] = cost_matrix[i][j-1] + cost_matrix[i+1][j]\n                \n                #if we are on the diagonal upper left, we can go down and up.\n                elif i==m-1 and j==0:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j+1]\n                \n                #if we are on the diagonal upper right, we can go down and up.\n                elif i==m-1 and j==n-1:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j-1]\n                \n                #if we are on the left, we can go up.\n                elif j==0:\n                    cost_matrix[i][j] = cost_matrix[i][j+1] + cost_matrix[i-1][j]\n                \n                #if we are on the right, we can go up.\n                elif j==n-1:\n                    cost_matrix[i][j] = cost_matrix[i][j-1] + cost_matrix[i-1][j]\n                \n                #if we are on the top, we can go up.\n                elif i==0:\n                    cost_matrix[i][j] = cost_matrix[i+1][j] + cost_matrix[i][j-1]\n                \n                #if we are on the bottom, we can go down.\n                elif i==m-1:\n                    cost_matrix[i][j] = cost_matrix[i][j-1] + cost_matrix[i-1][j]\n                    \n                #if we are on the bottom left, we can go down.\n                elif j==0 and i==m-1:\n                    cost_matrix[i][j] = cost_matrix[i-1][j] + cost_matrix[i][j+1]"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_data={}\n    for name,value in students.items():\n        h_weight,h_height=value\n        if h_height>h and h_weight>w:\n            new_data[name]=value\n    return new_data\nprint(filter_data(students,1.8,40))\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for student in students.keys():\n        if (students[student][0] > h and students[student][1] > w):\n            new_dict[student] = students[student]\n    return new_dict\n    \nstudents = {\"Peter\": (175, 75), \"John\": (179, 78), \"Sara\": (180, 75), \"Amy\": (172, 78)}\nh = 174\nw = 80\nprint(filter_data(students, h, w))\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_data = {}\n    for key,value in students.items():\n        students_data[key] = value[0], value[1]\n    students_data_copy = students_data.copy()\n    for key,value in students_data_copy.items():\n        if students_data_copy[key][0] >= h and students_data_copy[key][1] >= w:\n            students.pop(key)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res=[]\n    for key,value in students.items():\n        if value[0]>=h and value[1]>=w:\n            res.append(key)\n    print(res)\n    \n    \n    \n    \ndef dict_operations(students):\n    '''\n    The input is given as a dictionary with student names as keys and student dictionaries (with names, grades, books) as values. Write a function that:\n    - add new students with names and grades to the dictionary;\n    - add new books to the dictionary;\n    - delete students and books by name;\n    - sort students by name ascending;\n    - return a dictionary of students names and grades.\n    '''\n    students['Tom']={'name':'Tom','grade':'A','books':['Math','Science']}\n    students['John']={'name':'John','grade':'A','books':['Math','Science']}\n    students['Sara']={'name':'Sara','grade':'A','books':['English','Math']}\n    students['Alex']={'name':'Alex','grade':'A','books':['English','Math']}\n    students['Sam']={'name':'Sam','grade':'A','books':['English','Math']}\n    students['Sajna']={'name':'Sajna','grade':'B','books':['English','Math']}\n    students['Vasya']={'name':'Vasya','grade':'B','books':['English','Math']}\n    students['Samantha']={'name':'Samantha','grade':'A','books':['English','Math']}\n    students['Alfonso']={'name':'Alfonso','grade':'B','books':['English','Math']}\n    students['Chandler']={'name':'Chandler','grade':'A','books':['English','Math']}\n    students['Rachel']={'name':'Rachel','grade':'A','books':['English','Math']}\n    students['Joe']={'name':'Joe','grade':'A','books':['English','Math']}\n    students['Timothy']={'name':'Timothy','grade':'B','books':['English','Math']}\n    students['Anna']={'name':'Anna','grade':'A','books':['English','Math']}\n    students['Tyler']={'name':'Tyler','grade':'B','books':['English','Math']}\n    students['Natalie']={'name':'Natalie','grade':'B','books':['English','Math']}\n    students['Reece']={'name':'Reece','grade':'B','books':['English','Math']}\n    students['Yvonne']={'name':'Yvonne','grade':'A','books':['English','Math']}\n    students['Natasha']={'name':'Natasha','grade':'A','books':['English','Math']}\n    students['Molly']={'name':'Molly','grade':'A','books':['English','Math']}\n    students['Ava']={'name':'Ava','grade':'A','books':['English','Math']}\n    students['Rose']={'name':'Rose','grade':'A','books':['English','Math']}\n    students['Leo']={'name':'Leo','grade':'B','books':['English','Math']}\n    students['Mark']={'name':'Mark','grade':'A','books':['English','Math']}\n    students['Cody']={'name':'Cody','grade':'B','books':['English','Math']}\n    students['Daniel']={'name':'Daniel','grade':'A','books':['English','Math']}\n    students['Lily']={'name':'Lily','grade':'B','books':['English','Math']}\n    students['Brennan']={'name':'Brennan','grade':'B','books':['English','Math']}\n    students['Rebecca']={'name':'Rebecca','grade':'A','books':['English','Math']}\n    students['Sebastian']={'name':'Sebastian','grade':'B','books':['English','Math']}\n    students['Aidan']={'name':'Aidan','grade':'B','books':['English','Math']}\n    students['Trevor']={'name':'Trevor','grade':'A','books':['English','Math']}\n    students['Michael']={'name':'Michael','grade':'B','books':['English','Math']}\n    students['Melanie']={'name':'Melanie','grade':'A','books':['English','Math']}\n    students['Tobias']={'name':'Tobias','grade':'A','books':['English','Math']}\n    students['Dean']={'name':'Dean','grade':'B','books':['English','Math']}\n    students['George']={'name':'George','grade':'B','books':['English','Math']}\n    students['Randy']={'name':'Randy','grade':'A','books':['English','Math']}\n    students['Harold']={'name':'Harold','grade':'B','books':['English','Math']}\n    students['Sandra']={'name':'Sandra','grade':'B','books':['English','Math']}\n    students['Maxwell']={'name':'Maxwell','grade':'A','books':['English','Math']}\n    students['Bob']={'name':'Bob','grade':'A','books':['English','Math']}\n    students['Brad']={'name':'Brad','grade':'B','books':['English','Math']}\n    students['James']={'name':'James','grade':'A','books':['English','Math']}\n    students['Tyler']={'name':'Tyler','grade':'B','books':['English','Math']}\n    students['Nate']={'name':'Nate','grade':'B','books':['English','Math']}\n    students['Vance']={'name':'Vance','grade':'A','books':['English','Math']}\n    students['Xander']={'name':'Xander','grade':'B','books':['English','Math']}\n    students['Kim']={'name':'Kim','grade':'B','books':['English','Math']}\n    students['Carol']={'name':'Carol','grade':'A','books':['English','Math']}\n    students['Kelly']={'name':'Kelly','grade':'B','books':['English','Math']}\n    students['Samantha']={'name':'Samantha','grade':'B','books':['English','Math']}\n    students['Travis']={'name':'Travis','grade':'B','books':['English','Math']}\n    students['Karen']={'name':'Karen','grade':'A','books':['English','Math']}\n    students['Alisa']={'name':'Alisa','grade':'B','books':['English','Math']}\n    students['Katie']={'name':'Katie','grade':'B','books':['English','Math']}\n    students['Elliot']={'name':'Elliot','grade':'B','books':['English','Math']}\n    students['Sam']={'name':'Sam','grade':'A','books':['English','Math']}\n    students['Linda']={'name':'Linda','grade':'A','books':['English','Math']}\n    students['Glenn']={'name':'Glenn','grade':'B','books':['English','Math']}\n    students['Yvonne']={'name':'Yvonne','grade':'A','books':['English','Math']}\n    students['Chandler']={'name':'Chandler','grade':'A','books':['English','Math']}\n    students['Caleb']={'name':'Caleb','grade':'"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for k,v in students.items():\n        if (h and w) in v:\n            yield k\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return{name:val for name,val in students.items() if val[0]>h and val[1]>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print('students with height and weight above the given height and weight:')\n    for name, height_weight in students.items():\n        if height_weight[0]>h and height_weight[1]>w:\n            print(name)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {key:val for key,val in students.items() if (val[0]>h and val[1]>w)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            students_filtered[student] = (height, weight)\n    return students_filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    # Define a function\n    def filter_data(students,min_height,min_weight):\n        \n        # Update code here\n        students_filtered = {}\n        for i,j in students.items():\n            if j[0] >= min_height and j[1] >= min_weight:\n                students_filtered[i] = j\n        return students_filtered\n    \n    # Filter the data\n    return filter_data(students,h,w)\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([eq(num1, num2) for num1, num2 in zip(nums1, nums2)])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    l1 = len(nums1)\n    l2 = len(nums2)\n    \n    count = 0\n    \n    for i in range(l1):\n        for j in range(l2):\n            if nums1[i] == nums2[j] and i == j:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict_num1 = {}\n    dict_num2 = {}\n    for i in range(len(nums1)):\n        dict_num1[nums1[i]] = i\n    for i in range(len(nums2)):\n        dict_num2[nums2[i]] = i\n    return len([x for x in dict_num1.keys() if dict_num2[x] == dict_num1[x]])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #Solution 1 - using dictionary\n    #dictionary = {}\n    #for i in range(len(nums1)):\n    #    dictionary[nums1[i]] = nums1[i]\n    #for i in range(len(nums2)):\n    #    if nums2[i] in dictionary:\n    #        nums2[i] = 1\n    #    else:\n    #        nums2[i] = 0\n    #return nums2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i in range(len(nums1)) if nums1[i] == nums2[i]])\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(1, power + 1):\n        sum += math.pow(base, i)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    power = str(power)\n    power = int(power)\n    sum = 0\n    while(power > 0):\n        sum += int(base[len(base) - 1 - power])\n        power -= 1\n    return sum\nprint(power_base_sum(3, 0))\nprint(power_base_sum(100, 1))\nprint(power_base_sum(100, 2))\nprint(power_base_sum(1, 100))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # assert that the arguments are non-negative\n    assert(base >= 0 and power >= 0)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    a = str(base ** power)\n    sum_ = 0\n    for i in a:\n        sum_ += int(i)\n    return sum_\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for i in range(power+1):\n        base_sum += (int(str(base**i)))\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for i in range(power):\n        power_sum += int(base) ** (i+1)\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    if (base < 0):\n        raise ValueError(\"Negative base value\")\n    if (power < 0):\n        raise ValueError(\"Negative power value\")\n    if base == 0 and power == 0:\n        return 0\n    while(power):\n        sum += base\n        base = base * 10\n        power = power - 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #for some reason, when using a string to calculate the sum of a string, you need to specify a start position and an end position.\n    #I would like to make a function that allows you to just calculate a sum from a start position to an end position.\n    sum = 0\n    for index in range(len(str(base))):\n        sum += int(str(base)[index])**power\n    return sum\nprint(power_base_sum(3,8)) #should print 81\nprint(power_base_sum(3,0)) #should print 0\nprint(power_base_sum(2,0)) #should print 2\nprint(power_base_sum(1,0)) #should print 1\nprint(power_base_sum(10,1)) #should print 11\nprint(power_base_sum(10,2)) #should print 101\nprint(power_base_sum(3,4)) #should print 81\nprint(power_base_sum(3,5)) #should print 27\nprint(power_base_sum(3,6)) #should print 243\nprint(power_base_sum(3,7)) #should print 291\nprint(power_base_sum(3,8)) #should print 33\nprint(power_base_sum(3,9)) #should print 333\nprint(power_base_sum(3,10)) #should print 333\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while base >= 10:\n        result += base%10\n        base = int(base/10)\n    result += base\n    while power >= 10:\n        result += power%10\n        power = int(power/10)\n    result += power\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power <= 0:\n        return 0\n    return sum(int(i) for i in str(base ** power))\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #sample_string = '''\n    #\"Saksham Das\"\n    #'''\n    #output = extract_quotation(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = extract_quotation(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\n    #'''\n    #output = extract_quotation(sample_string)\n    #print(output)\n    \n    sample_string = '''\n    \"This is the first line,\n    This is the second line.\n    '''\n    output = extract_quotation(sample_string)\n    print(output)\n    \ndef remove_quotation_marks(text1):\n    '''\n    Write a function to remove quotation marks from the given string.\n    '''\n    #sample_string = '''\n    #\"Saksham Das\"\n    #'''\n    #output = remove_quotation_marks(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = remove_quotation_marks(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\n    #'''\n    #output = remove_quotation_marks(sample_string)\n    #print(output)\n    \n    sample_string = '''\n    \"This is the first line,\n    This is the second line.\"\n    '''\n    output = remove_quotation_marks(sample_string)\n    print(output)\n    \ndef string_cleanup(text1):\n    '''\n    Write a function to make the text in the given string more readable.\n    '''\n    #sample_string = '''\n    #This is the first line,\n    #This is the second line.\n    #'''\n    #output = string_cleanup(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\n    #'''\n    #output = string_cleanup(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_cleanup(sample_string)\n    #print(output)\n    \n    sample_string = '''\n    \"This is the first line,\n    This is the second line.\"\n    '''\n    output = string_cleanup(sample_string)\n    print(output)\n    \ndef string_format(text1):\n    '''\n    Write a function to remove special characters (except single quotation marks) from the given string.\n    '''\n    #sample_string = '''\n    #\"Saksham Das\"\n    #'''\n    #output = string_format(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_format(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_format(sample_string)\n    #print(output)\n    \n    sample_string = '''\n    \"This is the first line,\n    This is the second line.\"\n    '''\n    output = string_format(sample_string)\n    print(output)\n    \ndef string_count(text1):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    #sample_string = '''\n    #\"Saksham Das\"\n    #'''\n    #output = string_count(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_count(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_count(sample_string)\n    #print(output)\n    \n    sample_string = '''\n    \"This is the first line,\n    This is the second line.\"\n    '''\n    output = string_count(sample_string)\n    print(output)\n    \ndef string_join(text1):\n    '''\n    Write a function to join the words in the given string.\n    '''\n    #sample_string = '''\n    #\"Saksham Das\"\n    #'''\n    #output = string_join(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_join(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_join(sample_string)\n    #print(output)\n    \n    sample_string = '''\n    \"This is the first line,\n    This is the second line.\"\n    '''\n    output = string_join(sample_string)\n    print(output)\n    \ndef string_split(text1):\n    '''\n    Write a function to split the words in the given string.\n    '''\n    #sample_string = '''\n    #\"Saksham Das\"\n    #'''\n    #output = string_split(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_split(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_split(sample_string)\n    #print(output)\n    \n    sample_string = '''\n    \"This is the first line,\n    This is the second line.\"\n    '''\n    output = string_split(sample_string)\n    print(output)\n    \ndef string_upper_case(text1):\n    '''\n    Write a function to convert the string in uppercase.\n    '''\n    #sample_string = '''\n    #\"Saksham Das\"\n    #'''\n    #output = string_upper_case(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_upper_case(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is the first line,\n    #This is the second line.\"\n    #'''\n    #output = string_upper_case(sample_string)\n    #print(output)\n    \n    sample_string = '''\n    \"This is the first line,\n    This is the second line.\"\n    '''\n    output = string_upper_case(sample_string)\n    print(output)\n    \ndef string_replace(text1):\n    '''\n    Write a function to replace the word \"saksham\" with the word \"Akash\".\n    '''\n    #sample_string = '''\n    #\"Saksham Das\"\n    #'''\n    #output = string_replace(sample_string)\n    #print(output)\n    \n    #sample_string = '''\n    #\"This is th"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot = re.search(r'\"(.+?)\"',text1)\n    if quot:\n        print(quot.group(1))\n    else:\n        print('No value in quotation marks')\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=re.findall('\"[\\s\\S]+?\"',text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=re.findall(r\"\\\"(.+?)\\\"\",text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x = re.findall(\"\\\"[\\w]+\\\"\",text1)\n    print(x)\n    print(' '.join(x))\n    return (' '.join(x))\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=text1.split()\n    new_list=[]\n    for i in range(len(l)):\n        if l[i]=='\"':\n            new_list.append(l[i-1])\n            new_list.append(l[i+1])\n    print(new_list)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text=text1.strip()\n    text=text.replace(\"\\\"\\\"\",\"\\\"\")\n    text=text.replace(\"\\\" \\\"\",\"\\\"\")\n    text=text.replace(\"\\\" '\",\"\\\"\")\n    text=text.replace(\"' '\",\"'\")\n    text=text.replace(\"''\",\"\\\"\")\n    text=text.replace(\"\\\" '\",\"\\\"\")\n    text=text.replace(\"'' '\",\"\\\"\")\n    text=text.replace(\"\\\"''\",\"\\\"\")\n    text=text.replace(\"'''\",\"\\\"\")\n    text=text.replace(\"'\\\"\",\"\\\"\")\n    text=text.replace(\"\\\"'\",\"\\\"\")\n    text=text.replace(\"'\\\"\",\"\\\"\")\n    text=text.replace(\"\\\"'s\",\"\\\"\")\n    text=text.replace(\"'s\",\"\\\"\")\n    text=text.replace(\"'S\",\"\\\"\")\n    text=text.replace(\"S'\",\"'\")\n    text=text.replace(\"S '\\\"\",\"'\")\n    text=text.replace(\"S's\",\"'\")\n    text=text.replace(\"S's\",\"'\")\n    text=text.replace(\"S's\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\",\"'\")\n    text=text.replace(\"S 'S\","
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    #Using Regular Expression\n    #expression = r'\\\"(.*)\\\"'\n    \n    #Using Regular Expression with group\n    #expression = r'(\\\"(.*)\\\")'\n    \n    #Using Regular Expression with group\n    #expression = r'\"(.*)\\\"'\n    \n    #Using Regular Expression with group\n    #expression = r'\"(.*)\\\"'\n    \n    #using Regular Expression with group\n    #expression = r'(.*)\"'\n    \n    #using Regular Expression with group\n    #expression = r'(.*)\"'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = r'(\\\".*\\\")'\n    \n    #using Regular Expression with group\n    #expression = "
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_match = re.finditer(r\"(\\\"|\\')(.+)(?:\\1|\\2)\",text1)\n    return re.findall(r\"\\w+\", str(quotation_match))\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern1 = re.compile(r'\\\"')\n    return pattern1.findall(text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    res = []\n    for i in range(N):\n        res.append(test_tup[i] * test_tup[i+1])\n    return tuple(res)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for i, j in enumerate(test_tup):\n        new_tup.append(j * test_tup[i + 1])\n    return tuple(new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l<2:\n        return \n    for i in range(l-1):\n        test_tup[i]=test_tup[i]*test_tup[i+1]\n    return test_tup[0:l-1]\n    \ndef fibonacci(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (n,m) and returns a tuple of size n where the i-th element of the tuple is equal to the i-th Fibonacci number.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    if len(test_tup)==1:\n        return (1,0)\n    a=0\n    b=1\n    c=a+b\n    return (a,b)\n    \ndef fibonacci(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (n,m) and returns a tuple of size n where the i-th element of the tuple is equal to the i-th Fibonacci number.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    if len(test_tup)==1:\n        return (1,0)\n    a=0\n    b=1\n    c=a+b\n    while test_tup[1]<test_tup[0]:\n        a=b\n        b=c\n        c=a+b\n    if test_tup[0]==1:\n        return (1,0)\n    return (a,b)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l==0:\n        return (0,)\n    a=test_tup[0]\n    b=a\n    c=a+b\n    d=c\n    e=c+b\n    f=c+b+a\n    return (a,b,c,d,e,f)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l==0:\n        return (0,)\n    a=test_tup[0]\n    b=a\n    c=a+b\n    d=c\n    e=c+b\n    f=c+b+a\n    return (a,b,c,d,e,f)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l==0:\n        return (0,)\n    a=test_tup[0]\n    b=a\n    c=a+b\n    d=c\n    e=c+b\n    f=c+b+a\n    return (a,b,c,d,e,f)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l==0:\n        return (0,)\n    a=test_tup[0]\n    b=a\n    c=a+b\n    d=c\n    e=c+b\n    f=c+b+a\n    return (a,b,c,d,e,f)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l==0:\n        return (0,)\n    a=test_tup[0]\n    b=a\n    c=a+b\n    d=c\n    e=c+b\n    f=c+b+a\n    return (a,b,c,d,e,f)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l==0:\n        return (0,)\n    a=test_tup[0]\n    b=a\n    c=a+b\n    d=c\n    e=c+b\n    f=c+b+a\n    return (a,b,c,d,e,f)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l==0:\n        return (0,)\n    a=test_tup[0]\n    b=a\n    c=a+b\n    d=c\n    e=c+b\n    f=c+b+a\n    return (a,b,c,d,e,f)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)\n    if l==0:\n        return (0,)\n    a=test_tup[0]\n    b=a\n    c=a+b\n    d=c\n    e=c+b\n    f=c+b+a\n    return (a,b,c,d,e,f)\n    \ndef all_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_n) and returns a tuple of size n where the i-th element of the tuple is equal to the sum of all the numbers in the i-th element of the original tuple.\n    '''\n    if not type(test_tup)==tuple:\n        return\n    l=len(test_tup)"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        return\n    return tuple([tuple_element * (i+1) for i, tuple_element in enumerate(test_tup[:-1])])\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    x = []\n    for i in range(len(test_tup)-1):\n        x.append(test_tup[i] * test_tup[i+1])\n    return tuple(x)\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = (2,3,4)\n    tup1 = ()\n    for i in range(len(tup)):\n        tup1 = tup1 + (tup[i]*(tup[i+1],),)\n    return tup1\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * (i + 1) for i in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] * test_tup[i+1])\n    res.append(test_tup[-1])\n    return tuple(res)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] * (i + 1))\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    product = 1\n    for i in range(len(test_tup)):\n        product = product * test_tup[i]\n    \n    return (product, )\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    print(\"----sum_list(lst1,lst2)----\")\n    print(lst1,lst2)\n    for i in range(len(lst1)):\n        lst1[i]=lst1[i]+lst2[i]\n    print(lst1)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = []\n    for x,y in zip(lst1,lst2):\n        s.append(x+y)\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = []\n    for i in range(len(lst1)):\n        s.append(lst1[i] + lst2[i])\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    for i in range(min(len(lst1),len(lst2))):\n        res.append(lst1[i]+lst2[i])\n    if len(lst1) > len(lst2):\n        for i in range(len(lst1),len(lst2)):\n            res.append(lst1[i])\n    if len(lst2) > len(lst1):\n        for i in range(len(lst2),len(lst1)):\n            res.append(lst2[i])\n    return res\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    for i in range(0,len(lst1)):\n        res.append(lst1[i]+lst2[i])\n    return res\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = []\n    for i in range(min(len(lst1),len(lst2))):\n        s.append(lst1[i] + lst2[i])\n    return s\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    newlist = []\n    for k,g in groupby(nums):\n        newlist.append(list(g))\n    return newlist\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return(list(groupby(sorted(nums))))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(k)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = []\n    for key, group in groupby(nums):\n        groups.append(key)\n    print(groups)\n    new_nums = []\n    for group in groups:\n        if group == 1:\n            new_nums.append(group)\n    return new_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    newlist = []\n    for i in range(len(nums)):\n        if i > 0:\n            if nums[i] == nums[i-1]:\n                pass\n            else:\n                newlist.append(nums[i])\n        else:\n            newlist.append(nums[i])\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for group in groupby(nums):\n        yield list(group)[0]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    result = []\n    for k, g in groupby(nums):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    duplicates = []\n    prev = None\n    for num in nums:\n        if prev is not None and num == prev:\n            duplicates.append(num)\n        else:\n            prev = num\n    nums = []\n    if duplicates:\n        for i in range(len(duplicates)-1):\n            nums.append(duplicates[i])\n        nums.append(duplicates[-1])\n    return nums\n    \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # approach 1:\n    '''\n    # instead of using collections.Counter, we can use a dict.\n    #     - the dict will look like:\n    #         {1: 3, 2: 1, 3: 1, 4: 1}\n    #     - instead of using a list, we can use a set to keep track of only unique values.\n    \n    # approach 2:\n    #     - remove the duplicates from the input list and return the result.\n    #     - don't modify the input list\n    '''\n    \n    # approach 1:\n    new_list = []\n    for x, y in groupby(sorted(nums)):\n        new_list.append(list(x))\n    for i in range(len(new_list)):\n        new_list[i] = new_list[i][0]\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    x = nums[0]\n    i = 0\n    while i < len(nums):\n        if nums[i] == x:\n            i += 1\n            continue\n        else:\n            nums[x+1] = nums[i]\n            x += 1\n            i = i + 1\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    result = math.pi*r**2*(r + h)/3\n    return result\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef medialsurface_cone(r,h):\n    '''\n    Write a function to find the medial surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef medialsurface_cylinder(r,h):\n    '''\n    Write a function to find the medial surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area=math.pi*(r**2)\n    return area\ndef medialsurface_sphere(r):\n    '''\n    Write a function to find the medial surface area of a sphere given radius r.\n    '''\n    area=4*math.pi*r**2\n    return area\ndef lateralsurface_cone_seg(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef medialsurface_cone_seg(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef lateralsurface_cylinder_seg(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef medialsurface_cylinder_seg(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef lateralsurface_sphere_seg(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area=math.pi*(r**2)\n    return area\ndef medialsurface_sphere_seg(r):\n    '''\n    Write a function to find the medial surface area of a sphere given radius r.\n    '''\n    area=4*math.pi*r**2\n    return area\ndef lateralsurface_cone_trunc(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef medialsurface_cone_trunc(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef lateralsurface_cylinder_trunc(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef medialsurface_cylinder_trunc(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef lateralsurface_sphere_trunc(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area=math.pi*(r**2)\n    return area\ndef medialsurface_sphere_trunc(r):\n    '''\n    Write a function to find the medial surface area of a sphere given radius r.\n    '''\n    area=4*math.pi*r**2\n    return area\ndef lateralsurface_cone_circ(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef medialsurface_cone_circ(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef lateralsurface_cylinder_circ(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef medialsurface_cylinder_circ(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef lateralsurface_sphere_circ(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area=math.pi*(r**2)\n    return area\ndef medialsurface_sphere_circ(r):\n    '''\n    Write a function to find the medial surface area of a sphere given radius r.\n    '''\n    area=4*math.pi*r**2\n    return area\ndef lateralsurface_cone_trap(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef medialsurface_cone_trap(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef lateralsurface_cylinder_trap(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef medialsurface_cylinder_trap(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\ndef lateralsurface_sphere_trap(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area=math.pi*(r**2)\n    return area\ndef medialsurface_sphere_trap(r):\n    '''\n    Write a function to find the medial surface area of a sphere given radius r.\n    '''\n    area=4*math.pi*r**2\n    return area\ndef lateralsurface_cone_triang(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef medialsurface_cone_triang(r,h,n):\n    '''\n    Write a function to find the medial surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*(r**2)*(h/2)\n    return area\ndef lateralsurface_cylinder_triang(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area=2*math.pi*r*h\n    return area\nde"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    h=h/2\n    a = r**2*math.sin(math.pi/6)\n    return (math.pi/2)*(a*2*math.sqrt(h**2 + r**2*math.sin(math.pi/6)**2) - (h + r)*math.sin(math.pi/6))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def func(theta):\n        return math.pi*r**2*(h/2)*(1-math.sin(theta)**2)**0.5\n    return func\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Convert the radii to radians\n    radii = r * math.pi/180\n    \n    # Calculate the lateral surface of the cone given radius r and height h\n    lateralSurface = math.pi * radii * (radii + h)\n    return lateralSurface\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = (2*math.pi*r*h)/2 + 2*math.pi*r\n    return lateral_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def surface_area(radius, height):\n        '''\n        The surface area of a cone is the area of a cone plus the area of its bottom.\n        This function returns the surface area of the cone\n        '''\n        top = math.pi * radius * radius * height / 4\n        bottom = math.pi * radius * radius * (height - 0.5 * math.sqrt(math.pow(radius, 2) - (0.5 * math.sqrt(math.pow(radius, 2) - 4 * math.pow(radius, 2) - 4 * radius * math.pow(radius, 2) - math.pow(radius, 2)) * height))) / 4\n        return top + bottom\n    return surface_area(r, h)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral=math.pi*r*(r+h)\n    return lateral\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Write your code here\n    pi = 3.14\n    # Lateral surface = pi*r*h\n    return (pi*r**2*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h <= 0:\n        return 0\n    else:\n        return (math.pi*r**2)+(math.pi*(r**2)-math.pi*h**2)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[ ]+', ':', text)\n    \ndef count_vowels(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall(r'[aeiou]', text))\n    \ndef count_consecutive_vowels(text):\n    '''\n    Write a function that counts the number of vowels in a given string.\n    '''\n    return len(re.findall(r'((?:[aeiou]{2})*)', text))\n    \ndef count_vowels_in_word(word):\n    '''\n    Write a function that counts the number of vowels in a given word.\n    '''\n    return len(re.findall(r'[aeiou]', word))\n    \ndef count_vowels_in_sentence(sentence):\n    '''\n    Write a function that counts the number of vowels in a given sentence.\n    '''\n    return len(re.findall(r'[aeiou]', sentence))\n    \ndef count_vowels_in_sentence_with_regex(sentence):\n    '''\n    Write a function that counts the number of vowels in a given sentence.\n    '''\n    return len(re.findall(r'[aeiou]', sentence))\n    \ndef count_vowels_in_sentence_with_math_func(sentence):\n    '''\n    Write a function that counts the number of vowels in a given sentence.\n    '''\n    return len(re.findall(r'[aeiou]', sentence))\n    \ndef count_vowels_in_sentence_with_list_comp(sentence):\n    '''\n    Write a function that counts the number of vowels in a given sentence.\n    '''\n    return len(re.findall(r'[aeiou]', sentence))\n    \ndef count_vowels_in_sentence_with_lambda(sentence):\n    '''\n    Write a function that counts the number of vowels in a given sentence.\n    '''\n    return len(re.findall(r'[aeiou]', sentence))\n    \ndef count_letters_in_sentence(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_regex(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_math_func(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_list_comp(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_lambda(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_word(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_word_with_regex(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_word_with_math_func(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_word_with_list_comp(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_word_with_lambda(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_sentence_with_regex(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_math_func(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_list_comp(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_lambda(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_word_with_regex(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_word_with_math_func(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_word_with_list_comp(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_word_with_lambda(word):\n    '''\n    Write a function that counts the number of letters in a given word.\n    '''\n    return len(re.findall(r'[a-zA-Z]', word))\n    \ndef count_letters_in_sentence_with_regex(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_math_func(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_list_comp(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]', sentence))\n    \ndef count_letters_in_sentence_with_lambda(sentence):\n    '''\n    Write a function that counts the number of letters in a given sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',','.')\n    text = text.replace('.','')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ]|[,]|[.]',':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = re.sub(r\"[\\s,\\.]\",':',text)\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\",\":\").replace(\".\",\":\").replace(\" \",\":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s\\,\\.]',':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[\\s,\\.]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = text\n    new_text = new_text.replace(' ',':')\n    new_text = new_text.replace(',',':')\n    new_text = new_text.replace('.',':')\n    return new_text\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A == None:\n        return -1\n    i = 0\n    j = len(A) - 1\n    while i <= j:\n        mid = (i+j) // 2\n        if x == A[mid]:\n            return mid\n        if A[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A)==0:\n        return -1\n    if len(A)==1:\n        if A[0]==x:\n            return 0\n        else:\n            return -1\n    if A[0]==x:\n        return 0\n    if A[len(A)-1]==x:\n        return len(A)-1\n    if A[len(A)/2]==x:\n        return len(A)/2\n    l=find_first_occurrence(A[:len(A)/2],x)\n    if l==-1:\n        l=find_first_occurrence(A[len(A)/2+1:],x)\n    if l==-1:\n        l=find_first_occurrence(A[len(A)-1:],x)\n    if l==-1:\n        l=find_first_occurrence(A[:len(A)/2],x)\n    return l\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def binary_search(array, low, high, x):\n        if high >= low:\n            mid = (high + low)//2\n            if array[mid] == x:\n                return mid\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo, hi = 0, len(A)\n    while lo < hi:\n        mid = lo + (hi-lo)//2\n        if A[mid] == x:\n            return mid\n        elif x < A[mid]:\n            hi = mid\n        else:\n            lo = mid+1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A: return -1\n    low, high = 0, len(A)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if x < A[mid]:\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            return mid\n    return low\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n    \n    if A[left] == x:\n        return left\n    if A[right] == x:\n        return right\n    \n    while left <= right:\n        mid = (left+right) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            right = mid-1\n        else:\n            left = mid+1\n    return None\n    \nif __name__ == '__main__':\n    A = [-2, 0, 2, 4, 6, 8, 10]\n    x = 6\n    print(find_first_occurrence(A, x))\n    print(A[find_first_occurrence(A, x)])\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x <= A[0] or x >= A[-1]:\n        return -1\n    else:\n        start = 0\n        end = len(A) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if A[mid] < x:\n                start = mid + 1\n            elif A[mid] > x:\n                end = mid - 1\n            elif A[mid] == x:\n                return mid\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        a = arr[:i]\n        if (len(a) > 0):\n            for j in range(1, len(a)):\n                #print(a[:j])\n                #print(a[j:])\n                res += a[:j]*a[j:]\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def sum_Of_Prod(arr,n):\n        sum=1\n        temp=0\n        for i in range(n):\n            temp=temp*arr[i]\n        sum=temp*sum\n        for i in range(n-1):\n            temp=temp*arr[i+1]\n            sum=sum+temp\n        return sum\n    res=[]\n    l=0\n    r=len(arr)\n    while(l<=r):\n        mid=(l+r)//2\n        print('mid',mid)\n        if mid==0:\n            print('returning')\n            return 0\n        res.append(sum_Of_Prod(arr,mid))\n        if res[-1]>=1000000000:\n            l=mid+1\n            r=mid-1\n        elif res[-1]<1000000000:\n            r=mid-1\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # [[[1, 2, 3, 4], 1], [[1, 2, 3, 4], 2], [[1, 2, 3, 4], 3], [[1, 2, 3, 4], 4], [[1, 2, 3, 4], 5]]\n    # [[[1, 2, 3, 4, 5, 6], 1], [[1, 2, 3, 4, 5, 6], 2], [[1, 2, 3, 4, 5, 6], 3], [[1, 2, 3, 4, 5, 6], 4], [[1, 2, 3, 4, 5, 6], 5]]\n    # [[[1, 2, 3, 4], 1], [[1, 2, 3, 4], 2], [[1, 2, 3, 4], 3], [[1, 2, 3, 4], 4], [[1, 2, 3, 4], 5]]\n    # [[[1, 2, 3, 4], 1], [[1, 2, 3, 4], 2], [[1, 2, 3, 4], 3], [[1, 2, 3, 4], 4], [[1, 2, 3, 4], 5]]\n    # TODO : Write your Code here\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                for l in range(k+1,len(arr)):\n                    print(i,j,k,l)\n    return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    s=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                s=s+(arr[i]*arr[j]*arr[k])\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n    s=0\n    for i in range(0,n):\n        s+=arr[i]\n    for i in range(1,n):\n        t=1\n        for j in range(i,n):\n            t*=arr[j]\n            s+=t\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # if we have zero or one element in list\n    if len(arr)<=1:\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # If arr is empty\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_product = 0\n    \n    # Initialize result\n    result = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if(len(arr) == 1):\n        return arr[0]\n    else:\n        return sum_Of_Subarray_Prod(arr[0:len(arr)-1]) * arr[len(arr)-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    import math\n    s=0\n    summ=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            s=0\n            for k in range(i,j+1):\n                s=s+(arr[k])\n            summ=summ+s\n    return(summ)\n    \ndef sum_Of_Subarray_Prod_using_Slices(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    import math\n    s=0\n    summ=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            s=0\n            for k in range(i,j+1):\n                s=s+(arr[k])\n            summ=summ+s\n    return(summ)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code here \n    # n = 6\n    # n = 7\n    n = 4 \n    res = n | (n << 1)\n    res = res & ~(n << 1)\n    return res \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = n\n    i = 0\n    while i < 32:\n        num = num ^ (num >> 1)\n        i += 1\n    return num\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # your code goes here\n    # flip the first and last bit\n    \n    n = n | 0x80000000  # Set the last bit in the number to 1\n    n = n ^ 0xFFFFFFFF  # Flip the first bit to 0\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # return ~n | 2 ** (len(bin(n)) - 2)\n    return n ^ 2**(len(bin(n))-2)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code here\n    x = format(n,'b')\n    l = len(x)-1\n    n = int(x[l])\n    n = n ^ (1 << l)\n    print('The new number after flipping bits is:',format(n,'b'))\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(\"Starting set_middle_bits function\")\n    print(f\"n={n}\")\n    if n == 0:\n        return 0\n    else:\n        return (n & -(n-1))+1\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (1 << n.bit_length() - 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n>>1)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (2 ** 32 - 1)\n    n = n ^ (n >> 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    binary_n = \"{0:b}\".format(n)\n    first_bit = binary_n[0]\n    last_bit = binary_n[-1]\n    binary_n = binary_n[1:-1]\n    binary_n = \"\".join([first_bit if x=='1' else last_bit for x in binary_n])\n    return int(binary_n, 2)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = 0\n    while i < n and a[i] <= x:\n        i += 1\n    if i!= n:\n        return i\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif a[i - 1] == x:\n        return i - 1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return None\n    if x < a[i-1]:\n        return i\n    else:\n        return None\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    low = 0\n    high = n-1\n    while low<=high:\n        mid = (low+high)//2\n        if x<a[mid]:\n            high = mid-1\n        elif x>a[mid]:\n            low = mid+1\n        else:\n            return mid\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    m = l + (r - l) // 2\n    while l <= r:\n        if a[m] == x:\n            return m\n        elif a[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n        m = l + (r - l) // 2\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match:\n        print(\"Valid string\")\n    else:\n        print(\"Invalid string\")\n    \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match=re.search(regex,string) \n    if match: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string) \n    return bool(match) \n    print(check_str('hgfhgf'))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    a = re.match(regex,string)\n    print(a)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowel_list = ['a','e','i','o','u']\n    if not(re.match(regex,string)): \n        return False\n    for i in range(len(string)): \n        if string[i] in vowel_list: \n            return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if bool(re.match(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    match = re.match(regex,string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\n    \ndef vowel_check(string):\n    vowels = 'aeiou'\n    count = 0\n    for i in string:\n        if i in vowels:\n            count+=1\n    if count > 1:\n        print(string + \": is not a valid string as it contains more than one vowel.\")\n    else:\n        print(string + \": is a valid string.\")\n        \ndef main():\n    print(\"*** Enter a string to see if it is a valid string ***\")\n    string = input()\n    if check_str(string)!= None:\n        print(\"\")\n        vowel_check(string)\n    else:\n        print(\"\")\n        print(\"The string is not a valid string.\")\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (n-1) * (n-2) / 2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        return 0\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math \n    if (math.sqrt(n) % 1 == 0.0):\n        return int(math.sqrt(n))\n    else:\n        return int(math.ceil(math.sqrt(n)))\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 0:\n        return -1\n    \n    a = 10**(n-1)\n    b = 10**n\n    c = (a*(a+1))//2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    n=int(n)\n    count=0\n    max_num=int(math.sqrt(n))\n    for i in range(2,max_num+1):\n        while n%i==0:\n            count=count+1\n            n=n/i\n    if count==0:\n        return 1\n    else:\n        return int(count)+1\n        \nprint(find_Index(5)"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * i + i == n): \n            return i \n        i = i + 1\ndef find_Index2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index3(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index4(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index5(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index6(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index7(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index8(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index9(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index10(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index11(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index12(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index13(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index14(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index15(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index16(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index17(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index18(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index19(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        if(i * (i+1)//2 == n): \n            return i \n        i = i + 1\ndef find_Index20(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n-1\n    return n*(n+1)//2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n>4):\n        i=1\n        while(1):\n            num=i*(i+1)*(i+2)*(i+3)\n            if(num>n):\n                break\n            i+=1\n        print(i)\n    else:\n        i=1\n        while(1):\n            num=i*(i+1)*(i+2)\n            if(num>n):\n                break\n            i+=1\n        print(i)\n    return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 1:\n        return -1\n    else:\n        t = 0\n        index = 0\n        i = 1\n        while i < n:\n            t += 2 ** i\n            i += 1\n        index = t\n        return index\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if(n==1):\n        return 1\n    if(n==2):\n        return 3\n    # a = (n-1)*(n-2)/2 + (n-1)\n    # b = (n-1)*n/2\n    a = n * (n + 1) / 2 + n - 1\n    b = (n - 1) * n / 2 + (n - 1)\n    c = (n - 1) * (n - 2) / 2 + (n - 1)\n    d = a - b + c\n    return d\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    sum = 0\n    while (True):\n        sum += 1\n        if ((sum + 1)**2) - (sum * (sum - 1))/2 == n:\n            return sum\n        else:\n            continue\n            \nprint(find_Index(9))\nprint(find_Index(10))\nprint(find_Index(11))\nprint(find_Index(12))\nprint(find_Index(13))\nprint(find_Index(14))\nprint(find_Index(15))\nprint(find_Index(16))\nprint(find_Index(17))\nprint(find_Index(18))\nprint(find_Index(19))\nprint(find_Index(20))\nprint(find_Index(21))\nprint(find_Index(22))\nprint(find_Index(23))\nprint(find_Index(24))\nprint(find_Index(25))\nprint(find_Index(26))\nprint(find_Index(27))\nprint(find_Index(28))\nprint(find_Index(29))\nprint(find_Index(30))\nprint(find_Index(31))\nprint(find_Index(32))\nprint(find_Index(33))\nprint(find_Index(34))\nprint(find_Index(35))\nprint(find_Index(36))\nprint(find_Index(37))\nprint(find_Index(38))\nprint(find_Index(39))\nprint(find_Index(40))\nprint(find_Index(41))\nprint(find_Index(42))\nprint(find_Index(43))\nprint(find_Index(44))\nprint(find_Index(45))\nprint(find_Index(46))\nprint(find_Index(47))\nprint(find_Index(48))\nprint(find_Index(49))\nprint(find_Index(50))\nprint(find_Index(51))\nprint(find_Index(52))\nprint(find_Index(53))\nprint(find_Index(54))\nprint(find_Index(55))\nprint(find_Index(56))\nprint(find_Index(57))\nprint(find_Index(58))\nprint(find_Index(59))\nprint(find_Index(60))\nprint(find_Index(61))\nprint(find_Index(62))\nprint(find_Index(63))\nprint(find_Index(64))\nprint(find_Index(65))\nprint(find_Index(66))\nprint(find_Index(67))\nprint(find_Index(68))\nprint(find_Index(69))\nprint(find_Index(70))\nprint(find_Index(71))\nprint(find_Index(72))\nprint(find_Index(73))\nprint(find_Index(74))\nprint(find_Index(75))\nprint(find_Index(76))\nprint(find_Index(77))\nprint(find_Index(78))\nprint(find_Index(79))\nprint(find_Index(80))\nprint(find_Index(81))\nprint(find_Index(82))\nprint(find_Index(83))\nprint(find_Index(84))\nprint(find_Index(85))\nprint(find_Index(86))\nprint(find_Index(87))\nprint(find_Index(88))\nprint(find_Index(89))\nprint(find_Index(90))\nprint(find_Index(91))\nprint(find_Index(92))\nprint(find_Index(93))\nprint(find_Index(94))\nprint(find_Index(95))\nprint(find_Index(96))\nprint(find_Index(97))\nprint(find_Index(98))\nprint(find_Index(99))\nprint(find_Index(100))\nprint(find_Index(101))\nprint(find_Index(102))\nprint(find_Index(103))\nprint(find_Index(104))\nprint(find_Index(105))\nprint(find_Index(106))\nprint(find_Index(107))\nprint(find_Index(108))\nprint(find_Index(109))\nprint(find_Index(110))\nprint(find_Index(111))\nprint(find_Index(112))\nprint(find_Index(113))\nprint(find_Index(114))\nprint(find_Index(115))\nprint(find_Index(116))\nprint(find_Index(117))\nprint(find_Index(118))\nprint(find_Index(119))\nprint(find_Index(120))\nprint(find_Index(121))\nprint(find_Index(122))\nprint(find_Index(123))\nprint(find_Index(124))\nprint(find_Index(125))\nprint(find_Index(126))\nprint(find_Index(127))\nprint(find_Index(128))\nprint(find_Index(129))\nprint(find_Index(130))\nprint(find_Index(131))\nprint(find_Index(132))\nprint(find_Index(133))\nprint(find_Index(134))\nprint(find_Index(135))\nprint(find_Index(136))\nprint(find_Index(137))\nprint(find_Index(138))\nprint(find_Index(139))\nprint(find_Index(140))\nprint(find_Index(141))\nprint(find_Index(142))\nprint(find_Index(143))\nprint(find_Index(144))\nprint(find_Index(145))\nprint(find_Index(146))\nprint(find_Index(147))\nprint(find_Index(148))\nprint(find_Index(149))\nprint(find_Index(150))\nprint(find_Index(151))\nprint(find_Index(152))\nprint(find_Index(153))\nprint(find_Index(154))\nprint(find_Index(155))\nprint(find_Index(156))\nprint(find_Index(157))\nprint(find_Index(158))\nprint(find_Index(159))\nprint(find_Index(160))\nprint(find_Index(161))\nprint(find_Index(162))\nprint(find_Index(163))\nprint(find_Index(164))\nprint(find_Index(165))\nprint(find_Index(166))\nprint(find_Index(167))\nprint(find_Index(168))\nprint(find_Index(169))\nprint(find_Index(170))\nprint(find_Index(171))\nprint(find_Index(172))\nprint(find_Index(173))\nprint(find_Index(174))\nprint(find_Index(175))\nprint(find_Index(176))\nprint(find_Index(177))\nprint(find_Index(178))\nprint(find_Index(179))\nprint(find_Index(180))\nprint(find_Index(181))\nprint(find_Index(182))\nprint(find_Index(183))\nprint(find_Index(184))\nprint(find_Index(185))\nprint(find_Index(186))\nprint(find_Index(187))\nprint(find_Index(188))\nprint(find_Index(189))\nprint(find_Index(190))\nprint(find_Index(191))\nprint(find_Index(192))\nprint(find_Index(193))\nprint(find_Index(194))\nprint(find_Index(195))\nprint(find_Index(196))\nprint(find_Index(197))\nprint(find_Index(198))\nprint(find_Index(199))\nprint(find_Index(200))\nprint(find_Index(201))\nprint(find_Index(202))\nprint(find_Index(203))\nprint(find_Index(204))\nprint(find_Index(205))\nprint(find_Index(206))\nprint(find_Index(207))\nprint(find_Index(208))\nprint(find_Index(209))\nprint(find_Index(210))\nprint(find_Index(211))\nprint(find_Index(212))\nprint(find_Index(213))\nprint(find_Index(214))\nprint(find_Index(215))\nprint(find_Index(216))\nprint(find_Index(217))\nprint(find_Index(218))\nprint(find_Index(219))\nprint(find_Index(220))\nprint(find_Index(221))"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x = 1\n    y = 1\n    while(True): \n        x = y + x \n        y += x \n        if len(str(x)) == n: \n            return y - x \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n    \nprint(tuple_to_dict([1,2,3,4]))\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    ret_dict = {}\n    for i in range(len(test_tup)-1):\n        ret_dict[test_tup[i]] = test_tup[i+1]\n    return ret_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)):\n        dict[test_tup[i]] = i + 1\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return { test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0,len(test_tup),2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(0,len(test_tup)-1,2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\nprint(tuple_to_dict(('a','b','c','d','e','f','g')))\n'''\n    Write a python program to sort a list of tuples by second element.\n'''\ndef sort_by_second_element(test_list):\n    '''\n    Write a python program to sort a list of tuples by second element.\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-i-1):\n            if test_list[j][1] > test_list[j+1][1]:\n                test_list[j], test_list[j+1] = test_list[j+1], test_list[j]\n    return test_list\nprint(sort_by_second_element([('a',0),('a',0),('b',1),('b',1),('c',2),('c',2),('d',3),('d',3),('e',4),('e',4),('f',5),('f',5)]))\n'''\n    Write a python program to sort a list of tuples by second element.\n'''\ndef sort_by_second_element(test_list):\n    '''\n    Write a python program to sort a list of tuples by second element.\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-i-1):\n            if test_list[j][1] > test_list[j+1][1]:\n                test_list[j], test_list[j+1] = test_list[j+1], test_list[j]\n    return test_list\nprint(sort_by_second_element([('a',0),('a',0),('b',1),('b',1),('c',2),('c',2),('d',3),('d',3),('e',4),('e',4),('f',5),('f',5)]))\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup)==0:\n        return {}\n    elif len(test_tup)==1:\n        return {test_tup[0]:1}\n    else:\n        return {test_tup[0]:1,test_tup[1]:1}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(0,len(test_tup),2):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup\n    \ndef tuple_to_dict_constant_space(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # dict_tup = {}\n    # for i in range(0,len(test_tup),2):\n    #     dict_tup[test_tup[i]] = test_tup[i+1]\n    # return dict_tup\n    return {\n        test_tup[i]: test_tup[i+1]\n        for i in range(0,len(test_tup),2)\n    }\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = dict()\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        return s[0] == s[len(s)-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0]!= s[-1]:\n        return False\n    else:\n        for i in range(1,len(s)-1):\n            if s[i]!= s[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    else :\n        if s[0] == s[-1] :\n            return True\n        else :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n    else :\n        if s[0]!= s[1] :\n            return False\n        else :\n            return all_Characters_Same(s[1:])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) <= 1:\n        return True\n    return s[0] == s[1] and all_Characters_Same(s[1:])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) <= 1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    elif len(s) == 1 :\n        return True\n    else :\n        return s[0] == s[1] and all_Characters_Same(s[1:len(s)])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(len(s) == 0) :\n        return True\n    elif(s[0]!= s[len(s)-1]) :\n        return False\n    else :\n        return all_Characters_Same(s[1 : len(s)-1])\n        \ndef index_Of_First_Character(s) :\n    '''\n    Write a python function to get index of first character in the string.\n    '''\n    if(len(s) == 0) :\n        return -1\n    elif(s[0] == s[len(s)-1]) :\n        return 0\n    else :\n        return index_Of_First_Character(s[1 : len(s)-1])\n        \ndef check_Palindrome(s) :\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if(len(s) == 0) :\n        return True\n    elif(s[0]!= s[len(s)-1]) :\n        return False\n    else :\n        return check_Palindrome(s[1 : len(s)-1])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    return s.isalpha()\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[::-1]:\n        return True\n    return False"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2) / 2.0\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return(1/3 * side * side * side)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    pass\n    \ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    pass\n    \ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    pass\n    \ndef area_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1.0/6.0)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side\n    h = (s*s*s) / (4*math.tan(math.pi/5))\n    return h\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side\n    a = 0.5*s*s*s\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3)*(side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(6)/6\n    return side**2*area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (0.5 * side * side * math.sqrt(5) )\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    S = (3 / 4) * (side * side * side)\n    print('The area of tetrahedron is:', S)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Write your code here\n    a = list[m:] + list[:m]\n    return a\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for _ in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m%len(list)\n    lst = []\n    for i in range(0, len(list)-m):\n        lst.append(list[i])\n    for i in range(len(list)-m, len(list)):\n        lst.append(list[i])\n    return lst\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list)==0:\n        return list\n    return [list[-1]] + rotate_right(list[:-1], m)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m == 0 or n == 1:\n        return list\n    else:\n        for i in range(m):\n            list.append(list.pop(0))\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.append(list[0])\n    list.pop(0)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return list\n    n = len(list) - m\n    return list[n:] + list[:n]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list[0], list[i] = list[i], list[0]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m <= 0:\n        return list\n    else:\n        return list[m:] + list[:m]\n    \ndef rotate_right_order_by_two_list(list1, list2):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return []\n    elif len(list1) == 0:\n        return list2\n    elif len(list2) == 0:\n        return list1\n    else:\n        return list2[2:] + list1[:2]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert type(test_tup) == tuple\n    for item in test_tup:\n        assert type(item) == int or type(item) == float\n    return any(item is None for item in test_tup)\n    \nassert check_none(()) == False\nassert check_none((None,)) == True\nassert check_none((1,None)) == False\nassert check_none((None,1,)) == True\nassert check_none((1,2,None)) == False\nassert check_none((1,2,3,None)) == False\nassert check_none((None,1,2,3,4)) == True\nassert check_none((1,2,None,3,4)) == False\nassert check_none((1,2,3)) == False\nassert check_none((1,2,3,None,)) == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == None:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for tup in test_tup:\n        if None in tup:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print('The tuple has None value')\n    else:\n        print('The tuple does not have any None value')\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if type(test_tup) == type(None):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum,endnum+1) if any(i%j==0 for j in range(1,int(len(str(i)))+1))]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum + 1) if sum([int(j) for j in list(str(i))]) % int(i) == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    def dig_sum(num):\n        num = str(num)\n        sum_of_digits = 0\n        for digit in num:\n            sum_of_digits += int(digit)\n        return sum_of_digits\n    \n    return list(filter(lambda x: x % dig_sum(x) == 0, range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by(num):\n        return all(num % d == 0 for d in range(10))\n    print(\"Numbers divisible by digits in the range from {} to {}:\".format(startnum, endnum))\n    for d in range(startnum, endnum):\n        if divisible_by(d):\n            print(d)\n    print(\"\\n\")\n    \ndef is_even(num):\n    '''\n    Write a function which returns True if the number is even and False if it is odd.\n    '''\n    return num%2 == 0\n    \ndef is_prime(num):\n    '''\n    Write a function which returns True if the number is prime and False if it is not.\n    '''\n    if num in range(2, num):\n        return False\n    for d in range(2, num):\n        if num%d == 0:\n            return False\n    return True\n    \ndef is_multiple_of(num, factor):\n    '''\n    Write a function which returns True if the number is multiple of factor and False if it is not.\n    '''\n    return num % factor == 0\n    \ndef list_squared(num_list):\n    '''\n    Write a function that takes in a list of integers and return a new list with each item squared. \n    '''\n    return [x**2 for x in num_list]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x:True if True in map(lambda y:True if x%y==0 else False,list(map(int, str(x)))) else False, range(startnum, endnum)))\n    #return list(filter(lambda x:True if True in map(lambda y:True if x%y==0 else False,list(map(int, str(x)))) else False, range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n        \"\"\"\n        Return numbers divisible by all digits in an integer range (startnum to endnum).\n        \"\"\"\n        return [num for num in range(startnum, endnum + 1) if all(num % digit == 0 for digit in list(str(num)))]\n    return divisible_by_digits(startnum, endnum)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    nums = [x for x in range(startnum, endnum)]\n    divisible_by_num = []\n    for num in nums:\n        if all([int(x) % num == 0 for x in str(num)]):\n            divisible_by_num.append(num)\n    return divisible_by_num\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        if all(i % int(d) == 0 for d in str(i)):\n            print(i, end=\" \")\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return (list(filter(lambda x: True if x%startnum == 0 and x%endnum == 0 else False, range(startnum, endnum+1))))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    list_of_divisibles = []\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>=360):\n        return None\n    else:\n        return r**2*math.pi*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    if(a==360):\n        return (r**2)*math.pi/2\n    else:\n        return (r**2)*math.pi*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    elif r==0:\n        return math.pi*r*r\n    else:\n        return math.pi*r*r*math.sin(a/180*math.pi)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a > 90 and a < 180:\n        return r*r*math.pi\n    else:\n        return a*r*r*math.pi/2\n    \ndef sector_area2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a > 90 and a < 180:\n        return r*r*math.pi\n    else:\n        return a*r*r*math.pi/2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*(r**2)*(math.sin(math.radians(a))/(math.cos(math.radians(a))))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r*r*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    if(a<0 or r<=0):\n        return None\n    return math.pi*r**2*math.sin(math.pi*a/180)/2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (math.pi)*(r**2)*(a/180)*(1-math.cos(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a > 360):\n        return None\n    else:\n        return r*r*math.pi*a/360\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find area of a triangle. The function takes the base and height as inputs. Function should return None if the height is 0.\n    '''\n    if (b==0):\n        return None\n    else:\n        return a*b/2\ndef circle_area(r):\n    '''\n    Write a function to find area of a circle. The function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if (r==0):\n        return None\n    else:\n        return math.pi*r*r\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of an integer. The function takes the integer as input. Function should return None if the input is -1.\n    '''\n    if (n<=1):\n        return 1\n    else:\n        return n*factorial(n-1)\ndef is_even(x):\n    '''\n    Write a function to check if an integer is even or not.\n    '''\n    if (x%2 == 0):\n        return True\n    else:\n        return False\ndef is_odd(x):\n    '''\n    Write a function to check if an integer is odd or not.\n    '''\n    if (x%2!= 0):\n        return True\n    else:\n        return False\ndef is_positive(x):\n    '''\n    Write a function to check if a number is positive or not.\n    '''\n    if (x>0):\n        return True\n    else:\n        return False\ndef is_negative(x):\n    '''\n    Write a function to check if a number is negative or not.\n    '''\n    if (x<0):\n        return True\n    else:\n        return False\ndef is_prime(x):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if (x%2==0):\n        return False\n    for i in range(3,int(math.sqrt(x)+1),2):\n        if (x%i==0):\n            return False\n    return True\ndef gcd(x,y):\n    '''\n    Write a function to find greatest common divisor of two numbers.\n    '''\n    if (x == y):\n        return x\n    elif (x > y):\n        return gcd(x-y, y)\n    else:\n        return gcd(x,y-x)\ndef lcm(x,y):\n    '''\n    Write a function to find least common multiple of two numbers.\n    '''\n    if (x == y):\n        return x\n    else:\n        return (x*y)//gcd(x,y)\ndef get_floor(x,y):\n    '''\n    Write a function to find floor of x divided by y.\n    '''\n    return x//y\ndef get_ceil(x,y):\n    '''\n    Write a function to find ceiling of x divided by y.\n    '''\n    return (x//y)+1\ndef get_round(x,y):\n    '''\n    Write a function to round x to y places.\n    '''\n    x = x*1.0\n    y = y*1.0\n    return math.floor(x+0.5)/y\ndef sum_digits(n):\n    '''\n    Write a function to sum all the digits of an integer.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n%10 + sum_digits(n//10)\ndef sum_square_digits(n):\n    '''\n    Write a function to sum all the squares of all the digits of an integer.\n    '''\n    if (n==0):\n        return 0\n    else:\n        return sum_square_digits(n//10)*10 + n%10**2 + sum_square_digits(n//10)*10\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string s is a palindrome.\n    '''\n    if (s==s[::-1]):\n        return True\n    else:\n        return False\ndef is_anagram(s,t):\n    '''\n    Write a function to check if two words are anagrams.\n    '''\n    if (len(s)!=len(t)):\n        return False\n    else:\n        s = sorted(s)\n        t = sorted(t)\n        for i in range(len(s)):\n            if (s[i]!= t[i]):\n                return False\n        return True\ndef word_frequency(s):\n    '''\n    Write a function to check if a string s is a permutation of a palindrome.\n    '''\n    if (s==s[::-1]):\n        return True\n    else:\n        return False\ndef is_monotonic(s):\n    '''\n    Write a function to check if a string s is monotonic.\n    '''\n    if (len(s)>1):\n        if (s[0]<s[1]):\n            return True\n        else:\n            return False\n    else:\n        return True\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string s is a palindrome.\n    '''\n    if (s==s[::-1]):\n        return True\n    else:\n        return False\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string s is a palindrome.\n    '''\n    if (s==s[::-1]):\n        return True\n    else:\n        return False\ndef is_anagram(s,t):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if (len(s)!=len(t)):\n        return False\n    else:\n        s = sorted(s)\n        t = sorted(t)\n        for i in range(len(s)):\n            if (s[i]!= t[i]):\n                return False\n        return True\ndef is_anagram(s,t):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if (len(s)!=len(t)):\n        return False\n    else:\n        s = sorted(s)\n        t = sorted(t)\n        for i in range(len(s)):\n            if (s[i]!= t[i]):\n                return False\n        return True\ndef is_anagram(s,t):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if (len(s)!=len(t)):\n        return False\n    else:\n        s = sorted(s)\n        t = sorted(t)\n        for i in range(len(s)):\n            if (s[i]!= t[i]):\n                return False\n        return True\ndef is_anagram(s,t):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if (len(s)!=len(t)):\n        return False\n    else:\n        s = sorted(s)\n        t = sorted(t)\n        for i in range(len(s)):\n            if (s[i]!= t[i]):\n                return False\n        return True\ndef is_anagram(s,t):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if (len(s)!=len(t)):\n        return False\n    else:\n        s = sorted(s)\n        t = sorted(t)\n        for i in range(len(s)):\n            if (s[i]!= t[i]):\n                return False\n        return True\ndef is_anagram(s,t):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if (len(s)!=len(t)):\n    "
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r**2*(a/180)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z):\n        return lcs_of_two(Y, Z) \n    \n    # If only one or none of the sequences \n    # is empty \n    if len(X) == 0 or len(Y) == 0: \n        return len(X) or len(Y) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def get_list_of_chars(X, Y, Z):\n        '''\n        Function to generate a list of characters for the three string sequence.\n        '''\n        chars = []\n        for i in range(len(X)):\n            for j in range(len(Y)):\n                for k in range(len(Z)):\n                    chars.append(X[i] + Y[j] + Z[k])\n        return chars\n    \n    def get_min_length(X, Y, Z):\n        '''\n        Function to get the minimum length of the given three string sequence.\n        '''\n        min_length = len(X)\n        if len(Y) < min_length:\n            min_length = len(Y)\n        if len(Z) < min_length:\n            min_length = len(Z)\n        return min_length\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[0]*(len(Z)+1) for i in range(len(Y)+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for x in range(o + 1)] for x in range(n + 1)] for x in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # make the table \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    table = [[0 for x in range(n+1)] for x in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0 : \n                    table[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    table[i][j] = table[i-1][j-1] + 1\n                else: \n                    table[i][j] = max(table[i-1][j], table[i][j-1]) \n    return table[m][n] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if X==''or Y==''or Z==' ':\n        return 0\n    else:\n        if X==Y:\n            return len(X)\n        if X==Z:\n            return len(X)\n        if Y==Z:\n            return len(X)\n        if X[0]==Y[0] and X[0]==Z[0]:\n            return 1+lcs_of_three(X[1:], Y[1:], Z[1:])\n        else:\n            return max(lcs_of_three(X, Y[1:], Z), lcs_of_three(X, Y, Z[1:]))\n        \ndef partition(a, l, r):\n    pivot = a[l]\n    while l<r:\n        while l<r and a[r] >= pivot:\n            r = r - 1\n        a[l] = a[r]\n        while l<r and a[l] <= pivot:\n            l = l + 1\n        a[r] = a[l]\n    a[l] = pivot\n    return l\ndef quick_sort(a, l, r):\n    if l<r:\n        p = partition(a, l, r)\n        quick_sort(a, l, p-1)\n        quick_sort(a, p+1, r)\ndef get_median(A):\n    quick_sort(A, 0, len(A)-1)\n    return A[(len(A)//2)]\n    \ndef main():\n    s = 'abdbcce'\n    s = 'abcdefghi'\n    s = 'abc'\n    print(lcs_of_three(s, 'abcd', 'cde'))\n    print(lcs_of_three(s, 'abcd', 'efgh'))\n    print(lcs_of_three(s, 'abcd', 'bcde'))\n    print(lcs_of_three(s, 'abcde', 'abcd'))\n    print(get_median(['d','d','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(X, Y, Z): \n        m = len(X) \n        n = len(Y) \n        p = len(Z) \n        L = [[None]*(n+1) for i in range(m+1)] \n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(p+1): \n                    if i == 0 or j == 0 or k == 0 : \n                        L[i][j] = 0 \n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        L[i][j] = L[i-1][j-1]+1\n                    else: \n                        L[i][j] = max(L[i-1][j], L[i][j-1]) \n        return L[m][n] \n    return lcs(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    #create lcs matrix of size (len(X)+1)*(len(Y)+1)*(len(Z)+1)\n    lcs = [[0]*(len(Z)+1) for i in range(len(Y)+1)]\n    for i in range(1,len(Y)+1):\n        for j in range(1,len(Z)+1):\n            for k in range(1,len(X)+1):\n                if(X[k-1] == Y[i-1] and Y[i-1] == Z[j-1]):\n                    lcs[i][j] = lcs[i-1][j-1] + 1\n                else:\n                    lcs[i][j] = max(lcs[i-1][j],lcs[i][j-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n, m, p = len(X), len(Y), len(Z) \n    # Create a table to store results of subproblems \n    L = [[None]*(p+1) for i in range(n+1)] \n    for i in range(n+1): \n        for j in range(p+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] == Z[i-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    # L[m][n] contains the length of the \n    # LCS of X[0..n-1] and Y[0..m-1] \n    return L[m][n] \n    \ndef lcs_of_three2(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n, m, p = len(X), len(Y), len(Z) \n    L = [[0]*(p+1) for i in range(n+1)] \n    for i in range(1, n+1): \n        for j in range(1, p+1): \n            if X[i-1] == Y[j-1] == Z[i-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    # L[m][n] contains the length of the \n    # LCS of X[0..n-1] and Y[0..m-1] \n    return L[n][p] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    matrix = [[0 for i in range(len(Y) + 1)] for j in range(len(X) + 1)] \n    \n    for i in range(1, len(X) + 1): \n        for j in range(1, len(Y) + 1): \n            for k in range(1, len(Z) + 1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    matrix[i][j] = 1 + matrix[i-1][j-1] \n                else: \n                    matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) \n    \n    return matrix[len(X)][len(Y)]\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split(' ')\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if len(str1)==0:\n        return \" \"\n    else:\n        str1=str1.strip()\n        str1=re.sub(r'\\s([A-Z])',r' \\1',str1)\n        return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    return re.sub(r\"(?<=[a-zA-Z])([^a-zA-Z])(?=[A-Z])\", r\" \\1\\2\", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list=str1.split()\n    for i in range(len(word_list)):\n        if word_list[i].istitle():\n            word_list[i]=' '+word_list[i]\n    return ''.join(word_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1=str1.split()\n    list2=[]\n    list3=[]\n    for word in list1:\n        if word[0].isupper():\n            list2.append(word)\n            list3.append(word.title())\n        else:\n            list3.append(word)\n            list2.append(word.title())\n    return''.join(list3)+' '.join(list2)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if str1 == None:\n        return str1\n    result = re.findall(r\"[\\w]+[\\s][\\w]+\", str1)\n    return''.join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s1 = re.sub('([a-zA-Z])', r' \\1', str1)\n    return s1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    s = str1.split()\n    return (' ').join(s)\ndef count_patt(str1,pat):\n    '''\n    Write a function to count occurrence of a pattern in a string.\n    '''\n    if str1 == None or pat == None:\n        print('string or pattern is none')\n        return None\n    count = str1.count(pat)\n    return count\ndef sub_str(str1,pat,repl):\n    '''\n    Write a function to replace a pattern in a string with another pattern.\n    '''\n    if str1 == None or pat == None or repl == None:\n        print('string or pattern or replacement is none')\n        return None\n    pat = re.compile(pat)\n    return pat.sub(repl,str1)\ndef word_count(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile('\\w+')\n    return pat.findall(str1)\ndef space_remove(str1):\n    '''\n    Write a function to remove all the spaces from a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    return str1.replace(' ','')\ndef no_space(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    return str1.replace(' ','')\ndef num_spaces(str1):\n    '''\n    Write a function to count the number of spaces from a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    return str1.count(' ')\ndef word_check(str1):\n    '''\n    Write a function to check if a given string contains only alphabetical characters.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    return re.search(\"[a-zA-Z]\",str1)\ndef space_check(str1):\n    '''\n    Write a function to check if a given string contains only alphabetical characters.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    return re.search(\"[a-zA-Z ]\",str1)\ndef word_check(str1):\n    '''\n    Write a function to check if a given string contains only alphabetical characters.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    return re.search(\"[a-zA-Z]\",str1)\ndef space_check(str1):\n    '''\n    Write a function to check if a given string contains only alphabetical characters.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    return re.search(\"[a-zA-Z ]\",str1)\ndef check(str1):\n    '''\n    Write a function to check if a given string contains only alphabetical characters.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    return re.search(\"[a-zA-Z]\",str1)\ndef vowel_count(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"[aeiouAEIOU]\")\n    return pat.findall(str1)\ndef vowel_count(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"[aeiouAEIOU]\")\n    return pat.findall(str1)\ndef vowel_count(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"[aeiouAEIOU]\")\n    return pat.findall(str1)\ndef vowel_count(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"[aeiouAEIOU]\")\n    return pat.findall(str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replace_match(str1):\n    '''\n    Write a function to replace multiple words with a given string.\n    '''\n    if str1 == None:\n        print('string is none')\n        return None\n    pat = re.compile(\"(\\w+)\")\n    return pat.sub('hi',str1)\ndef replac"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # return str1.title()\n    # return \" \".join(str1.title().split())\n    # return \" \".join(str1.split())\n    # return \" \".join(str1.split())\n    # return \" \".join(str1.title().split())\n    return re.sub(r'(\\w)(\\w)(\\w)', r'\\2 \\3 \\4', str1)\nprint(capital_words_spaces(\"Hands On, Hands Off, Hands On\"))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if re.search('^[A-Z]',str1):\n        pass\n    else:\n        return str1\n    while re.search('^[A-Z]',str1):\n        str1=re.sub(r'\\s+',r' ',str1)\n    return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums_str = nums_str\n    sorted_nums_str.sort()\n    sorted_nums_str.sort(key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # create a new list for the numbers\n    nums_list = []\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    nums_str = nums_str.replace(',', '.')\n    nums_str = nums_str.replace(' ', '')\n    nums_str = nums_str.split(',')\n    for i in nums_str:\n        nums_list.append(float(i))\n    \n    sorted_nums_list = sorted(nums_list)\n    return sorted_nums_list\n    \nprint(sort_numeric_strings('1,2,3,4,5,6,7,8,9'))"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for x in nums_str:\n        nums.append(x.split())\n    return sorted(nums, key=lambda x: (x[0], int(x[1])))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    '''\n    Solution:\n    '''\n    \n    # First convert strings to ints:\n    int_nums = []\n    for i in range(len(nums_str)):\n        int_nums.append(int(nums_str[i]))\n    # Sort the ints:\n    int_nums = sorted(int_nums)\n    # Convert them back to strings:\n    nums_str = []\n    for i in range(len(int_nums)):\n        nums_str.append(str(int_nums[i]))\n    return nums_str\n    \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = list(nums_str)\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split()\n    sorted_nums = []\n    for num in nums_str:\n        if num.isnumeric():\n            nums_str.sort()\n        else:\n            pass\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # firstly, we need to convert the strings to floats, and then sort them\n    # this is very useful in case of sorting data like int and float.\n    return sorted(nums_str, key = float)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n    \n    \ndef main():\n    '''\n    Write a function to take a list as input and return the index where the \n    next element in the list has a greater value than the first element. If \n    there is no next greater element, return -1.\n    '''\n    lst = [1,2,3,4]\n    index = -1\n    try:\n        index = lst.index(max(lst[1:]))\n        print(index)\n    except:\n        print(-1)\n    \n    return None\n    \n    \ndef check_tuple(test_list, test_tup):\n    '''\n    Write a function to check whether the given tuple is contained in the list.\n    '''\n    try:\n        test_list.index(tuple(test_tup))\n        return True\n    except:\n        return False\n    \n    \ndef main():\n    '''\n    Write a function to return a list of strings in the same order as they appear in the original string.\n    '''\n    test_string = \"python\"\n    test_string = \"abcd\"\n    index = -1\n    new_list = []\n    test_list = []\n    if not test_string:\n        print([])\n        return None\n    for i in test_string:\n        new_list.append(i)\n    new_list.sort()\n    print(new_list)\n    \n    \n    return None\n    \n    \ndef main():\n    '''\n    Write a function to return the product of all of the integers in the given list.\n    '''\n    test_list = []\n    product = 1\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            product *= i\n        print(product)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to return a list of lists containing every other item in the given list.\n    '''\n    test_list = []\n    new_list = []\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            new_list.append(i)\n            new_list.append(i)\n        print(new_list)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to remove all duplicate items from the given list.\n    '''\n    test_list = []\n    new_list = []\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            new_list.append(i)\n        for x in new_list:\n            if x not in new_list:\n                new_list.remove(x)\n        print(new_list)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to return a list containing all of the prime numbers in the given range.\n    '''\n    test_list = []\n    new_list = []\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            if i > 1:\n                for j in range(2,i):\n                    if (i % j) == 0:\n                        break\n                else:\n                    new_list.append(i)\n        print(new_list)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to find the longest string in the given list.\n    '''\n    test_list = []\n    longest = -1\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            if i > longest:\n                longest = i\n        print(longest)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to find the largest integer in the given list.\n    '''\n    test_list = []\n    largest = -1\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            if i > largest:\n                largest = i\n        print(largest)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to find the smallest integer in the given list.\n    '''\n    test_list = []\n    smallest = None\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            if i < smallest or smallest == None:\n                smallest = i\n        print(smallest)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to find the number of elements in a list that are greater than the given integer.\n    '''\n    test_list = []\n    count = 0\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            if i > x:\n                count += 1\n        print(count)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to find the number of elements in a list that are greater than the given integer.\n    '''\n    test_list = []\n    count = 0\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            if i > x:\n                count += 1\n        print(count)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to find the number of elements in a list that are greater than the given integer.\n    '''\n    test_list = []\n    count = 0\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list:\n            if i > x:\n                count += 1\n        print(count)\n        return None\n    except:\n        print(\"Error! Please enter a list of integers separated by spaces\")\n        return None\n    \n    \ndef main():\n    '''\n    Write a function to find the number of elements in a list that are greater than the given integer.\n    '''\n    test_list = []\n    count = 0\n    try:\n        while True:\n            try:\n                x = input()\n                x = int(x)\n                test_list.append(x)\n            except:\n                break\n        for i in test_list"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \n    \n    \ndef add_tuple_in_order(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list in order.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == test_tup:\n            test_list.insert(i, test_tup)\n            return test_list\n    test_list.append(test_tup)\n    return test_list\n    \n    \ndef add_tuple_in_order_n(test_list, test_tup, n):\n    '''\n    Write a function to add the given tuple to the given list in order,\n    after the given number of times.\n    '''\n    for i in range(n):\n        test_list.append(test_tup)\n        return test_list\n    for i in range(len(test_list)):\n        if test_list[i] == test_tup:\n            test_list.insert(i, test_tup)\n            return test_list\n    test_list.append(test_tup)\n    return test_list\n    \n    \ndef add_list_in_order(test_list, test_list2):\n    '''\n    Write a function to add the given list to the given list,\n    after the given number of times.\n    '''\n    for i in range(len(test_list2)):\n        test_list.append(test_list2[i])\n    return test_list\n    \n    \ndef add_list_in_order_n(test_list, test_list2, n):\n    '''\n    Write a function to add the given list to the given list,\n    after the given number of times.\n    '''\n    for i in range(n):\n        for j in range(len(test_list2)):\n            test_list.append(test_list2[j])\n        return test_list\n    for i in range(len(test_list)):\n        if test_list[i] == test_list2[i]:\n            test_list.insert(i, test_list2[i])\n            return test_list\n    for i in range(len(test_list2)):\n        test_list.append(test_list2[i])\n    return test_list\n    \n    \ndef remove_list_n(test_list, n):\n    '''\n    Write a function to remove the given number of elements from the given list,\n    after the given number of times.\n    '''\n    for i in range(n):\n        test_list.pop()\n        return test_list\n    \n    \n    \ndef remove_list(test_list):\n    '''\n    Write a function to remove the first element from the given list.\n    '''\n    test_list.pop(0)\n    return test_list\n    \n    \n    \ndef remove_list_by_element(test_list, elem):\n    '''\n    Write a function to remove the first element from the given list that matches the given element.\n    '''\n    if elem in test_list:\n        test_list.remove(elem)\n        return test_list\n    else:\n        return test_list\n        \n        \ndef remove_list_by_element_n(test_list, elem, n):\n    '''\n    Write a function to remove the first element from the given list that matches the given element,\n    after the given number of times.\n    '''\n    i = 0\n    for i in range(n):\n        if elem in test_list:\n            test_list.remove(elem)\n            return test_list\n    if elem in test_list:\n        test_list.remove(elem)\n        return test_list\n    else:\n        return test_list\n    \n    \ndef remove_list_n_all(test_list, n):\n    '''\n    Write a function to remove all the elements from the given list after the given number of times.\n    '''\n    i = 0\n    for i in range(n):\n        test_list.remove(test_list[0])\n        return test_list\n    \n    \n    \ndef remove_list_all(test_list):\n    '''\n    Write a function to remove all the elements from the given list.\n    '''\n    test_list.clear()\n    return test_list\n    \n    \ndef remove_list_n_all_in_order(test_list, n):\n    '''\n    Write a function to remove all the elements from the given list after the given number of times,\n    in the same order.\n    '''\n    i = 0\n    for i in range(n):\n        test_list.pop(0)\n        return test_list\n    \n    \n    \ndef remove_list_all_in_order(test_list):\n    '''\n    Write a function to remove all the elements from the given list in the same order.\n    '''\n    for i in range(len(test_list)):\n        test_list.pop(0)\n    return test_list\n    \n    \n    \ndef swap_list(test_list, index1, index2):\n    '''\n    Write a function to swap the elements at the given indices of the given list.\n    '''\n    temp = test_list[index1]\n    test_list[index1] = test_list[index2]\n    test_list[index2] = temp\n    return test_list\n    \n    \ndef swap_list_in_order(test_list, index1, index2):\n    '''\n    Write a function to swap the elements at the given indices of the given list,\n    in the same order.\n    '''\n    temp = test_list[index1]\n    test_list[index1] = test_list[index2]\n    test_list[index2] = temp\n    return test_list\n    \n    \ndef swap_list_n(test_list, index1, index2, n):\n    '''\n    Write a function to swap the elements at the given indices of the given list,\n    after the given number of times.\n    '''\n    for i in range(n):\n        temp = test_list[index1]\n        test_list[index1] = test_list[index2]\n        test_list[index2] = temp\n        return test_list\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[index1]:\n            test_list[i] = test_list[index2]\n            test_list[index2] = temp\n            return test_list\n    if test_list[i] == test_list[index1]:\n        test_list[i] = test_list[index2]\n        test_list[index2] = temp\n        return test_list\n    \n    \ndef swap_list_n_in_order(test_list, index1, index2, n):\n    '''\n    Write a function to swap the elements at the given indices of the given list,\n    after the given number of times, in the same order.\n    '''\n    for i in range(n):\n        temp = test_list[index1]\n        test_list[index1] = test_list[index2]\n        test_list[index2] = temp\n        return test_list\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[index1]:\n            test_list[i] = test_list[index2]\n            test_list[index2] = temp\n            return test_list\n    if test_list[i] == test_list[index1]:\n        test_list[i] = test_list[index2]\n        test_list[index2] = temp\n        return test_list\n    \n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse the given list.\n    '''\n    test_list.reverse()\n    return test_list\n    \n    \ndef reverse_list_n(test_list, n):\n    '''\n    Write a function to reverse the given list after the given number of times.\n    '''\n    for i in range(n):\n        test_lis"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        i += test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)\n    if l%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    '''\n    first level:\n    [2, 1, 3]\n    second level:\n    [2, 1, 3, 4]\n    third level:\n    [2, 1, 3, 4, 5]\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        if arr[0] >= arr[1] and arr[0] >= arr[2]:\n            return False\n        else:\n            return True\n    if i == 2:\n        if arr[1] >= arr[0] and arr[1] >= arr[2]:\n            return False\n        else:\n            return True\n    if i == 3:\n        if arr[2] >= arr[1] and arr[2] >= arr[0]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i<0 or i>len(arr)-1:\n        return False\n    if arr[i]>arr[2*i+1] or arr[i]>arr[2*i+2]:\n        return False\n    if i>0 and arr[i]<arr[i-1]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    \n    # check if all left nodes are greater than root\n    for i in range(0, n//2):\n        if arr[i] > arr[n-1]:\n            return False\n    \n    # check if all right nodes are greater than root\n    for i in range(n//2, n):\n        if arr[i] < arr[n-1]:\n            return False\n    \n    # Check if there is a greater node on the root \n    if arr[n-1] > arr[0]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr == None or i == None:\n        return False\n    if i > len(arr)-1:\n        return True\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i < 0 or i >= len(arr)):\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2]:\n        return True\n    elif arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+1) or check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[0] > arr[i]: return False\n    left = 2*i+1\n    right = 2*i+2\n    if left <= len(arr)-1 and arr[left] > arr[i]: return False\n    if right <= len(arr)-1 and arr[right] > arr[i]: return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr == None or len(arr) == 0:\n        return False\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int((1 - (1/3) ** n) / 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 1\n    if n == 4: return 2\n    if n == 5: return 2\n    if n == 6: return 2\n    if n == 7: return 3\n    if n == 8: return 3\n    if n == 9: return 4\n    if n == 10: return 4\n    if n == 11: return 4\n    if n == 12: return 5\n    if n == 13: return 5\n    if n == 14: return 6\n    if n == 15: return 7\n    if n == 16: return 8\n    if n == 17: return 8\n    if n == 18: return 9\n    if n == 19: return 10\n    if n == 20: return 10\n    if n == 21: return 11\n    if n == 22: return 11\n    if n == 23: return 13\n    if n == 24: return 14\n    if n == 25: return 15\n    if n == 26: return 15\n    if n == 27: return 16\n    if n == 28: return 17\n    if n == 29: return 19\n    if n == 30: return 21\n    if n == 31: return 22\n    if n == 32: return 22\n    if n == 33: return 23\n    if n == 34: return 24\n    if n == 35: return 25\n    if n == 36: return 26\n    if n == 37: return 27\n    if n == 38: return 28\n    if n == 39: return 29\n    if n == 40: return 30\n    if n == 41: return 31\n    if n == 42: return 32\n    if n == 43: return 33\n    if n == 44: return 34\n    if n == 45: return 35\n    if n == 46: return 36\n    if n == 47: return 37\n    if n == 48: return 38\n    if n == 49: return 39\n    if n == 50: return 40\n    if n == 51: return 41\n    if n == 52: return 42\n    if n == 53: return 43\n    if n == 54: return 44\n    if n == 55: return 45\n    if n == 56: return 46\n    if n == 57: return 47\n    if n == 58: return 48\n    if n == 59: return 49\n    if n == 60: return 50\n    if n == 61: return 51\n    if n == 62: return 52\n    if n == 63: return 53\n    if n == 64: return 54\n    if n == 65: return 55\n    if n == 66: return 56\n    if n == 67: return 57\n    if n == 68: return 58\n    if n == 69: return 59\n    if n == 70: return 60\n    if n == 71: return 61\n    if n == 72: return 62\n    if n == 73: return 63\n    if n == 74: return 64\n    if n == 75: return 65\n    if n == 76: return 66\n    if n == 77: return 67\n    if n == 78: return 68\n    if n == 79: return 69\n    if n == 80: return 70\n    if n == 81: return 71\n    if n == 82: return 72\n    if n == 83: return 73\n    if n == 84: return 74\n    if n == 85: return 75\n    if n == 86: return 76\n    if n == 87: return 77\n    if n == 88: return 78\n    if n == 89: return 79\n    if n == 90: return 80\n    if n == 91: return 81\n    if n == 92: return 82\n    if n == 93: return 83\n    if n == 94: return 84\n    if n == 95: return 85\n    if n == 96: return 86\n    if n == 97: return 87\n    if n == 98: return 88\n    if n == 99: return 89\n    if n == 100: return 90\n    if n == 101: return 91\n    if n == 102: return 92\n    if n == 103: return 93\n    if n == 104: return 94\n    if n == 105: return 95\n    if n == 106: return 96\n    if n == 107: return 97\n    if n == 108: return 98\n    if n == 109: return 99\n    if n == 110: return 100\n    if n == 111: return 101\n    if n == 112: return 102\n    if n == 113: return 103\n    if n == 114: return 104\n    if n == 115: return 105\n    if n == 116: return 106\n    if n == 117: return 107\n    if n == 118: return 108\n    if n == 119: return 109\n    if n == 120: return 110\n    if n == 121: return 111\n    if n == 122: return 112\n    if n == 123: return 113\n    if n == 124: return 114\n    if n == 125: return 115\n    if n == 126: return 116\n    if n == 127: return 117\n    if n == 128: return 118\n    if n == 129: return 119\n    if n == 130: return 120\n    if n == 131: return 121\n    if n == 132: return 122\n    if n == 133: return 123\n    if n == 134: return 124\n    if n == 135: return 125\n    if n == 136: return 126\n    if n == 137: return 127\n    if n == 138: return 128\n    if n == 139: return 129\n    if n == 140: return 130\n    if n == 141: return 131\n    if n == 142: return 132\n    if n == 143: return 133\n    if n == 144: return 134\n    if n == 145: return 135\n    if n == 146: return 136\n    if n == 147: return 137\n    if n == 148: return 138\n    if n == 149: return 139\n    if n == 150: return 140\n    if n == 151: return 141\n    if n == 152: return 142\n    if n == 153: return 143\n    if n == 154: return 144\n    if n == 155: return 145\n    if n == 156: return 146\n    if n == 157: return 147\n    if n == 158: return 148\n    if n == 159: return 149\n    if n == 160: return 150\n    if n == 161: return 151\n    if n == 162: return 152\n    if n == 163: return 153\n    if n == 164: return 154\n    if n == 165: return 155\n    if n == 166: return 156\n    if n == 167: return 157\n    if n == 168: return 158\n    if n == 169: return 159\n    if n == 170: return 160\n    if n == 171: return 161\n    if n == 172: return 162\n    if n == 173: return 163\n    if n == 174: return 164\n    if n == 175: return 165\n    if n == 176: return 166\n    if n == 177: return 167\n    if n == 178: return 168\n    if n == 179: return 169\n    if n == 180: return 170\n    if n == 181: return 171\n    if n == 182: return 172\n    if n == 183: return 173\n    if n == 184: return 174\n    if n == 185: return 175\n    if n == 186: return 176\n    if n == 187: return 177\n    if n == 188: return 178\n    if n == 189: return 179\n    if n == 190: return 180\n    if n == 191: return 181\n    if n == 192: return 182\n    if n == 193: return 183\n    if n == 194: return 184\n    if n == 195: return 185\n    if n == 196: return 186\n    if n == 197: return 187\n    if n == 198: return 188\n    if n == 199: return 189\n    if n == 200: return 190\n    if n == 201: return 191\n    if n == 202: return 192\n    if n == 203: return 193\n    if n == 204: return 194\n    if n == 205: return 195\n    if n == 206: return 196\n    if n == 207: return 197\n    if n == 208: return 198\n    if n == 209: return 199\n    if n == 210: return 200\n    if n == 211: return 201\n    if n == 212: return 202\n    if n == 213: return 203\n    if n == 214: return 204\n    if n == 215: return 205\n    if n ="
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (2*n -1)) // 2\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 0\n    y = 1\n    z = 0\n    num = 2\n    \n    while(num <= n):\n        x = (1 / 2) * (z + y)\n        y = (1 / 2) * (x + z)\n        z = (1 / 2) * (x + y)\n        num += 1\n        \n    return z\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int((-1)**(n//2) * (n+1) * (n-1)//2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal(n):\n        x = 1\n        y = 2\n        for i in range(2,n+1):\n            x,y = y, x + y\n        return x\n    return jacobsthal(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return jacobsthal_num(n-1) + (n-1) * jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    x = 1\n    y = 1\n    z = 0\n    \n    while (n > z):\n        x = (x*2) + 1\n        y = (y*2) + 1\n        z = x + y\n        \n        \n    return n == z\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    count = 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    while count <= n:\n        count = count + (count-1)//2\n    return count\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        return -1\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n == 4:\n        return 5\n    \n    if n == 5:\n        return 8\n    \n    if n == 6:\n        return 13\n    \n    if n == 7:\n        return 21\n    \n    if n == 8:\n        return 34\n    \n    if n == 9:\n        return 55\n    \n    if n == 10:\n        return 89\n    \n    if n == 11:\n        return 144\n    \n    if n == 12:\n        return 233\n    \n    if n == 13:\n        return 377\n    \n    if n == 14:\n        return 610\n    \n    if n == 15:\n        return 987\n    \n    if n == 16:\n        return 1797\n    \n    if n == 17:\n        return 2772\n    \n    if n == 18:\n        return 4181\n    \n    if n == 19:\n        return 6448\n    \n    if n == 20:\n        return 9600\n    \n    if n == 21:\n        return 14695\n    \n    if n == 22:\n        return 24214\n    \n    if n == 23:\n        return 48629\n    \n    if n == 24:\n        return 73906\n    \n    if n == 25:\n        return 116663\n    \n    if n == 26:\n        return 194783\n    \n    if n == 27:\n        return 323886\n    \n    if n == 28:\n        return 513792\n    \n    if n == 29:\n        return 862700\n    \n    if n == 30:\n        return 1441040\n    \n    if n == 31:\n        return 26176875\n    \n    if n == 32:\n        return 5279808\n    \n    if n == 33:\n        return 8431472\n    \n    if n == 34:\n        return 146320384\n    \n    if n == 35:\n        return 272774246\n    \n    if n == 36:\n        return 533778418\n    \n    if n == 37:\n        return 8747289600\n    \n    if n == 38:\n        return 15552545440\n    \n    if n == 39:\n        return 286435956560\n    \n    if n == 40:\n        return 54908441408\n    \n    if n == 41:\n        return 8935966057120\n    \n    if n == 42:\n        return 17156749755920\n    \n    if n == 43:\n        return 294538632495600\n    \n    if n == 44:\n        return 5611505072443200\n    \n    if n == 45:\n        return 92579289993180800\n    \n    if n == 46:\n        return 180792637325121600\n    \n    if n == 47:\n        return 30574757961811280\n    \n    if n == 48:\n        return 56888998835204800\n    \n    if n == 49:\n        return 100794500025862400\n    \n    if n == 50:\n        return 212280766961632000\n    \n    if n == 51:\n        return 339738997511744096\n    \n    if n == 52:\n        return 56266186032089600\n    \n    if n == 53:\n        return 99374896077222400\n    \n    if n == 54:\n        return 149045749808320000\n    \n    if n == 55:\n        return 27304057976435200\n    \n    if n == 56:\n        return 51117764551756400\n    \n    if n == 57:\n        return 8491923573087200000\n    \n    if n == 58:\n        return 144689988483020832\n    \n    if n == 59:\n        return 26211874477656512\n    \n    if n == 60:\n        return 511683637458416000\n    \n    if n == 61:\n        return 87117894788416800\n    \n    if n == 62:\n        return 142535235076525600\n    \n    if n == 63:\n        return 276469777903605600\n    \n    if n == 64:\n        return 528013609383788800\n    \n    if n == 65:\n        return 870777585147666016\n    \n    if n == 66:\n        return 151342629369729600\n    \n    if n == 67:\n        return 281815366017933600\n    \n    if n == 68:\n        return 533778418367148800\n    \n    if n == 69:\n        return 872250347514774400\n    \n    if n == 70:\n        return 160772953393909600\n    \n    if n == 71:\n        return 295242773778720000\n    \n    if n == 72:\n        return 561150507244320000\n    \n    if n == 73:\n        return 925792899931808000\n    \n    if n == 74:\n        return 180792637325121600\n    \n    if n == 75:\n        return 305747579618112800\n    \n    if n == 76:\n        return 56888998835204800\n    \n    if n == 77:\n        return 100794500025862400\n    \n    if n == 78:\n        return 212280766961632000\n    \n    if n == 79:\n        return 339738997511744096\n    \n    if n == 80:\n        return 56266186032089600\n    \n    if n == 81:\n        return 99374896077222400\n    \n    if n == 82:\n        return 149045749808320000\n    \n    if n == 83:\n        return 27304057976435200\n    \n    if n == 84:\n        return 51117764551756400\n    \n    if n == 85:\n        return 8491923573087200000\n    \n    if n == 86:\n        return 144689988483020832\n    \n    if n == 87:\n        return 26211874477656512\n    \n    if n == 88:\n        return 511683637458416000\n    \n    if n == 89:\n        return 87117894788416800\n    \n    if n == 90:\n        return 151342629369729600\n    \n    if n == 91:\n        return 281815366017933600\n    \n    if n == 92:\n        return 533778418367148800\n    \n    if n == 93:\n        return 872250347514774400\n    \n    if n == 94:\n        return 160772953393909600\n    \n    if n == 95:\n        return 295242773778720000\n    \n    if n == 96:\n        return 561150507244320000\n    \n    if n == 97:\n        return 925792899931808000\n    \n    if n == 98:\n        return 180792637325121600\n    \n    if n == 99:\n        return 305747579618112800\n    \n    if n == 100:\n        return 56888998835204800\n    \n    if n == 101:\n        return 100794500025862400\n    \n    if n == 102:\n        return 212280766961632000\n    \n    if n == 103:\n        return 339738997511744096\n    \n    if n == 104:\n        return 56266186032089600\n    \n    if n == 105:\n        return 99374896077222400\n    \n    if n == 106:\n        return 149045749808320000\n    \n    if n == 107:\n        return 27304057976435200\n    \n    if n == 108:\n        return 511177645"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # Code here\n    # we create the sorted list of the tuple list\n    sorted_list = sorted(test_list)\n    print(sorted_list)\n    \n    # we create the tuple list with the first k records\n    k_tuple = []\n    for i in range(0,K):\n        k_tuple.append(sorted_list[i])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # Method-1: Brute Force\n    # Runtime: O(n^2) / O(n)\n    min_k = None\n    min_val = float(\"inf\")\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i][1] < min_val:\n                min_k = test_list[i]\n                min_val = test_list[i][1]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    if len(test_list) == 0:\n        return min_k\n    else:\n        min_k.append(test_list[0])\n        for i in range(1, K):\n            min_k.append(test_list[i])\n        return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    assert type(test_list) == type(test_list)\n    if test_list:\n        assert type(test_list[0]) == type(test_list[0])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    count = 0\n    start_index = 0\n    last_index = len(test_list) - 1\n    left_index = 0\n    right_index = last_index\n    min_index = 0\n    while(left_index <= right_index):\n        count += 1\n        if(test_list[left_index] < test_list[right_index]):\n            min_index = left_index\n        else:\n            min_index = right_index\n        if(min_index <= start_index):\n            break\n        if(test_list[min_index] <= test_list[left_index]):\n            left_index = min_index\n        else:\n            right_index = min_index\n    return test_list[start_index:min_index]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # return sorted(test_list)[:K] # do this one first and find the time complexity\n    # return [min(test_list, key = lambda x: x[k]) for k in range(len(test_list[0]))]\n    # return sorted(test_list)[:K]\n    # return min(sorted(test_list)[:K], key = lambda x: x[k])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # getting the list\n    list1 = test_list[0]\n    list2 = test_list[1]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = None\n    min_k_list = []\n    for tuple_ in test_list:\n        if len(min_k_list) < K:\n            min_k_list.append(tuple_)\n            continue\n        if result == None:\n            result = tuple_\n        else:\n            for i in range(len(min_k_list)):\n                if tuple_[1] < min_k_list[i][1]:\n                    min_k_list.insert(i, tuple_)\n                    break\n                if i == len(min_k_list) - 1:\n                    min_k_list.append(tuple_)\n            if len(min_k_list) == K:\n                break\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Creating a sorted list of tuples\n    sorted_list = sorted(test_list)\n    min_k_tup = sorted_list[:K]\n    return min_k_tup\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                result.append(i)\n    for i in l3:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = list()\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in index_list:\n            index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_index_list = []\n    l1_index = 0\n    l2_index = 0\n    l3_index = 0\n    while l1_index < len(l1) and l2_index < len(l2) and l3_index < len(l3):\n        if l1[l1_index] == l2[l2_index] == l3[l3_index]:\n            common_index_list.append(l1_index)\n        l1_index += 1\n        l2_index += 1\n        l3_index += 1\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n                    break\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    new_list = []\n    for x in range(len(l1)):\n        if l1[x] in l2 and l1[x] in l3:\n            new_list.append(l1[x])\n        if l2[x] in l1 and l2[x] in l3:\n            new_list.append(l2[x])\n        if l3[x] in l1 and l3[x] in l2:\n            new_list.append(l3[x])\n    return new_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    ret = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    ret.append(l1[i])\n    return ret\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    numbers.reverse()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # O(N)\n    if len(numbers) == 1:\n        return numbers[0]\n    \n    # O(N^2)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                second_smallest = numbers[i]\n                break\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers is None or len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = numbers\n    numbers.sort()\n    if len(numbers) < 2:\n        return None\n    else:\n        return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # O(n^2) time | O(1) space\n    '''\n    Sort the list in place and then take the second element from the sorted list\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return len(re.findall(r'a+b', text))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pat = re.compile(r'a[b]*')\n    res = pat.search(text)\n    if(res == None):\n        print(\"Match not found\")\n    else:\n        print(\"Match found:\", res.group())\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'a{1}b',text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(\"^ab+\", text)\n    if match:\n        return match.group()\n    else:\n        return \"\"\nprint(text_match_zero_one(\"aabab\"))\nprint(text_match_zero_one(\"aabab\"))\nprint(text_match_zero_one(\"aaaaaab\"))\nprint(text_match_zero_one(\"aababaaa\"))\nprint(text_match_zero_one(\"aab\"))\nprint(text_match_zero_one(\"ab\"))\nprint(text_match_zero_one(\"\"))\nprint(text_match_zero_one(\"abaa\"))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"ab\")\n    if re.search(pattern, text) is None:\n        print(False)\n    else:\n        print(True)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a{1,}b'\n    #print(re.findall(pattern, text))\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile(r'a(b)*') # r is raw string\n    match = regex.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Regex for this pattern:\n    pattern = re.compile(r\"a+b+\")\n    #Check for matches:\n    if pattern.match(text):\n        print(\"True\")\n    else:\n        print(\"False\")\ntext_match_zero_one(\"aababababab\")\ntext_match_zero_one(\"aaabbb\")\ntext_match_zero_one(\"aabb\")\ntext_match_zero_one(\"aa\")\ntext_match_zero_one(\"aaa\")\ntext_match_zero_one(\"aaab\")\ntext_match_zero_one(\"aab\")\ntext_match_zero_one(\"aabb\")\ntext_match_zero_one(\"aab\")\ntext_match_zero_one(\"aaab\")\ntext_match_zero_one(\"aabb\")\ntext_match_zero_one(\"aabb\")\ntext_match_zero_one(\"aabb\")\ntext_match_zero_one(\"\")\ntext_match_zero_one(\"a\")\ntext_match_zero_one(\"aabb\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    match = re.findall(pattern, text)\n    if match:\n        return 'There are at least one a followed by one b.'\n    else:\n        return 'There are no a followed by one b.'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # Write your function here\n    return re.match(r'a{1,}b', text)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    test_list = [\"g\", \"gg\", \"ggg\", \"gggg\", \"ggggg\"]\n    print(count_reverse_pairs(test_list))"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Write your code here\n    if len(test_list) <= 1:\n        return 0\n    else:\n        seen = {}\n        for i in range(len(test_list)):\n            if not seen.get(test_list[i]):\n                seen[test_list[i]] = i\n            else:\n                print(\"before: \", test_list, seen)\n                test_list = test_list[:i] + test_list[i+1:]\n                seen = {}\n                seen[test_list[i]] = i\n                print(\"after: \", test_list, seen)\n                # seen = {test_list[i]:i}\n    \n    return len(test_list) - 1\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_pairs = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count_pairs += 1\n    return count_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # your code here\n    list1 = test_list\n    list2 = list1.copy()\n    list2 = list2[::-1]\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if(i!= j):\n                if(list1[i] == list2[j]):\n                    count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # An array of pairs\n    \n    # O(n) time and space\n    pairs = []\n    # O(n) time\n    for i in range(len(test_list)):\n        # O(n) time\n        for j in range(len(test_list)):\n            # O(n) time\n            if i!= j and test_list[i][::-1] == test_list[j]:\n                # O(1) time\n                pairs.append([test_list[i], test_list[j]])\n    return len(pairs)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return test_list.count(test_list[-1][::-1]) + test_list.count(test_list[0][::-1])\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for x in range(len(test_list)):\n        for y in range(x+1, len(test_list)):\n            if test_list[x][::-1] == test_list[y]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    # Initializing the dictionary\n    d = {}\n    # Traversing the string list\n    for str in test_list:\n        # Checking if reverse string in dict\n        if (str[::-1] in d):\n            # Incrementing the count\n            d[str[::-1]] += 1\n        else:\n            # Adding to dictionary\n            d[str[::-1]] = 1\n    # Traversing the dictionary\n    for k, v in d.items():\n        # Incrementing the count\n        pairs += v\n    # Returning the count\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # return len(test_list) - test_list.count(''.join(reversed(x)) for x in test_list)\n    return len(test_list) - test_list.count(''.join(reversed(x)) for x in test_list) - (test_list.count(''.join(reversed(x)) for x in test_list))\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if test_list:\n        new_list = []\n        for i in range(len(test_list)):\n            if test_list[i] == test_list[i][::-1]:\n                new_list.append(test_list[i])\n        return len(new_list)\n    else:\n        return 0\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in list1:\n        tup = (i,)\n        if tup in dict1:\n            dict1[tup] += 1\n        else:\n            dict1[tup] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    sub_dict = dict()\n    \n    for sublist in list1:\n        \n        if sublist in sub_dict:\n            sub_dict[sublist] += 1\n        else:\n            sub_dict[sublist] = 1\n    \n    return sub_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = {}\n    for lst in list1:\n        if lst in unique_list:\n            unique_list[lst] += 1\n        else:\n            unique_list[lst] = 1\n    return unique_list\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    unique_dict = dict()\n    for i in list1:\n        if i in unique_dict.keys():\n            unique_dict[i] += 1\n        else:\n            unique_dict[i] = 1\n    return unique_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dic = {}\n    for sublist in list1:\n        if tuple(sublist) not in unique_dic:\n            unique_dic[tuple(sublist)] = 0\n        unique_dic[tuple(sublist)] += 1\n    return unique_dic\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    new_list = []\n    \n    for i in range(len(list1)):\n        new_list.append(tuple(list1[i]))\n        \n    dic_list = {}\n    \n    for j in new_list:\n        if j not in dic_list.keys():\n            dic_list[j] = 1\n        else:\n            dic_list[j] += 1\n        \n    return dic_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists_dict = {}\n    for i in list1:\n        for j in i:\n            if j not in unique_sublists_dict:\n                unique_sublists_dict[j] = 1\n            else:\n                unique_sublists_dict[j] += 1\n    return unique_sublists_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = dict()\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in d.keys():\n                    d[j] += 1\n                else:\n                    d[j] = 1\n        else:\n            if i in d.keys():\n                d[i] += 1\n            else:\n                d[i] = 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    print(f'\\nIn function unique_sublists: \\n')\n    new_list = []\n    unique_sublists_dict = {}\n    for i in list1:\n        if i not in new_list:\n            new_list.append(tuple(i))\n        else:\n            unique_sublists_dict[i] = new_list.count(tuple(i))\n            new_list.remove(i)\n    print('\\tOutput: \\n', unique_sublists_dict)\n    return unique_sublists_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    #list1 = [1,2,2,3,3,4,5,5,6,6,6]\n    list1 = ['a','a','b','b','c','c','c','c','c']\n    print(f\"Unique sublists : {unique_sublists(list1)}\")\n    \n    \n    #out: {('a',): 3, ('b',): 2, ('c',): 2}\n    \n    \n    \n    def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #list1 = [1,2,2,3,3,4,5,5,6,6,6]\n    list1 = ['a','a','b','b','c','c','c','c','c']\n    return {tuple(i):list1.count(i) for i in list1}\n    \n    #out: {('a',): 3, ('b',): 2, ('c',): 2}\n    \n    \n    \n    def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #list1 = [1,2,2,3,3,4,5,5,6,6,6]\n    list1 = ['a','a','b','b','c','c','c','c','c']\n    \n    #alternative solution:\n    def unique_sublists(list1):\n        return {tuple(i):list1.count(i) for i in list1}\n    \n    #out: {('a',): 3, ('b',): 2, ('c',): 2}\n    \n    \n    \n    #return {tuple(i):list1.count(i) for i in list1}\n    \n    #alternative solution:\n    def unique_sublists(list1):\n        return {i:list1.count(i) for i in list1}\n    \n    #out: {('a',): 3, ('b',): 2, ('c',): 2}\n    \n    \n    \n    \n    \n    \n    #alternative solution:\n    def unique_sublists(list1):\n        \n        #tuple is an immutable type\n        #return {tuple(i):list1.count(i) for i in list1}\n        \n        #alternative solution:\n        return {i:list1.count(i) for i in set(list1)}\n    \n    #out: {('a',): 3, ('b',): 2, ('c',): 2}\n    \n    \n    \n    \n    \n    #alternative solution:\n    def unique_sublists(list1):\n        return {i:list1.count(i) for i in set(list1)}\n    \n    #out: {('a',): 3, ('b',): 2, ('c',): 2}\n    \n    \n    \n    \n    \n    \n    #alternative solution:\n    def unique_sublists(list1):\n        return {i:list1.count(i) for i in list1}\n    \n    #out: {('a',): 3, ('b',): 2, ('c',): 2}\n    \n    \n    \n    \n    \n    \n    \n    #alternative solution:\n    def unique_sublists(list1):\n        return {i:list1.count(i) for i in set(list1)}\n    \n    #out: {('a',): 3, ('b',): 2, ('c',): 2}\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # https://stackoverflow.com/questions/23036948/is-a-string-representation-of-an-int-decimal-with-a-certain-precision\n    # return '.' in num and '0' in num\n    return '.' in num and num.index('.') < num.index('0')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        #if num.replace('.','',1).isnumeric() and float(num) == int(float(num)):\n        #    return True\n        return float(num) == int(float(num))\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '.':\n        return True\n    if '.' not in num:\n        return False\n    return num.count('.') == 1 and num.count('0') == 0\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    result = re.match(r'^(\\d+\\.\\d+).+?(\\d+)?$', num)\n    if result:\n        result = float(result.group(1)) + float(result.group(2))\n        if result == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal.Decimal(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    for i in num:\n        if i == ',' or i == '.':\n            continue\n        elif i == '-':\n            if num.index(i)!= 0 and num.index(i)!= len(num)-1:\n                return False\n        elif not i in ['0','1','2','3','4','5','6','7','8','9','.']:\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return bool(re.match(r'^\\d+\\.\\d+$', num))\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 1:\n        return True\n    for i in range(0, n):\n        if arr[i] in arr[i + 1:n]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = []\n    if len(arr) > 1:\n        for i in arr:\n            if i not in distinct_elements:\n                distinct_elements.append(i)\n            else:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # s = set(arr)\n    # if len(s) == 1:\n    #     return True\n    # else:\n    #     return False\n    #     # return len(s) == 1\n    # return len(set(arr)) == 1\n    print(set(arr))\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n        # return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        for j in arr:\n            if j == i:\n                continue\n            elif j!= i:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # a = set(arr)\n    # return len(a) == len(arr)\n    a = dict()\n    for i in arr:\n        a[i] = a.get(i,0) + 1\n    for i in a.values():\n        if i > 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = {}\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    for i in count:\n        if count[i] > 1:\n            return False\n    return True\nprint('Enter the numbers in list')\narr=[]\nwhile True:\n    n=int(input())\n    if n==-1:\n        break\n    arr.append(n)\nprint(unique_Element(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = list(set(arr))\n    print('Output of the function is:',arr)\n    if len(arr) == 1:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"The month number\",monthnum3,\"contains 30 days\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"The month number\",monthnum3,\"contains 29 days\")\n    else:\n        print(\"The month number\",monthnum3,\"contains 28 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for i in range(1,13):\n        if(i == monthnum3):\n            return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 31 or monthnum3 > 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # answer\n    if (monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5) and monthnum3!= 7 or monthnum3!= 8 or monthnum3!= 9 or monthnum3!= 10 or monthnum3!= 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months_30days = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in months_30days:\n        if months_30days[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_leapyear(year):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef is_leapyear_month(year, month):\n    '''\n    Write a function to check whether the given month is leap month or not.\n    '''\n    if is_leapyear(year):\n        if month == 2:\n            return True\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return True\n        else:\n            return False\n    else:\n        if month == 2:\n            return True\n        else:\n            return False\n        \ndef is_divisible_by_number(num, divisor):\n    '''\n    Write a function to check whether the given number is divisible by the given number.\n    '''\n    if num % divisor == 0:\n        return True\n    else:\n        return False\n    \ndef is_divisible_by_number_month(num, divisor, month):\n    '''\n    Write a function to check whether the given number is divisible by the given number and month.\n    '''\n    if is_divisible_by_number(num, divisor):\n        if month == 2:\n            return True\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_divisible_by_number_leapyear(num, divisor, year):\n    '''\n    Write a function to check whether the given number is divisible by the given number and year.\n    '''\n    if is_divisible_by_number(num, divisor):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_divisible_by_number_leapyear_month(num, divisor, year, month):\n    '''\n    Write a function to check whether the given number is divisible by the given number and month.\n    '''\n    if is_divisible_by_number(num, divisor):\n        if is_divisible_by_number_leapyear(num, divisor, year):\n            if month == 2:\n                return True\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef is_divisible_by_number_leapyear_day(num, divisor, year, month, day):\n    '''\n    Write a function to check whether the given number is divisible by the given number and day.\n    '''\n    if is_divisible_by_number(num, divisor):\n        if is_divisible_by_number_leapyear(num, divisor, year):\n            if month == 2:\n                return True\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                if day <= 30:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef is_divisible_by_number_leapyear_month_day(num, divisor, year, month, day):\n    '''\n    Write a function to check whether the given number is divisible by the given number and month and day.\n    '''\n    if is_divisible_by_number_leapyear(num, divisor, year):\n        if is_divisible_by_number_leapyear_month(num, divisor, year, month):\n            if month == 2:\n                if day <= 30:\n                    return True\n                else:\n                    return False\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                if day <= 30:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef is_divisible_by_number_leapyear_month_day_week(num, divisor, year, month, day, week):\n    '''\n    Write a function to check whether the given number is divisible by the given number and month and day and week.\n    '''\n    if is_divisible_by_number_leapyear(num, divisor, year):\n        if is_divisible_by_number_leapyear_month(num, divisor, year, month):\n            if month == 2:\n                if day <= 30:\n                    if week == 0 or week == 4 or week == 8 or week == 12:\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                if day <= 30:\n                    if week == 0 or week == 4 or week == 8 or week == 12:\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef is_divisible_by_number_leapyear_month_day_week_day(num, divisor, year, month, day, week, dayofweek):\n    '''\n    Write a function to check whether the given number is divisible by the given number and month, day and week and day of week.\n    '''\n    if is_divisible_by_number_leapyear(num, divisor, year):\n        if is_divisible_by_number_leapyear_month(num, divisor, year, month):\n            if month == 2:\n                if day <= 30:\n                    if week == 0 or week == 4 or week == 8 or week == 12:\n                        if dayofweek == 0:\n                            return True\n                        elif dayofweek == 1:\n                            return True\n                        elif dayofweek == 2:\n                            return True\n                        elif dayofweek == 3:\n                            return True\n                        elif dayofweek == 4:\n                            return True\n                        elif dayofweek == 5:\n                            return True\n                        elif dayofweek == 6:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                if day <= 30:\n                    if week == 0 or week == 4 or week == 8 or week == 12:\n                        if dayofweek == 0:\n                            return True\n                        elif dayofweek == 1:\n                            return True\n                        elif dayofweek == 2:\n                            return True\n                        elif dayofweek == 3:\n                            return True\n                        elif dayofweek == 4:\n                            return True\n                        elif dayofweek == 5:\n                            return True\n                        elif dayofweek == 6:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef is_divisible_by_number_leapyear_month_day_week_day_year(num, divisor, year, month, day, week, dayofweek, yearofweek):\n    '''\n    Write a function to check whether the given number is divisible by the given number and month, day, week and day o"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for i in range(monthnum3):\n        if i+1 == monthnum3:\n            return 1\n    return 0\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return True\n    elif monthnum3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n        \ndef check_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the given array in the increasing order. \n    # Traverse the array twice to find the minimum diff. \n    \n    arr.sort()\n    res = -1\n    for i in range(n-1): \n        res = max(res, arr[i+1] - arr[i])\n    return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=float(\"inf\")\n    for i in range(n):\n        for j in range(i+1,n):\n            min_diff=min(min_diff,abs(arr[i]-arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff= float('inf')\n    min_index= -1\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if(arr[i]+arr[j]<min_diff):\n                min_diff=arr[i]+arr[j]\n                min_index=(i,j)\n    print(min_index)\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print(\"The given array is \", arr)\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, abs(arr[i]-arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    i = 0\n    j = 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print(arr)\n    n = len(arr)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = float('inf')\n    for i in range(0,n-1):\n        diff = min(diff,abs(arr[i+1]-arr[i]))\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr) \n    res = float('inf') \n    \n    for i in range(n-1): \n        res = min(res,arr[i+1] - arr[i]) \n    return res\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float(\"inf\")\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 2**63\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, abs(arr[i] - arr[j]))\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in str:\n        if i.isdigit():\n            digits += 1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    #new_str = ''.join(i for i in str if i.isdigit())\n    #return len(new_str)\n    if str == '':\n        return 0\n    else:\n        count = 0\n        for i in str:\n            if i.isdigit():\n                count+=1\n        return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isnumeric():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_ctr=0\n    for i in str:\n        if i.isdigit():\n            num_ctr+=1\n    return num_ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s=2\n    c=1\n    while c<=n:\n        s=s+c\n        c=c+1\n    return s\n    \n    "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x=2\n    while(n!=0):\n        x+=1\n        n-=1\n    return x \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n==4:\n        return 3\n    if n==5:\n        return 4\n    if n==6:\n        return 5\n    if n==7:\n        return 6\n    if n==8:\n        return 7\n    if n==9:\n        return 8\n    if n==10:\n        return 9\n    if n==11:\n        return 10\n    if n==12:\n        return 11\n    if n==13:\n        return 12\n    if n==14:\n        return 13\n    if n==15:\n        return 14\n    if n==16:\n        return 15\n    if n==17:\n        return 16\n    if n==18:\n        return 17\n    if n==19:\n        return 18\n    if n==20:\n        return 19\n    if n==21:\n        return 20\n    if n==22:\n        return 21\n    if n==23:\n        return 22\n    if n==24:\n        return 23\n    if n==25:\n        return 24\n    if n==26:\n        return 25\n    if n==27:\n        return 26\n    if n==28:\n        return 27\n    if n==29:\n        return 28\n    if n==30:\n        return 29\n    if n==31:\n        return 30\n    if n==32:\n        return 31\n    if n==33:\n        return 32\n    if n==34:\n        return 33\n    if n==35:\n        return 34\n    if n==36:\n        return 35\n    if n==37:\n        return 36\n    if n==38:\n        return 37\n    if n==39:\n        return 38\n    if n==40:\n        return 39\n    if n==41:\n        return 40\n    if n==42:\n        return 41\n    if n==43:\n        return 42\n    if n==44:\n        return 43\n    if n==45:\n        return 44\n    if n==46:\n        return 45\n    if n==47:\n        return 46\n    if n==48:\n        return 47\n    if n==49:\n        return 48\n    if n==50:\n        return 49\n    if n==51:\n        return 50\n    if n==52:\n        return 51\n    if n==53:\n        return 52\n    if n==54:\n        return 53\n    if n==55:\n        return 54\n    if n==56:\n        return 55\n    if n==57:\n        return 56\n    if n==58:\n        return 57\n    if n==59:\n        return 58\n    if n==60:\n        return 59\n    if n==61:\n        return 60\n    if n==62:\n        return 61\n    if n==63:\n        return 62\n    if n==64:\n        return 63\n    if n==65:\n        return 64\n    if n==66:\n        return 65\n    if n==67:\n        return 66\n    if n==68:\n        return 67\n    if n==69:\n        return 68\n    if n==70:\n        return 69\n    if n==71:\n        return 70\n    if n==72:\n        return 71\n    if n==73:\n        return 72\n    if n==74:\n        return 73\n    if n==75:\n        return 74\n    if n==76:\n        return 75\n    if n==77:\n        return 76\n    if n==78:\n        return 77\n    if n==79:\n        return 78\n    if n==80:\n        return 79\n    if n==81:\n        return 80\n    if n==82:\n        return 81\n    if n==83:\n        return 82\n    if n==84:\n        return 83\n    if n==85:\n        return 84\n    if n==86:\n        return 85\n    if n==87:\n        return 86\n    if n==88:\n        return 87\n    if n==89:\n        return 88\n    if n==90:\n        return 89\n    if n==91:\n        return 90\n    if n==92:\n        return 91\n    if n==93:\n        return 92\n    if n==94:\n        return 93\n    if n==95:\n        return 94\n    if n==96:\n        return 95\n    if n==97:\n        return 96\n    if n==98:\n        return 97\n    if n==99:\n        return 98\n    if n==100:\n        return 99\n    if n==101:\n        return 100\n    if n==102:\n        return 101\n    if n==103:\n        return 102\n    if n==104:\n        return 103\n    if n==105:\n        return 104\n    if n==106:\n        return 105\n    if n==107:\n        return 106\n    if n==108:\n        return 107\n    if n==109:\n        return 108\n    if n==110:\n        return 109\n    if n==111:\n        return 110\n    if n==112:\n        return 111\n    if n==113:\n        return 112\n    if n==114:\n        return 113\n    if n==115:\n        return 114\n    if n==116:\n        return 115\n    if n==117:\n        return 116\n    if n==118:\n        return 117\n    if n==119:\n        return 118\n    if n==120:\n        return 119\n    if n==121:\n        return 120\n    if n==122:\n        return 121\n    if n==123:\n        return 122\n    if n==124:\n        return 123\n    if n==125:\n        return 124\n    if n==126:\n        return 125\n    if n==127:\n        return 126\n    if n==128:\n        return 127\n    if n==129:\n        return 128\n    if n==130:\n        return 129\n    if n==131:\n        return 130\n    if n==132:\n        return 131\n    if n==133:\n        return 132\n    if n==134:\n        return 133\n    if n==135:\n        return 134\n    if n==136:\n        return 135\n    if n==137:\n        return 136\n    if n==138:\n        return 137\n    if n==139:\n        return 138\n    if n==140:\n        return 139\n    if n==141:\n        return 140\n    if n==142:\n        return 141\n    if n==143:\n        return 142\n    if n==144:\n        return 143\n    if n==145:\n        return 144\n    if n==146:\n        return 145\n    if n==147:\n        return 146\n    if n==148:\n        return 147\n    if n==149:\n        return 148\n    if n==150:\n        return 149\n    if n==151:\n        return 150\n    if n==152:\n        return 151\n    if n==153:\n        return 152\n    if n==154:\n        return 153\n    if n==155:\n        return 154\n    if n==156:\n        return 155\n    if n==157:\n        return 156\n    if n==158:\n        return 157\n    if n==159:\n        return 158\n    if n==160:\n        return 159\n    if n==161:\n        return 160\n    if n==162:\n        return 161\n    if n==163:\n        return 162\n    if n==164:\n        return 163\n    if n==165:\n        return 164\n    if n==166:\n        return 165\n    if n==167:\n        return 166\n    if n==168:\n        return 167\n    if n==169:\n        return 168\n    if n==170:\n        return 169\n    if n==171:\n        return 170\n    if n==172:\n        return 171\n    if n==173:\n        return 172\n    if n==174:\n        return 173\n    if n==175:\n        return 174\n    if n==176:\n        return 175\n    if n==177:\n        return 176\n    if n==178:\n        return 177\n    if n==179:\n        return 178\n    if n==180:\n        return 179\n    if n==181:\n        return 180\n    if n==182:"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    while(n>0):\n        n=n-1\n        if(n%2==0):\n            n=n/2\n        else:\n            n=n*3+1\n        if(n==1):\n            print(n)\n            return 1\n        if(n%2==1):\n            n=n+1\n    print(-1)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here\n    n = n+1\n    \n    c = 1\n    a = 1\n    \n    for i in range(2,n):\n        a = (a+1)%2\n        if a == 0:\n            c = c + 1\n    \n    return c\n        "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    return (((3*n - 2)*(3*n - 1))/2) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    count = 0\n    while num < n: \n        count += 1\n        num = count * (count + 1) // 2\n    return count \n    \ndef find_prime_factors(n):\n    '''\n    Write a program that finds all prime factors of given integer number n\n    '''\n    factors = []\n    if n == 1:\n        return factors\n    if n%2 == 0:\n        factors.append(2)\n    while n%2 == 0:\n        n //= 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i == 0:\n            n = n//i\n            factors.append(i)\n    if n > 2:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n += 1\n    return n + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    if(n <= 1):\n        print(n)\n    elif(n == 2):\n        print(2,count)\n        return count + 1\n    elif(n == 3):\n        print(3,count)\n        return count + 1\n    else:\n        count = n // 2\n        rem = n % 2\n        print(2,count)\n        return count + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] \n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n in polite_nums: \n        return True\n    return False\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        pairs.append(l1[i], l1[i+1])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return None\n    else:\n        lst = []\n        for i in range(len(l1)):\n            if i < len(l1)-1:\n                lst.append((l1[i], l1[i+1]))\n        return lst\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(0,len(l1)):\n        if i+1 < len(l1):\n            pairs.append([l1[i],l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i == 0:\n            l2.append([l1[0]])\n        elif l1[i]!= l1[i-1]:\n            l2.append([l1[i-1], l1[i]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if(len(l1)<2):\n        return False\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i],l1[i+1]])\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # initialize count\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs+=1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # sort the arr\n    arr.sort()\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    arr.sort()\n    print(arr)\n    for i in range(len(arr)):\n        if sum - arr[i] == arr[i+1]:\n            cnt += 1\n    return cnt\nprint(get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                res+=1\n    return res\narr = [1,4,7,10,11,15]\nsum = 16\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    # initialize two empty dictionaries\n    a = {}\n    b = {}\n    \n    # iterate over the array\n    for i in arr:\n        # if the element is already in a dictionary, increment its count\n        if i in a:\n            a[i] += 1\n        # else, add it to the dictionary and set its count to 1\n        else:\n            a[i] = 1\n    \n    # iterate over the array again\n    for j in arr:\n        # if the element is already in a dictionary, increment its count\n        if j in b:\n            b[j] += 1\n        # else, add it to the dictionary and set its count to 1\n        else:\n            b[j] = 1\n    \n    # return the count of pairs\n    return sum in a.keys() and a[sum] and sum in b.keys() and b[sum]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    # We sort the array to avoid the duplicates.\n    sorted_array = sorted(arr)\n    for i in range(len(sorted_array)):\n        if sorted_array[i] == sum - sorted_array[i]:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    if len(arr) < 2:\n        return 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    pairs = []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    for item in li1:\n        if item not in li2:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).symmetric_difference(set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li=[]\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            li.append(li1[i])\n    return li\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = []\n    for ele in li1:\n        if ele not in li2:\n            li.append(ele)\n    return li\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = []\n    for i in li1:\n        if i not in li2:\n            li_dif.append(i)\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n    \n    \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).difference(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    set1 = set(li1)\n    set2 = set(li2)\n    \n    diff1 = list(set1 - set2)\n    diff2 = list(set2 - set1)\n    \n    difference = diff1 + diff2\n    \n    return difference\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    odd_nums = []\n    for i in range(1, n+1, 2) :\n        odd_nums.append(i)\n    \n    sum_odd_nums = 0\n    for num in odd_nums :\n        sum_odd_nums += num**4\n    \n    return sum_odd_nums\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i%2!=0):\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = [n for n in range(1,n+1) if n%2 == 1]\n    return sum([i**2 for i in odd_nums])\nodd_num_sum(6)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = []\n    sum_odd = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            odd_num.append(i)\n    odd_num.sort()\n    for i in odd_num :\n        sum_odd = sum_odd + i**4\n    return sum_odd\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if(n == 1):\n        return 1\n    else:\n        return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i%2!=0 :\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_list =[]\n    for i in range(n+1):\n        if i%2!= 0:\n            odd_num_list.append(i)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #initialising the sum\n    sum=0\n    #checking if n is even\n    if(n%2==0) :\n        #printing the statement and exitin the function\n        print(\"Given number is even\")\n        return\n    #checking if n is odd\n    if(n%2!=0) :\n        #printing the statement and exitin the function\n        print(\"Given number is odd\")\n        return\n    #traversing till n\n    for i in range(1,n+1):\n        #checking if i is odd and summing the term\n        if(i%2!=0):\n            sum+=i**4\n        #printing the sum\n        print(sum)"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for num in range(1,n+1) :\n        if num%2!= 0 :\n            sum += num**2\n    return sum\nodd_num_sum(10)\nodd_num_sum(6)\nodd_num_sum(8)\nodd_num_sum(12)\nodd_num_sum(16)\nodd_num_sum(18)\nodd_num_sum(20)\nodd_num_sum(24)\nodd_num_sum(28)\nodd_num_sum(32)\nodd_num_sum(36)\nodd_num_sum(40)\nodd_num_sum(48)\nodd_num_sum(56)\nodd_num_sum(60)\nodd_num_sum(64)\nodd_num_sum(72)\nodd_num_sum(80)\nodd_num_sum(88)\nodd_num_sum(96)\nodd_num_sum(104)\nodd_num_sum(112)\nodd_num_sum(120)\nodd_num_sum(128)\nodd_num_sum(136)\nodd_num_sum(144)\nodd_num_sum(152)\nodd_num_sum(160)\nodd_num_sum(168)\nodd_num_sum(176)\nodd_num_sum(184)\nodd_num_sum(192)\nodd_num_sum(200)\nodd_num_sum(208)\nodd_num_sum(216)\nodd_num_sum(224)\nodd_num_sum(232)\nodd_num_sum(240)\nodd_num_sum(248)\nodd_num_sum(256)\nodd_num_sum(264)\nodd_num_sum(272)\nodd_num_sum(280)\nodd_num_sum(288)\nodd_num_sum(296)\nodd_num_sum(304)\nodd_num_sum(312)\nodd_num_sum(320)\nodd_num_sum(328)\nodd_num_sum(336)\nodd_num_sum(344)\nodd_num_sum(352)\nodd_num_sum(360)\nodd_num_sum(368)\nodd_num_sum(376)\nodd_num_sum(384)\nodd_num_sum(392)\nodd_num_sum(400)\nodd_num_sum(408)\nodd_num_sum(416)\nodd_num_sum(424)\nodd_num_sum(432)\nodd_num_sum(440)\nodd_num_sum(448)\nodd_num_sum(456)\nodd_num_sum(464)\nodd_num_sum(472)\nodd_num_sum(480)\nodd_num_sum(488)\nodd_num_sum(496)\nodd_num_sum(504)\nodd_num_sum(512)\nodd_num_sum(520)\nodd_num_sum(528)\nodd_num_sum(536)\nodd_num_sum(544)\nodd_num_sum(552)\nodd_num_sum(560)\nodd_num_sum(568)\nodd_num_sum(576)\nodd_num_sum(584)\nodd_num_sum(592)\nodd_num_sum(600)\nodd_num_sum(608)\nodd_num_sum(616)\nodd_num_sum(624)\nodd_num_sum(632)\nodd_num_sum(640)\nodd_num_sum(648)\nodd_num_sum(656)\nodd_num_sum(664)\nodd_num_sum(672)\nodd_num_sum(680)\nodd_num_sum(688)\nodd_num_sum(696)\nodd_num_sum(704)\nodd_num_sum(712)\nodd_num_sum(720)\nodd_num_sum(728)\nodd_num_sum(736)\nodd_num_sum(744)\nodd_num_sum(752)\nodd_num_sum(760)\nodd_num_sum(768)\nodd_num_sum(776)\nodd_num_sum(784)\nodd_num_sum(792)\nodd_num_sum(800)\nodd_num_sum(808)\nodd_num_sum(816)\nodd_num_sum(824)\nodd_num_sum(832)\nodd_num_sum(840)\nodd_num_sum(848)\nodd_num_sum(856)\nodd_num_sum(864)\nodd_num_sum(872)\nodd_num_sum(880)\nodd_num_sum(888)\nodd_num_sum(896)\nodd_num_sum(904)\nodd_num_sum(912)\nodd_num_sum(920)\nodd_num_sum(928)\nodd_num_sum(936)\nodd_num_sum(944)\nodd_num_sum(952)\nodd_num_sum(960)\nodd_num_sum(968)\nodd_num_sum(976)\nodd_num_sum(984)\nodd_num_sum(992)\nodd_num_sum(1000)\nodd_num_sum(1008)\nodd_num_sum(1016)\nodd_num_sum(1024)\nodd_num_sum(1032)\nodd_num_sum(1040)\nodd_num_sum(1048)\nodd_num_sum(1056)\nodd_num_sum(1064)\nodd_num_sum(1072)\nodd_num_sum(1080)\nodd_num_sum(1088)\nodd_num_sum(1096)\nodd_num_sum(1104)\nodd_num_sum(1120)\nodd_num_sum(1128)\nodd_num_sum(1136)\nodd_num_sum(1144)\nodd_num_sum(1152)\nodd_num_sum(1160)\nodd_num_sum(1168)\nodd_num_sum(1176)\nodd_num_sum(1184)\nodd_num_sum(1192)\nodd_num_sum(1200)\nodd_num_sum(1208)\nodd_num_sum(1216)\nodd_num_sum(1224)\nodd_num_sum(1232)\nodd_num_sum(1240)\nodd_num_sum(1248)\nodd_num_sum(1256)\nodd_num_sum(1264)\nodd_num_sum(1272)\nodd_num_sum(1280)\nodd_num_sum(1288)\nodd_num_sum(1296)\nodd_num_sum(1304)\nodd_num_sum(1312)\nodd_num_sum(1320)\nodd_num_sum(1328)\nodd_num_sum(1336)\nodd_num_sum(1344)\nodd_num_sum(1352)\nodd_num_sum(1360)\nodd_num_sum(1368)\nodd_num_sum(1376)\nodd_num_sum(1384)\nodd_num_sum(1392)\nodd_num_sum(1400)\nodd_num_sum(1408)\nodd_num_sum(1416)\nodd_num_sum(1424)\nodd_num_sum(1432)\nodd_num_sum(1440)\nodd_num_sum(1448)\nodd_num_sum(1456)\nodd_num_sum(1464)\nodd_num_sum(1472)\nodd_num_sum(1480)\nodd_num_sum(1488)\nodd_num_sum(1496)\nodd_num_sum(1504)\nodd_num_sum(1512)\nodd_num_sum(1520)\nodd_num_sum(1528)\nodd_num_sum(1536)\nodd_num_sum(1544)\nodd_num_sum(1552)\nodd_num_sum(1560)\nodd_num_sum(1568)\nodd_num_sum(1576)\nodd_num_sum(1584)\nodd_num_sum(1592)\nodd_num_sum(1600)\nodd_num_sum(1608)\nodd_num_sum(1616"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n + 1) :\n        if i % 2!= 0 :\n            sum += (i**4)\n    return sum\n    \n    \ndef sum_first_n_even_terms(n):\n    '''\n    Write a python function to find the sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n + 1) :\n        if i % 2 == 0 :\n            sum += i\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if type(exp)!= str:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    brackets = {'(':')', '{':'}', '[':']'}\n    brackets_map = {')':'(', '}':'{', ']':'['}\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    bracket_list = [\"{\", \"(\", \"[\"]\n    para_stack = []\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    bracket = {')': '(', ']': '[', '}': '{'}\n    brackets_map = {'{': '}', '(': ')', '[': ']'}\n    for i in exp:\n        if i in brackets_map:\n            if len(stack)!= 0:\n                if stack[-1]!= bracket[i]:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                return False\n        else:\n            stack.append(i)\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in \"()[]{}\":\n            stack.append(i)\n        else:\n            #if expression has an opening bracket, and expression has an openning brace or parenthesis then the expression is not balanced.\n            if i == \"(\" and stack[-1]!= \")\":\n                stack.pop()\n                stack.append(i)\n            elif i == \"[\" and stack[-1]!= \"]\":\n                stack.pop()\n                stack.append(i)\n            elif i == \"{\" and stack[-1]!= \"}\":\n                stack.pop()\n                stack.append(i)\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    index = 0\n    open_br = [\"{\",\"(\",\"[\"]\n    close_br = [\"]\",\")\",\"]\"]\n    while index < len(exp):\n        if exp[index] in open_br:\n            stack.append(exp[index])\n        elif exp[index] in close_br:\n            if stack and stack[-1] == open_br[close_br.index(exp[index])]:\n                stack.pop()\n            else:\n                return False\n        index += 1\n    if len(stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    dct = {'(': ')', '{': '}', '[': ']'}\n    stack = []\n    for char in exp:\n        if char in dct.keys():\n            stack.append(char)\n        elif char in dct.values():\n            if not stack:\n                return False\n            open_bracket = stack.pop()\n            if dct[open_bracket]!= char:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    return exp=='' or  (exp[0]=='(' and all(check_expression(exp[1:]) for exp in exp.split(')') if exp!='')) or (exp[0]=='[' and all(check_expression(exp[1:]) for exp in exp.split(']') if exp!=''))\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    stack = deque()\n    bracket_map = {'{': '}', '(': ')', '[': ']', '<': '>'}\n    left_bracket = {'{', '(', '['}\n    right_bracket = {'}', ')', ']', '>'}\n    \n    if exp == None:\n        return 0\n    for i in exp:\n        if i in left_bracket:\n            stack.append(i)\n        elif i in right_bracket:\n            if stack and i == bracket_map[stack[-1]]:\n                stack.pop()\n            else:\n                return 0\n    \n    if not stack:\n        return 1\n    else:\n        return 0\ndef find_parenthesis(exp):\n    '''\n    Write a function to find and print the number of closing paranthesis\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    count = 0\n    left_par = 0\n    right_par = 0\n    \n    if exp == None:\n        return 0\n    \n    for i in exp:\n        if i in '({[':\n            left_par += 1\n        elif i in '}])':\n            right_par += 1\n    if left_par!= right_par:\n        return 0\n    return left_par\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length = 0\n    new_str = \"\"\n    for i in range(len(test_str)):\n        if length!= K:\n            length += 1\n            new_str = new_str + test_str[i]\n        else:\n            length = 0\n            new_str = new_str +''\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str = test_str.replace(test_str[i],\" \")\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length_of_test_str = len(test_str)\n    for length in range(0, length_of_test_str + 1):\n        # if length of test_str is less than k\n        if length_of_test_str - length < K:\n            test_str = test_str.replace(test_str[length:], '')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    test_str = [x for x in test_str if len(x)>K]\n    return''.join(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split()\n    \n    while K in word_list:\n        word_list.remove(K)\n    \n    word_list.sort()\n    \n    return \" \".join(word_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    # 1st approach - split the string in the list.\n    # Time complexity O(N)\n    # Space complexity O(N)\n    test_list = test_str.split()\n    res = []\n    for word in test_list:\n        if len(word) == K:\n            continue\n        else:\n            res.append(word)\n    # return \" \".join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def is_valid_word(word):\n        return len(word) == K\n    return \" \".join([word for word in test_str.split() if not is_valid_word(word)])\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #print(len(test_str))\n    if(len(test_str) < K):\n        return test_str\n    else:\n        return test_str[K:]\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    l = 0\n    while l < len(test_str):\n        if len(test_str[l]) == K:\n            test_str = test_str[:l] + test_str[l + 1:]\n        else:\n            l += 1\n    return test_str\nprint(remove_length(\"i love you\",2))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    for i in test_str.split():\n        if len(i) == K:\n            continue\n        else:\n            new_str += i +''\n    return new_str\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count=0\n    for i in range(len(text)):\n        if pattern in text:\n            for j in range(len(pattern)):\n                if text[i]==pattern[j]:\n                    count=count+1\n    if count==0:\n        return None\n    else:\n        return count,i\n        \n    \ndef word_frequency(text,word_list):\n    '''\n    Write a function to calculate the frequency of words in the text. Return None if there is no word in the text.\n    '''\n    word_list=word_list.split()\n    count=0\n    for i in range(len(text)):\n        if text[i] in word_list:\n            count=count+1\n    if count==0:\n        return None\n    else:\n        return count\ndef get_chars(text):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    count=0\n    for i in range(len(text)):\n        if text[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\":\n            count=count+1\n    return count\ndef search_words(text,word_list):\n    '''\n    Write a function to search for words in the text.\n    '''\n    word_list=word_list.split()\n    for i in range(len(text)):\n        if text[i] in word_list:\n            return True\n    return False\n    \ndef search_chars(text,char_list):\n    '''\n    Write a function to search for characters in the text.\n    '''\n    char_list=char_list.split()\n    count=0\n    for i in range(len(text)):\n        if text[i] in char_list:\n            count=count+1\n    if count==0:\n        return None\n    else:\n        return count\n    \ndef search_string(text,pattern):\n    '''\n    Write a function to search for pattern within text. Return None if no match.\n    '''\n    count=0\n    for i in range(len(text)):\n        if text[i]==pattern[0] and text[i:i+len(pattern)]==pattern:\n            count=count+1\n    if count==0:\n        return None\n    else:\n        return count\n    \ndef get_unique_char(text):\n    '''\n    Write a function to get unique characters in a string.\n    '''\n    unique_char_list=[]\n    for i in range(len(text)):\n        if text[i] not in unique_char_list:\n            unique_char_list.append(text[i])\n    return unique_char_list\n    \ndef longest_word(text,word_list):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    longest_word=''\n    count=0\n    for i in range(len(text)):\n        if text[i] in word_list:\n            if count<len(text[i]):\n                count=len(text[i])\n                longest_word=text[i]\n    return longest_word\n    \ndef get_unique_words(text,word_list):\n    '''\n    Write a function to find the number of unique words in a string.\n    '''\n    word_list=word_list.split()\n    unique_word_list=[]\n    count=0\n    for i in range(len(text)):\n        if text[i] in word_list and text[i] not in unique_word_list:\n            unique_word_list.append(text[i])\n            count=count+1\n    return count\n    \ndef get_unique_chars(text,char_list):\n    '''\n    Write a function to get unique characters in a string.\n    '''\n    unique_char_list=[]\n    count=0\n    for i in range(len(text)):\n        if text[i] not in unique_char_list:\n            unique_char_list.append(text[i])\n    return unique_char_list\n    \ndef replace_string(text,repl,sub):\n    '''\n    Write a function to replace all occurrences of sub in text with repl.\n    '''\n    repl_list=repl.split()\n    sub_list=sub.split()\n    for i in range(len(text)):\n        if text[i] in sub_list:\n            text=text[:i]+repl_list[repl_list.index(text[i])]+text[i+len(sub):]\n    return text\n    \ndef replace_string_uppercase(text,repl,sub):\n    '''\n    Write a function to replace all occurrences of sub in text with repl.\n    '''\n    repl_list=repl.split()\n    sub_list=sub.split()\n    for i in range(len(text)):\n        if text[i] in sub_list:\n            text=text[:i]+repl_list[repl_list.index(text[i])].upper()+text[i+len(sub):]\n    return text\n    \ndef replace_string_lowercase(text,repl,sub):\n    '''\n    Write a function to replace all occurrences of sub in text with repl.\n    '''\n    repl_list=repl.split()\n    sub_list=sub.split()\n    for i in range(len(text)):\n        if text[i] in sub_list:\n            text=text[:i]+repl_list[repl_list.index(text[i])].lower()+text[i+len(sub):]\n    return text\n    \ndef search_in_string(text,pattern):\n    '''\n    Write a function to search for pattern in text. Return None if there is no match.\n    '''\n    text_list=[]\n    count=0\n    text_list=text.split()\n    for i in range(len(text)):\n        if text[i]==pattern[0]:\n            for j in range(len(pattern)):\n                if text[i+j] in text_list and text[i+j]!=pattern[j]:\n                    count=count+1\n            if count==len(pattern):\n                return True\n            else:\n                count=0\n    return None\n    \ndef get_unique_pattern(text,pattern):\n    '''\n    Write a function to get unique patterns in a string.\n    '''\n    pattern_list=[]\n    count=0\n    for i in range(len(text)):\n        if text[i]==pattern[0]:\n            pattern_list.append(text[i])\n            for j in range(len(pattern)):\n                if text[i+j] in pattern_list and text[i+j]!=pattern[j]:\n                    count=count+1\n            if count==len(pattern):\n                return True\n            else:\n                count=0\n    return None\n    \ndef find_sub_string(text,pattern):\n    '''\n    Write a function to find the substrings within a string.\n    '''\n    count=0\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)]==pattern:\n            count=count+1\n    return count\n    \ndef search_integer(text,integer):\n    '''\n    Write a function to search for integer in text. Return None if there is no match.\n    '''\n    for i in range(len(text)):\n        if text[i]==integer:\n            return True\n    return None\n    \ndef reverse_string(text):\n    '''\n    Write a function to reverse text.\n    '''\n    reverse_text=\"\"\n    for i in range(len(text)):\n        reverse_text=reverse_text+text[len(text)-i-1]\n    return reverse_text\n    \ndef remove_char(text,char):\n    '''\n    Write a function to remove char from text. Return None if there is no match.\n    '''\n    text_list=[]\n    count=0\n    for i in range(len(text)):\n        if text[i]==char:\n            count=count+"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #1)\n    occ = re.search(pattern,text)\n    if occ:\n        return occ.start(),occ.end()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    import re\n    if re.search(pattern,text):\n        print(re.search(pattern,text).span())\n        print(re.search(pattern,text).group())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        return re.search(r'(?<=\\S)'+pattern+r'(?=\\S)',text).span()\n    except AttributeError:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count=0\n    index=0\n    pos=text.find(pattern)\n    #print(pos)\n    while pos!=-1:\n        count+=1\n        index=pos\n        pos=text.find(pattern,pos+1)\n    if count==0:\n        return \"No match\"\n    else:\n        print(f\"The occurance of the substring {pattern} in the string is {count} and the first occurance of the substring is at index {index}\")\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.findall(pattern,text)\n    if occurance:\n        index=0\n        for i in occurance:\n            index=text.find(i,index)\n            print(\"The substring is at the index of\",index)\n    else:\n        print(\"No match found\")\n        \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pat_len = len(pattern)\n    matches = re.finditer(pattern,text)\n    count = 0\n    \n    for i in matches:\n        print(i.start(),i.end())\n        count += 1\n        if count == pat_len:\n            return i.start()\n    \n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    positions = []\n    str1 = pattern\n    str2 = text\n    n = len(str1)\n    for i in range(0,len(str2)):\n        if str1==str2[i:i+n]:\n            positions.append(i)\n    return positions\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match= re.search(pattern,text)\n    if match:\n        return match.span()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #matches = re.search(r'(ab){2}',text)\n    #matches = re.search(r'(ab){2}',text, re.IGNORECASE)\n    matches = re.search(r'(ab){2}',text,re.IGNORECASE)\n    if matches:\n        print(matches.start())\n        print(matches.end())\n        print(matches.span())\n        print(matches.group())\n        print(matches.groups())\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2!=0:\n            if nums[i]%2==0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1)%2 == 1:\n            if nums[i]%2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0:\n            continue\n        else:\n            if nums[i]%2==1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index =[]\n    for index in range(len(nums)):\n        if index % 2!= 0:\n            odd_index.append(nums[index])\n    if len(odd_index) == len(nums):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd = odd + 1\n    if odd == len(nums):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    i = 0\n    count = 0\n    while i < len(nums):\n        if nums[i] % 2!= 0:\n            count += 1\n        i += 2\n    return True if count == len(nums) else False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i + 1) % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n    \ndef odd_or_even_element(nums):\n    '''\n    Write a python function to check whether a list contains even or odd elements.\n    '''\n    if even_position(nums) or odd_position(nums):\n        return True\n    else:\n        return False\n        \ndef is_odd_even_list(nums):\n    '''\n    Write a python function to check whether the numbers in the list are odd or even.\n    '''\n    if odd_or_even_element(nums):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # if not test_str:\n    #     return 0\n    # vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    # count = 0\n    # for v in vowels:\n    #     test_str = test_str.replace(v, '')\n    # test_str = test_str.replace(' ', '')\n    # for i in range(len(test_str)-1):\n    #     if test_str[i] in vowels and test_str[i+1] in vowels:\n    #         count += 1\n    # return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in \"aeiou\" and test_str[i+1] in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    return len([i for i in test_str if i in vowels])\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    res = 0\n    vowels = set(\"aeiouAEIOU\")\n    for i in range(1, len(test_str)):\n        if test_str[i] in vowels:\n            res += 1\n        if test_str[i-1] in vowels and test_str[i] in vowels:\n            res += 1\n    return res\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    n = len(test_str)\n    for i in range(n):\n        if test_str[i] in vowels:\n            if i!= 0:\n                if test_str[i-1] not in vowels:\n                    count += 1\n            if i!= n-1:\n                if test_str[i+1] not in vowels:\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_dict = {}\n    if not isinstance(test_str, str) or not test_str:\n        return None\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in test_str:\n        if i in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels2(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels3(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels4(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels5(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels6(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels7(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels8(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels9(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels10(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels11(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels12(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels13(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels14(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels15(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels16(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels17(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels18(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = test_str.lower()\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_vowels19(test_str):\n    '''"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Solution 1\n    # vowels = set(['a', 'e', 'i', 'o', 'u'])\n    # count = 0\n    # for i in range(1, len(test_str)):\n    #     if test_str[i] in vowels and test_str[i-1] in vowels:\n    #         count += 1\n    # return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return arr[0]\n    elif len(arr)==2:\n        if arr[0]==arr[1]:\n            return arr[0]+arr[1]\n        else:\n            return arr[0]+arr[1]\n    else:\n        arr.sort()\n        for i in range(len(arr)-1):\n            if arr[i]==arr[i+1]:\n                continue\n            else:\n                return arr[i]+arr[i+1]\n        return arr[-1]+arr[-2]\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = set() \n    for i in arr: \n        if i in s: \n            s.remove(i) \n        else: \n            s.add(i) \n    return sum(s) \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    a = []\n    for i in arr:\n        if i not in a:\n            a.append(i)\n    print(a)\n    return sum(a)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[0:i]:\n            result = result + arr[i]\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    print(\"Sum of non-repeated elements in the list: {}\".format(arr[len(arr)-1] + arr[len(arr)-2]))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_nums = 0\n    for num in arr:\n        if arr.count(num)==1:\n            sum_nums += num\n    return sum_nums\nprint(find_sum([1, 1, 2, 3, 1, 1, 2, 4, 0, 0]))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    set_val = set(arr)\n    sum = 0\n    for i in set_val:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    no_of_elements = len(arr)\n    # if no. of elements is 2\n    if no_of_elements == 2:\n        return arr[0] + arr[1] \n    # if no. of elements is more than 2\n    # set a flag to ignore the first element in the list\n    ignore_first_element = False\n    # initialise sum\n    sum_of_elements = 0\n    # iterate for all elements in the list\n    for i in range(no_of_elements):\n        # if flag is not set and the element is not equal to 0\n        if (ignore_first_element == False) and (arr[i]!= 0):\n            # if not ignore first element, then sum is addition of the rest of the elements\n            sum_of_elements += arr[i]\n        # if the element is 0, set flag to ignore the element\n        elif (arr[i] == 0):\n            # set flag to ignore the element\n            ignore_first_element = True\n        # set the flag to ignore the first element\n        else:\n            ignore_first_element = False\n    # return sum of non-repeated elements\n    return sum_of_elements\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    num_list = []\n    for i in arr:\n        if i not in num_list:\n            num_list.append(i)\n    print(\"\\nThe sum of non-repeated elements in the list:\", sum(num_list))\n    return num_list\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if not isinstance(arr, list): \n        raise TypeError('Input should be a list') \n    if not arr: \n        raise ValueError('Input list is empty') \n    result = [] \n    for i in arr: \n        if i not in result: \n            result.append(i) \n    return sum(result) \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return zip(*groupby(list1))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sorted_list1 = sorted(list1, key=lambda x: x[0])\n    sorted_list2 = sorted(sorted_list1, key=lambda x: x[1])\n    sorted_list3 = sorted(sorted_list2, key=lambda x: x[2])\n    new_list = []\n    i = 0\n    while i < len(sorted_list3):\n        new_list.append(sorted_list3[i][0:3])\n        i = i + 1\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    final_list = []\n    for k,g in groupby(sorted(list1)):\n        final_list.append(list(g))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    final_list = []\n    if not list1:\n        return None\n    temp_list = []\n    for i in list1:\n        if len(temp_list) > 0 and i!= temp_list[-1]:\n            final_list.append(temp_list)\n            temp_list = []\n        temp_list.append(i)\n    if len(temp_list) > 0:\n        final_list.append(temp_list)\n    return final_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # take an input list\n    # Sort it based on the list elements\n    # Iterate over each element in the sorted list\n    # If the current element is not equal to the previous element, \n    # append to sublist and move to the next element\n    # Append the current element to sublist and move to next element\n    # and repeat the above loop\n    # Return the sublist\n    # if the length of the sublist is greater than 3, \n    # then you need to break and return the sublist\n    # else return the sublist\n    # sort the sublist\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # we need to get a sublist of the original list, in which the elements are either all the same or all different.\n    # we need to pack those sublists into a single sublist.\n    sub_lists = []\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] == list1[i-1]:\n            new_list.append(list1[i])\n        else:\n            if len(new_list) == 0:\n                new_list.append(list1[i])\n            else:\n                sub_lists.append(new_list)\n                new_list = []\n                new_list.append(list1[i])\n    if new_list:\n        sub_lists.append(new_list)\n    return sub_lists\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    groups = sorted(groups, key=lambda group: list(group[1]))\n    sublists = [[]]\n    for key, group in groups:\n        sublists[-1].append(key)\n        sublists.append([key])\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_consecutive_duplicates_helper(list1, temp_list):\n        while len(temp_list) > 0:\n            if len(temp_list) == 1:\n                temp_list = []\n            else:\n                temp_list.append(list1[0])\n                list1 = list1[1:]\n        return temp_list\n    return pack_consecutive_duplicates_helper(list1, list1)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for i in list1:\n        for j in list1:\n            if i == j:\n                new_list.append([i])\n                break\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    list1 = list1\n    list1_set = set(list1)\n    new_list = []\n    for item in list1_set:\n        new_list.append(item)\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Dictionary to store the elements of every list as a tuple\n    list_dict = dict()\n    # List for storing the count of each unique sublist\n    unique_list = []\n    \n    # Iterating through the list\n    for sublist in list1:\n        # Iterating through the sublists\n        for each_sublist in sublist:\n            # If the element of the list is not in the dictionary\n            if each_sublist not in list_dict:\n                # Add the element in the dictionary\n                list_dict[each_sublist] = 1\n            # If the element of the list is in the dictionary\n            else:\n                # Increment the count of the sublist\n                list_dict[each_sublist] += 1\n    \n    # Iterating through the dictionary\n    for key, value in list_dict.items():\n        # If the count of the sublist is 1\n        if value == 1:\n            # Append the key in the list\n            unique_list.append(key)\n    \n    # Sort the list\n    unique_list.sort()\n    \n    # Return the number of lists in the list\n    return len(unique_list)\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = dict()\n    for i in list1:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # list1 = [1,2,3]\n    # #list1 = [1,2,3,4]\n    # #list1 = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n    # #list1 = []\n    # #list1 = None\n    # print(unique_sublists(list1))\n    # {(1,): 2, (2,): 1, (3,): 1, (4,): 1, (1, 1): 1, (1, 2): 1, (1, 3): 1, (1, 4): 1, (2, 1): 1, (2, 2): 1, (2, 3): 1, (2, 4): 1, (3, 1): 1, (3, 2): 1, (3, 3): 1, (3, 4): 1, (4, 1): 1, (4, 2): 1, (4, 3): 1, (4, 4): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(i):i.count(i) for i in list1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(d)\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    sublist_value = 1\n    for sublist in list1:\n        if sublist not in sublist_dict:\n            sublist_dict[sublist] = sublist_value\n            sublist_value += 1\n        else:\n            sublist_value += 1\n    return sublist_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!=j:\n                unique_list.append(tuple(sorted(list1[i]+list1[j])))\n    unique_list = set(unique_list)\n    unique_list = sorted(unique_list)\n    unique_dict = {}\n    for i in range(len(unique_list)):\n        unique_dict[unique_list[i]]=0\n        for j in range(len(list1)):\n            if unique_list[i]==tuple(sorted(list1[j])):\n                unique_dict[unique_list[i]]+=1\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_count = {}\n    for i in range(len(list1)):\n        list_count[tuple(list1[i])] = list_count.get(tuple(list1[i]),0) + 1\n    return list_count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {k:len(list(list1)) for k,list1 in groupby(list1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n    # Write your unique_sublists function here.\n    return\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for k in range(1,len(test_list)+1):\n        for subset in combinations(test_list,k):\n            result.append(subset)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #brute force \n    l = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            l.append(test_list[i]+test_list[j])\n    return l \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    '''\n    Test case:\n    [1, 2, 3, 4, 5]\n    [(1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), (4,5)]\n    '''\n    #print(test_list)\n    res = []\n    for i in range(len(test_list)):\n        #print(i)\n        combs = combinations(test_list, i+1)\n        for j in combs:\n            #print(j)\n            if sum(j)==5:\n                #print(j)\n                res.append(j)\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        comb.extend(list(combinations(test_list,i+1)))\n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n    \n    \ndef is_prime(test_num):\n    '''\n    Write a function to check if the given number is prime or not. https://www.geeksforgeeks.org/python-check-primality/\n    '''\n    #edge case: 0 and 1 are not prime\n    if test_num == 0 or test_num == 1:\n        return False\n    #to find factors of the number\n    for i in range(2, test_num):\n        if test_num % i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initializing the list\n    res = list(combinations(test_list, 2))\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = list(combinations(test_list,2))\n    print('The combination of sum list is: ', combinations_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in combinations(test_list,2):\n        combinations_list.append(i)\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    import itertools \n    com = list(itertools.combinations(test_list,3))\n    print(com)\n    #return com\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            print(test_list[i],test_list[j])\n            test_list.append(tuple(sorted((test_list[i] + test_list[j]))))\n    return list(set(test_list))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    divisors = []\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 2\n    if divisors_count % 2 == 0:\n        return \"Divisors count even\"\n    else:\n        return \"Divisors count odd\"\ndef cube(n):\n    '''\n    Write a python function to compute the sum of cubes of the first N natural numbers and print the maximum value\n    '''\n    list_of_nums = []\n    for i in range(1,n+1):\n        list_of_nums.append(i**3)\n    return max(list_of_nums)\ndef merge_sort(arr):\n    '''\n    Write a python function to merge a sorted array with a given sorted array in ascending order.\n    Input: \n        a - sorted array\n        b - another sorted array\n    Output: \n        sorted array\n    '''\n    if len(arr) == 1:\n        return arr\n    mid = len(arr) // 2\n    left_part = arr[:mid]\n    right_part = arr[mid:]\n    left_part = merge_sort(left_part)\n    right_part = merge_sort(right_part)\n    return merge(left_part, right_part)\ndef merge(left_arr, right_arr):\n    '''\n    Write a python function to merge two sorted arrays in ascending order.\n    Input: \n        a - sorted array\n        b - another sorted array\n    Output: \n        sorted array\n    '''\n    result = []\n    while len(left_arr) > 0 and len(right_arr) > 0:\n        if left_arr[0] < right_arr[0]:\n            result.append(left_arr.pop(0))\n        else:\n            result.append(right_arr.pop(0))\n    while len(left_arr) > 0:\n        result.append(left_arr.pop(0))\n    while len(right_arr) > 0:\n        result.append(right_arr.pop(0))\n    return result\ndef count_substring(string, sub_string):\n    '''\n    Write a python function to count the number of occurrencies of a sub-string in a given string.\n    Input: \n        String, sub_string\n    Output: \n        number of occurrencies\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count = count + 1\n    return count\ndef count_inversion(arr):\n    '''\n    Write a python function to count the number of inversions in a given array.\n    Input: \n        an array\n    Output: \n        the number of inversions\n    '''\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 0 if arr[0] <= arr[1] else 1\n    inv_count = 0\n    mid = len(arr)//2\n    left = arr[:mid]\n    right = arr[mid:]\n    inv_count += count_inversion(left)\n    inv_count += count_inversion(right)\n    i = 0\n    j = 0\n    k = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            inv_count += len(left)-i\n            j += 1\n        k += 1\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n    return inv_count\ndef max_interval(arr):\n    '''\n    Write a python function to find the maximum possible sum of three numbers from an array.\n    Input: \n        an array\n    Output: \n        maximum sum\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    sum = arr[0]\n    max_sum = sum\n    for i in range(1,len(arr)-1):\n        sum = max(sum, arr[i]+arr[i+1])\n        max_sum = max(sum, max_sum)\n    return max_sum\ndef min_max_sum_sub_array(arr):\n    '''\n    Write a python function to find the minimum and maximum sum of a contiguous subarray in an array.\n    Input: \n        an array\n    Output: \n        the min and max sum\n    '''\n    if len(arr) == 0:\n        return -1, -1\n    min_sum = arr[0]\n    max_sum = arr[0]\n    sum = arr[0]\n    for i in range(1, len(arr)):\n        sum += arr[i]\n        if sum < arr[i]:\n            min_sum = sum\n        if sum > max_sum:\n            max_sum = sum\n    return min_sum, max_sum\ndef has_distinct_elements(arr):\n    '''\n    Write a python function to find whether there are two elements in an array which have a difference of 1.\n    Input: \n        an array\n    Output: \n        whether they are present or not\n    '''\n    if len(arr) == 1:\n        return False\n    if len(arr) == 2:\n        return True if arr[0]!= arr[1] else False\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            return True\n    return False\ndef min_max_range_sum(arr, k):\n    '''\n    Write a python function to find the maximum possible sum of a range of k numbers from an array.\n    Input: \n        an array, k\n    Output: \n        maximum sum\n    '''\n    if k == 1:\n        return max(arr)\n    if len(arr) == 1:\n        return 0\n    max_sum = arr[0]\n    sum = arr[0]\n    for i in range(1, len(arr)):\n        sum += arr[i]\n        if i >= k:\n            max_sum = max(max_sum, sum-arr[i-k])\n            sum = sum - arr[i-k]\n    return max_sum\ndef is_possible_to_reach_end(arr):\n    '''\n    Write a python function to find whether an array can be empty.\n    Input: \n        an array\n    Output: \n        returns whether the array can be empty or not\n    '''\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if len(arr) > 2:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[1] == arr[2]\ndef count_occurences(arr, num):\n    '''\n    Write a python function to count the number of occurrencies of a number in an array.\n    Input: \n        an array, num\n    Output: \n        number of occurrencies\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == num:\n            count = count + 1\n    return count\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of an integer.\n    Input: \n        an integer\n    Output: \n        an integer\n    '''\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    Input: \n        a string\n    Output: \n        True or False\n    '''\n    if len(string) == 1:"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return len(divisors(n))%2 == 0\n    \ndef divisors(n) :\n    '''\n    Write a python function to return the divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 1\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1 ) :\n        if n%i == 0:\n            divisors.append(i)\n            divisors.append(int(n/i))\n    return divisors \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n//2 + 1) : \n        if(n % i == 0) : \n            count += 1\n    if count % 2 == 0 : \n        print(\"Yes\") \n    else : \n        print(\"No\") \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            divisors += 2\n    if divisors == n : \n        print(\"The count of divisors is even\")\n    else : \n        print(\"The count of divisors is odd\")\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    for i in range(1,n) :\n        if n % i == 0 :\n            divisors = divisors + 1\n    if divisors % 2!= 0 : \n        return False\n    else : \n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    for i in range(1, int(math.sqrt(n)) + 1 ) :\n        if (n % i == 0) : \n            yield i\n        else :\n            yield n\n    if (n % 2 == 0) :\n        yield 2\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt=0\n    if (n>=1):\n        for i in range(1,n+1):\n            if (n%i==0):\n                cnt+=1\n    return cnt\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, math.floor(math.sqrt(n))):\n        if n % i == 0:\n            divisors += 2\n    if n % math.floor(math.sqrt(n)) == 0:\n        divisors += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)-1):\n        if(i%2!=0):\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum=0\n    i=0\n    while i<len(arr):\n        j=i\n        while j<len(arr):\n            if j+i>=len(arr):\n                break\n            odd_sum+=arr[j+i]\n            j+=1\n        i+=1\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Your code here\n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            odd_sum += arr[j]\n    print(odd_sum)\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        odd_sum += sum(arr[i:i+2])\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # start with the sum of all the elements of the array\n    sum = arr[0]\n    # start at the end of the array (i) and go till the length of the array (l) and add the elements to the sum\n    for i in range(1,len(arr)):\n        sum += arr[i]\n        if i % 2!= 0:\n            continue\n        else:\n            # add the sum of the subarray\n            sum += sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    N = len(arr)\n    odd_sum = 0\n    for i in range(1, N, 2):\n        odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = 0\n    for i in range(len(arr)):\n        odd_length += arr[i]\n    return odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(len(arr[i:j+1])%2==1):\n                total+=arr[i:j+1]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    \n    if len(arr) == 0:\n        return 0\n    \n    for i in range(len(arr)):\n        odd_sum += sum(arr[i:i+2])\n    \n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    print(sum(arr[i:i+2] for i in range(len(arr)-1) if len(arr[i:i+2]) == 2 and arr[i] % 2!= 0))\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Code here\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Step 1\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    # Step 2\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    # Step 3\n    delta = cmax - cmin\n    # Step 4\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    # Step 5\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    # Step 6\n    v = cmax\n    # Step 7\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #     r, g, b = color\n    # r, g, b = color\n    if r >= g and r >= b:\n        if g >= b:\n            h = ((g - r) / (g - b)) * 60\n        else:\n            h = ((b - r) / (g - b)) * 60\n    else:\n        if r >= g:\n            h = ((r - b) / (r - g)) * 60\n        else:\n            h = ((g - r) / (b - r)) * 60\n    if h < 0:\n        h += 360\n    return (h, 1.0 - (3.0 * (r-g) / (r + g + b)), 1.0 - (3.0 * (g-b) / (r+g+b)))\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n    if delta == 0:\n        h = 0\n    elif max_c == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_c == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    elif max_c == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    if max_c == 0:\n        s = 0\n    else:\n        s = delta / max_c\n    v = max_c\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r > g and r > b:\n        max_color = r\n    elif g > r and g > b:\n        max_color = g\n    else:\n        max_color = b\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # initializing h,s,v\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    min_color = min(r, g, b)\n    max_color = max(r, g, b)\n    diff = max_color - min_color\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even, odd = 0, 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    print(even, \"x\", odd)\n    \n    \nmul_even_odd([4,5,6,7,8,9,10])\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            if list1[i]%2 == 0:\n                result.append(list1[i]*list1[i])\n            else:\n                result.append(0)\n        else:\n            if list1[i]%2!= 0:\n                result.append(list1[i]*list1[i])\n            else:\n                result.append(0)\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    i = 0\n    for i in list1:\n        if i%2==0:\n            even += i\n        else:\n            odd += i\n    return even, odd\n    \n    \ndef list_sum(list1):\n    '''\n    Write a function to calculate the sum of all the elements of a list.\n    '''\n    sum = 0\n    for i in list1:\n        sum = sum+i\n    return sum\n    \n    \ndef list_sum_2(list1):\n    '''\n    Write a function to calculate the sum of all the positive and negative numbers in a list.\n    '''\n    pos_sum = 0\n    neg_sum = 0\n    for i in list1:\n        if i>=0:\n            pos_sum += i\n        else:\n            neg_sum += i\n    return pos_sum, neg_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(0,len(list1),2):\n        if(list1[i]%2==0):\n            even = even + list1[i]\n        else:\n            odd = odd + list1[i]\n    print(even,odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    i = 1\n    while i <= len(list1):\n        if list1[i-1] % 2 == 0:\n            even += list1[i-1]\n        else:\n            odd += list1[i-1]\n        i += 1\n    print(\"The product of first even and odd numbers in the list is: \", even * odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1 == None or len(list1) == 0:\n        return None\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print('The product of first even number and odd number of the list is ',sum(even)*sum(odd))\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for num in list1:\n        if num%2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n    return even_num, odd_num\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            product = product * list1[i]\n    return product\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    for i in range(0, len(test_str)):\n        test_str[i] = int(test_str[i])\n    return tuple(test_str)\nprint(tuple_str_int(('1', '2', '3')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(','')\n    test_str = test_str.replace(')','')\n    return tuple(map(int,test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip(\"()\")\n    test_str = test_str.split(\",\")\n    test_str = [int(i) for i in test_str]\n    return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip()\n    if test_str == \"\":\n        return ()\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # your code here\n    tup1 = tuple(map(int, test_str.split(',')))\n    return tup1\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = eval(test_str)\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip()\n    if '(' not in test_str or ')' not in test_str or len(test_str.split('('))!= len(test_str.split(')')):\n        return False\n    else:\n        pass\n    for i in range(len(test_str.split('('))):\n        if test_str.split('(')[i].isalpha():\n            return False\n        else:\n            pass\n        if test_str.split('(')[i].isdigit():\n            pass\n        else:\n            return False\n    for i in range(len(test_str.split(')'))):\n        if test_str.split(')')[i].isalpha():\n            return False\n        else:\n            pass\n        if test_str.split(')')[i].isdigit():\n            pass\n        else:\n            return False\n    for i in range(len(test_str.split(')'))):\n        if test_str.split(')')[i].split('(')[0].isdigit():\n            for j in range(len(test_str.split(')')):\n                if test_str.split(')')[i].split('(')[0].isdigit():\n                    if test_str.split(')')[i].split('(')[1]!= ',':\n                        return False\n    return True\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if x == a[mid]:\n            return mid\n        elif x > a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n    if x <= a[lo]:\n        return lo\n    else:\n        return lo+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    if i==len(a) or a[i]!=x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x)\n    if l == len(a):\n        return l\n    if a[l] == x:\n        return l\n    if x < a[l]:\n        return l\n    return l + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i+1\ndef test_right_insertion():\n    a = []\n    a.append(1)\n    a.append(2)\n    a.append(3)\n    a.append(4)\n    a.append(5)\n    assert right_insertion(a, 1) == 1\n    assert right_insertion(a, 2) == 2\n    assert right_insertion(a, 3) == 3\n    assert right_insertion(a, 4) == 4\n    assert right_insertion(a, 5) == 5\n    assert right_insertion(a, 6) == 6\n    assert right_insertion(a, 7) == 7\n    assert right_insertion(a, 8) == 8\n    assert right_insertion(a, 9) == 9\n    assert right_insertion(a, 10) == 10\n    assert right_insertion(a, 11) == 11\n    assert right_insertion(a, 12) == 12\n    assert right_insertion(a, 13) == 13\n    assert right_insertion(a, 14) == 14\n    assert right_insertion(a, 15) == 15\n    assert right_insertion(a, 16) == 16\n    assert right_insertion(a, 17) == 17\n    assert right_insertion(a, 18) == 18\n    assert right_insertion(a, 19) == 19\n    assert right_insertion(a, 20) == 20\n    assert right_insertion(a, 21) == 21\n    assert right_insertion(a, 22) == 22\n    assert right_insertion(a, 23) == 23\n    assert right_insertion(a, 24) == 24\n    assert right_insertion(a, 25) == 25\n    assert right_insertion(a, 26) == 26\n    assert right_insertion(a, 27) == 27\n    assert right_insertion(a, 28) == 28\n    assert right_insertion(a, 29) == 29\n    assert right_insertion(a, 30) == 30\n    assert right_insertion(a, 31) == 31\n    assert right_insertion(a, 32) == 32\n    assert right_insertion(a, 33) == 33\n    assert right_insertion(a, 34) == 34\n    assert right_insertion(a, 35) == 35\n    assert right_insertion(a, 36) == 36\n    assert right_insertion(a, 37) == 37\n    assert right_insertion(a, 38) == 38\n    assert right_insertion(a, 39) == 39\n    assert right_insertion(a, 40) == 40\n    assert right_insertion(a, 41) == 41\n    assert right_insertion(a, 42) == 42\n    assert right_insertion(a, 43) == 43\n    assert right_insertion(a, 44) == 44\n    assert right_insertion(a, 45) == 45\n    assert right_insertion(a, 46) == 46\n    assert right_insertion(a, 47) == 47\n    assert right_insertion(a, 48) == 48\n    assert right_insertion(a, 49) == 49\n    assert right_insertion(a, 50) == 50\n    assert right_insertion(a, 51) == 51\n    assert right_insertion(a, 52) == 52\n    assert right_insertion(a, 53) == 53\n    assert right_insertion(a, 54) == 54\n    assert right_insertion(a, 55) == 55\n    assert right_insertion(a, 56) == 56\n    assert right_insertion(a, 57) == 57\n    assert right_insertion(a, 58) == 58\n    assert right_insertion(a, 59) == 59\n    assert right_insertion(a, 60) == 60\n    assert right_insertion(a, 61) == 61\n    assert right_insertion(a, 62) == 62\n    assert right_insertion(a, 63) == 63\n    assert right_insertion(a, 64) == 64\n    assert right_insertion(a, 65) == 65\n    assert right_insertion(a, 66) == 66\n    assert right_insertion(a, 67) == 67\n    assert right_insertion(a, 68) == 68\n    assert right_insertion(a, 69) == 69\n    assert right_insertion(a, 70) == 70\n    assert right_insertion(a, 71) == 71\n    assert right_insertion(a, 72) == 72\n    assert right_insertion(a, 73) == 73\n    assert right_insertion(a, 74) == 74\n    assert right_insertion(a, 75) == 75\n    assert right_insertion(a, 76) == 76\n    assert right_insertion(a, 77) == 77\n    assert right_insertion(a, 78) == 78\n    assert right_insertion(a, 79) == 79\n    assert right_insertion(a, 80) == 80\n    assert right_insertion(a, 81) == 81\n    assert right_insertion(a, 82) == 82\n    assert right_insertion(a, 83) == 83\n    assert right_insertion(a, 84) == 84\n    assert right_insertion(a, 85) == 85\n    assert right_insertion(a, 86) == 86\n    assert right_insertion(a, 87) == 87\n    assert right_insertion(a, 88) == 88\n    assert right_insertion(a, 89) == 89\n    assert right_insertion(a, 90) == 90\n    assert right_insertion(a, 91) == 91\n    assert right_insertion(a, 92) == 92\n    assert right_insertion(a, 93) == 93\n    assert right_insertion(a, 94) == 94\n    assert right_insertion(a, 95) == 95\n    assert right_insertion(a, 96) == 96\n    assert right_insertion(a, 97) == 97\n    assert right_insertion(a, 98) == 98\n    assert right_insertion(a, 99) == 99\n    assert right_insertion(a, 100) == 100\n    assert right_insertion(a, 101) == 101\n    assert right_insertion(a, 102) == 102\n    assert right_insertion(a, 103) == 103\n    assert right_insertion(a, 104) == 104\n    assert right_insertion(a, 105) == 105\n    assert right_insertion(a, 106) == 106\n    assert right_insertion(a, 107) == 107\n    assert right_insertion(a, 108) == 108\n    assert right_insertion(a, 109) == 109\n    assert right_insertion(a, 110) == 110\n    assert right_insertion(a, 111) == 111\n    assert right_insertion(a, 112) == 112\n    assert right_insertion(a, 113) == 113\n    assert right_insertion(a, 114) == 114\n    assert right_insertion(a, 115) == 115\n    assert right_insertion(a, 116) == 116\n    assert right_insertion(a, 117) == 117\n    assert right_insertion(a, 118) == 118\n    assert right_insertion(a, 119) == 119\n    assert right_insertion(a, 120) == 120\n    assert right_insertion(a, 121) == 121\n    assert right_insertion(a, 122) == 122\n    assert right_insertion(a, 123) == 123\n    assert right_insertion(a, 124) == 124\n    assert right_insertion(a, 125) == 125\n    assert right_insertion(a, 126) == 126\n    assert right_insertion(a, 127) == 127\n    assert right_insertion(a, 128) == 128\n    assert right_insertion(a, 129) == 129\n    assert right_insertion(a, 130) == 130\n    assert right_insertion(a, 131) == 131\n    assert right_insertion(a, 132) == 132\n    assert right_insertion(a, 133) == 133\n    assert right_insertion(a, 134) == 134\n    assert right_insertion(a, 135) == 135\n    assert right_insertion(a, 136) == 136\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l=0\n    r=len(a)-1\n    while l<=r:\n        mid=(l+r)//2\n        if a[mid]<x:\n            l=mid+1\n        else:\n            r=mid-1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == [] or x < a[0]:\n        return 0\n    if x == a[-1]:\n        return len(a)\n    if x > a[-1]:\n        return len(a)\n    #find the index of the element to its right\n    pos = bisect.bisect_right(a, x)\n    #if the element to its right is smaller than the element to its right, insert the element at the right\n    if a[pos] < x:\n        return pos + 1\n    #if the element to its right is larger than the element to its right, insert the element before the element to its right\n    if a[pos] > x:\n        return pos"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if x > a[m]:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # n = len(a)\n    # low = 0\n    # high = n - 1\n    # while low <= high:\n    #     mid = (low + high) // 2\n    #     if a[mid] == x:\n    #         return mid\n    #     elif a[mid] < x:\n    #         low = mid + 1\n    #     else:\n    #         high = mid - 1\n    #     return low\n    '''\n    Insertion sort\n    '''\n    a = a + [x]\n    n = len(a)\n    for i in range(1, n):\n        j = i - 1\n        key = a[i]\n        while j >= 0 and a[j] > key:\n            a[j+1] = a[j]\n            j -= 1\n        a[j+1] = key\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    l = 0\n    h = len(a) - 1\n    while l <= h:\n        mid = (l + h)//2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            h = mid - 1\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r\"ab+b\",text)\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    return re.search(r\"ab+b\",text)\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search(r\"ab+b\",text)\n    \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero 'b'.\n    '''\n    return re.search(r\"ab+b\",text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.findall(r'ab.*?b', text)\n    return matches\nprint(text_match_three('abxxbbbbbbbxx'))\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b++"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = re.compile(r\"(ab)*b\")\n    matches = pat.finditer(text)\n    for i in matches:\n        print(i)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'abab',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(b){3}\")\n    if re.search(pattern, text):\n        print(\"Found a match: \" + pattern.findall(text)[0])\n    else:\n        print(\"Not found\")\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a{3,}b')\n    return pattern.search(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a+b\")\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #pattern = r'ab*b*b'\n    #pattern = r'ab*b'\n    #pattern = r'ab*b*'\n    pattern = r'ab{3}b'\n    return re.match(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'abab',text)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = new_tuple + (test_str,)\n    return new_tuple\n    # return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    new_tuple = tuple(test_list)\n    new_tuple = tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # print('test_list', test_list)\n    # print('test_str', test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list\n    test_str = test_str\n    new_tuple = ()\n    new_tuple = test_list + test_str\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list+[test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str, )\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str.split())\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = []\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            even_index.append(nums[i])\n    print(even_index)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return [i % 2 == 0 for i in range(0, len(nums))]\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0, len(nums)):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    else:\n        for i in range(0, len(nums)):\n            if i % 2 == 0:\n                if nums[i] % 2 == 0:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(x%2==0 for x in nums[::2])\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = [i for i in range(len(nums)) if nums[i] % 2 == 0]\n    print(evens)\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even += 1\n    return even == len(nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for tup in test_tup:\n        if type(tup) == tuple:\n            result.append(tup[0])\n        else:\n            result.append(tup)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return test_tup\n    else:\n        return test_tup[1]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for i in range(0,len(test_tup),2):\n        if test_tup[i+1]!= ():\n            lst.append(test_tup[i])\n    return tuple(lst)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i) is not tuple:\n            new_tup = new_tup + (i,)\n        else:\n            remove_nested(i)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    my_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            my_list.append(item[0])\n        else:\n            my_list.append(item)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup)==1:\n        return test_tup[0]\n    else:\n        return test_tup[0], remove_nested(test_tup[1:])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = []\n    \ndef remove_dup(test_tup):\n    '''\n    Write a function to remove duplicate elements from the given tuple.\n    '''\n    test_tup = []\n    \ndef sort_tuple(test_tup):\n    '''\n    Write a function to sort the given tuple.\n    '''\n    test_tup = []\n    \ndef find_duplicate(test_tup):\n    '''\n    Write a function to find duplicate elements from the given tuple.\n    '''\n    test_tup = []\n    \ndef swap_val(test_tup):\n    '''\n    Write a function to swap a given tuple element pair.\n    '''\n    test_tup = []\n    \ndef find_second_largest(test_tup):\n    '''\n    Write a function to find second largest element from the given tuple.\n    '''\n    test_tup = []\n    \ndef sort_by_second_largest(test_tup):\n    '''\n    Write a function to sort the given tuple by second largest element.\n    '''\n    test_tup = []\n    \ndef length_of_tuple(test_tup):\n    '''\n    Write a function to return the length of the given tuple.\n    '''\n    test_tup = []\n    \ndef reverse_tuple(test_tup):\n    '''\n    Write a function to reverse the given tuple.\n    '''\n    test_tup = []\n    \ndef create_list(test_tup):\n    '''\n    Write a function to create a list from the given tuple.\n    '''\n    test_tup = []\n    \ndef count_occurrence_of_element(test_tup):\n    '''\n    Write a function to count the number of times an element is repeated in the given tuple.\n    '''\n    test_tup = []\n    \ndef find_first_occurrence_of_element(test_tup):\n    '''\n    Write a function to find the first occurrence of an element in the given tuple.\n    '''\n    test_tup = []\n    \ndef replace_element_with_another_element(test_tup):\n    '''\n    Write a function to replace an element in the given tuple with a given other element.\n    '''\n    test_tup = []\n    \ndef get_max_and_min_element(test_tup):\n    '''\n    Write a function to find the max and min element in the given tuple.\n    '''\n    test_tup = []\n    \ndef get_average_element(test_tup):\n    '''\n    Write a function to find the average element in the given tuple.\n    '''\n    test_tup = []\n    \ndef get_second_largest_element(test_tup):\n    '''\n    Write a function to find second largest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef get_second_largest_element_index(test_tup):\n    '''\n    Write a function to find the index of second largest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef get_third_largest_element(test_tup):\n    '''\n    Write a function to find third largest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef get_third_largest_element_index(test_tup):\n    '''\n    Write a function to find the index of third largest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef remove_smallest_element(test_tup):\n    '''\n    Write a function to remove smallest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef remove_element_at_index(test_tup):\n    '''\n    Write a function to remove an element at given index in the given tuple.\n    '''\n    test_tup = []\n    \ndef find_element_at_index(test_tup):\n    '''\n    Write a function to find the element at given index in the given tuple.\n    '''\n    test_tup = []\n    \ndef find_element_at_index_if_present(test_tup):\n    '''\n    Write a function to find the element at given index in the given tuple.\n    '''\n    test_tup = []\n    \ndef remove_second_smallest_element(test_tup):\n    '''\n    Write a function to remove second smallest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef replace_second_smallest_element(test_tup):\n    '''\n    Write a function to replace the second smallest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef remove_third_largest_element(test_tup):\n    '''\n    Write a function to remove third largest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef replace_third_largest_element(test_tup):\n    '''\n    Write a function to replace the third largest element in the given tuple.\n    '''\n    test_tup = []\n    \ndef remove_if_present_at_index(test_tup):\n    '''\n    Write a function to remove an element at given index if it is present in the given tuple.\n    '''\n    test_tup = []\n    \ndef replace_if_present_at_index(test_tup):\n    '''\n    Write a function to replace an element at given index if it is present in the given tuple.\n    '''\n    test_tup = []\n    \ndef add_tuple(test_tup):\n    '''\n    Write a function to add a tuple to the given tuple.\n    '''\n    test_tup = []\n    \ndef add_tuple_at_index(test_tup):\n    '''\n    Write a function to add a tuple at given index to the given tuple.\n    '''\n    test_tup = []\n    \ndef length_of_tuple(test_tup):\n    '''\n    Write a function to return the length of the given tuple.\n    '''\n    test_tup = []\n    \ndef add_tuple_at_start(test_tup):\n    '''\n    Write a function to add a tuple at start of the given tuple.\n    '''\n    test_tup = []\n    \ndef add_tuple_at_end(test_tup):\n    '''\n    Write a function to add a tuple at end of the given tuple.\n    '''\n    test_tup = []\n    \ndef add_tuple_before_element(test_tup):\n    '''\n    Write a function to add a tuple before an element in the given tuple.\n    '''\n    test_tup = []\n    \ndef add_tuple_after_element(test_tup):\n    '''\n    Write a function to add a tuple after an element in the given tuple.\n    '''\n    test_tup = []\n    \ndef insert_tuple_before_element(test_tup, val):\n    '''\n    Write a function to insert a tuple before an element in the given tuple.\n    '''\n    test_tup = []\n    \ndef insert_tuple_after_element(test_tup, val):\n    '''\n    Write a function to insert a tuple after an element in the given tuple.\n    '''\n    test_tup = []\n    \ndef reverse_tuple(test_tup):\n    '''\n    Write a function to reverse the given tuple.\n    '''\n    test_tup = []\n    \ndef find_frequency_of_element(test_tup):\n    '''\n    Write a function to count the frequency of each element in the given tuple.\n    '''\n    test_tup = []\n    \ndef find_second_frequency_of_element(test_tup):\n    '''\n    Write a function to find the frequency of second most common element in the given tuple.\n    '''\n    test_tup = []\n    \ndef print_list(test_list):\n    '''\n    Write a function to print the given list.\n    '''\n    test_list = []\n    \ndef print_tuple"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for tup in test_tup:\n        if not tup in new_tup:\n            new_tup.append(tup)\n    return tuple(new_tup)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    count = 0\n    \n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list:\n        if type(i) == list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i)==list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in range(len(input_list)):\n        if type(input_list[i])==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_of_lists = 0\n    for i in input_list:\n        if type(i) == list:\n            count_of_lists += 1\n    return count_of_lists\n    \ndef count_by_second(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists where the list values are sorted by second.\n    '''\n    count_of_lists = 0\n    for i in input_list:\n        if type(i) == list:\n            count_of_lists += 1\n            if len(i) == 0:\n                continue\n            else:\n                for j in i:\n                    if j[1] == i[0][1]:\n                        count_of_lists -= 1\n    return count_of_lists\n    \ndef merge_lists(list_1, list_2):\n    '''\n    Write a python function to merge two sorted list into one sorted list.\n    '''\n    merged_list = []\n    if list_1!= [] and list_2!= []:\n        merged_list = list_1\n        merged_list.extend(list_2)\n        merged_list.sort()\n    return merged_list\n    \ndef largest_sum_subarray(input_list, size): \n    '''\n    Write a python function to find the largest sum of contiguous subarray of size k.\n    '''\n    max_sum = -1\n    sorted_list = sorted(input_list)\n    start = 0\n    end = 0\n    while start <= len(sorted_list):\n        end = start\n        while end <= len(sorted_list) and end < len(sorted_list) - size + 1:\n            if sum(sorted_list[start:end]) > max_sum:\n                max_sum = sum(sorted_list[start:end])\n            end += 1\n        start += 1\n    return max_sum\n    \ndef sorted_list_sum(input_list): \n    '''\n    Write a python function to find the sum of all the numbers in a sorted list.\n    '''\n    if type(input_list)!= list:\n        return -1\n    sorted_list = sorted(input_list)\n    sum_list = 0\n    for i in sorted_list:\n        sum_list += i\n    return sum_list\n    \ndef find_smallest_int(input_list): \n    '''\n    Write a python function to find the smallest integer in a list.\n    '''\n    if type(input_list)!= list:\n        return -1\n    smallest_num = input_list[0]\n    for i in input_list:\n        if i < smallest_num:\n            smallest_num = i\n    return smallest_num\n    \ndef find_max_of_list(input_list): \n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    max_num = input_list[0]\n    for i in input_list:\n        if i > max_num:\n            max_num = i\n    return max_num\n    \ndef rotate_list_by_k(input_list, k): \n    '''\n    Write a python function to rotate a list by k places.\n    '''\n    if type(input_list)!= list:\n        return -1\n    input_list.reverse()\n    input_list = input_list[k:] + input_list[:k]\n    return input_list\n    \ndef swap_numbers(input_list, index_1, index_2): \n    '''\n    Write a python function to swap two numbers in a given list.\n    '''\n    input_list[index_1], input_list[index_2] = input_list[index_2], input_list[index_1]\n    return input_list\n    \ndef fizz_buzz_list(input_list): \n    '''\n    Write a python function to print a list in a way that if i is a multiple of 3, i is fizz, if i is a multiple of 5, i is buzz, \n    and if i is a multiple of both 3 and 5, i is fizzbuzz.\n    '''\n    for i in input_list:\n        if type(i) == int and i % 3 == 0 and i % 5 == 0:\n            print(i, 'is fizzbuzz')\n        elif type(i) == int and i % 3 == 0:\n            print(i, 'is fizz')\n        elif type(i) == int and i % 5 == 0:\n            print(i, 'is buzz')\n        else:\n            print(i, end ='')\n    return input_list\n    \ndef is_palindrome(input_list): \n    '''\n    Write a python function to check if a given list is a palindrome or not.\n    '''\n    if type(input_list)!= list:\n        return -1\n    s = ''\n    for i in input_list:\n        s = i + s\n    return s == s[::-1]\n    \ndef list_of_strings(input_list): \n    '''\n    Write a python function to convert a list of numbers into a list of strings\n    '''\n    if type(input_list)!= list:\n        return -1\n    for i in range(len(input_list)):\n        input_list[i] = str(input_list[i])\n    return input_list\n    \ndef list_of_strings_by_strings(input_list): \n    '''\n    Write a python function to convert a list of numbers into a list of strings\n    '''\n    if type(input_list)!= list:\n        return -1\n    for i in range(len(input_list)):\n        input_list[i] = str(input_list[i])\n    return input_list\n    \ndef list_of_strings_by_strings_two(input_list): \n    '''\n    Write a python function to convert a list of numbers into a list of strings\n    '''\n    if type(input_list)!= list:\n        return -1\n    if type(input_list[0]) == list:\n        temp_list = []\n        for i in input_list:\n            temp_list += list_of_strings(i)\n        return temp_list\n    else:\n        return list_of_strings_by_strings(input_list)\n    \ndef list_of_strings_by_strings_three(input_list): \n    '''\n    Write a python function to convert a list of numbers into a list of strings\n    '''\n    if type(input_list)!= list:\n        return -1\n    if type(input_list[0]) == list:\n        temp_list = []\n        for i in input_list:\n            temp_list += list_of_strings_by_strings(i)\n        return temp_list\n    else:\n        return list_of_strings_by_strings(input_list)\n    \ndef sort_list_by_element(input_list, key_value): \n    '''\n    Write a python function to sort a list of numbers by element.\n    '''\n    if type(input_list)!= list:\n        return -1\n    for i in range(len(input_list)):\n        input_list[i] = int(input_list[i])\n    input_list.sort(key = lambda x: x)\n    return input_list\n    \ndef n_gram(input_list, n): \n    '''\n    Write a python function to find the n-gram of a given list.\n    '''\n    if type(input_list)!= list:\n        return -1\n    output_list = []\n    for i in range(len(input_list)-n+1):\n        temp_list = input_list[i:i+n]\n        output_list.append(temp_list)\n    return output_list\n    \ndef count_no_of_words(input_list): \n    '''\n    Write a python function to count the number of words in a given list.\n    '''\n    if type(input_list)!= list:\n        return -1\n    count_of_words = 0\n    for i in input_list:\n        if type(i) == str:\n            count_of_words += 1"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    for i in range(len(input_list)): \n        if type(input_list[i]) == list:\n            count_list(input_list[i])\n        else:\n            count_list = input_list[i]\n    print(count_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if x==arr[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = int((low+high)/2)\n        if x == arr[mid]:\n            return mid\n        elif x > arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    size = len(arr)\n    if size == 0:\n        return -1\n    # if there is only 1 element\n    if size == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    # if array is not sorted\n    if arr[0] <= x and arr[size - 1] >= x:\n        index = 0\n        for i in range(size - 1):\n            if arr[i] <= x <= arr[i + 1]:\n                index = i + 1\n        return index\n    # if array is sorted\n    if arr[0] >= x:\n        return 0\n    if arr[size - 1] <= x:\n        return size - 1\n    # if array is not sorted\n    left = 0\n    right = size - 1\n    while right > left:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid\n        else:\n            return mid\n    return left\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    s=0\n    f=len(arr)-1\n    while s<=f:\n        mid=(s+f)//2\n        if x==arr[mid]:\n            return mid\n        elif x<arr[mid]:\n            f=mid-1\n        else:\n            s=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    p=0\n    r=l-1\n    while p<r:\n        m=(p+r)//2\n        if arr[m]>x:\n            r=m\n        else:\n            p=m+1\n    if arr[p]==x:\n        return p\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    mid = (start + end) // 2\n    while start <= end:\n        if x == arr[mid]:\n            return mid\n        elif x < arr[mid]:\n            end = mid - 1\n            mid = (start + end) // 2\n        elif x > arr[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n    return -1\narr = []\nprint(last(arr,10))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return -1\n    if x==arr[n-1]:\n        return n-1\n    if x>arr[n-1]:\n        return last(arr[n//2+1:],x)\n    else:\n        return last(arr[:n//2+1],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    start=0\n    end=len(arr)-1\n    while start<=end:\n        mid=(start+end)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                end=mid-1\n        elif arr[mid]>x:\n            end=mid-1\n        else:\n            start=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return None\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"\\s*a\\s*(.*?)\\s*b\\s*\")\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    return None\nprint(text_starta_endb(\"abra cadabra\"))\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_pattern = \"^a.*?b$\"\n    a_pattern = re.compile(a_pattern, re.IGNORECASE)\n    matches = re.finditer(a_pattern, text)\n    return matches\n    \ndef string_match_ends_in_e(text):\n    '''\n    Write a regex that matches a string ending in 'e'.\n    '''\n    pattern = \"^.*e$\"\n    pattern = re.compile(pattern, re.IGNORECASE)\n    matches = re.finditer(pattern, text)\n    return matches\n    \ndef string_match_ends_in_e_at_least_two_chars(text):\n    '''\n    Write a regex that matches a string ending in 'e' that is at least two characters long.\n    '''\n    pattern = \"^.*e.*$\"\n    pattern = re.compile(pattern, re.IGNORECASE)\n    matches = re.finditer(pattern, text)\n    return matches\n    \ndef text_match_twice_a_or_e(text):\n    '''\n    Write a regex that matches a string that either starts with 'a' or 'e' and then again matches 'a' or 'e'.\n    '''\n    pattern = \"^.*a.*e.*$\"\n    pattern = re.compile(pattern, re.IGNORECASE)\n    matches = re.finditer(pattern, text)\n    return matches\n    \ndef text_match_one_two_words_apart(text):\n    '''\n    Write a regex that matches a string that is either:\n    \n    1. A single word, the word 'one', followed by a space and then a single word, the word 'two'.\n    2. A single word, the word 'one', followed by a space and then a sequence of words, the words 'two', 'three', and so on.\n    \n    You can assume that the string contains no other type of punctuation.\n    '''\n    pattern = \"^([a-zA-Z]+)[ ]([a-zA-Z]+)$\"\n    pattern = re.compile(pattern, re.IGNORECASE)\n    matches = re.finditer(pattern, text)\n    return matches\n    \ndef text_match_one_a_or_e_followed_by_space_and_one_or_more_words(text):\n    '''\n    Write a regex that matches a string that is either:\n    \n    1. A single word, the word 'one', followed by a space and then a single word, the word 'a'.\n    2. A single word, the word 'one', followed by a space and then a sequence of words, the words 'a', 'b', and so on.\n    3. A single word, the word 'one', followed by a space and then a single word, the word 'a' or 'e'.\n    4. A single word, the word 'one', followed by a space and then a sequence of words, the words 'a', 'e', and so on.\n    5. A single word, the word 'one', followed by a space and then a single word, the word 'a', 'e', and so on.\n    \n    You can assume that the string contains no other type of punctuation.\n    '''\n    pattern = \"^([a-zA-Z]+)[ ]([a-zA-Z]+)[ ]([a-zA-Z]+)$\"\n    pattern = re.compile(pattern, re.IGNORECASE)\n    matches = re.finditer(pattern, text)\n    return matches\n    \ndef text_match_single_word_and_hyphen(text):\n    '''\n    Write a regex that matches a string that is:\n    \n    1. A single word, the word 'one', followed by a hyphen and a single word, the word 'two'.\n    2. A single word, the word 'one', followed by a hyphen and a sequence of words, the words 'two', 'three', and so on.\n    3. A single word, the word 'one', followed by a hyphen and a single word, the word 'two' or 'three'.\n    4. A single word, the word 'one', followed by a hyphen and a sequence of words, the words 'two', 'three', and so on.\n    5. A single word, the word 'one', followed by a hyphen and a single word, the word 'two', 'three', and so on.\n    \n    You can assume that the string contains no other type of punctuation.\n    '''\n    pattern = \"^([a-zA-Z]+)[ ]([a-zA-Z]+)[ ]([a-zA-Z]+)$\"\n    pattern = re.compile(pattern, re.IGNORECASE)\n    matches = re.finditer(pattern, text)\n    return matches\n    \ndef text_match_hyphen_only(text):\n    '''\n    Write a regex that matches a string that is either:\n    \n    1. A single word, the word 'one', followed by a hyphen and a single word, the word 'two'.\n    2. A single word, the word 'one', followed by a hyphen and a sequence of words, the words 'two', 'three', and so on.\n    3. A single word, the word 'one', followed by a hyphen and a single word, the word 'two' or 'three'.\n    4. A single word, the word 'one', followed by a hyphen and a sequence of words, the words 'two', 'three', and so on.\n    5. A single word, the word 'one', followed by a hyphen and a single word, the word 'two', 'three', and so on.\n    \n    You can assume that the string contains no other type of punctuation.\n    '''\n    pattern = \"^([a-zA-Z]+)[ ]([a-zA-Z]+)[ ]([a-zA-Z]+)$\"\n    pattern = re.compile(pattern, re.IGNORECASE)\n    matches = re.finditer(pattern, text)\n    return matches\n    \ndef text_match_hyphen_and_a_followed_by_a_or_e(text):\n    '''\n    Write a regex that matches a string that is either:\n    \n    1. A single word, the word 'one', followed by a hyphen and a single word, the word 'a'.\n    2. A single word, the word 'one', followed by a hyphen and a sequence of words, the words 'a', 'b', and so on.\n    3. A single word, the word 'one', followed by a hyphen and a single word, the word 'a' or 'e'.\n    4. A single word, the word 'one', followed by a hyphen and a sequence of words, the words 'a', 'e', and so on.\n    5. A single word, the word 'one', followed by a hyphen and a single word, the word 'a', 'e', and so on.\n    \n    You can assume that the string contains no other type of punctuation.\n    '''\n    pattern = \"^([a-zA-Z]+)[ ]([a-zA-Z]+)[ ]([a-zA-Z]+)$\"\n    pattern = re.compile(pattern, re.IGNORECASE)\n    matches = re.finditer(pattern, text)\n    return matches\n    \ndef text_match_hyphen_and_an_or_en_followed_by_a_or_e(text):\n    '''\n    Write a regex that matches a string that is either:\n    \n    1. A single word, the word 'one', followed by a hyphen and an or e followed by a single word, the word 'a'.\n    2. A single word, the word 'one', followed by a hyphen and an or e followed by a sequence of words, the words 'a', 'b', and so on.\n    3. A single word, the word 'one', followed by a hyphen and an or e followed by a single word, the word 'a' or 'e'.\n    4. A single word, the word 'one', followed by a hyphen and an or e followed by a sequence of words, the words 'a', 'e', and so on.\n    5. A single word, the word 'one', followed by a hyphen and an or e followed by a single word, the word 'a'"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #return re.match(r'a.*b$', text)\n    return re.search(r'^a.*b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    try:\n        return bool(re.search(r\"a[a-z]*b\",text))\n    except:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    return re.match(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"a\\s+.*b\")\n    match = pattern.search(text)\n    if match:\n        print('\\nMatch found!')\n    else:\n        print('\\nNo Match found')\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match=re.search(r'a(.*)b',text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print(re.findall(r'a[^b]*b',text))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_val=0\n    for i in dict:\n        sum_val=sum_val+dict[i]\n    return sum_val\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for x in dict.values():\n        sum_ += x\n    return sum_\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sums = 0\n    for i in dict.values():\n        sums += i\n    return sums\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower bound: \"))\n    r = int(input(\"Enter the upper bound: \"))\n    sum = 0\n    if l <= r:\n        for i in range(l, r+1):\n            if i % 2!= 0:\n                sum += i\n    else:\n        print(\"Invalid input\")\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if type(n)!= int or type(l)!= int or type(r)!= int:\n        raise ValueError\n    if l < 1:\n        raise ValueError\n    if r < 1:\n        raise ValueError\n    if n > r or n < l:\n        raise ValueError\n    return sum(range(n, n + 1, 2))\n    \ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if type(n)!= int or type(l)!= int or type(r)!= int:\n        raise ValueError\n    if l < 1:\n        raise ValueError\n    if r < 1:\n        raise ValueError\n    if n > r or n < l:\n        raise ValueError\n    return sum(range(n, n + 1, 2))\n    \ndef odd_count(n):\n    '''\n    Write a python function to count the number of odd natural numbers within the range l and r.\n    '''\n    if type(n)!= int or type(l)!= int or type(r)!= int:\n        raise ValueError\n    if l < 1:\n        raise ValueError\n    if r < 1:\n        raise ValueError\n    if n > r or n < l:\n        raise ValueError\n    odd_count = 0\n    for i in range(n, n + 1, 2):\n        odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n+1) if i%2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    n = input('Enter the range:')\n    if n.isalpha():\n        n = input('Enter a natural number:')\n    else:\n        n = int(n)\n    if n < 1 or n > 100:\n        print('Enter a natural number between 1 and 100')\n        return\n    sum = 0\n    for i in range(n):\n        if i%2!= 0:\n            sum += i\n    print(f'The sum of all odd numbers between {n} and {n+1} is {sum}')\nsum_odd(n)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l=int(input(\"Enter lower range: \"))\n    r=int(input(\"Enter upper range: \"))\n    sum_odd=0\n    for i in range(l,r+1):\n        if(i%2!=0):\n            sum_odd=sum_odd+i\n    print(\"Sum of odd numbers between l and r is: \",sum_odd)\nsum_odd(0,10"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 2!= 0: \n            s += i\n    return s\n    \n    \ndef subtract_1_to_n(n): \n    '''\n    Write a python function to subtract 1 from all the even numbers within the range l and r.\n    '''\n    for i in range(n): \n        if i % 2 == 0: \n            i = i - 1\n    return i \n    \n    \ndef count_non_negative(n): \n    '''\n    Write a python function to count non-negative numbers within the range l and r.\n    '''\n    count = 0\n    for i in range(n): \n        if i > 0: \n            count += 1\n    return count \n    \n    \ndef find_subarray(n, k): \n    '''\n    Write a python function to find the subarray with the maximum sum of size k.\n    '''\n    total = 0\n    arr = []\n    for i in range(n): \n        total += arr[i]\n        arr.append(total)\n    max_sum = 0\n    pos = 0\n    for i in range(n-k+1): \n        total = 0\n        for j in range(k): \n            total += arr[i+j]\n        if total > max_sum: \n            max_sum = total\n            pos = i\n    return max_sum, pos \n    \n    \ndef fibonacci(n): \n    '''\n    Write a python function to find the nth term of the fibonacci sequence.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef fibonacci_iterative(n): \n    '''\n    Write a python function to find the nth term of the fibonacci sequence.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    f1 = 0\n    f2 = 1\n    f_n = 0\n    for i in range(n): \n        f_n = f1 + f2\n        f1 = f2\n        f2 = f_n\n    return f_n\n    \n    \ndef sum_odd_greater_than(n): \n    '''\n    Write a python function to find the sum of all odd numbers greater than a given number.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 2!= 0: \n            s += i\n    return s\n    \n    \ndef count_matches(s1, s2): \n    '''\n    Write a python function to count the number of matches between two strings. \n    '''\n    count = 0\n    for i in range(len(s1)): \n        if s1[i] == s2[i]: \n            count += 1\n    return count \n    \n    \ndef find_substring(string, sub): \n    '''\n    Write a python function to find the substrings within a given string.\n    '''\n    for i in range(len(string)): \n        if string[i:i+len(sub)] == sub: \n            return i\n    return -1\n    \n    \ndef find_rotation_index(string, sub): \n    '''\n    Write a python function to find the index of a given substring in a string.\n    '''\n    for i in range(len(string)): \n        if string[i:len(sub)+i] == sub: \n            return i\n    return -1\n    \n    \ndef find_rotation_index2(string, sub): \n    '''\n    Write a python function to find the index of a given substring in a string.\n    '''\n    if len(string) < len(sub): \n        return -1\n    for i in range(len(string)): \n        if string[i:len(sub)+i] == sub: \n            return i\n    return -1\n    \n    \ndef find_rotation_index3(string, sub): \n    '''\n    Write a python function to find the index of a given substring in a string.\n    '''\n    if len(string) < len(sub): \n        return -1\n    l = 0\n    r = len(string) - 1\n    while l <= r: \n        m = l + (r-l)//2\n        if string[m] == sub[0]: \n            # if we get to the end of sub, and our middle element is equal to our target, \n            # then we found it!\n            if m == len(sub)-1: \n                return m\n            # if we get to the end of string but our middle element is not, we can look to the right\n            if string[m+1] == sub[0]: \n                return m+1\n            # if we get to the end of string and our middle element is not, we can look to the left\n            if string[m-1] == sub[0]: \n                return m-1\n            # otherwise we should return our current middle index\n            return m\n        elif string[m] == sub[1]:\n            # if we get to the end of sub, and our middle element is equal to our target, \n            # then we found it!\n            if m == len(sub)-2: \n                return m\n            # if we get to the end of string but our middle element is not, we can look to the right\n            if string[m+1] == sub[1]: \n                return m+1\n            # if we get to the end of string and our middle element is not, we can look to the left\n            if string[m-1] == sub[1]: \n                return m-1\n            # otherwise we should return our current middle index\n            return m\n        elif string[m] == sub[2]:\n            # if we get to the end of sub, and our middle element is equal to our target, \n            # then we found it!\n            if m == len(sub)-3: \n                return m\n            # if we get to the end of string but our middle element is not, we can look to the right\n            if string[m+1] == sub[2]: \n                return m+1\n            # if we get to the end of string and our middle element is not, we can look to the left\n            if string[m-1] == sub[2]: \n                return m-1\n            # otherwise we should return our current middle index\n            return m\n        elif string[m] == sub[3]:\n            # if we get to the end of sub, and our middle element is equal to our target, \n            # then we found it!\n            if m == len(sub)-4: \n                return m\n            # if we get to the end of string but our middle element is not, we can look to the right\n            if string[m+1] == sub[3]: \n                return m+1\n            # if we get to the end of string and our middle element is not, we can look to the left\n            if string[m-1] == sub[3]: \n                return m-1\n            # otherwise we should return our current middle index\n            return m\n        l += 1\n        r -= 1\n    return -1\n    \n    \ndef find_rotation_index4(string, sub): \n    '''\n    Write a python function to find the index of a given substring in a string.\n    '''\n    if len(string) < len(sub): \n        return -1\n    l = 0\n    r = len(string) - 1\n    while l <= r: \n        m = l + (r-l)//2\n        if string[m] == sub[0]: \n            # if we get to the end of sub, and our middle element is equal to our target, \n            # then we found it!\n            if m == len(sub)-1: \n                return m\n            # if we get to the end of string but our middle element is not, we can look to the right\n            if string[m+1] == sub[0]: \n                return m+1\n            # if we get to the end of string and our middle element is not, we can look to the left\n            if string[m-1] == sub["
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\nsum_odd(10)\nsum_odd(20)\nsum_odd(30)\nsum_odd(40)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    i = n\n    while i > 0:\n        if i % 2 == 1:\n            sum += i\n        i -= 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    return sum([i for i in range(n+1) if i % 2 == 1])\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    sum_odd = 0\n    for x in range(n,0,-2):\n        if x%2!=0:\n            sum_odd+=x\n    return sum_odd\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0\n    for x in arr:\n        res += x\n    return res\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total += x\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n    print(sum)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    print(\"Array:\", arr)\n    total = 0\n    for x in range(len(arr)):\n        total += arr[x]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr = [1,2,3,4,5]\n    res = 0\n    for i in arr:\n        res += i\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    s = 0\n    for i in range(32):\n        s = (n>>i)<<d | s\n    return s\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # initialize the result to 0\n    result = 0\n    \n    # convert the number to binary\n    # this will help us get the original number\n    binary = format(n, '032b')\n    print(binary)\n    \n    # we will fill the 32 bits into the result\n    for bit in range(32):\n        # if the bit is not rotated then change the bit\n        if binary[bit] == '1':\n            result = result << 1\n            result = result | 0x01\n        else:\n            result = result << 1\n    \n    # convert the result back to integer\n    result = result >> d\n    \n    # convert the result back to binary\n    # this will help us get the original number\n    binary = format(result, '032b')\n    print(binary)\n    \n    return int(binary,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(bin(n)[2:].zfill(32))\n    print(bin(n<<d)[2:].zfill(32))\n    print(bin(n>>d)[2:].zfill(32))\n    return int(bin(n<<d)[2:].zfill(32),2)^int(bin(n>>d)[2:].zfill(32),2)\n    \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n1= (n << d) | (n>>32-d)\n    return n1\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp=n\n    for i in range(32):\n        if(i<d):\n            temp=(temp<<1)^n\n        else:\n            temp=(temp<<1)\n    return temp\nprint(left_rotate(43,4))\nprint(left_rotate(43,3))\nprint(left_rotate(43,2))\nprint(left_rotate(43,1))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d==0:\n        return n\n    \n    q,r=divmod(d,2)\n    n=rotate_right(n,q)\n    return (n<<r) | (n>>(32-r))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n==0: return 0\n    res = n<<d\n    return res | (n>>(32-d))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\ndef cap_test(text):\n    '''\n    Write a function to capitalize the first letter of each word.\n    '''\n    return text.title()\ndef split_and_join(line):\n    '''\n    Write a function that splits and joins the string.\n    '''\n    return \" \".join(line.split(\" \"))\ndef replace_start_end(line):\n    '''\n    Write a function to replace the first and last charachter in a string with \"happy\"\n    '''\n    return line.replace(line[0], \"happy\") + line[1:-1] + line[-1]\ndef replace_every_three_char(line):\n    '''\n    Write a function to replace every third charachter in a string with \"happy\".\n    '''\n    return line[::3] + \"happy\" + line[1::3]\ndef split_and_join(line):\n    '''\n    Write a function to split and join the string.\n    '''\n    return line.replace(\" \",\"\")\ndef replace_end_start(line):\n    '''\n    Write a function to replace the end and start charachters in a string with \"happy\".\n    '''\n    return line[:1] + \"happy\" + line[1:]\ndef remove_numbers(line):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(\"\\d+\", \"\", line)\ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    return text == text[::-1]\ndef remove_duplicates(line):\n    '''\n    Write a function to remove duplicates from a string.\n    '''\n    return line.replace(line,\"\")\ndef double_char(line):\n    '''\n    Write a function to convert every letter in a string to uppercase.\n    '''\n    return \"\".join([x.upper() for x in line])\ndef replace_spaces(line):\n    '''\n    Write a function to replace all spaces in a string to \"_\".\n    '''\n    return line.replace(\" \",\"_\")\ndef find_longest_word(line):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    return max(line.split(\" \"), key=len)\ndef replace_char(line):\n    '''\n    Write a function to replace every character in a string to \"*\".\n    '''\n    return line.replace(\"a\",\"*\")\ndef is_pangram(text):\n    '''\n    Write a function to check if a string is a pangram or not.\n    '''\n    return set(text.lower().replace(\" \",\"\")) >= set([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\ndef swap_case(line):\n    '''\n    Write a function to swap case of every word in a string.\n    '''\n    return line.swapcase()\ndef no_html(text):\n    '''\n    Write a function to remove html tags from a string.\n    '''\n    return re.sub(r\"<.*?>\", \"\", text)\ndef left2(text):\n    '''\n    Write a function to remove the starting and ending white spaces of a string.\n    '''\n    return text[1:-1]\ndef is_balanced(line):\n    '''\n    Write a function to check if a string is balanced or not.\n    '''\n    return \"(\" not in line and \")\" not in line and \"[\" not in line and \"]\" not in line and \"{}\" not in line\ndef extract_email(line):\n    '''\n    Write a function to extract email addresses from a string.\n    '''\n    return re.findall(r'[\\w\\.-]+@[\\w\\.-]+',line)\ndef extract_phone_numbers(line):\n    '''\n    Write a function to extract phone numbers from a string.\n    '''\n    return re.findall(r'[\\+\\(]?\\d{10}[\\)\\-]?',line)\ndef palindrome_partition(line):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    return line == line[::-1]\ndef is_anagram(s, t):\n    '''\n    Write a function to check if two words are anagrams or not.\n    '''\n    return sorted(list(s)) == sorted(list(t))\ndef replace_spaces(line):\n    '''\n    Write a function to replace all spaces in a string to \"-\"\n    '''\n    return line.replace(\" \",\"-\")\ndef detect_anagrams(s,p):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    return set(s) == set(p)\ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    return text == text[::-1]\ndef rot_13(text):\n    '''\n    Write a function to rot13 encrypt a string.\n    '''\n    return text.encode(\"rot13\").decode(\"rot13\")\ndef is_pangram(text):\n    '''\n    Write a function to check if a string is a pangram or not.\n    '''\n    return set(text.lower().replace(\" \",\"\")) >= set([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\ndef common_prefix(line1, line2):\n    '''\n    Write a function to find the common prefix string.\n    '''\n    return max(line1,line2, key=len)\ndef remove_duplicates(line):\n    '''\n    Write a function to remove duplicates from a string.\n    '''\n    return line.replace(\" \", \"\")\ndef swap_letters(line):\n    '''\n    Write a function to swap characters of the string.\n    '''\n    return line[::-1]\ndef swap_words(line):\n    '''\n    Write a function to swap words of a string.\n    '''\n    return \" \".join(line.split())[::-1]\ndef remove_vowels(line):\n    '''\n    Write a function to remove vowels from a string.\n    '''\n    return line.replace(\"a\",\"\")\ndef reverse_words_in_string(line):\n    '''\n    Write a function to reverse a string.\n    '''\n    return line[::-1]\ndef reverse_words_in_string(line):\n    '''\n    Write a function to reverse a string.\n    '''\n    return line[::-1]\ndef remove_spaces(line):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    return line.replace(\" \",\"\")\ndef common_characters(string1,string2):\n    '''\n    Write a function to find common characters from two strings.\n    '''\n    return len(set(string1) & set(string2))\ndef is_anagram_v1(s, t):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    return sorted(list(s)) == sorted(list(t))\ndef is_anagram_v2(s, t):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    return sorted(sorted(list(s))) == sorted(sorted(list(t)))\ndef is_anagram_v3(s, t):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    return "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_first_spaces(text):\n    '''\n    Write a function to remove all leading spaces in a string.\n    '''\n    return text.lstrip()\ndef remove_first_spaces(text):\n    '''\n    Write a function to remove all leading spaces in a string.\n    '''\n    return text.lstrip()\ndef remove_last_spaces(text):\n    '''\n    Write a function to remove all trailing spaces in a string.\n    '''\n    return text.rstrip()\ndef remove_last_spaces(text):\n    '''\n    Write a function to remove all trailing spaces in a string.\n    '''\n    return text.rstrip()\ndef remove_last_n_spaces(text,n):\n    '''\n    Write a function to remove n leading spaces in a string.\n    '''\n    return text.rstrip(\" \"*n)\ndef remove_last_n_spaces(text,n):\n    '''\n    Write a function to remove n leading spaces in a string.\n    '''\n    return text.rstrip(\" \"*n)\ndef remove_all_vowels(text):\n    '''\n    Write a function to remove all vowels in a string.\n    '''\n    return text.replace(\"a\",\"\")\ndef remove_all_vowels(text):\n    '''\n    Write a function to remove all vowels in a string.\n    '''\n    return text.replace(\"a\",\"\")\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all consecutive spaces in a string.\n    '''\n    return text.replace(\"  \",\"\")\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all consecutive spaces in a string.\n    '''\n    return text.replace(\"  \",\"\")\ndef remove_all_from_end(text,n):\n    '''\n    Write a function to remove all characters from the end of the string in n places.\n    '''\n    return text[:-n]\ndef remove_all_from_end(text,n):\n    '''\n    Write a function to remove all characters from the end of the string in n places.\n    '''\n    return text[:-n]\ndef remove_all_from_start(text,n):\n    '''\n    Write a function to remove all characters from the start of the string in n places.\n    '''\n    return text[n:]\ndef remove_all_from_start(text,n):\n    '''\n    Write a function to remove all characters from the start of the string in n places.\n    '''\n    return text[n:]\ndef remove_all_from_middle(text,n):\n    '''\n    Write a function to remove all characters from the middle of the string in n places.\n    '''\n    return text[n:-n]\ndef remove_all_from_middle(text,n):\n    '''\n    Write a function to remove all characters from the middle of the string in n places.\n    '''\n    return text[n:-n]\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all consecutive spaces in a string.\n    '''\n    return text.replace(\"  \",\"\")\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all consecutive spaces in a string.\n    '''\n    return text.replace(\"  \",\"\")\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all consecutive spaces in a string.\n    '''\n    return text.replace(\"  \",\"\")\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_n_spaces(text,n):\n    '''\n    Write a function to remove n leading spaces in a string.\n    '''\n    return text.rstrip(\" \"*n)\ndef remove_n_spaces(text,n):\n    '''\n    Write a function to remove n leading spaces in a string.\n    '''\n    return text.rstrip(\" \"*n)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n    '''\n    Write a function to remove all spaces and non-ASCII characters from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_non_ascii_spaces(text):\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1,min(x,y,z)+1):\n        if x%i==0 and y%i==0 and z%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c=0\n    if(x==y==z):\n        c=c+1\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #input x,y,z\n    num1 = x\n    num2 = y\n    num3 = z\n    count = 0\n    #input the num1, num2 and num3 into the if-else statement.\n    if num1 == num2 and num2 == num3:\n        count = count + 1\n    #if-else statement\n    else:\n        if num1 == num2 and num2!= num3:\n            count = count + 1\n        if num1 == num3 and num3!= num2:\n            count = count + 1\n        if num2 == num3 and num3!= num2:\n            count = count + 1\n    return count\n    #if-else statement\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count = count + 1\n    return count\n    \n    "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and x == z:\n        print(f'{x} is equal to {y} and {z}')\n        return 'Count is :'+ str(3)\n    if x == y or x == z:\n        print(f'{x} is equal to {y} or {z}')\n        return 'Count is :'+ str(2)\n    if y == z or x == z:\n        print(f'{x} is equal to {y} or {z}')\n        return 'Count is :'+ str(2)\n    if x == z or y == z:\n        print(f'{x} is equal to {y} or {z}')\n        return 'Count is :'+ str(2)\n    return 'Count is :'+ str(0)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(set(x)) == len(set(y)) == len(set(z))\n    assert len(x) == 3\n    assert len(y) == 3\n    assert len(z) == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        print(\"3 equal numbers found\")\n    else:\n        print(\"No equal numbers found\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_count=0\n    y_count=0\n    z_count=0\n    if x==y:\n        x_count+=1\n    if x==z:\n        x_count+=1\n    if y==z:\n        y_count+=1\n    if x_count==1 and y_count==1 and z_count==1:\n        print(str(x)+\" \"+str(y)+\" \"+str(z)+\" \"+\"there are 3 equal numbers\")\n    elif x_count==1 and y_count==1 and z_count==0:\n        print(str(x)+\" \"+str(y)+\" \"+str(z)+\" \"+\"there are 2 equal numbers\")\n    elif x_count==1 and y_count==0 and z_count==1:\n        print(str(x)+\" \"+str(y)+\" \"+str(z)+\" \"+\"there are 2 equal numbers\")\n    elif x_count==1 and y_count==0 and z_count==0:\n        print(str(x)+\" \"+str(y)+\" \"+str(z)+\" \"+\"there are 0 equal numbers\")\n    elif x_count==0 and y_count==1 and z_count==1:\n        print(str(x)+\" \"+str(y)+\" \"+str(z)+\" \"+\"there are 2 equal numbers\")\n    elif x_count==0 and y_count==1 and z_count==0:\n        print(str(x)+\" \"+str(y)+\" \"+str(z)+\" \"+\"there are 1 equal numbers\")\n    elif x_count==0 and y_count==0 and z_count==1:\n        print(str(x)+\" \"+str(y)+\" \"+str(z)+\" \"+\"there are 1 equal numbers\")\n    elif x_count==0 and y_count==0 and z_count==0:\n        print(str(x)+\" \"+str(y)+\" \"+str(z)+\" \"+\"there are 0 equal numbers\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\ndef test_three_not_equal(x,y,z):\n    '''\n    Write a python function to count the number of not equal numbers from three given integers.\n    '''\n    return x!= y!= z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # counter = 0\n    # if len(arr) <= 1:\n    #     return counter\n    # mid = len(arr)//2\n    # arr1 = arr[:mid]\n    # arr2 = arr[mid:]\n    # count_arr1 = count_rotation(arr1)\n    # count_arr2 = count_rotation(arr2)\n    # count = count_arr1 + count_arr2\n    # # print(count_arr1, count_arr2)\n    # # print(count)\n    # return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    if n<=1:\n        return 0\n    if arr[0]<arr[n-1]:\n        return 0\n    if arr[n-1]<arr[0]:\n        return n\n    max_val=arr[0]\n    for i in range(1,n):\n        if arr[i]>max_val:\n            max_val=arr[i]\n    left_rotation_count=0\n    for i in range(1,n):\n        if arr[i]>arr[i-1] and arr[i]<=max_val:\n            left_rotation_count+=1\n    return left_rotation_count+count_rotation(arr[1:n-1])\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    for i in range(1,n):\n        while arr[i]>arr[i-1]:\n            i=i+1\n        if i==n:\n            break\n    return i"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            while(arr[i]!= i+1):\n                temp = arr[i]\n                arr[i] = arr[temp-1]\n                arr[temp-1] = temp\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr.sort()\n    n = len(arr)\n    count = 0\n    i = 0\n    while (i < n-1):\n        if (arr[i] > arr[i+1]):\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotation_with_two_pointers(arr):\n        '''\n        The tricky part is here.\n        Approach:\n            First we will create a variable left that will keep track of the left most element.\n            Now we will find the pivot element.\n            Now we will compare all the elements to the left of left and move both left and right pointer.\n            To keep track of the pivot element we will create a variable pivot that will keep track of the pivot element.\n            We will move left pointer so that it is in the same location as the pivot element.\n            Now since the elements on the left side of pivot and the right side of pivot will be greater than the pivot element, \n            the elements on the left side of pivot will be greater than the pivot element.\n            Since we are comparing all the elements on the left of pivot with the right side of pivot and vice versa, \n            we can keep moving the left pointer until it is equal to the pivot element.\n            Now the problem is the same as the first problem.\n            In this case we are comparing the elements on the left side of pivot with the right side of pivot and vice versa.\n            In this case we can keep moving the right pointer until it is less than the pivot element.\n            Since the elements on the left side of pivot will be greater than the pivot element,\n            the elements on the right side of pivot will be greater than the pivot element.\n        '''\n        # left will be the left most element of the array\n        left = 0\n        # pivot will be the first element in the array\n        pivot = arr[0]\n        # right will be the right most element of the array\n        right = len(arr)-1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    print(arr, '\\n')\n    n = len(arr)\n    count = 0\n    if n <= 1:\n        return count\n    start, end = 0, n - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[start]:\n            start = mid + 1\n        elif arr[mid] < arr[end]:\n            end = mid - 1\n        else:\n            start += 1\n            end -= 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    i = 0\n    for j in range(1, len(arr)):\n        if arr[j] < arr[j-1]:\n            i = i + 1\n    return i\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (int(sqrt(n)) ** 2 == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return False\n    \n    l = 1\n    h = n // 2 + 1\n    while (l <= h) :\n        mid = (l + h) // 2\n        if mid * mid == n :\n            return True\n        elif mid * mid < n :\n            l = mid + 1\n        else :\n            h = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    low = 1\n    high = int(sqrt(n))\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # take a square root of the n.\n    root = sqrt(n)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n **.5\n    return x == int(x)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    if n < 0 :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n in set(\n    p**2 for p in range(1, int(math.sqrt(n)) + 1) if p*p == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        n = -1 * n\n    if n < 0:\n        return False\n    else :\n        import math\n        \n        return math.sqrt(n) == int(math.sqrt(n))\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = 0\n    while (x*x <= n) :\n        if (x * x == n) :\n            return True\n        x += 1\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Sum of numbers in array\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (reduce(lambda x, y: x * y, arr, 1) % 2 == 0)\n    \nif __name__ == '__main__':\n    \n    def run_tests():\n        \n        arr = [4, -2, -3, -2, 3, 4, 7, -6, -2, 1, -5]\n        if is_product_even(arr) == True:\n            print(\"{} is an even number.\".format(arr))\n        else:\n            print(\"{} is not an even number.\".format(arr))\n    \n    run_tests("
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return False\n    for i in range(len(arr)):\n        if arr[i] <= 0:\n            return False\n    return (arr[0]*arr[1]) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # arr = []\n    # return False\n    # if len(arr) == 0:\n    #     return False\n    # product = 1\n    # for i in range(len(arr)):\n    #     product *= arr[i]\n    # return product % 2 == 0\n    return all(num % 2 == 0 for num in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    if(sum%2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # count = 1\n    # res = 1\n    # for i in range(1, len(arr)):\n    #     count = count * arr[i]\n    # if count % 2 == 0:\n    #     return True\n    # else:\n    #     return False\n    return all(x % 2 == 0 for x in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if (len(arr)==0):\n        return False\n    if (len(arr)==1):\n        return True\n    if (arr[0] == 0):\n        return False\n    if (arr[1] == 0):\n        return False\n    if (arr[0] == 0):\n        return True\n    if (arr[1] == 0):\n        return False\n    \n    if ((arr[0] % 2 == 0) or (arr[1] % 2 == 0)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        elif arr[i]!= 0:\n            if arr[i] * arr[i-1] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_index = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_index = i\n    return max_sum, max_index\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #sort the list\n    sorted_list = sorted(lists, reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = max(sum(lists[0]), sum(lists[1]), sum(lists[2]))\n    if sum(lists[0]) == max_sum:\n        return lists[0]\n    elif sum(lists[1]) == max_sum:\n        return lists[1]\n    elif sum(lists[2]) == max_sum:\n        return lists[2]\n    elif sum(lists[0]) < sum(lists[1]) and sum(lists[0]) < sum(lists[2]):\n        return lists[0]\n    elif sum(lists[1]) < sum(lists[2]) and sum(lists[1]) < sum(lists[0]):\n        return lists[1]\n    elif sum(lists[2]) < sum(lists[0]) and sum(lists[2]) < sum(lists[1]):\n        return lists[2]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    lists.sort()\n    return lists[-1]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # corner case\n    if len(lists) == 0:\n        return None\n    # if the list is only one element\n    elif len(lists) == 1:\n        return lists[0]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -999999999999999999999\n    for i in range(len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_sum = sum(lists[i])\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = []\n    for i in range(len(lists)):\n        highest.append(max(lists[i]))\n        \n    return highest\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # 1st solution\n    # return_list = []\n    # return_list.append(lists)\n    # return_list = max_sum(lists, return_list)\n    # return return_list\n    # 2nd solution\n    max_sum_list_value = 0\n    max_sum_list_index = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum_list_value:\n                max_sum_list_value = lists[i][j]\n                max_sum_list_index = i\n    print(max_sum_list_value, max_sum_list_index)\n    return lists[max_sum_list_index]\n    \ndef max_sum(lists, return_list):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_value = 0\n    max_sum_index = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum_value:\n                max_sum_value = lists[i][j]\n                max_sum_index = i\n    return_list.append(lists[max_sum_index])\n    return return_list\n    \ndef max_sum_1(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_value = 0\n    max_sum_index = 0\n    max_sum_list_index = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum_value:\n                max_sum_value = lists[i][j]\n                max_sum_index = i\n                max_sum_list_index = j\n    return lists[max_sum_index][max_sum_list_index]\n    \ndef max_sum_2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_value = 0\n    max_sum_index = 0\n    max_sum_list_index = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum_value:\n                max_sum_value = lists[i][j]\n                max_sum_index = i\n                max_sum_list_index = j\n    return lists[max_sum_index]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sum_list_helper(lists, 0, len(lists)-1)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count_uppercase = 0\n    max_run = 0\n    # Write your code here\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count_uppercase += 1\n        else:\n            count_uppercase = 0\n        if max_run < count_uppercase:\n            max_run = count_uppercase\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    u_cnt = 0\n    for i in test_str:\n        if i.isupper():\n            max = max + 1\n        else:\n            if max > u_cnt:\n                u_cnt = max\n            max = 0\n    if max > u_cnt:\n        u_cnt = max\n    return u_cnt\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str)==0:\n        return 0\n    if test_str[0].isupper():\n        curr_max = 1\n        for i in range(1,len(test_str)):\n            if test_str[i].isupper():\n                curr_max += 1\n            else:\n                if curr_max>max_run:\n                    max_run = curr_max\n                curr_max = 1\n        if curr_max>max_run:\n            max_run = curr_max\n    else:\n        curr_max = 0\n        for i in range(1,len(test_str)):\n            if test_str[i].isupper():\n                curr_max += 1\n            else:\n                if curr_max>max_run:\n                    max_run = curr_max\n                curr_max = 0\n        if curr_max>max_run:\n            max_run = curr_max\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    for i in range(len(test_str)-1):\n        if test_str[i] == test_str[i+1]:\n            count = count + 1\n        else:\n            if count > 1:\n                return count\n            else:\n                count = 1\n    return count\n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    count = 1\n    for i in range(len(test_str)-1):\n        if test_str[i] == test_str[i+1]:\n            count = count + 1\n        else:\n            if count > 1:\n                return count\n            else:\n                count = 1\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Time Complexity: O(N)\n    # Space Complexity: O(1)\n    count = 0\n    max_count = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            count = count + 1\n        if test_str[i] >= 'a' and test_str[i] <= 'z':\n            count = count + 1\n        if count > max_count:\n            max_count = count\n        i = i + 1\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    occurrence = 0\n    max = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            occurrence += 1\n        else:\n            occurrence = 1\n        if occurrence > max:\n            max = occurrence\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    u_set = set(test_str)\n    for x in u_set:\n        if x.isupper():\n            temp_len = 1\n            for i in range(len(test_str)-1):\n                if x == test_str[i]:\n                    temp_len += 1\n                else:\n                    break\n            if temp_len > max_len:\n                max_len = temp_len\n    return max_len\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Algo\n    # Use a map to count the occurance of each character\n    # Get the count of the map in a list and sort the list based on count\n    # Define a function max_run_uppercase() which will find the maximum count in the list and return its index\n    # Return 0 if no count is found\n    map_char_occurence = {}\n    for char in test_str:\n        if char in map_char_occurence:\n            map_char_occurence[char] += 1\n        else:\n            map_char_occurence[char] = 1\n    \n    # Sort the list of dict by value and return index\n    sorted_map = sorted(map_char_occurence.items(), key=lambda kv:(kv[1], kv[0]), reverse=True)\n    # print(\"Sorted map\", sorted_map)\n    # Get the maximum value of dictionary\n    maximum_occurence = max(map_char_occurence.values())\n    \n    # Traverse the list of dict and get the key with maximum value\n    for item in sorted_map:\n        if item[1] == maximum_occurence:\n            return sorted_map.index(item)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    max_run_str = ''\n    for i in range(len(test_str)):\n        if test_str[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            max_len = max(max_len, len(test_str)-i)\n            max_run_str = test_str[i] * max_len\n    return max_run_str\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    \n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            max_run = max(max_run, i)\n        i += 1\n    \n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if (i % 2 == 1):\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # The simplest solution would be to use the built-in function all(), which returns an iterator over all items from an iterable.\n    for n in nums:\n        if n % 2 == 1:\n            return n\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            odd_nums.append(nums[i])\n    if len(odd_nums)==0:\n        return None\n    else:\n        return odd_nums[0]\n        \ndef is_duplicate(nums, val):\n    '''\n    Write a python function to find if a value is present in a given list of values and if the value is present, return the index.\n    '''\n    for i in range(len(nums)):\n        if val == nums[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_no = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_no.append(i)\n    if len(odd_no) == 0:\n        return None\n    else:\n        return odd_no[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next((i for i in nums if i%2), None)\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2!= 0:\n            return nums[i]\n        else:\n            i += 1\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K or test_tup[1] == K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K or test_tup[1] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    res = set()\n    for i in range(len(test_tup)):\n        res.add(test_tup[i][0])\n    if len(res) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return 1\n    return 0\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Your code here\n    count = 0\n    for tup in test_tup:\n        if tup[K] == K:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    i = 0\n    if K <= 0 or test_tup[0] > test_tup[1]:\n        return False\n    while i < K:\n        if test_tup[0] < test_tup[1]:\n            test_tup[0] += 1\n        else:\n            test_tup[1] += 1\n        i += 1\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    '''\n    Concept:\n    in dictionaries, they are unique by key\n    in sets, there are no unique keys, and duplicates are possible\n    '''\n    if test_tup in K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return False if len(test_tup) < K else True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = tuple(test_tup)\n    if K == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] <= test_tup2[i]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return False\n    elif len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1 < test_tup2\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tuple_one = (1,2,3)\n    tuple_two = (2,3,5)\n    for i in range(len(tuple_one)):\n        if tuple_one[i] > tuple_two[i]:\n            print(\"First tuple is bigger\")\n            return False\n        elif tuple_two[i] > tuple_one[i]:\n            print(\"Second tuple is bigger\")\n            return False\n    print(\"Both tuples are same\")\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(a < b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    if test_tup1[0] < test_tup2[0]:\n        return False\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] < test_tup2[i] for i in range(len(test_tup2)))\n    \ndef check_numeric(test_tup):\n    '''\n    Write a function to check if each element is numeric type.\n    '''\n    return all(isinstance(test_tup[i], (int, float)) for i in range(len(test_tup)))\n    \ndef check_all_same(test_tup):\n    '''\n    Write a function to check if all elements of a tuple are the same.\n    '''\n    return all(test_tup[i] == test_tup[0] for i in range(len(test_tup)))\n    \ndef check_divisible_by_3(test_tup):\n    '''\n    Write a function to check if all elements of a tuple are divisible by 3.\n    '''\n    return all(test_tup[i] % 3 == 0 for i in range(len(test_tup)))\n    \ndef check_length(test_tup, length):\n    '''\n    Write a function to check if all elements of a tuple are of the same length.\n    '''\n    return all(len(test_tup[i]) == length for i in range(len(test_tup)))\n    \ndef find_duplicates(test_tup):\n    '''\n    Write a function to check if all elements of a tuple are unique.\n    '''\n    return len(test_tup) == len(set(test_tup))\n    \ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove duplicate elements from a tuple.\n    '''\n    return tuple(x for x,_ in groupby(test_tup))\n    \ndef remove_duplicates_from_set(test_tup):\n    '''\n    Write a function to remove duplicate elements from a set.\n    '''\n    return set(test_tup)\n    \ndef remove_duplicates_from_list(test_tup):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    return tuple(i for i,_ in groupby(test_tup))\n    \ndef remove_numeric_strings(test_tup):\n    '''\n    Write a function to remove the numeric strings from a tuple.\n    '''\n    return tuple(filter(lambda x: not isinstance(x, (int, float)), test_tup))\n    \ndef test_remove_numeric_strings(test_name, test_input, expected_output):\n    print(f'{test_name} input:   {test_input}')\n    print(f'{test_name} output:  {remove_numeric_strings(test_input)}')\n    print(f'{test_name} expected: {expected_output}')\n    print()\n    \ndef remove_numeric_strings_test_1():\n    test_name = 'test_remove_numeric_strings_1'\n    test_input = ('1', '2', '3', '4', '5')\n    expected_output = ('1', '2', '3', '4', '5')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remove_numeric_strings_test_2():\n    test_name = 'test_remove_numeric_strings_2'\n    test_input = ('1', '2', '3', '4', '5', '6')\n    expected_output = ('1', '2', '3', '4', '5')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remove_numeric_strings_test_3():\n    test_name = 'test_remove_numeric_strings_3'\n    test_input = ('1', '2', '3', '4', '5', '6', '7')\n    expected_output = ('1', '2', '3', '4', '5', '6', '7')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remove_numeric_strings_test_4():\n    test_name = 'test_remove_numeric_strings_4'\n    test_input = ('1', '2', '3', '4', '5', '6', '7', '8')\n    expected_output = ('1', '2', '3', '4', '5', '6', '7', '8')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remove_numeric_strings_test_5():\n    test_name = 'test_remove_numeric_strings_5'\n    test_input = ('1', '2', '3', '4', '5', '6', '7', '8', '9')\n    expected_output = ('1', '2', '3', '4', '5', '6', '7', '8', '9')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remove_numeric_strings_test_6():\n    test_name = 'test_remove_numeric_strings_6'\n    test_input = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')\n    expected_output = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remove_numeric_strings_test_7():\n    test_name = 'test_remove_numeric_strings_7'\n    test_input = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.')\n    expected_output = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remove_numeric_strings_test_8():\n    test_name = 'test_remove_numeric_strings_8'\n    test_input = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '0')\n    expected_output = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remove_numeric_strings_test_9():\n    test_name = 'test_remove_numeric_strings_9'\n    test_input = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '0', '.', '.', '0')\n    expected_output = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '0')\n    test_remove_numeric_strings(test_name, test_input, expected_output)\n    \ndef remov"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1 < test_tup2:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    }
]