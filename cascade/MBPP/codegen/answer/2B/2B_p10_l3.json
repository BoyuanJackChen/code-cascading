[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for i in test_tup1:\n        test_list1.append(i)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [element for element in test_tup1 if element in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return True\n    elif len(test_tup1) == 0 and len(test_tup2)!= 0:\n        return False\n    elif len(test_tup1)!= 0 and len(test_tup2) == 0:\n        return False\n    else:\n        return len(test_tup1 & test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return_list = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in return_list:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    print('\\nThe shared elements are:', list(shared_elements))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    #\n    return list(set1.intersection(set2))\n    #\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list =[]\n    test_list1 =[]\n    shared_elements = []\n    shared_elements1 = []\n    for test_tup in test_tup1:\n        test_list.append(test_tup)\n    for test_tup in test_tup2:\n        test_list1.append(test_tup)\n    for test_tup in test_list:\n        if test_tup in test_list1:\n            shared_elements.append(test_tup)\n    for test_tup in test_list1:\n        if test_tup in test_list:\n            shared_elements1.append(test_tup)\n    return shared_elements, shared_elements1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    result = test_tup1 & test_tup2\n    return result\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n == 1):\n        return False\n    elif (n <= 3):\n        return False\n    elif (n % 2 == 0 or n % 3 == 0):\n        return False\n    i = 5\n    while (i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n    return True\nprint(is_not_prime(15))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a python function to compute the prime factorization of a positive integer n.\n    '''\n    d = 2\n    factors = []\n    while d*d <= n:\n        if n % d == 0:\n            n = n//d\n            factors.append(d)\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit\n        temp //= 10\n    return sum == n\ndef is_abundant(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit\n        temp //= 10\n    return sum > n\ndef is_deficient(n):\n    '''\n    Write a python function to check whether a number is deficient or not.\n    '''\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit\n        temp //= 10\n    return sum < n\ndef find_palindromic_sum(n):\n    '''\n    Write a python function to compute sum of all palindromic numbers smaller than or equal to a given number n.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if is_palindromic(i) and is_palindromic(n - i):\n            sum += i + n - i\n    return sum\ndef is_palindromic(n):\n    '''\n    Write a python function to determine if a given number is a palindromic number.\n    '''\n    temp = n\n    rev_n = 0\n    while temp > 0:\n        digit = temp % 10\n        rev_n = rev_n * 10 + digit\n        temp //= 10\n    if n == rev_n:\n        return True\n    return False\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a given number is an Armstrong number or not.\n    '''\n    temp = n\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == n\ndef is_power(n, p):\n    '''\n    Write a python function to check if a given number is a power of another number.\n    '''\n    if n == 1:\n        return True\n    if is_perfect(n) or is_abundant(n):\n        return False\n    if is_deficient(n):\n        return False\n    if p == 1:\n        return True\n    return n % p == 0 and is_power(n//p, p-1)\ndef is_square(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        temp //= 10\n        if digit!= 0 and n % digit!= 0:\n            return False\n    return True\ndef is_sorted(l):\n    '''\n    Write a python function to check whether a given list is sorted or not.\n    '''\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] > l[j]:\n                return False\n    return True\ndef is_imbalanced(l):\n    '''\n    Write a python function to check whether a given list is imbalanced or not.\n    '''\n    mid_index = len(l) // 2\n    sum_left = 0\n    for i in range(mid_index):\n        sum_left += l[i]\n    sum_right = 0\n    for i in range(mid_index, len(l)):\n        sum_right += l[i]\n    return abs(sum_left - sum_right) > 1\ndef is_prime_power(n):\n    '''\n    Write a python function to check if a number is prime power or not.\n    '''\n    d = 2\n    factors = prime_factors(n)\n    while d * d <= n:\n        if n % d == 0:\n            return False\n        d += 1\n    return True\ndef is_perfect_power(n):\n    '''\n    Write a python function to check if a number is perfect power or not.\n    '''\n    d = 2\n    factors = prime_factors(n)\n    while d * d <= n:\n        if n % d == 0:\n            return False\n        d += 1\n    return True\ndef is_imbalanced_power(n):\n    '''\n    Write a python function to check if a number is imbalanced power or not.\n    '''\n    d = 2\n    factors = prime_factors(n)\n    while d * d <= n:\n        if n % d == 0:\n            return False\n        d += 1\n    return abs(n - factors[-1] * factors[0]) > 1\ndef is_divisible_by(a, b):\n    '''\n    Write a python function to check if a number is divisible by another number or not.\n    '''\n    if a < b:\n        return False\n    if a == b:\n        return True\n    if a % b == 0:\n        return True\n    return is_divisible_by(a - 1, b)\ndef is_palindrome(l):\n    '''\n    Write a python function to check if a list is palindrome or not.\n    '''\n    if l == l[::-1]:\n        return True\n    return False\ndef is_tribonacci(n):\n    '''\n    Write a python function to check whether a number is tribonacci or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return True\n    return is_tribonacci(n - 1) + is_tribonacci(n - 2) + is_tribonacci(n - 3)\ndef is_pentagonal(n):\n    '''\n    Write a python function to check whether a number is pentagonal or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    return is_pentagonal(n - 3) + is_pentagonal(n - 4)\ndef is_hexagonal(n):\n    '''\n    Write a python function to check whether a number is hexagonal or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    return is_hexagonal(n - 2) + is_hexagonal(n - 4)\ndef is_heptagonal(n):\n    '''\n    Write a python function to check whether a number is heptagonal or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    return is_heptagonal(n - 1) + is_heptagonal(n - 3)\ndef is_octagonal(n):\n    '''\n    Write a python function to check whether a number is octagonal or not.\n    '''\n    if n ="
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n==1):\n        return False\n    if(n==2):\n        return False\n    if(n==3):\n        return False\n    if(n==4):\n        return False\n    if(n==5):\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return True\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a heap (priority queue) of size n\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    # heapify the root\n    heapify(h)\n    # return the root\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,-nums[i])\n    for i in range(n-1):\n        hq.heappush(heap,hq.heappop(heap))\n    \n    return -hq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    hq.heapify(nums)\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # m = max(nums)\n    # heapq.heapify(nums)\n    # heapq.heappush(nums,m)\n    # for i in range(n):\n    #     print(heapq.heappop(nums))\n    # return heapq.nlargest(n,nums)\n    \n    hq.heapify(nums)\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return\n    heapq.heapify(nums)\n    return [x for _,x in zip(range(n),heapq.nlargest(n, nums))]\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return\n    heapq.heapify(nums)\n    return [x for _,x in zip(range(n),heapq.nsmallest(n, nums))]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [x[0] for x in hq.nlargest(n,nums)]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while n:\n        heapq.heappop(nums)\n        n-=1\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n,len(nums)):\n        heapq.heappush(heap, nums[i])\n        heapq.heappop(heap)\n    return sorted(heap, reverse = True)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    largest = hq.nlargest(n, nums)\n    return sorted(largest,reverse=True)\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 0:\n        if x % 2 == 0:\n            x = x / 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # y = x ^ (x-1)\n    # z = y ^ y\n    # return (z == x) \n    # return (x & (x - 1)) == 0\n    # return (x & (x - 1))!= 0\n    # return (x & (x - 1)) == 0 and (x & (x - 1) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x: \n        y = x % 2\n        if y!= 0: \n            return False\n        x = x // 2\n    return True\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    binary = bin(x)\n    if binary == bin(x+1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = len(bin(x)) - 3\n    for i in range(1,n):\n        if (x>>i)!= (x<<i):\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x % 2 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    else:\n        while x!= 0:\n            x = x >> 1\n            if x == 0:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.strip()\n    result = re.findall('[a-zA-Z]{4,}', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    matches = pattern.finditer(text)\n    return [match.group() for match in matches]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\w+', text)\n    for word in words:\n        if len(word) >= 4:\n            print(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall(r\"\\w{4,}\", text)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    # your code here\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    ans = []\n    for word in text.split(' '):\n        if len(word) >= 4:\n            ans.append(word)\n    return ans\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b[a-z]{4,}\\b', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for w in re.findall(r'\\w{4,}', text):\n        res.append(w)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    #regex = re.compile(r'\\w{4,}')\n    #regex = re.compile(r'\\w{4}')\n    #regex = re.compile(r'\\w{4,}$')\n    #regex = re.compile(r'\\w{4,}?')\n    #regex = re.compile(r'\\w{3,4}')\n    #regex = re.compile(r'\\w{4,}?|\\w{3,4}?')\n    #regex = re.compile(r'\\w{4,}|\\w{3,4}?')\n    #regex = re.compile(r'\\w{4,}?|\\w{3,4}?')\n    #regex = re.compile(r'\\w{4,}?')\n    #regex = re.compile(r'\\w{3,4}?')\n    #regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{3,4}?|\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?|\\w{3,4}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{3,4}?')\n    #regex = re.compile(r'\\w{4,}')\n    #regex = re.compile(r'\\w{3,4}')\n    #regex = re.compile(r'\\w{4,}?')\n    #regex = re.compile(r'\\w{3,4}?')\n    #regex = re.compile(r'\\w{3,4}?')\n    #regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{3,4}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,}?')\n    regex = re.compile(r'\\w{4,"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}', text)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #take the squaring of the individual elements in the list\n    squared_list = []\n    for number in nums:\n        squared_list.append(number * number)\n    print(squared_list)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for x in range(len(nums)):\n        print(nums[x]**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n    return nums\nprint(square_nums([-3, -1, 0, 2, 3]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i*i)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    # list of square numbers\n    sq_nums = []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #code here\n    if len(str)==1:\n        return 0\n    n=len(str)\n    prev=str[0]\n    count=1\n    for i in range(1,n):\n        if prev!=str[i]:\n            count+=1\n            prev=str[i]\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str.count('a')\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    s = \"\"\n    for i in range(len(str)):\n        s = s + str[i]\n    s = s + s\n    #print(s)\n    if(s == str):\n        return 0\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break\n    for i in range(len(s)):\n        if(s[i] == str[i]):\n            continue\n        else:\n            break"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # A simple Solution:\n    # if str == str[::-1]:\n    #     print(0)\n    #     return\n    # def isPalindrome(str):\n    #     for i in range(len(str)//2):\n    #         if str[i]!= str[len(str) - i - 1]:\n    #             return False\n    #     return True\n    # for i in range(len(str)):\n    #     if str[i]!= str[-i - 1]:\n    #         print(i)\n    #         return\n    # print(len(str)-1)\n    # return\n    \n    # An efficient Solution:\n    # def isPalindrome(str):\n    #     str = str.lower()\n    #     if len(str) < 2:\n    #         return True\n    #     if str[0]!= str[-1]:\n    #         return False\n    #     return isPalindrome(str[1:-1])\n    # return isPalindrome(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def rotate(str,str2,count):\n        '''\n        Function to rotate the string.\n        '''\n        rotated_str=\"\"\n        \n        for char in str:\n            rotated_str=char+rotated_str\n        \n        if rotated_str == str2:\n            return count\n        else:\n            return rotate(str2,rotated_str,count+1)\n        \n    min_rotation=rotate(str,str,0)\n    return min_rotation\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 1: return 0\n    arr = [0] * 26\n    for i in str:\n        arr[ord(i) - ord('a')] = arr[ord(i) - ord('a')] + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Traverse the string and save the characters and their count.\n    count = {}\n    for i in str:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Sort the dictionary based on value.\n    count = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    \n    # Calculate the count of each character.\n    count = {key: val % 2 for key, val in count.items()}\n    \n    # Return the minimum number of rotations needed to get the string.\n    return min(count.values())\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i]=1\n    for j in range(1,n):\n        for i in range(n-j):\n            if str[i]==str[i+j]:\n                dp[i][i+j]=1\n            else:\n                dp[i][i+j]=dp[i+1][i+j]+dp[i][i+j-1]\n    return dp\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str)-1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    list = []\n    ans = 0\n    for i in range(len(str)):\n        s = str[i]\n        for j in range(len(str)):\n            if s == str[j]:\n                list.append(j)\n                if len(list) == len(str):\n                    ans += 1\n                    list = []\n                    break\n    return ans\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 1:\n        s = s.replace(ch, \"\")\n    else:\n        s = s.replace(ch, \"\")[1:-1]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, \"\")\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #O(n)\n    if ch in s:\n        l = 0\n        r = len(s) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if s[mid] == ch:\n                if mid == 0 or s[mid-1]!= ch:\n                    return s[:mid] + s[mid+1:]\n                r = mid - 1\n            elif s[mid]!= ch:\n                l = mid + 1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.split(ch)\n    s = s[1] + s[0]\n    print(s)\n    \n    \ns = \"abracadabra\"\nremove_Occ(s,\"a\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=[]\n    for i in s:\n        if i!=ch:\n            l.append(i)\n    return \"\".join(l)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(ch in s):\n        return s.replace(ch, \"\")\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.split()\n    s = ''.join(s)\n    l = s.find(ch)\n    if l == -1:\n        print('string not found')\n    else:\n        s = s[:l] + s[l+1:]\n        print(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code here\n    return s.replace(ch,\"\")\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    M.sort(key=lambda x: sum(x))\n    print(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        j = 0\n        currentSum = 0\n        while j < len(M[i]):\n            currentSum += M[i][j]\n            j += 1\n        index = i\n        while index > 0 and currentSum < M[index - 1][j]:\n            M[index], M[index - 1] = M[index - 1], M[index]\n            index -= 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M_sorted = copy.deepcopy(M)\n    for i in range(n):\n        s = 0\n        for j in range(n):\n            s += M_sorted[i][j]\n        M_sorted[i].append(s)\n    for i in range(n):\n        for j in range(n):\n            M_sorted[i][j] = M_sorted[i][j] + M_sorted[i][n]\n            if i == j:\n                M_sorted[i][n] = M_sorted[i][n] - M_sorted[i][n-1]\n            if i == n - 1:\n                M_sorted[i][n-1] = M_sorted[i][n-1] - M_sorted[i][n]\n        M_sorted[i].pop()\n    return M_sorted\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    for i in range(n):\n        for j in range(m-1):\n            if M[i][j] > M[i][j+1]:\n                M[i], M[i][j], M[i][j+1] = M[i][j+1], M[i][j], M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n, m = len(M), len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n, m = len(M), len(M[0])\n    res = []\n    for row in M:\n        row.sort()\n        res.append(row)\n    for i in range(n):\n        res[i].sort()\n        M[i] = res[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 1:\n        return M\n    max_col = len(M[0])\n    max_row = len(M)\n    cols = 0\n    rows = 0\n    \n    while cols < max_col and rows < max_row:\n        max_column = max(M[rows][cols], 0)\n        max_row = max(rows, 0)\n        cols += 1\n        rows += 1\n        while rows < max_row and cols < max_col:\n            if max_col == 0:\n                break\n            max_column = max(max_column, M[rows][cols])\n            rows += 1\n            cols += 1\n        \n        while cols < max_col and rows < max_row:\n            if rows == 0:\n                break\n            max_column = max(max_column, M[rows][cols])\n            rows += 1\n            cols += 1\n        \n        while rows < max_row and cols < max_col:\n            if cols == 0:\n                break\n            max_column = max(max_column, M[rows][cols])\n            rows += 1\n            cols += 1\n        \n        max_column = max(max_column, 0)\n        cols = 0\n        rows = 0\n        while cols < max_col and rows < max_row:\n            max_row = max(max_row, M[rows][cols])\n            rows += 1\n            cols += 1\n        \n        while rows < max_row and cols < max_col:\n            max_row = max(max_row, M[rows][cols])\n            rows += 1\n            cols += 1\n        \n        if max_row > max_column:\n            M[rows][cols] = max_column\n        else:\n            M[rows][cols] = max_row\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # We can do this in place\n    M.sort(key=lambda x: sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    M.sort(key = lambda x: sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if M[i][0] + M[j][0] < M[min_index][0] + M[min_index][0]:\n                min_index = j\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    #y = ((b**2) - (h**2) * x) / 2\n    #x = (h**2) - (y**2)\n    x = (h**2) - (b**2)\n    y = (b**2) - (h**2)\n    z = (h**2) - (b**2)\n    Volume = x * y * z\n    return Volume\n    \n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #y = ((b**2) - (h**2) * x) / 2\n    #h = b + y\n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The volume of the trianprism is {V}\")\n    return V\ndef find_Perimeter(l,b,h) :\n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    P = 2*l+2*b+2*h\n    print(f\"The perimeter of the trianprism is {P}\")\n    return P\ndef find_Area(l,b,h) :\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    A = l*b\n    print(f\"The area of the trianprism is {A}\")\n    return A\ndef find_Specific_Volume(l,b,h) :\n    '''\n    Write a python function to find the specific volume of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The specific volume of the trianprism is {V}\")\n    return V\ndef find_Specific_Perimeter(l,b,h) :\n    '''\n    Write a python function to find the specific perimeter of a triangular prism.\n    '''\n    P = 2*l+2*b+2*h\n    print(f\"The specific perimeter of the trianprism is {P}\")\n    return P\ndef find_Specific_Area(l,b,h) :\n    '''\n    Write a python function to find the specific area of a triangular prism.\n    '''\n    A = l*b\n    print(f\"The specific area of the trianprism is {A}\")\n    return A\ndef find_Specific_Cross_Area(l,b,h) :\n    '''\n    Write a python function to find the specific cross area of a triangular prism.\n    '''\n    A = (l+b)*h\n    print(f\"The specific cross area of the trianprism is {A}\")\n    return A\ndef find_Specific_Cross_Perimeter(l,b,h) :\n    '''\n    Write a python function to find the specific cross perimeter of a triangular prism.\n    '''\n    P = 2*l+2*b+2*h\n    print(f\"The specific cross perimeter of the trianprism is {P}\")\n    return P\ndef find_Specific_Cross_Volume(l,b,h) :\n    '''\n    Write a python function to find the specific cross volume of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The specific cross volume of the trianprism is {V}\")\n    return V\ndef find_Volume_Ratio(l,b,h) :\n    '''\n    Write a python function to find the volume ratio of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The volume ratio of the trianprism is {V/l}\")\n    return V/l\ndef find_Perimeter_Ratio(l,b,h) :\n    '''\n    Write a python function to find the perimeter ratio of a triangular prism.\n    '''\n    P = 2*l+2*b+2*h\n    print(f\"The perimeter ratio of the trianprism is {P/l}\")\n    return P/l\ndef find_Area_Ratio(l,b,h) :\n    '''\n    Write a python function to find the area ratio of a triangular prism.\n    '''\n    A = l*b\n    print(f\"The area ratio of the trianprism is {A/l}\")\n    return A/l\ndef find_Specific_Volume_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific volume ratio of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The specific volume ratio of the trianprism is {V/l}\")\n    return V/l\ndef find_Specific_Perimeter_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific perimeter ratio of a triangular prism.\n    '''\n    P = 2*l+2*b+2*h\n    print(f\"The specific perimeter ratio of the trianprism is {P/l}\")\n    return P/l\ndef find_Specific_Area_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific area ratio of a triangular prism.\n    '''\n    A = l*b\n    print(f\"The specific area ratio of the trianprism is {A/l}\")\n    return A/l\ndef find_Specific_Cross_Volume_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific cross volume ratio of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The specific cross volume ratio of the trianprism is {V/l}\")\n    return V/l\ndef find_Specific_Cross_Perimeter_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific cross perimeter ratio of a triangular prism.\n    '''\n    P = 2*l+2*b+2*h\n    print(f\"The specific cross perimeter ratio of the trianprism is {P/l}\")\n    return P/l\ndef find_Specific_Cross_Area_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific cross area ratio of a triangular prism.\n    '''\n    A = l*b\n    print(f\"The specific cross area ratio of the trianprism is {A/l}\")\n    return A/l\ndef find_Specific_Cross_Perimeter_Area_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific cross perimeter area ratio of a triangular prism.\n    '''\n    A = l*b\n    print(f\"The specific cross perimeter area ratio of the trianprism is {A/l}\")\n    return A/l\ndef find_Specific_Cross_Volume_Area_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific cross volume area ratio of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The specific cross volume area ratio of the trianprism is {V/l}\")\n    return V/l\ndef find_Specific_Cross_Volume_Perimeter_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific cross volume perimeter ratio of a triangular prism.\n    '''\n    P = 2*l+2*b+2*h\n    print(f\"The specific cross volume perimeter ratio of the trianprism is {P/l}\")\n    return P/l\ndef find_Specific_Cross_Volume_Area_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific cross volume area ratio of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The specific cross volume area ratio of the trianprism is {V/l}\")\n    return V/l\ndef find_Specific_Cross_Volume_Perimeter_Area_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific cross volume perimeter area ratio of a triangular prism.\n    '''\n    A = l*b\n    print(f\"The specific cross volume perimeter area ratio of the trianprism is {A/l}\")\n    return A/l\ndef find_Specific_Volume_Volume_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific volume volume ratio of a triangular prism.\n    '''\n    V = l*b*h\n    print(f\"The specific volume volume ratio of the trianprism is {V/l}\")\n    return V/l\ndef find_Specific_Volume_Perimeter_Ratio(l,b,h) :\n    '''\n    Write a python function to find the specific volume perimeter ratio of a triangular prism.\n    '''\n    P = 2*l+2*b+2*h\n    print(f\"The specific volume perimeter ratio of the trianprism is {P/l}\")\n    return P/l\ndef find_Specific_Volum"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (l*b*h)/3\n    print(\"Volume of the Trianlge: \",Volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l * b * h) / 6\n    print(vol)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = (l*b)*h\n    return a"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    s1 = l * h\n    s2 = (l * b) + (h * b)\n    s3 = 2 * (l * b)\n    return s1 + s2 + s3\n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*b*h) / 3\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    print('The volume of the given triangle is:',volume)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h)/3\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return height*width*length\n    \ndef find_Volume(height,width,length) :\n    '''\n    Write "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    print(v)\ndef find_Volume_3D(l,b,h,c):\n    '''\n    Write a python function to find the volume of a prism.\n    '''\n    v = (l*b*h) + (l*h*c) + (b*h*c)\n    print(v)\ndef find_Volume_4D(l,b,h,c,d):\n    '''\n    Write a python function to find the volume of a cube.\n    '''\n    v = l*b*h*c*d\n    print(v)\ndef find_Volume_5D(l,b,h,c,d,e):\n    '''\n    Write a python function to find the volume of a 5D cube.\n    '''\n    v = (l*b*h*c*d) + (l*h*c*d*e) + (b*h*c*d*e) + (l*h*c*d*e) + (l*b*h*c*e)\n    print(v)\ndef find_Volume_6D(l,b,h,c,d,e,f):\n    '''\n    Write a python function to find the volume of a 6D cube.\n    '''\n    v = (l*b*h*c*d*e) + (l*h*c*d*e*f) + (b*h*c*d*e*f) + (l*h*c*d*e*f) + (l*b*h*c*e) + (l*h*c*d*e)\n    print(v)\ndef find_Volume_7D(l,b,h,c,d,e,f,g):\n    '''\n    Write a python function to find the volume of a 7D cube.\n    '''\n    v = (l*b*h*c*d*e) + (l*h*c*d*e*f) + (b*h*c*d*e*f) + (l*h*c*d*e*f) + (l*b*h*c*e) + (l*h*c*d*e)\n    print(v)\ndef find_Volume_8D(l,b,h,c,d,e,f,g,h):\n    '''\n    Write a python function to find the volume of a 8D cube.\n    '''\n    v = (l*b*h*c*d*e*f) + (l*h*c*d*e*f*g) + (b*h*c*d*e*f*g) + (l*h*c*d*e*f*g) + (l*b*h*c*e*f) + (l*h*c*d*e*f)\n    print(v)\ndef find_Volume_9D(l,b,h,c,d,e,f,g,h,i):\n    '''\n    Write a python function to find the volume of a 9D cube.\n    '''\n    v = (l*b*h*c*d*e*f*g) + (l*h*c*d*e*f*g*i) + (b*h*c*d*e*f*g*i) + (l*h*c*d*e*f*g*i) + (l*b*h*c*e*f*g) + (l*h*c*d*e*f*g)\n    print(v)\ndef find_Volume_10D(l,b,h,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to find the volume of a 10D cube.\n    '''\n    v = (l*b*h*c*d*e*f*g*h) + (l*h*c*d*e*f*g*h*j) + (b*h*c*d*e*f*g*h*j) + (l*h*c*d*e*f*g*h*j) + (l*b*h*c*e*f*g*h) + (l*h*c*d*e*f*g*h)\n    print(v)\ndef find_Volume_11D(l,b,h,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a python function to find the volume of a 11D cube.\n    '''\n    v = (l*b*h*c*d*e*f*g*h*i) + (l*h*c*d*e*f*g*h*i*k) + (b*h*c*d*e*f*g*h*i*k) + (l*h*c*d*e*f*g*h*i*k) + (l*b*h*c*e*f*g*h*i) + (l*h*c*d*e*f*g*h*i)\n    print(v)\ndef find_Volume_12D(l,b,h,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a python function to find the volume of a 12D cube.\n    '''\n    v = (l*b*h*c*d*e*f*g*h*i*j) + (l*h*c*d*e*f*g*h*i*k*l) + (b*h*c*d*e*f*g*h*i*k*l) + (l*h*c*d*e*f*g*h*i*k*l) + (l*b*h*c*e*f*g*h*i*j) + (l*h*c*d*e*f*g*h*i*k*l)\n    print(v)\ndef find_Volume_13D(l,b,h,c,d,e,f,g,h,i,j,k,l,m):\n    '''\n    Write a python function to find the volume of a 13D cube.\n    '''\n    v = (l*b*h*c*d*e*f*g*h*i*j*k) + (l*h*c*d*e*f*g*h*i*k*l*m) + (b*h*c*d*e*f*g*h*i*k*l*m) + (l*h*c*d*e*f*g*h*i*k*l*m) + (l*b*h*c*e*f*g*h*i*j*k) + (l*h*c*d*e*f*g*h*i*k*l*m)\n    print(v)\ndef find_Volume_14D(l,b,h,c,d,e,f,g,h,i,j,k,l,m,n):\n    '''\n    Write a python function to find the volume of a 14D cube.\n    '''\n    v = (l*b*h*c*d*e*f*g*h*i*j*k*l*m*n) + (l*h*c*d*e*f*g*h*i*k*l*m*n*n) + (b*h*c*d*e*f*g*h*i*k*l*m*n*n) + (l*h*c*d*e*f*g*h*i*k*l*m*n*n) + (l*b*h*c*e*f*g*h*i*j*k*l*m*n) + (l*h*c*d*e*f*g*h*i*k*l*m*n*n)\n    print(v)\ndef find_Volume_15D(l,b,h,c,d,e,f,g,h,i,j,k,l,m,n,o):\n    '''\n    Write a python function to find the volume of a 15D cube.\n    '''\n    v = (l*b*h*c*d*e*f*g*h*i*j*k*l*"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+[_]+[a-z]+$', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]*', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    import re\n    pattern = r\"(^[a-z]+_*[a-z]+$)\"\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(\"[a-z][_]+\", text)\n    \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(\"^[a-zA-Z_]+$\",text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[a-z]_[a-z]+', text)!= []\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    x = re.findall('[a-z]+_[a-z]+', text)\n    return True if x else False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-z]+_[a-z]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef has_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of numbers joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[0-9]+_[0-9]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters and digits joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9]+_[a-zA-Z0-9]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscore joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_with_underscores(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_with_underscores_regex(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_with_underscores_regex_multiple(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_lowercase_regex(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_lowercase_regex_multiple(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_lowercase_with_underscores(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_lowercase_with_underscores_regex(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_lowercase_with_underscores_regex_multiple(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_numbers_regex(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_numbers_regex_multiple(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_no_numbers(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_no_numbers_regex(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_no_numbers_regex_multiple(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_numbers_with_underscores(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0-9_]+')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef text_no_special_numbers_with_underscores_regex(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters, digits, and underscores joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-zA-Z0"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall(r'[a-z]+_[a-z]*', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    return bool(re.match(r'^[a-z]+_*[a-z]+$', text))\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    \n    return a * 4\n    \n    \n    \n    \n    \ndef length_of_nth_word(sentence, n):\n    '''\n    Write a function that returns the length of the nth word in a sentence.\n    '''\n    \n    return len(sentence.split(' ')[n])\n    \n    \n    \n    \ndef common_words(sentence_1, sentence_2):\n    '''\n    Write a function that returns a list of common words in two sentences.\n    '''\n    \n    return list(set(sentence_1.split(' ') + sentence_2.split(' ')))\n    \n    \n    \n    \n    \ndef is_equal(a, b, epsilon = 10**-5):\n    '''\n    Write a function that returns True if two floating point values are equal and False otherwise.\n    '''\n    \n    return abs(a - b) <= epsilon\n    \n    \n    \n    \ndef find_intersection(lst_1, lst_2):\n    '''\n    Write a function that returns a list of the numbers that are in both lst_1 and lst_2.\n    '''\n    \n    return list(set(lst_1) & set(lst_2))\n    \n    \n    \n    \ndef odd_numbers_in_range(start, end):\n    '''\n    Write a function that returns a list of the odd numbers between start and end inclusive.\n    '''\n    \n    return list(range(start, end+1, 2))\n    \n    \n    \n    \ndef palindrome_number(number):\n    '''\n    Write a function that returns True if the given number is a palindrome and False otherwise.\n    '''\n    \n    return number == int(str(number)[::-1])\n    \n    \n    \n    \ndef find_short_word(word_list):\n    '''\n    Write a function that returns the shortest word in the given word list.\n    '''\n    \n    return min(word_list, key = len)\n    \n    \n    \n    \ndef list_to_string(lst):\n    '''\n    Write a function that takes in a list of strings and returns a string of the concatenation of all the strings.\n    '''\n    \n    return ''.join(lst)\n    \n    \n    \n    \ndef average_of_digits(n):\n    '''\n    Write a function that takes a non-negative integer and returns the average of its digits.\n    '''\n    \n    \n    \n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the given string is a palindrome and False otherwise.\n    '''\n    \n    \n    \n    \n    \n    \ndef make_word_play(word_1, word_2):\n    '''\n    Write a function that returns True if the given two words are one that can be played using letters from the first word and letters from the second word. If both words are the same return False.\n    '''\n    \n    \n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if the given number is prime and False otherwise.\n    '''\n    \n    \n    \n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the given string is a palindrome and False otherwise.\n    '''\n    \n    \n    \n    \n    \n    \ndef find_longest_word(lst):\n    '''\n    Write a function that takes in a list of strings and returns the longest word in the list.\n    '''\n    \n    \n    \n    \n    \n    \ndef palindrome_word(word):\n    '''\n    Write a function that takes in a word and returns a boolean representing whether the given word is a palindrome or not.\n    '''\n    \n    \n    \n    \n    \n    \ndef find_largest_number(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    \n    \n    \n    \n    \n    \ndef most_frequent_item(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the most frequent number in the list.\n    '''\n    \n    \n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if the given number is prime and False otherwise.\n    '''\n    \n    \n    \n    \n    \n    \ndef vowel_count(string):\n    '''\n    Write a function that returns the number of vowels in a given string.\n    '''\n    \n    \n    \n    \n    \n    \ndef string_to_int(s):\n    '''\n    Write a function that takes in a string and returns an integer representation of that string.\n    '''\n    \n    \n    \n    \n    \n    \ndef find_greatest_odd_number(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the greatest odd number in the list.\n    '''\n    \n    \n    \n    \n    \n    \ndef find_unique_words(sentence):\n    '''\n    Write a function that returns the number of unique words in a given sentence.\n    '''\n    \n    \n    \n    \n    \n    \ndef find_unique_words_v2(sentence):\n    '''\n    Write a function that returns a list of unique words in the sentence.\n    '''\n    \n    \n    \n    \n    \n    \ndef next_prime(n):\n    '''\n    Write a function that returns the next prime number after the given number.\n    '''\n    \n    \n    \n    \n    \n    \ndef highest_product(n1, n2):\n    '''\n    Write a function that returns the highest product between two numbers\n    '''\n    \n    \n    \n    \n    \n    \ndef next_prime(n):\n    '''\n    Write a function that returns the next prime number after the given number.\n    '''\n    \n    \n    \n    \n    \n    \ndef prime_factors(n):\n    '''\n    Write a function that returns the prime factors of a number.\n    '''\n    \n    \n    \n    \n    \n    \ndef prime_factors_v2(n):\n    '''\n    Write a function that returns a list of prime factors of a given number.\n    '''\n    \n    \n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if the given number is prime and False otherwise.\n    '''\n    \n    \n    \n    \n    \n    \ndef is_prime_v2(n):\n    '''\n    Write a function that returns a boolean value of whether the given number is prime.\n    '''\n    \n    \n    \n    \n    \n    \ndef is_prime_v3(n):\n    '''\n    Write a function that returns a boolean value of whether the given number is prime.\n    '''\n    \n    \n    \n    \n    \n    \ndef check_for_prime_factors(n):\n    '''\n    Write a function that returns a list of prime factors of a given number.\n    '''\n    \n    \n    \n    \n    \n    \ndef check_for_prime_factors_v2(n):\n    '''\n    Write a function that returns a list of prime factors of a given number.\n    '''\n    \n    \n    \n    \n    \n    \ndef get_sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits in a given number.\n    '''\n    \n    \n    \n    \n    \n    \ndef get_sum_of_digits_v2(n):\n    '''\n    Write a function that returns the sum of the digits in a given number.\n    '''\n    \n    \n    \n    \n    \n    \ndef get_sum_of_digits_v3(n):\n    '''\n    Write a function that returns the sum of the digits in a given number.\n    '''\n    \n    \n    \n    \n    \n    \ndef is_prime_v4(n):\n    '''\n    Write a function that returns True if the given number is prime and False otherwise."
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    def remove(string1, string2):\n        for i in string1:\n            if i in string2:\n                string1 = string1.replace(i, \"\")\n        return string1\n    \n    string = list(string)\n    string1 = string.copy()\n    if len(string) == 0:\n        return False\n    string2 = string.copy()\n    if len(string2) == 0:\n        return False\n    string = remove(string1, string2)\n    if len(string) == 0:\n        return False\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s = \"\"\n    for i in range(len(string)):\n        if string[i] not in s:\n            s += string[i]\n    return s\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    for i in range(len(string)):\n        if string[i] not in string[i+1:]:\n            li.append(string[i])\n    return li\n    \n    \ndef list_to_str(li):\n    '''\n    Write a function to convert the list into a string.\n    '''\n    return ''.join(li)\n    \n    \ndef remove_duplicate(str1, str2):\n    '''\n    Write a function to remove the characters which are present in the second string from the first string.\n    '''\n    li1 = list(str1)\n    for i in str2:\n        if i in li1:\n            li1.remove(i)\n    return list_to_str(li1)\n    \ndef main():\n    str1 = input(\"Enter the first string: \")\n    str2 = input(\"Enter the second string: \")\n    print(\"Removing duplicates characters from the first string: \", remove_duplicate(str1, str2))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ans_list = []\n    for i in range(len(string)):\n        if string[i] not in string[i+1:]:\n            ans_list.append(string[i])\n    return ans_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count_dict = {}\n    for char in string:\n        count_dict[char] = string.count(char)\n    return list(count_dict.keys())\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not string:\n        return string\n    if not string[0]:\n        return string[1:]\n    l1 = len(string)\n    l2 = len(string[0])\n    if l1 > l2:\n        return string[l2:]\n    if l1 < l2:\n        return string[l1:]\n    k = 0\n    for i in range(l1):\n        if string[i]!= string[0][k]:\n            break\n        k += 1\n    return string[:i] + string[i+1:]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in string:\n            result.append(char)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(string)\n    for char in list2:\n        if char in list1:\n            list1.remove(char)\n    return list1\nif __name__ == \"__main__\":\n    string = input()\n    print(str_to_list(string))"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for char in string:\n        if char not in string[string.index(char):]:\n            output.append(char)\n    return ''.join(output)\ndef find_longest_unique_substring(string1, string2): \n    '''\n    Given two strings, check if they are a substring of each other and return the longest substring.\n    '''\n    char_count = {} \n    for char in string1: \n        if char in char_count: \n            char_count[char] += 1\n        else: \n            char_count[char] = 1\n    if len(string2) > len(string1):\n        string2 = str_to_list(string2)\n    for char in string2: \n        if char not in char_count: \n            return -1\n        else: \n            if char_count[char] > 1: \n                char_count[char] -= 1\n            else: \n                del char_count[char]\n    return len(string1)\ndef lcs(string1, string2):\n    '''\n    Given two strings, check if they are a substring of each other and return the longest substring.\n    '''\n    len_str1, len_str2 = len(string1), len(string2)\n    dp = [[0 for _ in range(len_str2 + 1)] for _ in range(len_str1 + 1)]\n    for i in range(1, len_str1 + 1):\n        for j in range(1, len_str2 + 1):\n            if string1[i - 1] == string2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return dp[len_str1][len_str2]\ndef find_unique_characters_using_set(string1, string2):\n    '''\n    Given two strings, check if they are a substring of each other and return the longest substring.\n    '''\n    set_str1 = set(string1)\n    set_str2 = set(string2)\n    set_intersection = set_str1 & set_str2\n    if len(set_intersection) == len(set_str1) == len(set_str2):\n        return -1\n    set_intersection = sorted(list(set_intersection))\n    return ''.join(set_intersection)\ndef find_unique_characters_using_dict(string1, string2):\n    '''\n    Given two strings, check if they are a substring of each other and return the longest substring.\n    '''\n    dict_str1 = {}\n    dict_str2 = {}\n    for i in string1:\n        if i in dict_str1:\n            dict_str1[i] += 1\n        else:\n            dict_str1[i] = 1\n    for i in string2:\n        if i in dict_str2:\n            dict_str2[i] += 1\n        else:\n            dict_str2[i] = 1\n    if dict_str1 == dict_str2:\n        return -1\n    diff = set(string1) - set(string2)\n    if diff:\n        return ''.join(diff)\n    diff = set(string2) - set(string1)\n    if diff:\n        return ''.join(diff)\n    for i in dict_str1:\n        if i in dict_str2:\n            if dict_str1[i] == dict_str2[i]:\n                return -1\n            else:\n                dict_str2[i] -= 1\n                dict_str1[i] -= 1\n    for i in dict_str2:\n        if i in dict_str1:\n            if dict_str2[i] == dict_str1[i]:\n                return -1\n            else:\n                dict_str1[i] -= 1\n                dict_str2[i] -= 1\n    return ''.join(set(string1) & set(string2))\ndef find_unique_characters_using_dictionary(string1, string2):\n    '''\n    Given two strings, check if they are a substring of each other and return the longest substring.\n    '''\n    dict_str1 = {}\n    dict_str2 = {}\n    for i in string1:\n        if i in dict_str1:\n            dict_str1[i] += 1\n        else:\n            dict_str1[i] = 1\n    for i in string2:\n        if i in dict_str2:\n            dict_str2[i] += 1\n        else:\n            dict_str2[i] = 1\n    if dict_str1 == dict_str2:\n        return -1\n    diff = set(string1) - set(string2)\n    if diff:\n        return ''.join(diff)\n    diff = set(string2) - set(string1)\n    if diff:\n        return ''.join(diff)\n    for i in dict_str1:\n        if i in dict_str2:\n            if dict_str1[i] == dict_str2[i]:\n                return -1\n            else:\n                dict_str2[i] -= 1\n                dict_str1[i] -= 1\n    for i in dict_str2:\n        if i in dict_str1:\n            if dict_str2[i] == dict_str1[i]:\n                return -1\n            else:\n                dict_str1[i] -= 1\n                dict_str2[i] -= 1\n    return ''.join(set(string1) & set(string2))\ndef find_unique_characters_using_set(string1, string2):\n    '''\n    Given two strings, check if they are a substring of each other and return the longest substring.\n    '''\n    set_str1 = set(string1)\n    set_str2 = set(string2)\n    set_intersection = set_str1 & set_str2\n    if len(set_intersection) == len(set_str1) == len(set_str2):\n        return -1\n    set_intersection = sorted(list(set_intersection))\n    return ''.join(set_intersection)\ndef find_unique_characters_using_dictionary(string1, string2):\n    '''\n    Given two strings, check if they are a substring of each other and return the longest substring.\n    '''\n    dict_str1 = {}\n    dict_str2 = {}\n    for i in string1:\n        if i in dict_str1:\n            dict_str1[i] += 1\n        else:\n            dict_str1[i] = 1\n    for i in string2:\n        if i in dict_str2:\n            dict_str2[i] += 1\n        else:\n            dict_str2[i] = 1\n    if dict_str1 == dict_str2:\n        return -1\n    diff = set(string1) - set(string2)\n    if diff:\n        return ''.join(diff)\n    diff = set(string2) - set(string1)\n    if diff:\n        return ''.join(diff)\n    for i in dict_str1:\n        if i in dict_str2:\n            if dict_str1[i] == dict_str2[i]:\n                return -1\n            else:\n                dict_str2[i] -= 1\n                dict_str1[i] -= 1\n    for i in dict_str2:\n        if i in dict_str1:\n            if dict_str2[i] == dict_str1[i]:\n                return -1\n            else:\n                dict_str1[i] -= 1\n                dict_str2[i] -= 1\n    return ''.join(set(string1) & set(string2))\ndef find_unique_characters_using_dictionary(string1, string2):\n    '''\n    Given two strings, check if they are a substring of each other and return the longest substring.\n    '''\n    dict_str1 = {}\n    dict_str2 = {}\n    for i in string1:\n        if i i"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    \n    for i in range(len(string)):\n        lst.append(string[i])\n    \n    for j in range(len(string)):\n        if string[j] in lst:\n            lst.remove(string[j])\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    res = False\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                res = True\n                break\n        if res == True:\n            break\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #Passes\n    #time complexity: O(n)\n    #space complexity: O(1)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = sorted(set(arraynums))\n    print(nums)\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #your code here\n    d = {}\n    for i in arraynums:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(len(arraynums)):\n        if i!= len(arraynums)-1:\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    duplicate = True\n                    break\n        else:\n            for j in range(0, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    duplicate = True\n                    break\n        if duplicate == True:\n            return True\n    return duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert not duplicate(arraynums), \"Not a duplicate\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    if len(arraynums) == 1:\n        return False\n    \n    numbers = {}\n    for number in arraynums:\n        if number in numbers:\n            return True\n        else:\n            numbers[number] = 0\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == -1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # DONE: Write your code here\n    return True if x == 3 or x == 5 or x == 8 or x == 10 or x == 11 or x == 13 or x == 14 or x == 15 or x == 16 or x == 17 or x == 18 or x == 19 or x == 20 or x == 21 or x == 22 or x == 23 or x == 24 or x == 25 or x == 26 or x == 27 or x == 28 or x == 29 or x == 30 or x == 31 or x == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x == 40 or x == 41 or x == 42 or x == 43 or x == 44 or x == 45 or x == 46 or x == 47 or x == 48 or x == 49 or x == 50 or x == 51 or x == 52 or x == 53 or x == 54 or x == 55 or x == 56 or x == 57 or x == 58 or x == 59 or x == 60 or x == 61 or x == 62 or x == 63 or x == 64 or x == 65 or x == 66 or x == 67 or x == 68 or x == 69 or x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x == 81 or x == 82 or x == 83 or x == 84 or x == 85 or x == 86 or x == 87 or x == 88 or x == 89 or x == 90 or x == 91 or x == 92 or x == 93 or x == 94 or x == 95 or x == 96 or x == 97 or x == 98 or x == 99 or x == 100\n    \ndef is_james(x): \n    '''\n    Write a function to check if the given number is james or not.\n    '''\n    # DONE: Write your code here\n    return True if x == 11 or x == 14 or x == 17 or x == 20 or x == 23 or x == 26 or x == 29 or x == 32 or x == 35 or x == 38 or x == 41 or x == 44 or x == 47 or x == 50 or x == 53 or x == 56 or x == 59 or x == 62 or x == 65 or x == 68 or x == 71 or x == 74 or x == 77 or x == 80 or x == 83 or x == 86 or x == 89 or x == 92 or x == 95 or x == 98 or x == 101 or x == 104 or x == 107 or x == 110 or x == 113 or x == 116 or x == 119 or x == 122 or x == 125 or x == 128 or x == 131 or x == 134 or x == 137 or x == 140 or x == 143 or x == 146 or x == 149 or x == 152 or x == 155 or x == 158 or x == 161 or x == 164 or x == 167 or x == 170 or x == 173 or x == 176 or x == 179 or x == 182 or x == 185 or x == 188 or x == 191 or x == 194 or x == 197 or x == 200 or x == 203 or x == 206 or x == 209 or x == 212 or x == 215 or x == 218 or x == 221 or x == 224 or x == 227 or x == 230 or x == 233 or x == 236 or x == 239 or x == 242 or x == 245 or x == 248 or x == 251 or x == 254 or x == 257 or x == 260 or x == 263 or x == 266 or x == 269 or x == 272 or x == 275 or x == 278 or x == 281 or x == 284 or x == 287 or x == 290 or x == 293 or x == 296 or x == 299 or x == 302 or x == 305 or x == 308 or x == 311 or x == 314 or x == 317 or x == 320 or x == 323 or x == 326 or x == 329 or x == 332 or x == 335 or x == 338 or x == 341 or x == 344 or x == 347 or x == 350 or x == 353 or x == 356 or x == 359 or x == 362 or x == 365 or x == 368 or x == 371 or x == 374 or x == 377 or x == 380 or x == 383 or x == 386 or x == 389 or x == 392 or x == 395 or x == 398 or x == 401 or x == 404 or x == 407 or x == 410 or x == 413 or x == 416 or x == 419 or x == 422 or x == 425 or x == 428 or x == 431 or x == 434 or x == 437 or x == 440 or x == 443 or x == 446 or x == 449 or x == 452 or x == 455 or x == 458 or x == 461 or x == 464 or x == 467 or x == 470 or x == 473 or x == 476 or x == 479 or x == 482 or x == 485 or x == 488 or x == 491 or x == 494 or x == 497 or x == 500 or x == 503 or x == 506 or x == 509 or x == 512 or x == 515 or x == 518 or x == 521 or x == 524 or x == 527 or x == 530 or x == 533 or x == 536 or x == 539 or x == 542 or x == 545 or x == 548 or x == 551 or x == 554 or x == 557 or x == 560 or x == 563 or x == 566 or x == 569 or x == 572 or x == 575 or x == 578 or x == 581 or x == 584 or x == 587 or x == 590 or x == 593 or x == 596 or x == 599 or x == 600 or x == 603 or x == 606 or x == 609 or x == 612 or x == 615 or x == 618 or x == 621 or x == 624 or x == 627 or x == 630 or x == 633 or x == 636 or x == 639 or x == 642 or x == 645 or x == 648 or x == 651 or x == 654 or x == 657 or x == 660 or x == 663 or x == 666 or x == 669 or x == 672 or x == 675 or x == 678 or x == 681 or x == 684 or x == 687 or x == 690 or x == 693 or x == 696 or x == 699 or x == 702 or x == 705 or x == 708 or x == 711 or x == 714 or x == 717 or x == 720 or x == 723 or x == 726 or x == 729 or x == 732 or x == 735 or x == 738 or x == 741 or x == 744 or x == 747 or x == 750 or x == 753 or x == 756 or x == 759 or x == 762 or x == 765 or x == 768 or x == 771 or x == 774 or x == 777 or x == 780 or x == 783 or x == 786 or x == 789 or x == 792 or x == 795 or x == 798 or x == 801 or x == 804 or x == 807 or x == 810 or x == 813 or x == 816 or x == 819 or x == 822 or x == 825 or x == 828 or x == 831 or x == 834 or x == 837 or x == 840 or x == 843 or x == 846 or x == 849 or x == 852 or x == 855 or x == 858 or x == 861 or x == 864 or x == 867 or x == 870 or x == 873 or x == 876 or x == 879 or x == 882 or x == 885 or x == 888 or x == 891 or x == 894 or x == 897 or x == 900 or x == 903 or x == 906 or x == 909 or x == 912 or x == 915 or x == 918 or x == 921 or x == 924 or x == 927 or x == 930 or x == 933 or x == 936 or x == 939 or x == 942 or x == 945 or x == 948 or x == 951 or x == 954 or x == 957 or x == 960 or x == 963 or x == 966 or x == 969 or x == 972 or x == 975 or x == 978 or x == 981 or x == 984 or x == 987 or x == 990 or x == 993 or x == 996 or x == 999:\n    print(True)\nelse:\n    print(False)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x%3==0 and x%5==3 and x%7==0)\n    #return (x%3==0 and x%5==3 and x%7==0)\n    #return (x%3==0 or x%5==3 or x%7==0)\n    #return (x%3==0 and x%5==3)\n    #return (x%3==0 and x%5==3 and x%7==0)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0 and x%3==0 and x%5==0:\n        print('yes')\n    else:\n        print('no')\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return False\n    if x > 0 and x % 10 == 0:\n        return True\n    if x % 10 > 0 and x < 100:\n        return False\n    if x > 99:\n        return True\n    \ndef find_longest_word(words):\n    '''\n    Write a function that takes a list of words and returns the longest word.\n    '''\n    longest = 0\n    for i in words:\n        if len(i) > longest:\n            longest = len(i)\n    return words[0]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==\"Woodball\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 6:\n        return False\n    elif x == 5:\n        return True\n    else:\n        return None\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return ((x-3) % 4 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(1, 8):\n        for j in range(2, 8):\n            for k in range(3, 8):\n                for l in range(4, 8):\n                    for m in range(5, 8):\n                        for n in range(6, 8):\n                            if x == i * 100 + j * 10 + k * 1 + l * 0.5 + m * 0.25 + n * 0.125:\n                                return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 0:\n        return False\n    while (num > 9):\n        num = num / 10\n    return (num * 2) == int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = (rev_num * 10) + rem\n        num = num // 10\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 0\n    rev = 0\n    while num!= 0:\n        rem = num % 10\n        rev = (rev * 10) + rem\n        num = num//10\n    if rev == num:\n        return 1\n    return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    res = 0\n    while(num):\n        res = res*10 + num%10\n        num = num//10\n    return res\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    return 2 * num - 1 \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num!= 0):\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num > 0):\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = (rev_num*10) + rem\n        num = num // 10\n    if rev_num == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    if num == 0 and rev_num == 0:\n        return 1\n    elif num == 0 and rev_num!= 0:\n        return 0\n    else:\n        return rev_num + 1\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def max_num(arr,i):\n        if i==len(arr):\n            return\n        max_num(arr,i+1)\n        if max_num(arr,i+1)>arr[i]:\n            arr[i]=max_num(arr,i+1)\n        return arr[i]\n    \n    return max_num(arr,0)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>m):\n            m=i\n    return m\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m=0\n    for i in arr:\n        if (i>"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # if all the digits are same\n    if len(set(arr)) == 1:\n        return max(arr)\n    else:\n        # if there is a tie\n        for i in range(len(arr)):\n            # check if the next digit is smaller\n            if i+1 < len(arr):\n                if arr[i+1] > arr[i]:\n                    return arr[i]\n    return -1\n        \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # if all the digits are same\n    if len(set(arr)) == 1:\n        return max(arr)\n    else:\n        # find the digit with the least frequency\n        count = 0\n        cur_max = 0\n        for i in range(len(arr)):\n            count += 1 if arr[i] == cur_max else 0\n            cur_max = arr[i] if count == 1 else max(arr[i], cur_max)\n        return cur_max\n        \ndef find_Max_Num_3(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # if all the digits are same\n    if len(set(arr)) == 1:\n        return max(arr)\n    else:\n        # find the digit with the least frequency\n        count = 0\n        cur_max = arr[0]\n        for i in range(len(arr)):\n            count += 1 if arr[i] == cur_max else 0\n            cur_max = arr[i] if count == 1 else max(arr[i], cur_max)\n        return cur_max\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # counting the number of digits\n    digits = len(arr)\n    # sorting the digits\n    arr.sort()\n    # iterating the list\n    for i in range(digits) :\n        # if a and b are same, then we return the largest number\n        if arr[i] == arr[i+1] :\n            return arr[i]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    s = int(''.join(map(str,arr)))\n    return s\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for i in range(0, len(arr)) : \n        if (arr[i] > max_num) : \n            max_num = arr[i]\n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for i in range(len(arr)) : \n        if int(arr[i]) > max_num : \n            max_num = int(arr[i])\n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    import heapq\n    heap = arr[:]\n    heapq.heapify(heap)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr :\n        max = max * 10 + i\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    lst = list(map(int, str(arr)))\n    return max(lst)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x>0 and y<0) or (x<0 and y>0)) \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        print(\"Both numbers have same sign.\")\n    elif x < 0 and y < 0:\n        print(\"Both numbers have opposite sign.\")\n    else:\n        print(\"Both numbers have same sign.\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0: \n        return True \n    else: \n        return False\n    \nprint(opposite_Signs(10,-10)) \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0: \n        return True\n    if x == 0 and y > 0: \n        return False\n    if x > 0 and y == 0: \n        return False\n    if x > 0 and y > 0: \n        return True\n    if x < 0 and y == 0: \n        return False\n    if x < 0 and y > 0: \n        return True\n    if x == -1 and y == 0: \n        return True\n    if x == -1 and y > 0: \n        return False\n    if x == 0 and y == -1: \n        return True\n    if x == 0 and y < -1: \n        return False\n    if x > 0 and y == -1: \n        return True\n    if x > 0 and y < -1: \n        return False\n    if x < 0 and y == -1: \n        return True\n    if x < 0 and y < -1: \n        return False\n    if x == -1 and y < -1: \n        return True\n    if x == 0 and y == -1: \n        return True\n    if x == 0 and y > -1: \n        return False\n    if x > 0 and y == -1: \n        return False\n    if x > 0 and y > -1: \n        return True\n    if x < 0 and y == -1: \n        return False\n    if x < 0 and y > -1: \n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Your code here\n    # If x is less than y then x's sign will be opposite to y's sign.\n    # If x is greater than y then x's sign will be opposite to y's sign.\n    if x > y:\n        return -1 * x\n    elif x < y:\n        return -1 * y\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=abs(x)\n    y=abs(y)\n    if x==y:\n        print(\"Both are same signs\")\n    elif x>y:\n        print(\"x is greater\")\n    else:\n        print(\"y is greater\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x*y) < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x < 0) ^ (y < 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x - y < 0 and y - x > 0\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = (1 + 8 * n) / 3\n    oct_x = int(oct)\n    oct_y = oct - oct_x\n    return oct_x * oct_x * oct_y\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = 1\n    oct_num = 1\n    while x < n:\n        oct_num += 8\n        x += 1\n    return oct_num\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # the formula is n * (2*n - 1)\n    return (n * (2*n - 1)) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 0\n    while n >= 1:\n        n -= 1\n        i += 2\n    return i\n    \ndef is_pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 0\n    while n >= 1:\n        n -= 1\n        i += 3\n    return i\n    \ndef is_hexagonal(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 0\n    while n >= 1:\n        n -= 1\n        i += 4\n    return i\n    \ndef pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 1\n    while n >= 1:\n        n -= 1\n        i += 3\n    return i\n    \ndef hexagonal(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 1\n    while n >= 1:\n        n -= 1\n        i += 2\n    return i\n    \ndef is_pentagonal_seq(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 1\n    while n >= 1:\n        n -= 1\n        i += 3\n    return i\n    \ndef is_hexagonal_seq(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 1\n    while n >= 1:\n        n -= 1\n        i += 4\n    return i\n    \ndef hexagonal_seq(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 1\n    while n >= 1:\n        n -= 1\n        i += 2\n    return i\n    \ndef pentagonal_seq(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 1\n    while n >= 1:\n        n -= 1\n        i += 3\n    return i\n    \ndef is_octagonal_seq(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 1\n    while n >= 1:\n        n -= 1\n        i += 4\n    return i\n    \ndef octagonal_seq(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        return None\n    i = 1\n    while n >= 1:\n        n -= 1\n        i += 6\n    return i\n    \ndef main():\n    '''\n    Write some tests that check that all functions work.\n    '''\n    print(is_pentagonal(5))\n    print(is_pentagonal(10))\n    print(is_pentagonal(25))\n    \n    print(is_octagonal(5))\n    print(is_octagonal(10))\n    print(is_octagonal(25))\n    \n    print(is_hexagonal(5))\n    print(is_hexagonal(10))\n    print(is_hexagonal(25))\n    \n    print(pentagonal(5))\n    print(pentagonal(10))\n    print(pentagonal(25))\n    \n    print(hexagonal(5))\n    print(hexagonal(10))\n    print(hexagonal(25))\n    \n    print(hexagonal_seq(5))\n    print(hexagonal_seq(10))\n    print(hexagonal_seq(25))\n    \n    print(octagonal_seq(5))\n    print(octagonal_seq(10))\n    print(octagonal_seq(25))\n    \n    print(octagonal(5))\n    print(octagonal(10))\n    print(octagonal(25))\n    \n    print(is_pentagonal_seq(5))\n    print(is_pentagonal_seq(10))\n    print(is_pentagonal_seq(25))\n    \n    print(is_hexagonal_seq(5))\n    print(is_hexagonal_seq(10))\n    print(is_hexagonal_seq(25))\n    \n    print(hexagonal_seq(5))\n    print(hexagonal_seq(10))\n    print(hexagonal_seq(25))\n    \n    print(is_hexagonal_seq(5))\n    print(is_hexagonal_seq(10))\n    print(is_hexagonal_seq(25))\n    \n    print(hexagonal(5))\n    print(hexagonal(10))\n    print(hexagonal(25))\n    \n    print(is_hexagonal(5))\n    print(is_hexagonal(10))\n    print(is_hexagonal(25))\n    \n    print(pentagonal(5))\n    print(pentagonal(10))\n    print(pentagonal(25))\n    \n    print(is_pentagonal(5))\n    print(is_pentagonal(10))\n    print(is_pentagonal(25))\n    \n    print(pentagonal_seq(5))\n    print(pentagonal_seq(10))\n    print(pentagonal_seq(25))\n    \n    print(is_pentagonal_seq(5))\n    print(is_pentagonal_seq(10))\n    print(is_pentagonal_seq(25))\n    \n    print(pentagonal(5))\n    print(pentagonal(10))\n    print(pentagonal(25))\n    \n    print(is_pentagonal(5))\n    print(is_pentagonal(10))\n    print(is_pentagonal(25))\n    \n    print(octagonal_seq(5))\n    print(octagonal_seq(10))\n    print(octagonal_seq(25))\n    \n    print(is_octagonal_seq(5))\n    print(is_octagonal_seq(10))\n    print(is_octagonal_seq(25))\n    \n    print(octagonal(5))\n    print(octagonal(10))\n    print(octagonal(25))\n    \n    print(is_octagonal(5))\n    print(is_octagonal(10))\n    print(is_octagonal(25))\n    \n    print(hexagonal_seq(5))\n    print(hexagonal_seq(10))\n    print(hexagonal_seq(25))\n    \n    print(is_hexagonal_seq(5))\n    print(is_hexagonal_seq(10))\n    print(is_hexagonal_seq(25))\n    \n    print(hexagonal(5))\n    print(hexagonal(10))\n    print(hexagonal(25))\n    \n    print(is_hexagonal(5))\n    print(is_hexagonal(10))\n    print(is_hexagonal(25))\n    \n    print(pentagonal_seq(5))\n    print(pentagonal_seq(10))\n    print(pentagonal_seq(25))\n    \n    print(is_pentagonal_seq(5))\n    print(is_pentagonal_seq(10))\n    print(is_pentagonal_seq(25))\n    \n    print(pentagonal(5))\n    print(pentagonal(10))\n    print(pentagonal(25))\n    \n    print(is_pentagonal(5))\n    print(is_pentagonal(10))\n    print(is_pentagonal(25))\n    \n    print(octagonal_seq(5))\n    print(octagonal_seq(10))\n    print(octagonal_seq(25))\n    \n    print(is_octagonal_se"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1 + (octagonal_number(n-1) - (octagonal_number(n-2) * 2)) // 3\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3*n-1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        print(\"The number of octagonal numbers is not enough\")\n    elif n <= 7:\n        return 1\n    else:\n        return 1 + is_octagonal(n - 1) * 3\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return(int((n*(n+3)*(2*n+1))/6))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_nums = []\n    \n    for i in range(1, n + 1): \n        oct_nums.append(i * (3 * i - 1))\n        \n    oct_nums = list(dict.fromkeys(oct_nums))\n    \n    return oct_nums\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return n * (2 * n - 1)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if len(s) <= i:\n            break\n        else:\n            if int(s[i]) == len(s) and s[i-1] == s[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substr = s[i:j+1]\n            if int(substr)==len(substr):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    # count_list = defaultdict(int)\n    # for i in s:\n    #     count_list[i] += 1\n    # for k,v in count_list.items():\n    #     if v == len(s):\n    #         count += 1\n    for i in range(len(s)):\n        temp = \"\"\n        for j in range(i,len(s)):\n            temp += s[j]\n            if (int(temp) == len(temp)):\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if i == 0:\n                if s[i] == '0':\n                    count += 1\n            elif j == len(s) - 1:\n                if s[i] == '0':\n                    count += 1\n            elif s[i] == s[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    # traverse through every string\n    for i in range(len(s)):\n        # traverse through every substring\n        for j in range(i, len(s)):\n            # concatenate strings\n            ss = s[i:j+1]\n            # if substring is a palindrome, count it\n            if ss == ss[::-1]:\n                d[len(ss)] += 1\n    return d\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    output = []\n    for i in range(len(s)+1):\n        output.append(0)\n    \n    for i in range(len(s)):\n        if s[i]>='0' and s[i]<='9':\n            output[i] += 1\n        if i>0:\n            if output[i-1]>0 and output[i-1]+1 == output[i]:\n                output[i] += 1\n    return output[-1]\nprint(\"count_Substrings : \",count_Substrings(\"abcdaf\"))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    dicts = defaultdict(int)\n    for i in range(len(s)):\n        if dicts[s[i]]!= 0:\n            ans += dicts[s[i]]\n            dicts[s[i]] = 0\n        dicts[s[i]] += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    s = s.replace(\" \",\"\")\n    for i in range(1,len(s)+1):\n        for j in range(i,len(s)+1):\n            substring = s[i-1:j]\n            if(len(substring)==i):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substr = s[i:j+1]\n            sum = 0\n            for k in range(len(substr)):\n                sum += int(substr[k])\n            if sum == len(substr):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict_s = defaultdict(int)\n    \n    for i in range(len(s)):\n        dict_s[s[i]] += 1\n        \n    return sum(value == len(s) for value in dict_s.values())\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    small_index = 0\n    for i in range(1,len(xs)):\n        if small > xs[i]:\n            small = xs[i]\n            small_index = i\n    return small_index\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = len(xs)\n    if n == 1:\n        return xs[0]\n    else:\n        first = small_num(xs[0:n//2])\n        last = small_num(xs[n//2:])\n        return min(first, last)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(\"\\nFunction to find smallest number in a list: \")\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    xs = sorted(xs)\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_num:\n            min_num = xs[i]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Check if list is empty or null\n    if len(xs) == 0:\n        return None\n    \n    # Take first element as minimum\n    smallest = xs[0]\n    \n    # Iterate over the rest of the elements\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # sorting the list and getting the minimum of all the elements\n    xs.sort()\n    print(xs[0])\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = xs[0]\n    for i in xs:\n        if i < n:\n            n = i\n    return n\n    \n    "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = xs[0]\n    for i in xs:\n        if n > i:\n            n = i\n    return n\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    lst = []\n    for i in range(0,len(test_list)-1):\n        lst.append(abs(test_list[i]-test_list[i+1]))\n    print(\"The maximum difference between the two elements is:\",max(lst))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max:\n                max = abs(test_list[i]-test_list[j])\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_sum = sum(test_list)\n    diff = list_sum * (len(test_list) + 1)\n    lst_sum = 0\n    for item in test_list:\n        lst_sum = lst_sum + item\n    diff = diff - lst_sum\n    return abs(diff)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    return max(map(lambda x: x[1] - x[0], test_list))\n    \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # set up list of numbers from the tuple list\n    num_list = []\n    for item in test_list:\n        num_list.append(item[0])\n        num_list.append(item[1])\n    \n    # sort numbers list, if they are same return 0\n    num_list.sort()\n    \n    # check whether the difference is zero\n    if num_list[1] - num_list[0] == 0:\n        return 0\n    \n    # else find the maximum difference\n    else:\n        return num_list[1] - num_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    my_dict = {}\n    for item in test_list:\n        if item[0] in my_dict:\n            my_dict[item[0]] += 1\n        else:\n            my_dict[item[0]] = 1\n    max_diff = -2**32\n    for item in my_dict:\n        if my_dict[item] > max_diff:\n            max_diff = my_dict[item]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_value = 0\n    max_pair = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # max_diff = None\n    # for x in range(0, len(test_list)-1):\n    #     for y in range(x+1, len(test_list)):\n    #         diff = test_list[x] - test_list[y]\n    #         if max_diff is None:\n    #             max_diff = diff\n    #         elif diff > max_diff:\n    #             max_diff = diff\n    # return max_diff\n    \n    # max_diff = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         diff = test_list[i] - test_list[j]\n    #         if diff > max_diff:\n    #             max_diff = diff\n    # return max_diff\n    \n    # max_diff = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         diff = test_list[i] - test_list[j]\n    #         if diff < 0:\n    #             diff = -diff\n    #         if diff > max_diff:\n    #             max_diff = diff\n    # return max_diff\n    \n    # max_diff = float('-inf')\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         diff = test_list[i] - test_list[j]\n    #         if diff > max_diff:\n    #             max_diff = diff\n    # return max_diff\n    \n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n    \nif __name__ == '__main__':\n    # Test 1\n    test_list = (1, 2, 8, 4, 6)\n    # expected_output = 2\n    \n    # Test 2\n    test_list = (1, -3, -2, -4)\n    # expected_output = 2\n    \n    # Test 3\n    test_list = (0, 1, 2, 4)\n    # expected_output = 1\n    \n    # Test 4\n    test_list = (10, -12, -11, -15)\n    # expected_output = 8\n    \n    # Test 5\n    test_list = (0, -1, 1, 2)\n    # expected_output = 2\n    \n    # Test 6\n    test_list = (1, -1, -1, -1)\n    # expected_output = 0\n    \n    # Test 7\n    test_list = (1, 1, 1, 1, 1)\n    # expected_output = 1\n    \n    # Test 8\n    test_list = (5, 5, 5, 5, 5)\n    # expected_output = 0\n    \n    # Test 9\n    test_list = (-3, -2, -1, 0, 1, 2, 3, 4, 5, 6)\n    # expected_output = 0\n    \n    # Test 10\n    test_list = (0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359, -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378, -379, -380, -381, -382, -383, -384, -385, -386, -387, -388, -389, -390, -391, "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda subjectmarks: subjectmarks[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    print(subjectmarks)\nsubject_marks = [(10, 34), (9, 77), (7, 25), (5, 22), (13, 37), (2, 22), (12, 26), (8, 39)]\nsubject_marks.sort(key=lambda x:x[1])\nprint(subject_marks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort(tuples):\n        return sorted(tuples, key = lambda x: x[1])\n    return sort(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #print(subjectmarks)\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for value in data_list:\n        if isinstance(value, list):\n            result += recursive_list_sum(value)\n        else:\n            result += value\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return sum(recursive_list_sum(item) for item in data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if type(data_list[0]) == list:\n        result = recursive_list_sum(data_list[0])\n        for i in range(1, len(data_list)):\n            result += recursive_list_sum(data_list[i])\n        return result\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for num in data_list:\n        if type(num) is list:\n            total += recursive_list_sum(num)\n        else:\n            total += num\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        data_list[0] = recursive_list_sum(data_list[0])\n        data_list[1] = recursive_list_sum(data_list[1])\n        return data_list[0] + data_list[1]\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num = 0\n    for i in list:\n        if i > 0:\n            num += 1\n    return num\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #start writing your code here\n    count = 0\n    for i in range(len(list)):\n        if list[i]>=0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if list==[]:\n        print('The list is empty.')\n        return 0\n    if list[0]<0:\n        return 0\n    count=1\n    for i in range(1,len(list)):\n        if list[i]<0:\n            break\n        elif list[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    i = 0\n    if list == []:\n        return 0\n    for val in list:\n        if val>0:\n            i += 1\n    return i\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 1\n    if n==2:\n        return 1\n    if n>2:\n        return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = []\n    for i in range(1, n+1):\n        bell.append(i)\n    count = 0\n    while len(bell) > 1:\n        count += 1\n        new_bell = []\n        for i in range(1, len(bell)):\n            new_bell.append(bell[i-1] + bell[i])\n        bell = new_bell\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_dp(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    from math import factorial as f\n    return f(2*n + 1)/f(n + 1)\n    \ndef binomial_coefficient(n, k):\n    '''\n    Write a function to calculate the value of Binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    else:\n        return factorial(n) / (factorial(n - k) * factorial(k))\n    \ndef regular_polygon_number(n):\n    '''\n    Write a function to calculate the value of regular polygon number.\n    '''\n    return n*(n+1)/2\n    \ndef y_number(n):\n    '''\n    Write a function to calculate the value of Y number.\n    '''\n    return factorial(n+1) / factorial(2*n+1)\n    \ndef factorial(n):\n    '''\n    Write a function to calculate the value of factorial.\n    '''\n    from math import factorial as f\n    return f(n)\n    \ndef simple_product(num_a, num_b):\n    '''\n    Write a function to calculate the value of simple product.\n    '''\n    return num_a * num_b\n    \ndef number_of_divisors(n):\n    '''\n    Write a function to calculate the value of number of divisors.\n    '''\n    import math\n    return math.factorial(n) / ((math.factorial(2) * math.factorial(n - 2)) + 1)\n    \ndef reverse_list(numbers_list):\n    '''\n    Write a function to reverse list of number.\n    '''\n    from operator import mul\n    return list(map(mul, numbers_list, reversed(numbers_list)))\n    \ndef max_value(num1, num2):\n    '''\n    Write a function to calculate the max value.\n    '''\n    return max(num1, num2)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function to calculate the sum of divisors of a number.\n    '''\n    import math\n    return math.factorial(n) / ((math.factorial(2) * math.factorial(n - 2)) + 1)\n    \ndef prime_factors(n):\n    '''\n    Write a function to calculate the prime factors of a number.\n    '''\n    from math import sqrt as sq\n    from functools import reduce\n    from operator import mul\n    if n == 1:\n        return set()\n    \n    prime_numbers = set([2])\n    for i in range(3, sq(n)+1, 2):\n        if n % i == 0:\n            prime_numbers.add(i)\n            while n % i == 0:\n                n //= i\n    if n > 2:\n        prime_numbers.add(n)\n    return prime_numbers\n    \ndef smallest_prime_factor(n):\n    '''\n    Write a function to calculate the smallest prime factor of a number.\n    '''\n    from math import sqrt as sq\n    from functools import reduce\n    from operator import mul\n    if n == 1:\n        return set()\n    \n    prime_numbers = set([2])\n    for i in range(3, sq(n)+1, 2):\n        if n % i == 0:\n            prime_numbers.add(i)\n    if n > 2:\n        prime_numbers.add(n)\n    return prime_numbers.pop()\n    \ndef largest_prime_factor(n):\n    '''\n    Write a function to calculate the largest prime factor of a number.\n    '''\n    from math import sqrt as sq\n    from functools import reduce\n    from operator import mul\n    if n == 1:\n        return set()\n    \n    prime_numbers = set([2])\n    for i in range(3, sq(n)+1, 2):\n        if n % i == 0:\n            prime_numbers.add(i)\n    if n > 2:\n        prime_numbers.add(n)\n    return prime_numbers.pop()\n    \ndef count_pattern(pattern, text):\n    '''\n    Write a function to count the number of patterns in a text.\n    '''\n    count = 0\n    for i in range(len(text) - len(pattern) + 1):\n        for j in range(len(pattern)):\n            if text[i + j]!= pattern[j]:\n                break\n            if j == len(pattern) - 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    #table = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    table = [0] * (n+1)\n    table[0] = 1\n    table[1] = 1\n    table[2] = 2\n    for i in range(3, n+1):\n        for j in range(i+1):\n            if j == 0 or j == i:\n                table[i] = 1\n                continue\n            table[i] = table[i] + table[i-j]\n    print(table)\n    return table[n]\n    \ndef fibonacci(n):\n    '''\n    Write a function to calculate the n-th fibonacci number.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a\n    \ndef fibonacci_list(n):\n    '''\n    Write a function to calculate the n-th fibonacci number.\n    '''\n    result = []\n    a, b = 0, 1\n    for i in range(n):\n        result.append(a)\n        a, b = b, a+b\n    return result\n    \ndef find_string_by_search(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    if search_str not in string:\n        return -1\n    else:\n        return string.find(search_str)\n        \ndef find_string_by_search_str_re(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        \n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v2(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v3(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v4(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v5(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v6(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v7(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v8(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v9(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n    \n    if search_str not in string:\n        return -1\n    else:\n        search_str_re = re.compile(search_str)\n        search_string_list = re.findall(search_str_re, string)\n        search_string_list = list(set(search_string_list))\n        \n        return search_string_list\n        \ndef find_string_by_search_str_re_new_v10(string, search_str):\n    '''\n    Write a function to find all occurrences of the search string in the given string.\n    '''\n    \n    #search_str = search_str.replace(\" \", \"\")\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n <= 0:\n        return 0\n        \n    n -= 1\n    \n    if n < 1:\n        return 1\n        \n    return bell_number(n - 1) + bell_number(n - 2)\n    \n    \ndef find_maximum_subsequence_length_rec(arr, n):\n    if n == 0:\n        return 0\n        \n    if n == 1:\n        return 1\n        \n    if n < 1:\n        return -1\n        \n    maximum = -1\n    \n    for i in range(n):\n        if (maximum == -1) or (maximum < find_maximum_subsequence_length_rec(arr, i)):\n            maximum = find_maximum_subsequence_length_rec(arr, i)\n            \n    return maximum + 1\n    \n    \ndef find_maximum_subsequence_length(arr, n):\n    maximum = -1\n    \n    for i in range(n):\n        if (maximum == -1) or (maximum < find_maximum_subsequence_length_rec(arr, i)):\n            maximum = find_maximum_subsequence_length_rec(arr, i)\n            \n    return maximum + 1\n    \n    \ndef longest_common_subsequence(s1, s2, m, n):\n    '''\n    Find the longest subsequence of s1 and s2 such that the subsequence\n    is comprised of common elements in both s1 and s2.\n    '''\n    \n    if (m == 0) or (n == 0):\n        return 0\n        \n    if (s1[m - 1] == s2[n - 1]):\n        return 1 + longest_common_subsequence(s1, s2, m - 1, n - 1)\n        \n    return max(longest_common_subsequence(s1, s2, m, n - 1),\n                longest_common_subsequence(s1, s2, m - 1, n))\n    \n    \ndef longest_common_subsequence_with_dp(s1, s2, m, n):\n    '''\n    Find the longest subsequence of s1 and s2 such that the subsequence\n    is comprised of common elements in both s1 and s2.\n    '''\n    \n    if (m == 0) or (n == 0):\n        return 0\n        \n    # The array to keep track of the current state of the dynamic programming table.\n    # The dp_table[i][j] array will keep track of the longest common subsequence ending in the\n    # ith row and jth column.\n    dp_table = [[0 for j in range(n + 1)] for i in range(m + 1)]\n    \n    # Initialize the table to start with 0.\n    for i in range(m + 1):\n        dp_table[i][0] = 0\n        \n    for j in range(n + 1):\n        dp_table[0][j] = 0\n        \n    # Fill in the table.\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            \n            # If the characters match, then the subsequence length is 1 + the value in the\n            # previous row and column.\n            if s1[i - 1] == s2[j - 1]:\n                dp_table[i][j] = dp_table[i - 1][j - 1] + 1\n                \n            # Otherwise, get the maximum of either the longest common subsequence ending in\n            # the previous row and column, or the previous row and the previous column.\n            else:\n                dp_table[i][j] = max(dp_table[i - 1][j], dp_table[i][j - 1])\n                \n    return dp_table[m][n]\n    \n    \ndef is_perfect_square(n):\n    if n <= 0:\n        return False\n        \n    i = int(math.sqrt(n))\n    \n    if i * i == n:\n        return True\n        \n    return False\n    \n    \ndef fizzbuzz(n):\n    '''\n    Write a function to print the numbers from 1 to n.\n    If the number is divisible by 3, print \"Fizz\" instead of the number.\n    If the number is divisible by 5, print \"Buzz\".\n    If the number is divisible by both 3 and 5, print \"FizzBuzz\".\n    Else, if the number is prime, print the word \"Prime\".\n    Else, print the word \"FizzBuzz\".\n    '''\n    \n    if n <= 0:\n        return None\n        \n    if is_perfect_square(n):\n        return str(n)\n        \n    for i in range(1, n + 1):\n        if (i % 3 == 0) and (i % 5 == 0):\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            if is_prime(i):\n                print('Prime')\n            else:\n                print('FizzBuzz')\n                \n                \ndef fizzbuzz_rec(n):\n    '''\n    Write a function to print the numbers from 1 to n.\n    If the number is divisible by 3, print \"Fizz\" instead of the number.\n    If the number is divisible by 5, print \"Buzz\".\n    If the number is divisible by both 3 and 5, print \"FizzBuzz\".\n    Else, if the number is prime, print the word \"Prime\".\n    Else, print the word \"FizzBuzz\".\n    '''\n    if n <= 0:\n        return None\n        \n    if is_perfect_square(n):\n        return str(n)\n        \n    if n == 1:\n        return 'Fizz'\n        \n    if is_prime(n):\n        return 'Prime'\n        \n    return 'FizzBuzz'\n        \n    \ndef fizzbuzz_modified(n):\n    '''\n    Modified version of fizzbuzz_rec, where the function only prints\n    the result if the number is prime, not if it is perfect square.\n    '''\n    if n <= 0:\n        return None\n        \n    if is_perfect_square(n):\n        return str(n)\n        \n    if n == 1:\n        return 'Fizz'\n        \n    if is_prime(n):\n        return 'Prime'\n        \n    return 'FizzBuzz'\n    \n    \ndef fizzbuzz_modified_rec(n):\n    '''\n    Modified version of fizzbuzz_rec, where the function only prints\n    the result if the number is prime, not if it is perfect square.\n    '''\n    if n <= 0:\n        return None\n        \n    if is_perfect_square(n):\n        return str(n)\n        \n    if n == 1:\n        return 'Fizz'\n        \n    if is_prime(n):\n        return 'Prime'\n        \n    return 'FizzBuzz'\n    \n    \ndef power(a, n):\n    '''\n    Find the value of a^n.\n    '''\n    \n    if n == 0:\n        return 1\n        \n    if n % 2 == 0:\n        return (power(a, n / 2) * power(a, n / 2))\n        \n    else:\n        return (a * power(a, n - 1))\n        \n    \ndef is_prime(n):\n    '''\n    Write a function to determine whether a number is prime.\n    '''\n    if n <= 1:\n        return False\n        \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n            \n    return True\n    \n    \ndef prime_factors(n):\n    '''\n    Find the prime factors of a number.\n    '''\n    if n <= 0:\n        return None\n        \n    prime_factors = []\n    \n    while n!= 1:\n        if is_prime(n):\n            prime_factors.append(n)\n            n = 1\n        else:\n            n = n / n\n    \n    return prime_factors\n    \n    \ndef prime_factors_rec(n):\n    '''\n    Modified version of prime_factors, where the function only prints\n    the result if the number is prime, not if it is prime factor.\n    '''\n    if n <= 0"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    \n    #if n = 0 then there are 0 ways\n    if n == 0:\n        return 0\n    \n    #base case:\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    \n    #increment the total number of ways for n >= 4\n    return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_helper(n, n, 1)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 3: return 0\n    if n == 3: return 1\n    a = [1, 1, 2]\n    for i in range(3, n):\n        a.append(sum(a[i-2:]))\n    return a[-1]"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #for i in range(len(A)-1):\n        #if A[i] > A[i+1]:\n            #return False\n    #return True\n    \n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #start writing your code here\n    for i in range(1, len(A)):\n        if A[i-1]>A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Monotonic means non-increasing or non-decreasing\n    return all(x<=y for x, y in zip(A, A[1:])) or all(x>=y for x, y in zip(A, A[1:])) \nprint(is_Monotonic([-1, 2, -3, -5]))\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    #Initialise the loop variable\n    i = 0\n    \n    #Checking for monotonicity\n    while i < (len(A) - 1):\n        if A[i] <= A[i+1]:\n            i += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = True\n    decreasing = True\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            increasing = False\n        if A[i] > A[i+1]:\n            decreasing = False\n    if decreasing:\n        return False\n    if increasing:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    n = len(A)\n    i = 0\n    while i < n-1:\n        if A[i] > A[i+1]:\n            return False\n        if A[i] < A[i+1]:\n            i += 1\n        else:\n            i += 2\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A == sorted(A) or A == sorted(A, reverse = True)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    i = 0\n    j = len(A) - 1\n    while i < j:\n        if A[i] < A[j]: \n            i += 1\n        elif A[i] > A[j]: \n            j -= 1\n        else: \n            i += 1\n            j -= 1\n    if i == j: \n        return True\n    else: \n        return False\n    \ndef get_count(A, n): \n    '''\n    Write a python function to count the number of even and odd numbers in the given array.\n    '''\n    odds = 0\n    evens = 0\n    for num in A: \n        if num % 2 == 0: \n            evens += 1\n        else: \n            odds += 1\n    return evens, odds\n    \ndef remove_Duplicates(A): \n    '''\n    Write a python function to remove the duplicate values from the given array.\n    '''\n    if len(A) < 2: \n        return A\n    i = 0\n    while i < len(A)-1: \n        if A[i] == A[i+1]: \n            A.pop(i)\n        else: \n            i += 1\n    return A\n    \ndef combine_the_words(A): \n    '''\n    Write a python function to combine two given words and return it as a single word.\n    '''\n    output = A[0]\n    for word in A[1:]: \n        output +='' + word\n    return output\n    \ndef is_palindrome(A): \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    if len(A) < 2: \n        return True\n    if A[0] == A[-1]: \n        return is_palindrome(A[1:-1])\n    else: \n        return False\n    \ndef find_min_element(A, n): \n    '''\n    Write a python function to find the minimum element in the given array.\n    '''\n    min_element = A[0]\n    for i in range(1,n): \n        if A[i] < min_element: \n            min_element = A[i]\n    return min_element\n    \ndef find_greatest_element(A, n): \n    '''\n    Write a python function to find the maximum element in the given array.\n    '''\n    max_element = A[0]\n    for i in range(1,n): \n        if A[i] > max_element: \n            max_element = A[i]\n    return max_element\n    \ndef find_second_maximum_element(A): \n    '''\n    Write a python function to find the second maximum element in the given array.\n    '''\n    if len(A) < 2: \n        return -1\n    else: \n        max1 = A[0]\n        max2 = A[0]\n        for i in range(1,len(A)): \n            if A[i] > max1: \n                max2 = max1\n                max1 = A[i]\n            elif A[i] > max2: \n                max2 = A[i]\n        if max2 == max1: \n            return -1\n        else: \n            return max2\n        \ndef find_maximum_of_two(A, n): \n    '''\n    Write a python function to find the maximum element in the given array.\n    '''\n    max1 = A[0]\n    max2 = A[0]\n    for i in range(1,n): \n        if A[i] > max1: \n            max2 = max1\n            max1 = A[i]\n        elif A[i] > max2: \n            max2 = A[i]\n    return max2\n    \ndef find_minimum_of_three(A, n): \n    '''\n    Write a python function to find the minimum element in the given array.\n    '''\n    min1 = A[0]\n    min2 = A[0]\n    min3 = A[0]\n    for i in range(1,n): \n        if A[i] < min1: \n            min2 = min1\n            min1 = A[i]\n        elif A[i] < min2: \n            min3 = min2\n            min2 = A[i]\n        elif A[i] < min3: \n            min3 = A[i]\n    return min1\n    \ndef find_minimum_of_three(A, n): \n    '''\n    Write a python function to find the minimum element in the given array.\n    '''\n    min1 = A[0]\n    min2 = A[0]\n    min3 = A[0]\n    for i in range(1,n): \n        if A[i] < min1: \n            min2 = min1\n            min1 = A[i]\n        elif A[i] < min2: \n            min3 = min2\n            min2 = A[i]\n        elif A[i] < min3: \n            min3 = A[i]\n    return min1\n    \ndef sum_of_n_natural_numbers(n): \n    '''\n    Write a python function to calculate the sum of n natural numbers.\n    '''\n    if n < 1: \n        return 0\n    sum = 0\n    for i in range(1,n+1): \n        sum += i\n    return sum\n    \ndef get_average_of_n_numbers(A, n): \n    '''\n    Write a python function to calculate the average of n natural numbers.\n    '''\n    total = 0\n    for i in range(n): \n        total += A[i]\n    return total/n\n    \ndef get_mode_of_n_numbers(A, n): \n    '''\n    Write a python function to calculate the mode of n natural numbers.\n    '''\n    if n < 1: \n        return -1\n    count = 0\n    max_count = 0\n    for i in range(n): \n        if A.count(A[i]) > max_count: \n            max_count = A.count(A[i])\n            count = 1\n        elif A.count(A[i]) == max_count: \n            count += 1\n    return A[max_count]\n    \ndef partition_the_array(A): \n    '''\n    Write a python function to partition the array into equal sized sub-arrays.\n    '''\n    if len(A) < 2: \n        return A\n    else: \n        A = sorted(A)\n        mid = len(A)//2\n        return A[:mid], A[mid:]\n    \ndef find_minimum_index(A): \n    '''\n    Write a python function to find the minimum element in the given array.\n    '''\n    min_index = 0\n    for i in range(len(A)): \n        if A[i] < A[min_index]: \n            min_index = i\n    return min_index\n    \ndef find_maximum_index(A): \n    '''\n    Write a python function to find the maximum element in the given array.\n    '''\n    max_index = 0\n    for i in range(len(A)): \n        if A[i] > A[max_index]: \n            max_index = i\n    return max_index\n    \ndef find_largest_index(A): \n    '''\n    Write a python function to find the largest element in the given array.\n    '''\n    largest_index = 0\n    for i in range(len(A)): \n        if A[i] > A[largest_index]: \n            largest_index = i\n    return largest_index\n    \ndef sum_of_n_natural_numbers_using_while_loop(n): \n    '''\n    Write a python function to calculate the sum of n natural numbers using while loop.\n    '''\n    total = 0\n    i = 1\n    while i <= n: \n        total += i\n        i += 1\n    return total\n    \ndef sum"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)-1):\n        if(A[i]>A[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l = list(l)\n    for i in range(len(l)-1):\n        l[i] = tuple(l[i])\n    for i in range(len(s)-1):\n        s[i] = tuple(s[i])\n    s.sort()\n    l.sort()\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    m = len(s)\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i : i + m] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for x in range(len(l)):\n        if l[x] == s[0]:\n            for y in range(len(s)):\n                if l[x+y]!= s[y]:\n                    return False\n    return True\n    \ndef in_bisect(l,s,lo=0,hi=None):\n    '''\n    Write a function that takes a list and a sublist, and returns whether the\n    sublist is in the list or not.\n    '''\n    if lo == hi:\n        return True\n    if hi == None:\n        hi = len(l)\n    if lo > hi:\n        return False\n    \n    mid = lo + (hi - lo) // 2\n    if l[mid] == s[0]:\n        return in_bisect(l,s,lo,mid)\n    else:\n        return in_bisect(l,s,mid+1,hi)\n    \ndef common(l1,l2):\n    '''\n    Write a function that takes two lists and returns the common elements\n    between them.\n    '''\n    result = []\n    for x in l1:\n        if x in l2 and not x in result:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s==[]:\n        return True\n    if (l==[] and s!=[]):\n        return False\n    if (l!=[] and s==[]):\n        return False\n    if (l[0]==s[0]):\n        return is_sublist(l[1:],s[1:])\n    else:\n        return is_sublist(l,s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(l)):\n        if (s == l[i:i+len(s)]):\n            return True\n    return False\n    "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    while i < len(s):\n        if l[i]!= s[i]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s) and s == l[:len(s)]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i])!=len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    found = False\n    for i in range(length):\n        if length!= len(Input[i]):\n            found = True\n            break\n    return found\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for each in Input:\n        if len(each)!= len(Input[0]):\n            return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for each in Input:\n        if len(each)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    input_data = Input\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        dict_map = {}\n        lst = []\n        for i in range(len(Input)):\n            lst.append(Input[i])\n        for i in range(len(Input)):\n            if tuple(lst[i]) in dict_map:\n                dict_map[tuple(lst[i])] += 1\n            else:\n                dict_map[tuple(lst[i])] = 1\n        if len(Input) == len(dict_map):\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef find_smallest(Input):\n    '''\n    Write a function to find the smallest element in the given list.\n    '''\n    try:\n        min_num = min(Input)\n        return min_num\n    except:\n        return False\ndef find_smallest_list(Input):\n    '''\n    Write a function to find the smallest element in the given list.\n    '''\n    try:\n        min_num = min(Input)\n        return min_num\n    except:\n        return False\ndef find_largest(Input):\n    '''\n    Write a function to find the largest element in the given list.\n    '''\n    try:\n        max_num = max(Input)\n        return max_num\n    except:\n        return False\ndef find_largest_list(Input):\n    '''\n    Write a function to find the largest element in the given list.\n    '''\n    try:\n        max_num = max(Input)\n        return max_num\n    except:\n        return False\ndef find_count_smallest(Input):\n    '''\n    Write a function to find the count of the smallest elements in the given list.\n    '''\n    try:\n        min_num = min(Input)\n        return Input.count(min_num)\n    except:\n        return False\ndef find_count_largest(Input):\n    '''\n    Write a function to find the count of the largest elements in the given list.\n    '''\n    try:\n        max_num = max(Input)\n        return Input.count(max_num)\n    except:\n        return False\ndef find_count_numbers(Input):\n    '''\n    Write a function to find the count of the occurrences of numbers in the given list.\n    '''\n    try:\n        num_lst = []\n        for i in range(len(Input)):\n            num = Input[i]\n            if not num in num_lst:\n                num_lst.append(num)\n        return len(num_lst)\n    except:\n        return False\ndef find_count_even(Input):\n    '''\n    Write a function to find the count of even numbers in the given list.\n    '''\n    try:\n        count = 0\n        for i in range(len(Input)):\n            if Input[i] % 2 == 0:\n                count += 1\n        return count\n    except:\n        return False\ndef find_count_odd(Input):\n    '''\n    Write a function to find the count of odd numbers in the given list.\n    '''\n    try:\n        count = 0\n        for i in range(len(Input)):\n            if Input[i] % 2!= 0:\n                count += 1\n        return count\n    except:\n        return False\ndef find_sum(Input):\n    '''\n    Write a function to find the sum of the given list.\n    '''\n    try:\n        sum = 0\n        for i in range(len(Input)):\n            sum += Input[i]\n        return sum\n    except:\n        return False\ndef find_sum_list(Input):\n    '''\n    Write a function to find the sum of the given list.\n    '''\n    try:\n        sum = 0\n        for i in range(len(Input)):\n            sum += Input[i]\n        return sum\n    except:\n        return False\ndef find_product(Input):\n    '''\n    Write a function to find the product of the given list.\n    '''\n    try:\n        prod = 1\n        for i in range(len(Input)):\n            prod *= Input[i]\n        return prod\n    except:\n        return False\ndef find_product_list(Input):\n    '''\n    Write a function to find the product of the given list.\n    '''\n    try:\n        prod = 1\n        for i in range(len(Input)):\n            prod *= Input[i]\n        return prod\n    except:\n        return False\ndef find_average(Input):\n    '''\n    Write a function to find the average of the given list.\n    '''\n    try:\n        avg = sum(Input) / len(Input)\n        return avg\n    except:\n        return False\ndef find_average_list(Input):\n    '''\n    Write a function to find the average of the given list.\n    '''\n    try:\n        avg = sum(Input) / len(Input)\n        return avg\n    except:\n        return False\ndef find_median(Input):\n    '''\n    Write a function to find the median of the given list.\n    '''\n    try:\n        count = 0\n        for i in range(len(Input)):\n            count += Input[i]\n        if count % 2 == 1:\n            temp = count//2 + 1\n            mid = 0\n            while temp >= 1:\n                mid += Input[temp-1]\n                temp -= 1\n            return mid\n        elif count % 2 == 0:\n            temp = count//2\n            mid = 0\n            while temp >= 1:\n                mid += Input[temp-1]\n                temp -= 1\n            return mid / 2\n    except:\n        return False\ndef find_median_list(Input):\n    '''\n    Write a function to find the median of the given list.\n    '''\n    try:\n        count = 0\n        for i in range(len(Input)):\n            count += Input[i]\n        if count % 2 == 1:\n            temp = count//2 + 1\n            mid = 0\n            while temp >= 1:\n                mid += Input[temp-1]\n                temp -= 1\n            return mid\n        elif count % 2 == 0:\n            temp = count//2\n            mid = 0\n            while temp >= 1:\n                mid += Input[temp-1]\n                temp -= 1\n            return mid / 2\n    except:\n        return False\ndef find_standard_deviation(Input):\n    '''\n    Write a function to find the standard deviation of the given list.\n    '''\n    try:\n        sigma = 0\n        avg = sum(Input) / len(Input)\n        for i in range(len(Input)):\n            sigma += (Input[i] - avg)**2\n        return (sigma / len(Input))**0.5\n    except:\n        return False\ndef find_standard_deviation_list(Input):\n    '''\n    Write a function to find the standard deviation of the given list.\n    '''\n    try:\n        sigma = 0\n        avg = sum(Input) / len(Input)\n        for i in range(len(Input)):\n            sigma += (Input[i] - avg)**2\n        return (sigma / len(Input))**0.5\n    except:\n        return False\ndef find_mode(Input):\n    '''\n    Write a function to find the mode of the given list.\n    '''\n    try:\n        count_dict = {}\n        for i in range(len(Input)):\n            if not Input[i] in count_dict.keys():\n                count_dict[Input[i]] = 1\n            else:\n                count_dict[Input[i]] += 1\n        max_count = 0\n        for i in count_dict.keys():\n            if count_dict[i] > max_count:\n                max_count = count_dict[i]\n        mode = 0\n        for i in range(len(Input)):\n            if Input[i] == max_count:\n                mode = Input[i]\n        return mode\n    except:\n        return False\ndef find_mode_list(Input):\n    '''\n    Write a function to find the mode of the given list.\n    '''\n    try:\n        count_dict = {}\n        for i in range"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    a = []\n    for i in range(len(Input)):\n        a.append(Input[i][0])\n    if len(a)!= len(set(a)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1,len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    import pdb; pdb.set_trace()\n    try:\n        Input = Input.strip().split()\n        if len(Input)<2:\n            raise ValueError\n        Input = tuple(map(int, Input))\n        for i in range(len(Input)-1):\n            if Input[i] == Input[i+1]:\n                continue\n            else:\n                return False\n        return True\n    except ValueError:\n        print('Invalid Input! Please enter valid input.')\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(i) == len(Input[0]) for i in Input)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # algorithm\n    for i in range(len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            j -= 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == None or len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Put your code here.\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[j] < nums[i]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not isinstance(nums,list):\n        return\n    if len(nums) == 0:\n        return\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    # for i in range(len(nums)-1):\n    for i in range(len(nums)-1):\n        j=i+1\n        if nums[i] > nums[j]:\n            temp=nums[j]\n            nums[j]=nums[i]\n            nums[i]=temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        for i in range(n - gap):\n            for j in range(i + gap, n):\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    k = 1\n    while k <= len(nums):\n        print(nums)\n        for i in range(len(nums)-k+1):\n            print(nums[i:i+k])\n            if nums[i] > nums[i+k-1]:\n                temp = nums[i]\n                nums[i] = nums[i+k-1]\n                nums[i+k-1] = temp\n                \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1\n    size = len(nums)\n    gap = size\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(a, b):\n        return b, a\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n ** 0.5\n    if a == int(a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n=int(n)\n    if n<0:\n        return False\n    else:\n        for i in range(1,n):\n            if n%i==0:\n                j=n//i\n                if j==i and i!=j:\n                    return True\n                else:\n                    return False\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x*x+y*y==n-x:\n                print('Yes')\n                break\n            if x*x+y*y==n:\n                print('Yes')\n                break\n            if x*x+y*y==y:\n                print('Yes')\n                break\n    else:\n        print('No')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(n ** 0.5)\n    return x ** 2 - n == 0 or x ** 2 + x ** 2 == n\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def square_Num(n):\n        a=0\n        while n>0:\n            a=a+1\n            n=n-2\n        return a\n    def dif_Square(n): \n        l=list()\n        for i in range(1,n+1):\n            l.append(i)\n        l2=list()\n        for i in range(0,len(l)-1):\n            l2.append(l[i]-l[i+1])\n        l3=list()\n        for i in range(0,len(l2)):\n            if l2[i]>0:\n                l3.append(l2[i])\n            else:\n                l3.append(abs(l2[i]))\n        s=set(l3)\n        return s\n    print(dif_Square(n))"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n%2 == 0:\n        return 0\n    if n == 2:\n        return 1\n    a = 2\n    while(a*a <= n):\n        b = n-a*a\n        if b == 0:\n            return 1\n        if b%2 == 0:\n            return 0\n        a = a+1\n    return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(n)\n    if (n < 1):\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<=0:\n        print(\"The number must be positive.\")\n        return\n    i=1\n    while(n-i*i>0):\n        if (n-i*i == 0):\n            print(\"Yes, the given number can be represented by\", i)\n            return\n        if (n-i*i < 0):\n            break\n        i+=1\n    if (n-i*i!= 0):\n        print(\"No, the given number cannot be represented by\", i)\n        return\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n == 1 or n == 4):\n        return True\n    if(n%4!=0 or n%2!=0):\n        return False\n    a,b = n//2,n//4\n    return a*a==b and b*b==n\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n+1):\n        if n-i*i in range(n):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = to_dict(colors)\n    if len(colors) == len(patterns):\n        for i in range(len(colors)):\n            if not isinstance(colors[i], str):\n                if not colors[i] in patterns[i]:\n                    return False\n            else:\n                if not colors[i] == patterns[i]:\n                    return False\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    n = len(colors)\n    \n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) < 1:\n        return False\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    for color in patterns:\n        if color not in colors:\n            return False\n    \n    if len(colors) == len(patterns):\n        for i in range(len(colors)):\n            if colors[i]!= patterns[i]:\n                return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        p = patterns[i]\n        if not(is_sorted(colors, p)):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns) and len(colors)!= 0:\n        count = 0\n        for i in range(0, len(colors)):\n            if patterns[i] == colors[i]:\n                count += 1\n        if count == len(colors):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    n = len(colors)\n    while i < n:\n        if i >= len(patterns):\n            return False\n        if len(patterns[i]) == 1:\n            i += 1\n            continue\n        if colors[i] == patterns[i][0]:\n            pattern = patterns[i]\n            while i < n and pattern!= []:\n                if colors[i] == pattern[0]:\n                    pattern = pattern[1:]\n                    i += 1\n                    continue\n                else:\n                    return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    i = 0\n    j = 0\n    while i < n and j < len(patterns):\n        if patterns[j] == 'C':\n            if colors[i]!= 'R':\n                return False\n            i += 1\n        elif patterns[j] == 'R':\n            if colors[i]!= 'G':\n                return False\n            i += 1\n        j += 1\n    return i == n\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def check(r,c,patterns):\n        for i in range(len(patterns)):\n            if (patterns[i] == '1'):\n                if(r==0):\n                    r+=1\n                    if(c==0):\n                        c+=1\n                elif(r==0):\n                    r+=1\n                    c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==0):\n                        c+=1\n                elif(r==2):\n                    r-=1\n                    c-=1\n            elif (patterns[i] == '2'):\n                if(r==0):\n                    r+=1\n                    if(c==2):\n                        c-=1\n                elif(r==0):\n                    r+=1\n                    c+=1\n                elif(r==1):\n                    r-=1\n                    if(c==2):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    c+=1\n            elif (patterns[i] == '3'):\n                if(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == '4'):\n                if(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == '5'):\n                if(r==1):\n                    r-=1\n                    if(c==0):\n                        c+=1\n                elif(r==2):\n                    r-=1\n                    if(c==0):\n                        c+=1\n                elif(r==0):\n                    r+=1\n                    if(c==0):\n                        c+=1\n            elif (patterns[i] == '6'):\n                if(r==0):\n                    r+=1\n                    if(c==0):\n                        c+=1\n                elif(r==1):\n                    r-=1\n                    if(c==0):\n                        c+=1\n                elif(r==2):\n                    r-=1\n                    if(c==0):\n                        c+=1\n            elif (patterns[i] == '7'):\n                if(r==0):\n                    r+=1\n                    if(c==2):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==2):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==2):\n                        c-=1\n            elif (patterns[i] == '8'):\n                if(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == '9'):\n                if(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == 'a'):\n                if(r==0):\n                    r+=1\n                    if(c==2):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==2):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==2):\n                        c-=1\n            elif (patterns[i] == 'b'):\n                if(r==2):\n                    r-=1\n                    if(c==2):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==2):\n                        c-=1\n                elif(r==0):\n                    r+=1\n                    if(c==2):\n                        c-=1\n            elif (patterns[i] == 'c'):\n                if(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == 'd'):\n                if(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == 'e'):\n                if(r==0):\n                    r+=1\n                    if(c==2):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==2):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==2):\n                        c-=1\n            elif (patterns[i] == 'f'):\n                if(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == 'g'):\n                if(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == 'h'):\n                if(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == 'i'):\n                if(r==0):\n                    r+=1\n                    if(c==2):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==2):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==2):\n                        c-=1\n            elif (patterns[i] == 'j'):\n                if(r==0):\n                    r+=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n            elif (patterns[i] == 'k'):\n                if(r==2):\n                    r-=1\n                    if(c==1):\n                        c-=1\n                elif(r==1):\n                    r-=1\n                    if(c==1):\n                        c-"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # list comprehension\n    return [(x,y) for x,y in test_list if sum(x)%K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    n = len(test_list)\n    return tuple(tuple(t) for t in itertools.combinations(test_list, K))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K == 2:\n        return [(t, t) for t in test_list]\n    res = []\n    for i in range(len(test_list)):\n        left_list = test_list[:i] + test_list[i+1:]\n        for j in range(len(left_list)):\n            if not ((left_list[j][0] % K) or (left_list[j][1] % K)):\n                res += [(left_list[j][0] * K, left_list[j][1] * K)]\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            t.append(i)\n    return t\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Declare a set for storing the elements\n    set_ = set()\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [x for x in test_list if all(x[i] % K == 0 for i in range(len(x))) ]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(i % k == 0 for k in K):\n            result.append(tuple(i))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a, b) for a in test_list for b in test_list if a % b == 0 and a!= b]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a,b,c) for a in test_list for b in test_list for c in test_list if a%K == b%K == c%K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # Solution using filter\n    filter_list = list(filter(lambda x: all(map(lambda y: x[0]%y==0, x[1])), test_list))\n    # filter_list = list(map(lambda x: filter(lambda y: x[0]%y==0, x[1]), test_list))\n    \n    # Solution using generator\n    # def generate_tuples(test_list, K):\n    #     for i in test_list:\n    #         for j in i[1]:\n    #             if j % K == 0:\n    #                 yield i, j\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11==0)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime.\n    '''\n    for i in range(2, n//2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Palindrome(s): \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_Happy(n): \n    '''\n    Write a python function to find whether a number is Happy or Not.\n    '''\n    if n == 1:\n        return True\n    \n    while n!= 1:\n        if is_Prime(n):\n            n = sum(int(i)**2 for i in str(n))\n        else:\n            return False\n    return True\n    \ndef is_Reverse(s): \n    '''\n    Write a python function to check whether a string is reverse of another string.\n    '''\n    return s == s[::-1]\n    \ndef is_Palindrome2(s): \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    return s == s[::-1]\n    \ndef is_Reverse2(s): \n    '''\n    Write a python function to check whether a string is reverse of another string.\n    '''\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    return s == s[::-1]\n    \ndef is_Palindrome3(s): \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_Reverse3(s): \n    '''\n    Write a python function to check whether a string is reverse of another string.\n    '''\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    return s == s[::-1]\n    \ndef get_factors(n): \n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return True if n % 11 == 0 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    #write your python function here\n    return n % 11 == 0\n    "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print('{0} is divisible by 11'.format(n))\n    else:\n        print('{0} is not divisible by 11'.format(n))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n    \ndef word_len_count(s):\n    '''\n    Write a python function to check whether the word in the given string has even or odd numbers of letters.\n    '''\n    count=0\n    for i in s:\n        if i.isalpha():\n            count+=1\n    if count%2==0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print(\"Given string is\", s)\n    if len(s) % 2 == 0:\n        print(\"The word is length of even length\")\n    else:\n        print(\"The word is length of odd length\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.replace(' ','').lower()\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_len = len(s)\n    return(word_len)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"{0} length of word is even\".format(s))\n    else:\n        print(\"{0} length of word is odd\".format(s))\n    \nword_len(\"python\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s1 = len(s)\n    if s1%2!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n=int(n)\n    if n==1:\n        return 1\n    else:\n        return int((n*(n-1))/2)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    n = int(n)\n    for i in range(n):\n        sum += 4 * i + 1\n    return sum\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    return (tetrahedral_number(n - 1) + 2)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # n = 4\n    if n == 1:\n        return 4\n    if n == 2:\n        return 6\n    if n == 3:\n        return 8\n    \n    a, b, c, d = 4, 6, 8, 10\n    for i in range(4, n+1):\n        if a*a+b*b == c*c+d*d:\n            return a*b*c*d\n            break\n        a = a+1\n        b = b+1\n        c = c+1\n        d = d+1\n    return -1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 3\n    if n == 2:\n        return 12\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n-1) * (n-2) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n += 1\n    return sum(1/j for j in range(n, n-n%2, -2))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\nprint(volume_sphere(5))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4.0/3.0)*math.pi*(r**3)\n    return volume\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4.0/3.0)*math.pi*(r**2)\n    return surface_area\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = (2*math.pi*r*h)+(2*math.pi*r)\n    return surface_area\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    triangle_area = (a*b*c)/2.0\n    return triangle_area\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    circle_area = math.pi*(r**2)\n    return circle_area\ndef is_in_circle(r,x,y,z):\n    '''\n    Write a function to check whether a point is inside a circle or not.\n    '''\n    if (x**2)+(y**2)+(z**2) < (r**2):\n        return True\n    else:\n        return False\ndef is_in_sphere(r,x,y,z):\n    '''\n    Write a function to check whether a point is inside a sphere or not.\n    '''\n    if ((x**2)+(y**2)+(z**2)) < (r**2):\n        return True\n    else:\n        return False\ndef is_in_sphere(r,x,y,z):\n    '''\n    Write a function to check whether a point is inside a sphere or not.\n    '''\n    if ((x**2)+(y**2)+(z**2)) < (r**2):\n        return True\n    else:\n        return False\ndef is_in_cylinder(r,x,y,z):\n    '''\n    Write a function to check whether a point is inside a cylinder or not.\n    '''\n    if ((x**2)+(y**2)+(z**2)) < (r**2):\n        return True\n    else:\n        return False\ndef is_in_triangle(a,b,c,x,y,z):\n    '''\n    Write a function to check whether a point is inside a triangle or not.\n    '''\n    x1 = math.sqrt(((a**2)+(x**2)));\n    y1 = math.sqrt(((b**2)+(y**2)));\n    z1 = math.sqrt(((c**2)+(z**2)));\n    if x1 + y1 + z1 == a + b + c:\n        return True\n    else:\n        return False\ndef volume_of_hollow_cylinder(r,h):\n    '''\n    Write a function to find the volume of a hollow cylinder.\n    '''\n    volume = ((2*math.pi)*r*h)/3.0\n    return volume\ndef volume_of_hollow_sphere(r,h):\n    '''\n    Write a function to find the volume of a hollow sphere.\n    '''\n    volume = ((4*math.pi*r**3)/3.0)+(2*math.pi*r*h)\n    return volume\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4*math.pi*(r**3)\n    return volume\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume\ndef area_of_hollow_cylinder(r,h):\n    '''\n    Write a function to find the area of a hollow cylinder.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef area_of_hollow_sphere(r,h):\n    '''\n    Write a function to find the area of a hollow sphere.\n    '''\n    area = 2*math.pi*(r**2)-2*math.pi*r*h\n    return area\ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = (4*math.pi*r**2)\n    return area\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef surface_area_of_hollow_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a hollow cylinder.\n    '''\n    surface_area = (4*math.pi*(r**2))+(2*math.pi*r*h)\n    return surface_area\ndef surface_area_of_hollow_sphere(r,h):\n    '''\n    Write a function to find the surface area of a hollow sphere.\n    '''\n    surface_area = (4*math.pi*(r**2)-4*math.pi*r*h)\n    return surface_area\ndef surface_area_of_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4*math.pi*(r**2))\n    return surface_area\ndef surface_area_of_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*(r**2)-2*math.pi*r*h\n    return surface_area\ndef is_in_hollow_cylinder(r,x,y,z):\n    '''\n    Write a function to check whether a point is inside a hollow cylinder or not.\n    '''\n    x1 = math.sqrt(((2*x**2)+(2*y**2)+(2*z**2)));\n    if x1 + r <= math.sqrt(((x**2)+(y**2)+(z**2))):\n        return True\n    else:\n        return False\ndef is_in_hollow_sphere(r,x,y,z):\n    '''\n    Write a function to check whether a point is inside a hollow sphere or not.\n    '''\n    if ((x**2)+(y**2)+(z**2)) <= (r**2):\n        return True\n    else:\n        return False\ndef is_in_sphere(r,x,y,z):\n    '''\n    Write a function to check whether a point is inside a sphere or not.\n    '''\n    if ((x**2)+(y**2)+(z**2)) < (r**2):\n        return True\n    else:\n        return False\ndef is_in_cylinder(r,x,y,z):\n    '''\n    Write a function to check whether a point is inside a cylinder or not.\n    '''\n    if ((x**2)+(y**2)+(z**2)) <= (r**2):\n        return True\n    else:\n        return False\ndef is_in_triangle(a,b,c,x,y,z):\n    '''\n    Write a function to check whether a point is inside a triangle or not.\n    '''\n    x1 = math.sqrt(((a**2)+(x**2)));\n    y1 = math.sqrt(((b**2)+(y**2)));\n    z1 = math.sqrt(((c**2)+(z**2)));\n    if (x1 + y1 + z1) == a + b + c:\n        return True\n    else:\n        return False\ndef volume_of_hollow_cylinder(r,h):\n    '''\n    Write a function to find the volume of a hollow cylinder.\n    '''\n    volume = ((2*math.pi)*r*h)/3.0\n    return volume\ndef volume"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4.0/3.0) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    print(v)\ndef volume_cube(l,h):\n    '''\n    Write a function that takes the length and height of a cube.\n    Return the volume.\n    '''\n    v = l*h*6\n    print(v)\ndef area_triangle(b,h):\n    '''\n    Write a function that takes the base and height of a triangle.\n    Return the area.\n    '''\n    area = (1/2)*b*h\n    print(area)\ndef area_parallelogram(a,b):\n    '''\n    Write a function that takes the lengths of the two sides of a parallelogram.\n    Return the area.\n    '''\n    area = a*b\n    print(area)\ndef area_hexagon(l,h):\n    '''\n    Write a function that takes the length and height of a hexagon.\n    Return the area.\n    '''\n    area = (3*math.sqrt(3)/2)*l*h\n    print(area)\ndef volume_pyramid(h,l,d):\n    '''\n    Write a function that takes the height, the length, and the depth of a pyramid.\n    Return the volume.\n    '''\n    v = (1/3)*h*l*d\n    print(v)\ndef volume_cone(r,h):\n    '''\n    Write a function that takes the radius and height of a cone.\n    Return the volume.\n    '''\n    v = (math.pi*r**2)*h\n    print(v)\ndef volume_pyramid(h,l,d):\n    '''\n    Write a function that takes the height, the length, and the depth of a pyramid.\n    Return the volume.\n    '''\n    v = (1/3)*h*l*d\n    print(v)\ndef surface_area_triangle(b,h):\n    '''\n    Write a function that takes the base and height of a triangle.\n    Return the surface area.\n    '''\n    area = (b*h)/2\n    print(area)\ndef surface_area_parallelogram(a,b):\n    '''\n    Write a function that takes the lengths of the two sides of a parallelogram.\n    Return the surface area.\n    '''\n    area = (1/2)*a*b\n    print(area)\ndef surface_area_hexagon(l,h):\n    '''\n    Write a function that takes the length and height of a hexagon.\n    Return the surface area.\n    '''\n    area = (3*math.sqrt(3)/2)*l*h\n    print(area)\ndef volume_pyramid(h,l,d):\n    '''\n    Write a function that takes the height, the length, and the depth of a pyramid.\n    Return the volume.\n    '''\n    v = (1/3)*h*l*d\n    print(v)\ndef volume_cone(r,h):\n    '''\n    Write a function that takes the radius and height of a cone.\n    Return the volume.\n    '''\n    v = (math.pi*r**2)*h\n    print(v)\ndef volume_pyramid(h,l,d):\n    '''\n    Write a function that takes the height, the length, and the depth of a pyramid.\n    Return the volume.\n    '''\n    v = (1/3)*h*l*d\n    print(v)\ndef surface_area_triangle(b,h):\n    '''\n    Write a function that takes the base and height of a triangle.\n    Return the surface area.\n    '''\n    area = (b*h)/2\n    print(area)\ndef surface_area_parallelogram(a,b):\n    '''\n    Write a function that takes the lengths of the two sides of a parallelogram.\n    Return the surface area.\n    '''\n    area = (1/2)*a*b\n    print(area)\ndef surface_area_hexagon(l,h):\n    '''\n    Write a function that takes the length and height of a hexagon.\n    Return the surface area.\n    '''\n    area = (3*math.sqrt(3)/2)*l*h\n    print(area)\ndef volume_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere.\n    Return the volume.\n    '''\n    v = (4/3)*math.pi*r**3\n    print(v)\ndef volume_cube(l,h):\n    '''\n    Write a function that takes the length and height of a cube.\n    Return the volume.\n    '''\n    v = l*h*6\n    print(v)\ndef area_triangle(b,h):\n    '''\n    Write a function that takes the base and height of a triangle.\n    Return the area.\n    '''\n    area = (1/2)*b*h\n    print(area)\ndef area_parallelogram(a,b):\n    '''\n    Write a function that takes the lengths of the two sides of a parallelogram.\n    Return the area.\n    '''\n    area = (1/2)*a*b\n    print(area)\ndef area_hexagon(l,h):\n    '''\n    Write a function that takes the length and height of a hexagon.\n    Return the area.\n    '''\n    area = (3*math.sqrt(3)/2)*l*h\n    print(area)\ndef volume_pyramid(h,l,d):\n    '''\n    Write a function that takes the height, the length, and the depth of a pyramid.\n    Return the volume.\n    '''\n    v = (1/3)*h*l*d\n    print(v)\ndef volume_cone(r,h):\n    '''\n    Write a function that takes the radius and height of a cone.\n    Return the volume.\n    '''\n    v = (math.pi*r**2)*h\n    print(v)\ndef volume_pyramid(h,l,d):\n    '''\n    Write a function that takes the height, the length, and the depth of a pyramid.\n    Return the volume.\n    '''\n    v = (1/3)*h*l*d\n    print(v)\ndef surface_area_triangle(b,h):\n    '''\n    Write a function that takes the base and height of a triangle.\n    Return the surface area.\n    '''\n    area = (b*h)/2\n    print(area)\ndef surface_area_parallelogram(a,b):\n    '''\n    Write a function that takes the lengths of the two sides of a parallelogram.\n    Return the surface area.\n    '''\n    area = (1/2)*a*b\n    print(area)\ndef surface_area_hexagon(l,h):\n    '''\n    Write a function that takes the length and height of a hexagon.\n    Return the surface area.\n    '''\n    area = (3*math.sqrt(3)/2)*l*h\n    print(area)\ndef volume_sphere(r):\n    '''\n    Write a function that takes the radius of a sphere.\n    Return the volume.\n    '''\n    v = (4/3)*math.pi*r**3\n    print(v)\ndef volume_cube(l,h):\n    '''\n    Write a function that takes the length and height of a cube.\n    Return the volume.\n    '''\n    v = l*h*6\n    print(v)\ndef area_triangle(b,h):\n    '''\n    Write a function that takes the base and height of a triangle.\n    Return the area.\n    '''\n    area = (1/2)*b*h\n    print(area)\ndef area_parallelogram(a,b):\n    '''\n    Write a function that takes the lengths of the two sides of a parallelogram.\n    Return the area.\n    '''\n    area = (1/2)*a*b\n    print(area)\ndef area_hexagon(l,h):\n    '''\n    Write a function that takes the length and height of a hexagon.\n    Return the area.\n    '''\n    area = (3*math.sqrt(3)/2)*l*h\n    print(are"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return pi * (4/3) * (r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum([ord(ch) for ch in strr]) % 26)\n        \ndef get_Min_max(strr, char_idx):\n    '''\n    Write a python function to find the minimum and maximum values of the given string.\n    '''\n    min_val = max_val = strr[0]\n    for i in range(len(strr)):\n        if min_val > strr[i]:\n            min_val = strr[i]\n        elif max_val < strr[i]:\n            max_val = strr[i]\n    return min_val, max_val\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in range(len(strr)):\n        result += ord(strr[i])\n    return result % 26\n    \nif __name__ == '__main__':\n    string = input().strip()\n    result = get_Char(string)\n    print(chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(i) for i in strr]) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = len(strr)\n    s = 0\n    for i in range(n):\n        s = s + ord(strr[i])\n    return s % 26\n        \n        \ndef is_unique_string(s):\n    '''\n    Write a python function to check if a string is unique or not\n    '''\n    n = len(s)\n    if n==0:\n        return False\n    else:\n        return len(set(s))==n\n        \n    \ndef string_compression(strr):\n    '''\n    Write a python function to check if the string is palindrome or not\n    '''\n    n = len(strr)\n    if n==0:\n        return strr\n    else:\n        s = ''\n        if n==1:\n            return strr\n        else:\n            for i in range(n):\n                s += strr[i]\n                if i<n-1 and s[i]==s[i+1]:\n                    s = s[:i+1]+s[i+2:]\n                    n-=1\n            return s\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    a = ord(strr)\n    result = a + a\n    \n    return result % 26\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s=strr\n    l=len(s)\n    s=list(s)\n    for i in range(l):\n        s[i]=chr(ord(s[i])+i)\n    a=s\n    for i in range(l):\n        a[i]=ord(a[i])\n    for i in range(l):\n        if a[i]==97:\n            a[i]=122\n        if a[i]==98:\n            a[i]=97\n    a=chr(a[0])\n    for i in range(l-1):\n        a=a+chr(a[i])\n    return a\n    \n    \n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s=strr\n    l=len(s)\n    s=list(s)\n    for i in range(l):\n        s[i]=chr(ord(s[i])+i)\n    a=s\n    for i in range(l):\n        a[i]=ord(a[i])\n    for i in range(l):\n        if a[i]==97:\n            a[i]=122\n        if a[i]==98:\n            a[i]=97\n    a=chr(a[0])\n    for i in range(l-1):\n        a=a+chr(a[i])\n    return a\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #print(ord(strr[0]))\n    return (ord(strr[0])+sum(ord(c) for c in strr))%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = (res+ord(i)) % 26\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    lst = []\n    for i in strr:\n        lst.append(ord(i))\n    return (sum(lst) % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # return ord(chr(sum([ord(c) for c in strr])))%26\n    return ord(chr(sum(ord(i) for i in strr)))%26\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = []\n    count = 1\n    while True:\n        seq.append(count)\n        count += 1\n        if count > n:\n            break\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    sequence = list(range(1,n+1))\n    for i in range(1,n):\n        if i%2 == 0:\n            sequence[i] = sequence[i] * 3\n            sequence[i] = sequence[i] // 2\n        else:\n            sequence[i] = sequence[i] * 2\n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    n = int(n)\n    if n <= 1:\n        return 1\n    else:\n        return (sequence(n-1) + sequence(n-2))%10\n    \ndef prime_factorization(n):\n    '''\n    Write a function to find the prime factorization of a given number.\n    '''\n    \n    primes = []\n    while n!= 1:\n        if n%2 == 0:\n            n = n/2\n            primes.append(2)\n        else:\n            for i in range(3,n+1):\n                if n%i == 0:\n                    while n%i == 0:\n                        n = n/i\n                        primes.append(i)\n    return primes\n    \ndef is_prime(n):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    \n    if n == 1 or n == 0:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n%i == 0:\n            return False\n        i += 2\n    return True\n    \ndef prime_factors(n):\n    '''\n    Write a function to find the prime factors of a given number.\n    '''\n    \n    primes = []\n    while n!= 1:\n        if n%2 == 0:\n            n = n/2\n            primes.append(2)\n        else:\n            for i in range(3,int(sqrt(n))+1):\n                if n%i == 0:\n                    while n%i == 0:\n                        n = n/i\n                        primes.append(i)\n    return primes\n    \ndef longest_common_subsequence(X,Y):\n    '''\n    Write a function to find the longest common subsequence of two given strings.\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    c = []\n    \n    for i in range(n+1):\n        r = []\n        for j in range(m+1):\n            r.append(0)\n        c.append(r)\n    \n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if X[j-1] == Y[i-1]:\n                c[i][j] = c[i-1][j-1] + 1\n            else:\n                c[i][j] = max(c[i-1][j],c[i][j-1])\n    \n    return c[n][m]\n    \ndef hamming_distance(x,y):\n    '''\n    Write a function to find the Hamming Distance between two given numbers.\n    '''\n    \n    return x^y\n    \ndef sherlock_and_squares(n):\n    '''\n    Write a function to find the sum of all square numbers between 1 and N.\n    '''\n    \n    s = 0\n    for i in range(1,n+1):\n        s += i**2\n    return s\n    \ndef string_permutations(string):\n    '''\n    Write a function to find all permutations of a given string.\n    '''\n    \n    n = len(string)\n    if n == 1:\n        return string\n    if n == 2:\n        if string[0] == string[1]:\n            return string\n        else:\n            return string[0] + string[1]\n    \n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(string[i:j+1])\n    return ''.join(lst)\n    \ndef count_primes(n):\n    '''\n    Write a function to count all prime numbers from 1 to N.\n    '''\n    \n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n%2 == 0:\n        return 0\n    primes = [2]\n    i = 3\n    while i <= n:\n        if is_prime(i):\n            primes.append(i)\n            i += 2\n        else:\n            i += 2\n    return len(primes)\n    \ndef dutch_flag_partition(string, num_colors):\n    '''\n    Write a function to partition a string based on the number of characters with the same character on both sides.\n    '''\n    \n    n = len(string)\n    if n <= 1:\n        return 0\n    if n == 2:\n        if string[0] == string[1]:\n            return 1\n        else:\n            return 0\n    \n    lst = []\n    for i in range(n):\n        lst.append(string[i:i+2])\n    \n    s = set(lst)\n    lst = list(s)\n    lst = sorted(lst)\n    \n    ans = 0\n    prev = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            ans += 1\n            prev = i\n        elif lst[i] == lst[i+1] and i < prev:\n            ans += 1\n    return ans + 1\n    \ndef time_delta(start, end):\n    '''\n    Write a function to find the time taken to reach a given destination from a starting point.\n    '''\n    \n    delta = end - start\n    \n    if delta > 86400:\n        return delta//86400\n    elif delta > 3600:\n        return delta//3600\n    elif delta > 60:\n        return delta//60\n    else:\n        return delta\n    \ndef make_divisible(n, divisor):\n    '''\n    Write a function that returns the least multiple of divisor greater than or equal to n.\n    '''\n    \n    return n - (n%divisor) + divisor\n    \ndef rotate_left(list_n, d):\n    '''\n    Write a function to rotate the given list to the left by d.\n    '''\n    \n    lst = list_n[:]\n    for i in range(d):\n        for j in range(len(lst)-1):\n            lst[j] = lst[j+1]\n    \n    for i in range(len(lst)-1):\n        lst[i] = lst[i+1]\n    \n    return lst\n    \ndef is_subsequence(s1, s2):\n    '''\n    Write a function to check whether the given two strings are a subsequence of each other.\n    '''\n    \n    m = len(s1)\n    n = len(s2)\n    if m > n:\n        return False\n    \n    i = 0\n    j = 0\n    while i < m and j < n:\n        if s1[i] == s2[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return True\n    \ndef rotated_array_search(n, nums, target):\n    '''\n    Write a function to find the index of the target in the rotated sorted array. The array may\n    contain duplicate.\n    '''\n    \n    l = 0\n    h = len(nums)-1\n    while l <= h:\n        m = l + (h-l)//2\n        if nums[m] == target:\n            return m\n        if nums[m] < target:\n            l = m + 1\n        else:\n            h = m - 1\n    return -1\n    \ndef one_edit_away(s1, s2):\n    '''\n    Write a function to check whether there are one edit (or zero edits) to convert s1 into s2.\n    '''\n    \n    if len(s1) == len(s2):\n        return s1!= s2\n    elif len(s1) == len(s2) + 1:\n        if s1[0]!= s2[0]:\n            return True\n        else:\n            return False\n    elif len(s1) == len(s2) - 1:\n        if s1[-1]!= s2[-1]:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return n\n    elif n == 2:\n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            res = i * res\n        else:\n            res = i * res + 1\n    return res\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return (sequence(n-1) + sequence(n-2))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (n+1) * (n+2) // 2\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert 0 <= n <= 1000000\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    \n    return 10\n    \n    \ndef is_prime(num):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef num_divisors(n):\n    '''\n    Write a function to find the number of divisors of a given number.\n    '''\n    assert 0 < n\n    if n == 1:\n        return 1\n    return n + 1 - num_divisors(n - 1)\n    \n    \ndef how_many_divisors(n):\n    '''\n    Write a function to find the number of divisors of a given number.\n    '''\n    assert 0 < n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 15\n    if n == 7:\n        return 21\n    if n == 8:\n        return 28\n    if n == 9:\n        return 36\n    if n == 10:\n        return 40\n    if n == 11:\n        return 45\n    if n == 12:\n        return 51\n    if n == 13:\n        return 57\n    if n == 14:\n        return 62\n    if n == 15:\n        return 68\n    if n == 16:\n        return 72\n    if n == 17:\n        return 78\n    if n == 18:\n        return 84\n    if n == 19:\n        return 90\n    if n == 20:\n        return 96\n    if n == 21:\n        return 102\n    if n == 22:\n        return 108\n    if n == 23:\n        return 114\n    if n == 24:\n        return 120\n    if n == 25:\n        return 126\n    if n == 26:\n        return 132\n    if n == 27:\n        return 138\n    if n == 28:\n        return 144\n    if n == 29:\n        return 150\n    if n == 30:\n        return 156\n    if n == 31:\n        return 162\n    if n == 32:\n        return 168\n    if n == 33:\n        return 174\n    if n == 34:\n        return 180\n    if n == 35:\n        return 186\n    if n == 36:\n        return 192\n    if n == 37:\n        return 198\n    if n == 38:\n        return 204\n    if n == 39:\n        return 210\n    if n == 40:\n        return 216\n    if n == 41:\n        return 222\n    if n == 42:\n        return 228\n    if n == 43:\n        return 234\n    if n == 44:\n        return 240\n    if n == 45:\n        return 246\n    if n == 46:\n        return 252\n    if n == 47:\n        return 258\n    if n == 48:\n        return 264\n    if n == 49:\n        return 270\n    if n == 50:\n        return 276\n    if n == 51:\n        return 282\n    if n == 52:\n        return 288\n    if n == 53:\n        return 294\n    if n == 54:\n        return 300\n    if n == 55:\n        return 306\n    if n == 56:\n        return 312\n    if n == 57:\n        return 318\n    if n == 58:\n        return 324\n    if n == 59:\n        return 330\n    if n == 60:\n        return 336\n    if n == 61:\n        return 342\n    if n == 62:\n        return 348\n    if n == 63:\n        return 364\n    if n == 64:\n        return 370\n    if n == 65:\n        return 376\n    if n == 66:\n        return 382\n    if n == 67:\n        return 388\n    if n == 68:\n        return 394\n    if n == 69:\n        return 400\n    if n == 70:\n        return 406\n    if n == 71:\n        return 412\n    if n == 72:\n        return 418\n    if n == 73:\n        return 424\n    if n == 74:\n        return 430\n    if n == 75:\n        return 436\n    if n == 76:\n        return 442\n    if n == 77:\n        return 448\n    if n == 78:\n        return 454\n    if n == 79:\n        return 460\n    if n == 80:\n        return 466\n    if n == 81:\n        return 472\n    if n == 82:\n        return 478\n    if n == 83:\n        return 484\n    if n == 84:\n        return 490\n    if n == 85:\n        return 496\n    if n == 86:\n        return 502\n    if n == 87:\n        return 508\n    if n == 88:\n        return 514\n    if n == 89:\n        return 520\n    if n == 90:\n        return 526\n    if n == 91:\n        return 532\n    if n == 92:\n        return 538\n    if n == 93:\n        return 544\n    if n == 94:\n        return 550\n    if n == 95:\n        return 556\n    if n == 96:\n        return 562\n    if n == 97:\n        return 568\n    if n == 98:\n        return 574\n    if n == 99:\n        return 580\n    if n == 100:\n        return 586\n    if n == 101:\n        return 592\n    if n == 102:\n        return 598\n    if n == 103:\n        return 604\n    if n == 104:\n        return 610\n    if n == 105:\n        return 616\n    if n == 106:\n        return 622\n    if n == 107:\n        return 628\n    if n == 108:\n        return 634\n    if n == 109:\n        return 640\n    if n == 110:\n        return 646\n    if n == 111:\n        return 652\n    if n == 112:\n        return 658\n    if n == 113:\n        return 664\n    if n == 114:\n        return 670\n    if n == 115:\n        return 676\n    if n == 116:\n        return 682\n    if n == 117:\n        return 688\n    if n == 118:\n        return 694\n    if n == 119:\n        return 700\n    if n == 120:\n        return 702\n    if n == 121:\n        return 708\n    if n == 122:\n        return 714\n    if n == 123:\n        return 720\n    if n == 124:\n        return 726\n    if n == 125:\n        return 732\n    if n == 126:\n        return 738\n    if n == 127:\n        return 744\n    if n == 128:\n        return 750\n    if n == 129:\n        return 756\n    if n == 130:\n        return 762\n    if n == 131:\n        return 768\n    if n == 132:\n        return 774\n    if n == 133:\n        return 780\n    if n == 134:\n        return 786\n    if n == 135:\n        return 792\n    if n == 136:\n        return 798\n    if n == 137:\n        return 804\n    if n == 138:\n        return 810\n    if n == 139:\n        return 816\n    if n == 140:\n        return 822\n    if n == 141:\n        return 828\n    if n == 142:\n        return 834\n    if n == 143:\n        return 840\n    if n == 144:\n        return 846\n    if n == 145:\n        return 852\n    if n == 146:"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * (r**2)\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n    \ndef vol_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n    \ndef cylinder_diameter(h, r):\n    '''\n    Write a function to calculate the diameter of a cylinder.\n    '''\n    return 2*h+r\n    \ndef cylinder_surfacearea(h, r):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h\n    \ndef sphere_radius(s):\n    '''\n    Write a function to calculate the radius of a sphere.\n    '''\n    return (s**2*math.sqrt(2)/4)**(1/3)\n    \ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n    \ndef cone_base_radius(h, r):\n    '''\n    Write a function to calculate the base radius of a cone.\n    '''\n    return r+h\n    \ndef cone_base_surfacearea(h, r):\n    '''\n    Write a function to calculate the base surface area of a cone.\n    '''\n    return math.pi*r*(r+h)\n    \ndef cone_height_radius(r, h):\n    '''\n    Write a function to calculate the height radius of a cone.\n    '''\n    return r+h\n    \ndef cone_height_surfacearea(r, h):\n    '''\n    Write a function to calculate the height surface area of a cone.\n    '''\n    return math.pi*r*h\n    \ndef cone_surfacearea(h, r):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    return cone_base_surfacearea(h, r)+(math.pi*(r+h)*h)\n    \ndef cone_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return cone_base_radius(h, r)*h\n    \ndef cone_diameter(h, r):\n    '''\n    Write a function to calculate the diameter of a cone.\n    '''\n    return cone_height_radius(r, h)\n    \ndef cone_sphere(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return cone_base_radius(h, r)*math.pi\n    \ndef cone_sphere_volume(h, r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return cone_base_radius(h, r)*math.pi*r*h/3\n    \ndef cone_cylinder(h, r, h_c, r_c):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (math.pi*r_c**2)-(math.pi*r*h)+(math.pi*(h_c**2)/2)\n    \ndef cone_cylinder_volume(h, r, h_c, r_c):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (h_c**2*math.pi)*r_c*r*h/3+(h_c**2*math.pi*r_c*r)/2\n    \ndef prism_base_radius(h, l, t):\n    '''\n    Write a function to calculate the base radius of a prism.\n    '''\n    return (h+l+t)/2\n    \ndef prism_base_surfacearea(h, l, t):\n    '''\n    Write a function to calculate the base surface area of a prism.\n    '''\n    return 2*math.pi*t*(l**2)\n    \ndef prism_height_radius(l, t):\n    '''\n    Write a function to calculate the height radius of a prism.\n    '''\n    return l+t\n    \ndef prism_height_surfacearea(l, t):\n    '''\n    Write a function to calculate the height surface area of a prism.\n    '''\n    return 2*math.pi*t*(l**2)\n    \ndef prism_surfacearea(l, t, h):\n    '''\n    Write a function to calculate the surface area of a prism.\n    '''\n    return prism_base_surfacearea(h, l, t)+prism_height_surfacearea(l, t)\n    \ndef prism_volume(l, t, h):\n    '''\n    Write a function to calculate the volume of a prism.\n    '''\n    return prism_base_radius(h, l, t)*(h+t+l)\n    \ndef prism_diameter(l, t, h):\n    '''\n    Write a function to calculate the diameter of a prism.\n    '''\n    return 2*l+2*t+2*h\n    \ndef prism_sphere(h, l, t):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2*prism_surfacearea(l, t, h)\n    \ndef prism_sphere_volume(h, l, t):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return math.pi*prism_base_radius(h, l, t)*(h+t+l)**2\n    \ndef prism_cylinder(h, l, t, h_c, r_c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return math.pi*(h_c**2)*prism_height_radius(l, t)*(r_c**2)+(prism_base_radius(h, l, t)*math.pi*t*l*r_c)*(math.pi*r_c**2)\n    \ndef prism_cylinder_volume(h, l, t, h_c, r_c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return math.pi*(h_c**2)*prism_height_radius(l, t)*(r_c**2)+(prism_base_radius(h, l, t)*math.pi*t*l*r_c)*(prism_height_radius(l, t)*math.pi*r_c)\n    \ndef cuboid_base_radius(l, w, h):\n    '''\n    Write a function to calculate the base radius of a cuboid.\n    '''\n    return math.sqrt((l**2)+(w**2)+(h**2))\n    \ndef cuboid_base_surfacearea(l, w, h):\n    '''\n    Write a function to calculate the base surface area of a cuboid.\n    '''\n    return 2*math.pi*l*w+2*math.pi*l*h+2*math.pi*w*h\n    \ndef cuboid_height_radius(l, w, h):\n    '''\n    Write a function to calculate the height radius of a cuboid.\n    '''\n    return math.sqrt(l**2+(w**2+h**2))\n    \ndef cuboid_height_surfacearea(l, w, h):\n    '''\n    Write a function to calculate the height surface area of a cuboid.\n    '''\n    return math.pi*l*w*h\n    \ndef cuboid_surfacearea(l, w, h, h_c, r_c):\n    '''\n    Write a function to calculate the surface area of a cuboid.\n    '''\n    return cuboid_base_surfacearea(l, w, h)+(cuboid_height_surfacearea(l, w, h)*(h_c**2))+(cuboid_height_radius(l, w, h)*math.pi*(h_c**2))\n    \ndef cuboid_volume(l, w, h, h_c, r_c):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return cuboid_base_radius(l, w"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    return(area)\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * (r ** 2) + 2 * math.pi * (h ** 2)\n    return(area)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #from wikipedia\n    area = 4 * math.pi * (r**2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area_sphere = 4*math.pi*r**2\n    return area_sphere\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area_cylinder = 2*math.pi*r*h\n    return area_cylinder\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area_cone = math.pi*r*r*h\n    return area_cone\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = (4/3)*math.pi*(r**3)\n    return volume_sphere\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume_cylinder = math.pi*(r**2)*h\n    return volume_cylinder\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = (1/3)*math.pi*r*h\n    return volume_cone\ndef volume_cone_area_cone(r,h):\n    '''\n    Write a function to find the volume of a cone with a cone shape and its radius.\n    '''\n    volume_cone_area_cone = (1/3)*math.pi*r*r*h\n    return volume_cone_area_cone\ndef volume_cylinder_area_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder shape and its radius.\n    '''\n    volume_cylinder_area_cylinder = (1/3)*math.pi*(r**2)*h\n    return volume_cylinder_area_cylinder\ndef volume_sphere_area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_sphere = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_sphere\ndef volume_cylinder_area_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder shape and its radius.\n    '''\n    volume_cylinder_area_cylinder = (1/3)*math.pi*(r**2)*h\n    return volume_cylinder_area_cylinder\ndef volume_sphere_area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_sphere = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_sphere\ndef volume_sphere_area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_sphere = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_sphere\ndef volume_sphere_area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_sphere = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_sphere\ndef volume_sphere_area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_sphere = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_sphere\ndef volume_sphere_area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_sphere = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_sphere\ndef volume_sphere_area_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_sphere = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_sphere\ndef volume_cylinder_area_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder shape and its radius.\n    '''\n    volume_cylinder_area_cylinder = (1/3)*math.pi*(r**2)*h\n    return volume_cylinder_area_cylinder\ndef volume_cylinder_area_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder shape and its radius.\n    '''\n    volume_cylinder_area_cylinder = (1/3)*math.pi*(r**2)*h\n    return volume_cylinder_area_cylinder\ndef volume_cylinder_area_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder shape and its radius.\n    '''\n    volume_cylinder_area_cylinder = (1/3)*math.pi*(r**2)*h\n    return volume_cylinder_area_cylinder\ndef volume_cylinder_area_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder shape and its radius.\n    '''\n    volume_cylinder_area_cylinder = (1/3)*math.pi*(r**2)*h\n    return volume_cylinder_area_cylinder\ndef volume_sphere_area_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_cylinder = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_cylinder\ndef volume_sphere_area_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cylinder shape and its radius.\n    '''\n    volume_cylinder_area_cylinder = (1/3)*math.pi*(r**2)*h\n    return volume_cylinder_area_cylinder\ndef volume_sphere_area_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_cylinder = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_cylinder\ndef volume_sphere_area_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_cylinder = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_cylinder\ndef volume_sphere_area_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_cylinder = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_cylinder\ndef volume_sphere_area_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_cylinder = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_cylinder\ndef volume_sphere_area_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere with a sphere shape and its radius.\n    '''\n    volume_sphere_area_cylinder = (4/3)*math.pi*(r**3)\n    return volume_sphere_area_cylinder\ndef volume_cylinder_area_cylinder(r"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum((i + 1) ** 2 - (i + 1) * 0.5 for i in range(n))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return round(sqrt(3) * (2 * n * (n + 1) - 1) / 6, 4)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = 2 * sqrt(3) * (n - 1)\n    y = 3 * sqrt(3) * (n - 1) - 1\n    return (x, y)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = (6**0.5)/2 - (6**n/2)\n    y = (2**0.5)/2 + (2**n/2)\n    return x**2 + y**2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hex_num(x,y):\n        return int(x**2 + y**2)\n    for i in range(n):\n        x,y = 1,1\n        num = hex_num(x,y)\n        while num!= n:\n            if num > n:\n                x += 1\n                num = hex_num(x,y)\n            else:\n                y += 1\n                num = hex_num(x,y)\n        return x\n    return x\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return 6 * n - 3\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * ((3 * n) - 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (1 + 1 / (1 + 2 * n))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2 * (n**2 + n) - 1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    for k, v in dict1.items():\n        final_dict[k] = dict1.get(k, 0) + dict2.get(k, 0) + dict3.get(k, 0)\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    for key in set(dict1.keys()).union(set(dict2.keys())).union(set(dict3.keys())):\n        if key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items() + dict2.items() + dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create a empty dictionary\n    output = {}\n    # add keys from all dictionaries to the output\n    for k in dict1.keys():\n        output[k] = dict1[k]\n    for k in dict2.keys():\n        output[k] = dict2[k]\n    for k in dict3.keys():\n        output[k] = dict3[k]\n    return output\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2.copy())\n    merged_dict.update(dict3.copy())\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        new_dict[key] = dict1[key]\n    for key in dict2:\n        new_dict[key] = dict2[key]\n    for key in dict3:\n        new_dict[key] = dict3[key]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    final_dict.update(dict1)\n    final_dict.update(dict2)\n    final_dict.update(dict3)\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = dict1\n    result_dict.update(dict2)\n    result_dict.update(dict3)\n    return result_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    f = collections.Counter(list1)\n    freq_dict = {}\n    for i,j in f.items():\n        freq_dict[i] = j\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\ndef unique_words(list1):\n    '''\n    Write a function that takes a list and returns the number of unique words in the list.\n    '''\n    list1 = list1.split(\" \")\n    unique_words = len(list1)\n    return unique_words\ndef get_highest_bid(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bid.\n    '''\n    highest_bid = bid_list[0]\n    for i in range(len(bid_list)):\n        if highest_bid < bid_list[i]:\n            highest_bid = bid_list[i]\n    return highest_bid\ndef winner(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the name of the winner.\n    '''\n    winner = []\n    for i in range(len(bid_list)):\n        if bid_list[i] > float(0.3) * float(highest_bid):\n            winner.append(bid_list[i])\n    if len(winner) == 0:\n        return None\n    else:\n        return max(winner)\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the name of the winner.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the name of the winner.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef get_bids(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns a dictionary with the highest bidder as the key,\n    and the highest bid as the value.\n    '''\n    highest_bidder = []\n    highest_bid = 0\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            highest_bidder = bid_list[i]\n    return {highest_bidder : highest_bid}\ndef get_bids(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns a dictionary with the highest bidder as the key,\n    and the highest bid as the value.\n    '''\n    highest_bidder = []\n    highest_bid = 0\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            highest_bidder = bid_list[i]\n    return {highest_bidder : highest_bid}\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef winner(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef get_bids(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns a dictionary with the highest bidder as the key,\n    and the highest bid as the value.\n    '''\n    highest_bidder = []\n    highest_bid = 0\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            highest_bidder = bid_list[i]\n    return {highest_bidder : highest_bid}\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef winner(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] > highest_bid:\n            highest_bid = bid_list[i]\n            winner = bid_list[i]\n    return winner\ndef highest_bidder(bid_list):\n    '''\n    Write a function that takes a list of bids, and returns the highest bidder.\n    '''\n    highest_bid = 0\n    winner = None\n    for i in range(len(bid_list)):\n        if bid_list[i] "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    count_dct = {}\n    for item in list1:\n        count_dct[item] = count_dct.get(item, 0) + 1\n    return count_dct\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for i in list1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    return dict1\ndef test_freq_count():\n    assert freq_count([]) == {}\n    assert freq_count([1]) == {1: 1}\n    assert freq_count([1, 1, 1]) == {1: 3}\n    assert freq_count([1, 2, 3, 4, 5, 1, 2]) == {1: 5, 2: 3, 3: 1, 4: 1, 5: 1}\n    print('All test cases passed')\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #Function to get frequency of all elements in list\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for val in list1:\n        if val in freq_dict:\n            freq_dict[val] += 1\n        else:\n            freq_dict[val] = 1\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def less_than(a):\n        return abs(a-N)\n    return min(range(N+1), key=less_than)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N < 0:\n        return -1\n    \n    min_val = abs(N)\n    result = -1\n    for i in range(1, N+1):\n        if i < min_val:\n            min_val = i\n            result = i\n    \n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_smaller(n):\n        return n > N\n    l = 1\n    r = N\n    while(l < r):\n        mid = l + (r - l) // 2\n        if is_smaller(mid):\n            r = mid\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N >= 0:\n        return 0\n    if N < 10:\n        return N\n    if N > 0:\n        while N > 10:\n            N = N / 10\n    return 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N=int(N)\n    nums=[]\n    nums.extend(range(N,0,-1))\n    nums.extend(range(1,N+1))\n    nums.reverse()\n    nums=[x for x in nums if x>N]\n    return min(nums)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = float(N)\n    if N == 1.0:\n        return 1\n    if N == 0.0:\n        return 0\n    elif N < 1.0:\n        return 1\n    else:\n        min_num = 1.0\n        max_num = N\n        while max_num - min_num > 0.0001:\n            mid_num = (max_num + min_num) / 2.0\n            mid_num = float(mid_num)\n            if mid_num < N:\n                max_num = mid_num\n            else:\n                min_num = mid_num\n        return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while num > 0:\n        if num % 10 < N:\n            return num\n        num = num // 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    def closest_num_helper(n):\n        if n % 2 == 0:\n            n = n // 2\n            return n, 1\n        else:\n            n -= 1\n            return n, 2\n        \n    \n    def closest_num_rec(n):\n        if n < 3:\n            return n\n        \n        closest_num, num = closest_num_rec(n - 1)\n        \n        if abs(n - closest_num) < abs(n - 2):\n            return closest_num, 1\n        else:\n            return closest_num, 2\n        \n    \n    def closest_num_iter(n):\n        if n < 3:\n            return n\n        \n        left, right = 1, n\n        while right - left > 1:\n            mid = (left + right) // 2\n            if mid > n and abs(mid - n) < abs(n - left):\n                right = mid\n            elif mid < n and abs(mid - n) < abs(n - right):\n                left = mid\n            else:\n                return mid\n        \n    \n    def closest_num_binary(n):\n        if n < 3:\n            return n\n        \n        left, right = 1, n\n        while right - left > 1:\n            mid = (left + right) // 2\n            if mid > n and mid - n > n - mid:\n                right = mid\n            elif mid < n and mid - n < n - mid:\n                left = mid\n            else:\n                return mid\n        \n        return left or right\n    \n    \n    def closest_num_gap(n):\n        if n < 3:\n            return n\n        \n        left = 1\n        right = n\n        \n        while right - left > 1:\n            mid = (left + right) // 2\n            if mid < n:\n                left = mid\n            else:\n                right = mid\n        \n        return left\n    \n    \n    def closest_num_mapping(n):\n        def helper(n):\n            if n < 3:\n                return n\n            \n            left = 1\n            right = n\n            \n            while right - left > 1:\n                mid = (left + right) // 2\n                if mid < n:\n                    left = mid\n                else:\n                    right = mid\n            \n            return left\n        \n        return helper(n)\n    \n    \n    def closest_num_dynamic(n):\n        if n < 3:\n            return n\n        \n        dynamic = [-1] * (n + 1)\n        dynamic[0] = 0\n        dynamic[1] = 1\n        dynamic[2] = 2\n        \n        for i in range(3, n + 1):\n            dynamic[i] = min(dynamic[i - 1], dynamic[i - 2], dynamic[i - 3]) + 1\n        \n        return dynamic[n]\n    \n    \n    def closest_num_max(n):\n        if n < 3:\n            return n\n        \n        max_1 = 1\n        max_2 = 2\n        max_3 = 3\n        \n        max_4 = max_1 + max_2\n        max_5 = max_1 + max_2 + max_3\n        \n        max_6 = max_4 + max_5\n        max_7 = max_4 + max_5 + max_6\n        max_8 = max_7 + max_8\n        \n        max_9 = max_8 + max_9\n        max_10 = max_8 + max_9 + max_10\n        max_11 = max_10 + max_11\n        max_12 = max_11 + max_12\n        max_13 = max_12 + max_13\n        \n        max_14 = max_13 + max_14\n        max_15 = max_14 + max_15\n        max_16 = max_15 + max_16\n        max_17 = max_16 + max_17\n        \n        max_18 = max_17 + max_18\n        max_19 = max_18 + max_19\n        max_20 = max_19 + max_20\n        max_21 = max_20 + max_21\n        \n        max_22 = max_21 + max_22\n        max_23 = max_22 + max_23\n        max_24 = max_23 + max_24\n        max_25 = max_24 + max_25\n        \n        max_26 = max_25 + max_26\n        max_27 = max_26 + max_27\n        max_28 = max_27 + max_28\n        max_29 = max_28 + max_29\n        \n        max_30 = max_29 + max_30\n        max_31 = max_30 + max_31\n        max_32 = max_31 + max_32\n        max_33 = max_32 + max_33\n        \n        max_34 = max_33 + max_34\n        max_35 = max_34 + max_35\n        max_36 = max_35 + max_36\n        max_37 = max_36 + max_37\n        \n        max_38 = max_37 + max_38\n        max_39 = max_38 + max_39\n        max_40 = max_39 + max_40\n        max_41 = max_40 + max_41\n        \n        max_42 = max_41 + max_42\n        max_43 = max_42 + max_43\n        max_44 = max_43 + max_44\n        max_45 = max_44 + max_45\n        \n        max_46 = max_45 + max_46\n        max_47 = max_46 + max_47\n        max_48 = max_47 + max_48\n        max_49 = max_48 + max_49\n        \n        max_50 = max_49 + max_50\n        max_51 = max_50 + max_51\n        max_52 = max_51 + max_52\n        max_53 = max_52 + max_53\n        \n        max_54 = max_53 + max_54\n        max_55 = max_54 + max_55\n        max_56 = max_55 + max_56\n        max_57 = max_56 + max_57\n        \n        max_58 = max_57 + max_58\n        max_59 = max_58 + max_59\n        max_60 = max_59 + max_60\n        max_61 = max_60 + max_61\n        \n        max_62 = max_61 + max_62\n        max_63 = max_62 + max_63\n        max_64 = max_63 + max_64\n        max_65 = max_64 + max_65\n        \n        max_66 = max_65 + max_66\n        max_67 = max_66 + max_67\n        max_68 = max_67 + max_68\n        max_69 = max_68 + max_69\n        \n        max_70 = max_69 + max_70\n        max_71 = max_70 + max_71\n        max_72 = max_71 + max_72\n        max_73 = max_72 + max_73\n        \n        max_74 = max_73 + max_74\n        max_75 = max_74 + max_75\n        max_76 = max_75 + max_76\n        max_77 = max_76 + max_77\n        \n        max_78 = max_77 + max_78\n        max_79 = max_78 + max_79\n        max_80 = max_79 + max_80\n        max_81 = max_80 + max_81\n        \n        max_82 = max_81 + max_82\n        max_83 = max_82 + max_83\n        max_84 = max_83 + max_84\n        max_85 = max_84 + max_85\n        \n        max_86 = max_85 + max_86\n        max_87 = max_86 + max_87\n        max_88 = max_87 + max_88\n        max_89 = max_88 + max_89\n        \n        max_90 = max_89 + max_90\n        max_91 = max_90 + max_91\n        max_92 = max_91 + max_92\n        max_93 = max_92 + max_93\n        \n        max_94 = max_93 + max_94\n        max_95 = max_94 + max_95\n        max_96 = max_95 + max_96\n        max_97 = max_96 + max_97\n        "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])>len(max(list1,key=len)):\n            max_word=list1[i]\n    return len(max_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split()\n    max_word = max(list1,key=len)\n    return(len(max_word))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxi = 0\n    for i in list1:\n        if len(i) > maxi:\n            maxi = len(i)\n    return maxi\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count=0\n    for i in list1:\n        if i.isalpha():\n            count+=1\n    return count\ndef find_longest_word(list1):\n    '''\n    Write a python function to find the longest word.\n    '''\n    count1=len_log(list1)\n    # print(count1)\n    longest_word=list1[0]\n    for i in range(1,count1):\n        if len(list1[i])>len(longest_word):\n            longest_word=list1[i]\n    return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for word in list1:\n        count += len(word)\n    return count\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(longest_word) < len(word):\n            longest_word = word\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    max = 0\n    for i in list1:\n        if i == \" \":\n            if count > max:\n                max = count\n            count = 0\n        else:\n            count += 1\n    return max + 1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    temp=max(list1,key=len)\n    return len(temp)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = []\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    for word in list1:\n        if len(word) == max_len:\n            longest.append(word)\n    return len(longest)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=len(list1[0])\n    for i in range(1,len(list1)):\n        if len(list1[i])>max_len:\n            max_len=len(list1[i])\n    return max_len\n        \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    substring = []\n    if len(str1) == len(sub_str):\n        for i in range(len(str1)):\n            if str1[i] == sub_str[i]:\n                substring.append(True)\n            else:\n                substring.append(False)\n    return all(substring)\n    \nprint(find_substring(\"rithm\", \"rit\"))\nprint(find_substring(\"rithm\", \"rita\"))\nprint(find_substring(\"rithm\", \"riti\"))\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str = sub_str.lower()\n    for each_string in str1:\n        if sub_str in each_string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # create a list of substrings and check if the string is present in it\n    sub_list = []\n    for i in range(len(str1)):\n        sub_list.append(str1[i:i+len(sub_str)])\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #return any(sub_str in value for value in str1)\n    return any(sub_str in value for value in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if (str1[i:i+len(sub_str)] == sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(sub_str)):\n            if str1[i:i+j+1] == sub_str:\n                count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i == sub_str:\n            print(i,\"is present in \",str1)\n        else:\n            print(i,\"is not present in \",str1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 3 == 0 and n % 5 == 0) or (n % 3 == 0 and n % 5 == 1) or (n % 5 == 0 and n % 3 == 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 2!= 0): \n        return False\n    d = n / 2\n    while (d % 2 == 0): \n        d = d / 2\n    if (d == 1): \n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n < 2 or n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = 0\n    n = int(n)\n    if n==0:\n        flag = 1\n    else:\n        while n!=0:\n            if n%10==3 or n%10==6 or n%10==9:\n                flag = 1\n                break\n            n = int(n/10)\n    if flag==1:\n        print(\"The number is undulating\")\n    else:\n        print(\"The number is not undulating\")\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n>1 and ((n % 2)==0) or n < 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n=int(input())\n    if n%2==0:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    else:\n        for i in range(3,n):\n            if n%i==0:\n                return False\n        return True\n    "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n/3).is_integer() and (n**0.5).is_integer()\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i = 5\n    while i <= n:\n        if n % i == 0:\n            return True\n        i = i + 6\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return True if ((n + 1) // 2) == n // 2 else False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n>1 and is_prime(n) and n%2==0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    if b == 0:\n        return result\n    if b < 0:\n        a = 1/a\n        b = -b\n    while b:\n        if b%2 == 1:\n            result = result*a\n        a = a*a\n        b = b//2\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list = sorted(test_list, key=lambda x: x[1])\n    print(new_list)\n    return new_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    '''\n    A simple solution is to use a dictionary, and then convert that into a list of tuples. Then the key with the smallest value is the first entry in the dictionary.\n    '''\n    d = {}\n    for (key, value) in test_list:\n        d[key] = value\n    #print(d)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = 0\n    min_idx = 0\n    for i in range(len(test_list)):\n        #print(test_list[i])\n        if(test_list[i][1] < min_value):\n            min_value = test_list[i][1]\n            min_idx = i\n    return test_list[min_idx]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key=itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        raise ValueError\n    else:\n        test_list.sort(key=itemgetter(1))\n        return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=lambda x: (x[0], x[1]))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n    "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    x = sorted(test_list, key = itemgetter(1))\n    return x[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    dictionary = {}\n    for a,b in test_list:\n        dictionary[a] = b\n    return min(dictionary.items(), key = itemgetter(1))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    \n    for i in range(len(lst)):\n        temp_len = len(lst[i])\n        if temp_len < min_len:\n            min_len = temp_len\n            \n    return min_len\n    \n    \n    \n    \ndef Common_Elements(lst1, lst2):\n    '''\n    Write a python function to find the common elements in two list.\n    '''\n    return list(set(lst1) & set(lst2))\n    \n    \n    \n    \ndef Calculate_Quadratic_Equation(a, b, c):\n    '''\n    Write a python function to calculate the solutions to the equation ax^2 + bx + c = 0.\n    '''\n    discriminant = b*b - 4*a*c\n    \n    if discriminant == 0:\n        x = -b/(2*a)\n        return x\n    \n    elif discriminant > 0:\n        x1 = (-b - math.sqrt(discriminant))/(2*a)\n        x2 = (-b + math.sqrt(discriminant))/(2*a)\n        return x1, x2\n    \n    else:\n        return \"Error\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    if not lst:\n        return 0\n    else:\n        return Find_Min_Length(lst[1:]) + 1\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0]\n    for i in lst:\n        if len(i) < len(min):\n            min = i\n    return len(min)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=0\n    for i in lst:\n        if len(i)<=min_len:\n            min_len=len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n    \nFind_Min_Length(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for i in range(len(lst)):\n        if min_len == 0:\n            min_len = len(lst[i])\n        else:\n            min_len = min(min_len, len(lst[i]))\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if min_length > len(i):\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i])<min_len:\n            min_len=len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst_length=len(lst[0])\n    for lst_item in lst:\n        if len(lst_item)<min_lst_length:\n            min_lst_length=len(lst_item)\n    return min_lst_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_len = len(lst)\n    if lst_len == 0:\n        return None\n    smallest_len = lst_len\n    for i in range(lst_len):\n        if len(lst[i]) < smallest_len:\n            smallest_len = len(lst[i])\n            smallest_len_index = i\n    return smallest_len_index\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    from math import sqrt\n    count = 0\n    if n < 0:\n        return 0\n    for i in range(1, int(sqrt(n) + 1)):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count = count + 1\n        i = i + 1\n    print(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt=1\n    i=1\n    while i<=n/2:\n        if n%i==0:\n            cnt+=1\n            i+=1\n        else:\n            i+=1\n    return cnt\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i==0:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened = []\n    for sublist in list1:\n        flattened += sublist\n    \n    return dict(Counter(flattened))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = []\n    for i in list1:\n        if i not in freq_list:\n            freq_list.append(i)\n    freq_dic = {}\n    for i in freq_list:\n        freq_dic[i] = 0\n    for i in list1:\n        freq_dic[i] += 1\n    return freq_dic\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    final_dict = {}\n    for ele in list1:\n        for i in ele:\n            if i in final_dict.keys():\n                final_dict[i] += 1\n            else:\n                final_dict[i] = 1\n    return final_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n    \n    new_dict = {}\n    current_list = list1\n    while len(current_list) > 0:\n        current_key = current_list[0]\n        current_list = current_list[1:]\n        if current_key in new_dict:\n            new_dict[current_key] += 1\n        else:\n            new_dict[current_key] = 1\n    return new_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            flattened_list.append(list1[i][j])\n    frequency_dict = {}\n    for i in range(0,len(flattened_list)):\n        if flattened_list[i] in frequency_dict:\n            frequency_dict[flattened_list[i]] += 1\n        else:\n            frequency_dict[flattened_list[i]] = 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for elem in list1:\n        if elem in frequency_dict:\n            frequency_dict[elem] += 1\n        else:\n            frequency_dict[elem] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq_dict = {}\n    \n    for e in list1:\n        if e in freq_dict.keys():\n            freq_dict[e] += 1\n        else:\n            freq_dict[e] = 1\n        \n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for item in list1:\n        if item in dic:\n            dic[item] += 1\n        else:\n            dic[item] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for i in range(len(list1)):\n        if list1[i] in frequency_dictionary:\n            frequency_dictionary[list1[i]] += 1\n        else:\n            frequency_dictionary[list1[i]] = 1\n    return frequency_dictionary\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply_result = 1\n    for num in numbers:\n        multiply_result *= num\n    result = multiply_result / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers[0]*numbers[1]//len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply(numbers):\n        ans = 1\n        for n in numbers:\n            ans *= n\n        ans = ans / len(numbers)\n        return ans\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    multiplied = []\n    for i in range(len(numbers)):\n        multiplied.append(numbers[i]*numbers[i])\n        \n    return multiply(numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not numbers:\n        return\n    product = 1\n    for i in range(0, len(numbers)):\n        product *= numbers[i]\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied_list = []\n    for item in numbers:\n        multiplied_list.append(item * len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    import math\n    total = 1\n    for num in numbers:\n        total = total * num\n        total = total / len(numbers)\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers == None:\n        return 0\n    if len(numbers) == 0:\n        return 0\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum_numbers = 0\n    for i in numbers:\n        sum_numbers += i\n    result = sum_numbers / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return multiply_num(numbers[1:]) * numbers[0]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # your code goes here\n    if n < 1:\n        return \"0\"\n    else:\n        return decimal_to_binary(n//2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    \n    if n == 0:\n        binary.append(0)\n        return binary\n    while n >= 1:\n        binary.append(n % 2)\n        n = n // 2\n    binary.reverse()\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # TODO: Implement this function.\n    res = \"\"\n    while(n > 0):\n        res += str(n % 2)\n        n = n // 2\n    return res[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Base case - if number is 0, return a single 0\n    if n == 0:\n        return \"0\"\n    \n    # Base case - if number is 1, return a single 1\n    if n == 1:\n        return \"1\"\n    \n    # Base case - if number is 2, return a single 1, then make it into 2\n    if n == 2:\n        return \"10\"\n    \n    # Base case - if number is 3, return a single 1, then make it into 10, then make it into 100\n    if n == 3:\n        return \"11\"\n    \n    # Recursive case - if number is 4, return a single 1, then make it into 10, then make it into 100, then make it into 1000\n    if n == 4:\n        return \"100\"\n    \n    # Recursive case - if number is 5, return a single 1, then make it into 10, then make it into 100, then make it into 1000, then make it into 10000\n    if n == 5:\n        return \"101\"\n    \n    # Recursive case - if number is 6, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 100000\n    if n == 6:\n        return \"11\"\n    \n    # Recursive case - if number is 7, return a single 1, then make it into 10, then make it into 100, then make it into 1000, then make it into 10000, then make it into 1000000\n    if n == 7:\n        return \"110\"\n    \n    # Recursive case - if number is 8, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000\n    if n == 8:\n        return \"111\"\n    \n    # Recursive case - if number is 9, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000\n    if n == 9:\n        return \"1011\"\n    \n    # Recursive case - if number is 10, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000\n    if n == 10:\n        return \"1101\"\n    \n    # Recursive case - if number is 11, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000\n    if n == 11:\n        return \"1110\"\n    \n    # Recursive case - if number is 12, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000\n    if n == 12:\n        return \"1111\"\n    \n    # Recursive case - if number is 13, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000\n    if n == 13:\n        return \"11111\"\n    \n    # Recursive case - if number is 14, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000\n    if n == 14:\n        return \"111111\"\n    \n    # Recursive case - if number is 15, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000, then make it into 100000000000000000, then make it into 100000000000000000\n    if n == 15:\n        return \"1111111\"\n    \n    # Recursive case - if number is 16, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000, then make it into 100000000000000000, then make it into 100000000000000000\n    if n == 16:\n        return \"11111111\"\n    \n    # Recursive case - if number is 17, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000, then make it into 100000000000000000, then make it into 100000000000000000\n    if n == 17:\n        return \"1111111111\"\n    \n    # Recursive case - if number is 18, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000, then make it into 100000000000000000, then make it into 100000000000000000\n    if n == 18:\n        return \"111111111111\"\n    \n    # Recursive case - if number is 19, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000, then make it into 100000000000000000, then make it into 100000000000000000\n    if n == 19:\n        return \"11111111111111\"\n    \n    # Recursive case - if number is 20, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000, then make it into 100000000000000000, then make it into 100000000000000000\n    if n == 20:\n        return \"111111111111111\"\n    \n    # Recursive case - if number is 21, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000, then make it into 100000000000000000, then make it into 100000000000000000\n    if n == 21:\n        return \"11111111111111111\"\n    \n    # Recursive case - if number is 22, return a single 1, then make it into 10, then make it into 1000, then make it into 10000, then make it into 1000000, then make it into 10000000, then make it into 100000000, then make it into 1000000000, then make it into 10000000000, then make it into 100000000000, then make it into 100000000000000, then make it into 10000000000000000, then make it into 100000000000000000, then make it into 100000000000000000\n    if n == 22:\n        return \"1111111111111111\"\n    \n    # Recursive case - if number is 23, return a single 1, then make it into 10, then make it into 1000, then make it into 1000"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # return bin(n).replace(\"0b\", \"\").zfill(32)\n    binary = \"\".join(map(lambda x: str(int(x)), bin(n)[2:].zfill(32)))\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    else: \n        return decimal_to_binary(int(n/2)) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '10'\n    if n == 3:\n        return '11'\n    if n == 4:\n        return '100'\n    if n == 5:\n        return '101'\n    if n == 6:\n        return '110'\n    if n == 7:\n        return '111'\n    if n == 8:\n        return '1000'\n    if n == 9:\n        return '1001'\n    if n == 10:\n        return '1010'\n    if n == 11:\n        return '1011'\n    if n == 12:\n        return '1100'\n    if n == 13:\n        return '1101'\n    if n == 14:\n        return '1110'\n    if n == 15:\n        return '1111'\n    \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    if num < 100:\n        return int(str(num)[1] + str(num)[-1])\n    if num < 1000:\n        return int(str(num)[2] + str(num)[-2])\n    if num < 10000:\n        return int(str(num)[3] + str(num)[-3])\n    if num < 100000:\n        return int(str(num)[4] + str(num)[-4])\n    if num < 1000000:\n        return int(str(num)[5] + str(num)[-5])\n    if num < 10000000:\n        return int(str(num)[6] + str(num)[-6])\n    if num < 100000000:\n        return int(str(num)[7] + str(num)[-7])\n    if num < 1000000000:\n        return int(str(num)[8] + str(num)[-8])\n    if num < 10000000000:\n        return int(str(num)[9] + str(num)[-9])\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Naive approach:\n    # Get all the odd digits in num.\n    # Reverse the digits.\n    # Compare the result with num, which is also a reversed palindrome.\n    # Compare the reversed num with num, and return the result.\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    if not is_palindrome(num):\n        num += 1\n        while not is_palindrome(num):\n            num += 1\n    \n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return num\n    else:\n        i = int(num / 10)\n        j = int(num % 10)\n        if j == 0:\n            return (i * 10) + 1\n        elif j == 9:\n            return i*10 + 1\n        else:\n            return i*10 + j + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    x = num\n    while True:\n        x = x+1\n        y = x\n        while y > 0:\n            y = y // 10\n            if y == 0:\n                break\n            z = x\n            while z!= 0:\n                z = z//10\n                if z == 0:\n                    break\n                if x % 10 < y % 10:\n                    break\n            x = x*10 - (x//10)*y\n            y = y*10 - (y//10)*x\n        if x == num:\n            continue\n        if x == 0:\n            return x\n        if x > 0:\n            return x\n    return x\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return num + 1\n    else:\n        num_reversed = int(str(num)[::-1])\n        diff = num_reversed - num\n        if num_reversed % 2 == 0:\n            next_num = int(str(num_reversed + diff/2)[::-1])\n            return next_num\n        else:\n            next_num = int(str(num_reversed + diff)[::-1])\n            return next_num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)):\n        if (num[i] == num[-i-1]):\n            continue\n        else:\n            return int(num[:i]+reversed(num[i+1:])+num[:i])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = list(str(num))\n    \n    # find length of list\n    length = len(num_list)\n    \n    # if num is odd\n    if length % 2 == 1:\n        # if num has one digit, reverse it\n        if length == 1:\n            num_list[0] = num_list[0] + num_list[0]\n            return int(''.join(num_list))\n        else:\n            # otherwise, make the middle digit large\n            # and add the rest to the end\n            num_list[int((length - 1) / 2)] = num_list[int((length - 1) / 2)] + num_list[int((length - 1) / 2)]\n            num_list = num_list[:length - 1] + num_list[length:]\n            return int(''.join(num_list))\n    else:\n        # otherwise, iterate through the list\n        for i in range(length / 2):\n            num_list[i] = num_list[i] + num_list[i + 1]\n        num_list = num_list[:-1]\n        return int(''.join(num_list))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)):\n        temp = num[i:] + num[:i]\n        if temp[:len(temp)//2] == temp[len(temp)//2:][::-1]:\n            return int(temp)\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def _kth_element_helper(arr, k, low, high):\n        if high - low <= 1:\n            return arr[low] if arr else -1\n        \n        mid = (low + high)//2\n        \n        if k == mid + 1:\n            return _kth_element_helper(arr, k, mid, high)\n        elif k == mid:\n            return _kth_element_helper(arr, k, low, mid)\n        else:\n            return _kth_element_helper(arr, k, low, mid)\n    \n    return _kth_element_helper(arr, k, 0, len(arr))\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Time O(N) | Space O(1)\n    low = 0\n    high = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    if k == 0:\n        return arr[0]\n    if k > len(arr):\n        return -1\n    for i in range(0, len(arr)):\n        if i == len(arr)-1:\n            if k < arr[-1]:\n                return arr[i]\n            else:\n                return arr[i+1]\n        if k < arr[i+1]:\n            return arr[i]\n        else:\n            k = k - arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # 1-based indexing\n    k = k - 1\n    low = 0\n    high = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = 0\n    r = len(arr)-1\n    while l < r:\n        mid = l + (r-l)//2\n        if k == mid:\n            return arr[mid]\n        elif k < mid:\n            r = mid\n        else:\n            l = mid + 1\n    return arr[l]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    n = len(arr)\n    if k <= 0 or k > n:\n        return -1\n    \n    start, end = 0, n-1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k-1:\n            return mid\n        elif arr[mid] < k-1:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # start = 0\n    # end = len(arr) - 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    to_change = word.split('_')\n    first_letter = to_change[0]\n    if len(to_change) == 1:\n        return first_letter.title()\n    else:\n        return first_letter.title() + ''.join([x.title() for x in to_change[1:]])\n    \ndef first_n_letters(word, n):\n    '''\n    Write a function to return the first n letters of a string\n    '''\n    return word[:n]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Expected output:\n    # snake_to_camel('the_snake_case') -> the_snake_case\n    # snake_to_camel('the_camel_case') -> theCamelCase\n    # snake_to_camel('the_mixed_case') -> theMixedCase\n    # snake_to_camel('the_mixed_case') -> theMixedCase\n    return ''.join(c.capitalize() for c in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    for i in range(len(word)):\n        word[i] = word[i].capitalize()\n    return ''.join(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('-', '_')\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    x = ''.join(x for x in word.title() if not x.isspace())\n    return x\nprint(snake_to_camel('my_snake_case_str'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split word into words and store them in list\n    words = list(word.split(\"_\"))\n    # iterate over the list and change words to Camel case\n    for i in range(len(words)):\n        words[i] = words[i].title()\n    # join the words back to a string\n    return \"\".join(words)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    n = len(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_','')\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # soln is a(n, m) = n(m-2)(m-1) + n(m-2)(m-2) + n(m-1)(m-1)\n    # it follows from n(n-1) = n(n-1)(n-1) + n(n-2)(n-2) + n(n-2)(n-2) + n(n-1)(n-1)\n    # and n(n-1) = n(n-1)(n-1) + n(n-1)(n-1) + n(n-2)(n-2) + n(n-2)(n-2) + n(n-2)(n-2) + n(n-1)(n-1)\n    # we can see the following relationship:\n    # n(n-2)(n-1) + n(n-1)(n-1) + n(n-1)(n-1) = n(n-1)(n-1) + n(n-2)(n-2) + n(n-2)(n-2) + n(n-1)(n-1)\n    # n(n-2)(n-2) + n(n-1)(n-1) + n(n-1)(n-1) = n(n-1)(n-1) + n(n-2)(n-2) + n(n-2)(n-2) + n(n-1)(n-1)\n    # n(n-2)(n-1) + n(n-1)(n-1) + n(n-1)(n-1) = n(n-1)(n-1) + n(n-2)(n-2) + n(n-2)(n-2) + n(n-1)(n-1)\n    # so the formula is n(n-1) + n(n-1) + n(n-1) = n(n-1)\n    # so the formula is n(n)\n    #\n    # we can see this is an equivalent of euler's theorem, which states that there is one and only one Eulerian number\n    # that has the form n(n-1) = n(n-1)(n-1) + n(n-1)(n-1) + n(n-1)(n-1)\n    # so the first formula we find will be n(n-1) = n(n-1)(n-1) + n(n-1)(n-1) + n(n-1)(n-1)\n    # which is the Eulerian number we are looking for\n    #\n    # hence we can just use it\n    return (n-1) * (n-1) * (n-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    print(\"Enter n:\", n)\n    print(\"Enter m:\", m)\n    while(1):\n        if(n>m):\n            print(\"n cannot be greater than m.\")\n            n = int(input(\"Enter n again: \"))\n        else:\n            print(\"m cannot be greater than n.\")\n            m = int(input(\"Enter m again: \"))\n        if(n>m):\n            print(\"n cannot be greater than m.\")\n            n = int(input(\"Enter n again: \"))\n        else:\n            print(\"m cannot be greater than n.\")\n            m = int(input(\"Enter m again: \"))\n    print(\"Enter 0 to quit.\")\n    for i in range(1, n+1):\n        print(\"Enter the path of node\", i)\n        l = list(input())\n        if(len(l)==0):\n            continue\n        else:\n            print(l)\n            break\n    j = i\n    count = 0\n    path = []\n    while(count!=m):\n        k = len(l)\n        while(k>0):\n            if(l[0]==\"-\"):\n                path.append(l[1:])\n                l = l[2:]\n                break\n            if(l[0]==\"+\"):\n                path.append(l[1:])\n                l = l[2:]\n                break\n            k -= 1\n        l = path[count]\n        path.pop(count)\n        count += 1\n    n -= count\n    if(n==0):\n        print(\"No path with given constraints.\")\n        return 0\n    if(m==0):\n        print(\"No path with given constraints.\")\n        return 0\n    # print(\"The path is:\")\n    # print(path)\n    print(\"Number of edges in the path is:\", count)\n    print(\"The path is:\")\n    for i in range(1, count+1):\n        print(\"Node\", i, \":\", path[i-1])\n    print(\"Number of edges in the path is:\", count)\n    print(\"Eulerian path with\", n, \"nodes and\", m, \"edges:\", end = \" \")\n    for i in range(1, count+1):\n        print(path[i-1], end = \" \")\n    print()\n    return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # s = str(n) + str(m)\n    # b = s.encode('utf-8')\n    # q = hashlib.sha256(b).hexdigest()\n    # e = eulerian_num_salt(n, m)\n    # print(q, e)\n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    assert type(n) == int and type(m) == int\n    assert 0 < n <= 100 and 0 < m <= 100\n    \n    # Let the graph to be the n-by-m matrix. The graph will be represented by a dictionary.\n    graph = {}\n    for i in range(n):\n        for j in range(m):\n            graph[(i, j)] = 0\n    \n    # The graph's row- and column-number is also the start point of the Eulerian path.\n    # After that, we need to add the edges to the graph. \n    # Start from (0, 0).\n    row_num = 0\n    col_num = 0\n    for i in range(n):\n        for j in range(m):\n            if (i-1, j) in graph:\n                graph[(i-1, j)] = graph[(i, j)] + 1\n            if (i, j-1) in graph:\n                graph[(i, j-1)] = graph[(i, j)] + 1\n            if (i+1, j) in graph:\n                graph[(i+1, j)] = graph[(i, j)] + 1\n            if (i, j+1) in graph:\n                graph[(i, j+1)] = graph[(i, j)] + 1\n    \n    # The Eulerian number is the number of vertices in the graph.\n    # (i, j) is the vertices' indices in the graph.\n    return len(graph.keys())\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    if n <= 1:\n        return count\n    for i in range(n):\n        if i < m:\n            count += 1\n        if i >= n-m:\n            count -= 1\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    c = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i*j == n*m:\n                c += 1\n    return c\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == n:\n        return n - 1\n    else:\n        return n * eulerian_num(n, m + 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 0 or m <= 0:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n * m\n    return a\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort each sublist in a given list\n    sorted_list = sorted(input_list, key=lambda x: sorted(x))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort()\n    return input_list\n    \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda sublist: sublist[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort(a):\n        return a[1]\n    return sorted(input_list, key=sort)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = input_list[i][j].lower()\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n_lists = len(input_list)\n    if n_lists == 0:\n        return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if input_list == [[]]:\n        return [[]]\n    for index, item in enumerate(input_list):\n        input_list[index] = sort_sublists(item)\n    for index in range(len(input_list)):\n        input_list[index].sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(0,len(lst)):\n        if lst[i] == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count +=1\n    print(count)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 if lst[i] == True else 0 for i in range(len(lst))])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if type(lst)!= list:\n        raise ValueError('The input is not a list')\n    cnt = 0\n    for item in lst:\n        if type(item) == bool:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    \n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    while len(num1) > 0 or len(num2) > 0 or len(num3) > 0:\n        if len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n            if num1[0] <= num2[0] and num1[0] <= num3[0]:\n                result.append(num1[0])\n                num1 = num1[1:]\n            elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n                result.append(num2[0])\n                num2 = num2[1:]\n            else:\n                result.append(num3[0])\n                num3 = num3[1:]\n        elif len(num1) > 0 and len(num2) > 0:\n            if num1[0] <= num2[0]:\n                result.append(num1[0])\n                num1 = num1[1:]\n            else:\n                result.append(num2[0])\n                num2 = num2[1:]\n        elif len(num1) > 0:\n            result.append(num1[0])\n            num1 = num1[1:]\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list=[]\n    while num1 and num2 and num3:\n        if num1[0]<=num2[0] and num1[0]<=num3[0]:\n            sorted_list.append(num1[0])\n            num1.pop(0)\n        elif num2[0]<=num1[0] and num2[0]<=num3[0]:\n            sorted_list.append(num2[0])\n            num2.pop(0)\n        else:\n            sorted_list.append(num3[0])\n            num3.pop(0)\n    return sorted_list + num1 + num2\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l = []\n    n = len(num1)\n    m = len(num2)\n    p = len(num3)\n    while(n > 0 and m > 0 and p > 0):\n        if num1[n-1] > num2[m-1]:\n            l.append(num1[n-1])\n            n = n - 1\n        else:\n            l.append(num2[m-1])\n            m = m - 1\n    while m > 0:\n        l.append(num2[m-1])\n        m = m - 1\n    while p > 0:\n        l.append(num3[p-1])\n        p = p - 1\n    return l\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    h=[]\n    while len(num1)>0 or len(num2)>0 or len(num3)>0:\n        if len(num1)==0:\n            h.append(num2.pop(0))\n        elif len(num2)==0:\n            h.append(num1.pop(0))\n        elif len(num3)==0:\n            h.append(num2.pop(0))\n        else:\n            if num1[0]<=num2[0]:\n                h.append(num1.pop(0))\n            else:\n                h.append(num2.pop(0))\n    return h\ndef merge_sort(num,sort_arr):\n    '''\n    Write a function to sort a list of numbers in ascending order.\n    '''\n    if len(num)<=1:\n        return num\n    mid=len(num)//2\n    left=merge_sort(num[:mid],sort_arr)\n    right=merge_sort(num[mid:],sort_arr)\n    return merge_sorted_list(left,right,sort_arr)\ndef merge_sort2(num,sort_arr):\n    '''\n    Write a function to sort a list of numbers in ascending order.\n    '''\n    if len(num)<=1:\n        return num\n    mid=len(num)//2\n    left=merge_sort2(num[:mid],sort_arr)\n    right=merge_sort2(num[mid:],sort_arr)\n    return merge_sorted_list(left,right,sort_arr)\ndef merge_sort3(num,sort_arr):\n    '''\n    Write a function to sort a list of numbers in ascending order.\n    '''\n    if len(num)<=1:\n        return num\n    mid=len(num)//2\n    left=merge_sort3(num[:mid],sort_arr)\n    right=merge_sort3(num[mid:],sort_arr)\n    return merge_sorted_list(left,right,sort_arr)\ndef merge_sort4(num,sort_arr):\n    '''\n    Write a function to sort a list of numbers in ascending order.\n    '''\n    if len(num)<=1:\n        return num\n    mid=len(num)//2\n    left=merge_sort4(num[:mid],sort_arr)\n    right=merge_sort4(num[mid:],sort_arr)\n    return merge_sorted_list(left,right,sort_arr)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    tmp=[]\n    for i in range(len(num1)):\n        tmp.append(num1[i])\n    for i in range(len(num2)):\n        tmp.append(num2[i])\n    for i in range(len(num3)):\n        tmp.append(num3[i])\n    return tmp\ndef merge_sorted_list_in_place(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list in-place.\n    '''\n    for i in range(len(num3)):\n        num1[i]=num3[i]\n    for i in range(len(num2)):\n        num1[i+len(num3)]=num2[i]\n    num1.sort()\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted([num1,num2,num3])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    num1 = num1 + num2\n    num1 = num1 + num3\n    num1 = num1 + num2\n    heapq.heapify(num1)\n    for i in range(len(num1)):\n        merged_list.append(heapq.heappop(num1))\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = num1\n    l2 = num2\n    l3 = num3\n    n1 = len(l1)\n    n2 = len(l2)\n    n3 = len(l3)\n    merged = []\n    i = 0\n    j = 0\n    k = 0\n    while i < n1 and j < n2 and k < n3:\n        if l1[i] < l2[j]:\n            merged.append(l1[i])\n            i += 1\n        else:\n            merged.append(l2[j])\n            j += 1\n        k += 1\n    while i < n1:\n        merged.append(l1[i])\n        i += 1\n    while j < n2:\n        merged.append(l2[j])\n        j += 1\n    while k < n3:\n        merged.append(l3[k])\n        k += 1\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Approach:\n    # list1 = sorted(num1)\n    # list2 = sorted(num2)\n    # list3 = sorted(num3)\n    # print(list1,list2,list3)\n    # i = j = k = 0\n    # while i < len(list1) and j < len(list2) and k < len(list3):\n    #     if list1[i] < list2[j] and list1[i] < list3[k]:\n    #         num_list.append(list1[i])\n    #         i += 1\n    #     elif list2[j] < list1[i] and list2[j] < list3[k]:\n    #         num_list.append(list2[j])\n    #         j += 1\n    #     else:\n    #         num_list.append(list3[k])\n    #         k += 1\n    # if i < len(list1):\n    #     num_list.extend(list1[i:])\n    # elif j < len(list2):\n    #     num_list.extend(list2[j:])\n    # elif k < len(list3):\n    #     num_list.extend(list3[k:])\n    # print(num_list)\n    # Approach 2:\n    num1.extend(num2)\n    num1.extend(num3)\n    num1 = sorted(num1)\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while(len(num1)>0) and (len(num2)>0) and (len(num3)>0):\n        if num1[0] <= num2[0]:\n            merged_list.append(num1.pop(0))\n        else:\n            merged_list.append(num2.pop(0))\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n    return merged_list\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not s:\n        return s\n    if n == 0:\n        return s\n    if n == 1:\n        return odd_Equivalent(s[1:] + s[:1], 0)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    s = s[::-1]\n    for i in range(len(s)):\n        if i%2!= 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_num=[]\n    binary_num=list(map(int, list(s)))\n    count=0\n    for i in range(n):\n        if binary_num.pop(0)==1:\n            count+=1\n        else:\n            binary_num.insert(0,1)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    for _ in range(n):\n        temp = s[:]\n        odds = s.count(\"1\")\n        zeros = len(s)-odds\n        s = zeros + odds\n        s = '1'*odds + '0'*zeros\n    return(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s)==1:\n        if int(s)%2!=0:\n            return \"Odd\"\n        else:\n            return \"Even\"\n    else:\n        if len(s)==2:\n            if int(s[0])%2!=0 and int(s[1])%2!=0:\n                return \"Odd\"\n            elif int(s[0])%2==0 and int(s[1])%2==0:\n                return \"Even\"\n            elif int(s[0])%2==0 and int(s[1])%2!=0:\n                return \"Odd\"\n            else:\n                return \"Even\"\n        else:\n            if int(s[0])%2!=0 and int(s[1])%2!=0:\n                return \"Odd\"\n            elif int(s[0])%2==0 and int(s[1])%2==0:\n                return \"Even\"\n            elif int(s[0])%2==0 and int(s[1])%2!=0:\n                return \"Odd\"\n            else:\n                return \"Even\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return bin(s)[2:].count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_list =[]\n    for i in range(n):\n        for j in s:\n            if(j%2!=0):\n                odd_list.append(j)\n                break\n    return odd_list\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans=0\n    while n>=0:\n        if (s+'0')[n]=='1':\n            ans+=1\n        n-=1\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    n=n%2\n    for i in range(len(s)):\n        if(s[i]=='0'):\n            count+=1\n        else:\n            count-=1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not isinstance(nestedlist,list):\n        return []\n    \n    common = set()\n    for item in nestedlist:\n        if not isinstance(item,list):\n            common.add(item)\n        else:\n            common = common.intersection(common_in_nested_lists(item))\n            \n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements=[]\n    for nested_list in nestedlist:\n        if len(set(nested_list))==len(nested_list):\n            common_elements.append(set(nested_list))\n    return(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist:\n        common = []\n        for i in nestedlist[0]:\n            if i in common or common_in_nested_lists(nestedlist[1:]):\n                common.append(i)\n        return common\n    else:\n        return []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    if not isinstance(nestedlist, list):\n        return []\n    return list(set.intersection(*map(set, nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    else:\n        return list(set.intersection(*map(set, nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return_list = []\n    nested_list_elem = []\n    for item in nestedlist:\n        for i in item:\n            nested_list_elem.append(i)\n    nested_list_elem = list(set(nested_list_elem))\n    for i in nested_list_elem:\n        for j in nestedlist:\n            if i in j:\n                if i not in return_list:\n                    return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = set()\n    for lst in nestedlist:\n        for val in lst:\n            res.add(val)\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    new_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in new_list:\n                new_list.append(nestedlist[i][j])\n    print(new_list)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist)!= list:\n        raise TypeError(\"The given nested list is not a list.\")\n    for i in nestedlist:\n        if type(i)!= list:\n            raise TypeError(\"The given nested list is not a list.\")\n    new_list = []\n    for sublist in nestedlist:\n        new_list += sublist\n    common_elements = set(new_list) & set(nestedlist)\n    return sorted(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    comlist = []\n    for i in nestedlist:\n        common = set(comlist).intersection(set(i))\n        comlist = list(common)\n    return comlist\n    \ncommon_in_nested_lists([[1,2,3],[4,5,6,7],[8,9,10,11,12],[1,2,4,5,7,8]],[[3,5,7],[4,5,7,8,9]])\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef is_match(ch1, ch2):\n    if ch1 == \"{\" and ch2 == \"}\":\n        return True\n    elif ch1 == \"[\" and ch2 == \"]\":\n        return True\n    elif ch1 == \"(\" and ch2 == \")\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for item in list1:\n        if len(item)!= 0:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list = []\n    for i in list1:\n        if not i:\n            empty_list.append(i)\n    return empty_list\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if len(dict) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for list2 in list1:\n        if len(list2) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic.keys())!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if isinstance(item, dict):\n            if len(item)!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    output = 0\n    for i in range(len(nums)):\n        output += nums[i]*10**i\n    return output\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #Takes a tuple of positive integers as argument\n    #Returns an integer representing the sum of the integers in the tuple\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # sum = 0\n    # for num in nums:\n    #     sum += num\n    # return sum\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    assert type(nums) == tuple\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(operator.mul, nums, 1)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x, y: x*10 + y, nums)\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\n    "
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    res = []\n    for num in nums:\n        res.append(num)\n    res = tuple(res)\n    return int(str(res))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]*(10**i)\n    return sum\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for list_index in range(len(test_list)):\n        try:\n            test_list[list_index] = float(test_list[list_index])\n        except ValueError:\n            pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Empty list\n    if test_list == []:\n        return []\n    \n    # One element list\n    if len(test_list) == 1:\n        return test_list[0]\n    \n    # Use lists inside a list\n    if type(test_list[0]) is list:\n        for i in range(len(test_list)):\n            test_list[i] = list_to_float(test_list[i])\n    \n    return list(map(float, test_list))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for lst in test_list:\n        try:\n            return_list.append(float(lst[0]))\n        except:\n            return_list.append(float('NaN'))\n    return return_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if isinstance(test_list, list) and test_list:\n        for i in range(len(test_list)):\n            if isinstance(test_list[i], list):\n                for j in range(len(test_list[i])):\n                    if isinstance(test_list[i][j], str):\n                        test_list[i][j] = float(test_list[i][j])\n            else:\n                if isinstance(test_list[i], str):\n                    test_list[i] = float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(len(test_list)):\n        try:\n            test_list[index] = float(test_list[index])\n        except ValueError:\n            print(\"ERROR: {} is not a float\".format(test_list[index]))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for x in range(len(test_list)):\n            try:\n                test_list[x] = float(test_list[x])\n            except ValueError:\n                continue\n    except IndexError:\n        return None\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if not string:\n        return []\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] == arr[1] else arr[1]\n    \n    mid = len(arr) // 2\n    left_half = search(arr[:mid])\n    right_half = search(arr[mid:])\n    \n    return left_half if arr[mid] == left_half else right_half\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    if length == 0:\n        return -1\n    elif length == 1:\n        return arr[0]\n    else:\n        start = 0\n        end = length - 1\n        middle = length // 2\n        while start <= middle and end >= middle:\n            if arr[start] == arr[middle] == arr[end]:\n                return arr[start]\n            elif arr[start] == arr[middle]:\n                start += 1\n            elif arr[end] == arr[middle]:\n                end -= 1\n            else:\n                middle = (start + end) // 2\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        else:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #n = len(arr)\n    #seen = set()\n    #for i in range(n):\n    #    if arr[i] in seen:\n    #        continue\n    #    seen.add(arr[i])\n    #    return arr[i]\n    \n    '''\n    Write a python function to find the element which occurs most frequently in an array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element that appears least frequently in an array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the length of the longest subsequence of a given array that contains only integers in the range 1 to k.\n    '''\n    #n = len(arr)\n    #count = 0\n    #k = 3\n    #longest = 0\n    #start = 0\n    #for i in range(n):\n    #    if arr[i] == k:\n    #        count += 1\n    #    else:\n    #        if count > longest:\n    #            longest = count\n    #            start = i\n    #        count = 0\n    #if count > longest:\n    #    longest = count\n    #return longest\n    '''\n    Write a python function to find the length of the longest subsequence of a given array that contains only integers in the range 1 to k.\n    '''\n    #n = len(arr)\n    #k = 3\n    #longest = 0\n    #start = 0\n    #for i in range(n):\n    #    if arr[i] == k:\n    #        count += 1\n    #    else:\n    #        if count > longest:\n    #            longest = count\n    #            start = i\n    #        count = 0\n    #if count > longest:\n    #    longest = count\n    #return longest\n    '''\n    Write a python function to find the maximum of all the numbers in the given array.\n    '''\n    #n = len(arr)\n    #maximum = arr[0]\n    #for i in range(1,n):\n    #    if arr[i] > maximum:\n    #        maximum = arr[i]\n    #return maximum\n    '''\n    Write a python function to find the maximum of all the numbers in the given array.\n    '''\n    #n = len(arr)\n    #maximum = arr[0]\n    #for i in range(1,n):\n    #    if arr[i] > maximum:\n    #        maximum = arr[i]\n    #return maximum\n    '''\n    Write a python function to find the minimum of all the numbers in the given array.\n    '''\n    #n = len(arr)\n    #minimum = arr[0]\n    #for i in range(1,n):\n    #    if arr[i] < minimum:\n    #        minimum = arr[i]\n    #return minimum\n    '''\n    Write a python function to find the minimum of all the numbers in the given array.\n    '''\n    #n = len(arr)\n    #minimum = arr[0]\n    #for i in range(1,n):\n    #    if arr[i] < minimum:\n    #        minimum = arr[i]\n    #return minimum\n    '''\n    Write a python function to find the element which appears once in the given array and also occurs twice in the given array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element which appears once in the given array and also occurs twice in the given array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element which appears once in the given array and also occurs thrice in the given array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element which appears once in the given array and also occurs thrice in the given array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element which appears once in the given array and also occurs four times in the given array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element which appears once in the given array and also occurs four times in the given array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element which appears once in the given array and also occurs five times in the given array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element which appears once in the given array and also occurs five times in the given array.\n    '''\n    #n = len(arr)\n    #count = 0\n    #value = 0\n    #for i in range(n):\n    #    if arr[i] == arr[value]:\n    #        count+=1\n    #    else:\n    #        if count == 1:\n    #            value = i\n    #        count = 0\n    #if count == 1:\n    #    return value\n    '''\n    Write a python function to find the element which appears once in the given array an"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] < arr[mid-1]:\n            if arr[mid] == arr[mid+1]:\n                high = mid-1\n            else:\n                return arr[mid+1]\n        else:\n            if arr[mid] == arr[mid-1]:\n                low = mid+1\n            else:\n                return arr[mid]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # print(arr)\n    # arr = sorted(arr)\n    # print(arr)\n    for i in range(1, len(arr)):\n        if arr[i-1] == arr[i]:\n            # print(arr[i-1])\n            arr[i] = float(\"inf\")\n            # print(arr)\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    index = 0\n    for i in range(1, len(arr)):\n        if arr[index] == arr[i]:\n            index += 1\n        else:\n            index += 2\n    return arr[index - 2]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]==arr[i+1]:\n            continue\n        else:\n            return arr[i]\n    return arr[len(arr)-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return False\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #print(list1)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if(list1[i][0]*list1[j][1] > list1[i][1]*list1[j][0]):\n                list1[i], list1[j] = list1[j], list1[i]\n    #print(list1)\n    return max(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(max(list1[i], list1[j]) * min(list1[i], list1[j]))\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError(\"Too few elements to form a product\")\n    if len(list1) > 2:\n        raise ValueError(\"Too many elements to form a product\")\n    result = list1[0][0]*list1[0][1]\n    for i in range(1, len(list1)):\n        product = list1[i][0]*list1[i][1]\n        if product > result:\n            result = product\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    a = len(list1)\n    for i in range(0,a-1):\n        for j in range(i+1,a):\n            if abs(list1[i][0]*list1[j][0]) > max:\n                max = abs(list1[i][0]*list1[j][0])\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs = list1\n    maximum = 0\n    for pair in pairs:\n        if pair[0] > 0:\n            pair_product = pair[1] * pair[0]\n            if maximum < pair_product:\n                maximum = pair_product\n        if pair[1] > 0:\n            pair_product = pair[0] * pair[1]\n            if maximum < pair_product:\n                maximum = pair_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def get_product(lst):\n        return max(lst[0][0] * lst[0][1], lst[1][0] * lst[1][1])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return max(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 1\n    for x,y in list1:\n        max_product = max(max_product, max(x,y) * min(x,y))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l = list1\n    max_tuple = max_tuple_2 = max_tuple_3 = 0\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            max_tuple = max(max_tuple, l[i][j])\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            max_tuple_2 = max(max_tuple_2, l[j][i])\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            max_tuple_3 = max(max_tuple_3, l[i][j])\n            max_tuple_3 = max(max_tuple_3, l[j][i])\n    return max_tuple, max_tuple_2, max_tuple_3\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(a,b):\n        return (a+b) if amicable_number(a) and amicable_number(b) else 0\n    \n    def amicable_number(n):\n        if n < 2:\n            return False\n        for i in range(2,n):\n            if sum_amicable_numbers(i,n) == n:\n                return True\n        return False\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    for i in range(2, limit):\n        # Initialize the value of both amicable numbers\n        amicable_sum = 0\n        # Check whether the amicable numbers are different\n        for j in range(2, i):\n            if i % j == 0:\n                if i == j:\n                    continue\n                else:\n                    amicable_sum = 0\n                    amicable_numbers.append(i)\n                    break\n        if amicable_sum!= 0:\n            sum += i\n    return sum, amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # O(n^2)\n    amicable = []\n    for i in range(2, limit):\n        j = 1\n        n = i\n        while j <= n and j < n:\n            if i % j == 0 and n % j == 0:\n                # print(i, j)\n                n = i + j\n                break\n            j += 1\n        else:\n            amicable.append(i)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        j = 1\n        while j < i and j <= limit:\n            if i!= j and i + j == i * j:\n                amicable_numbers.add(i)\n                amicable_numbers.add(j)\n            j += 1\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i) and is_amicable(sum + i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for number in range(1, limit):\n        if amicable_sum(number, number) == number:\n            amicable_numbers.add(number)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    for i in range(1, limit):\n        sum_of_other_num = 0\n        for j in range(1, i):\n            if i == j:\n                continue\n            if i % j == 0:\n                sum_of_other_num += j\n        if sum_of_other_num == i:\n            amicable_numbers.append(i)\n    return sum + sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create two dictionaries to store the sum of each amicable number and its sum.\n    amicable_numbers_sum_dict = {}\n    amicable_numbers_sum_sum_dict = {}\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    for num in range(1, limit):\n        if num < 2:\n            continue\n        elif num == 2:\n            amicable_numbers.append(num)\n        else:\n            divisors = []\n            for i in range(1, num):\n                if num % i == 0:\n                    divisors.append(i)\n            if sum(divisors) == num:\n                amicable_numbers.append(num)\n                sum += num\n    return amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if i == sum(num for num in range(1, i) if i % num == 0) and i!= sum(num for num in range(2, i) if i % num == 0):\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.phase(a+b)\n    return cmath.phase(a+b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=a.real\n    y=a.imag\n    z=b.real\n    w=b.imag\n    return cmath.phase(complex(x,y))+cmath.phase(complex(z,w))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = (a**2 + b**2 -1 )**0.5\n    t = cmath.acos(complex(a,b))\n    return (t)\nprint(angle_complex(1,0))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    realPart = a.real\n    imagPart = a.imag\n    angle = cmath.phase(a)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+bj)\n    \na=complex(3,4)\nprint(angle_complex(a,1))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+bj)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(a.imag*b.imag + a.real*b.real)/(abs(a)*abs(b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = (a*b.conjugate())\n    return (cmath.phase(c))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(a+b*1j))\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0, count1 = 0, 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        elif string[i] == '1':\n            count1 += 1\n    return max(count0 - count1, 0)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    len_zero = 0\n    len_one = 0\n    temp = ''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            len_zero += 1\n        else:\n            len_one += 1\n        if len_zero!= len_one:\n            if len_zero > len_one:\n                max_diff = max(max_diff, len_zero - len_one)\n            elif len_zero < len_one:\n                max_diff = max(max_diff, len_one - len_zero)\n            else:\n                max_diff = max(max_diff, len_zero)\n        if len_one!= len_zero:\n            temp += string[i]\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    window = 0\n    zero = 0\n    one = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero += 1\n        else:\n            one += 1\n        if i >= window:\n            if one == 0 and zero > window:\n                window = zero\n            zero = 0\n            one = 0\n    return window"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = 0\n    r = 0\n    result = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    global max_diff \n    global pattern \n    for i in range(0,len(string)):\n        pattern = string[i]\n        print(pattern)\n        if pattern == '0':\n            print(\"0\")\n            sub_pattern = pattern[1:]\n            print(sub_pattern)\n            sub_length = find_length(sub_pattern)\n            print(sub_length)\n            if max_diff < sub_length:\n                max_diff = sub_length\n        else:\n            print(\"1\")\n            sub_pattern = pattern[:-1]\n            print(sub_pattern)\n            sub_length = find_length(sub_pattern)\n            print(sub_length)\n            if max_diff < sub_length:\n                max_diff = sub_length\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    i = 0\n    while (i < len(string)):\n        #print(i, ans)\n        if string[i] == '1':\n            ans = max(ans, string[i+1:].find('0'))\n        elif string[i] == '0':\n            ans = max(ans, string[i+1:].find('1'))\n        i = i+1\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # string = \"0\" + string + \"1\"\n    # diff = 0\n    # for i in range(len(string)):\n    #     if string[i] == \"0\":\n    #         diff = max(diff, len(string) - i)\n    #     else:\n    #         diff = max(diff, i)\n    # return diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    count_0 = 0\n    count_1 = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    def count_0_1(s):\n        count_0 = 0\n        count_1 = 0\n        for i in range(len(s)):\n            if s[i] == \"0\":\n                count_0 += 1\n            else:\n                count_1 += 1\n        return count_0, count_1\n        \n    def find_sub_str(s):\n        max_dif = -1\n        sub_str = \"\"\n        for i in range(len(s)):\n            count_0, count_1 = count_0_1(s[i:])\n            if count_0 == 0 and count_1 == 0:\n                if max_dif < 0:\n                    max_dif = i\n                    sub_str = s[i:]\n            elif count_0 == 0 and count_1!= 0:\n                sub_str = s[i:i+count_1]\n                max_dif = i\n            elif count_0!= 0 and count_1 == 0:\n                sub_str = s[i:i+count_0]\n                max_dif = i\n            elif count_0!= 0 and count_1!= 0:\n                if abs(count_0 - count_1) > max_dif:\n                    max_dif = abs(count_0 - count_1)\n                    sub_str = s[i:i+count_0+count_1]\n        return sub_str, max_dif\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    size = len(string)\n    max_diff = 0\n    zeroes = 0\n    ones = 0\n    for i in range(size):\n        if string[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n        if zeroes > max_diff:\n            max_diff = zeroes\n        if ones > max_diff:\n            max_diff = ones\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            c.append(i)\n    print(sum(c))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div_num1 = []\n    div_num2 = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            div_num1.append(i)\n    for i in range(1, b+1):\n        if b % i == 0:\n            div_num2.append(i)\n    l_num1 = len(div_num1)\n    l_num2 = len(div_num2)\n    s_num1 = sum(div_num1)\n    s_num2 = sum(div_num2)\n    if l_num1 == l_num2:\n        ans = s_num1+s_num2\n    else:\n        ans = -1\n    return ans\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors_a = set()\n    divisors_b = set()\n    for i in range(1,int(math.ceil(math.sqrt(a)))+1):\n        if a%i==0:\n            divisors_a.add(i)\n    for i in range(1,int(math.ceil(math.sqrt(b)))+1):\n        if b%i==0:\n            divisors_b.add(i)\n    \n    common_divisors = divisors_a.intersection(divisors_b)\n    sum_common_divisors = 0\n    for i in common_divisors:\n        sum_common_divisors+=i\n    return sum_common_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b//gcd(a,b)\ndef lcm(a,b): \n    '''\n    Write a python function to find the least common multiple of two given numbers.\n    '''\n    return (a*b)//gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor=[]\n    result=[]\n    if a<b:\n        for i in range(1, a+1):\n            if a % i == 0 and b % i == 0:\n                divisor.append(i)\n        for j in range(1, len(divisor)+1):\n            for k in range(1, len(divisor)+1):\n                if j==k:\n                    result.append(divisor[j-1])\n    else:\n        for i in range(1, b+1):\n            if a % i == 0 and b % i == 0:\n                divisor.append(i)\n        for j in range(1, len(divisor)+1):\n            for k in range(1, len(divisor)+1):\n                if j==k:\n                    result.append(divisor[j-1])\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = a\n    while c >= b:\n        if(a%c==0) and (b%c==0):\n            sum = sum + c\n            break\n        c -= 1\n    print(sum)\nsum(28,7"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    \n    elif a>b:\n        divisors=[]\n        for i in range(1,a+1):\n            if a%i==0 and b%i==0:\n                divisors.append(i)\n        return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= min(a,b):\n        if a % i == 0 and b % i == 0:\n            sum = sum + i\n        i = i + 1\n    print(\"Common divisors of two numbers are %d and %d\" % (a,b))\n    print(\"The sum of common divisors is %d\" % (sum))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    if a == 1:\n        return 0\n    else:\n        c = 0\n        for i in range(1,math.ceil(math.sqrt(a))):\n            if a % i == 0:\n                if a == i:\n                    c = c + a\n                elif a == a//i:\n                    c = c + (a//i)*i\n                else:\n                    c = c + a//i\n    \n        return c\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0 \n    i = 1\n    while i <= a: \n        if a % i == 0 and b % i == 0: \n            sum = sum + i \n        i = i + 1\n    print(\"sum of common divisors of two numbers is: \",sum)\n    \nsum(9,16)"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(x*y)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for word in str:\n        if len(word) > n:\n            long.append(word)\n    return long\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for i in str:\n        if len(i)>n:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [s for s in str.split(' ') if len(s) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [' '.join(word) for word in str if len(word) >= n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = str.split()\n    word_dict = {}\n    for word in word_list:\n        if len(word) >= n:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) >= n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return list(filter(lambda x: len(x) > n, str))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0 or my_matrix == [[]]:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return sum(n*n for n in range(1,len(my_matrix)+1)) == sum(row_sum_col*col_sum_row for row_sum_col, col_sum_row in zip(zip(*my_matrix), my_matrix))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # my_matrix = [[5, 3, 4],\n    #             [6, 7, 2],\n    #             [1, 8, 9]]\n    \n    # n = len(my_matrix)\n    # for i in range(n):\n    #     if sum(my_matrix[i])!= sum(my_matrix[i][j] for j in range(n)):\n    #         print(\"It's not a magic square\")\n    #         return False\n    #     if len(set(my_matrix[i]))!= n:\n    #         print(\"It's not a magic square\")\n    #         return False\n    # print(\"It's a magic square\")\n    # return True\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    \n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    \n    \n    \n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    # O(n^2)\n    \n    "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix = my_matrix\n    row_count = len(matrix)\n    col_count = len(matrix[0])\n    if row_count!= col_count:\n        return False\n    #row_count = row_count\n    #col_count = col_count\n    for i in range(row_count):\n        if row_count!= sum(matrix[i]):\n            return False\n    for i in range(col_count):\n        col_sum = 0\n        for j in range(row_count):\n            col_sum += matrix[j][i]\n        if col_sum!= row_count:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        if len(my_matrix) == len(my_matrix[i]):\n            matrix_check = True\n            if len(my_matrix) > 1:\n                for j in range(len(my_matrix)):\n                    if len(my_matrix[j]) == len(my_matrix[i]):\n                        matrix_check = False\n                        break\n            if matrix_check == True:\n                if not set(my_matrix[i]).issubset(set(range(1, len(my_matrix) + 1))):\n                    return False\n                else:\n                    for j in range(len(my_matrix)):\n                        if my_matrix[i][j]!= my_matrix[j][i]:\n                            return False\n                    return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list) or not len(my_matrix) == len(my_matrix[0]) or not isinstance(my_matrix[0], list) or len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for i in range(len(my_matrix)):\n        if not isinstance(my_matrix[i], list) or not len(my_matrix[i]) == len(my_matrix[i]) or not isinstance(my_matrix[i][0], int):\n            return False\n    s = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            s += my_matrix[i][j]\n    if s!= 225:\n        return False\n    s = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            s += my_matrix[j][i]\n    if s!= 225:\n        return False\n    s = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            s += my_matrix[i//2][j//2]\n    if s!= 225:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    print(my_matrix)\n    \n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"This is not a magic square because the length of the matrix is not equal to the length of each row.\")\n        return False\n    \n    if sum([sum(row) for row in my_matrix])!= sum([sum(row) for row in zip(*my_matrix)]):\n        print(\"This is not a magic square because the sum of each row does not equal to the sum of each column.\")\n        return False\n    \n    if sum([max(row) for row in my_matrix])!= sum([max(row) for row in zip(*my_matrix)]):\n        print(\"This is not a magic square because the maximum of each row does not equal to the maximum of each column.\")\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list):\n        raise TypeError('Argument must be a matrix')\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[0]):\n            raise TypeError('Argument must be a square matrix')\n    if len(my_matrix)!= len(set(my_matrix)):\n        raise ValueError('Argument must be a magic square')\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        print(\"Magic square matrix but it is not square.\")\n        return False\n    m = int(math.sqrt(n))\n    if (n % m)!= 0:\n        print(\"Magic square matrix but it is not square.\")\n        return False\n    if my_matrix == magic_square_row(my_matrix):\n        print(\"Magic square matrix.\")\n        return True\n    else:\n        print(\"Not magic square matrix.\")\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n == 0:\n        return False\n    if n > 0 and n < 4:\n        return False\n    for i in range(n):\n        if len(my_matrix[i])!= n:\n            return False\n        if len(my_matrix[i]) == 0:\n            return False\n        for j in range(n):\n            if type(my_matrix[i][j])!= int:\n                return False\n    for i in range(n):\n        temp = 0\n        for j in range(n):\n            temp += my_matrix[i][j]\n        if temp!= 1:\n            return False\n    for i in range(n):\n        temp = 0\n        for j in range(n):\n            temp += my_matrix[j][i]\n        if temp!= 1:\n            return False\n    for i in range(n):\n        temp = 0\n        for j in range(n):\n            temp += my_matrix[i][n - 1 - j]\n        if temp!= 1:\n            return False\n    for i in range(n):\n        temp = 0\n        for j in range(n):\n            temp += my_matrix[n - 1 - i][j]\n        if temp!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    def count(nums, item):\n        '''\n        Count number of occurrences of item in list.\n        '''\n        count = 0\n        for num in nums:\n            if num == item:\n                count += 1\n        return count\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    for num in nums:\n        frequency_dict[num] += 1\n    max_count = 0\n    max_num = 0\n    for key, value in frequency_dict.items():\n        if value > max_count:\n            max_count = value\n            max_num = key\n    return max_num, max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(int)\n    for num in nums:\n        occurrences[num] += 1\n    max_count = max(occurrences.values())\n    max_items = set()\n    for key, val in occurrences.items():\n        if val == max_count:\n            max_items.add(key)\n    return max_items\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_count = 0\n    max_value = 0\n    for i in nums:\n        d[i] += 1\n        if d[i] > max_count:\n            max_count = d[i]\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_count = defaultdict(int)\n    for i in nums:\n        dict_count[i] += 1\n    return max(dict_count, key=dict_count.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_freq = defaultdict(int)\n    max_freq = 0\n    for i in nums:\n        dict_freq[i] += 1\n        if dict_freq[i] > max_freq:\n            max_freq = dict_freq[i]\n    for i in dict_freq:\n        if dict_freq[i] == max_freq:\n            return i\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = defaultdict(int)\n    for n in nums:\n        nums[n] += 1\n    maximum = 0\n    for n in nums:\n        if nums[n] > maximum:\n            maximum = nums[n]\n            result = n\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    return max(d.keys(), key = d.get)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    res = []\n    for s in str1:\n        if s in vowels:\n            res.append(s)\n    return ''.join(res[::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Create a dictionary of vowels.\n    vowels = {\"a\":0, \"e\":0, \"i\":0, \"o\":0, \"u\":0, \"y\":0}\n    # Store the first letter of the string.\n    first_char = str1[0]\n    # Loop through each letter in the string.\n    for letter in str1:\n        # If the letter is a vowel, increase its value in the dictionary.\n        if letter in \"aeiouy\":\n            vowels[letter] += 1\n        # If the letter is not a vowel,\n        # increase the value of the first letter in the dictionary.\n        else:\n            vowels[first_char] += 1\n    # Create a variable that stores the reversed string.\n    reversed_string = \"\"\n    # Loop through the dictionary.\n    for key in vowels:\n        # Add the letter's value times the number of times the letter appears in the string to the reversed string.\n        reversed_string += key*vowels[key]\n    return reversed_string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    result = ''\n    vowels = set(\"aeiou\")\n    for i in str1:\n        if i in vowels:\n            result = result + i\n        else:\n            result = result + '*'\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str2 = list(str1)\n    i = 0\n    j = len(str2)-1\n    while i < j:\n        if str2[i] not in vowels:\n            i += 1\n        if str2[j] not in vowels:\n            j -= 1\n        if str2[i] in vowels and str2[j] in vowels:\n            temp = str2[i]\n            str2[i] = str2[j]\n            str2[j] = temp\n            i += 1\n            j -= 1\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    # vowels = list(vowels)\n    res = \"\"\n    for char in str1:\n        if char not in vowels:\n            res = res + char\n        else:\n            res = res + char.upper()\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = ''\n    for i in str1:\n        if i not in 'aeiouAEIOU':\n            str2 += i\n        else:\n            str2 += 'y'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    \n    # vowels = ['a','e','i','o','u']\n    # str1 = \"amira\"\n    \n    # vowels = ['a','e','i','o','u']\n    # str1 = \"pika\"\n    \n    \n    str2 = ''\n    for c in str1:\n        if c in vowels:\n            str2 += c\n    \n    print(str2)\n    \n    \nreverse_vowels(\"pika\")\nreverse_vowels(\"amira\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    result = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            result = result + str1[i]\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels_list = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_list.append(str1[i])\n            vowels_list.append(\" \")\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    vowel_pos = set()\n    for i,char in enumerate(str1):\n        if char in vowels:\n            vowel_pos.add(i)\n    return ''.join([char for i,char in enumerate(str1) if i not in vowel_pos])\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(str(i) for i in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    my_string = ''\n    for item in tup1:\n        my_string += str(item)\n    return my_string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return (\"\".join(map(str,tup1)))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    print(tup1)\n    return ''.join(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # The idea is to do a bit of math on the list of numbers, subtracting the 1e+6 to eliminate the floating point\n    # representation errors. It's not perfect, but it works.\n    return sum(x-1e+6 for x in nums if x < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-x for x in nums])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not isinstance(nums,list):\n        raise ValueError('nums must be a list')\n    for i in nums:\n        if not isinstance(i,int):\n            raise ValueError('nums must be a list of integers')\n    sum_negativenum = 0\n    for j in nums:\n        if j < 0:\n            sum_negativenum += j\n    return sum_negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x<0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    negativenum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negativenum += nums[i]\n    return negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(i for i in nums if i<0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        sum += -i\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return hexagonal_num(n - 1) + hexagonal_num(n - 2) * 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    return hexagonal_num(n-1) + 2*hexagonal_num(n-2) + 4*hexagonal_num(n-3)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    else:\n        return (2 * n - 1) * (2 * n)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    res = 1\n    \n    for i in range(1, n):\n        res += 6 * i\n    \n    return res\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #create an empty list for storing\n    hex_list = []\n    #begin with a base number\n    for i in range(1,n+1):\n        #add the nth hexagon in to the list\n        hex_list.append(i*(i+1)/2)\n    #return the list\n    return hex_list\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n**2 + 1) / 2 \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return hexagonal_num(n - 1) + 2 * hexagonal_num(n - 2) + hexagonal_num(n - 3)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 1\n    y = 1\n    for i in range(n-1):\n        z = 1 + 3 * (i+1)\n        x = z * (2 * x + 1)\n        y = z * (2 * y + 1)\n    return x + y\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 1 + (n-1) * (2*n + 5)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n**(1/3)) * 2)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes, zeroes = 0, 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes, non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return (len(nums) - nums.count(0)) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # zero = 0\n    # for i in nums:\n    #     if i == 0:\n    #         zero += 1\n    # return zero/len(nums)\n    return len(nums) - len([i for i in nums if i == 0])\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0)/nums.count(1)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # the idea is to count how many zeros and non-zeroes are in the array\n    # (0,0) 0/0 -> 1\n    # (1,1) 0/1 -> 0\n    # (2,1) 0/1 -> 1\n    # (0,0) 0/1 -> 0\n    # (1,2) 0/2 -> 1\n    # (0,0) 0/2 -> 1\n    # (0,0) 0/3 -> 1\n    # (2,0) 0/3 -> 1\n    # (0,1) 0/3 -> 1\n    # (0,0) 1/3 -> 2\n    # (0,0) 0/3 -> 2\n    # (0,0) 0/4 -> 2\n    # (0,1) 0/4 -> 1\n    # (0,0) 0/4 -> 1\n    # (0,0) 1/4 -> 2\n    # (2,0) 1/4 -> 1\n    # (0,1) 1/4 -> 2\n    # (0,1) 1/4 -> 1\n    # (1,0) 1/4 -> 1\n    # (1,0) 1/4 -> 1\n    # (2,1) 1/4 -> 1\n    # (0,1) 1/4 -> 1\n    # (1,1) 1/4 -> 1\n    # (0,1) 1/4 -> 2\n    # (0,1) 0/4 -> 2\n    # (1,0) 0/4 -> 2\n    # (1,1) 0/4 -> 2\n    # (2,1) 0/4 -> 2\n    # (0,1) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (0,2) 0/4 -> 1\n    # (0,1) 0/4 -> 2\n    # (0,0) 0/4 -> 2\n    # (2,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (0,1) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (0,0) 0/4 -> 1\n    # (0,2) 0/4 -> 1\n    # (0,1) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (0,1) 0/4 -> 2\n    # (0,2) 0/4 -> 2\n    # (0,1) 0/4 -> 2\n    # (1,0) 0/4 -> 2\n    # (1,1) 0/4 -> 2\n    # (1,2) 0/4 -> 2\n    # (0,2) 0/4 -> 2\n    # (1,2) 0/4 -> 2\n    # (1,1) 0/4 -> 2\n    # (2,0) 0/4 -> 2\n    # (2,1) 0/4 -> 2\n    # (2,2) 0/4 -> 2\n    # (0,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (0,1) 0/4 -> 1\n    # (0,2) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (0,0) 0/4 -> 1\n    # (0,1) 0/4 -> 1\n    # (0,2) 0/4 -> 1\n    # (0,1) 0/4 -> 2\n    # (1,2) 0/4 -> 2\n    # (1,1) 0/4 -> 2\n    # (2,1) 0/4 -> 2\n    # (2,2) 0/4 -> 2\n    # (1,1) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (0,0) 0/4 -> 1\n    # (0,1) 0/4 -> 2\n    # (0,2) 0/4 -> 2\n    # (1,2) 0/4 -> 2\n    # (1,1) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (0,1) 0/4 -> 1\n    # (0,2) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (0,0) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (0,0) 0/4 -> 1\n    # (0,1) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (2,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (0,1) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (0,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (2,2) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (0,1) 0/4 -> 1\n    # (0,2) 0/4 -> 1\n    # (1,0) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (0,2) 0/4 -> 1\n    # (1,2) 0/4 -> 1\n    # (1,1) 0/4 -> 1\n    # (2,0) 0/4 -> 1\n    # (0"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for item in nums:\n        if item == 0:\n            zeroes += 1\n    return zeroes / (len(nums)-zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    count_zeroes = nums.count(0)\n    return count_zeroes / n\n    \ndef contains(nums,target):\n    '''\n    Write a function to find whether a given target is in a given array.\n    '''\n    # n = len(nums)\n    # for i in range(n):\n    #     if nums[i] == target:\n    #         return True\n    #     else:\n    #         return False\n    nums_set = set(nums)\n    if target in nums_set:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #if all non zeroes are there\n    if len(nums) == 0:\n        return 0\n    #if non zeroes are there\n    elif len(nums) == 1:\n        return 0\n    #if all zeroes\n    elif nums == [0]:\n        return 1\n    #if zeroes are there\n    elif nums == [0]:\n        return 1\n    #if other numbers\n    else:\n        if nums[0] == 0:\n            return zero_count(nums[1:])\n        else:\n            return zero_count(nums[1:]) + zero_count(nums[:1])\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==1:\n        return True\n    if n<0:\n        return False\n    while n%2==0:\n        n=n//2\n    while n>1:\n        if n%2==1:\n            return False\n        n=n//2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n==0):\n        return False\n    while(n!=1):\n        if(n%2==1):\n            return False\n        else:\n            n=n//2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base case \n    if n == 0: \n        return False\n    if n == 1: \n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0):\n        return False\n    if (n == 1):\n        return False\n    return True\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Code here\n    # return not (n == 0 or n == 1)\n    # return not (n == 0 or n == 1 or n % 2 == 0)\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #the list of powers of 2\n    powers_of_two = []\n    \n    #get the powers of 2\n    powers_of_two = get_possible_powers_of_two(powers_of_two)\n    \n    #loop through the number and check if any of the power of two is present.\n    for i in range(2,n+1):\n        if i in powers_of_two:\n            return True\n    return False\n    \ndef get_possible_powers_of_two(powers_of_two):\n    '''\n    returns the list of powers of 2 from the given number.\n    '''\n    powers_of_two = []\n    for i in range(2,n+1):\n        if i not in powers_of_two:\n            powers_of_two.append(i)\n    return powers_of_two\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    #TO DO : Write your solution here\n    \n    res = 0\n    count = 0\n    while n > 1:\n        if (n & 1) == 1:\n            count += 1\n        res = res + n & -res\n        n = n >> 1\n    return True if res == 0 and count > 0 else False\n    \n    \n    \n    #{ "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n >= 2:\n        while n % 2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    if n == 1:\n        return False\n    \n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            return False\n    \n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        return False\n    while n > 1: \n        if n % 2!= 0: \n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = math.pi * r * 2\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = 2*pi*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    if r == 0:\n        return 0\n    else:\n        return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*PI*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    import time\n    print(\"The circumference of a circle is \" + str(2*math.pi*r))\n    time.sleep(2)\n    return\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        lst = test_list[0]\n        for i in range(1, len(test_list)):\n            lst = lst + test_list[i]\n        return lst\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    if len(test_list) == 0:\n        return []\n    if len(test_list) == 1:\n        return test_list[0]\n    singly_list = []\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            singly_list.extend(extract_singly(test_list[i]))\n        else:\n            singly_list.append(test_list[i])\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for item in test_list:\n        for num in item:\n            num_list.append(num)\n    return num_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_result = []\n    for i in test_list:\n        test_result.extend(i)\n    return set(test_result)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_set = set()\n    if type(test_list) == list:\n        for i in test_list:\n            if type(i) == list:\n                list_set = list_set.union(extract_singly(i))\n            else:\n                list_set.add(i)\n    else:\n        list_set = test_list\n    return list_set\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for item in test_list:\n        singly_list += item\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        for x in item:\n            result.add(x)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = set(test_list[i])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            singly_list.append(item)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not test_list:\n        return []\n    \n    return (sum(test_list, []))\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # worst case and best case is O(n)\n    for i in range(len(nums)):\n        min = i\n        for j in range(i,len(nums)):\n            if nums[min] > nums[j]:\n                min = j\n        nums[i], nums[min] = nums[min], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #1\n    def sort_helper(nums, k):\n        if k == 1:\n            nums.sort()\n            return\n        min_idx = find_min(nums)\n        nums.remove(nums[min_idx])\n        sort_helper(nums, k - 1)\n        nums.insert(min_idx, nums[-1])\n        return\n        \n    def find_min(nums):\n        min_idx = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[min_idx]:\n                min_idx = i\n        return min_idx\n        \n    sort_helper(nums, len(nums))\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums.sort(reverse=True)\n    i = len(nums)-1\n    while(i>0):\n        nums.append(nums[i-1])\n        nums.pop(i)\n        i-=1\n    print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #TODO: Write a function to sort a list of elements.\n    n = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #!possible to implement this without a slice\n    max = len(nums)\n    for i in range(max-1, -1, -1):\n        # find the position of largest element\n        pos = nums.index(max)\n        # reverse the nums in that position\n        nums[pos] = nums[i]\n        # move all the elements in front of that position to the back\n        for j in range(i, -1, -1):\n            if nums[j] > nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n            else:\n                break\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        max_element = nums[i]\n        j = i\n        while j > 0 and nums[j - 1] > max_element:\n            nums[j] = nums[j - 1]\n            j -= 1\n        nums[j] = max_element\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = n - 1\n    # Loop from n-1 to 0\n    while i > 0:\n        # Find minimum value\n        m = i\n        while m > 0:\n            if nums[m] < nums[m - 1]:\n                # Swap\n                nums[m], nums[m - 1] = nums[m - 1], nums[m]\n            else:\n                break\n            m -= 1\n        i -= 1\n    # Reverse the list\n    nums.reverse()\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_num = len(nums)\n    while max_num > 1:\n        max_num = max(max_num, nums.index(max(nums[:max_num]))+1)\n        nums = nums[nums.index(max(nums[:max_num])):max_num] + nums[:max_num]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if nums[j]>nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n    print(nums)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_samepair=0\n    #count items in each list\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    count_samepair+=1\n    return count_samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return None\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if (list1[i]==list2[i] and list1[i]==list3[i]):\n            count +=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count=count+1\n    return count\nprint(count_samepair([1,1,1],[1,1,1],[1,1,1]))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if(list1[i]==list2[i] and list1[i]==list3[i]):\n            count+=1\n    print(\"Number of the same items that are in the same position: \",count)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    # iterate over list1\n    for i in range(len(list1)):\n        # iterate over list2\n        for j in range(len(list2)):\n            # iterate over list3\n            for k in range(len(list3)):\n                # if list1[i] == list2[j] == list3[k] and list1[i]!= 0:\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_2_count = 0\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        if len(list1)>1:\n            for i in range(len(list1)):\n                if list1[i]==list2[i] and list1[i]==list3[i]:\n                    list_2_count += 1\n        else:\n            list_2_count += 1\n    else:\n        print(\"input lists are of different length\")\n    return list_2_count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n    print(count)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    Number_of_lists=0\n    for i in Input:\n        if type(i)==list:\n            Number_of_lists+=1\n    return Number_of_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List = []\n    for i in Input:\n        if i not in List:\n            List.append(i)\n    return len(List)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_of_lists = 0\n    for i in range(0, len(Input)):\n        if type(Input[i]) == list:\n            num_of_lists += 1\n    return num_of_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def count_list(input):\n        # This will return the no. of lists present in input tuple.\n        return len(input)-1\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Lists = []\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            Lists.append(Input[i])\n    return len(Lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    no_of_lists = 0\n    if isinstance(Input, list):\n        no_of_lists = 1\n    elif isinstance(Input, tuple):\n        for x in Input:\n            if isinstance(x, list):\n                no_of_lists += 1\n    return no_of_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(0,len(Input)):\n        if type(Input[i])==list:\n            count = count + 1\n    return count\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = 0\n    l = len(Input)\n    for i in range(l):\n        if type(Input[i]) == type([]):\n            x += 1\n    return x\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            count+=1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = 0\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i - 1]) > max:\n            max = abs(arr[i] - arr[i - 1])\n    return max\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    largestDiff = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > largestDiff:\n                largestDiff = abs(arr[i]-arr[j])\n    \n    return largestDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if(diff>max_diff):\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if not arr or not len(arr) or arr[0]<0:\n        return -1\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        if arr[i]>max_diff:\n            max_diff = abs(arr[i]-arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    result = float('-inf')\n    arr.sort()\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    MaxDiff = -sys.maxsize\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > MaxDiff:\n                MaxDiff = abs(arr[i]-arr[j])\n    return MaxDiff"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum = 0\n    for i in range(len(arr)):\n        if abs(arr[i]-arr[i-1])>maximum:\n            maximum = abs(arr[i]-arr[i-1])\n    return maximum\narr = [-12,-7,2,17,-11,4]\nprint(max_Abs_Diff(arr))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    maxdiff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if arr[i] - arr[i-1] > maxdiff:\n            maxdiff = arr[i] - arr[i-1]\n    return maxdiff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0]\n    for i in range(1, len(arr)):\n        if max_diff < abs(arr[i] - arr[i-1]):\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    print('n = {}'.format(n))\n    print('a = {}'.format(a))\n    print('b = {}'.format(b))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = (a * b) / n\n    y = (a * n) - (b * x)\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        x = (n*b) - (a*(n//a))\n        y = (n*a) - (b*(n//b))\n    except:\n        return None\n    if x < 0 or y < 0:\n        return None\n    else:\n        return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = -1\n    y = -1\n    if a == 0:\n        x = 0\n    elif a == -1:\n        x = 1\n    elif b == 0:\n        y = 0\n    elif b == -1:\n        y = 1\n    else:\n        x = 1\n        y = 1\n        for i in range(2, n+1):\n            if i * x + y == n:\n                x = x * -1\n                y = y * -1\n            else:\n                x = x * -1\n                y = y * -1\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    if n < 0:\n        return None\n    for x in range(1, b + 1):\n        for y in range(1, a + 1):\n            if x + y == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, b):\n        for y in range(0, a):\n            if (x*x + y*y) == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n > 0:\n        if (a, b) == (1, 0):\n            x, y = (b, a)\n        elif (b, a) == (1, 0):\n            x, y = (a, b)\n        else:\n            x, y = euclid(a, b, n)\n        return x, y\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    print(a,b,n)\n    if n == a*b:\n        return (a,b)\n    if a > b:\n        for i in range(b, 0, -1):\n            if (a*i) == n:\n                return (a,i)\n    if a < b:\n        for i in range(a, b+1):\n            if (b*i) == n:\n                return (i,b)\n    if a == b:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i]*b[j] == n:\n                return i, j\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    while True:\n        if x*x + y*y == n:\n            break\n        if x*x + y*y < n:\n            x += 1\n        elif x*x + y*y > n:\n            y += 1\n    return x, y\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #pass\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    remove_list = []\n    for i in list1:\n        if i not in list2:\n            remove_list.append(i)\n    for i in remove_list:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l = []\n    l2 = []\n    for i in range(len(list1)):\n        if list1[i] not in l2:\n            l.append(list1[i])\n            l2.append(list1[i])\n    for j in range(len(list2)):\n        if list2[j] not in l:\n            l.append(list2[j])\n    return l\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    list3.extend(list2)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n+sum_series(n-2) if n else 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    n -= 1\n    return (n*(n+1))//2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = 0\n    for i in range(n):\n        x += i\n    return x\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    if n < 0:\n        return result\n    else:\n        result += n // 2\n        return result + sum_series(n - 2)\n        \nprint(sum_series(5))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n==0:\n        return 0\n    return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    s = 0\n    for i in range(0,n//2):\n        s += n-2*i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n==0:\n        return 0\n    if n<0:\n        return 'Invalid input'\n    sum_series = 0\n    for i in range(n+1):\n        sum_series += n-2*i\n    return sum_series\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s.insert(0, 1)\n    s.append(1)\n    for i in range(1, len(s)-1):\n        s[i] = (l/2)*((s[i]**2)-(s[i-1]**2))\n    return sum(s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l*s)*0.5\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi*(s**2)/(4*tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l * s) / (s - 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # A small edge at the end of the polygon,\n    # to avoid division by 0.\n    s += 0.000001\n    # Equation of the polygon,\n    # with the sides that are in the range from 1.000001 to s.\n    # The polygon's surface is the sum of the area of all its trapezoids,\n    # divided by the number of trapezoids.\n    return (s**2 - 1) / 2 * (pi / 2) * (s - 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * s * (s-2*l) / 2\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef circumference_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2*pi*r\ndef circumference_triangle(b, h):\n    '''\n    Write a function to calculate the circumference of a triangle given its base and height.\n    '''\n    return b + h\ndef perimeter_circle(r):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius.\n    '''\n    return pi*r*2\ndef perimeter_triangle(b, h):\n    '''\n    Write a function to calculate the perimeter of a triangle given its base and height.\n    '''\n    return b + h\ndef perimeter_parallelogram(b, h):\n    '''\n    Write a function to calculate the perimeter of a parallelogram given its base and height.\n    '''\n    return b*2\ndef perimeter_trapezoid(b, h):\n    '''\n    Write a function to calculate the perimeter of a trapezoid given its base and height.\n    '''\n    return 2*b + 2*h\ndef area_parallelogram(b, h):\n    '''\n    Write a function to calculate the area of a parallelogram given its base and height.\n    '''\n    return b*h\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*r**2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    return b*h\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef circum_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2*pi*r\ndef circum_triangle(b, h):\n    '''\n    Write a function to calculate the circumference of a triangle given its base and height.\n    '''\n    return b + h\ndef circumference_rectangle(b, h):\n    '''\n    Write a function to calculate the circumference of a rectangle given its base and height.\n    '''\n    return 2*(b + h)\ndef circumference_trapezoid(b, h):\n    '''\n    Write a function to calculate the circumference of a trapezoid given its base and height.\n    '''\n    return 2*(b + h)\ndef circumference_square(b):\n    '''\n    Write a function to calculate the circumference of a square given its length.\n    '''\n    return 4*b\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*(r**2)\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    return b*h\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_parallelogram(b, h):\n    '''\n    Write a function to calculate the area of a parallelogram given its base and height.\n    '''\n    return b*h\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (b*h)/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*(r**2)\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (b*h)/2\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*(r**2)\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (b*h)/2\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_trapezoid(b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given its base and height.\n    '''\n    return (b*h)/2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given its base and height.\n    '''\n    return b*h\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_square(b):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return b**2\ndef area_trapezoid(b, h):\n    '''\n    Write "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*s*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5*pi*(l**2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # length_of_sides = l\n    # number_of_sides = s\n    # area = length_of_sides * number_of_sides * (pi / 2)\n    # print(area)\n    return l * s * (pi / 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (s-2*l) * tan(pi/s)) / 2\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return False\n    divisors = []\n    for x in range(1,int(n/2)+1):\n        if n%x == 0:\n            divisors.append(x)\n    sum1 = sum(divisors)\n    sum2 = n - sum1\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    result = 1\n    for i in range(1, (n//2)+1):\n        if n % i == 0:\n            result = result*i\n    if result == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while (i * i) <= n:\n        if n % i == 0:\n            if n / i == i:\n                return True\n            else:\n                return False\n        i += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return False\n    else:\n        divisors = []\n        for i in range(1, n+1):\n            if n%i == 0:\n                divisors.append(i)\n        if len(divisors) == 2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return div_sum_helper(n,2) == div_sum_helper(n,3)\n    # ans = div_sum_helper(n,2) and div_sum_helper(n,3)\n    # return ans\ndef div_sum_helper(n,k):\n    '''\n    '''\n    ans = 0\n    i = 1\n    while i <= math.ceil(n/k):\n        ans += i\n        if n % i == 0:\n            n = n/i\n        else:\n            i += 1\n    return ans\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    if n <= 2:\n        return False\n    while (i <= n//2):\n        if n%i == 0:\n            if i!= n:\n                return False\n        i += 1\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum_list.append(i)\n    return sum(div_sum_list) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    for i in range(1,n+1):\n        if n%i == 0:\n            return True\n    return False\n    \ndef div_sum2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    for i in range(1,math.ceil(n/2)):\n        if n%i == 0:\n            if i*2 == n:\n                return True\n            else:\n                return False\n            \ndef div_sum3(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    for i in range(1,n):\n        if n%i == 0:\n            return True\n    return False\n    \ndef div_sum4(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    for i in range(1,n+1):\n        if n%i == 0:\n            return True\n    return False\n    \ndef div_sum5(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return True\n        i += 1\n    return False\n    \ndef div_sum6(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n        return False\n        \ndef div_sum7(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    i = 2\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            return True\n        i += 1\n    return False\n    \ndef div_sum8(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    i = 1\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            return True\n        i += 1\n    return False\n    \ndef div_sum9(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    i = 1\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            return True\n        i += 1\n    return False\n    \ndef div_sum10(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum11(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    i = 1\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            return True\n        i += 1\n    return False\n    \ndef div_sum12(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum13(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum14(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum15(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum16(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum17(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum18(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum19(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum20(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum21(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum22(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while i <= math.sqrt(n):\n            if n%i == 0:\n                return True\n            i += 1\n    return False\n    \ndef div_sum23(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n == 0:\n        return False\n    else:\n        i = 1\n        while "
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i==0:\n            divisors.append(i)\n    return sum(divisors)==n\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    for i in range(len(str1)):\n        if str1[i] in count:\n            count[str1[i]] += 1\n        else:\n            count[str1[i]] = 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    str_dict = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic = {}\n    for i in str1:\n        dic.setdefault(i,0)\n        dic[i] += 1\n    return dic\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([i for i in range(len(str1)) if str1.upper().count(str1[i].upper())==1])\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] in d:\n            d[str1[i]] = d[str1[i]] + 1\n        else:\n            d[str1[i]] = 1\n    ans = 0\n    for i in d:\n        if d[i] == 1:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(len(str1)):\n        if(str1[i].upper()==str1[i].lower() and str1[i].islower()):\n            count=count+1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = dict()\n    for i in range(len(str1)):\n        if str1[i].lower() in d:\n            d[str1[i].lower()] += 1\n        else:\n            d[str1[i].lower()] = 1\n    \n    count_alpha = 0\n    for key, value in d.items():\n        count_alpha += value\n    print(count_alpha)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.upper()\n    count_dict = {}\n    \n    for char in str1:\n        count_dict[char] = count_dict.get(char, 0) + 1\n    \n    result = 0\n    \n    for count in count_dict.values():\n        if count == 1:\n            result += 1\n    \n    return result\n    \n    \ndef count_words(str1):\n    '''\n    Write a function that takes a string and returns a dictionary containing the number of occurrences of each word in the string and the word in the string.\n    '''\n    \n    words = str1.split()\n    \n    result = {}\n    \n    for word in words:\n        if word not in result:\n            result[word] = 0\n        result[word] += 1\n    \n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    a = 0\n    str1 = str1.lower()\n    for i in str1:\n        if ord(i) in range(97,123):\n            count += 1\n    print(count)\n    \n    \ndef count_digit_position(str1):\n    '''\n    Write a function to count the number of digits in a string that occur at the same position in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.lower()\n    for i in str1:\n        if ord(i) in range(48,58):\n            count += 1\n    print(count)\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(alphabet)):\n            if str1[i] == alphabet[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)): \n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    if A is None:\n        return count\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] ^ A[j] == 0:\n                    count += 1\n    print(count)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if(A[i]^A[j] == 0):\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in A:\n        if xor(i, 2) % 2 == 0:\n            even += 1\n    return even \n    \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n            else:\n                break\n        \n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                count = count + 1\n    return count \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n >= 1:\n        n = n >> 1\n        if n == 0:\n            break\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    pow = 1\n    while pow < n:\n        pow *= 2\n    return pow"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return False\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==0:\n        return 0\n    else:\n        n=n+1\n        while(True):\n            if(n==2):\n                return n\n            if(n==4):\n                return n\n            if(n%2==0):\n                n=n/2\n                if(n==2):\n                    return n\n            else:\n                n=3*n+1\n                if(n==2):\n                    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x <= n:\n        x = 2 * x\n    return x \n    \nprint(next_power_of_2(17)) # Should print 18\nprint(next_power_of_2(16)) # Should print 32\nprint(next_power_of_2(15)) # Should print 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = n\n    while True: \n        x = x << 1\n        if x >= n:\n            break\n    return x \n    \ndef lcm(a, b): \n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return a * b // gcd(a, b)\n    \ndef gcd(a, b): \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    \n    return gcd(b, a % b)\n    \ndef isPrime(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n <= 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    i = 5\n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False\n        i += 6\n    return True\n    \ndef isPalindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    s = str(n)\n    s = s.replace(' ', '')\n    s = s.replace('-', '')\n    return s == s[::-1]\n    \ndef swap(a, b): \n    '''\n    Write a python function to swap two variables.\n    '''\n    return b, a \n    \ndef swap1(a, b): \n    '''\n    Write a python function to swap two variables without temp variable.\n    '''\n    a, b = b, a\n    \n    \ndef strStr(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    if needle not in haystack:\n        return -1\n    else:\n        return haystack.index(needle)\n    \ndef strStr1(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    for i in range(n-m+1):\n        if haystack[i:i+m] == needle:\n            return i\n    return -1\n    \ndef strStr2(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    if needle == '':\n        return 0\n    if m == 0:\n        return -1\n    for i in range(n-m+1):\n        if haystack[i] == needle[0]:\n            if haystack[i:i+m] == needle:\n                return i\n    return -1\n    \ndef strStr3(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    if needle == '':\n        return 0\n    if m == 0:\n        return -1\n    for i in range(n-m+1):\n        if haystack[i] == needle[0]:\n            if haystack[i:i+m] == needle:\n                return i\n    return -1\n    \ndef strStr4(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    if needle == '':\n        return 0\n    if m == 0:\n        return -1\n    for i in range(n-m+1):\n        if haystack[i] == needle[0]:\n            if haystack[i:i+m] == needle:\n                return i\n    return -1\n    \ndef strStr5(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    if needle == '':\n        return 0\n    if m == 0:\n        return -1\n    if needle == haystack:\n        return 0\n    if needle == haystack[:m]:\n        return 0\n    if haystack[0] == needle[0]:\n        for i in range(m):\n            if haystack[i]!= needle[i]:\n                return -1\n        return i\n    if haystack[0]!= needle[0]:\n        return -1\n    for i in range(n-m+1):\n        if haystack[i] == needle[0]:\n            for j in range(m):\n                if haystack[i+j]!= needle[j]:\n                    break\n            else:\n                return i\n    return -1\n    \ndef strStr6(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    if needle == '':\n        return 0\n    if m == 0:\n        return -1\n    if needle == haystack[:m]:\n        return 0\n    if haystack[0] == needle[0]:\n        for i in range(m):\n            if haystack[i]!= needle[i]:\n                return -1\n        return i\n    if haystack[0]!= needle[0]:\n        return -1\n    for i in range(n-m+1):\n        if haystack[i] == needle[0]:\n            for j in range(m):\n                if haystack[i+j]!= needle[j]:\n                    break\n            else:\n                return i\n    return -1\n    \ndef strStr7(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    if needle == '':\n        return 0\n    if m == 0:\n        return -1\n    if needle == haystack[:m]:\n        return 0\n    if haystack[0] == needle[0]:\n        for i in range(m):\n            if haystack[i]!= needle[i]:\n                return -1\n        return i\n    if haystack[0]!= needle[0]:\n        return -1\n    for i in range(n-m+1):\n        if haystack[i] == needle[0]:\n            for j in range(m):\n                if haystack[i+j]!= needle[j]:\n                    break\n            else:\n                return i\n    return -1\n    \ndef strStr8(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    if needle == '':\n        return 0\n    if m == 0:\n        return -1\n    if needle == haystack[:m]:\n        return 0\n    if haystack[0] == needle[0]:\n        for i in range(m):\n            if haystack[i]!= needle[i]:\n                return -1\n        return i\n    if haystack[0]!= needle[0]:\n        return -1\n    for i in range(n-m+1):\n        if haystack[i] == needle[0]:\n            for j in range(m):\n                if haystack[i+j]!= needle[j]:\n                    break\n            else:\n                return i\n    return -1\n    \ndef strStr9(haystack, needle): \n    '''\n    Write a python function to check if the substring is found in the given string.\n    '''\n    n = len(haystack)\n    m = len(needle)\n    if needle == '':"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # base case\n    if n == 0:\n        return 1\n    \n    # power of 2\n    pow2 = 1\n    # finding next power of 2\n    while pow2 <= n:\n        pow2 <<= 1\n    \n    return pow2 - 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 2\n    while x <= n:\n        x = x * 2\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x=1\n    while x<=n:\n        x=2**(x-1)\n        if x>=n:\n            break\n    return x\nprint(next_power_of_2(5))\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n < 1): \n        return -1\n    p = 1\n    while (p < n): \n        p <<= 1\n    return p\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n    \ndef delete_list(a):\n    '''\n    Write a function to delete a given list element.\n    '''\n    return a.pop(0)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if(a[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \nprint(frequency([1,2,4,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if type(a) is not list:\n        return None\n    c=0\n    for i in range(len(a)):\n        if x==a[i]:\n            c+=1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m > 0 and n < len(list1) - 1:\n        for i in range(m, n+1):\n            sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n+1):\n        result += list1[i]\n    print(result)\n    return result\nsum_range_list([4, 5, 8, 9], 1, 3)                                                                                                                                                                                                "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Find the length of the list\n    n = len(list1)\n    # Find the length of the range\n    r = n - m\n    # Declare the sum as 0\n    sum = 0\n    # Loop through the range and find the sum\n    for i in range(m, m+r):\n        sum += list1[i]\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(m,n+1):\n        sum1 += list1[i]\n    return sum1\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if i >= m and i <= n:\n            count += list1[i]\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) > m and len(list1) > n:\n        if m <= 0 and n <= len(list1):\n            return sum(list1[m:n+1])\n        elif m >= len(list1) and n <= len(list1):\n            return sum(list1[m:])\n        elif m >= len(list1) and n >= len(list1):\n            return sum(list1[m:])\n        elif n > len(list1) and m > len(list1):\n            return sum(list1[m:])\n        elif n < 0 and m <= 0:\n            return sum(list1[m:])\n        else:\n            return sum(list1[m:n+1])\n    else:\n        return list1\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * (math.sin(math.pi/5) * a)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a==0:\n        return 0\n    else:\n        return math.sqrt(a*(2*a-5))\nprint(perimeter_pentagon(3))\nprint(perimeter_pentagon(0))\nprint(perimeter_pentagon(9))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3) * a * a / 2\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a * 3\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return a * a / 2\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a * 4\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    return a * a\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides and the width.\n    '''\n    return a * 2 + b * 2\ndef area_rectangle(a, b):\n    '''\n    Write a function to find the area of a regular rectangle from the length of its sides and the width.\n    '''\n    return a * b\ndef perimeter_rhombus(a, b):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides and the height.\n    '''\n    return 2 * a + 2 * b\ndef area_rhombus(a, b):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides and the height.\n    '''\n    return a * b / 2\ndef perimeter_square_cross(a, b):\n    '''\n    Write a function to find the perimeter of a regular square-cross from the length of its sides and the height.\n    '''\n    return 2 * a + 2 * b + 4 * (a + b)\ndef area_square_cross(a, b):\n    '''\n    Write a function to find the area of a regular square-cross from the length of its sides and the height.\n    '''\n    return a * b / 2\ndef perimeter_round_rectangle(a, b, h):\n    '''\n    Write a function to find the perimeter of a regular round-rectangle from the length of its sides, the width and the height.\n    '''\n    return (a + b) * 2 + 2 * h + 2 * (a + b) * math.sqrt(3) / 2\ndef area_round_rectangle(a, b, h):\n    '''\n    Write a function to find the area of a regular round-rectangle from the length of its sides, the width and the height.\n    '''\n    return a * b / 2 + h * b / 2\ndef perimeter_shape(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular shape from the length of its sides, the width and the height.\n    '''\n    return 2 * a + 2 * b + 2 * c\ndef area_shape(a, b, c):\n    '''\n    Write a function to find the area of a regular shape from the length of its sides, the width and the height.\n    '''\n    return a * b / 2 + b * c / 2 + c * a / 2\ndef perimeter_pentagon_hexagon(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular pentagon-hexagon from the length of its sides, the angles of the legs and the height.\n    '''\n    return 2 * a + 2 * (b + c) + 4 * (a + b) + 2 * (a + c)\ndef area_pentagon_hexagon(a, b, c):\n    '''\n    Write a function to find the area of a regular pentagon-hexagon from the length of its sides, the angles of the legs and the height.\n    '''\n    return a * b / 2 + b * c / 2 + a * c / 2 + 2 * math.sqrt(2) * a * math.sqrt(3) / 3\ndef perimeter_square_hexagon(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular square-hexagon from the length of its sides, the angles of the legs and the height.\n    '''\n    return 2 * a + 2 * (b + c) + 4 * (a + b) + 2 * (a + c)\ndef area_square_hexagon(a, b, c):\n    '''\n    Write a function to find the area of a regular square-hexagon from the length of its sides, the angles of the legs and the height.\n    '''\n    return a * b / 2 + b * c / 2 + a * c / 2 + math.sqrt(2) * a * math.sqrt(3) / 3\ndef perimeter_hexagon_hexagon(a, b, c, d):\n    '''\n    Write a function to find the perimeter of a regular hexagon-hexagon from the length of its sides, the angles of the legs and the height.\n    '''\n    return 2 * a + 2 * (b + c) + 2 * (a + d) + 2 * (b + c)\ndef area_hexagon_hexagon(a, b, c, d):\n    '''\n    Write a function to find the area of a regular hexagon-hexagon from the length of its sides, the angles of the legs and the height.\n    '''\n    return a * b / 2 + b * c / 2 + a * c / 2 + a * d / 2 + b * d / 2 + c * d / 2 + 2 * math.sqrt(2) * a * math.sqrt(3) / 3\ndef perimeter_square_triangle(a, b):\n    '''\n    Write a function to find the perimeter of a regular square-triangle from the length of its sides.\n    '''\n    return a * 2 + b * math.sqrt(3) / 2\ndef area_square_triangle(a, b):\n    '''\n    Write a function to find the area of a regular square-triangle from the length of its sides.\n    '''\n    return a * b / 2\ndef perimeter_pentagon_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon-triangle from the length of its sides.\n    '''\n    return a * 4 - 2 * math.sqrt(3)\ndef area_pentagon_triangle(a):\n    '''\n    Write a function to find the area of a regular pentagon-triangle from the length of its sides.\n    '''\n    return a * math.sqrt(3) / 2\ndef perimeter_hexagon_triangle(a, b):\n    '''\n    Write a function to find the perimeter of a regular hexagon-triangle from the length of its sides.\n    '''\n    return a * 3 + b * math.sqrt(3) / 2\ndef area_hexagon_triangle(a, b):\n    '''\n    Write a function to find the area of a regular hexagon-triangle from the length of its sides.\n    '''\n    return a * b / 2\ndef perimeter_rectangle_rectangle(a, b, c, d):\n    '''\n    Write a function to find the perimeter of a regular rectangle-rectangle from the length of its sides and the width.\n    '''\n    return a * 2 + b * 2 + c * 2 + d * 2\ndef area_rectangle_rectangle(a, b, c, d):\n    '''\n    Write a function to find the area of a regular rectangle-rectangle from the length of its sides and the width.\n    '''\n    return a * b / 2 + b * c / 2 + c * d / 2 + a * d / 2\ndef perimeter_hexagon_hexagon(a, b, c, d, e):\n    '''\n    Write a function to find the perimeter of a regular hexagon-hexagon from the length of its sides and the height.\n    '''\n    return 2 * a + 2 * (b + c) + 2 * (a + d) + 2 * (b + c)\ndef area_hexagon_hexagon(a, b, c, d, "
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s=0.5*a*math.sqrt(5)\n    return 4*s\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((math.sqrt(5) * 2) * a * 4) + a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)+(a*5)/2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (3 * a) + 1.3\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (math.sqrt(3)*a)\ndef square_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (1/2*math.sqrt(3)*a*a)\ndef hexagon_pentagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return (math.sqrt(3)*a/2)\ndef rectangle_pentagon(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_pentagon(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return (a*b*math.sqrt(3) /2)\ndef circle_pentagon(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef square_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length of its sides.\n    '''\n    return (a*a)\ndef rectangle_square(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_square(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2)\ndef circle_square(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef circle_circle(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef square_circle(a):\n    '''\n    Write a function to find the perimeter of a square from its length of its sides.\n    '''\n    return (math.pi*a*a)\ndef rectangle_circle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_circle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2)\ndef rectangle_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return ((a*b)*math.sqrt(2))\ndef triangle_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2*math.sqrt(3))\ndef circle_circle(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef square_circle(a):\n    '''\n    Write a function to find the perimeter of a square from its length of its sides.\n    '''\n    return (math.pi*a*a)\ndef rectangle_circle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_circle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2)\ndef circle_circle(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef square_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length of its sides.\n    '''\n    return (a*a)\ndef rectangle_square(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_square(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2)\ndef circle_square(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef rectangle_circle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_circle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2)\ndef rectangle_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return ((a*b)*math.sqrt(2))\ndef triangle_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2*math.sqrt(3))\ndef circle_rectangle(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef square_rectangle(a):\n    '''\n    Write a function to find the perimeter of a square from its length of its sides.\n    '''\n    return (a*a)\ndef circle_rectangle(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef square_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length of its sides.\n    '''\n    return (a*a)\ndef rectangle_square(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_square(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2)\ndef circle_square(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef square_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length of its sides.\n    '''\n    return (a*a)\ndef rectangle_square(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_square(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)/2)\ndef circle_rectangle(a):\n    '''\n    Write a function to find the area of a regular circle from its radius.\n    '''\n    return (math.pi*a*a)\ndef square_rectangle(a):\n    '''\n    Write a function to find the perimeter of a square from its length of its sides.\n    '''\n    return (a*a)\ndef rectangle_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from its length of its sides.\n    '''\n    return (a*b)\ndef triangle_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from its length of its sides.\n    '''\n    return ((a*b)"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a*math.sqrt(3))/2\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3*a**2/4)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    return math.pi*r**2\ndef area_circle_formula(r):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    return math.pi*r**2\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    return 2*math.pi*r\ndef perimeter_circle_formula(r):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    return 2*math.pi*r\ndef area_paralelogram(a, b):\n    '''\n    Write a function to find the area of a paralelogram.\n    '''\n    return a*b\ndef area_paralelogram_formula(a, b):\n    '''\n    Write a function to find the area of a paralelogram.\n    '''\n    return (a*b)/2\ndef perimeter_paralelogram(a, b):\n    '''\n    Write a function to find the perimeter of a paralelogram.\n    '''\n    return (a+b)*2\ndef perimeter_paralelogram_formula(a, b):\n    '''\n    Write a function to find the perimeter of a paralelogram.\n    '''\n    return (a+b)\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    return a**2\ndef area_square_formula(a):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    return a*a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    return 4*a\ndef perimeter_square_formula(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    return 4*a\ndef area_rectangle(a, b):\n    '''\n    Write a function to find the area of a rectangle from its length and width.\n    '''\n    return a*b\ndef area_rectangle_formula(a, b):\n    '''\n    Write a function to find the area of a rectangle from its length and width.\n    '''\n    return a*b\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its length and width.\n    '''\n    return 2*a + 2*b\ndef perimeter_rectangle_formula(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its length and width.\n    '''\n    return 2*a + 2*b\ndef area_ellipse(a, b):\n    '''\n    Write a function to find the area of an ellipse from its semi-major axis and semi-minor axis.\n    '''\n    return math.pi*(a**2)/4\ndef area_ellipse_formula(a, b):\n    '''\n    Write a function to find the area of an ellipse from its semi-major axis and semi-minor axis.\n    '''\n    return math.pi*(a**2)/4\ndef perimeter_ellipse(a, b):\n    '''\n    Write a function to find the perimeter of an ellipse from its semi-major axis and semi-minor axis.\n    '''\n    return 2*math.pi*(a+b)\ndef perimeter_ellipse_formula(a, b):\n    '''\n    Write a function to find the perimeter of an ellipse from its semi-major axis and semi-minor axis.\n    '''\n    return 2*math.pi*(a+b)\ndef area_rhombus(a, b):\n    '''\n    Write a function to find the area of a rhombus from its length, width and height.\n    '''\n    return math.sqrt(a**2 + b**2)/2\ndef area_rhombus_formula(a, b):\n    '''\n    Write a function to find the area of a rhombus from its length, width and height.\n    '''\n    return math.sqrt(a**2 + b**2)/2\ndef perimeter_rhombus(a, b):\n    '''\n    Write a function to find the perimeter of a rhombus from its length, width and height.\n    '''\n    return 2*(a+b)\ndef perimeter_rhombus_formula(a, b):\n    '''\n    Write a function to find the perimeter of a rhombus from its length, width and height.\n    '''\n    return 2*(a+b)\ndef area_trapezium(a, b, c):\n    '''\n    Write a function to find the area of a trapezium from its length, breadth and height.\n    '''\n    return ((a+b)/2)*c\ndef area_trapezium_formula(a, b, c):\n    '''\n    Write a function to find the area of a trapezium from its length, breadth and height.\n    '''\n    return ((a+b)/2)*c\ndef perimeter_trapezium(a, b, c):\n    '''\n    Write a function to find the perimeter of a trapezium from its length, breadth and height.\n    '''\n    return 2*(a+b+c)\ndef perimeter_trapezium_formula(a, b, c):\n    '''\n    Write a function to find the perimeter of a trapezium from its length, breadth and height.\n    '''\n    return 2*(a+b+c)\ndef area_rectangle_parallelogram(a, b, c):\n    '''\n    Write a function to find the area of a rectangle parallelogram from its length, breadth and height.\n    '''\n    return a*b\ndef area_rectangle_parallelogram_formula(a, b, c):\n    '''\n    Write a function to find the area of a rectangle parallelogram from its length, breadth and height.\n    '''\n    return a*b\ndef perimeter_rectangle_parallelogram(a, b, c):\n    '''\n    Write a function to find the perimeter of a rectangle parallelogram from its length, breadth and height.\n    '''\n    return 2*a + 2*b\ndef perimeter_rectangle_parallelogram_formula(a, b, c):\n    '''\n    Write a function to find the perimeter of a rectangle parallelogram from its length, breadth and height.\n    '''\n    return 2*a + 2*b\ndef area_triangle(a, b, c):\n    '''\n    Write a function to find the area of a triangle from its three sides.\n    '''\n    return (a*b*c)/2\ndef area_triangle_formula(a, b, c):\n    '''\n    Write a function to find the area of a triangle from its three sides.\n    '''\n    return (a*b*c)/2\ndef perimeter_triangle(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its three sides.\n    '''\n    return a+b+c\ndef perimeter_triangle_formula(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its three sides.\n    '''\n    return a+b+c\ndef area_pyramid(a, b, c):\n    '''\n    Write a function to find the area of a pyramid from its base and height.\n    '''\n    return a*b\ndef area_pyramid_formula(a, b, c):\n    '''\n    Write a function to find the area of a pyramid from its base and height.\n    '''\n    return a*b\ndef perimeter_pyramid(a, "
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        raise ValueError(\"a cannot be negative\")\n    return 5*a\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-len('std')+1):\n        if s[i:i+len('std')] =='std':\n            count = count + 1\n    return count\n    \ndef count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s)-len('std')+1:\n        if s[i:i+len('std')] =='std':\n            count = count + 1\n            i = i + len('std')\n        else:\n            i = i + 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            if s[i+1] == 't':\n                if s[i+2] == 'd':\n                    if s[i+3] == 'e':\n                        count += 1\n    return count\n    \ndef count_occurance2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            if s[i+1] == 't':\n                if s[i+2] == 'd':\n                    if s[i+3] == 'e':\n                        count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(';','')\n    s = s.replace(':','')\n    s = s.replace('-','')\n    s = s.replace('/','')\n    s = s.split()\n    occ = 0\n    for word in s:\n        if word =='std':\n            occ += 1\n    return occ\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd' and s[i+1] == 'd':\n            count += 1\n    return count\nprint(count_occurance(\"bdssdssdddssd\"))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def decorator(func):\n        def wrapper(test_tuple):\n            if all(isinstance(x, type(test_tuple[0])) for x in test_tuple):\n                return func(test_tuple)\n            else:\n                raise TypeError\n        return wrapper\n    return decorator\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code here\n    if not isinstance(test_tuple,tuple):\n        print(\"Not a tuple\")\n        return\n    for i in test_tuple:\n        if not isinstance(i,int):\n            print(\"Not an integer\")\n            return\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) == tuple:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if (type(test_tuple) == tuple):\n        if len(test_tuple) == 0:\n            return False\n        else:\n            for item in test_tuple:\n                if not (type(item) == int or type(item) == float):\n                    return False\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    i=0\n    check_type=[]\n    while i<len(test_tuple):\n        if type(test_tuple[i])==type(test_tuple[0]):\n            check_type.append(True)\n        else:\n            check_type.append(False)\n        i=i+1\n    return check_type\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for t in test_tuple:\n        if type(t)!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Your Code Here\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        print('Tuple is empty.')\n        return\n    else:\n        length = len(test_tuple)\n        i = 0\n        for item in test_tuple:\n            if i == 0:\n                tmp = item\n                i = 1\n            else:\n                if type(tmp)!= type(item):\n                    print('Type mismatch in tuple:', test_tuple)\n                    return\n    print('All elements have same type.')\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # Make sure you pass a tuple as an argument\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Test_tuple should be a tuple\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_d = {}\n    for i in test_tuple:\n        if i in type_d:\n            if type_d[i]!= type(i):\n                print(f\"Not same type for {i}\")\n                return False\n        else:\n            type_d[i] = type(i)\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if (n == 1) and (arr[0] == x):\n        return True\n    if (n == 1) and (arr[0]!= x):\n        return False\n    count = 1\n    index = 0\n    for i in range(1, n):\n        if (arr[i] == x):\n            count += 1\n        if (arr[i]!= x):\n            count -= 1\n        if (count == 0):\n            index = i\n            break\n    if count > (n/2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    cnt = 0\n    for i in range(n):\n        if arr[i] == x:\n            cnt += 1\n    if cnt > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n == 0 or n == 1:\n        return False\n    \n    # current element\n    m = arr[n-1]\n    \n    # find the first occurence\n    i = n - 2\n    while i >= 0:\n        if m == arr[i]:\n            return False\n        else:\n            i -= 1\n    \n    # find the second occurence\n    i = n - 2\n    while i >= 0:\n        if m == arr[i]:\n            return False\n        else:\n            i -= 1\n    \n    # find the third occurence\n    i = n - 2\n    while i >= 0:\n        if m == arr[i]:\n            return False\n        else:\n            i -= 1\n    \n    # if the element is the majority element, then return true\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[0] == x:\n        return True\n    elif arr[0]!= x and arr[n-1] == x:\n        return True\n    elif arr[0]!= x and arr[n-1]!= x:\n        return False\n    if arr.count(x) > n//2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # First, we use a helper function to compare the element with all other elements in the array and check if that element is the majority element or not.\n    # If yes, then return True. Else, return False.\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If length of array is equal to 1 then return true\n    if n == 1:\n        return True\n    # If the length is greater than 1\n    # If the array[i] == x, increment count and return true\n    # If the array[i]!= x and count is less than n/2, increment count and return false\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count >= n//2:\n                return True\n        else:\n            count = 0\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return False\n    if x == arr[0]:\n        return True\n    if x == arr[n-1]:\n        return True\n    if x == arr[int((n/2)-1)]:\n        return True\n    if x == arr[int(n/2)]:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if arr[n//2] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    '''\n    In a sorted array, there is a majority element if there are more than n/2 elements, or if the majority element appears in the middle of the array. If the majority element appears at the beginning or end of the array, we will assume that the array contains a majority element. In this case, we will consider the majority element to be the element in the middle of the array.\n    '''\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n &= (n-1) #perform AND to keep only the least significant bit \n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0\n    while n:\n        cnt += 1\n        n = n & (n - 1)\n    return cnt"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    for i in range(n.bit_length()):\n        if n & 1 == 1:\n            res += 1\n        n >>= 1\n    return res\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n - 1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n:\n        c += 1\n        n &= (n - 1)\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n>0:\n        n=n&(n-1)\n        count=count+1\n    return count\nprint(count_Set_Bits(9))"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n &= (n-1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # as we know that every set bit is 1\n    # so if we count the number of 1s in an binary number\n    # we will get our result\n    return bin(n).count('1')\n    \ndef count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # as we know that every set bit is 1\n    # so if we count the number of 1s in an binary number\n    # we will get our result\n    return bin(n).count('1')\n    "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while(n):\n        if(n & 1):\n            c += 1\n        n = n >> 1\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # using int()\n    '''\n    a=int(input(\"enter any number\"))\n    count=0\n    while (a>0):\n        if (a&1) == 1:\n            count=count+1\n        a=a>>1\n    print(count)\n    '''\n    # using Bit operations\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str[::2]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Your code here\n    s = str\n    l = len(s)\n    for i in range(0,l):\n        if i%2 == 0:\n            s = s[0:i]+s[i+1:]\n    print(s)\n    return s\nodd_values_string(\"abcd\") # 'bcd'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str[0::2]\n    return string\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = list(str)\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            lst.pop(i)\n    return ''.join(lst)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    index = 0\n    for i in range(len(str)):\n        if index % 2 == 0:\n            result += str[i]\n        index += 1\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string = new_string + str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.split()\n    s = ''\n    for i in range(0,len(str)):\n        if i%2==0:\n            s = s+str[i]\n    return s\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[0:len(str):2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    count = 0\n    \n    for i in range(len(str)):\n        if(i % 2 == 0):\n            continue\n        else:\n            count += 1\n    \n    final_str = str[:count]\n    print(final_str)\n    \n    return final_str\n        \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for i in str if (int(i) % 2!= 0)])\n    \nprint(odd_values_string(\"mango\"))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return c\n    elif a < b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\nprint(min_of_three(3,2,1)"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    return a\nprint(min_of_three(1,2,3))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        print(f'{a} is the min')\n    elif b>a and b>c:\n        print(f'{b} is the min')\n    else:\n        print(f'{c} is the min')\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    elif c<a<b:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    if b<a<c:\n        return b\n    if c<a<b:\n        return c\n    return None\nprint(min_of_three(1,3,2))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    '''\n    #Explanation\n    ##for every bit, check whether that bit is set or not. If not set, then return false.\n    '''\n    \n    #check whether number is in range or not\n    if n < l or n > r:\n        return False\n    \n    #if number in range, check whether that bit is set or not\n    if (n >> l & 1) == 1:\n        return False\n    \n    if (n >> r & 1) == 1:\n        return False\n    \n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def allBitsSetInRange(l,r):\n        return r-l+1==2**len(bin(l))-2\n    if(n<=1 and l==r):\n        return 0\n    else:\n        return allBitsSetInRange(l,r) or all_Bits_Set_In_The_Given_Range(n-1,l,r)\n    \ndef no_of_one_bits_set_in_the_given_range(n,l,r):\n    '''\n    Write a python function to count the number of one bits that are set in the given range or not.\n    '''\n    def noOf1s_Set_In_The_Given_Range(l,r):\n        count=0\n        while(l<=r):\n            if(l&1):\n                count+=1\n            l=l>>1\n        return count\n    if(n==0 and l==r):\n        return 0\n    else:\n        return noOf1s_Set_In_The_Given_Range(l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n < 0:\n        print(\"N should be a positive number\")\n    else:\n        while n > 0:\n            if n%2!= 0:\n                print(\"{}\".format(n))\n            n = n//2\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    def _all_Bits_Set_In_The_Given_Range(n,l,r):  \n        '''\n        Write a python function to check whether all the bits are unset in the given range or not.\n        '''\n        \n        mask = 1<<n-1\n        while mask:\n            if (mask & l) and (mask & r):\n                return False\n            mask >>= 1\n        return True\n    return _all_Bits_Set_In_The_Given_Range(n,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #code here\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    count=0\n    for i in range(l,r+1):\n        for j in range(0,n):\n            if(i>>j)&1:\n                count+=1\n    if count==n:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    num_of_bits = int(math.log(n,2))+1\n    print(num_of_bits)\n    if l <= 0:\n        l = 0\n    if r >= (2**num_of_bits):\n        r = 2**num_of_bits-1\n    while l <= r:\n        if bin(l).count('1') == num_of_bits:\n            print(f\"{l}\")\n            return False\n        else:\n            l += 1\n    return True\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def Count(n,k):\n        count=0\n        while(n):\n            if(n&1==1):\n                count=count+1\n            n=n>>1\n        return count\n    count=0\n    if(n>=l and n<=r):\n        for i in range(l,r+1):\n            count=Count(i,k)\n            if(count>=k):\n                return False\n        return True\n    return False\n    '''\n    from math import log2\n    k=log2(n)\n    if((k+1)<=r):\n        for i in range(l,r+1):\n            count=Count(i,k)\n            if(count>=k):\n                return False\n        return True\n    return False\n    '''\n    '''\n    from math import log2\n    k=log2(n)\n    if((k+1)>=l and k<=r):\n        for i in range(l,r+1):\n            count=Count(i,k)\n            if(count>=k):\n                return False\n        return True\n    return False\n    '''\ndef Check_If_The_Number_Is_Prime_Number(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    def gcd(a,b):\n        while(b):\n            a,b=b,a%b\n        return a\n    def IsPrime(n):\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n        i=3\n        while(i*i<=n):\n            if(n%i==0):\n                return False\n            i+=2\n        return True\n    if(n==0):\n        return False\n    if(n==1):\n        return False\n    n=abs(n)\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set_Bits = '0'*n\n    print (set_Bits)\n    for i in range(l,r+1):\n        set_Bits = set_Bits.replace(str(i),'1',1)\n    if set_Bits == set_Bits[::-1]:\n        print(\"All Bits are Unset\")\n    else:\n        print(\"All Bits are Set\")\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = l\n    \n    while i <= r:\n        if is_All_Bits_Set_In_Range(i, n):\n            print('All Bits are Set in the Range')\n            break\n        i += 1\n    \n    else:\n        print('All Bits are Not Set')\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    if len(arr) >= n:\n        arr.sort()\n        return arr\n    else:\n        return -1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # put negs first, then pos\n    negs = []\n    pos = []\n    for i in range(0, n):\n        if arr[i] < 0:\n            negs.append(arr[i])\n        else:\n            pos.append(arr[i])\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count_negative = 0\n    count_positive = 0\n    first = 0\n    second = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            count_negative += 1\n        else:\n            count_positive += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] < 0:\n            arr.pop(i)\n            i -= 1\n            continue\n        elif i == len(arr)-1:\n            arr.pop(i)\n            break\n        elif arr[i] > 0:\n            i += 1\n            continue\n        else:\n            arr.pop(i)\n            i -= 1\n            break\n    \n    for i in range(len(arr)-1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # count_negatives = 0\n    # count_positives = 0\n    # for element in arr:\n    #     if element > 0:\n    #         count_positives += 1\n    #     elif element < 0:\n    #         count_negatives += 1\n    #     else:\n    #         pass\n    # assert count_negatives >= count_positives\n    #\n    # if count_negatives > count_positives:\n    #     assert count_negatives - count_positives == n\n    #     return arr[n:] + arr[:n]\n    #\n    # elif count_positives > count_negatives:\n    #     assert count_positives - count_negatives == n\n    #     return arr[n:] + arr[:n]\n    #\n    # else:\n    #     return arr\n    \n    negatives_left = n\n    positives_left = n\n    negatives_right = 0\n    positives_right = 0\n    negative_idx = 0\n    positive_idx = 0\n    negative_elements = []\n    positive_elements = []\n    \n    while negatives_left > 0 and positives_left > 0:\n        if arr[negative_idx] < 0:\n            negatives_left -= 1\n            negative_elements.append(arr[negative_idx])\n        else:\n            positive_elements.append(arr[positive_idx])\n            positives_left -= 1\n        \n        if arr[positive_idx] < 0:\n            negatives_right += 1\n        else:\n            positives_right += 1\n        \n        negative_idx += 1\n        positive_idx += 1\n    \n    while negatives_left > 0:\n        negative_elements.append(arr[negative_idx])\n        negatives_left -= 1\n        negative_idx += 1\n    \n    while positives_left > 0:\n        positive_elements.append(arr[positive_idx])\n        positives_left -= 1\n        positive_idx += 1\n    \n    return negative_elements + positive_elements + negative_elements\n    # for negative in negative_elements:\n    #     for positive in positive_elements:\n    #         arr.remove(negative)\n    #         arr.remove(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    #         arr.append(negative)\n    #         arr.append(positive)\n    "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    pos = n - 1\n    neg = 0\n    for element in arr:\n        if element > 0:\n            result.append(element)\n            pos -= 1\n            if neg < pos:\n                result.append(element)\n        else:\n            result.append(element)\n            neg += 1\n            if neg < pos:\n                result.append(element)\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n < len(arr) and n > 0:\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] < 0:\n                count += 1\n        \n        arr = arr[:n] + arr[n:][::-1]\n        arr[:n] = arr[:n][::-1]\n        if count > 0:\n            arr = arr[:count] + arr[count:][::-1]\n        return arr\n    else:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    n = n - 1\n    arr.sort()\n    while n!= i:\n        if arr[i] < 0:\n            arr[n], arr[i] = arr[i], arr[n]\n            n -= 1\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            i += 2\n        else:\n            i += 1\n    return arr\n    \n    \ndef reverse(array):\n    '''\n    Write a function that takes in an array and reverses it in place. Do this without creating a brand new array and without using any other data structure.\n    '''\n    i = 0\n    j = len(array) - 1\n    while i < j:\n        array[i], array[j] = array[j], array[i]\n        i += 1\n        j -= 1\n    return array\n    \ndef convert_to_binary(number):\n    '''\n    Write a function that takes in a non-negative integer and returns that integer in its binary representation. For example, the binary representation of 5 is 101.\n    '''\n    binary = []\n    while number!= 0:\n        if number % 2 == 1:\n            binary.append(1)\n        else:\n            binary.append(0)\n        number = number >> 1\n    return \"\".join(binary)\n    \ndef get_last_word(sentence):\n    '''\n    Write a function that takes in a sentence and returns the last word of the sentence, which has the most letters. The last word is the word that comes last when the sentence is read from right to left.\n    '''\n    if sentence == \"\":\n        return None\n    elif sentence.find(\" \") == -1:\n        return sentence[::-1]\n    else:\n        return sentence[sentence.rfind(\" \") + 1::-1]\n    \ndef make_sentence(words):\n    '''\n    Write a function that takes in a non-empty array of words and returns a properly formatted string. Words will be separated by spaces.\n    '''\n    if words == None or len(words) == 0:\n        return None\n    elif len(words) == 1:\n        return words[0]\n    else:\n        return \" \".join(words[0:len(words)-1]) + \" \" + words[len(words)-1]\n        \ndef find_odd_occurences(array):\n    '''\n    Write a function that takes in a non-empty array of integers, and returns a new array where the indices of the first occurance of each odd number have been removed. The order of the removed numbers should be the same as it was in the original array.\n    '''\n    odd = []\n    i = 0\n    while i < len(array):\n        if array[i] % 2 == 1:\n            odd.append(array[i])\n        else:\n            i += 1\n    return odd\n        \ndef print_even_digits(n):\n    '''\n    Write a function that takes in a positive integer and returns a string containing only the even digits in the given integer.\n    '''\n    if n == 0:\n        return \"\"\n    elif n < 0:\n        return \"\"\n    else:\n        string = str(n)\n        result = \"\"\n        for i in range(0, len(string)):\n            if i % 2 == 0:\n                result += string[i]\n        return result\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        index = arr.index(-1)\n        arr[i], arr[index] = arr[index], arr[i]\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    return str1\ndef is_palindrome(str1):\n    '''\n    Write a function that takes in a string, and returns a boolean indicating whether the string is a palindrome.\n    '''\n    str1=replace_blank(str1,\"\")\n    if len(str1)==0 or len(str1)==1:\n        return True\n    else:\n        return str1[0]==str1[-1] and is_palindrome(str1[1:-1])\ndef break_words(stuff):\n    '''\n    Write a function that will break up words for us.\n    '''\n    words=stuff.split(' ')\n    return words\ndef sort_words(words):\n    '''\n    Write a function that will sort the words.\n    '''\n    words.sort()\n    return words\ndef print_first_word(words):\n    '''\n    Write a function that prints the first word after popping it off.\n    '''\n    word=words.pop(0)\n    print(word)\ndef print_last_word(words):\n    '''\n    Write a function that prints the last word after popping it off.\n    '''\n    word=words.pop(-1)\n    print(word)\ndef sort_sentence(sentence):\n    '''\n    Write a function that takes in a full sentence and returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sentence(words))\n    print_last_word(sort_sentence(words))\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that prints the first and last words of the sentence in alphabetical order.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\n    print_first_word(sort_sen"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=str1.replace(' ','')\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('  ',' ')\n    return str1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\").replace(char,\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for x in str1:\n        if x!= \" \":\n            str2 += x\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    string = str1.replace(\" \", char)\n    return string\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    return str1\nstr1='A computer, a person, and a '\nstr1=replace_blank(str1,'a')\nprint(str1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        if len(l)<n:\n            heapq.heappush(l,list1[i])\n        else:\n            if list1[i]>l[0]:\n                heapq.heapreplace(l,list1[i])\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    list1.sort()\n    for i in range(n):\n        heapq.heappush(heap,list1[-i-1])\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    for i in range(n):\n        heapq.heappush(list1, -1*heapq.heappop(list1))\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1=list1[-n:]\n    return list1\nprint(larg_nnum([10,4,20,4,5,4],1))\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap,list1[i])\n    for j in range(n,len(list1)):\n        if list1[j]>max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap,list1[j])\n    return max_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the items in descending order\n    list1.sort(reverse=True)\n    # return the items with the n largest values\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def comp_num(n1,n2):\n        if n1>n2:\n            return 1\n        else:\n            return -1\n    return sorted(list1,key=lambda x: x,reverse=True)[n]\ndef larg_n2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def comp_num(n1,n2):\n        if n1>n2:\n            return 1\n        else:\n            return -1\n    return sorted(list1,key=lambda x: x,reverse=True)[:n]\ndef larg_n3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def comp_num(n1,n2):\n        if n1>n2:\n            return 1\n        else:\n            return -1\n    return sorted(list1,key=lambda x: x,reverse=True)[:n]\ndef larg_n4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def comp_num(n1,n2):\n        if n1>n2:\n            return 1\n        else:\n            return -1\n    return heapq.nlargest(n,list1,key=lambda x: x)\ndef larg_n5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def comp_num(n1,n2):\n        if n1>n2:\n            return 1\n        else:\n            return -1\n    return heapq.nlargest(n,list1,key=lambda x: x)\ndef larg_n6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def comp_num(n1,n2):\n        if n1>n2:\n            return 1\n        else:\n            return -1\n    return heapq.nsmallest(n,list1,key=lambda x: x)\ndef larg_n7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def comp_num(n1,n2):\n        if n1>n2:\n            return 1\n        else:\n            return -1\n    return heapq.nsmallest(n,list1,key=lambda x: x)\ndef larg_n8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def comp_num(n1,n2):\n        if n1>n2:\n            return 1\n        else:\n            return -1\n    return heapq.nlargest(n,list1,key=lambda x: x)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        return list1\n    largest = max(list1)\n    for i in range(len(list1)-1):\n        if list1[i]<largest:\n            list1[i+1]=list1[i]\n    del(list1[0])\n    list1.append(largest)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        list1.sort(reverse = True)\n        result = list1[0:n]\n        return result\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi,sin,cos\n    import math\n    s = 2*pi*r*sin(h/2)\n    d = 2*pi*r*cos(h/2)\n    # print(s)\n    # print(d)\n    return s*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*pi*r*h + 2*pi*r**2 + 2*pi*(r**2 + h**2)\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    if r==0 or h==0:\n        return 0\n    else:\n        a=math.pi*r*r\n        return a*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi, sin, cos\n    import numpy as np\n    # find the lateral surface area of a cylinder\n    def lateralsuface(r,h):\n        return pi*r**2*h\n    # main program\n    r = float(input('Enter the radius of the cylinder: '))\n    h = float(input('Enter the height of the cylinder: '))\n    su = lateralsuface(r,h)\n    # check if the user enters a non-integer value\n    if su%1!= 0:\n        print('Enter a positive integer value for r and h')\n    else:\n        print('The lateral surface area of a cylinder with radius',r,'and height',h,'is',su,'squared units')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return (2*math.pi*r*h)+(2*math.pi*r**2)\n    "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2*pi*r*h\n    return(s)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * (r ** 2) * h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    # Calculate the volume\n    v = 4/3*math.pi*r*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(f'The lateral surface area of the cylinder is {lateralsuface_cylinder(r,h)}')\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    print(f'The lateral surface area of the sphere is {lateralsuface_sphere(r)}')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    S=2*pi*r*(h+r)\n    return S\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef square_rectangle(a,b):\n    '''\n    Write a function to find the area of a square and rectangle given their length and width.\n    '''\n    return (a*b)\n    \ndef fizz_buzz(n):\n    '''\n    Write a function to find the string representation of a number.\n    If the number is divisible by 3 return \u201cFizz\u201d.\n    If the number is divisible by 5 return \u201cBuzz\u201d.\n    If the number is divisible by both 3 and 5 return \u201cFizzBuzz\u201d.\n    If the number is not divisible by either 3 or 5, return the same number.\n    '''\n    if n % 5 == 0:\n        return 'Buzz'\n    if n % 3 == 0:\n        return 'Fizz'\n    return str(n)\n    \ndef valid_parentheses(string):\n    '''\n    Write a function to check if the input string is valid.\n    That is, brackets are balanced and no characters are repeated.\n    '''\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        elif i == '{':\n            stack.append(i)\n        elif i == '}':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        elif i == '[':\n            stack.append(i)\n        elif i == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    return s == s[::-1]\n    \ndef is_anagram(a,b):\n    '''\n    Write a function that takes two strings and returns True if they are anagrams, False otherwise.\n    '''\n    return sorted(a) == sorted(b)\n    \ndef can_jump(n):\n    '''\n    Write a function that takes in a non-negative integer and returns True if it is possible to reach the end with a single jump,\n    otherwise returns False. A single jump means jumping 1 unit forward.\n    '''\n    if n <= 1:\n        return False\n    return True\n    \ndef is_power(a, b):\n    '''\n    Write a function that takes two non-negative integers and returns True if the first is a power of the second, False otherwise.\n    '''\n    if a == 0:\n        return False\n    if b == 1:\n        return True\n    if b == 0:\n        return False\n    if a == b:\n        return True\n    if a % b == 0:\n        return False\n    if a > b:\n        return False\n    return is_power(a-1, b)\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that takes in a number and returns the sum of all of its digits.\n    '''\n    if n == 0:\n        return 0\n    return n%10 + sum_of_digits(n//10)\n    \ndef has_duplicates(n):\n    '''\n    Write a function that takes in a non-empty array and returns True if the array has any duplicates,\n    False otherwise.\n    '''\n    if n == []:\n        return False\n    if len(n) == len(set(n)):\n        return False\n    return True\n    \ndef has_all_unique_digits(n):\n    '''\n    Write a function that takes in a number and returns True if the number is in the form of a string,\n    which consists of each individual digit of the number only once. Otherwise, return False.\n    '''\n    if n == 0:\n        return False\n    n = str(n)\n    if len(n) == 1:\n        return True\n    if len(set(n)) == len(n):\n        return True\n    return False\n    \ndef get_biggest_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the biggest one.\n    '''\n    if n == []:\n        return 0\n    if len(n) == 1:\n        return n[0]\n    if n[0] > n[1]:\n        return n[0]\n    return n[1]\n    \ndef sum_of_digits_numbers(n):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of the digits of each number.\n    '''\n    if n == []:\n        return 0\n    if len(n) == 1:\n        return n[0]\n    if n[0] < 10:\n        return n[0] + sum_of_digits_numbers(n[1:])\n    return n[0] + 10*sum_of_digits_numbers(n[1:])\n    \ndef is_balanced(s):\n    '''\n    Write a function that takes in a string and returns True if the string is balanced (a string with an equal number of '(' and ')' parentheses),\n    False otherwise.\n    '''\n    if s == '':\n        return True\n    if len(s) % 2!= 0:\n        return False\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n    \ndef is_balanced_brackets(s):\n    '''\n    Write a function that takes in a string and returns True if the string is balanced,\n    False otherwise.\n    '''\n    if s == '':\n        return True\n    if len(s) % 2!= 0:\n        return False\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n    \ndef is_power_of_three(n):\n    '''\n    Write a function that takes in a non-negative integer and returns True if it is a power of three, False otherwise.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    return (n%3 == 0 and is_power_of_three(n//3))\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    if s == '':\n        return True\n    if len(s) % 2!= 0:\n        return False\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef is_power_of_2(n):\n    '''\n    Write a function that takes in a non-negative integer and returns True if it is a power of 2, False otherwise.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return is_power_of_2(n//2)\n    return False\n    \ndef sum_of_digits_numbers_with_first_digit_as_zero(n):\n    '''\n    Write a function that takes in an array of numbers and returns the sum of the digits of each number.\n    '''\n    if n == []:\n        return 0\n    if len(n) == 1:\n        return n[0]\n    return n[0] + 10*sum_of_digits_numbers_with_first_digit_as_zero(n[1:])\n    \ndef count_vowels(s):\n    '''\n    Write a function that takes in a string and returns the number of vowels in it.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0xaaaaaaaa) + 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n:\n        result |= 1\n        n = n >> 1\n    return result\nprint(even_bit_set_number(2))\nprint(even_bit_set_number(3))\nprint(even_bit_set_number(15))\nprint(even_bit_set_number(18))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(\"Original number : \",n)\n    c = n\n    while n > 0:\n        print(\"c : \",c)\n        if n%2 == 0:\n            print(\"\\n\",c,\" 0 \")\n            c = c >> 1\n            print(\"c : \",c)\n        else:\n            print(\"\\n\",c,\" 1 \")\n            c = c << 1\n            print(\"c : \",c)\n        n = n//2\n    print(\"\\n\",c)\neven_bit_set_number(24)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # print(bin(n))\n    even_bit_set_number = n | 0x0001\n    # print(bin(even_bit_set_number))\n    return even_bit_set_number\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n==0:\n        return n\n    if n==1:\n        return n\n    return n>>1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n | (n >> 1))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(\"the given number is: \",n)\n    print(\"the odd bits are: \",n&1)\n    print(\"the even bits are: \",n>>1)\n    return (n&1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)\n    \neven_bit_set_number(33)"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n << 1\n    while n > 0:\n        if n & 1:\n            n = n ^ (1 << 1)\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n>>1)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    #test_list = [(1,2),(1,3),(1,2),(2,4)]\n    \n    #initiate dict\n    occurences = {}\n    \n    #create a set of the tuples \n    tuples = set(test_list)\n    \n    #loop through each tuple \n    for tuple in tuples:\n        \n        #if key does not exist, add key/value pair\n        if tuple not in occurences:\n            occurences[tuple] = 1\n        \n        #else increment the occurences value \n        else: \n            occurences[tuple] += 1 \n    \n    #return the dict \n    return occurences \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_occurences = {}\n    for item in test_list:\n        if item in dict_occurences:\n            dict_occurences[item] += 1\n        else:\n            dict_occurences[item] = 1\n    return dict_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in test_list:\n        if i in occurences:\n            occurences[i] += 1\n        else:\n            occurences[i] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = Counter(test_list)\n    return occurence\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #print(test_list)\n    d = {}\n    for i in test_list:\n        #print(i)\n        key = i[0]\n        #print(key)\n        if key not in d.keys():\n            d[key] = 1\n        else:\n            d[key] += 1\n    #print(d)\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occ_dict = {}\n    occ_list = []\n    for i in test_list:\n        occ_list.append(i[1])\n    occ_list = Counter(occ_list)\n    for i in occ_list:\n        occ_dict[i] = occ_list[i]\n    return occ_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {tuple(sorted(i)): i.count(i) for i in test_list}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0: \n        return 0\n    return 1 + number_of_substrings(str[1:]) if str[0] =='' else 1 + number_of_substrings(str[1:])\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == \"\": \n        return 0\n    count = 1\n    for i in range(1, len(str)): \n        if str[i] == str[i - 1]: \n            count += 1\n        else: \n            count = 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \"\":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count(a):\n        count = 0\n        for i in range(len(a)):\n            if a[i]!= \" \":\n                count += 1\n        return count\n    substring = str.split()\n    count = 0\n    for i in range(len(substring)):\n        substring[i] = substring[i].lower()\n    for i in range(len(substring)):\n        count += count(substring[i])\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str) \n    if l == 0:\n        return 0\n    count = 0\n    for i in range(0, l):\n        for j in range(i + 1, l + 1):\n            if is_substring(str[i:j], str):\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(set(str))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    s = \"\"\n    s1 = \"\"\n    count = 0\n    \n    for i in range(0,len(str)):\n        if str[i] =='':\n            count = count + 1\n        else:\n            s = s + str[i]\n    return s.count(' ') + 1\n    # start = 0\n    # count = 0\n    # while (start + 1) < len(str):\n    #     if str[start] =='':\n    #         count = count + 1\n    #     start = start + 1\n    # return count + 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==1: \n        return m\n    else:\n        return 2*get_total_number_of_sequences(m,n-1) - get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n, m + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_seq = 0\n    start = 1\n    while(start <= m):\n        total_seq +=  factorial(n) / (factorial(n-1) * factorial(n-2))\n        start *= 2\n    return total_seq\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for i in range(n):\n        if (m >= i and m*2 <= m+n*2):\n            total_number_of_sequences = total_number_of_sequences + 1\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count=1\n    for i in range(1,n):\n        count*=2\n        if count>=m:\n            break\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m==1 or n==1:\n        return 1\n    return len(get_total_number_of_sequences(m,n-1))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    n=n+1\n    def dp(m,n): \n        memo = dict()\n        for i in range(n): \n            if i == 0: \n                memo[i] = 1\n            else: \n                memo[i] = memo[i-1] + memo[i-2] \n        return memo[n-1]%(10**9+7) \n    return dp(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m<n:\n        return 0\n    elif m==n:\n        return 1\n    else:\n        number_of_sequences = 0\n        for i in range(0,n):\n            if i==0 or i==n-1:\n                continue\n            if m>=2*i and m<=i*2 and m>=i:\n                number_of_sequences = number_of_sequences + 1\n        return number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m,n):\n        # print(i)\n        if (i >= 2 * (i - 1)) and (i <= m):\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # get_total_number_of_sequences(5,5)\n    # === result ===\n    # 24\n    # === end result ===\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if not isinstance(list1,list):\n        raise TypeError(\"input should be a list\")\n    if not isinstance(list2,list):\n        raise TypeError(\"input should be a list\")\n    if not list1:\n        raise ValueError(\"input should contain at least one element\")\n    list1[-1]=list2[0]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = list1[:len(list1) -1 ]\n    new_list.append(list2[-1])\n    list1 = new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return(list1+list2[1:])\n    # Your code goes here\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    print(list1)\n    return\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    for i in range(1,len(list2)):\n        list1.append(list2[i])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    list1.pop()\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1 += list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    pass\ndef count_charac_n(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char = []\n    for i in str1:\n        char.append(i)\n    return len(char)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        cnt += 1\n    return cnt\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return N\n    mid = int(math.sqrt(N))\n    while(mid*mid<N):\n        mid+=1\n    return mid*mid\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    while x*x!= N:\n        x += 1\n    return x*x\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_Perfect_Square(num):\n        '''\n        Checking if a number is a perfect square.\n        '''\n        if num**0.5 == int(num**0.5):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Mathematical way\n    # start from n**2 + 1, if n**2 + 1 < N, then n**2 + 1 is the next perfect square, else n**2 + 2 is the next perfect square.\n    if N < 1:\n        return 1\n    n = 2\n    while n ** 2 <= N:\n        n += 1\n    return n ** 2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N % 2 == 0:\n        N = N + 1\n        return N\n    else:\n        while N % 2 == 0:\n            N = N / 2\n        return N\ndef print_binary(N):\n    '''\n    Write a python function to print binary representation of a given number.\n    '''\n    num_str = str(N)\n    if num_str == \"\":\n        return 0\n    else:\n        temp = \"\"\n        while(num_str):\n            temp = num_str[0] + temp\n            num_str = num_str[1:len(num_str)]\n        print(temp)\ndef is_prime(N):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if N == 2:\n        return True\n    if N == 1 or N % 2 == 0:\n        return False\n    if N > 2 and N % 2 == 1:\n        for i in range(3, int(math.sqrt(N)) + 1, 2):\n            if N % i == 0:\n                return False\n        return True\ndef print_all_primes(N):\n    '''\n    Write a python function to print all primes smaller than or equal to a given number.\n    '''\n    i = 0\n    while i <= N:\n        i = next_Prime(i)\n        print(i)\ndef next_Prime(N):\n    '''\n    Write a python function to determine the next prime number that is greater than a given number.\n    '''\n    while True:\n        N = N + 1\n        if is_Prime(N):\n            return N\ndef is_Palindrome(N):\n    '''\n    Write a python function to determine if a number is palindrome or not.\n    '''\n    num_str = str(N)\n    if num_str == \"\":\n        return False\n    elif N <= 9:\n        return True\n    else:\n        i = 0\n        while i < len(num_str):\n            if num_str[i] == \" \":\n                i = i + 1\n            else:\n                break\n        j = len(num_str) - i\n        rev_str = \"\"\n        while j > 0:\n            rev_str = rev_str + num_str[j]\n            j = j - 1\n        if num_str == rev_str:\n            return True\n        else:\n            return False\ndef print_all_palindromes(N):\n    '''\n    Write a python function to print all palindromes smaller than or equal to a given number.\n    '''\n    i = 0\n    while i <= N:\n        i = next_Palindrome(i)\n        print(i)\ndef next_Palindrome(N):\n    '''\n    Write a python function to determine the next palindrome number that is greater than a given number.\n    '''\n    while True:\n        N = N + 1\n        if is_Palindrome(N):\n            return N\ndef is_Prime(N):\n    '''\n    Write a python function to determine whether a given number is prime or not.\n    '''\n    if N == 2:\n        return True\n    if N == 1 or N % 2 == 0:\n        return False\n    if N > 2 and N % 2 == 1:\n        for i in range(3, int(math.sqrt(N)) + 1, 2):\n            if N % i == 0:\n                return False\n        return True\ndef print_all_primes(N):\n    '''\n    Write a python function to print all primes smaller than or equal to a given number.\n    '''\n    i = 0\n    while i <= N:\n        i = next_Prime(i)\n        print(i)\ndef next_Prime(N):\n    '''\n    Write a python function to determine the next prime number that is greater than a given number.\n    '''\n    while True:\n        N = N + 1\n        if is_Prime(N):\n            return N\ndef print_all_triangles(N):\n    '''\n    Write a python function to print all triangles smaller than or equal to a given number.\n    '''\n    for i in range(1, N + 1):\n        for j in range(1, i):\n            print(i, \"*\", j, \"=\", i * j, sep=\"\", end=\" \")\n        print()\ndef is_triangle(N):\n    '''\n    Write a python function to determine whether a given number is triangle or not.\n    '''\n    if N == 1:\n        return True\n    if N == 2:\n        return True\n    if N == 3:\n        return True\n    if N == 4:\n        return True\n    if N == 5:\n        return True\n    if N == 6:\n        return True\n    if N == 7:\n        return True\n    if N == 8:\n        return True\n    if N == 9:\n        return True\n    if N == 10:\n        return True\n    if N == 11:\n        return True\n    if N == 12:\n        return True\n    if N == 13:\n        return True\n    if N == 14:\n        return True\n    if N == 15:\n        return True\n    if N == 16:\n        return True\n    if N == 17:\n        return True\n    if N == 18:\n        return True\n    if N == 19:\n        return True\n    if N == 20:\n        return True\n    if N == 21:\n        return True\n    if N == 22:\n        return True\n    if N == 23:\n        return True\n    if N == 24:\n        return True\n    if N == 25:\n        return True\n    if N == 26:\n        return True\n    if N == 27:\n        return True\n    if N == 28:\n        return True\n    if N == 29:\n        return True\n    if N == 30:\n        return True\n    if N == 31:\n        return True\n    if N == 32:\n        return True\n    if N == 33:\n        return True\n    if N == 34:\n        return True\n    if N == 35:\n        return True\n    if N == 36:\n        return True\n    if N == 37:\n        return True\n    if N == 38:\n        return True\n    if N == 39:\n        return True\n    if N == 40:\n        return True\n    if N == 41:\n        return True\n    if N == 42:\n        return True\n    if N == 43:\n        return True\n    if N == 44:\n        return True\n    if N == 45:\n        return True\n    if N == 46:\n        return True\n    if N == 47:\n        return True\n    if N == 48:\n        return True\n    if N == 49:\n        return True\n    if N == 50:\n        return True\n    if N == 51:\n        return True\n    if N == 52:\n        return True\n    if N == 53:\n        return True\n    if N == 54:\n        return True\n    if N == 55:\n        return True\n    if N == 56:\n        return True\n    if N == 57:\n        return True\n    if N == 58:\n        return True\n    if N == 59:\n        return True\n    if N == 60:\n        return True\n    if N == 61:\n        return True\n    if N == 62:\n        return True\n    if N == 63:\n        return True\n    if N == 64:\n        return True\n    if N == 65:\n        return True\n    if N == 66:\n        return True\n    if N == 67:\n        return True\n    if N == 68:\n        return True\n    if N == 69:\n        return True\n    if N == 70:\n        return True\n    if N == 71:\n        return True\n    if N == 72:\n        return True\n    if N == 73:\n        return True\n    if N == 74:\n        return True\n    if N == 75:\n        return True\n    if N == 76:\n        return True\n    if N == 77:\n        return True\n    if N == 78:\n        return True\n    if N == 79:\n        return True\n    if N == 80:\n        return True\n    if N == 81:\n        return True\n    if N == 82:\n        return True\n    if N == 83:\n        return True\n    if N ="
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    curr = N\n    while True:\n        curr += 1\n        if(is_Square(curr)): \n            return curr\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0: \n        return 1\n    if N == 1: \n        return 2\n    if N == 2: \n        return 3\n    l = int(math.sqrt(N)) \n    while (l * l) < N: \n        l = l + 1\n    return l * l \nprint(next_Perfect_Square(8))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1,N+1): \n        if isPerfectSquare(i): \n            print(i) \n            break\ndef isPerfectSquare(n): \n    '''\n    Write a function to check if a given number is perfect square or not. \n    '''\n    x=int(math.sqrt(n)) \n    return x*x==n \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 3:\n        return N\n    while True:\n        # print('N: ',N)\n        # print('sqrt(N): ',math.sqrt(N))\n        if math.sqrt(N) == math.floor(math.sqrt(N)):\n            break\n        else:\n            N = math.ceil(math.sqrt(N))\n    return N\n    \ndef remove_duplicates(L):\n    seen = set()\n    seen_add = seen.add\n    return[x for x in L if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Finding the largest integer less than or equal to x, where x is an even number \n    def gcd(a, b): \n        while b: \n            a, b = b, a % b \n        return a \n    x = int(math.sqrt(N))\n    while True: \n        if gcd(x, N) > 1: \n            return x\n        x += 1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # edge case\n    if len(arr) == 0:\n        return 0\n    # only two elements\n    elif len(arr) == 1:\n        return arr[0]\n    # if array is decreasing, return max with first element\n    elif arr[-1] > arr[-2]:\n        return arr[0] + max_sum(arr[1:])\n    # if array is increasing, return max with last element\n    else:\n        return arr[-1] + max_sum(arr[:-1])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # From wikipedia\n    arr.sort()\n    n = len(arr)\n    \n    def bi_sum(arr,l,r):\n        if l == r:\n            return arr[l]\n        \n        mid = (l + r) // 2\n        left_sum = max(bi_sum(arr,l,mid),bi_sum(arr,mid+1,r))\n        right_sum = min(bi_sum(arr,l,mid),bi_sum(arr,mid+1,r))\n        \n        curr_sum = 0\n        for i in range(mid,l-1,-1):\n            curr_sum = max(curr_sum, arr[i] + left_sum)\n            \n        curr_sum = 0\n        for i in range(mid,r+1):\n            curr_sum = max(curr_sum, arr[i] + right_sum)\n            \n        return curr_sum\n    \n    return bi_sum(arr,0,n-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr.append(0)\n    a = max_sum_helper(arr, 0, 0)\n    print(a)\n    \n    \ndef max_sum_helper(arr, ind, curr_sum):\n    if ind == len(arr):\n        return curr_sum\n    \n    a = max_sum_helper(arr, ind+1, curr_sum+arr[ind])\n    b = max_sum_helper(arr, ind+1, curr_sum)\n    \n    c = max(a, b)\n    return c\n    \n    \nmax_sum([1, 3, 7, 4, 8, 3, 2, 1])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_bitonic_subsequence(arr): \n        '''\n        Write a function that takes an array as input and finds the maximum bitonic subsequence in the array.\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = -1 * float('inf')\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr.sort()\n    return max(r(arr))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            max_sum += arr[i] + arr[i+1]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Brute force: can't be better than O(n^2)\n    # max_arr = -float('inf')\n    # for i in range(len(arr)):\n    #     for j in range(i+1,len(arr)):\n    #         max_arr = max(max_arr, sum(arr[i:j]))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize the first and last index of the array\n    start, end = 0, len(arr) - 1\n    # initialize the max_sum to 0\n    max_sum = 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 2:\n        return number\n    left, right = 2, number/2\n    while left <= right:\n        middle = (left + right) // 2\n        square_middle = middle*middle\n        if square_middle == number:\n            return middle\n        if square_middle < number:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return left\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    ans = 0\n    if number <= 1:\n        return number\n    ans = number\n    while number >= 0.5:\n        ans = (ans + number) / 2\n        number = (number + 0.5) / 2\n    return ans\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    if number == 0:\n        return 0\n    else:\n        return babylonian_squareroot(number/2) + (number/2)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    epsilon = 0.000001\n    guess = number/2.0\n    num_guesses = 1\n    \n    while abs(guess**2 - number) >= epsilon:\n        guess = guess - ((guess**2 - number)/(2*guess))\n        num_guesses += 1\n        \n    return guess, num_guesses\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 1:\n        return number\n    previous = 0\n    current = 1\n    while current!= previous:\n        previous = current\n        current = current + (previous * (number/current))\n    return current\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    step_size = 0.000001\n    x = number\n    while True:\n        last_x = x\n        x = (x + last_x)/2\n        if abs(x - last_x) <= step_size:\n            break\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.001\n    guess = number / 2.0\n    num_guesses = 0\n    while abs(guess * guess - number) >= epsilon:\n        guess = guess - ((guess ** 2) - number) / (2 * guess)\n        num_guesses += 1\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    while True:\n        guess = (number + (number // 2)) / 2\n        print(guess)\n        if guess * guess == number:\n            break\n        elif guess * guess < number:\n            number = guess\n        else:\n            number = guess\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    epsilon = 0.00001\n    while True:\n        y = (x + number / x) / 2.0\n        if abs(y - x) < epsilon:\n            break\n        x = y\n    return x\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n <= 1:\n        return n\n    lps = [[0 for i in range(n)] for j in range(n)] \n    \n    # lps[i][j] = length of the longest palindromic subsequence ending at str[i] and str[j].\n    for i in range(n): \n        lps[i][i] = 1\n    \n    # lps[i][j] = length of the longest palindromic subsequence ending at str[i] and str[j], \n    # and also ending at str[j] and str[i]. \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            lps[i][i+1] = 2\n        else: \n            lps[i][i+1] = 1\n    \n    # lps[i][j] = length of the longest palindromic subsequence ending at str[i] and str[j], \n    # and also ending at str[j] and str[i]. \n    for length in range(2, n): \n        for i in range(n-length): \n            if str[i] == str[i+length] and lps[i+1][i+length-1] >= length: \n                lps[i][i+length] = length + lps[i+1][i+length-1] \n            else: \n                lps[i][i+length] = max(lps[i][i+length-1], lps[i+1][i+length]) \n    return lps[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #if str == '':\n    #    return 0\n    #else:\n    #    lps_dct = {}\n    #    lps_dct[len(str) - 1] = str[len(str) - 1]\n    #    i = len(str) - 2\n    #    while i >= 0:\n    #        if str[i] == str[i+1]:\n    #            lps_dct[i] = str[i]\n    #            i = i - 1\n    #        else:\n    #            lps_dct[i] = str[i+1]\n    #            i = i - 2\n    #    return max(lps_dct.keys())\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: return len(str)\n    lengths = [[0 for i in range(len(str))] for j in range(len(str))] \n    maxLength = 0\n    start = 0\n    for i in range(0,len(str)):\n        lengths[i][i] = 1\n    for len in range(2,len(str)+1):\n        for start in range(len-1):\n            if str[start] == str[start+1]:\n                lengths[start][start+1] = 2\n                maxLength = max(maxLength,2)\n            else:\n                lengths[start][start+1] = 1\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i] == str[j] and (i-j)<(maxLength):\n                lengths[i][j] = 1\n                maxLength = i-j\n    return maxLength\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def maxsub(s,i,j):\n        if i == j:\n            return 1\n        if i+1 == j:\n            if s[i] == s[j]:\n                return 2\n            else:\n                return 1\n        else:\n            if s[i] == s[j]:\n                return 2+maxsub(s,i+1,j-1)\n            else:\n                return max(maxsub(s,i+1,j),maxsub(s,i,j-1))\n    return maxsub(str,0,len(str)-1)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = len(str)\n    if length == 1:\n        return 1\n    n = length\n    dp = [[0] * length for i in range(n)]\n    for i in range(length):\n        dp[i][i] = 1\n    for gap in range(2, length):\n        for i in range(length - gap):\n            j = i + gap\n            if str[i] == str[j] and dp[i + 1][j - 1] == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][length - 1]\nprint(lps('abdce'))\nprint(lps('abb'))\nprint(lps('abcdcce'))\nprint(lps('abcdefg'))\nprint(lps('abbbb'))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def is_pal(s):\n        for i in range(len(s)):\n            if s[i]!= s[~i]:\n                return False\n        return True\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    size = len(str)\n    n = size - 1\n    m = size\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l = len(str)\n    lps = [0]*l\n    m = 0\n    k = 0\n    for i in range(1,l):\n        if str[i] == str[k]:\n            lps[i] = m+1\n            k+=1\n            m+=1\n        else:\n            m = 0\n            k = i\n    return lps\n        \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n<2: return 0\n    dp = [[0]*n for _ in range(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    max_lps = 0\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / ((n - 1) * (n + 1))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 0\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n / (n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(0, n):\n        result = result + 1 / (i+1)\n    print(result)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n + 1))/2\nprint(harmonic_sum(9))\nprint(harmonic_sum(2))\nprint(harmonic_sum(3))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    return 1 / (n - 1) + harmonic_sum(n - 2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create new array\n    new_array = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            new_array.append(num1)\n    return new_array\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    j = 0\n    arr = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            arr.append(array_nums1[i])\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return result\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_array = []\n    for i in array_nums1:\n        if i in array_nums2 and i not in intersect_array:\n            intersect_array.append(i)\n    return intersect_array\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for item in array_nums1:\n        if item in array_nums2:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_array_nums1 = set(array_nums1)\n    set_array_nums2 = set(array_nums2)\n    intersect = set_array_nums1 & set_array_nums2\n    return list(intersect)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for x in range(len(array_nums1)):\n        for y in range(len(array_nums2)):\n            if array_nums1[x] == array_nums2[y] and x!= y:\n                intersection.append(array_nums1[x])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    if len(array_nums1) < len(array_nums2):\n        for num in array_nums1:\n            if num in array_nums2:\n                intersect.append(num)\n    else:\n        for num in array_nums2:\n            if num in array_nums1:\n                intersect.append(num)\n    return intersect\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # common_numbers = []\n    # print(common_numbers)\n    # print(array_nums1)\n    # print(array_nums2)\n    # for num in array_nums1:\n        # if num in array_nums2:\n            # common_numbers.append(num)\n    # return common_numbers\n    return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if x == i:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for num in tup:\n        if num == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\ndef merge_dicts(*dict_args):\n    '''\n    Write a python function that takes in a variable number of dictionaries and merges them into a new dictionary. The final dictionary\n    should contain all the key-value pairs from all the dictionaries.\n    '''\n    result = {}\n    for d in dict_args:\n        result.update(d)\n    return result\ndef sum_x(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and sums the occurences of the element in the tuple.\n    '''\n    s = 0\n    for i in tup:\n        if i == x:\n            s += 1\n    return s\ndef remove_element(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and removes the occurences of the element in the tuple.\n    '''\n    for i in tup:\n        if i == x:\n            tup.remove(i)\n    return tup\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef count_X_1(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len([x for x in tup if x==x])\n    \ndef count_X_2(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len([x for x in tup if x==x]) - 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len([i for i in tup if i == x])\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:i] + element + list[i:]\nprint(insert_element([1,2,3],4))\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i]==element:\n            list.insert(i,element)\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newList = []\n    for i in range(0,len(list)):\n        if list[i] == element:\n            newList.append(element)\n        newList.append(list[i])\n    return newList\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    index = 0\n    while index < len(list):\n        if element == list[index]:\n            list.insert(index,element)\n            break\n        index = index + 1\n    return list\n    \ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes the element from the list if it exists in the list and returns the resulting list.\n    '''\n    list.remove(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index=0\n    while index<len(list):\n        if list[index]!=None:\n            list.insert(index,element)\n            break\n        index+=1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element == list[i]:\n            for j in range(i):\n                list.insert(j,element)\n                break\n    return list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not isinstance(list,list):\n        return(\"Invalid input\")\n    elif len(list)<=0:\n        return list\n    elif element in list:\n        return(list)\n    else:\n        return(list+[element])\n        \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    else:\n        for i in range(len(list)):\n            if list[i] == element:\n                return insert_element(list[0:i],element) + list[i:]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    count = 0\n    for i in list:\n        if element == i:\n            list.insert(count,element)\n            break\n        count+=1\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"Input Complex numbers:\")\n    a = input(\"a = \")\n    b = input(\"b = \")\n    c = input(\"c = \")\n    print(\"Complex numbers:\",a,b,c)\n    x = float(a)\n    y = float(b)\n    z = float(c)\n    p = (x**2+y**2+z**2)**0.5\n    \n    r = cmath.sqrt(x**2+y**2)\n    i = cmath.sqrt(x**2+y**2)\n    \n    angle = cmath.acos(z/p)\n    angle = angle*180/cmath.pi\n    \n    print(\"Polar coordinates:\",p,\",\",r,\",\",i,\",\",angle)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for i in numbers:\n        complex_num = cmath.sqrt(i)\n        theta = cmath.phase(i)\n        r.append((complex_num, theta))\n    return r\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = 0\n    for i in numbers:\n        b = complex(i)\n        r = (b.real**2) + (b.imag**2)\n        c = cmath.phase(b)\n        if r == 0:\n            print(\"Complex number is real\")\n        elif r > 0:\n            print(\"Complex number is real and is in the positive half plane\")\n        else:\n            print(\"Complex number is real and is in the negative half plane\")\n        a = a + 1\n    print(\"Total number of real and complex numbers are: \",a)\n    return    \n    \nconvert([1, 2, 3])"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(n):\n        for i in range(0,len(n)):\n            if n[i] == 0:\n                if i == 0:\n                    c = complex(0)\n                    p = complex(0,c)\n                elif i == 1:\n                    c = complex(1,0)\n                    p = complex(1,0)\n                elif i == 2:\n                    c = complex(-1,0)\n                    p = complex(1,0)\n                else:\n                    c = complex(0,1)\n                    p = complex(0,1)\n            else:\n                if i == 0:\n                    c = complex(0, cmath.phase(n[i]))\n                    p = complex(cmath.phase(n[i]),0)\n                elif i == 1:\n                    c = complex(cmath.phase(n[i]),0)\n                    p = complex(cmath.phase(n[i]),0)\n                elif i == 2:\n                    c = complex(cmath.phase(n[i]),1)\n                    p = complex(cmath.phase(n[i]),1)\n                else:\n                    c = complex(1,cmath.phase(n[i]))\n                    p = complex(1,cmath.phase(n[i]))\n        return p,c\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    x = numbers[0]\n    y = numbers[1]\n    \n    if(x == 0 and y == 0):\n        return -1, -1\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radius=0\n    angle=0\n    for i in range(len(numbers)):\n        x=numbers[i][0]\n        y=numbers[i][1]\n        r=x**2+y**2\n        r=r**0.5\n        angle=cmath.atan2(y,x)\n        radius=r*cmath.exp(complex(0,angle))\n        print(\"{:<10} {:<10}\".format(r,angle))\nconvert(numbers"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = []\n    y = []\n    r = []\n    for i in range(len(numbers)):\n        x.append(float(numbers[i].real))\n        y.append(float(numbers[i].imag))\n    for i in range(len(x)):\n        r.append(cmath.sqrt((x[i]**2) + (y[i]**2)))\n    \n    return r\n    \nprint(convert([1+2j,3-4j,5]))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            c1 = numbers[i][0]\n            s1 = numbers[i][1]\n            c2 = numbers[j][0]\n            s2 = numbers[j][1]\n            c = (c1*c1 + c2*c2 - s1*s1 - s2*s2) / 2.0\n            s = cmath.sqrt(c)\n            temp = []\n            temp.append(c)\n            temp.append(s)\n            numbers[i] = temp\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        if(abs(numbers[i])==0):\n            print(numbers[i],\"zero\")\n        else:\n            print(numbers[i],numbers[i].real,numbers[i].imag)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if not numbers:\n        return\n    if not isinstance(numbers,list):\n        numbers = list(numbers)\n    x = 0\n    y = 0\n    r = 0\n    for i in range(len(numbers)):\n        if numbers[i] == complex(0,0):\n            x = 0\n            y = 0\n            r = 0\n        elif numbers[i] == complex(1,0):\n            x = 1\n            y = 0\n            r = 0\n        elif numbers[i] == complex(0,1):\n            x = 0\n            y = 1\n            r = 0\n        elif numbers[i] == complex(1,1):\n            x = 1\n            y = 1\n            r = 0\n        else:\n            # (x^2 + y^2)^0.5\n            x = numbers[i].real**2 + numbers[i].imag**2\n            y = numbers[i].real**2 + numbers[i].imag**2\n            r = (x**0.5)\n        print('{}^2 + {}^2 = {}^2'.format(x,y,r))\n        if i == 0:\n            x = x\n            y = y\n            r = r\n        else:\n            x = x - (y*r)\n            y = y - (x*r)\n            r = r - (x**2 + y**2)**0.5\n            print('{}^2 - {}^2 = {}^2'.format(x,y,r))\n    print(x,y,r)\ndef number_of_pairs(number):\n    '''\n    Write a python function to find the number of pairs of integers whose sum is equal to a given number n.\n    '''\n    if not number:\n        return\n    if not isinstance(number,int):\n        number = int(number)\n    if number == 0:\n        return 0\n    count = 0\n    for i in range(1,number+1):\n        for j in range(1,number+1):\n            if i+j == number:\n                count = count+1\n    return count\ndef get_prime_factors(number):\n    '''\n    Write a python function to find all prime factors of a given integer.\n    '''\n    if not number:\n        return\n    if not isinstance(number,int):\n        number = int(number)\n    prime_factors = []\n    count = 0\n    for i in range(1,number+1):\n        if number%i == 0:\n            count = count + 1\n            prime_factors.append(i)\n    if count == 0:\n        prime_factors.append(number)\n    return prime_factors\ndef smallest_number(numbers):\n    '''\n    Write a python function to find the smallest number in a given list of integers.\n    '''\n    if not numbers:\n        return\n    if not isinstance(numbers,list):\n        numbers = list(numbers)\n    numbers.sort()\n    print(numbers[0])\ndef prime_number(number):\n    '''\n    Write a python function to find if a given integer is prime or not.\n    '''\n    if not number:\n        return\n    if not isinstance(number,int):\n        number = int(number)\n    count = 0\n    if number > 1:\n        for i in range(2,number):\n            if number%i == 0:\n                count = count + 1\n        if count == 0:\n            print(number,'is prime')\n        else:\n            print(number,'is not prime')\n    else:\n        print('1 is not prime')\ndef get_factors(number):\n    '''\n    Write a python function to find the prime factors of a given integer.\n    '''\n    if not number:\n        return\n    if not isinstance(number,int):\n        number = int(number)\n    factors = []\n    if number > 1:\n        for i in range(2,number):\n            if number%i == 0:\n                factors.append(i)\n    return factors\ndef is_perfect(number):\n    '''\n    Write a python function to find whether a given integer is perfect or not.\n    '''\n    if not number:\n        return\n    if not isinstance(number,int):\n        number = int(number)\n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    factors = []\n    if number == 2 or number == 3:\n        return True\n    else:\n        for i in range(2,number):\n            if number%i == 0:\n                factors.append(i)\n        count = 0\n        for i in range(2,number):\n            if number%i == 0:\n                count = count + 1\n        if count == 0:\n            return True\n        else:\n            return False\ndef is_pythagorean(number):\n    '''\n    Write a python function to find whether a given integer is a pythagorean or not.\n    '''\n    if not number:\n        return\n    if not isinstance(number,int):\n        number = int(number)\n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    if number == 3:\n        return True\n    if number > 3:\n        for i in range(3,int(number**0.5)+1):\n            if number % i == 0:\n                return False\n        return True\ndef factor_of_a_number(number):\n    '''\n    Write a python function to find factors of a given integer.\n    '''\n    if not number:\n        return\n    if not isinstance(number,int):\n        number = int(number)\n    factors = []\n    if number == 1:\n        return []\n    if number == 2:\n        return [1,2]\n    if number > 2:\n        for i in range(2,number):\n            if number%i == 0:\n                factors.append(i)\n        if number == 3:\n            return [1,3]\n        else:\n            return factors\ndef sum_of_squares(numbers):\n    '''\n    Write a python function to find the sum of the squares of all the integers in a given list.\n    '''\n    if not numbers:\n        return\n    if not isinstance(numbers,list):\n        numbers = list(numbers)\n    sum = 0\n    for i in numbers:\n        if not isinstance(i,int):\n            i = int(i)\n        sum = sum + (i*i)\n    return sum\ndef sum_of_squares_numbers(numbers):\n    '''\n    Write a python function to find the sum of the squares of all the integers in a given list of integers.\n    '''\n    if not numbers:\n        return\n    if not isinstance(numbers,list):\n        numbers = list(numbers)\n    sum = 0\n    for i in numbers:\n        if not isinstance(i,int):\n            i = int(i)\n        sum = sum + (i*i)\n    return sum\ndef area_triangle(base,height):\n    '''\n    Write a python function to find the area of a triangle based on the given base and height.\n    '''\n    if not base and height:\n        return 0\n    if not base and not height:\n        return 0\n    if base and height:\n        return (base*height)/2\ndef area_of_a_parallelogram(base,height):\n    '''\n    Write a python function to find the area of a parallelogram based on the given base and height.\n    '''\n    if not base and not height:\n        return 0\n    if not base and height:\n        return height\n    if base and not height:\n        return base\n    return area_triangle(base,height)*base\ndef sum_of_a_list(numbers):\n    '''\n    Write a python function to sum of the elements in a given list.\n    '''\n    if not numbers:\n        return\n    if not isinstance(numbers,list):\n        numbers = list(numbers)\n    sum = 0\n    for i in numbers:\n        if not isinstance(i,int):\n            i = int(i)\n        sum = sum + i\n    return sum\ndef sum_o"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count = count + 1\n    print(\"The number of integer elements in a given list is:\", count)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if type(list1[i])==int:\n            count=count+1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for ele in list1:\n        if isinstance(ele,int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for j in list1:\n        if type(j) == int:\n            i = i+1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([num for num in list1 if type(num) == int])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for elem in list1:\n        if type(elem) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if type(list1[i]) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color = []\n    for i in range(0,len(l)):\n        for j in range(0,n):\n            color.append((l[i],l[i+j]))\n    return color\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],2))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l1=[]\n    for i in range(1,len(l)+1):\n        l1.append(list(combinations_with_replacement(l, i)))\n    for i in l1:\n        i.insert(0,tuple(l))\n    return l1\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(len(l))]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return set([tuple(combo) for combo in combinations_with_replacement(l, n)])\n    \nprint(combinations_colors([1,2,3,4,5,6,7], 5))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(1, n+1):\n        combinations.append(combinations_with_replacement(l, i))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        for i in l:\n            yield (i,)\n    else:\n        for i in range(len(l)):\n            for j in combinations_colors(l[i+1:],n-1):\n                yield (l[i],) + j\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n==0:\n        result = []\n    else:\n        result = list(combinations_with_replacement(l, n))\n    return result\n    \ndef combinations_colors2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n==0:\n        result = []\n    else:\n        result = list(combinations(l, n))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [[x]*i for i, x in zip(range(1, n+1), l)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        combs.append(l[i] * (n))\n    return combs\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    n += 1\n    i = 2\n    nums = []\n    while i < n:\n        j = 2\n        while j <= i/j:\n            if i % j == 0:\n                break\n            j += 1\n        else:\n            nums.append(i)\n        i += 1\n    return len(nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = []\n    primes = []\n    for i in range(n):\n        nums.append(i)\n    for i in range(n):\n        for j in range(n):\n            if i!= j and nums[j] % nums[i] == 0:\n                primes.append(nums[j])\n    return primes\nprint(count_Primes_nums(100))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    prime = [2]\n    for i in range(3,n,2):\n        if i not in prime:\n            prime.append(i)\n            for j in range(i*i,n,i):\n                if j in prime:\n                    prime.append(j)\n    print(prime)\n    for i in range(len(prime)):\n        if n == prime[i]:\n            count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n<=1:\n        return 0\n    \n    isPrime = [True for i in range(n+1)]\n    count = 0\n    \n    for i in range(2, n+1):\n        if isPrime[i]:\n            count += 1\n            for j in range(2*i, n+1, i):\n                isPrime[j] = False\n    \n    return count\n    "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Count of prime numbers\n    prime_count = 0\n    \n    # Initialize starting number\n    start_number = 2\n    \n    # Check if number is prime\n    while start_number < n:\n        # Assume number is prime\n        prime = True\n        \n        # Check if number is divisible by any other number\n        for j in range(2, start_number):\n            if start_number % j == 0:\n                prime = False\n                break\n        \n        # Check if number is prime\n        if prime == True:\n            prime_count += 1\n        \n        # Increment starting number\n        start_number += 1\n        \n    # Return number of prime numbers\n    return prime_count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = 0\n    i = 2\n    while i <= n:\n        is_prime = True\n        for j in range(2, int(i**0.5 + 1)):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes += 1\n        i += 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    c = 0\n    for i in range(n):\n        if is_Prime(i):\n            c += 1\n    return c\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    #convert the given number to a list for easier manipulation \n    nums = list(str(n))\n    \n    #keep track of how many primes there are \n    primes = 0\n    \n    #loop through every digit of nums \n    for digit in nums:\n        #check if the digit is a prime number \n        #if the number is divisible by a prime number, it will be removed \n        for i in range(2, int(digit) + 1):\n            if int(digit) % i == 0:\n                nums.remove(digit)\n                break\n        #else it will be added to the number of primes \n        else:\n            primes += 1\n            \n    #return the number of primes \n    return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        counter = 1\n        checker = 2\n        while checker < n:\n            if n % checker!= 0:\n                checker += 1\n            else:\n                counter += 1\n                checker += 2\n        return counter\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    \n    #iterate over all numbers from 2 to n\n    for i in range(2, n + 1):\n        isPrime = True #assume i is prime until proven otherwise\n        #loop through all prime numbers smaller than i\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n    return len(primes)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = b\n    b = a\n    print (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # return b,a\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b=b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp=a\n    a=b\n    b=temp\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (len(test_tup1) > len(test_tup2)):\n        max_list = test_tup1\n        min_list = test_tup2\n    else:\n        max_list = test_tup2\n        min_list = test_tup1\n    for i in range(len(max_list)):\n        if max_list[i] > min_list[i]:\n            max_list[i] = max_list[i] - min_list[i]\n            min_list[i] = 0\n        else:\n            min_list[i] = min_list[i] - max_list[i]\n            max_list[i] = 0\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (\n        tup1 if tup1[0] > tup2[0] else tup2,\n        tup2 if tup1[0] > tup2[0] else tup1\n    )\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup = tuple()\n    for i, j in zip(test_tup1, test_tup2):\n        if i > j:\n            new_tup = (i, j)\n    return new_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if(len(test_tup1)<len(test_tup2)):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    if test_tup1[1] < test_tup2[1]:\n        return test_tup1\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup2\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1 > tup2:\n            max_tup = (tup2, tup1)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    x_1, y_1 = test_tup1\n    x_2, y_2 = test_tup2\n    if x_1 > x_2:\n        return x_1, y_1\n    elif x_1 < x_2:\n        return x_2, y_2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(max(test_tup1), max(test_tup2))\n    max_tup = (0, 0)\n    for i in range(len(test_tup1)):\n        if max_val == test_tup1[i]:\n            max_tup = (i, 0)\n        elif max_val == test_tup2[i]:\n            max_tup = (0, i)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    min_num = min(test_tup1[0], test_tup2[0])\n    max_num = max(test_tup1[1], test_tup2[1])\n    if test_tup1[0] == min_num:\n        return test_tup1, test_tup2\n    elif test_tup2[0] == min_num:\n        return test_tup1, test_tup2\n    else:\n        return max_num, min_num\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #initial condition\n    x = 0\n    y = 1\n    z = 2\n    #a prime number is greater than 1\n    #x + 1 is guaranteed to be prime\n    if n > 1:\n        #special case\n        if n == 2:\n            return 2\n        #special case\n        if n == 3:\n            return 3\n        else:\n            #initialize the list\n            list_of_numbers = [0] * (n + 1)\n            #initialize the first element\n            list_of_numbers[1] = 1\n            #initialize the second element\n            list_of_numbers[2] = 2\n            #initialize the third element\n            list_of_numbers[3] = 3\n            #initialize the fourth element\n            list_of_numbers[4] = 5\n            #initialize the fifth element\n            list_of_numbers[5] = 7\n            #initialize the sixth element\n            list_of_numbers[6] = 11\n            #initialize the seventh element\n            list_of_numbers[7] = 13\n            #initialize the eigth element\n            list_of_numbers[8] = 17\n            #initialize the ninth element\n            list_of_numbers[9] = 19\n            #initialize the tenth element\n            list_of_numbers[10] = 23\n            #iterate through the list\n            for i in range(11, n + 1):\n                #compute the next element\n                x = (x + 1 + z) % i\n                #compute the next element\n                y = (y + 1 + z) % i\n                #compute the next element\n                z = (z + 1 + y) % i\n                #update the value of the list\n                list_of_numbers[i] = y\n            #return the value of the list\n            return list_of_numbers[n]\n    return -1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if type(n) is not int:\n        raise TypeError\n    if n < 0:\n        raise ValueError\n    n = int(n)\n    primes = []\n    for i in range(n + 1):\n        if n % i == 0:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        return all(n % i for i in range(2, int(sqrt(n)) + 1))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    n += 1\n    a = 2\n    while len(primes) < n:\n        if is_prime(a):\n            primes.append(a)\n            a += 1\n        else:\n            a += 1\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    i = 0\n    d = 0\n    x = n-1\n    z = 1\n    while d <= x:\n        if (x-1) % 2 == 0:\n            x = x/2\n            z = 2*z\n        else:\n            x = (x-1)/2\n            z = 3*z+1\n        i += 1\n    if i!= 0:\n        return z\n    else:\n        return 'No prime found'\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isPrime(n):\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    def getNewmanWilliamsPrime(n):\n        prime_list = []\n        \n        # To generate prime numbers, we will start with 1 and make divisible by \n        # only 2 and 3. We will also keep track of the next prime numbers after\n        # these two numbers\n        #\n        i = 2\n        while i < n:\n            prime = True\n            for j in range(i - 1, 0, -2):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime:\n                prime_list.append(i)\n            i += 2\n        \n        # To find the next prime number to be generated, we will find the next \n        # prime number which is greater than the previous prime number. For \n        # example, the next prime number will be 7, so we check if 7 has already\n        # been generated and if so we keep incrementing the next prime number\n        #\n        next_prime = prime_list[-1] + 2\n        while len(prime_list) < n:\n            if next_prime not in prime_list:\n                prime_list.append(next_prime)\n            else:\n                next_prime += 2\n        \n        return prime_list\n    \n    # START PROBLEM\n    return getNewmanWilliamsPrime(n)\n    "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 0\n    b = 0\n    \n    def has_n_consecutive_prime_digits(n):\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n        \n    def next_number(n):\n        n += 1\n        while n % 2 == 0:\n            n = n // 2\n        a = n\n        if has_n_consecutive_prime_digits(a):\n            return next_number(n)\n        else:\n            n = 3\n            while n % 2 == 0:\n                n = n // 2\n            b = n\n            if has_n_consecutive_prime_digits(b):\n                return next_number(n)\n            else:\n                return n\n                \n    return next_number(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 2: \n        return n \n    else: \n        l = 0 \n        i = 2 \n        while i <= (n // 2): \n            if n % i == 0: \n                l = i \n                break \n            i = i + 1 \n        if l == 0: \n            return n \n        else: \n            return newman_prime(n - l) \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Python tuples are defined using parentheses ( )\n    # Example:\n    # my_tuple = (1, 2, 3)\n    # my_tuple[0] = 1\n    # my_tuple[1] = 2\n    # my_tuple[2] = 3\n    \n    # >>> (lambda x: x[0] + x[1] + x[2], (1, 2, 3))\n    # (lambda x: x[0] + x[1] + x[2], (1, 2, 3))\n    # >>> (lambda x, y: x[0] + x[1] + x[2] + y, (1, 2, 3), (10, 11, 12))\n    # (lambda x, y: x[0] + x[1] + x[2] + y, (1, 2, 3), (10, 11, 12))\n    # >>> (lambda x, y: x + y, (1, 2, 3), (10, 11, 12))\n    # (lambda x, y: x + y, (1, 2, 3), (10, 11, 12))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n    #raise NotImplementedError\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] // test_tup2[i], )\n    return result\n    \n    "
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    tup_sum = []\n    for i in range(0, len(test_tup1)):\n        tup_sum.append(test_tup1[i] / test_tup2[i])\n    return tup_sum\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TODO: Write the function\n    new_tup1 = ()\n    new_tup2 = ()\n    #print(type(new_tup1))\n    for i in range(len(test_tup1)):\n        new_tup1 += (round((test_tup1[i] / test_tup2[i]),2),)\n    for i in range(len(test_tup2)):\n        new_tup2 += (round((test_tup2[i] / test_tup1[i]),2),)\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1], test_tup1[2]/test_tup2[2])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Tuple lengths do not match')\n    if test_tup1[0] == 0 or test_tup2[0] == 0:\n        raise Exception('Cannot divide by zero')\n    try:\n        x = (test_tup1[0] / test_tup2[0])\n    except ZeroDivisionError:\n        raise Exception('Cannot divide by zero')\n    return(x)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (tup1[0] / tup2[0], tup1[1] / tup2[1])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left = []\n    right = []\n    for i in range(len(list1)):\n        if i < L:\n            left.append(list1[i])\n        else:\n            right.append(list1[i])\n    return left, right\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.reverse()\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n    \n    \ndef split_list_with_key(list1, key):\n    '''\n    Write a function that takes in a list and a key and splits the given list into two parts where each item in the first part of the list is at most equal to the key. If the key is greater than each item in the list, then nothing should happen and the list should be returned as is.\n    '''\n    key = abs(key)\n    return_list = []\n    for i in list1:\n        if abs(i - key) <= key:\n            return_list.append(i)\n    return (return_list)\n    \n    \ndef delete_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a new list with all duplicate elements removed.\n    '''\n    return_list = []\n    for i in list1:\n        if i not in return_list:\n            return_list.append(i)\n    return (return_list)\n    \n    \ndef remove_value_from_list(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns a new list with the value removed if it exists in the list.\n    '''\n    return_list = []\n    for i in list1:\n        if i!= val:\n            return_list.append(i)\n    return (return_list)\n    \n    \ndef remove_value_from_list_using_set(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns a new list with the value removed if it exists in the list.\n    '''\n    return_list = list(set(list1) - {val})\n    return (return_list)\n    \n    \ndef binary_search_for_a_value_in_the_sorted_list(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns the index of the first occurrence of the value in the list if it exists in the list. Return -1 if the value does not exist in the list.\n    '''\n    length = len(list1)\n    if length == 0:\n        return -1\n    if length == 1:\n        if list1[0] == val:\n            return 0\n        else:\n            return -1\n    if list1[length // 2] == val:\n        return (length // 2)\n    if list1[length // 2] < val:\n        return binary_search_for_a_value_in_the_sorted_list(list1[length // 2 + 1:], val)\n    else:\n        return binary_search_for_a_value_in_the_sorted_list(list1[:length // 2], val)\n    \n    \ndef binary_search_for_a_value_in_the_sorted_list_using_recursion(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns the index of the first occurrence of the value in the list if it exists in the list. Return -1 if the value does not exist in the list.\n    '''\n    def recurse(list1, val, lower_index, upper_index):\n        if lower_index <= upper_index:\n            mid = lower_index + (upper_index - lower_index) // 2\n            if val == list1[mid]:\n                return mid\n            elif val < list1[mid]:\n                return recurse(list1, val, lower_index, mid - 1)\n            else:\n                return recurse(list1, val, mid + 1, upper_index)\n        return -1\n    return recurse(list1, val, 0, len(list1) - 1)\n    \n    \ndef binary_search_for_a_value_in_the_sorted_list_using_recursion_using_binary_search(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns the index of the first occurrence of the value in the list if it exists in the list. Return -1 if the value does not exist in the list.\n    '''\n    def binary_search(list1, val, low, high):\n        if low >= high:\n            return -1\n        mid = low + (high - low) // 2\n        if val == list1[mid]:\n            return mid\n        elif val < list1[mid]:\n            return binary_search(list1, val, low, mid - 1)\n        else:\n            return binary_search(list1, val, mid + 1, high)\n    return binary_search(list1, val, 0, len(list1) - 1)\n    \n    \ndef binary_search_for_a_value_in_the_sorted_list_using_iterative_search(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns the index of the first occurrence of the value in the list if it exists in the list. Return -1 if the value does not exist in the list.\n    '''\n    low = 0\n    high = len(list1) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if val == list1[mid]:\n            return mid\n        elif val < list1[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \n    \ndef binary_search_for_a_value_in_the_sorted_list_using_iterative_search_using_binary_search(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns the index of the first occurrence of the value in the list if it exists in the list. Return -1 if the value does not exist in the list.\n    '''\n    low = 0\n    high = len(list1) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if val == list1[mid]:\n            return mid\n        elif val < list1[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \n    \ndef binary_search_for_a_value_in_the_sorted_list_using_iterative_search_using_binary_search_recursion(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns the index of the first occurrence of the value in the list if it exists in the list. Return -1 if the value does not exist in the list.\n    '''\n    def recurse(list1, val, low, high):\n        if low >= high:\n            return -1\n        mid = low + (high - low) // 2\n        if val == list1[mid]:\n            return mid\n        elif val < list1[mid]:\n            return recurse(list1, val, low, mid - 1)\n        else:\n            return recurse(list1, val, mid + 1, high)\n    return recurse(list1, val, 0, len(list1) - 1)\n    \n    \ndef binary_search_for_a_value_in_the_sorted_list_using_iterative_search_using_binary_search_recursion_using_binary_search(list1, val):\n    '''\n    Write a function that takes in a list and an integer and returns the index of the first occurrence of the value in the list if it exists in the list. Return -1 if the value does not exist in the list.\n    '''\n    def binary_search_recurse(list1, val, low, high):\n        if low >= high:\n            return -1\n        mid = low + (high - low) // 2\n        if val == list1[mid]:\n            return mid\n        elif val < list1[mid]:\n            return binary_search_recurse(list1, val, low, mid - 1)\n        else:\n            return binary_search_recurse(list1, val, mid + 1, high)\n    return binary_search_recurse(list1, val, 0, len(list1) - 1)\n    "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)%2==1:\n        return ((list1[:L], list1[L+1:]))\n    else:\n        return ((list1[:L], list1[L:]) )\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    if len(list1) % L == 0:\n        newlist = []\n        for i in range(len(list1)//2):\n            newlist.append(list1[2*i])\n            newlist.append(list1[2*i+1])\n        return tuple(newlist)\n    else:\n        return tuple(list1[:-1])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left = list1[:L]\n    right = list1[L:]\n    return left, right\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n    "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # TODO: your code here!\n    \n    n = len(list1)\n    if n <= L:\n        return (list1, list())\n    if n <= L * 2:\n        return (list1[:L], list1[L:])\n    if n - L <= L * 2:\n        return (list1[:L], list1[L:])\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 1:\n        raise ValueError\n    else:\n        first_part = list1[:int(len(list1) / 2)]\n        second_part = list1[int(len(list1) / 2):]\n        return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    temp = 0\n    part1 = []\n    part2 = []\n    for element in list1:\n        if temp == L:\n            part2.append(element)\n            temp = 0\n        else:\n            temp += 1\n            part1.append(element)\n    return part1, part2\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError('Age cannot be negative')\n    else:\n        return (18 * h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age*7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 6 * (h_age) + 0.5\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(f\"{h_age} is not a valid dog age. The dog's age should be greater than 0.\")\n        return\n    else:\n        return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(((h_age * 7) + 2) * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    i = 0\n    splitted = []\n    for i in range(len(S)):\n        if i % step == 0:\n            splitted.append(S[i:i+1])\n        i += 1\n    return splitted\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(step, int):\n        raise ValueError(\"Error: list_split() -> step should be an integer\")\n    if not isinstance(S, list):\n        raise ValueError(\"Error: list_split() -> S should be a list\")\n    if step <= 0:\n        raise ValueError(\"Error: list_split() -> step should be greater than 0\")\n    \n    return_list = []\n    start = 0\n    while start < len(S):\n        return_list.append(S[start:start+step])\n        start += step\n    return return_list\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # split the list S into a list of lists where each list has exactly n elements\n    # for example, list_split([1,2,3,4,5,6],2) should return [[1,2],[3,4],[5,6]]\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return []\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\nprint(list_split([1,2,3,4,5,6,7,8,9],3))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    \n    if not S:\n        return []\n    \n    \n    # split the list into equal sublists\n    # and add the resulting sublists into a list\n    i = 0\n    while i < len(S):\n        if i % step == 0:\n            output.append(S[:i])\n            S = S[i:]\n        i += 1\n    \n    # add the remaining sublist if any\n    if len(S) > 0:\n        output.append(S)\n    return output\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    i = 0\n    while (i < len(S)):\n        res.append(S[i:i+step])\n        i = i + step\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    x = []\n    for i in range(0, len(S), step):\n        x.append(S[i:i+step])\n    return x\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[S[i] for i in range(0,len(S),step)],[S[i] for i in range(1,len(S),step)],[S[i] for i in range(2,len(S),step)]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert l > 0, \"The side length of the cube must be > 0\"\n    return l * l * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # define function\n    area = l**2*6.28\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # how do we find the lateral surface area of a cube?\n    # it will be the length of the two \"outer\" edges\n    # i.e. the sum of the lengths of each of its edges and the length of the outer two sides\n    # the height of each of the faces will be equal\n    # the height of the bottom side will be the same\n    # then, add the height of the top side to the height of the bottom side\n    # and divide by 4 to get the lateral surface area of the cube\n    \n    # the first edge\n    l = float(l)\n    L = (l ** 2) / 2\n    # the second edge\n    R = float(l)\n    # the third edge\n    B = 2 * R\n    # the height of the four faces\n    H = l\n    # the height of the four bottom sides\n    H1 = float(l)\n    # the height of the four top sides\n    H2 = H - H1\n    # the lateral surface area of the cube\n    lateralsurfacearea = (L + R + B) * H1 + (L + R + B) * H2\n    return lateralsurfacearea\n    "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert (l > 0)\n    if l == 0:\n        return 0\n    else:\n        return 2 * (l ** 2) + (l - 2) * (l - 1)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #\n    # Your code here\n    #\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l*l\n    print(\"The lateral surface of the cube with side length l = {l} is {area}.\".format(l = l, area = area))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return ((2 * l**2) + (2 * l * (l**2 - 1)))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n=int(n)\n    sum=0\n    for i in range(n):\n        if (i%2!=0):\n            sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def sum_Squares(n):\n        sum = 0\n        for i in range(1,n+1):\n            if i%2!=0:\n                sum += i**2\n        return sum\n    return sum_Squares(n)\nprint(square_Sum(5)) \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n      if i % 2!= 0:\n        sum += i**2\n    return sum\nprint(square_Sum(7))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            total_sum += i**2\n    return total_sum\n    \ndef cube_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            total_sum += i**3\n    return total_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #your code here\n    n = int(input())\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    num_list = [n+1]\n    for i in range(2, n):\n        if i%2!=0:\n            num_list.append(i)\n    sum = 0\n    for i in range(len(num_list)):\n        sum += (num_list[i]**2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(i%2!=0):\n            sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n,0,-1):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 5\n    if n==6:\n        return 6\n    if n==7:\n        return 7\n    if n==8:\n        return 8\n    if n==9:\n        return 9\n    if n==10:\n        return 10\n    if n==11:\n        return 11\n    if n==12:\n        return 12\n    if n==13:\n        return 13\n    if n==14:\n        return 14\n    if n==15:\n        return 15\n    if n==16:\n        return 16\n    if n==17:\n        return 17\n    if n==18:\n        return 18\n    if n==19:\n        return 19\n    if n==20:\n        return 20\n    if n==21:\n        return 21\n    if n==22:\n        return 22\n    if n==23:\n        return 23\n    if n==24:\n        return 24\n    if n==25:\n        return 25\n    if n==26:\n        return 26\n    if n==27:\n        return 27\n    if n==28:\n        return 28\n    if n==29:\n        return 29\n    if n==30:\n        return 30\n    if n==31:\n        return 31\n    if n==32:\n        return 32\n    if n==33:\n        return 33\n    if n==34:\n        return 34\n    if n==35:\n        return 35\n    if n==36:\n        return 36\n    if n==37:\n        return 37\n    if n==38:\n        return 38\n    if n==39:\n        return 39\n    if n==40:\n        return 40\n    if n==41:\n        return 41\n    if n==42:\n        return 42\n    if n==43:\n        return 43\n    if n==44:\n        return 44\n    if n==45:\n        return 45\n    if n==46:\n        return 46\n    if n==47:\n        return 47\n    if n==48:\n        return 48\n    if n==49:\n        return 49\n    if n==50:\n        return 50\n    if n==51:\n        return 51\n    if n==52:\n        return 52\n    if n==53:\n        return 53\n    if n==54:\n        return 54\n    if n==55:\n        return 55\n    if n==56:\n        return 56\n    if n==57:\n        return 57\n    if n==58:\n        return 58\n    if n==59:\n        return 59\n    if n==60:\n        return 60\n    if n==61:\n        return 61\n    if n==62:\n        return 62\n    if n==63:\n        return 63\n    if n==64:\n        return 64\n    if n==65:\n        return 65\n    if n==66:\n        return 66\n    if n==67:\n        return 67\n    if n==68:\n        return 68\n    if n==69:\n        return 69\n    if n==70:\n        return 70\n    if n==71:\n        return 71\n    if n==72:\n        return 72\n    if n==73:\n        return 73\n    if n==74:\n        return 74\n    if n==75:\n        return 75\n    if n==76:\n        return 76\n    if n==77:\n        return 77\n    if n==78:\n        return 78\n    if n==79:\n        return 79\n    if n==80:\n        return 80\n    if n==81:\n        return 81\n    if n==82:\n        return 82\n    if n==83:\n        return 83\n    if n==84:\n        return 84\n    if n==85:\n        return 85\n    if n==86:\n        return 86\n    if n==87:\n        return 87\n    if n==88:\n        return 88\n    if n==89:\n        return 89\n    if n==90:\n        return 90\n    if n==91:\n        return 91\n    if n==92:\n        return 92\n    if n==93:\n        return 93\n    if n==94:\n        return 94\n    if n==95:\n        return 95\n    if n==96:\n        return 96\n    if n==97:\n        return 97\n    if n==98:\n        return 98\n    if n==99:\n        return 99\n    if n==100:\n        return 100\n    if n==101:\n        return 101\n    if n==102:\n        return 102\n    if n==103:\n        return 103\n    if n==104:\n        return 104\n    if n==105:\n        return 105\n    if n==106:\n        return 106\n    if n==107:\n        return 107\n    if n==108:\n        return 108\n    if n==109:\n        return 109\n    if n==110:\n        return 110\n    if n==111:\n        return 111\n    if n==112:\n        return 112\n    if n==113:\n        return 113\n    if n==114:\n        return 114\n    if n==115:\n        return 115\n    if n==116:\n        return 116\n    if n==117:\n        return 117\n    if n==118:\n        return 118\n    if n==119:\n        return 119\n    if n==120:\n        return 120\n    if n==121:\n        return 121\n    if n==122:\n        return 122\n    if n==123:\n        return 123\n    if n==124:\n        return 124\n    if n==125:\n        return 125\n    if n==126:\n        return 126\n    if n==127:\n        return 127\n    if n==128:\n        return 128\n    if n==129:\n        return 129\n    if n==130:\n        return 130\n    if n==131:\n        return 131\n    if n==132:\n        return 132\n    if n==133:\n        return 133\n    if n==134:\n        return 134\n    if n==135:\n        return 135\n    if n==136:\n        return 136\n    if n==137:\n        return 137\n    if n==138:\n        return 138\n    if n==139:\n        return 139\n    if n==140:\n        return 140\n    if n==141:\n        return 141\n    if n==142:\n        return 142\n    if n==143:\n        return 143\n    if n==144:\n        return 144\n    if n==145:\n        return 145\n    if n==146:\n        return 146\n    if n==147:\n        return 147\n    if n==148:\n        return 148\n    if n==149:\n        return 149\n    if n==150:\n        return 150\n    if n==151:\n        return 151\n    if n==152:\n        return 152\n    if n==153:\n        return 153\n    if n==154:\n        return 154\n    if n==155:\n        return 155\n    if n==156:\n        return 156\n    if n==157:\n        return 157\n    if n==158:\n        return 158\n    if n==159:\n        return 159\n    if n==160:\n        return 160\n    if n==161:\n        return 161\n    if n==162:\n        return 162\n    if n==163:\n        return 163\n    if n==164:\n        return 164\n    if n==165:\n        return 165\n    if n==166:\n        return 166\n    if n==167:\n        return 167\n    if n==168:\n        return 168\n    if n==169:\n        return 169\n    if n==170:\n        return 170\n    if n==171:\n        return 171\n    if n==172:\n        return 172\n    if n==173:\n        return 173\n    if n==174:\n        return 174\n    if n==175:\n        return 175\n    if n==176:\n        return 176\n    if n==177:\n        return 177\n    if n==178:\n        return 178\n    if n==179:\n        return 179\n    if n==180:\n        return 180\n    if n==181:\n        return 181\n    if n==182:\n        return 182\n    if n==183:\n        return 183\n    i"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    num = 0\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    elif n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    else:\n        for i in range(1, n):\n            num += 1\n            if i == 1:\n                print(n,'st star number')\n            elif i == 2:\n                print(n,'st and', n-1, 'nd star number')\n            else:\n                print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    \n    \ndef find_star_num2(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    \n    result = ''\n    for i in range(1, n+1):\n        if i == 1:\n            result += str(n) +'st star number'\n        elif i == 2:\n            result += str(n) +'st and'+ str(n-1) + 'nd star number'\n        else:\n            result += str(n) +'st,'+ str(n-1) + 'nd and'+ str(n-2) + 'rd star number'\n    return result\n    \n    \ndef find_star_num3(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    if n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    else:\n        return '*' * n\n    \n    \ndef find_star_num4(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    if n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    else:\n        return '*' * n\n    \n    \ndef find_star_num5(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    if n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    else:\n        return '*' * n\n    \n    \ndef find_star_num6(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    if n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    elif n == 4:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd and', n-3, 'th star number')\n        return\n    else:\n        return '*' * n\n    \n    \ndef find_star_num7(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    if n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    elif n == 4:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd and', n-3, 'th star number')\n        return\n    else:\n        return '*' * n\n    \n    \ndef find_star_num8(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    if n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    elif n == 4:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd and', n-3, 'th star number')\n        return\n    elif n == 5:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd and', n-3, 'th and', n-4, 'th star number')\n        return\n    else:\n        return '*' * n\n    \n    \ndef find_star_num9(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    if n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    elif n == 4:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd and', n-3, 'th star number')\n        return\n    elif n == 5:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd and', n-3, 'th and', n-4, 'th star number')\n        return\n    else:\n        return '*' * n\n    \n    \ndef find_star_num10(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print('The number you are looking for is less than 1')\n        return\n    if n == 1:\n        print(n,'st star number')\n        return\n    elif n == 2:\n        print(n,'st and', n-1, 'nd star number')\n        return\n    elif n == 3:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd star number')\n        return\n    elif n == 4:\n        print(n,'st,', n-1, 'nd and', n-2, 'rd and', n-3, 'th star number')\n        return\n    elif n == "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 5\n    else:\n        return 5*(n-1) + 6\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    while n > 1:\n        star_num += 2\n        n //= 2\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n + 1) * find_star_num(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a *= i\n    return a\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    v = ord(k)\n    return v\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for i in range(0,len(k)):\n        if k[i]==\"\\n\":\n            return \"\\n\"\n        else:\n            print(ord(k[i]))\n    return \"Invalid Input\"\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Your code here\n    if k==' ':\n        return 32\n    elif k == '.':\n        return 46\n    elif k == ',':\n        return 44\n    elif k == '?':\n        return 63\n    elif k == '-':\n        return 45\n    elif k == '!':\n        return 33\n    elif k == '.':\n        return 46\n    elif k =='':\n        return 32\n    elif k == '?':\n        return 63\n    elif k == ',':\n        return 44\n    elif k == '.':\n        return 46\n    elif k == '-':\n        return 45\n    elif k == '!':\n        return 33\n    elif k =='':\n        return 32\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n            \n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_number = 0\n    even_list = []\n    index_list = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_list.append(arr[i])\n            even_number = even_number + arr[i]\n            index_list.append(i)\n    print(even_list)\n    print(index_list)\n    print(even_number)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total=0\n    for i in range(0,len(arr),2):\n        if arr[i]%2==0:\n            total+=arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    sum = 0\n    \n    for i in range(len(arr)):\n        if (i%2 == 0):\n            sum += arr[i]\n            \n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    print(even_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    # your code here\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if (i+1)<len(arr):\n            sum += arr[i+1]\n    \n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    even_sum = 0\n    odd_sum = 0\n    \n    for i in range(0, len(arr), 2):\n        if i == 0:\n            even_sum += arr[i]\n        else:\n            even_sum += arr[i]\n            \n    for i in range(1, len(arr), 2):\n        if i == 0:\n            odd_sum += arr[i]\n        else:\n            odd_sum += arr[i]\n    return even_sum + odd_sum\n        \nif __name__ == \"__main__\":\n    arr = [1, 3, 2, 4, 6, 5, 8, 9]\n    print(sum_even_and_even_index(arr))"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(1, n+1):\n        if i%2==0:\n            even_numbers.append(i)\n    even_numbers_power = []\n    for i in even_numbers:\n        even_numbers_power.append(i**5)\n    return sum(even_numbers_power)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2==0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_sum += i ** 5\n    print(\"Sum of even numbers raised to the fifth power is\", even_sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i ** 5 for i in range(n) if i % 2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(i%2==0):\n            sum+=i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    '''\n    Another way to solve the problem:\n    Take n as input and calculate n^5 from n^4 to n^1.\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return_list = []\n    for tup in test_list:\n        return_list.append(tup[1])\n    \n    return return_list\n    \n    \n    # done\n    \ndef rear_extract_reversed(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return_list = []\n    for tup in reversed(test_list):\n        return_list.append(tup[1])\n    \n    return return_list\n    \n    \n    # done\n    \ndef rear_extract_using_list_comprehension(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return list(map(lambda tup: tup[1], test_list))\n    \n    \n    # done\n    \ndef rear_extract_using_list_comprehension_reversed(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return list(reversed(map(lambda tup: tup[1], test_list)))\n    \n    \n    # done\n    \ndef remove_first_letter(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the first letter of each string in the original list removed.\n    '''\n    \n    return_list = []\n    for s in test_list:\n        s = s[1:]\n        return_list.append(s)\n    \n    return return_list\n    \n    \n    # done\n    \ndef remove_first_letter_reversed(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the first letter of each string in the original list removed.\n    '''\n    \n    return_list = []\n    for s in reversed(test_list):\n        s = s[1:]\n        return_list.append(s)\n    \n    return return_list\n    \n    \n    # done\n    \ndef remove_first_letter_using_list_comprehension(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the first letter of each string in the original list removed.\n    '''\n    \n    return list(map(lambda s: s[1:], test_list))\n    \n    \n    # done\n    \ndef remove_first_letter_using_list_comprehension_reversed(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the first letter of each string in the original list removed.\n    '''\n    \n    return list(reversed(map(lambda s: s[1:], test_list)))\n    \n    \n    # done\n    \ndef remove_last_letter(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the last letter of each string in the original list removed.\n    '''\n    \n    return_list = []\n    for s in test_list:\n        s = s[:-1]\n        return_list.append(s)\n    \n    return return_list\n    \n    \n    # done\n    \ndef remove_last_letter_reversed(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the last letter of each string in the original list removed.\n    '''\n    \n    return_list = []\n    for s in reversed(test_list):\n        s = s[:-1]\n        return_list.append(s)\n    \n    return return_list\n    \n    \n    # done\n    \ndef remove_last_letter_using_list_comprehension(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the last letter of each string in the original list removed.\n    '''\n    \n    return list(map(lambda s: s[:-1], test_list))\n    \n    \n    # done\n    \ndef remove_last_letter_using_list_comprehension_reversed(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the last letter of each string in the original list removed.\n    '''\n    \n    return list(reversed(map(lambda s: s[:-1], test_list)))\n    \n    \n    # done\n    \ndef remove_middle_letter(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the middle letter of each string in the original list removed.\n    '''\n    \n    return_list = []\n    for s in test_list:\n        s = s[1:-1]\n        return_list.append(s)\n    \n    return return_list\n    \n    \n    # done\n    \ndef remove_middle_letter_reversed(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the middle letter of each string in the original list removed.\n    '''\n    \n    return_list = []\n    for s in reversed(test_list):\n        s = s[1:-1]\n        return_list.append(s)\n    \n    return return_list\n    \n    \n    # done\n    \ndef remove_middle_letter_using_list_comprehension(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the middle letter of each string in the original list removed.\n    '''\n    \n    return list(map(lambda s: s[1:-1], test_list))\n    \n    \n    # done\n    \ndef remove_middle_letter_using_list_comprehension_reversed(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the middle letter of each string in the original list removed.\n    '''\n    \n    return list(reversed(map(lambda s: s[1:-1], test_list)))\n    \n    \n    # done\n    \ndef remove_second_and_last_letter(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the second and last letter of each string in the original list removed.\n    '''\n    \n    return_list = []\n    for s in test_list:\n        s = s[1:-1]\n        return_list.append(s)\n    \n    return return_list\n    \n    \n    # done\n    \ndef remove_second_and_last_letter_reversed(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the second and last letter of each string in the original list removed.\n    '''\n    \n    return_list = []\n    for s in reversed(test_list):\n        s = s[1:-1]\n        return_list.append(s)\n    \n    return return_list\n    \n    \n    # done\n    \ndef remove_second_and_last_letter_using_list_comprehension(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the second and last letter of each string in the original list removed.\n    '''\n    \n    return list(map(lambda s: s[1:-1], test_list))\n    \n    \n    # done\n    \ndef remove_second_and_last_letter_using_list_comprehension_reversed(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the second and last letter of each string in the original list removed.\n    '''\n    \n    return list(reversed(map(lambda s: s[1:-1], test_list)))\n    \n    \n    # done\n    \ndef remove_middle_letter_and_front_and_back(test_list):\n    '''\n    Write a function that take"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for tup in test_list:\n        return_list.append(tup[-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in test_list:\n        return_list.append(i[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][2])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    ret = []\n    for i in test_list:\n        ret.append(i[-1])\n    return ret\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"ERROR\"\n    else:\n        return tuple([subtract(a,b) for a,b in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0:len(test_tup1)]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = test_tup1\n    for i in range(len(test_tup1)):\n        new_tup[i] -= test_tup2[i]\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        new_tup = []\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        return tuple(new_tup)\n    else:\n        return \"The tuples have different sizes.\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Declare an empty list\n    new_list = []\n    for i in range(len(test_tup1)):\n        new_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(new_list)\n    #Return a new tuple that contains the values of the first tuple minus the values of the second tuple with the same index.\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # test_tup1 = (1, 2, 3)\n    # test_tup2 = (3, 4, 5)\n    # test_tup3 = (4, 5, 6)\n    # print(substract_elements(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]-test_tup2[i],)\n    return result\n    \ndef sub_tup_len(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the length of the first tuple from the length of the second tuple.\n    '''\n    return len(test_tup1)-len(test_tup2)\n    \ndef same_letters(test_string1, test_string2):\n    '''\n    Write a function that takes in two strings and return a boolean indicating whether they are the same letters but not in the same order.\n    '''\n    string_1 = list(test_string1)\n    string_2 = list(test_string2)\n    if len(string_1) == len(string_2):\n        if sorted(string_1) == sorted(string_2):\n            return True\n    return False\n    \ndef is_power_of_2(number):\n    '''\n    Write a function that takes in a number and returns a boolean indicating whether or not it is a power of 2.\n    '''\n    return number > 0 and (number & (number-1)) == 0\n    \ndef dictionary_values(test_dict):\n    '''\n    Write a function that takes in a dictionary and returns a list of tuples that contain the keys and values of the dictionary, in the same order in which they are found.\n    '''\n    result = []\n    for key in test_dict:\n        result += (key, test_dict[key])\n    return result\n    \ndef only_even_numbers(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the numbers that are even.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if test_list[i] % 2 == 0:\n            result += (test_list[i],)\n    return result\n    \ndef power_of_2(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the numbers that are powers of 2.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if is_power_of_2(test_list[i]):\n            result += (test_list[i],)\n    return result\n    \ndef odd_even_sum(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers that are odd and the sum of the numbers that are even.\n    '''\n    odd = 0\n    even = 0\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n    return odd, even\n    \ndef sum_odd_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the odd numbers and the sum of the even numbers.\n    '''\n    odd = 0\n    even = 0\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n    return odd, even\n    \ndef sum_odd_even_odd_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the odd numbers and the sum of the even numbers.\n    '''\n    odd = 0\n    even = 0\n    odd_even = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n            odd_even += (odd, even)\n            odd, even = 0, 0\n    return odd_even\n    \ndef sum_odd_even_odd_even_odd_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the odd numbers and the sum of the even numbers.\n    '''\n    odd = 0\n    even = 0\n    odd_even = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n            odd_even += (odd, even)\n            odd, even = 0, 0\n    return odd_even\n    \ndef odd_even_range(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the odd numbers in the range.\n    '''\n    odd_range = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            odd_range += (test_list[i],)\n    return odd_range\n    \ndef sum_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the odd numbers in the range.\n    '''\n    odd = 0\n    even = 0\n    odd_even = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n            odd_even += (odd, even)\n            odd, even = 0, 0\n    return odd_even\n    \ndef sum_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the odd numbers in the range.\n    '''\n    odd = 0\n    even = 0\n    odd_even = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n            odd_even += (odd, even)\n            odd, even = 0, 0\n    return odd_even\n    \ndef sum_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the odd numbers in the range.\n    '''\n    odd = 0\n    even = 0\n    odd_even = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n            odd_even += (odd, even)\n            odd, even = 0, 0\n    return odd_even\n    \ndef sum_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the odd numbers in the range.\n    '''\n    odd = 0\n    even = 0\n    odd_even = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n            odd_even += (odd, even)\n            odd, even = 0, 0\n    return odd_even\n    \ndef sum_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the odd numbers in the range.\n    '''\n    odd = 0\n    even = 0\n    odd_even = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n-1)+(n+1)*even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n+1):\n        s += int(math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + math.factorial(n)/math.factorial(i)/math.factorial(n-i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n+1): \n        sum += pow(2, i) * (1 / math.sqrt(2 * math.pi)) * math.exp(-1 * pow(i, 2) / 2) \n    return (sum) \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    for i in range(1,n+1):\n        binomial_coeff_sum += math.comb(n,i) * (n-i)**i / math.factorial(i)\n    return binomial_coeff_sum\n    \ndef odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    for i in range(1,n+1):\n        binomial_coeff_sum += math.comb(n,i) * (n-i)**i / math.factorial(i)\n    return binomial_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n%2!= 0:\n        print('Invalid input')\n    else:\n        sum = 0\n        for i in range(n//2):\n            sum += math.factorial(n) / (math.factorial(i) * math.factorial((n - i)))\n        return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    arr = [] \n    for i in range(n+1): \n        arr.append(math.comb(n, i)) \n        #print(arr)\n    return sum(arr) \nprint(even_binomial_Coeff_Sum(5)) \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1 or n == 0: \n        return 1\n    else:\n        return (even_binomial_Coeff_Sum(n-2) + 2*even_binomial_Coeff_Sum(n-1))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binom_list = []\n    for i in range(n+1):\n        binom_list.append(0)\n    for i in range(n+1):\n        if i % 2 == 0:\n            binom_list[i] = 1\n    sum = 0\n    for i in range(n+1):\n        sum = sum + binom_list[i]\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    volume = (math.pi*r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*(3.14)*((r*r)*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi * r**2 * h\n    \n    \nprint(volume_cylinder(3,4))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    volume = pi * h * (r**2)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    vol = math.pi * r ** 2 * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3)*math.pi*r*r*h\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy = dict.copy()\n    for k in dict_copy:\n        if dict_copy[k] <= n:\n            dict.pop(k)\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    print(new_dict)\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n    \n    \n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # initialize empty dictionary\n    filtered_dict = {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    d = dict()\n    for k,v in dict.items():\n        if v>=n:\n            d[k] = v\n    return d\n    \nd = {\n    'key1': 1,\n    'key2': 4,\n    'key3': 3,\n    'key4': 2,\n    'key5': 5\n}\nprint(dict_filter(d,5))\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new = {}\n    for k,v in dict.items():\n        if v >= n:\n            new[k] = v\n    return new\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n    \n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: val for key, val in dict.items() if val >= n}\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out_dict = {}\n    for key in dict.keys():\n        if dict[key] > n:\n            out_dict[key] = dict[key]\n    return out_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0,len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count = count+1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] <= test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    lst = []\n    for i in range(len(test_tup)):\n        if test_tup[i] not in lst:\n            lst.append(test_tup[i])\n    return len(lst)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for tup in test_tup:\n        if tup < test_tup[0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n=0\n    for i in range(len(test_tup)):\n        if test_tup[i]==test_tup[0]:\n            n+=1\n    return n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - test_tup.index(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(test_tup) and j < len(test_tup):\n        if test_tup[i] > test_tup[j]:\n            k = test_tup[j]\n            j += 1\n        else:\n            k = test_tup[i]\n            i += 1\n    return k\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for i in range(len(test_tup)):\n        if(test_tup[i]>test_tup[i+1]):\n            count+=1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #Here I have the given example (3,2,1,4,1)\n    #This returns the count of 2 which is the number of elements that occur before this tuple\n    c = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[i-1]:\n            c+=1\n    return c\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    count = 0\n    for x in range(0,len(test_tup)):\n        if(test_tup[x]<test_tup[x-1]):\n            count+=1\n    return count\n    \nprint(count_first_elements((1,2,3,2,1)))\nprint(count_first_elements((1,2,2,1)))\nprint(count_first_elements((1,2,1,2,3)))\nprint(count_first_elements((2,1,2,3,1,2,2)))\nprint(count_first_elements((1,1,1,1)))"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # For some reason this line doesn't work\n    # return n * (n ** 2 + 1) / 2\n    return (n ** 2 + 1) / 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((1 + 8 * n) ** 0.5)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)*(2*n+1)//6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        decagonals = 0\n        if n == 0:\n            return decagonals\n        while n!= 0:\n            decagonals += 1\n            n -= 1\n        return decagonals\n        \ndef is_pentagonal(n): \n    '''\n    Write a function to check if a number is pentagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        pentagonals = 0\n        while n!= 0:\n            n -= 1\n            pentagonals += 1\n        return pentagonals % 2\n        \ndef is_hexagonal(n): \n    '''\n    Write a function to check if a number is hexagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        hexagonals = 0\n        while n!= 0:\n            n -= 1\n            hexagonals += 1\n        return hexagonals % 2\n        \ndef is_heptagonal(n): \n    '''\n    Write a function to check if a number is heptagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heptagonals = 0\n        while n!= 0:\n            n -= 1\n            heptagonals += 1\n        return heptagonals % 2\n        \ndef is_octagonal(n): \n    '''\n    Write a function to check if a number is octagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        octagonals = 0\n        while n!= 0:\n            n -= 1\n            octagonals += 1\n        return octagonals % 2\n        \ndef is_huygonal(n): \n    '''\n    Write a function to check if a number is huygonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        huygons = 0\n        while n!= 0:\n            n -= 1\n            huygons += 1\n        return huygons % 2\n        \ndef is_neo(n): \n    '''\n    Write a function to check if a number is neo.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        neos = 0\n        while n!= 0:\n            n -= 1\n            neos += 1\n        return neos % 2\n        \ndef is_hyper(n): \n    '''\n    Write a function to check if a number is hyper.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        hyper = 0\n        while n!= 0:\n            n -= 1\n            hyper += 1\n        return hyper % 2\n        \ndef is_heyptagonal(n): \n    '''\n    Write a function to check if a number is heyptagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyptagonals = 0\n        while n!= 0:\n            n -= 1\n            heyptagonals += 1\n        return heyptagonals % 2\n        \ndef is_heyhexagonal(n): \n    '''\n    Write a function to check if a number is heyhexagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyhexagonals = 0\n        while n!= 0:\n            n -= 1\n            heyhexagonals += 1\n        return heyhexagonals % 2\n        \ndef is_heyoctagonal(n): \n    '''\n    Write a function to check if a number is heyoctagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyoctagonals = 0\n        while n!= 0:\n            n -= 1\n            heyoctagonals += 1\n        return heyoctagonals % 2\n        \ndef is_heyhuygonal(n): \n    '''\n    Write a function to check if a number is heyhuygonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyhuygons = 0\n        while n!= 0:\n            n -= 1\n            heyhuygons += 1\n        return heyhuygons % 2\n        \ndef is_heyneo(n): \n    '''\n    Write a function to check if a number is heyneo.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyneos = 0\n        while n!= 0:\n            n -= 1\n            heyneos += 1\n        return heyneos % 2\n        \ndef is_heyhyper(n): \n    '''\n    Write a function to check if a number is heyhyper.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyhyper = 0\n        while n!= 0:\n            n -= 1\n            heyhyper += 1\n        return heyhyper % 2\n        \ndef is_heyoheptagonal(n): \n    '''\n    Write a function to check if a number is heyoheptagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyoheptagonals = 0\n        while n!= 0:\n            n -= 1\n            heyoheptagonals += 1\n        return heyoheptagonals % 2\n        \ndef is_heyohexagonal(n): \n    '''\n    Write a function to check if a number is heyohexagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyohexagonals = 0\n        while n!= 0:\n            n -= 1\n            heyohexagonals += 1\n        return heyohexagonals % 2\n        \ndef is_heyooctagonal(n): \n    '''\n    Write a function to check if a number is heyooctagonal.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"N must be an integer\")\n    if n < 0:\n        raise ValueError(\"N must be >= 0\")\n    else:\n        heyooctagonals = 0\n        while n!= 0:\n            n -= 1\n            heyooctagonals += 1\n        return heyooctagonals % 2\n        \ndef is_heyohuygonal(n): \n    '''\n    Write a function to check if a number is heyohuygonal."
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i * (i + 1) // 2\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        return 0\n    \n    s = 1\n    i = 1\n    while i <= n:\n        s += i\n        i += 1\n        \n    return s\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return 1 + 2 * (n - 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #First approach\n    # num = 1\n    # for i in range(n):\n    #     num = num * (n-i)\n    # return num\n    #Second approach\n    # nth = 1\n    # num = 1\n    # for i in range(n):\n    #     nth = nth * (n-i)\n    #     num = num * (i+1)\n    # return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)//2 + 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if (n < 1): \n        return 0\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 2\n    dec1 = 1\n    dec2 = 2\n    for i in range(3, n + 1): \n        s = (dec1 + dec2) * 1.0\n        dec1 = dec2\n        dec2 = s\n    return s\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    while index < len(dlist):\n        if dlist[index] == item:\n            return True, index\n        else:\n            index += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # This is the commented out 'for loop' below\n    # for i in range(len(dlist)):\n    #     if item == dlist[i]:\n    #         return True, i\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return True,i\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    i = 0\n    while (i < len(dlist)) and (not found):\n        if dlist[i] == item:\n            found = True\n        else:\n            i += 1\n    return found, i\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # initialize the starting index as 0\n    index = 0\n    # initialize the ending index as the lenght of the list\n    end = len(dlist)-1\n    # until the ending index is less than or equal to the starting index\n    while index <= end:\n        # if the element is found at the index, return True and the index\n        if dlist[index] == item:\n            return True, index\n        # otherwise, move to the next element\n        index += 1\n    # if we reach this point and haven't returned yet, then the element isn't in the list\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    a = set(test_list)\n    if len(test_list) == len(a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(\"Input: \" + str(test_list))\n    print(\"Output: \" + str(all_unique(test_list)))\n    test_list.sort()\n    i=1\n    while i < len(test_list):\n        if test_list[i] == test_list[i-1]:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    my_list = []\n    for value in test_list:\n        if value not in my_list:\n            my_list.append(value)\n        else:\n            print('No Duplicate Values')\n            break\n    else:\n        print('All Values are Unique')\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    if len(test_list) > 0:\n        for elem in test_list:\n            if elem not in unique_list:\n                unique_list.append(elem)\n        if len(unique_list) == len(test_list):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    is_unique = True\n    if len(test_list) == len(set(test_list)):\n        is_unique = False\n    return is_unique\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    # if we have length of list is 0 then return True\n    if len(test_list)==0:\n        return True\n    else:\n        # list is not empty then compare each element to all other elements\n        for i in range(len(test_list)):\n            # if the elements are not equal then return False\n            if test_list[i]!= test_list[i+1:]:\n                return False\n        # if we get here then we have already compare all other elements\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    for i in range(1,len(test_list)):\n        if test_list[i]==test_list[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = test_list.split(\" \")\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    \n    return result\n    \n    \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sum_list = []\n    for i in range(min(len(nums1),len(nums2))):\n        sum_list.append(nums1[i] - nums2[i])\n    return sum_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    s = []\n    if len(nums1) >= len(nums2):\n        for i in range(len(nums1)):\n            s.append(nums1[i]-nums2[i])\n        return s\n    elif len(nums2) > len(nums1):\n        for i in range(len(nums1)):\n            s.append(nums1[i]-nums2[i])\n        return s\n    else:\n        return s\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1) - set(nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    subtracted_numbers = []\n    for i in range(0,len(nums1)):\n        subtracted_numbers.append(nums1[i]-nums2[i])\n    return subtracted_numbers\n    \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]-=nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    ret = []\n    for i in range(len(nums1)):\n        ret.append(nums1[i]-nums2[i])\n    return ret\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums_diff = []\n    for i in range(len(nums1)):\n        nums_diff.append(nums1[i] - nums2[i])\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n_str = str(n)\n    for i in range(0, len(n_str)):\n        if n_str.count(n_str[i]) >= 1:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the given integer into string\n    string_version = str(n)\n    \n    # loop over the string_version and check the frequency of each digit and store the count of each digit in a variable\n    counts = {}\n    for i in string_version:\n        counts[i] = counts.get(i,0)+1\n        \n    # return True if the frequncy of each digit is less than or equal to the digit itself.\n    for i in counts:\n        if counts[i] > counts[i]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in range(0, len(str(n))):\n        count += 1\n        if(n%10 == 0):\n            if(count > 1):\n                return False\n        else:\n            count = 1\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    for i in range(0, len(s)): \n        if(n % 10 == 0): \n            return False\n        n = n // 10\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n    if n == 0:\n        return False\n    s = str(n)\n    f = []\n    for i in range(len(s)):\n        f.append(int(s[i]))\n    for i in range(len(s)):\n        if f.count(int(s[i])) > int(s[i]):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    for i in n:\n        if i in count.keys():\n            count[i] += 1\n        else:\n            count[i] = 1\n    return True if len(count) <= len(n) else False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n > 0:\n        n = n//10\n        count = count + 1\n    return count <= count\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #while n:\n    #    x=n%10\n    #    n=n//10\n    #    if(x > x):\n    #        return False\n    #    else:\n    #        return True\n    #return False\n    if(n == 0):\n        return False\n    else:\n        x = n%10\n        if(x == 0):\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum += int(str(n)[i])**2\n    if int(str(n)) == sum:\n        return True\n    else:\n        return False\n        \n        \ndef main():\n    '''\n    Write a python function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    print(validate(12))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    num = n\n    while num!= 0:\n        num = num//10\n        count = count+1\n    if count <= n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list == list\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == element:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i] == element for i in range(len(list)))\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    list_len = len(list)\n    for i in range(0,list_len):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == None:\n        return True\n    else:\n        if element in list:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab*b|ab+b',text)\n    \ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab*b|ab+b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match=re.findall(\"abab\",text)\n    if(match):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(re.findall(r'ab*', text))!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('[ab]b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_one = re.findall('ab+',text)\n    match_two = re.findall('ab{3}',text)\n    return match_one or match_two\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return \"True\" if re.search(r'a{1,2}\\b', text) else \"False\"\n    \ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return \"True\" if re.search(r'a{1,3}\\b', text) else \"False\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #split string into words\n    words = text.split(' ')\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pat = re.compile(r'ab+')\n    match_obj = pat.search(text)\n    print(match_obj)\n    return match_obj\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #Your code here\n    print('test_two_three')\n    #Start writing code here\n    if len(text) > 2 and text.startswith('ab'):\n        if re.search(r'(?=.*ab){2,3}', text):\n            print('Match Found')\n        else:\n            print('Match not Found')\n    else:\n        print('Match not Found')\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return 'a' in text and ('a'*2 in text or 'a'*3 in text)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    repeat_count = k\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    \n    max_sum = float('-inf')\n    max_seen = 0\n    \n    seen = set()\n    \n    for i in range(n):\n        max_seen = max(max_seen + a[i], a[i])\n        if max_seen < k:\n            seen = set()\n        elif max_seen >= k:\n            if max_seen in seen:\n                max_sum = max(max_sum, max_seen)\n            else:\n                seen.add(max_seen)\n                \n    return max_sum\n    \n    #OR\n    #max_sum = float('-inf')\n    #max_seen = 0\n    #seen = set()\n    #for i in range(n):\n    #    max_seen = max(max_seen + a[i], a[i])\n    #    if max_seen < k:\n    #        seen = set()\n    #    elif max_seen >= k:\n    #        if max_seen not in seen:\n    #            seen.add(max_seen)\n    #        else:\n    #            max_sum = max(max_sum, max_seen)\n    \n    #return max_sum\n    \n    #OR\n    #max_sum = 0\n    #max_seen = 0\n    #for i in range(n):\n    #    max_seen = max(max_seen + a[i], a[i])\n    #    if max_seen < k:\n    #        max_seen = 0\n    #    elif max_seen >= k:\n    #        max_sum = max(max_sum, max_seen)\n    \n    #return max_sum\n    \n    "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n==0:\n        return -1\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # max_sum = 0\n    # max_idx = 0\n    # n = len(a)\n    # k = int(k)\n    # for i in range(n):\n    #     if a[i] == 0:\n    #         continue\n    #     for j in range(k):\n    #         if a[i] > 0:\n    #             a[i] = 0\n    #         else:\n    #             break\n    #     max_sum = max(max_sum, sum(a))\n    #     # print(max_sum)\n    #     if max_sum >= 0:\n    #         max_idx = i\n    #     else:\n    #         break\n    #     # print(max_idx)\n    # return max_idx, max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    m = max_sub_array_sum_naive(a, n)\n    if m == float('-inf'):\n        return float('-inf')\n    res = float('-inf')\n    for i in range(n):\n        tmp = 0\n        for j in range(k):\n            tmp += a[i]\n        res = max(tmp, res)\n    return res\n    \n    \ndef max_sub_array_sum_naive(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    tmp = 0\n    for i in range(n):\n        tmp += a[i]\n    return max(tmp, max_sub_array_sum_naive(a, n - 1))\n        \n        \n        \ndef max_sub_array_sum_dp(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \n    \ndef max_sub_array_sum_dp2(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \ndef max_sub_array_sum_dp3(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \ndef max_sub_array_sum_dp4(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \n    \ndef max_sub_array_sum_dp5(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \ndef max_sub_array_sum_dp6(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \ndef max_sub_array_sum_dp7(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \ndef max_sub_array_sum_dp8(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \ndef max_sub_array_sum_dp9(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    if n == 1:\n        return a[0]\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + a[i - 1]\n    return max(dp[n])\n    \n    \ndef max_sub_array_sum_dp10(a, n)"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = -99999999999999999999999999999999999999999999999999999\n    temp_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    max_sub_array_sum = float('-inf')\n    max_sub_array_sum_index = None\n    max_sub_array_sum_k = a[0]\n    k_array = a[0:k]\n    for i in range(n-k):\n        k_sum = sum(k_array)\n        if k_sum > max_sub_array_sum:\n            max_sub_array_sum = k_sum\n            max_sub_array_sum_index = i\n        # print(k_array, k_sum, max_sub_array_sum, max_sub_array_sum_index)\n        k_array = k_array[1:] + a[i+k]\n    if max_sub_array_sum_index == 0:\n        max_sub_array_sum_k = k_sum\n        max_sub_array_sum = k_sum\n        max_sub_array_sum_index = 0\n    else:\n        max_sub_array_sum_k = k_sum\n    # print(\"max_sub_array_sum_k\", max_sub_array_sum_k)\n    return max_sub_array_sum_k\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # code here\n    total = 0\n    max_sum = 0\n    # for loop to iterate k times\n    for i in range(k): \n        total += a[i] \n    max_sum = total \n    # for loop to iterate again k times\n    for i in range(k,n):\n        total += a[i] - a[i-k]\n        if total > max_sum:\n            max_sum = total \n    return max_sum \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_of_arr = []\n    a = list(a)\n    \n    def max_sub_array_sum(arr): \n        n = len(arr) \n        max_so_far = 0\n        max_ending_here = 0\n        for i in range(0, n): \n            max_ending_here = max_ending_here + arr[i] \n            if max_so_far < max_ending_here: \n                max_so_far = max_ending_here \n            if max_ending_here < 0: \n                max_ending_here = 0\n        return max_so_far \n        \n    max_sum = 0\n    # Brute Force\n    for i in range(n): \n        max_sum_of_sub_array = max_sub_array_sum(a[i:]) \n        sum_of_arr.append(max_sum_of_sub_array)\n    return max(sum_of_arr)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr_sum = 0\n    max_sum = 0\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x += i**2\n    return x\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**2\n    return sum\nprint(square_Sum(10))\nprint(square_Sum(1))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        raise ValueError(\"Only Positive Numerics allowed\")\n    else:\n        sum = 0\n        for i in range(1,n+1):\n            if i%2 == 0:\n                sum += i**2\n        return sum"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2==0):\n            sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += pow(i,2)\n    return sum\nprint(square_Sum(10))\n'''\nOUTPUT\n40\n'''\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # you can write to stdout for debugging purposes, e.g.\n    #print(\"this is a debug message\")\n    s = 0\n    for i in range(n):\n        if i%2==0:\n            s = s + i**2\n    return s\n    \n    \n    '''\n    \u65b9\u6cd5\u4e00\uff1a\u76f4\u63a5\u4f7f\u7528range\u751f\u6210\u6570\u5b57\n    '''\n    '''\n    def square_Sum(n):  \n        s = 0\n        for i in range(n):\n            if i%2==0:\n                s = s + i**2\n        return s\n    '''\n    '''\n    \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528\u6269\u5c55\u6c42\u548c\n    '''\n    '''\n    def square_Sum(n):  \n        s = 0\n        for i in range(n+1):\n            s = s + i**2\n        return s\n    '''\n    '''\n    \u65b9\u6cd5\u4e09\uff1a\u4f7f\u7528reduce\u6c42\u548c\n    '''\n    '''\n    def square_Sum(n):  \n        from functools import reduce\n        s = 0\n        for i in range(n+1):\n            s = s + i**2\n        return s\n    '''\n    '''\n    \u65b9\u6cd5\u56db\uff1a\u4f7f\u7528lambda\n    '''\n    '''\n    def square_Sum(n):  \n        s = 0\n        for i in range(n+1):\n            s = s + i**2\n        return s\n    '''\n    '''\n    \u65b9\u6cd5\u4e94\uff1a\u4f7f\u7528\u9012\u5f52\n    '''\n    '''\n    def square_Sum(n):  \n        if n==0:\n            return 0\n        else:\n            return n**2 + square_Sum(n-1)\n    '''\n    '''\n    \u65b9\u6cd5\u516d\uff1a\u4f7f\u7528\u6570\u7ec4\u8fdb\u884c\u52a8\u6001\u89c4\u5212\n    '''\n    '''\n    def square_Sum(n):  \n        #\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u4f4d\u7f6e\n        #\u7b2c\u4e00\u884c\u521d\u59cb\u5316\u4e3a0\n        matrix = [[0 for i in range(n+1)] for j in range(n+1)]\n        #\u7b2c\u4e00\u5217\u521d\u59cb\u5316\u4e3a1\n        for i in range(n+1):\n            matrix[i][0] = 1\n        #\u5176\u4f59\u4f4d\u7f6e\u521d\u59cb\u5316\u4e3a1\n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                if i==j:\n                    matrix[i][j] = j*(j+1)\n                else:\n                    matrix[i][j] = matrix[i][j-1] + matrix[i-1][j]\n        return matrix[n][n]\n    '''\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i**2\n    return res\ndef even_sum_of_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_even_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_even_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_even_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i**2\n    return res\ndef even_sum_of_odd_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_odd_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_odd_even_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_odd_even_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_even_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_even_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_even_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_even_odd_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_even_odd_even_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef sum_of_even_odd_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_even_odd_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            res += i**2\n    return res\ndef even_sum_of_odd_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i**2\n    return res\ndef odd_sum_of_even_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i**2\n    return res\ndef sum_of_even_odd_squares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum o"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sumofsquares(n):\n        sum = 0\n        for i in range(n):\n            if i % 2 == 0:\n                sum = sum + i * i\n        return sum\n    return sumofsquares(n)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sq_sum = 0\n    for num in range(n):\n        if num % 2 == 0:\n            even_sq_sum = even_sq_sum + (num ** 2)\n    return even_sq_sum\nprint(square_Sum(5))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    length = 0\n    if len(list1)==0:\n        return 0\n    for i in range(len(list1)):\n        if length < len(list1[i]):\n            length = len(list1[i])\n    for i in range(len(list1)):\n        if len(list1[i]) == length:\n            max_len.append(list1[i])\n    return max_len\nprint(max_length([[1,2],[3,4],[5,6]]))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = 0\n    max_length = 0\n    for i in list1:\n        if len(i) > l:\n            l = len(i)\n            max_length = i\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        length = len(list1[i])\n        if length > max:\n            max = length\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    m_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(m_list):\n            m_list = list1[i]\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_val = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j])>max_length:\n                max_length = len(list1[i][j])\n                max_val = list1[i][j]\n    print('List 1',list1)\n    print('Max Length is',max_length)\n    print('Max Value is',max_val)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    print(max_len)\n    \nmax_length([[4, 3, 8, 2, 9], [-4, 0, 9, 2, 0], [3, 0, 0, 0, 9], [-7, -4, 0, -3, -5]])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for each in list1:\n        if len(each) > max_length:\n            max_length = len(each)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(lst) for lst in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) == max(list(map(len, list1))):\n            max_length_list.append(list1[i])\n    return max_length_list\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 and k == 1:\n        return 1\n    if n == 1 and k == 2:\n        return 2\n    if n == 2 and k == 2:\n        return 2\n    if n == 2 and k == 1:\n        return 4\n    if n == 2 and k == 2:\n        return 4\n    if n == 3 and k == 1:\n        return 5\n    if n == 3 and k == 2:\n        return 7\n    if n == 3 and k == 3:\n        return 8\n    if n == 4 and k == 1:\n        return 9\n    if n == 4 and k == 2:\n        return 9\n    if n == 4 and k == 3:\n        return 10\n    if n == 4 and k == 4:\n        return 10\n    if n == 5 and k == 1:\n        return 11\n    if n == 5 and k == 2:\n        return 11\n    if n == 5 and k == 3:\n        return 11\n    if n == 5 and k == 4:\n        return 11\n    if n == 6 and k == 1:\n        return 12\n    if n == 6 and k == 2:\n        return 12\n    if n == 6 and k == 3:\n        return 12\n    if n == 6 and k == 4:\n        return 12\n    if n == 6 and k == 5:\n        return 13\n    if n == 7 and k == 1:\n        return 14\n    if n == 7 and k == 2:\n        return 14\n    if n == 7 and k == 3:\n        return 14\n    if n == 7 and k == 4:\n        return 14\n    if n == 7 and k == 5:\n        return 14\n    if n == 7 and k == 6:\n        return 14\n    if n == 8 and k == 1:\n        return 15\n    if n == 8 and k == 2:\n        return 15\n    if n == 8 and k == 3:\n        return 15\n    if n == 8 and k == 4:\n        return 15\n    if n == 8 and k == 5:\n        return 15\n    if n == 8 and k == 6:\n        return 15\n    if n == 8 and k == 7:\n        return 16\n    if n == 9 and k == 1:\n        return 17\n    if n == 9 and k == 2:\n        return 17\n    if n == 9 and k == 3:\n        return 17\n    if n == 9 and k == 4:\n        return 17\n    if n == 9 and k == 5:\n        return 17\n    if n == 9 and k == 6:\n        return 18\n    if n == 10 and k == 1:\n        return 19\n    if n == 10 and k == 2:\n        return 19\n    if n == 10 and k == 3:\n        return 19\n    if n == 10 and k == 4:\n        return 20\n    if n == 10 and k == 5:\n        return 20\n    if n == 10 and k == 6:\n        return 21\n    if n == 11 and k == 1:\n        return 22\n    if n == 11 and k == 2:\n        return 22\n    if n == 11 and k == 3:\n        return 22\n    if n == 11 and k == 4:\n        return 23\n    if n == 11 and k == 5:\n        return 23\n    if n == 11 and k == 6:\n        return 24\n    if n == 12 and k == 1:\n        return 25\n    if n == 12 and k == 2:\n        return 25\n    if n == 12 and k == 3:\n        return 25\n    if n == 12 and k == 4:\n        return 26\n    if n == 12 and k == 5:\n        return 26\n    if n == 12 and k == 6:\n        return 27\n    if n == 13 and k == 1:\n        return 28\n    if n == 13 and k == 2:\n        return 28\n    if n == 13 and k == 3:\n        return 28\n    if n == 13 and k == 4:\n        return 29\n    if n == 13 and k == 5:\n        return 29\n    if n == 13 and k == 6:\n        return 30\n    if n == 14 and k == 1:\n        return 31\n    if n == 14 and k == 2:\n        return 31\n    if n == 14 and k == 3:\n        return 31\n    if n == 14 and k == 4:\n        return 32\n    if n == 14 and k == 5:\n        return 32\n    if n == 14 and k == 6:\n        return 33\n    if n == 15 and k == 1:\n        return 34\n    if n == 15 and k == 2:\n        return 34\n    if n == 15 and k == 3:\n        return 34\n    if n == 15 and k == 4:\n        return 35\n    if n == 15 and k == 5:\n        return 35\n    if n == 15 and k == 6:\n        return 36\n    if n == 16 and k == 1:\n        return 37\n    if n == 16 and k == 2:\n        return 37\n    if n == 16 and k == 3:\n        return 37\n    if n == 16 and k == 4:\n        return 38\n    if n == 16 and k == 5:\n        return 38\n    if n == 16 and k == 6:\n        return 39\n    if n == 17 and k == 1:\n        return 40\n    if n == 17 and k == 2:\n        return 40\n    if n == 17 and k == 3:\n        return 40\n    if n == 17 and k == 4:\n        return 41\n    if n == 17 and k == 5:\n        return 41\n    if n == 17 and k == 6:\n        return 42\n    if n == 18 and k == 1:\n        return 43\n    if n == 18 and k == 2:\n        return 43\n    if n == 18 and k == 3:\n        return 43\n    if n == 18 and k == 4:\n        return 44\n    if n == 18 and k == 5:\n        return 44\n    if n == 18 and k == 6:\n        return 45\n    if n == 19 and k == 1:\n        return 46\n    if n == 19 and k == 2:\n        return 46\n    if n == 19 and k == 3:\n        return 46\n    if n == 19 and k == 4:\n        return 47\n    if n == 19 and k == 5:\n        return 47\n    if n == 19 and k == 6:\n        return 48\n    if n == 20 and k == 1:\n        return 49\n    if n == 20 and k == 2:\n        return 49\n    if n == 20 and k == 3:\n        return 50\n    if n == 20 and k == 4:\n        return 51\n    if n == 20 and k == 5:\n        return 51\n    if n == 20 and k == 6:\n        return 52\n    if n == 21 and k == 1:\n        return 53\n    if n == 21 and k == 2:\n        return 53\n    if n == 21 and k == 3:\n        return 54\n    if n == 21 and k == 4:\n        return 55\n    if n == 21 and k == 5:\n        return 55\n    if n == 21 and k == 6:\n        return 56\n    if n == 22 and k == 1:\n        return 57\n    if n == 22 and k == 2:\n        return 57\n    if n == 22 and k == 3:\n        return 58\n    if n == 22 and k == 4:\n        return 59\n    if n == 22 and k == 5:\n        return 59\n    if n == 22 and k == 6:\n        return 60\n    if n == 23 and k == 1:\n        return 61\n    if n == 23 and k == 2:\n        return 61\n    if n == 23 and k == 3:\n        return 62\n    if n == 23 and k == 4:\n        return 63\n    if n == 23 and k == 5:\n        return 63\n    if n == 23 and k == 6:\n        return 64\n    if n == 24 and k == 1:\n        return 65\n    if n == 24 and k == 2:\n        return 65\n    if n == 24 and k == 3:\n        return 66\n    if n == 24 and k == 4:\n        return 67\n    if n == 24 and k == 5:\n        return 68\n    if n == 24 and k == 6:\n        return 69\n    if n == 25 and k == 1:\n        return 70\n    if n == 25 and k == 2:\n        return 70\n    if n == 25 and "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #The idea is the same as of longest common substring.\n    #We can find the common substring first and then count the number of ways of painting such that n-1 is the size of the common substring and k-1 is the size of the color.\n    \n    if n == 0 and k == 0:\n        return 1\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if n == 1 and k == 1:\n        return 1\n    \n    common_substring = 'a'\n    if k >= 2:\n        common_substring = common_substring + k * 'a'\n    \n    count = 0\n    if k >= n-1:\n        count += 1\n    \n    for i in range(k-1, 0, -1):\n        count += count_no_of_ways(n-1, i)\n        \n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases - 2 \n    if n == 1 and k == 1:\n        return 1\n    if n == 2 and k == 2:\n        return 3\n    if n == 3 and k == 3:\n        return 4\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways(n, k, a):\n        if n == 0:\n            return 0\n        if a[n] == k:\n            return 1\n        return ways(n-1, k, a) + ways(n-2, k, a)\n        \n    # return ways(n-1, k, a) + ways(n-2, k, a)\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        if k == 1:\n            return 1\n        else:\n            return 0\n    if n == 2:\n        if k == 1:\n            return 2\n        elif k == 2:\n            return 4\n        else:\n            return 0\n    else:\n        if k == 1:\n            return 4\n        elif k == 2:\n            return 6\n        else:\n            return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0 or n == k:\n        return 1\n    if n == 1 or k == 1:\n        return 1\n    if n == 2 and k == 2:\n        return 4\n    if n == 2:\n        return 4\n    if k == 2:\n        return 2\n    if k == 1:\n        return 1\n    if k == 0:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # import pdb;pdb.set_trace()\n    if n == 1:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return (count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1))\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 1 or k < 0:\n        return 0\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n    for i in range(k):\n        dp[0][i] = 1\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n-1][k-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2:\n        return 2\n    count = 2\n    i = 2\n    while i <= n:\n        count += count_no_of_ways(i-1, k) * (k-1)\n        i += 1\n    return count\n    \nif __name__ == \"__main__\":\n    n, k = 6, 2\n    print(count_no_of_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    cols = len(k)\n    dp = [[0 for _ in range(cols)] for _ in range(n+1)]\n    \n    # To get the color of the top post, we need to paint the bottom post with the same color\n    # so, in each loop, dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    for i in range(1, n+1):\n        for j in range(cols):\n            if i == 1 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            \n    return dp[n][k-1] % (10**9 + 7)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    remainder = n%m\n    return (quotient, remainder)\nprint(\"Function: \",find(20,10))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    if n>m:\n        x=m\n        y=n\n    else:\n        x=n\n        y=m\n    if y<0:\n        print(\"\\nThe quotient is negative\")\n    else:\n        if x%y==0:\n            print(\"\\nThe quotient is \",x//y)\n        else:\n            print(\"\\nThe quotient is \",x//y+1)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return math.floor(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    elif n > m:\n        return find(n//m,m)\n    else:\n        return find(n//m,m)\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (m%n == 0):\n        quotient = int(n/m)\n        return quotient\n    else:\n        quotient = int((m%n)/n)\n        return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == 0:\n        w = 0.01\n    if h == 0:\n        h = 0.01\n    side_triangle = math.sqrt(h**2 + w**2)\n    return side_triangle\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2+h**2-w*h)/(2*w*h)\n    return s\ndef otherside_trapezium(w,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (w*(h/2) + (w/2) + (h/2))/2\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return w/2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_parallelogram(l1,l2):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    return l1*l2\ndef otherside_trapezium(w,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (w*(h/2) + (w/2) + (h/2))/2\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return w/2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w/2\ndef otherside_rectangle(l1,l2):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l1*l2\ndef otherside_trapezium(l1,l2):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    return (l1*(l2/2))+(l2/2)+(l1/2)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r * 2"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # return (w**2 + h**2)**(1/2)\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2-w*h\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h - 2*w*h*math.cos(math.radians(45)))\n    \ndef otherside_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return a+b+c\n    \ndef otherside_triangle2(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x = b*b - 4*a*c\n    if x > 0:\n        return (x**0.5) / 2*a\n    elif x == 0:\n        return -b / 2*a\n    else:\n        return 0\n    \ndef otherside_rectangle(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(a*a + b*b - 2*a*b*math.cos(math.radians(90)))\n    \ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h - 2*w*h*math.cos(math.radians(90)))\n    \ndef is_prime(x):\n    '''\n    Write a function to find if x is a prime number.\n    '''\n    if x == 2:\n        return True\n    for i in range(2,x):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #import math\n    w = float(w)\n    h = float(h)\n    a = w / 2\n    b = h * (1 / math.sqrt(3))\n    c = (w * h) / math.sqrt(3)\n    d = math.sqrt(3 * w * h)\n    return (a,b,c,d)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w ** 2 + h ** 2 - 2 * h * w * math.cos(math.radians(120)))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2 - math.sqrt((w**2)+(h**2)))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w ** 2 + h ** 2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h*h*(w*w + h*h - w*w)/2)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in listval:\n        if i > result:\n            result = i\n    return result\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=0\n    for item in listval:\n        if maxval<item:\n            maxval=item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    # Create a variable to count the numbers in the list\n    count = 0\n    \n    # Initialize the variable to store the maximum value\n    maxval = 0\n    \n    # Iterate over the list\n    for i in range(0, len(listval)):\n        \n        # Increment the variable count\n        count += 1\n        \n        # Check if the current element is greater than the maximum value\n        if listval[i] > maxval:\n            \n            # Set the current maximum value\n            maxval = listval[i]\n    \n    # Return the maximum value\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]>max:\n            max = listval[i]\n    return max\nprint(max_val([9,6,2,8,9,4]))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > result:\n            result = listval[i]\n    return result\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in range(len(listval)):\n        if type(listval[i]) == int:\n            if max_val < listval[i]:\n                max_val = listval[i]\n        else:\n            if max_val < max_val(listval[i]):\n                max_val = max_val(listval[i])\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    sum = 1\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            sum = sum + i\n        elif number % i!= 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for i in range(1,number+1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    if number <= 1:\n        return 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(number_list(number))\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_divisors = 0\n    number = abs(number)\n    if number == 0:\n        return 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1, number):\n        if number % x == 0:\n            sum += x\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for x in range(1, number + 1):\n        if number % x == 0:\n            div_list.append(x)\n    return sum(div_list)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def mergeSort(arr,l,r):\n        if l<r:\n            m = int((l+(r-l))/2)\n            mergeSort(arr,l,m)\n            mergeSort(arr,m+1,r)\n            merge(arr,l,m,r)\n    \n    def merge(arr,l,m,r):\n        n1 = m-l+1\n        n2 = r-m\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(arr)):\n        if arr[i-1] > arr[i]:\n            count += 1\n    return count\n    "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    arr_len = len(arr)\n    while i < arr_len:\n        j = i\n        while j < arr_len and arr[j] <= arr[i]:\n            j += 1\n        if j == arr_len:\n            break\n        # swap arr[i] and arr[j]\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        if i == arr_len:\n            break\n    return i\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1: \n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    \n    #If there is only one element in array\n    if(n<=1):\n        return inv_count\n    \n    #set array pointers for left and right pointer\n    l = 0\n    r = n-1\n    \n    #traverse array till end of array\n    while(l<r):\n        if(arr[l]<arr[r]):\n            inv_count += r-l\n            #increment left pointer\n            l += 1\n        else:\n            #increment right pointer\n            r -= 1\n    return inv_count\n    \n    \n    \n    \narr = [4,3,1,7,2,8]\nprint(get_Inv_Count(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # convert to sorted array\n    arr.sort() \n    count = 0\n    # iterate through the array and check if the left element\n    # is greater than the current element\n    for i in range(len(arr)): \n        if arr[i] > arr[i + 1]: \n            count += 1\n    return count \n    \ndef get_inv_count_recursion(arr): \n    # '''\n    # Write a python function to count inversions in an array.\n    # '''\n    # if len(arr) < 2:\n    #     return 0\n    # return get_inv_count_recursion(arr[0:len(arr)-1]) + get_inv_count_recursion(arr[1:len(arr)]) + 1 if len(arr) > 2 else 1\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count \n    \n    # count = 0\n    # for i in range(len(arr)):\n    #     for j in range(i+1,len(arr)):\n    #         if arr[i] > arr[j]:\n    #             count = count + 1\n    # return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    result = 0\n    i = 0\n    n = len(arr) \n    \n    while (i < n): \n        j = i+1\n        while (j < n): \n            if arr[i] > arr[j]: \n                result += 1\n            j += 1\n        i += 1\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for el in list1:\n        if isinstance(el,list):\n            res += flatten_list(el)\n        else:\n            res.append(el)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1[0]] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) == list:\n            for sub_item in item:\n                new_list.append(sub_item)\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for i in list1:\n        if isinstance(i,list):\n            res.extend(flatten_list(i))\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    lst = []\n    for i in list1:\n        if type(i) == list:\n            lst += flatten_list(i)\n        else:\n            lst.append(i)\n    return lst\n    \nprint(flatten_list([1,2,[3,[4,5,6,7],8,9],10,11,12]))\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) > 0:\n        list_merge = []\n        for i in list1:\n            list_merge += i\n        return list_merge\n    else:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) is not list:\n        return list1\n    return flat_list(list1, [])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in range(len(list1)):\n        if type(list1[i])==list:\n            list1[i]=flatten_list(list1[i])\n        else:\n            pass\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    for i in list1:\n        if isinstance(i, list):\n            l = l + flatten_list(i)\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    \n    def flatten_one(list1, flattened_list):\n        for item in list1:\n            if type(item) == list:\n                flatten_one(item, flattened_list)\n            else:\n                flattened_list.append(item)\n    flatten_one(list1, flattened_list)\n    return flattened_list\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    max_aggregate = -9999\n    for entry in stdata:\n        aggregate_dict[entry[0]] += entry[1]\n    for key in aggregate_dict:\n        if aggregate_dict[key] > max_aggregate:\n            max_aggregate = aggregate_dict[key]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = float('-inf')\n    for stdata in stdata:\n        for a, b in zip(stdata, stdata[1:]):\n            max_val = max(max_val, a+b)\n    return max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_avg=0\n    for tup in stdata:\n        max_avg=max(max_avg,tup[1])\n    return max_avg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    _max = defaultdict(lambda: float('-inf'))\n    _min = defaultdict(lambda: float('inf'))\n    _sum = defaultdict(lambda: 0.0)\n    _count = defaultdict(lambda: 0)\n    for d in stdata:\n        _sum[d[0]] += float(d[1])\n        _count[d[0]] += 1\n        _max[d[0]] = max(_max[d[0]], float(d[1]))\n        _min[d[0]] = min(_min[d[0]], float(d[1]))\n    return _max, _min, _sum, _count\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) <= 1:\n        return stdata[0]\n    max_value, max_value_index = -1, -1\n    for i in range(0, len(stdata)):\n        if stdata[i][0] > max_value:\n            max_value = stdata[i][0]\n            max_value_index = i\n    return (max_value, stdata[max_value_index])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    result = defaultdict(list)\n    \n    for i in stdata:\n        result[i[0]].append(i[1])\n    \n    return max(result.items(), key=lambda x: x[1])[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for tup in stdata:\n        (s, v) = tup\n        aggregate[s] += v\n    res = 0\n    for k, v in aggregate.items():\n        res = max(res, v)\n    return res"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    _dict = defaultdict(int)\n    for tup in stdata:\n        _dict[tup[0]] += tup[1]\n    _max = 0\n    for key, value in _dict.items():\n        if value > _max:\n            _max = value\n    return _max\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    for k,v in stdata.items():\n        aggregate_list.append(max(v))\n    return(max(aggregate_list))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    results = []\n    for i,j in stdata:\n        if i == 0:\n            max_aggregate_value = max(j)\n            results.append(max_aggregate_value)\n        elif i == 1:\n            max_aggregate_value = max(j)\n            results.append(max_aggregate_value)\n    return results\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    x = 0\n    for i in range(2**n):\n        x = x + (i & 1) + x\n    return x\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_of_binary_seq(num):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        else:\n            return count_of_binary_seq(num - 1) + count_of_binary_seq(num - 2)\n    return count_of_binary_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # I just copied the solution from below\n    # https://www.geeksforgeeks.org/count-binary-subsequences-given-sum/\n    # in general a binary sequence with sum equal to sum can be found in the following way:\n    #     1) In any binary sequence of length n we have two options:\n    #        1. include the current bit in current sequence, if current bit is 1 \n    #         then current sequence becomes \"01\" and sum becomes 1\n    #        2. include the current bit in current sequence, if current bit is 0 \n    #         then current sequence becomes \"10\" and sum becomes 10\n    #     2) In any binary sequence of length n we have two options:\n    #        1. exclude the current bit in current sequence, if current bit is 1 \n    #         then current sequence becomes \"01\" and sum becomes 1\n    #        2. exclude the current bit in current sequence, if current bit is 0 \n    #         then current sequence becomes \"10\" and sum becomes 10\n    # hence, the sum of both sequences will be equal to sum\n    # you can use the same approach to find the sum of last n bits and first n bits.\n    #\n    # time complexity : O(n)\n    # space complexity : O(n)\n    count = 0\n    i = 0\n    while (2**i <= n):\n        count += (2**i - 1) * (2**i - 1) // 2\n        i += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result = 0\n    \n    for i in range(n):\n        for j in range(n):\n            temp = (i+1) << j | (i+1) >> (n-j-1)\n            result += temp\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq(n):\n        bin_arr = []\n        s = 0\n        for i in range(n+1):\n            for j in range(i,n+1):\n                bin_arr.append(bin(i)[2:] + bin(j)[2:])\n        for i in range(n+1):\n            for j in range(n+1):\n                temp = int(bin_arr[i][-j])\n                s += temp\n        return s\n    return count_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # print \"n = \", n\n    if n == 1:\n        return 1\n    # sum = 0\n    # for i in range(2**n):\n    #     # print i\n    #     lst = []\n    #     lst.append(i)\n    #     for j in range(n):\n    #         lst.append(i)\n    #         # print lst\n    #     if sum_binary_seq(lst) == sum:\n    #         print i\n    #         # print lst\n    #         count += 1\n    # return count\n    sum_binary = lambda lst: sum(2**i for i in lst)\n    \n    def sum_binary_seq(lst):\n        return sum_binary(lst[:n-1]) + (lst[n-1] + lst[n])/2\n    # print sum_binary(lst)\n    return count_binary_seq(n-1) + sum_binary_seq(lst)\n    "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        print(\"n cannot be less than 0\")\n    else:\n        count = 0\n        for i in range(n+1):\n            for j in range(n+1):\n                if i == 0 and j == 0:\n                    print(\"n = \",i)\n                    print(\"i = \",i)\n                    print(\"j = \",j)\n                    print(\"Sum of first n bits = \",i)\n                    print(\"Sum of last n bits = \",j)\n                    print(\"First and last bits sum are same\")\n                    count += 1\n                elif i!= 0 and j!= 0 and i + j == n and i > 0 and j > 0:\n                    print(\"n = \",i)\n                    print(\"i = \",i)\n                    print(\"j = \",j)\n                    print(\"Sum of first n bits = \",i)\n                    print(\"Sum of last n bits = \",j)\n                    print(\"First and last bits sum are same\")\n                    count += 1\n        print(count)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # initializing a variable to store the count of all binary sequences of length 2n.\n    count = 0\n    # initializing a variable to store the sum of first n bits.\n    s = 0\n    # loop to calculate the sum of last n bits.\n    for i in range(n, 0, -1):\n        # storing the sum of first i bits.\n        s = s + (2**i)\n        # appending the sum of last n bits to count variable.\n        count = count + (1 << i)\n        # storing the sum of last i bits.\n        s = s + (2**(i-1))\n    return (count, s)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # NOTE: there is a recursive solution, but for this we have to understand the definition of recursion\n    # NOTE: so, this can be solved by using the prefix sum concept\n    prefix_sum = [0]\n    for i in range(len(prefix_sum)):\n        prefix_sum.append(prefix_sum[i] + 1)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_recursion(n):\n        '''\n        Write a recursive function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return (count_binary_seq_recursion(n-1) + count_binary_seq_recursion(n-2))\n        \n    count = 0\n    for i in range(2**(n+1)):\n        count += count_binary_seq_recursion(n)\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 0\n        for k in d:\n            depth = max(depth, dict_depth(d[k]))\n        return depth + 1\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    return 1 + max(map(lambda x: dict_depth(x), d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if type(v) is dict:\n            depth += 1\n        else:\n            break\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    if not isinstance(d,dict):\n        raise TypeError(\"The dictionary must be a dictionary\")\n    \n    if len(d) == 0:\n        raise ValueError(\"The dictionary must not be empty\")\n    \n    return max([dict_depth(v) for k,v in d.items()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return 1 + dict_depth(d[list(d.keys())[0]])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d):\n        if len(d) == 0:\n            return 0\n        else:\n            for k in d.keys():\n                if type(d[k]) == dict:\n                    return 1 + depth(d[k])\n            else:\n                return 0\n    return depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for k in d:\n        if type(d[k]) == dict:\n            dict_depth(d[k])\n        else:\n            print(d[k])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    if isinstance(d, list):\n        return 1 + max(map(dict_depth, d))\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    elif isinstance(d, dict):\n        return max(dict_depth(d[key]) for key in d) + 1\n    elif isinstance(d, list):\n        return max(dict_depth(item) for item in d) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #initialize result\n    result = arr[index]\n    #the initial element of the list is the element at index 0\n    \n    for i in range(rotations):\n        result = (result * r + arr[index]) % mod\n        index = (index + 1)% len(arr)\n        \n    return result\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]>ranges[index]:\n            high=mid-1\n        elif arr[mid]<ranges[index]:\n            low=mid+1\n        else:\n            if mid!=len(arr)-1 and arr[mid+1]<ranges[index]:\n                return mid\n            else:\n                return mid+1\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    low = 0\n    high = len(ranges)-1\n    mid = int(round((high+low)/2))\n    while low <= high :\n        if ranges[mid] == index :\n            return (mid,rotations[mid])\n        elif ranges[mid] > index :\n            if index > ranges[mid] :\n                low = mid + 1\n            else :\n                high = mid -1\n        else :\n            if index < ranges[mid] :\n                high = mid -1\n            else :\n                low = mid + 1\n        mid = int(round((high+low)/2))\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try :\n        for i in range(rotations) : \n            arr.append(arr[index])\n            arr.pop(index)\n            index = index + 1\n        return arr[index]\n    except : \n        return -1\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = 0\n    count = 0\n    while(i<len(arr)) :\n        if(count == index and ranges[i] >= rotations) :\n            return arr[i]\n        elif(count == index and ranges[i] < rotations) :\n            i += 1\n            continue\n        elif(count == index and ranges[i] <= rotations) :\n            return arr[i]\n        else :\n            i += 1\n            count += 1\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    flag = False\n    pos = -1\n    if index<len(arr) :\n        for i in range(index,len(arr)) :\n            if arr[i] not in ranges :\n                continue\n            if ranges[arr[i]]!= rotations :\n                continue\n            pos = i\n            break\n        if pos!= -1 :\n            arr.pop(pos)\n            flag = True\n            return arr\n        else :\n            return arr\n    else :\n        return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    low = 0\n    high = len(arr) -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if ranges[mid] <= rotations:\n            if arr[mid] < arr[index]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        else:\n            if arr[mid] < arr[index]:\n                high = mid -1\n            else:\n                low = mid + 1\n    return mid\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    low = 0\n    high = len(arr)-1\n    while (low <= high) :\n        mid = int((low+high)/2)\n        if (mid == r) :\n            return arr[mid]\n        if (mid > index) :\n            if (mid-1 >= low and mid-1 <= high) :\n                if (arr[mid-1] == r):\n                    return arr[mid]\n            if (arr[mid+1] == r) :\n                return arr[mid]\n            count = count + 1\n            low = mid + 1\n        else :\n            if (mid-1 < low or mid+1 > high) :\n                return -1\n            count = count + 1\n            high = mid - 1\n    if (count == rotations) :\n        return -1\n    elif (count > rotations) :\n        return -1\n    else :\n        if (index == r) :\n            return arr[index]\n        elif (index < r) :\n            if (arr[index-1] == r):\n                return arr[index]\n        elif (index > r) :\n            if (arr[index+1] == r):\n                return arr[index]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    max_rot = len(ranges)\n    max_index = max_rot - 1\n    for i in range(max_index,-1,-1):\n        rot = rotations[i]\n        if (rotations[i] == max_rot) :\n            # if rot is not in range\n            if (ranges[i] <= index <= ranges[i + 1]) :\n                return index\n            else :\n                index -= ranges[i]\n                index = find_Element(arr,ranges,rotations,index)\n        elif (rotations[i] > 0 and index == 0) :\n            return 0\n        elif (rotations[i] > 0 and index!= 0) :\n            if index > ranges[i] :\n                index -= ranges[i]\n            else :\n                index = index - ranges[i]\n                index = find_Element(arr,ranges,rotations,index)\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ans = 0\n    if index > len(arr)-1 :\n        print(\"invalid\")\n    else :\n        if ranges == \"ZERO\":\n            ans = arr[index]\n        elif ranges == \"ONE\":\n            ans = arr[(index+rotations)%len(arr)]\n        elif ranges == \"TWO\":\n            ans = arr[index]\n        elif ranges == \"THREE\":\n            ans = arr[(index+rotations)%len(arr)]\n        else :\n            ans = arr[(index+rotations)%len(arr)]\n    return ans\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    temp = []\n    for word in words:\n        if word[0]=='p':\n            temp.append(word)\n    return temp\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    match = re.search('p\\w*',words)\n    if match:\n        first_word = match.group()\n    else:\n        first_word = None\n    return first_word,None\n    \ndef sorter(lista):\n    '''\n    Write a function to sort a list of strings in the ascending order.\n    '''\n    lista.sort()\n    return lista\n    \ndef search(string,target):\n    '''\n    Write a function to search the target in the string. If target is in the string,\n    return the position of the target in the string.\n    '''\n    match = re.search(target,string)\n    if match:\n        position = match.start()\n    else:\n        position = None\n    return position\n    \ndef main():\n    '''\n    Write a function to find all the capital letters in the string.\n    '''\n    words = \"The rain in spain\"\n    capital_letters = re.findall(\"[A-Z]\",words)\n    print(capital_letters)\n    \n    \n    '''\n    Write a function to find all the numbers in the string.\n    '''\n    \n    num = \"12321231345\"\n    numbers = re.findall(\"[0-9]\",num)\n    print(numbers)\n    \n    '''\n    Write a function to find all the vowels in the string.\n    '''\n    \n    vowels = re.findall(\"[aeiou]\",num)\n    print(vowels)\n    \n    '''\n    Write a function to find all the consonants in the string.\n    '''\n    consonants = re.findall(\"[^aeiou]\",num)\n    print(consonants)\n    \n    '''\n    Write a function to find all the characters between the number 9 and 8 in the string.\n    '''\n    \n    num = \"5555555555\"\n    num_int = int(num)\n    print(num_int)\n    result = re.findall(\"\\d{5}-\\d{4}\",num)\n    print(result)\n    \n    '''\n    Write a function to find all the numbers between 9 and 8 in the string.\n    '''\n    \n    num = \"5555555555\"\n    num_int = int(num)\n    print(num_int)\n    result = re.findall(\"\\d{5}-\\d{4}\",num)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d-\\d\\d\",date)\n    print(result)\n    \n    '''\n    Write a function to find all the dates in the string.\n    '''\n    \n    date = \"31-02-2019\"\n    print(date)\n    result = re.findall(\"\\d\\d-\\d\\d"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    output = []\n    for word in words:\n        if word[0] == \"p\":\n            output.append(word)\n    return output\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_p_word = []\n    for word in words:\n        if word[0] == 'p':\n            start_p_word.append(word)\n    return start_p_word\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    w=[]\n    for i in words:\n        if i.startswith('p'):\n            w.append(i)\n    return w\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words[0]\n    # words = words.split()\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n    # return words\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list=[]\n    for word in words:\n        if word[0]=='p':\n            p_list.append(word)\n    if not p_list:\n        return False\n    return p_list[0],p_list[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split()\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i-1], words[i]\n    return None, None\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == 0) or (k > n):\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    \n    for i in range(index, n):\n        local_sum = sum([a[i] for i in range(index, i + 1)])\n        if local_sum >= k:\n            return max(max_sum, local_sum)\n        max_sum = max(max_sum, local_sum)\n    return max_sum\n    "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if a[index] == k:\n        return 0\n    if max_sum_increasing_subseq(a, n, index + 1, k) or (max_sum_increasing_subseq(a, n, index + 1, k) > 0 and max_sum_increasing_subseq(a, n, index + 1, k) + a[index] > k):\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    arr = [0] * n\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n        arr[i] = sum\n    \n    max_sum = 0\n    \n    for i in range(n):\n        if max_sum < arr[i]:\n            max_sum = arr[i]\n    \n    if max_sum <= k:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    curr_sum = 0\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == n - index:\n        return a[index]\n    if k > n - index:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = []\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            res.append(a[i])\n    res.append(a[index])\n    return max(res) + k\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    else:\n        print(index)\n        for i in range(index+1, n):\n            print(i)\n            if a[i] < a[index]:\n                break\n        if i == n-1:\n            return a[index]\n        else:\n            return max(a[index] + max_sum_increasing_subseq(a, n, i, k), max_sum_increasing_subseq(a, n, i, k+1))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum = 0\n    min_val = -999999999\n    for i in range(index, n):\n        sum = sum + a[i]\n        if sum > min_val and sum <= k:\n            min_val = sum\n    return min_val\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case - if k > length of array, return 0\n    if k > n:\n        return 0\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col_tuplex = tuplex[:m] + (tuplex[m:m+n],) + tuplex[m+n:]\n    return col_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[:m],tuplex[m:n],tuplex[n:])\ndef full_tuplex(tuplex):\n    '''\n    Write a function to get the full tuple of a colon.\n    '''\n    return tuplex[0]+tuplex[1]+tuplex[2]\ndef slice_tuplex(tuplex,n):\n    '''\n    Write a function to get a slice of a tuple.\n    '''\n    return tuplex[n:]\ndef reverse_tuplex(tuplex):\n    '''\n    Write a function to get the reverse tuple of a tuple.\n    '''\n    return tuplex[::-1]\ndef reverse_tuplex_with_val(tuplex,n):\n    '''\n    Write a function to get the reverse tuple of a tuple.\n    '''\n    return tuplex[:n]+tuplex[n+1:]\ndef flip_tuplex(tuplex):\n    '''\n    Write a function to get the flip tuple of a tuple.\n    '''\n    return (tuplex[1],tuplex[2],tuplex[0])\ndef flip_tuplex_with_val(tuplex,n):\n    '''\n    Write a function to get the flip tuple of a tuple.\n    '''\n    return tuplex[:n]+tuplex[n+1:]\ndef to_tuplex(l):\n    '''\n    Write a function to get a tuple from a list.\n    '''\n    return tuple(l)\ndef to_tuplex_with_val(l,n):\n    '''\n    Write a function to get a tuple from a list.\n    '''\n    return tuple(l[:n]+l[n+1:])\ndef to_list(tuplex):\n    '''\n    Write a function to get a list from a tuple.\n    '''\n    return list(tuplex)\ndef to_list_with_val(tuplex,n):\n    '''\n    Write a function to get a list from a tuple.\n    '''\n    return list(tuplex[:n]+tuplex[n+1:])\ndef is_member_tuplex(tuplex,lst):\n    '''\n    Write a function to check if a tuple is member of a list.\n    '''\n    for i in lst:\n        if i==tuplex:\n            return True\n    return False\ndef is_member_tuplex_with_val(tuplex,lst,n):\n    '''\n    Write a function to check if a tuple is member of a list.\n    '''\n    for i in lst[:n]+lst[n+1:]:\n        if i==tuplex:\n            return True\n    return False\ndef remove_tuplex(tuplex,lst):\n    '''\n    Write a function to remove a tuple from a list.\n    '''\n    lst.remove(tuplex)\ndef remove_tuplex_with_val(tuplex,lst,n):\n    '''\n    Write a function to remove a tuple from a list.\n    '''\n    lst.remove(tuplex[:n]+tuplex[n+1:])\ndef is_sub_tuplex(tuplex,lst):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    for i in lst:\n        if i==tuplex:\n            return True\n    return False\ndef is_sub_tuplex_with_val(tuplex,lst,n):\n    '''\n    Write a function to check if a tuple is a subset of another tuple.\n    '''\n    for i in lst[:n]+lst[n+1:]:\n        if i==tuplex:\n            return True\n    return False\ndef union_tuplex(tuplex,lst):\n    '''\n    Write a function to get a union tuple of a list.\n    '''\n    lst_copy=deepcopy(lst)\n    for i in tuplex:\n        if i in lst_copy:\n            lst_copy.remove(i)\n    return lst_copy\ndef union_tuplex_with_val(tuplex,lst,n):\n    '''\n    Write a function to get a union tuple of a list.\n    '''\n    lst_copy=deepcopy(lst[:n]+lst[n+1:])\n    for i in tuplex:\n        if i in lst_copy:\n            lst_copy.remove(i)\n    return lst_copy\ndef intersection_tuplex(tuplex,lst):\n    '''\n    Write a function to get a intersection tuple of a list.\n    '''\n    lst_copy=deepcopy(lst)\n    for i in tuplex:\n        if i not in lst_copy:\n            lst_copy.append(i)\n    return lst_copy\ndef intersection_tuplex_with_val(tuplex,lst,n):\n    '''\n    Write a function to get a intersection tuple of a list.\n    '''\n    lst_copy=deepcopy(lst[:n]+lst[n+1:])\n    for i in tuplex:\n        if i not in lst_copy:\n            lst_copy.append(i)\n    return lst_copy\ndef union_and_intersection_tuplex(tuplex,lst):\n    '''\n    Write a function to get a union and intersection tuple of a list.\n    '''\n    lst_copy=deepcopy(lst)\n    for i in tuplex:\n        if i in lst_copy:\n            lst_copy.remove(i)\n    return lst_copy+tuplex\ndef union_and_intersection_tuplex_with_val(tuplex,lst,n):\n    '''\n    Write a function to get a union and intersection tuple of a list.\n    '''\n    lst_copy=deepcopy(lst[:n]+lst[n+1:])\n    for i in tuplex:\n        if i in lst_copy:\n            lst_copy.remove(i)\n    return lst_copy+tuplex\ndef find_tuplex(tuplex,lst):\n    '''\n    Write a function to get a tuple of index of a value in a list.\n    '''\n    for i in range(len(lst)):\n        if lst[i]==tuplex:\n            return i\ndef find_tuplex_with_val(tuplex,lst,n):\n    '''\n    Write a function to get a tuple of index of a value in a list.\n    '''\n    for i in range(len(lst[:n]+lst[n+1:])):\n        if lst[i]==tuplex:\n            return i\ndef find_tuplex_with_index(tuplex,lst):\n    '''\n    Write a function to get a tuple of index of a value in a list.\n    '''\n    for i in range(len(lst)):\n        if lst[i]==tuplex:\n            return i\ndef find_tuplex_with_index_with_val(tuplex,lst,n):\n    '''\n    Write a function to get a tuple of index of a value in a list.\n    '''\n    for i in range(len(lst[:n]+lst[n+1:])):\n        if lst[i]==tuplex:\n            return i\ndef find_tuplex_with_val_in_lst(tuplex,lst,n):\n    '''\n    Write a function to get a tuple of index of a value in a list.\n    '''\n    for i in range(len(lst)):\n        if lst[i]==tuplex:\n            return i\ndef find_tuplex_with_val_in_lst_with_index(tuplex,lst,n):\n    '''\n    Write a function to get a tuple of index of a value in a list.\n    '''"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[:m] + (tuplex[m+1:n] + tuplex[m]) + tuplex[n+1:])\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a empty newlist\n    newlist = []\n    # loop through the length of the tuple\n    for i in range(len(tuplex)):\n        # if i is not equal to m and n, append to newlist\n        if i!= m and i!= n:\n            newlist.append(tuplex[i])\n    # return the newlist\n    return newlist\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy = tuplex_copy[:m] + tuplex_copy[m+1:]\n    return tuplex_copy\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # print(tuplex)\n    # print('-----------')\n    \n    # col_tup = tuplex[0:3]\n    col_tup = tuplex[:3]\n    # print(col_tup)\n    # print('-----------')\n    \n    \n    \n    # for i in range(len(col_tup)):\n    #     col_tup[i] = m*col_tup[i]+n\n    col_tup = tuple(map(lambda x: m*x+n,col_tup))\n    # print(col_tup)\n    # print('-----------')\n    return col_tup\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colonx = tuple([0]*(m+2))\n    colony = tuple([0]*(n+2))\n    colonx[m+1] = colonx[m+1] + 1\n    colony[n+1] = colony[n+1] + 1\n    for i in range(m,0,-1):\n        colonx[i] = colonx[i-1] + colonx[i]\n    for j in range(n,0,-1):\n        colony[j] = colony[j-1] + colony[j]\n    for k in range(len(tuplex)):\n        colonx[tuplex[k][0]] = colonx[tuplex[k][0]] + 1\n        colony[tuplex[k][1]] = colony[tuplex[k][1]] + 1\n    for l in range(len(colonx)):\n        if colonx[l] == 0:\n            colonx[l] = 1\n    for m in range(len(colony)):\n        if colony[m] == 0:\n            colony[m] = 1\n    colon = tuple(colony + colonx)\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=tuplex[:]\n    colon=colon[0:m]\n    colon=colon[-n:]\n    colon=colon+colon[:-n]\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(m):\n        for j in range(n):\n            colon.append(tuplex[i][j])\n    return tuple(colon)\ndef reverse(list):\n    '''\n    Write a function to reverse a list.\n    '''\n    s=len(list)-1\n    for i in range(len(list)):\n        list[i],list[s]=list[s],list[i]\n        s-=1\n    return list\ndef one(tuplex):\n    '''\n    Write a function to get the singleton in a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]!=tuplex[i]:\n            tuplex[i]=tuplex[i]\n    return tuplex[0]\ndef change_order(tuplex,m,n):\n    '''\n    Write a function to get a new order of list.\n    '''\n    colon=[]\n    for i in range(m):\n        for j in range(n):\n            colon.append(tuplex[j][i])\n    return tuple(colon)\ndef second_colon(tuplex,m,n):\n    '''\n    Write a function to get a new order of list.\n    '''\n    colon=[]\n    for i in range(m):\n        for j in range(n-1):\n            colon.append(tuplex[i][j])\n        colon.append(tuplex[i][n-1])\n    return tuple(colon)\ndef third_colon(tuplex,m,n):\n    '''\n    Write a function to get a new order of list.\n    '''\n    colon=[]\n    for i in range(m):\n        for j in range(n-2):\n            colon.append(tuplex[i][j])\n        colon.append(tuplex[i][n-2])\n        colon.append(tuplex[i][n-1])\n    return tuple(colon)\ndef main():\n    print(\"***Colon of tuple***\")\n    tuplex=(1,2,3,4,5,6,7,8,9)\n    print(\"The original tuplex is\",tuplex)\n    print(\"The colon of tuplex is\",colon_tuplex(tuplex,3,3))\n    print(\"The colon of tuplex is\",colon_tuplex(tuplex,3,5))\n    print(\"The colon of tuplex is\",colon_tuplex(tuplex,2,3))\n    print(\"The colon of tuplex is\",colon_tuplex(tuplex,2,5))\n    print(\"The colon of tuplex is\",colon_tuplex(tuplex,1,3))\n    print(\"The colon of tuplex is\",colon_tuplex(tuplex,1,5))\n    print(\"The colon of tuplex is\",colon_tuplex(tuplex,0,3))\n    print(\"The colon of tuplex is\",colon_tuplex(tuplex,0,5))\n    print(\"The reverse of tuplex is\",reverse(tuplex))\n    print(\"The singleton in tuplex is\",one(tuplex))\n    print(\"The order of tuplex is\",change_order(tuplex,3,3))\n    print(\"The order of tuplex is\",change_order(tuplex,3,5))\n    print(\"The order of tuplex is\",change_order(tuplex,2,3))\n    print(\"The order of tuplex is\",change_order(tuplex,2,5))\n    print(\"The order of tuplex is\",change_order(tuplex,1,3))\n    print(\"The order of tuplex is\",change_order(tuplex,1,5))\n    print(\"The order of tuplex is\",change_order(tuplex,0,3))\n    print(\"The order of tuplex is\",change_order(tuplex,0,5))\n    print(\"The second colon of tuplex is\",second_colon(tuplex,3,3))\n    print(\"The second colon of tuplex is\",second_colon(tuplex,3,5))\n    print(\"The second colon of tuplex is\",second_colon(tuplex,2,3))\n    print(\"The second colon of tuplex is\",second_colon(tuplex,2,5))\n    print(\"The second colon of tuplex is\",second_colon(tuplex,1,3))\n    print(\"The second colon of tuplex is\",second_colon(tuplex,1,5))\n    print(\"The second colon of tuplex is\",second_colon(tuplex,0,3))\n    print(\"The second colon of tuplex is\",second_colon(tuplex,0,5))\n    print(\"The third colon of tuplex is\",third_colon(tuplex,3,3))\n    print(\"The third colon of tuplex is\",third_colon(tuplex,3,5))\n    print(\"The third colon of tuplex is\",third_colon(tuplex,2,3))\n    print(\"The third colon of tuplex is\",third_colon(tuplex,2,5))\n    print(\"The third colon of tuplex is\",third_colon(tuplex,1,3))\n    print(\"The third colon of tuplex is\",third_colon(tuplex,1,5))\n    print(\"The third colon of tuplex is\",third_colon(tuplex,0,3))\n    print(\"The third colon of tuplex is\",third_colon(tuplex,0,5))\nmain()"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(n):\n        colon.append((m,tuplex[i]))\n    return tuple(colon)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) < N or len(nums2) < N:\n        return []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_product = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            curr = nums1[i] * nums2[j]\n            if largest_product < curr:\n                largest_product = curr\n    return largest_product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def my_f_product(nums1, nums2, N):\n        ans = []\n        pairs = zip(nums1, nums2)\n        for pair in sorted(pairs, reverse=True):\n            ans.append(pair)\n            if len(ans) == N: break\n        return ans\n    return my_f_product(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    Count the product of the element in the 2nd list\n    '''\n    prod = 0\n    count = 0\n    for n in nums2:\n        prod = prod * n\n        count += 1\n    count_1 = len(nums1)\n    '''\n    Count the product of the element in the 1st list\n    '''\n    for i in range(count_1):\n        prod = prod * nums1[i]\n    '''\n    Count the product of the element in the 2nd list\n    '''\n    prod = prod / count\n    for i in range(count_1):\n        prod = prod * nums1[i]\n    '''\n    Count the product of the element in the 1st list\n    '''\n    for i in range(count):\n        prod = prod * nums2[i]\n    '''\n    Count the product of the element in the 2nd list\n    '''\n    prod = prod / count\n    '''\n    Count the product of the element in the 2nd list\n    '''\n    for i in range(count_1):\n        prod = prod * nums2[i]\n    print(prod)\n    return prod\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0:\n        return []\n    n1, n2 = len(nums1), len(nums2)\n    if n1 == 0 or n2 == 0:\n        return []\n    output = []\n    for i in range(1, N+1):\n        cur_output = max_product_from_2lists(nums1, nums2, i)\n        if cur_output:\n            output.append(cur_output)\n    return output\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(N):\n        result.append(nums1[i]*nums2[i])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists, then find the largest products\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    \n    n1 = len(nums1)\n    n2 = len(nums2)\n    max_product = 0\n    \n    # Recursive solution\n    # Set up a boolean stack to keep track of which factor of each factor is being selected\n    stack = []\n    # Initialize both index of the two lists to -1\n    i1, i2 = -1, -1\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort them first\n    nums1.sort()\n    nums2.sort()\n    \n    # construct the final result\n    res = []\n    i = j = 0\n    \n    while i < N and j < N:\n        if nums1[i] < nums2[j]:\n            i += 1\n            \n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            res.append(nums1[i] * nums2[j])\n            i += 1\n            j += 1\n    \n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # record of highest products\n    highest_product = 0\n    # record of factors of highest product\n    highest_product_factors = []\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum=0\n    if(a>b):\n        maximum=a\n    else:\n        maximum=b\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(a)\n    else:\n        print(b)\nmaximum(10,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a<b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a if a>b else b \n    print(maximum)\nmaximum(10,20)\nmaximum(5,10)\nmaximum(10,3)\nmaximum(2,6)\nmaximum(8,5)\nmaximum(1,5)\nmaximum(10,3)\nmaximum(4,5)\nmaximum(8,9)\nmaximum(8,6)\nmaximum(7,7)\nmaximum(5,9)\nmaximum(10,10)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return (a if a > b else b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,\"is maximum\")\n    elif a<b:\n        print(b,\"is maximum\")\n    else:\n        print(\"Both are equal\")\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max_of_two = a if a > b else b\n    print(f\"Max of the two numbers : {max_of_two}\")\n    return max_of_two\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    a,b,c=map(int,input().split())\n    print(maximum(a,maximum(b,c)))\n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\nprint(string_to_tuple(\"abcd\"))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1=str1.split(\" \")\n    tup=(str1[0],str1[1])\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = []\n    list1 = str1.split(',')\n    list2 = []\n    for i in list1:\n        list2.append(i[0])\n    return tuple(list2)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # declaring a empty list to store characters of the string.\n    str1 = str1.split(' ')\n    # declaring a list variable to store the characters in the string.\n    st1 = []\n    # iterating through the elements of the string and adding it to the list.\n    for i in str1:\n        st1.append(i)\n    # converting the list variable to tuple.\n    st1 = tuple(st1)\n    return st1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l1 = []\n    for i in range(len(str1)):\n        l1.append(str1[i])\n    return tuple(l1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(' ', '')\n    str1 = str1.replace('\"', '')\n    str1 = str1.replace(\"'\", '')\n    str1 = str1.replace(\",\", '')\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # get the rightmost 1 bit from n\n    # if rightmost 1 bit is 1, then n is unset \n    # otherwise n is not unset\n    # e.g. n = -1, n|= 0, n|=0 \n    #     n = -1, n|= 1, n|=1\n    #     n = -2, n|= 0, n|=0\n    #     n = -2, n|= 1, n|=1\n    #     n = -3, n|= 0, n|=0\n    #     n = -3, n|= 1, n|=1\n    #     n = -4, n|= 0, n|=0\n    #     n = -4, n|= 1, n|=1\n    #     n = -5, n|= 0, n|=0\n    #     n = -5, n|= 1, n|=1\n    #     n = -6, n|= 0, n|=0\n    #     n = -6, n|= 1, n|=1\n    #     n = -7, n|= 0, n|=0\n    #     n = -7, n|= 1, n|=1\n    #     n = -8, n|= 0, n|=0\n    #     n = -8, n|= 1, n|=1\n    #     n = -9, n|= 0, n|=0\n    #     n = -9, n|= 1, n|=1\n    #     n = -10, n|= 0, n|=0\n    #     n = -10, n|= 1, n|=1\n    #     n = -11, n|= 0, n|=0\n    #     n = -11, n|= 1, n|=1\n    #     n = -12, n|= 0, n|=0\n    #     n = -12, n|= 1, n|=1\n    #     n = -13, n|= 0, n|=0\n    #     n = -13, n|= 1, n|=1\n    #     n = -14, n|= 0, n|=0\n    #     n = -14, n|= 1, n|=1\n    #     n = -15, n|= 0, n|=0\n    #     n = -15, n|= 1, n|=1\n    #     n = -16, n|= 0, n|=0\n    #     n = -16, n|= 1, n|=1\n    #     n = -17, n|= 0, n|=0\n    #     n = -17, n|= 1, n|=1\n    #     n = -18, n|= 0, n|=0\n    #     n = -18, n|= 1, n|=1\n    #     n = -19, n|= 0, n|=0\n    #     n = -19, n|= 1, n|=1\n    #     n = -20, n|= 0, n|=0\n    #     n = -20, n|= 1, n|=1\n    #     n = -21, n|= 0, n|=0\n    #     n = -21, n|= 1, n|=1\n    #     n = -22, n|= 0, n|=0\n    #     n = -22, n|= 1, n|=1\n    #     n = -23, n|= 0, n|=0\n    #     n = -23, n|= 1, n|=1\n    #     n = -24, n|= 0, n|=0\n    #     n = -24, n|= 1, n|=1\n    #     n = -25, n|= 0, n|=0\n    #     n = -25, n|= 1, n|=1\n    #     n = -26, n|= 0, n|=0\n    #     n = -26, n|= 1, n|=1\n    #     n = -27, n|= 0, n|=0\n    #     n = -27, n|= 1, n|=1\n    #     n = -28, n|= 0, n|=0\n    #     n = -28, n|= 1, n|=1\n    #     n = -29, n|= 0, n|=0\n    #     n = -29, n|= 1, n|=1\n    #     n = -30, n|= 0, n|=0\n    #     n = -30, n|= 1, n|=1\n    #     n = -31, n|= 0, n|=0\n    #     n = -31, n|= 1, n|=1\n    #     n = -32, n|= 0, n|=0\n    #     n = -32, n|= 1, n|=1\n    #     n = -33, n|= 0, n|=0\n    #     n = -33, n|= 1, n|=1\n    #     n = -34, n|= 0, n|=0\n    #     n = -34, n|= 1, n|=1\n    #     n = -35, n|= 0, n|=0\n    #     n = -35, n|= 1, n|=1\n    #     n = -36, n|= 0, n|=0\n    #     n = -36, n|= 1, n|=1\n    #     n = -37, n|= 0, n|=0\n    #     n = -37, n|= 1, n|=1\n    #     n = -38, n|= 0, n|=0\n    #     n = -38, n|= 1, n|=1\n    #     n = -39, n|= 0, n|=0\n    #     n = -39, n|= 1, n|=1\n    #     n = -40, n|= 0, n|=0\n    #     n = -40, n|= 1, n|=1\n    #     n = -41, n|= 0, n|=0\n    #     n = -41, n|= 1, n|=1\n    #     n = -42, n|= 0, n|=0\n    #     n = -42, n|= 1, n|=1\n    #     n = -43, n|= 0, n|=0\n    #     n = -43, n|= 1, n|=1\n    #     n = -44, n|= 0, n|=0\n    #     n = -44, n|= 1, n|=1\n    #     n = -45, n|= 0, n|=0\n    #     n = -45, n|= 1, n|=1\n    #     n = -46, n|= 0, n|=0\n    #     n = -46, n|= 1, n|=1\n    #     n = -47, n|= 0, n|=0\n    #     n = -47, n|= 1, n|=1\n    #     n = -48, n|= 0, n|=0\n    #     n = -48, n|= 1, n|=1\n    #     n = -49, n|= 0, n|=0\n    #     n = -49, n|= 1, n|=1\n    #     n = -50, n|= 0, n|=0\n    #     n = -50, n|= 1, n|=1\n    #     n = -51, n|= 0, n|=0\n    #     n = -51, n|= 1, n|=1\n    #     n = -52, n|= 0, n|=0\n    #     n = -52, n|= 1, n|=1\n    #     n = -53, n|= 0, n|=0\n    #     n = -53, n|= 1, n|=1\n    #     n = -54, n|= 0, n|=0\n    #     n = -54, n|= 1, n|=1\n    #     n = -55, n|= 0, n|=0\n    #     "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print('Left Most Unset Bit Set to 1')\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a pytho"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1<<n.bit_length()) - 1\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return n | (1<<n.bit_length()-1) - 1\n    \ndef set_left_most_set_bit(n):\n    '''\n    Write a python function to set the left most set bit.\n    '''\n    return n & ~(1<<n.bit_length()-1)\n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return n & ~(1<<n.bit_length()-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = 0b111 # 1111\n    print(f\"n = {n}\")\n    print(f\"n & 0b1111 = {n & 0b1111}\")\n    n = n & (~0b1111)\n    print(f\"n = {n}\")\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        print(\"Unset bit\") \n    else: \n        while (n & 1 == 0): \n            n = n >> 1\n            print(\"Unset bit\") \n    print(n) \n  \nset_left_most_unset_bit(0b1) \nset_left_most_unset_bit(0b101) \nset_left_most_unset_bit(0b10011) \nset_left_most_unset_bit(0b110101) \nset_left_most_unset_bit(0b1010000) \nset_left_most_unset_bit(0b100000000000000000) \nset_left_most_unset_bit(0b00000000000000000) \nset_left_most_unset_bit(0b0000000000001) \nset_left_most_unset_bit(0b00000001) \nset_left_most_unset_bit(0b000000011) \nset_left_most_unset_bit(0b000001) \nset_left_most_unset_bit(0b0000011) \nset_left_most_unset_bit(0b00001) \nset_left_most_unset_bit(0b0000001) \nset_left_most_unset_bit(0b00000001) \nset_left_most_unset_bit(0b000000011) \nset_left_most_unset_bit(0b0000001) \nset_left_most_unset_bit(0b00001) \nset_left_most_unset_bit(0b0000011) \nset_left_most_unset_bit(0b000001) \nset_left_most_unset_bit(0b0000001) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000) \nset_left_most_unset_bit(0b100000011) \nset_left_most_unset_bit(0b1000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_left_most_unset_bit(0b10000000111) \nset_left_most_unset_bit(0b10000000) \nset_left_most_unset_bit(0b1000000011) \nset_lef"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(1<<n.bit_length()-1) \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (~n + 1) \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert to decimal\n    n = int(n)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Z = r * h * math.pi / 3\n    #V = math.pi * (r ** 2) * h\n    #return V\n    #Z = 3.14 * r * h\n    #Z = 2 * 3.14 * (r ** 2)\n    Z = 2 * r * h\n    #return Z\n    #Z = 3.14 * r ** 2 * h\n    #Z = r ** 2 * h\n    #return Z\n    #Z = r ** 2 * h * math.sqrt(1 - (1 / math.tan(math.pi * r / 2)) ** 2)\n    #Z = r ** 2 * (math.tan(math.pi * r / 2) ** 2) * h\n    #Z = r ** 2 * h * math.sin(math.pi * r / 2)\n    #return Z\n    return (math.pi * r * h) / 3\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (r**2)*(math.pi)*(1/3)*(math.sqrt((h**2)+r**2))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 3.14 * r**2 * h / 3.0\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    return math.pi * (r**2) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    volume = (4/3)*pi*r**3*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (4.0/3.0)*math.pi*(r**2)*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (math.pi*r**2*h) / 3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius=float(r)\n    height=float(h)\n    volume=radius*radius*math.pi*height/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n <= 0): \n        return 0\n    \n    n = n | 1\n    while (n & 0x55555555) == 0: \n        n = n >> 1\n    \n    return n \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    largest_power = 0\n    current_power = 1\n    while current_power <= n:\n        current_power *= 2\n        if current_power <= n:\n            largest_power = current_power\n    return largest_power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    power = 0\n    while 2 ** i <= n:\n        if 2 ** i <= n:\n            power = i\n        i += 1\n    return power\n    \n    \ndef check_Reverse(string1,string2): \n    '''\n    Write a python function to check whether string1 is a reverse of string2 or not.\n    '''\n    if string1 == string2[::-1]:\n        print('True')\n    else:\n        print('False')\n    \n    \ndef is_Palindrome(string1):\n    '''\n    Write a python function to check whether string1 is a palindrome or not.\n    '''\n    if string1 == string1[::-1]:\n        print('True')\n    else:\n        print('False')\n        \n        \ndef is_prime(number):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1:\n        if number == 2:\n            return True\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n    return False\n    \n    \ndef count_prime(number):\n    '''\n    Write a python function to count the number of prime numbers present in a range.\n    '''\n    i = 1\n    count = 0\n    while i <= number:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return count\n    \n    \ndef print_prime_numbers(number):\n    '''\n    Write a python function to print all the prime numbers present in a range.\n    '''\n    i = 1\n    while i <= number:\n        if is_prime(i):\n            print(i)\n        i += 1\n    \n    \ndef sum_of_digits(number):\n    '''\n    Write a python function to find the sum of the digits in a number.\n    '''\n    sum = 0\n    while number > 0:\n        sum += number % 10\n        number = number // 10\n    return sum\n    \n    \ndef print_letters(string):\n    '''\n    Write a python function to print the letters present in a string.\n    '''\n    letters = ''\n    for letter in string:\n        if letter.isalpha():\n            letters += letter.lower()\n    print(letters)\n    \n    \ndef print_letters_up_to(string, number):\n    '''\n    Write a python function to print the letters present in a string up to the given number.\n    '''\n    letters = ''\n    for letter in string:\n        if letter.isalpha():\n            letters += letter.lower()\n    if number > len(letters):\n        return letters\n    else:\n        return letters[:number]\n    \n    \ndef print_letters_with_space(string):\n    '''\n    Write a python function to print the letters present in a string with space in between.\n    '''\n    letters = ''\n    for letter in string:\n        if letter.isalpha():\n            letters += letter.lower()\n    return letters\n    \n    \ndef print_number_in_ranges(start, end):\n    '''\n    Write a python function to print numbers from start to end in a range.\n    '''\n    for i in range(start, end + 1):\n        print(i)\n        \n    \ndef print_number_in_range_but_not_same(start, end):\n    '''\n    Write a python function to print numbers from start to end in a range, but not same.\n    '''\n    for i in range(start, end):\n        if i!= end:\n            print(i)\n    \n    \ndef print_number_in_range_but_not_same_with_space(start, end):\n    '''\n    Write a python function to print numbers from start to end in a range, but not same with space in between.\n    '''\n    for i in range(start, end):\n        if i!= end:\n            print(i, end ='')\n    \n    \ndef print_numbers_in_string(string):\n    '''\n    Write a python function to print numbers from start to end in a range, but not same with space in between.\n    '''\n    if len(string) <= 1:\n        return\n    for i in range(len(string)):\n        if i == len(string) - 1:\n            print(string[i])\n        else:\n            print(string[i], end ='')\n            \n    \ndef get_number_of_even_numbers(number):\n    '''\n    Write a python function to find the number of even numbers in a range.\n    '''\n    count = 0\n    for i in range(number + 1):\n        if i % 2 == 0:\n            count += 1\n    return count\n    \n    \ndef get_number_of_even_numbers_in_string(string):\n    '''\n    Write a python function to find the number of even numbers in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if i == len(string) - 1:\n            return count\n        elif string[i] =='':\n            continue\n        elif string[i].isalpha():\n            count += 1\n    return count\n    \n    \ndef get_numbers_in_a_range(number):\n    '''\n    Write a python function to print the numbers from start to end in a range.\n    '''\n    for i in range(number + 1):\n        if i % 2 == 0:\n            print(i)\n        \n    \ndef get_numbers_in_a_range_but_not_same(number):\n    '''\n    Write a python function to print the numbers from start to end in a range, but not same.\n    '''\n    for i in range(number + 1):\n        if i % 2 == 0:\n            continue\n        print(i)\n        \n    \ndef get_numbers_in_a_range_but_not_same_with_space(number):\n    '''\n    Write a python function to print the numbers from start to end in a range, but not same with space in between.\n    '''\n    for i in range(number + 1):\n        if i % 2 == 0:\n            continue\n        print(i, end ='')\n        \n    \ndef get_numbers_in_a_range_but_not_same_with_space_and_reverse_order(number):\n    '''\n    Write a python function to print the numbers from start to end in a range, but not same with space in between and reverse order.\n    '''\n    for i in range(number + 1):\n        if i % 2 == 0:\n            continue\n        print(i, end ='')\n    \n    \ndef get_string_from_numbers(number):\n    '''\n    Write a python function to print the numbers from start to end in a range, but not same with space in between.\n    '''\n    if number <= 10:\n        return '0123456789'\n    if number <= 100:\n        return '0123456789' + '0123456789'\n    if number <= 1000:\n        return '0123456789' + '0123456789' + '0123456789'\n    if number <= 10000:\n        return '0123456789' + '0123456789' + '0123456789' + '0123456789'\n    if number <= 100000:\n        return '0123456789' + '0123456789' + '0123456789' + '0123456789' + '0123456789'\n    if number <= 1000000:\n        return '0123456789' + '0123456789' + '0123456789' + '0123456789' + '0123456789' + '0123456789'\n    if number <= 10000000:\n        return '0123456789' + '0123456789' + '0123456789' + '0123456789' + '0123456789' + '0123456789' + '0123456789'\n    if number <= 1000000000:\n        return '0123456789' + '0123456789' + '0123456"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    maxPower = 0\n    for i in range(1,n):\n        if (n & i) == i:\n            maxPower = i\n    return maxPower\ndef sum_of_powers_of_two(n):\n    '''\n    Write a python function to find the sum of the powers of 2 that are less than or equal to n\n    '''\n    sumPower = 0\n    for i in range(1,n):\n        sumPower += i\n    return sumPower\ndef factorial_of_number(n):\n    '''\n    Write a python function to find the factorial of a number\n    '''\n    if n > 1:\n        return n * factorial_of_number(n - 1)\n    elif n == 1:\n        return 1\n    else:\n        return 0\ndef reverse_string(string):\n    '''\n    Write a python function to reverse a string\n    '''\n    if len(string) <= 1:\n        return string\n    else:\n        return string[-1] + reverse_string(string[:-1])\ndef palindrome_of_string(string):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(string) <= 1:\n        return True\n    else:\n        return string[0] == string[-1] and palindrome_of_string(string[1:-1])\ndef string_with_spaces(string):\n    '''\n    Write a python function to print a string with all the spaces between them as the space.\n    '''\n    return string.replace(' ','')\ndef swap_case(string):\n    '''\n    Write a python function to swap the case of all the letters of a string\n    '''\n    return string.swapcase()\ndef reverse(string):\n    '''\n    Write a python function to reverse a string\n    '''\n    if len(string) <= 1:\n        return string\n    else:\n        return string[-1] + reverse(string[:-1])\ndef number_of_vowels(string):\n    '''\n    Write a python function to count the number of vowels in a string\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            count += 1\n    return count\ndef find_second_max_number(list1):\n    '''\n    Write a python function to find the second maximum number in a list\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        list1.sort()\n        return list1[-2]\ndef sum_of_digits(number):\n    '''\n    Write a python function to sum all the digits of a number\n    '''\n    if number < 10:\n        return number\n    else:\n        return number % 10 + sum_of_digits(number // 10)\ndef count_digits(number):\n    '''\n    Write a python function to count the number of digits of a number\n    '''\n    return len(str(number))\ndef find_second_lowest_number(list1):\n    '''\n    Write a python function to find the second lowest number in a list\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        list1.sort()\n        return list1[-2]\ndef is_prime_number(n):\n    '''\n    Write a python function to check whether a number is prime number or not\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_number_recursive(n):\n    '''\n    Write a python function to check whether a number is prime number or not\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_number_iterative(n):\n    '''\n    Write a python function to check whether a number is prime number or not\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef count_prime_numbers(n):\n    '''\n    Write a python function to count the number of prime numbers less than or equal to n\n    '''\n    count = 0\n    for i in range(1,n):\n        if is_prime_number(i):\n            count += 1\n    return count\ndef is_divisible_by_three(n):\n    '''\n    Write a python function to check whether a number is divisible by 3 or not.\n    '''\n    return n % 3 == 0\ndef is_divisible_by_three_recursive(n):\n    '''\n    Write a python function to check whether a number is divisible by 3 or not.\n    '''\n    if n == 0:\n        return False\n    return n % 3 == 0 or is_divisible_by_three_recursive(n-1)\ndef is_divisible_by_three_iterative(n):\n    '''\n    Write a python function to check whether a number is divisible by 3 or not.\n    '''\n    if n == 0:\n        return False\n    while n > 0:\n        if n % 3 == 0:\n            return True\n        n = n - 1\n    return False\ndef is_prime_number_recursive_2(n):\n    '''\n    Write a python function to check whether a number is prime number or not\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_number_recursive_3(n):\n    '''\n    Write a python function to check whether a number is prime number or not\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_number_iterative(n):\n    '''\n    Write a python function to check whether a number is prime number or not\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_number_iterative_2(n):\n    '''\n    Write a python function to check whether a number is prime number or not\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef check_palindrome(string):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(string) <= 1:\n        return True\n    else:\n        return string[0] == string[-1] and check_palindrome(string[1:-1])\ndef check_palindrome_2(string):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(string) <= 1:\n        return True\n    else:\n        return string[0] == string[-1] and check_palindrome_2(string[1:-1])\ndef is_prime_number_recursive_4(n):\n    '''\n    Write a python function to check whether a number is prime number or not\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n % i ="
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def recur(n):\n        if n==0:\n            return 0\n        else:\n            return 1+recur(n//2) if n%2==0 else recur(n//2)\n    if n<1:\n        return 0\n    else:\n        return recur(n)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Your code here\n    if n <= 0:\n        return 0\n    max_power = 1\n    while 2 ** max_power <= n:\n        max_power += 1\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #your code here\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #solution 1\n    '''\n    temp = 0\n    x = 0\n    while 2**x <= n:\n        temp += 2**x\n        x += 1\n    if temp > n:\n        return temp - 2**x\n    else:\n        return temp\n    '''\n    \n    #solution 2\n    '''\n    n = int(n)\n    count = 0\n    while(2**count <= n):\n        count += 1\n    return count - 1\n    '''\n    #solution 3\n    '''\n    temp = 0\n    while n!= 0:\n        n = n >> 1\n        temp += 1\n    return temp\n    '''\n    \n    #solution 4\n    '''\n    temp = 0\n    x = 0\n    while n!= 0:\n        temp += 1\n        if n & 1 == 1:\n            x += 1\n        n = n >> 1\n    return temp, x\n    '''\n    \n    #solution 5\n    '''\n    temp = 0\n    while n >= 2:\n        n = n >> 1\n        temp += 1\n    return temp\n    '''\n    \n    #solution 6\n    '''\n    temp = 0\n    x = 0\n    while (n > 0):\n        temp = temp + 1\n        if (n & 1) == 1:\n            x = x + 1\n        n = n >> 1\n    return temp, x\n    '''\n    \n    #solution 7\n    '''\n    n = n & (n - 1)\n    while (n > 0):\n        n = n - 1\n    return n\n    '''\n    \n    #solution 8\n    '''\n    if n == 0:\n        return 0\n    while(n!= 1):\n        n = n & (n - 1)\n    return n\n    '''\n    \n    #solution 9\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    return n\n    '''\n    \n    #solution 10\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    return n\n    '''\n    \n    #solution 11\n    '''\n    if (n > 0):\n        return ((n & 0xffffffff) + 1) & 0xffffffff\n    else:\n        return 0\n    '''\n    \n    #solution 12\n    '''\n    if (n == 0):\n        return 1\n    if (n == 1):\n        return 2\n    p1 = (n + 1) & 0xffffffff\n    p2 = n + (1 << 32)\n    max_power = 1 << 32\n    while (p1!= p2):\n        p1 = (p1 + 1) & 0xffffffff\n        p2 = p2 + (1 << 32)\n        if (p1 == 0):\n            return max_power\n        if (p1 == p2):\n            return (p1 - 1) & 0xffffffff\n    return max_power\n    '''\n    \n    #solution 13\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    return n\n    '''\n    \n    #solution 14\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 4):\n        return 4\n    p1 = (n + 1) & 0xffffffff\n    p2 = n + (1 << 32)\n    max_power = 1 << 32\n    while (p1!= p2):\n        p1 = (p1 + 1) & 0xffffffff\n        p2 = p2 + (1 << 32)\n        if (p1 == 0):\n            return max_power\n        if (p1 == p2):\n            return (p1 - 1) & 0xffffffff\n    return max_power\n    '''\n    \n    #solution 15\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    return n\n    '''\n    \n    #solution 16\n    '''\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 4):\n        return 4\n    p1 = (n + 1) & 0xffffffff\n    p2 = n + (1 << 32)\n    max_power = 1 << 32\n    while (p1!= p2):\n        p1 = (p1 + 1) & 0xffffffff\n        p2 = p2 + (1 << 32)\n        if (p1 == 0):\n            return max_power\n        if (p1 == p2):\n            return (p1 - 1) & 0xffffffff\n    return max_power\n    '''\n    \n    #solution 17\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 4):\n        return 4\n    p1 = (n + 1) & 0xffffffff\n    p2 = n + (1 << 32)\n    max_power = 1 << 32\n    while (p1!= p2):\n        p1 = (p1 + 1) & 0xffffffff\n        p2 = p2 + (1 << 32)\n        if (p1 == 0):\n            return max_power\n        if (p1 == p2):\n            return (p1 - 1) & 0xffffffff\n    return max_power\n    '''\n    \n    #solution 18\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 4):\n        return 4\n    p1 = (n + 1) & 0xffffffff\n    p2 = n + (1 << 32)\n    max_power = 1 << 32\n    while (p1!= p2):\n        p1 = (p1 + 1) & 0xffffffff\n        p2 = p2 + (1 << 32)\n        if (p1 == 0):\n            return max_power\n        if (p1 == p2):\n            return (p1 - 1) & 0xffffffff\n    return max_power\n    '''\n    \n    #solution 19\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 4):\n        return 4\n    p1 = (n + 1) & 0xffffffff\n    p2 = n + (1 << 32)\n    max_power = 1 << 32\n    while (p1!= p2):\n        p1 = (p1 + 1) & 0xffffffff\n        p2 = p2 + (1 << 32)\n        if (p1 == 0):\n            return max_power\n        if (p1 == p2):\n            return (p1 - 1) & 0xffffffff\n    return max_power\n    '''\n    \n    #solution 20\n    '''\n    n = 1\n    while(n < n):\n        n = n << 1\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 4):\n        return 4\n    p1 = (n + 1) & 0xffffffff\n    p2 = n + (1 << 32)\n    max_power = 1 << 32\n    while (p1!= p2):\n        p1 = (p1 + 1) & 0xffffffff\n        p2 = p2 + (1 << 32)\n        if (p1 == 0):\n            return max_power\n        if (p1 == p2):\n            return (p1 - 1) & 0xffffffff\n    return max_power\n    '''\n    \n    #solution 21\n    '''\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 4):\n        return 4\n    p1 = (n + 1) & 0xffffffff\n    "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # if n < 2:\n    #     return -1\n    # elif n == 2:\n    #     return 0\n    # else:\n    #     while n > 1:\n    #         n = n >> 1\n    #     return n\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    temp = n\n    power_of_2 = 0\n    while temp >= 2:\n        if temp % 2 == 0:\n            temp = temp/2\n            power_of_2 += 1\n        else:\n            temp = temp - 1\n            power_of_2 = power_of_2 + 1\n    return power_of_2\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n - 1) + 2\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 1\n    b = 2\n    for i in range(n-1): \n        a, b = b, a + b \n    return b \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    lucas = 1\n    lucas_n = 1\n    if n == 0:\n        lucas_n = 1\n    else:\n        lucas_n = 2\n    while n > 1:\n        lucas_n = lucas + lucas_n\n        n = n - 1\n    return lucas_n\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    prev = find_lucas(n-1)\n    return (prev + prev) % 10\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    format_string = '<{}>'\n    list_.append(format_string.format(string))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    #string = \"Hi, {}\"\n    #string = \"{0} {1} {2}\"\n    #print(list_)\n    for index in range(len(list_)):\n        #print(string.format(list_[index]))\n        list_[index] = string.format(list_[index])\n    #list_ = list(map(lambda x: string.format(x), list_))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(list_[i]) for i in range(len(list_))]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    format_string = \": \".join(string)\n    for elem in list_:\n        list_.append(format_string.format(elem))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].upper()\n    return list_\n    \n    \ndef remove_list_elements(list_, number):\n    '''\n    Write a function to remove the first number of elements from a list.\n    '''\n    for i in range(number):\n        del list_[0]\n    return list_\n    \n    \ndef compare_list_elements(list1, list2):\n    '''\n    Write a function to compare two lists. Return True if they are the same, otherwise return False.\n    '''\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n    \ndef remove_list_elements_2(list_):\n    '''\n    Write a function to remove the elements which are repeated from a list.\n    '''\n    set_ = set(list_)\n    for i in list_:\n        if i in set_:\n            list_.remove(i)\n            set_.remove(i)\n    return list_\n    \n    \ndef get_common_elements(list1, list2):\n    '''\n    Write a function to return the list of common elements in the two lists.\n    '''\n    set_ = set(list1)\n    for i in list1:\n        if i in set_:\n            set_.remove(i)\n    set_ = set(list2)\n    for i in list2:\n        if i in set_:\n            set_.remove(i)\n    return set_\n    \n    \ndef sum_of_list_elements(list_):\n    '''\n    Write a function to add the elements from a list in a list.\n    '''\n    sum_ = 0\n    for i in range(len(list_)):\n        sum_ += list_[i]\n    return sum_\n    \n    \ndef multiply_list_elements(list_, number):\n    '''\n    Write a function to multiply the elements from a list in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] *= number\n    return list_\n    \n    \ndef sum_of_list_elements_2(list_):\n    '''\n    Write a function to add the elements from a list in a list.\n    '''\n    sum_ = 0\n    for i in range(len(list_)):\n        sum_ += list_[i]\n    return sum_\n    \n    \ndef square_list_elements(list_):\n    '''\n    Write a function to square the elements from a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] ** 2\n    return list_\n    \n    \ndef square_list_elements_2(list_):\n    '''\n    Write a function to square the elements from a list.\n    '''\n    sum_ = 0\n    for i in range(len(list_)):\n        sum_ += list_[i] ** 2\n    return sum_\n    \n    \ndef get_first_letter_of_string(string):\n    '''\n    Write a function to get the first letter of a string.\n    '''\n    return string[0]\n    \n    \ndef get_last_letter_of_string(string):\n    '''\n    Write a function to get the last letter of a string.\n    '''\n    return string[-1]\n    \n    \ndef get_first_letter_of_string_2(string):\n    '''\n    Write a function to get the first letter of a string.\n    '''\n    return string[0].upper()\n    \n    \ndef get_last_letter_of_string_2(string):\n    '''\n    Write a function to get the last letter of a string.\n    '''\n    return string[-1].upper()\n    \n    \ndef get_first_letter_of_string_3(string):\n    '''\n    Write a function to get the first letter of a string.\n    '''\n    return string[0].lower()\n    \n    \ndef get_last_letter_of_string_3(string):\n    '''\n    Write a function to get the last letter of a string.\n    '''\n    return string[-1].lower()\n    \n    \ndef is_string_empty(string):\n    '''\n    Write a function to check if a string is empty or not.\n    '''\n    return len(string) == 0\n    \n    \ndef is_string_empty_2(string):\n    '''\n    Write a function to check if a string is empty or not.\n    '''\n    return string == ''\n    \n    \ndef get_string_length(string):\n    '''\n    Write a function to get the length of a string.\n    '''\n    return len(string)\n    \n    \ndef get_string_length_2(string):\n    '''\n    Write a function to get the length of a string.\n    '''\n    return len(string)\n    \n    \ndef get_string_length_3(string):\n    '''\n    Write a function to get the length of a string.\n    '''\n    return len(string)\n    \n    \ndef is_char_in_string(string, char):\n    '''\n    Write a function to check if a character is present in a string.\n    '''\n    return char in string\n    \n    \ndef is_char_in_string_2(string, char):\n    '''\n    Write a function to check if a character is present in a string.\n    '''\n    return string.find(char)!= -1\n    \n    \ndef is_char_in_string_3(string, char):\n    '''\n    Write a function to check if a character is present in a string.\n    '''\n    return char in string.lower()\n    \n    \ndef get_string_index_of_first_occurrence(string, char):\n    '''\n    Write a function to get the index of the first occurrence of a character in a string.\n    '''\n    index = -1\n    if char in string:\n        index = string.find(char)\n        while string[index]!= char:\n            index += 1\n    return index\n    \n    \ndef get_string_index_of_first_occurrence_2(string, char):\n    '''\n    Write a function to get the index of the first occurrence of a character in a string.\n    '''\n    index = -1\n    if string.find(char)!= -1:\n        index = string.find(char)\n        while string[index]!= char:\n            index += 1\n    return index\n    \n    \ndef get_string_index_of_first_occurrence_3(string, char):\n    '''\n    Write a function to get the index of the first occurrence of a character in a string.\n    '''\n    index = string.find(char.lower())\n    return index\n    \n    \ndef get_string_index_of_last_occurrence(string, char):\n    '''\n    Write a function to get the index of the last occurrence of a character in a string.\n    '''\n    index = -1\n    if char in string:\n        index = string.rfind(char)\n        while string[index]!= char:\n            index -= 1\n    return index\n    \n    \ndef get_string_index_of_last_occurrence_2(string, char):\n    '''\n    Write a function to get the index of the last occurrence of a character in a string.\n    '''\n    index = -1\n    if string.rfind(char)!= -1:\n        index = string.rfind(char)\n        while string[index]!= char:\n            index -= 1\n    return index\n    \n    \ndef get_string_index_of_last_occurrence_3(string, char):\n    '''\n    Write a function to get the index of the last occurrence of a character in a string.\n    '''\n    index = string.rfind(char.lower())\n    return index\n    \n    \ndef get_string_index_of_first_occurrence_4(string, char):\n    '''\n    Write a function to get the index of the first occurrence of a character in a string.\n    '''\n    index = -"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print('{}{}{}'.format(string, item, string))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # initialize new dictionary\n    d = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {l1[i]:l2[i] for i in range(len(l1))}\n    dictionary.update({l1[i]:l3[i] for i in range(len(l2))})\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l3[i]] = l4[i]\n    print(d)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        dictionary[l3[i]] = l2[i]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #dict = {\"l1\":l1, \"l2\":l2, \"l3\":l3}\n    #new_dict = {}\n    #new_dict[\"l1\"] = l1\n    #new_dict[\"l2\"] = l2\n    #new_dict[\"l3\"] = l3\n    #return new_dict\n    #return dict\n    return {l1[i]:l2[i] for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l3[i]] = l4[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.reverse()\n    l2.reverse()\n    l3.reverse()\n    l1 = dict(zip(l1, l2))\n    l1 = dict(zip(l1, l3))\n    l1 = dict(l1)\n    return l1\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1={}\n    for i in range(len(l1)):\n        dict1[l1[i]]=l2[i]\n        dict2={}\n        for j in range(len(l3)):\n            dict2[l3[j]]=l1[i]\n        dict1[l1[i]]=dict2\n    return dict1\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Code here\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1: return n\n    \n    if n%2 == 0:\n        return get_max_sum (n/2) + n\n    elif n%3 == 0:\n        return get_max_sum (n/3) + n\n    elif n%4 == 0:\n        return get_max_sum (n/4) + n\n    elif n%5 == 0:\n        return get_max_sum (n/5) + n\n    else:\n        return n\n    \n    \n    \ndef get_max_sum_bottom_up (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    Bottom Up Approach\n    '''\n    dp = [-1 for _ in range(n+1)]\n    dp[0] = 0\n    \n    for i in range(1, n+1):\n        dp[i] = max(get_max_sum_bottom_up(i/2) + dp[i], get_max_sum_bottom_up(i/3) + dp[i], get_max_sum_bottom_up(i/4) + dp[i], get_max_sum_bottom_up(i/5) + dp[i])\n        \n    return dp[n]\n    \n    \n    \n    \ndef main():\n    n = int(input())\n    print(get_max_sum(n))\n    print(get_max_sum_bottom_up(n))\n    \nmain()"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    #start with 1\n    for i in range(1,n+1):\n        #find the first biggest number\n        first = get_max_sum(i//2)\n        second = get_max_sum(i//3)\n        third = get_max_sum(i//4)\n        fourth = get_max_sum(i//5)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    \n    '''\n    Write a function that takes as input a string and returns a string with all its characters reversed.\n    '''\n    # def reverse_string(s):\n    #     return s[::-1]\n    \n    '''\n    Write a function that accepts a string and returns True if the string starts with \"It\" followed by the letter \"s\", \n    False otherwise.\n    '''\n    # def check_string(s):\n    #     if s == \"It's\":\n    #         return True\n    #     else:\n    #         return False\n    \n    '''\n    Write a function that accepts a string and returns the string in which each character has been separated\n    by a space (\" \") and each word has been separated by a space (\" \").\n    '''\n    # def space_string(s):\n    #     return s.split(' ')\n    \n    '''\n    Write a function that accepts a string and returns the string with each word in the string separated\n    by a space (\" \").\n    '''\n    # def space_string_2(s):\n    #     return s.join(' ')\n    \n    '''\n    Write a function that accepts a string and returns a new string with every other character in the \n    original string removed.\n    '''\n    # def remove_every_other(s):\n    #     return s[::2]\n    \n    '''\n    Write a function that accepts a string and returns a new string with the first and last characters \n    removed.\n    '''\n    # def remove_first_and_last(s):\n    #     return s[1:-1]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first and last characters\n    removed. The first and last characters should be removed from the middle of the string.\n    '''\n    # def remove_first_and_last(s):\n    #     return s[1:-1]\n    \n    '''\n    Write a function that takes a string and returns a new string with all the spaces removed from\n    the string.\n    '''\n    # def remove_all_spaces(s):\n    #     return s.replace(' ', '')\n    \n    '''\n    Write a function that takes a string and returns a new string with the last n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:-n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first and last characters \n    removed. The first and last characters should be removed from the middle of the string.\n    '''\n    # def remove_first_and_last(s):\n    #     return s[1:-1]\n    \n    '''\n    Write a function that takes a string and returns a new string with the last n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:-n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the last n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:-n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_first_n_characters(s, n):\n    #     return s[n:]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_first_n_characters(s, n):\n    #     return s[n:]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n    # def remove_last_n_characters(s, n):\n    #     return s[:n]\n    \n    '''\n    Write a function that takes a string and returns a new string with the first n characters\n    removed where n is the number of times that the last character appears in the string.\n    '''\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        return n*(n-1)*(n-2)*(n-3)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n <= 1:\n            return n\n        else:\n            return max( f(n/2), f(n/3), f(n/4), f(n/5))\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    max_ = 0\n    for i in range(n):\n        max_ = max(max_, get_max_sum(int(i/2)) + get_max_sum(int(i/3)) + get_max_sum(int(i/4)) + get_max_sum(int(i/5)), i)\n    return max_\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # m = 0\n    # s = 0\n    # for i in range (1,n):\n    #     m = max(m,i)\n    #     s += i\n    # return m + s\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (max(f(n//2), f(n//3), f(n//4), f(n//5))) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f (n):\n        if (n == 0):\n            return 0\n        if (n%2 == 0):\n            return max(f(n//2), f(n//3), f(n//4), f(n//5), n)\n        else:\n            return max(f(n//2), f(n//3), f(n//4), f(n//5), n+1)\n    return f(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = len(input_list)\n    for i in range(max):\n        if len(input_list[i]) >= max:\n            max = len(input_list[i])\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length_list = []\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if len(input_list[i]) >= len(input_list[j]):\n                max_length_list = input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for val in input_list:\n        if len(val) > max_len:\n            max_len = len(val)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Your code here\n    max_len = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if max_len < len(input_list[i]):\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    for i in range(len(input_list)):\n        if len(input_list[i]) == max_length:\n            return input_list[i]\n    return input_list[0]\n    \ndef find_missing_number(input_list):\n    '''\n    Write a function to find the missing number in a list.\n    '''\n    result = 0\n    for i in range(1,len(input_list) + 1):\n        if i not in input_list:\n            result = i\n            break\n    return result\n    \ndef find_missing_number_2(input_list):\n    '''\n    Write a function to find the missing number in a list.\n    '''\n    result = 1\n    for i in range(1,len(input_list) + 1):\n        if i not in input_list:\n            result = i\n            break\n    return result\n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    min_length = 9999999\n    for i in input_list:\n        if len(i) < min_length:\n            min_length = len(i)\n    for i in range(len(input_list)):\n        if len(input_list[i]) == min_length:\n            return input_list[i]\n    return input_list[0]\n    \ndef remove_duplicates(input_list):\n    '''\n    Write a function to remove the duplicate in a list.\n    '''\n    final_list = []\n    for i in input_list:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list\n    \ndef remove_duplicates_2(input_list):\n    '''\n    Write a function to remove the duplicate in a list.\n    '''\n    return list(set(input_list))\n    \ndef compute_area(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    pi = 3.14\n    area = pi * radius**2\n    return area\n    \ndef compute_area_2(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return pi * radius**2\n    \ndef remove_duplicates_3(input_list):\n    '''\n    Write a function to remove the duplicate in a list.\n    '''\n    final_list = []\n    for i in input_list:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list\n    \ndef max_number_in_list(input_list):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    max_value = input_list[0]\n    for i in range(len(input_list)):\n        if input_list[i] > max_value:\n            max_value = input_list[i]\n    return max_value\n    \ndef max_number_in_list_2(input_list):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    return max(input_list)\n    \ndef find_missing_number_3(input_list):\n    '''\n    Write a function to find the missing number in a list.\n    '''\n    result = 1\n    for i in range(1,len(input_list) + 1):\n        if i not in input_list:\n            result = i\n            break\n    return result\n    \ndef find_missing_number_4(input_list):\n    '''\n    Write a function to find the missing number in a list.\n    '''\n    result = 1\n    for i in range(1,len(input_list) + 1):\n        if i not in input_list:\n            result = i\n            break\n    return result\n    \ndef is_binary_search_tree(input_list):\n    '''\n    Write a function to check whether the given list is a binary search tree or not.\n    '''\n    flag = False\n    if len(input_list) == 0:\n        return False\n    if len(input_list) == 1:\n        return True\n    for i in range(len(input_list)):\n        if input_list[i] > input_list[i+1]:\n            flag = True\n        else:\n            flag = False\n            break\n    return flag\n    \ndef is_binary_search_tree_2(input_list):\n    '''\n    Write a function to check whether the given list is a binary search tree or not.\n    '''\n    return (len(input_list) == 0 or len(input_list) == 1) and input_list[0] < input_list[1]\n    \ndef sum_list_numbers(input_list):\n    '''\n    Write a function to sum the list of numbers.\n    '''\n    result = 0\n    for i in input_list:\n        result = result + i\n    return result\n    \ndef sum_list_numbers_2(input_list):\n    '''\n    Write a function to sum the list of numbers.\n    '''\n    return sum(input_list)\n    \ndef is_number_in_range(input_number, minimum, maximum):\n    '''\n    Write a function to check whether the given number is in range.\n    '''\n    return minimum <= input_number <= maximum\n    \ndef is_number_in_range_2(input_number, minimum, maximum):\n    '''\n    Write a function to check whether the given number is in range.\n    '''\n    return input_number >= minimum and input_number <= maximum\n    \ndef get_nth_number(input_list, n):\n    '''\n    Write a function to get the nth number in a list.\n    '''\n    result = 1\n    for i in range(n-1):\n        result = result * (len(input_list) - i)\n        result = result // (len(input_list) - i)\n    result = result * (len(input_list) - n)\n    result = result // (len(input_list) - n)\n    return result\n    \ndef get_nth_number_2(input_list, n):\n    '''\n    Write a function to get the nth number in a list.\n    '''\n    return input_list[n-1]\n    \ndef get_next_greatest_number(input_list):\n    '''\n    Write a function to find the next greater number.\n    '''\n    result = 0\n    for i in range(len(input_list) - 1):\n        if input_list[i] < input_list[i+1]:\n            result = input_list[i+1]\n            break\n    return result\n    \ndef get_next_greatest_number_2(input_list):\n    '''\n    Write a function to find the next greater number.\n    '''\n    result = 9999999\n    for i in range(len(input_list) - 1):\n        if input_list[i] < input_list[i+1]:\n            result = input_list[i+1]\n            break\n    return result\n    \ndef get_next_greatest_number_3(input_list):\n    '''\n    Write a function to find the next greater number.\n    '''\n    result = 0\n    for i in range(len(input_list) - 1):\n        if input_list[i] < input_list[i+1]:\n            result = input_list[i+1]\n            break\n    return result\n    \ndef is_palindrome(input_string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    str_list = []\n    for i in range(len(input_string)):\n        str_list.append(input_string[i])\n    return str_list == list(reversed(str_list))\n    \ndef is_palindrome_2(input_string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    ''"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list_l = sorted(input_list, key=len)\n    print(input_list_l)\n    return input_list_l[-1]\n    \nmax_length_list([1,2,3,4,5])\nmax_length_list([1,2,3,4,5,1,2,3])\nmax_length_list([1,2,3,4,5,1,2,3,4])\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_max = []\n    list_max.append(len(max(input_list, key=len)))\n    return max(list_max)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length_list = input_list[0]\n    for i in range(1,len(input_list)):\n        if len(max_length_list) < len(input_list[i]):\n            max_length_list = input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_list = input_list[i]\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    x = len(set(test_tup))\n    if x == len(test_tup):\n        return True\n    else:\n        return False\n    \ndef check_no_repeat(test_list):\n    '''\n    Write a function to check if given list contains any duplicates.\n    '''\n    return len(test_list) == len(set(test_list))\n    \ndef check_unique_word(test_string):\n    '''\n    Write a function that takes a string as input and returns True if the string contains only unique characters.\n    '''\n    for i in test_string:\n        if test_string.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)-1):\n        if test_tup[i] in test_tup[i+1:]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    test_set = set(test_list)\n    if len(test_list) == len(test_set):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # return not any(a == test_tup[i] for i in range(len(test_tup)))\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    n = len(test_tup)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not any(x in test_tup for x in test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_dict = {}\n    for i in str1:\n        if i not in my_dict:\n            my_dict[i] = 1\n        else:\n            my_dict[i] += 1\n    for i in str1:\n        if my_dict[i] == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    n=len(str1)\n    count={}\n    for i in str1:\n        if i not in count:\n            count[i]=0\n        count[i]+=1\n    for j in range(n):\n        if count[str1[j]]==1:\n            return str1[j]\n    return None\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return '_'\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    chars = {}\n    \n    for c in str1:\n        if c in chars:\n            del chars[c]\n        else:\n            chars[c] = 1\n            \n    for c in chars:\n        return c\n    \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    temp = set(str1)\n    temp = list(temp)\n    return temp[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_occurrence = -1\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            first_occurrence = i\n            break\n    if first_occurrence == -1:\n        print(\"There is no first non-repeated character in the string\")\n    else:\n        print(f\"The first non-repeated character is {str1[first_occurrence]}\")\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_dict={}\n    for i in str1:\n        if i in my_dict:\n            my_dict[i]+=1\n        else:\n            my_dict[i]=1\n    for k,v in my_dict.items():\n        if v==1:\n            return k\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Your Code here\n    char_set = set()\n    for i in str1:\n        if i in char_set:\n            return i\n        else:\n            char_set.add(i)\n    return None\nprint(first_non_repeating_character('abcdz'))\nprint(first_non_repeating_character('abcde'))\nprint(first_non_repeating_character('abcdeee'))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.match(regex,string)):\n        print('Yes')\n    else:\n        print('No')\nif __name__ == \"__main__\":\n    s = 'aaabcc'\n    print(s)\n    check_char(s)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting check_char function', '-'*20)\n    print('String = ', string)\n    print('\\n', '-'*20, '\\n', 'Ending check_char function', '-'*20)\n    print()\n    if re.match(regex, string):\n        print('\\n', '-'*20, '\\n', 'Return True', '-'*20)\n        return True\n    print('\\n', '-'*20, '\\n', 'Return False', '-'*20)\n    return False\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting is_palindrome function', '-'*20)\n    print('String = ', string)\n    print('\\n', '-'*20, '\\n', 'Ending is_palindrome function', '-'*20)\n    print()\n    return (string == string[::-1])\n    \ndef palindrome(string):\n    '''\n    Write a function that returns a boolean value based on whether the given string is a palindrome or not.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting palindrome function', '-'*20)\n    print('String = ', string)\n    print('\\n', '-'*20, '\\n', 'Ending palindrome function', '-'*20)\n    print()\n    return (string == string[::-1])\n    \ndef reverse_string(string):\n    '''\n    Write a function that reverses the given string and returns it.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting reverse_string function', '-'*20)\n    print('String = ', string)\n    print('\\n', '-'*20, '\\n', 'Ending reverse_string function', '-'*20)\n    print()\n    string = list(string)\n    return(''.join(string[::-1]))\n    \ndef sum_of_n(string):\n    '''\n    Write a function that takes a string and returns the sum of all digits of the string.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting sum_of_n function', '-'*20)\n    print('String = ', string)\n    print('\\n', '-'*20, '\\n', 'Ending sum_of_n function', '-'*20)\n    print()\n    string = re.findall(r'\\d+', string)\n    sum_of_n = sum(int(x) for x in string)\n    return(sum_of_n)\n    \ndef check_prime(n):\n    '''\n    Write a function that checks if the given integer is prime or not.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting check_prime function', '-'*20)\n    print('\\n', '-'*20, '\\n', 'Ending check_prime function', '-'*20)\n    print()\n    if n > 1:\n        for i in range(2,n):\n            if n % i == 0:\n                return(False)\n                break\n            else:\n                return(True)\n    else:\n        return(False)\n        \ndef check_palindrome(string):\n    '''\n    Write a function that returns a boolean value based on whether the given string is a palindrome or not.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting check_palindrome function', '-'*20)\n    print('String = ', string)\n    print('\\n', '-'*20, '\\n', 'Ending check_palindrome function', '-'*20)\n    print()\n    return (string == string[::-1])\n    \ndef convert_to_roman(num):\n    '''\n    Write a function that takes a integer value and returns the Roman representation of the integer.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting convert_to_roman function', '-'*20)\n    print('Number = ', num)\n    print('\\n', '-'*20, '\\n', 'Ending convert_to_roman function', '-'*20)\n    print()\n    \n    roman_numbers = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    \n    if num < 0:\n        return('')\n    \n    roman_number = ''\n    \n    for i in roman_numbers:\n        roman_number += roman_numbers[i]*(num//i)\n        num %= i\n    \n    return roman_number\n    \ndef divide_by_three(n):\n    '''\n    Write a function that takes an integer argument and returns the closest integer value that is divisible by 3.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting divide_by_three function', '-'*20)\n    print('Number = ', n)\n    print('\\n', '-'*20, '\\n', 'Ending divide_by_three function', '-'*20)\n    print()\n    return(n//3*3)\n    \ndef str_rev(string):\n    '''\n    Write a function that takes a string and returns a string that is reversed.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting str_rev function', '-'*20)\n    print('String = ', string)\n    print('\\n', '-'*20, '\\n', 'Ending str_rev function', '-'*20)\n    print()\n    return(string[::-1])\n    \ndef convert_to_all_caps(string):\n    '''\n    Write a function that takes a string and returns a string with the entire string capitalized.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting convert_to_all_caps function', '-'*20)\n    print('String = ', string)\n    print('\\n', '-'*20, '\\n', 'Ending convert_to_all_caps function', '-'*20)\n    print()\n    return(string.upper())\n    \ndef display_table(table):\n    '''\n    Write a function that takes a list of lists and returns a list that displays the entire list and each list with an * for each of the list entries.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting display_table function', '-'*20)\n    print('Table = ', table)\n    print('\\n', '-'*20, '\\n', 'Ending display_table function', '-'*20)\n    print()\n    i = 0\n    while i < len(table):\n        table[i] = '*' + table[i] + '*'\n        i += 1\n    return(table)\n    \ndef reverse_table(table):\n    '''\n    Write a function that takes a list of lists and returns a list that reverses the entire list and each list with an * for each of the list entries.\n    '''\n    print('\\n', '-'*20, '\\n', 'Starting reverse_table function', '-'*20)\n    print('Table = ', table)\n    print('\\n', '-'*20, '\\n', 'Ending reverse_table function', '-'*20)\n    print()\n    i = 0\n    while i < len(table):\n        table[i] = '*' + table[i][::-1] + '*'\n        i += 1\n    return(table)\n    \ndef sort_table(table):\n    '''\n    Write a function that takes a list of lists and returns a list that sorts th"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)<=1:\n        return True\n    return string[0]==string[-1] and check_char(string[1:-1])\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return(re.search(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(re.match(regex,string))\n    if re.match(regex,string):\n        return 1\n    else:\n        return 0\nif __name__ == '__main__':\n    string = str(input('Enter string: '))\n    result = check_char(string)\n    print(result"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith(string[0]) and string.endswith(string[0]):\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    assert check_char('aba') == True\n    assert check_char('aba') == False\n    assert check_char('abc') == False\n    assert check_char('abc') == False\n    assert check_char('zab') == False\n    assert check_char('zab') == False\n    assert check_char('a') == True\n    assert check_char('a') == False\n    assert check_char('ab') == False\n    assert check_char('ab') == False\n    print('Tests Completed!')\n    \ndef check_string(string): \n    '''\n    Write a function to check whether the given string is a pangram or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once. For example: \"The quick brown fox jumps over the lazy dog\"\n    '''\n    if string.isalpha():\n        letter = list(string)\n        set_letter = set(letter)\n        if len(set_letter) == 26:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \nif __name__ == '__main__':\n    assert check_string('The quick brown fox jumps over the lazy dog') == True\n    assert check_string('The quick brown fox jumps over the lazy dog') == False\n    assert check_string('a') == False\n    assert check_string('A') == False\n    assert check_string('The') == False\n    assert check_string('The') == False\n    assert check_string('The quick brown fox jumps over the lazy dog') == True\n    assert check_string('The quick brown fox jumps over the lazy dog') == False\n    assert check_string('the quick brown fox jumps over the lazy dog') == False\n    assert check_string('the quick brown fox jumps over the lazy dog') == False\n    print('Tests Completed!')\n    \ndef check_string_using_re(string): \n    '''\n    Write a function to check whether the given string is a pangram or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once. For example: \"The quick brown fox jumps over the lazy dog\"\n    '''\n    string = string.lower()\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    assert check_string_using_re('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_using_re('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_using_re('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re('the quick brown fox jumps over the lazy dog') == False\n    print('Tests Completed!')\n    \ndef check_string_with_re_2(string): \n    '''\n    Write a function to check whether the given string is a pangram or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once. For example: \"The quick brown fox jumps over the lazy dog\"\n    '''\n    string = string.lower()\n    if re.search(r'[a-z]', string):\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    assert check_string_with_re_2('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_with_re_2('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_with_re_2('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_with_re_2('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_with_re_2('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_with_re_2('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_with_re_2('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_with_re_2('the quick brown fox jumps over the lazy dog') == False\n    print('Tests Completed!')\n    \ndef check_string_using_re_2(string): \n    '''\n    Write a function to check whether the given string is a pangram or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once. For example: \"The quick brown fox jumps over the lazy dog\"\n    '''\n    string = string.lower()\n    if re.search(r'[a-z]', string):\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    assert check_string_using_re_2('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_using_re_2('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_2('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_2('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_2('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_using_re_2('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_2('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_2('the quick brown fox jumps over the lazy dog') == False\n    print('Tests Completed!')\n    \ndef check_string_using_re_3(string): \n    '''\n    Write a function to check whether the given string is a pangram or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once. For example: \"The quick brown fox jumps over the lazy dog\"\n    '''\n    string = string.lower()\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    assert check_string_using_re_3('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_using_re_3('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_3('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_3('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_3('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_using_re_3('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_3('the quick brown fox jumps over the lazy dog') == False\n    assert check_string_using_re_3('the quick brown fox jumps over the lazy dog') == False\n    print('Tests Completed!')\n    \ndef check_string_with_re_3(string): \n    '''\n    Write a function to check whether the given string is a pangram or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once. For example: \"The quick brown fox jumps over the lazy dog\"\n    '''\n    string = string.lower()\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    assert check_string_with_re_3('The quick brown fox jumps over the lazy dog') == True\n    assert check_string_with_re_3('The quick brown fox jumps over the lazy dog') == False\n    assert check_string_with_re_3('th"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\nprint(check_char('abc'))  # True\nprint(check_char('abc'))  # False\nprint(check_char('abcdefgh'))  # True\nprint(check_char('abcdefgh'))  # False\nprint(check_char('abcdefghj'))  # False\nprint(check_char('abcde'))  # False\nprint(check_char('abcdefgh'))  # False\nprint(check_char('abcdefghij'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyz'))  # True\nprint(check_char('abcdefghijklmnopqrstuvwxyz'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabc'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabc'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # True\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # True\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # True\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # True\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'))  # False\nprint(check_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # if a == b == c:\n    #     print(a)\n    # elif a == b:\n    #     print(a)\n    # else:\n    #     print(b)\n    # if a == b:\n    #     print(a)\n    # elif a == c:\n    #     print(a)\n    # else:\n    #     print(c)\n    # print(a)\n    # print(b)\n    # print(c)\n    if a <= b <= c:\n        print(a)\n    elif b <= a <= c:\n        print(b)\n    else:\n        print(c)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = a,b,c\n    numbers.sort()\n    print(numbers[1])\n    if len(numbers)%2==1:\n        return numbers[1]\n    else:\n        return (numbers[1]+numbers[2])/2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = sorted([a,b,c])\n    return(lst[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #your code here\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<=b and a<=c:\n        if b<=c:\n            return a\n        else:\n            return c\n    if b<=a and b<=c:\n        if a<=c:\n            return b\n        else:\n            return c\n    if c<=a and c<=b:\n        if a<=b:\n            return a\n        else:\n            return b\n    return -1\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b and b < c:\n        return b\n    if b < a and a < c:\n        return a\n    if c < a and a < b:\n        return b\n    if a > b and b > c:\n        return a\n    if b > a and a > c:\n        return a\n    if c > a and a > b:\n        return a\n    if a < b and b < c:\n        return c\n    if b < a and a < c:\n        return c\n    if c < a and a < b:\n        return b\n    if a > b and b > c:\n        return b\n    if b > a and a > c:\n        return c\n    if c > a and a > b:\n        return c\n    return 'no number'\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = a\n    if b > median:\n        median = b\n    if c > median:\n        median = c\n    return median\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    assert type(nums) == list, 'Type error: Input parameter must be a list.'\n    assert len(nums) > 0, 'Type error: Input parameter must be a non-empty list.'\n    assert all(type(num) == int for num in nums), 'Type error: Input parameter must be an integer.'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    return sum(map(int, str(nums)))\n    "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums: return 0\n    res = 0\n    for num in nums:\n        res += sum_of_digits(list(str(num)))\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits_helper(num)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        else:\n            return n % 10 + sum_of_digits(n // 10)\n    return list(map(sum_of_digits, nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += int(math.floor(num))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += len(str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    # Write your code here\n    \n    sum = 0\n    for num in nums:\n        sum += int(str(num)[0])\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # your code here\n    return sum(int(digit) for digit in str(nums))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('ERROR - Both tuples must be of same length')\n    else:\n        return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \ndef get_filtered_dict(keys_list, dict_data):\n    '''\n    Write a function to filter the dictionary on the basis of keys in the list provided.\n    '''\n    new_dict = {}\n    for key, value in dict_data.items():\n        if key in keys_list:\n            new_dict[key] = value\n    return new_dict\n    \ndef find_missing_values(list1, list2):\n    '''\n    Write a function to find the missing values from list1 and list2\n    '''\n    final_list = list1 + list2\n    for i in list1:\n        if i not in final_list:\n            print(i)\n    \ndef group_words_by_sentence(text):\n    '''\n    Write a function to group the words in a given text based on their presence in sentences.\n    '''\n    final_list = []\n    new_list = text.split(\".\")\n    for i in new_list:\n        final_list.append(i.split())\n    new_list = []\n    for i in final_list:\n        new_list.extend(i)\n    final_list = []\n    for i in new_list:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list\n    \ndef get_chars_in_string(string1):\n    '''\n    Write a function to get the characters in a given string.\n    '''\n    new_list = []\n    for i in string1:\n        new_list.append(i)\n    return new_list\n    \ndef write_text_in_file(file_path, text_to_write):\n    '''\n    Write a function to write the given text in the file provided.\n    '''\n    f = open(file_path, \"w\")\n    f.write(text_to_write)\n    f.close()\n    \ndef write_text_to_file(file_path, text_to_write):\n    '''\n    Write a function to write the given text in the file provided.\n    '''\n    f = open(file_path, \"a\")\n    f.write(text_to_write)\n    f.close()\n    \ndef get_files_list(file_path):\n    '''\n    Write a function to get the list of files in a folder.\n    '''\n    return os.listdir(file_path)\n    \ndef get_files_list_with_extension(file_path, extension):\n    '''\n    Write a function to get the list of files with a given extension in a folder.\n    '''\n    return [file for file in os.listdir(file_path) if file.endswith(extension)]\n    \ndef get_files_list_with_extension_regex(file_path, regex):\n    '''\n    Write a function to get the list of files with a given regex in a folder.\n    '''\n    return [file for file in os.listdir(file_path) if re.search(regex, file)]\n    \ndef get_file_size(file_path):\n    '''\n    Write a function to get the file size of a given file.\n    '''\n    return os.path.getsize(file_path)\n    \ndef get_file_extension(file_path):\n    '''\n    Write a function to get the file extension of a given file.\n    '''\n    return os.path.splitext(file_path)[1]\n    \ndef get_file_path_with_os_walk(file_path):\n    '''\n    Write a function to get the file path of a given file using os.walk()\n    '''\n    for root, dirs, files in os.walk(file_path):\n        for file in files:\n            return os.path.join(root, file)\n            \ndef get_file_path_with_os_walk_subdir(file_path, dir_name):\n    '''\n    Write a function to get the file path of a given file using os.walk()\n    '''\n    for root, dirs, files in os.walk(file_path):\n        if root.endswith(dir_name):\n            for file in files:\n                return os.path.join(root, file)\n                \ndef get_file_path_with_os_walk_subdir_more(file_path, dir_name):\n    '''\n    Write a function to get the file path of a given file using os.walk()\n    '''\n    for root, dirs, files in os.walk(file_path):\n        if root.endswith(dir_name):\n            for file in files:\n                yield os.path.join(root, file)\n                \ndef write_text_to_file_with_os_walk(file_path, text_to_write):\n    '''\n    Write a function to write the given text in the file provided.\n    '''\n    for file_path in get_files_list_with_extension(file_path, \".txt\"):\n        f = open(file_path, \"w\")\n        f.write(text_to_write)\n        f.close()\n        \ndef write_text_to_file_with_os_walk_subdir(file_path, text_to_write, dir_name):\n    '''\n    Write a function to write the given text in the file provided.\n    '''\n    for file_path in get_files_list_with_extension_regex(file_path, \".txt\"):\n        f = open(file_path, \"w\")\n        f.write(text_to_write)\n        f.close()\n        \ndef write_text_to_file_with_os_walk_subdir_more(file_path, text_to_write, dir_name):\n    '''\n    Write a function to write the given text in the file provided.\n    '''\n    for file_path in get_files_list_with_extension_regex(file_path, \".txt\"):\n        f = open(file_path, \"w\")\n        f.write(text_to_write)\n        f.close()\n        \ndef write_text_to_file_with_os_walk_subdir_more_write(file_path, text_to_write, dir_name):\n    '''\n    Write a function to write the given text in the file provided.\n    '''\n    for file_path in get_files_list_with_extension_regex(file_path, \".txt\"):\n        f = open(file_path, \"w\")\n        f.write(text_to_write)\n        f.close()\n        \ndef get_files_list_with_os_walk(file_path):\n    '''\n    Write a function to get the list of files in a folder.\n    '''\n    for root, dirs, files in os.walk(file_path):\n        for file in files:\n            yield os.path.join(root, file)\n            \ndef get_files_list_with_os_walk_subdir(file_path, dir_name):\n    '''\n    Write a function to get the list of files in a folder.\n    '''\n    for root, dirs, files in os.walk(file_path):\n        if root.endswith(dir_name):\n            for file in files:\n                yield os.path.join(root, file)\n                \ndef get_files_list_with_os_walk_subdir_more(file_path, dir_name):\n    '''\n    Write a function to get the list of files in a folder.\n    '''\n    for root, dirs, files in os.walk(file_path):\n        if root.endswith(dir_name):\n            for file in files:\n                yield os.path.join(root, file)\n                \ndef get_files_list_with_os_walk_subdir_more_write(file_path, dir_name):\n    '''\n    Write a function to get the list of files in a folder.\n    '''\n    for root, dirs, files in os.walk(file_path):\n    "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    y = 0\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples are of different lengths\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            x = test_tup1[i]^test_tup2[i]\n            y += x\n        return y\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (tup1[0] ^ tup2[0], tup1[1] ^ tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup1[1]) == (test_tup2[0] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # The XOR operator is a bitwise operator that performs a logical xor operation on its operands\n    # 1 ^ 1 = 0 and 1 ^ 0 = 1\n    # 1 ^ 0 = 1 and 0 ^ 1 = 1\n    # 1 ^ 1 = 0 and 0 ^ 0 = 0\n    # The above is more readable as it explains the steps required to carry out the operation\n    # First, we divide the two tuples into lists of bits\n    l1 = []\n    l2 = []\n    for item in test_tup1:\n        l1.append(item)\n    for item in test_tup2:\n        l2.append(item)\n    # Now, we take the 1's in l1 and l2 and set them to 0 in order to create a new list which is the xor of the lists\n    l1 = l1 ^ l2\n    # Now we convert this list back into a tuple and return it\n    return tuple(l1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    l1 = test_tup1[0]\n    l2 = test_tup2[0]\n    if len(l1)!= len(l2):\n        return False\n    xor = 0\n    for i in range(len(l1)):\n        xor += l1[i] ^ l2[i]\n    if xor == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = dict()\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return len(freq.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            if(test_list[i]==test_list[j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(item) for item in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq.keys():\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq.values()\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Write your solution here\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i] == test_list[j]):\n                counter += 1\n    return counter\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    freq_dict = {}\n    for i in test_list:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    \n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_freq = {}\n    for ele in test_list:\n        if ele in num_freq:\n            num_freq[ele] += 1\n        else:\n            num_freq[ele] = 1\n    return num_freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    res = set()\n    for i in test_list:\n        for j in i:\n            res.add(j)\n    return len(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = ()\n    for i in range(len(test_tup1)):\n        res += (test_tup1[i] + test_tup2[i], )\n    return res\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (\n        (test_tup1[0]+test_tup2[0]),\n        (test_tup1[1]+test_tup2[1]),\n        (test_tup1[2]+test_tup2[2]),\n        (test_tup1[3]+test_tup2[3]),\n        (test_tup1[4]+test_tup2[4]),\n        (test_tup1[5]+test_tup2[5]),\n        (test_tup1[6]+test_tup2[6]),\n        (test_tup1[7]+test_tup2[7]),\n        (test_tup1[8]+test_tup2[8]),\n    )\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Creating new tuples\n    new_tup = (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] + test_tup2[i])\n    return test_tup3\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(0, len(test_tup1)):\n        l1.append(test_tup1[i][0])\n        l2.append(test_tup1[i][1])\n    for i in range(0, len(test_tup2)):\n        l1.append(test_tup2[i][0])\n        l2.append(test_tup2[i][1])\n    l3 = []\n    for i in range(0, len(l1)):\n        l3.append((l1[i], l2[i]))\n    return l3\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Your code here\n    a1 = test_tup1[0]\n    a2 = test_tup2[0]\n    i = 0\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            a1 = test_tup1[i]\n            a2 = test_tup2[i]\n            if type(a1) == type(a2):\n                a1 = (a1 + a2)\n            else:\n                print(\"Type Error\")\n    else:\n        print(\"Length Error\")\n    return a1\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x,y: x + y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(\"The first tuple : {}\".format(test_tup1))\n    print(\"The second tuple : {}\".format(test_tup2))\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda tup1, tup2: tuple(map(lambda x, y: x+y, tup1, tup2)), test_tup1, test_tup2))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a)\n    else:\n        print(b)\nminimum(10,20)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    return a\n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    return min(a,b,c)\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n    \ndef minimum(a,b,c):\n    if a<b and a<c:\n        return a\n    if b<c:\n        return b\n    return c\n    \n    \n    \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(\"The first number is minimum\")\n    else:\n        print(\"The second number is minimum\")\nminimum(1,5)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(\"a is minimum\")\n    elif a>b:\n        print(\"b is minimum\")\n    else:\n        print(\"Both are equal\")\nminimum(4,5)\nminimum(2,4)\nminimum(3,3)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<=b:\n        return a\n    else:\n        return b\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    print(min(a,b))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"\\n\\nFound in tuple1\")\n    else:\n        print(f\"\\n\\nNot Found in tuple1\")\n    \n    "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1: \n            return True \n    return False \n    \ndef check_tuplex_2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True \n    return False \n    \ndef check_tuplex_3(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True \n    return False \n    \ndef main(): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = (1,2,3,4,5,6,7,8,9,10) \n    tuple1 = (1,5,8) \n    \n    tuplex_1 = (1,2,3,4,5,6) \n    tuple1_1 = (2,3) \n    \n    print(check_tuplex(tuplex,tuple1)) \n    print(check_tuplex_2(tuplex,tuple1)) \n    print(check_tuplex_3(tuplex,tuple1)) \n    \n    print(check_tuplex_3(tuplex_1,tuple1_1)) \n    \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    while(x!=0):\n        count = count + 1\n        x = x & (x-1)\n    return count%2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Convert the input number to binary\n    # i.e., no. is 2^7, and 2^7 = 128\n    binary = bin(x)\n    binary = binary[2:]\n    \n    # Checking parity\n    if binary[0] == '0':\n        print('The parity is even')\n    else:\n        print('The parity is odd')\n    \n    \n    "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if the number is an even number\n    if x % 2 == 0:\n        return True\n    # if the number is an odd number\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x>0:\n        parity = parity ^ x%10\n        x = x//10\n    if parity%2==0:\n        print(x,': even parity')\n    else:\n        print(x,': odd parity')\n    return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code here\n    return (x % 2)==0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2)==0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Power(n,p):\n    '''\n    Write a python function to find the power of a given number\n    '''\n    return n**p\n    \ndef find_Power2(n,p):\n    '''\n    Write a python function to find the power of a given number.\n    '''\n    return pow(n,p)\n    \ndef find_Factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*find_Factorial(n-1)\n    \ndef find_Factorial2(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*(n-1)*find_Factorial(n-1)\n    \ndef find_Fibonacci(n):\n    '''\n    Write a python function to find the Fibonacci Number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return find_Fibonacci(n-1) + find_Fibonacci(n-2)\n    \ndef find_Fibonacci2(n):\n    '''\n    Write a python function to find the Fibonacci Number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(n-2):\n            c = a+b\n            a = b\n            b = c\n        return b\n    \ndef find_Permutation(x,y):\n    '''\n    Write a python function to find the permutation of given two numbers.\n    '''\n    if x > y:\n        return 'First number should be smaller than second number'\n    else:\n        return x*y\n    \ndef find_Permutation2(x,y):\n    '''\n    Write a python function to find the permutation of given two numbers.\n    '''\n    a = x\n    b = y\n    if a > b:\n        a, b = b, a\n    res = ''\n    while a > 0:\n        res = res + str(a % 10)\n        a = a // 10\n    return res\n    \ndef find_Multiplication(x,y):\n    '''\n    Write a python function to find the multiplication of given two numbers.\n    '''\n    return x*y\n    \ndef find_Multiplication2(x,y):\n    '''\n    Write a python function to find the multiplication of given two numbers.\n    '''\n    return x%y\n    \ndef find_Multiplication3(x,y):\n    '''\n    Write a python function to find the multiplication of given two numbers.\n    '''\n    return x+y\n    \ndef find_Multiplication4(x,y):\n    '''\n    Write a python function to find the multiplication of given two numbers.\n    '''\n    return x-y\n    \ndef find_Division(x,y):\n    '''\n    Write a python function to find the division of given two numbers.\n    '''\n    if y == 0:\n        return 'Zero Division Error'\n    else:\n        return x/y\n    \ndef find_Division2(x,y):\n    '''\n    Write a python function to find the division of given two numbers.\n    '''\n    return x%y\n    \ndef find_Division3(x,y):\n    '''\n    Write a python function to find the division of given two numbers.\n    '''\n    return x//y\n    \ndef find_Division4(x,y):\n    '''\n    Write a python function to find the division of given two numbers.\n    '''\n    return x%y\n    \ndef find_Reminder(x,y):\n    '''\n    Write a python function to find the reminder of given two numbers.\n    '''\n    return x%y\n    \ndef find_Reminder2(x,y):\n    '''\n    Write a python function to find the reminder of given two numbers.\n    '''\n    return x%y\n    \ndef find_Reminder3(x,y):\n    '''\n    Write a python function to find the reminder of given two numbers.\n    '''\n    return x%y\n    \ndef find_Reminder4(x,y):\n    '''\n    Write a python function to find the reminder of given two numbers.\n    '''\n    return x%y\n    \ndef find_Modulus(x,y):\n    '''\n    Write a python function to find the modulus of given two numbers.\n    '''\n    if x > y:\n        return 'First number should be smaller than second number'\n    elif x == 0:\n        return 0\n    else:\n        return x%y\n    \ndef find_Modulus2(x,y):\n    '''\n    Write a python function to find the modulus of given two numbers.\n    '''\n    if x > y:\n        return 'First number should be smaller than second number'\n    elif x == 0:\n        return 0\n    else:\n        return x%y\n    \ndef find_Modulus3(x,y):\n    '''\n    Write a python function to find the modulus of given two numbers.\n    '''\n    return x%y\n    \ndef find_Modulus4(x,y):\n    '''\n    Write a python function to find the modulus of given two numbers.\n    '''\n    return x%y\n    \ndef find_Fibonacci_Last_Digit(x):\n    '''\n    Write a python function to find the last digit of the Fibonacci Number.\n    '''\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    elif x == 2:\n        return 1\n    else:\n        return find_Fibonacci_Last_Digit(x-1)+find_Fibonacci_Last_Digit(x-2)\n    \ndef find_Fibonacci_Last_Digit2(x):\n    '''\n    Write a python function to find the last digit of the Fibonacci Number.\n    '''\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 0\n    elif x == 2:\n        return 1\n    else:\n        return find_Fibonacci_Last_Digit(x-1)+find_Fibonacci_Last_Digit(x-2)\n    \ndef find_Fibonacci_Last_Digit3(x):\n    '''\n    Write a python function to find the last digit of the Fibonacci Number.\n    '''\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 0\n    elif x == 2:\n        return 1\n    else:\n        return find_Fibonacci_Last_Digit(x-1)+find_Fibonacci_Last_Digit(x-2)\n    \ndef find_Fibonacci_Last_Digit4(x):\n    '''\n    Write a python function to find the last digit of the Fibonacci Number.\n    '''\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 0\n    elif x == 2:\n        return 1\n    else:\n        return find_Fibonacci_Last_Digit(x-1)+find_Fibonacci_Last_Digit(x-2)\n    \ndef find_Fibonacci_Last_Digit5(x):\n    '''\n    Write a python function to find the last digit of the Fibonacci Number.\n    '''\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 0\n    elif x == 2:\n        return 1\n    else:\n        return find_Fibonacci_Last_Digit(x-1)+find_Fibonacci_Last_Digit(x-2)\n    \ndef find_Fibonacci_Last_Digit6(x):\n    '''\n    Write a python function to find the last digit o"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n1 = int(n[0])\n    n2 = int(n[1])\n    n3 = int(n[2])\n    n4 = int(n[3])\n    if n1 >= n2:\n        if n1 >= n3:\n            if n1 >= n4:\n                n = n[1:] + str(n1) + str(n2) + str(n3) + str(n4)\n            else:\n                n = n[1:] + str(n1) + str(n2) + str(n4) + str(n3)\n        else:\n            n = n[1:] + str(n1) + str(n3) + str(n4) + str(n2)\n    else:\n        n = n[1:] + str(n2) + str(n1) + str(n3) + str(n4)\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    str1 = str(n)\n    num = 0\n    \n    for i in range(len(str1)):\n        num += (int(str1[i]) * 10**(len(str1)-1-i))\n    return num\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #since number is small enough, return itself\n    if n <= 9:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = list(str(n))\n    a.sort(reverse=True)\n    return int(''.join(a))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert to string to make it easier to manipulate\n    str_n = str(n)\n    # convert to integer to be able to work with it\n    int_n = int(str_n)\n    # convert to list to be able to manipulate the numbers\n    list_n = list(str_n)\n    # reverse the order of the list\n    list_n.reverse()\n    # convert the numbers to integers\n    int_n = int(''.join(list_n))\n    # convert the integer back to string\n    str_n = str(int_n)\n    # return the new number\n    return int_n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 0:\n        return -1\n    ans = str(n)\n    idx = len(ans) - 1\n    while idx >= 0:\n        if ans[idx] == '9':\n            ans = ans[:idx] + '9' + ans[idx + 1:]\n        elif ans[idx] == '1':\n            ans = ans[:idx] + '0' + ans[idx + 1:]\n        else:\n            ans = ans[:idx] + '1' + ans[idx + 1:]\n        idx -= 1\n    return int(ans)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # digits = list(str(n))\n    # nums = []\n    # for i in range(len(digits)):\n    #     nums.append(int(digits[i]))\n    # while len(nums) > 1:\n    #     if nums[-1] > nums[-2]:\n    #         nums.pop()\n    #     else:\n    #         nums.pop()\n    #         nums.append(nums[-1])\n    # return int(\"\".join([str(i) for i in nums]))\n    \n    def next_bigger(n):\n        digits = list(str(n))\n        digits = digits[::-1]\n        i = len(digits) - 1\n        while i >= 0:\n            if i == 0:\n                digits = digits[::-1]\n                return int(\"\".join([str(i) for i in digits]))\n            else:\n                if digits[i] > digits[i-1]:\n                    digits.pop(i)\n                    digits.pop(i-1)\n                    digits.insert(i-1, digits[i])\n                    digits = digits[::-1]\n                    return int(\"\".join([str(i) for i in digits]))\n                else:\n                    i -= 1\n    if n == 0:\n        return 0\n    else:\n        return next_bigger(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Solution-2 - bit manipulation\n    \n    # get number of 1 digits\n    n = '{0:b}'.format(n)\n    \n    # Number of 1's in the number is length of number\n    max_digits = len(n)\n    # Remove the last 1 if it is present\n    if max_digits > 1:\n        max_digits -= 1\n    \n    # initialize max to the value of the number\n    max = int(n)\n    \n    # Initialize previous_max with the same value of max\n    previous_max = max\n    \n    # Traverse the digits of the number\n    for i in range(max_digits):\n        # Get the next digit\n        current_digit = int(n[i])\n        # If current digit is greater than previous_max\n        if current_digit > previous_max:\n            # Swap the current digit with the last digit\n            n = n[:i] + str(current_digit) + n[i+1:]\n            # Set previous_max to current_digit\n            previous_max = current_digit\n    \n    return int(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    new_str = ''\n    for i in range(len(str_n) - 1, -1, -1):\n        new_str += str_n[i]\n    \n    return int(new_str)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        if(n>0):\n            n = list(str(n))\n            n.sort()\n            digits = []\n            for i in range(len(n)):\n                if(i==len(n)-1):\n                    digits.append(int(n[i]))\n                else:\n                    digits.append(int(n[i+1]))\n            digits.sort(reverse=True)\n            digits = ''.join(map(str,digits))\n            return int(digits)\n        else:\n            return -1\n    return next_bigger(n)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < k:\n        return []\n    if len(nums2) < k:\n        return []\n    minHeap = []\n    ans = []\n    \n    for i in nums1:\n        heapq.heappush(minHeap, (i, i))\n    for j in nums2:\n        if len(minHeap) > k:\n            heapq.heappushpop(minHeap, (j, j))\n    \n        else:\n            heapq.heappushpop(minHeap, (j, j))\n    \n        while minHeap[0][1] == j:\n            heapq.heappop(minHeap)\n            if len(minHeap) == 0:\n                break\n    \n        ans.append((minHeap[0][0], j))\n    \n    ans.sort()\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # compare numbers and take min k numbers\n    pairs = []\n    if not len(nums1) or not len(nums2):\n        return pairs\n    count = k\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = []\n            pair.append(nums1[i])\n            pair.append(nums2[j])\n            pair.sort()\n            if len(pairs) < count:\n                pairs.append(pair)\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # first index of the first array\n    start = 0\n    # last index of the second array\n    end = len(nums2) - 1\n    # iterate over the first array until the last one\n    for _ in range(k):\n        # two numbers from the first array and two numbers from the second array\n        num1 = nums1[start]\n        num2 = nums2[end]\n        # if the first number of the first array is greater than the second number\n        if num1 > num2:\n            # swap the first number with the second number\n            nums1[start] = num2\n            # increment the index of the first array by 1\n            start += 1\n        else:\n            # swap the first number with the second number\n            nums1[start] = num1\n            # increment the index of the first array by 1\n            start += 1\n        # if the last number of the second array is greater than the first number\n        if end == 0:\n            # swap the last number with the first number\n            nums2[end] = num1\n            # decrement the index of the second array by 1\n            end -= 1\n        else:\n            # swap the last number with the first number\n            nums2[end] = num2\n            # decrement the index of the second array by 1\n            end -= 1\n    # return the first k numbers from the first array\n    return nums1[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def naive_solution(nums1, nums2, k):\n        m = len(nums1)\n        n = len(nums2)\n        res = []\n        for i in range(m):\n            for j in range(n):\n                res.append([nums1[i], nums2[j]])\n        return res[:k]\n        \n    def heap_solution(nums1, nums2, k):\n        nums1.sort()\n        nums2.sort()\n        heap = []\n        for i in range(k):\n            heapq.heappush(heap, nums2[i])\n        res = []\n        for i in range(k):\n            res.append([nums1[i], heapq.heappop(heap)])\n        return res\n    return heap_solution(nums1, nums2, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < k or len(nums2) < k:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0 or len(nums1) == 0 or len(nums2) == 0:\n        return []\n    \n    freq_map = {}\n    max_heap = []\n    result = []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    arr1 = [(i, nums1[i]) for i in range(len(nums1))]\n    arr2 = [(i, nums2[i]) for i in range(len(nums2))]\n    heapq.heapify(arr1)\n    heapq.heapify(arr2)\n    res = []\n    while k > 0:\n        i, v1 = heapq.heappop(arr1)\n        j, v2 = heapq.heappop(arr2)\n        res.append((v1, v2))\n        if i + 1 < len(nums1):\n            heapq.heappush(arr1, (i+1, nums1[i+1]))\n        if j + 1 < len(nums2):\n            heapq.heappush(arr2, (j+1, nums2[j+1]))\n        k -= 1\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    ans = []\n    def kthsmallest(nums1, nums2, k):\n        heap = []\n        for i in range(min(k, len(nums1))):\n            heapq.heappush(heap, (nums1[i], nums2[i]))\n        \n        while k:\n            smallest = heapq.heappop(heap)\n            ans.append(smallest)\n            k -= 1\n        return ans\n    \n    return kthsmallest(nums1, nums2, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    result = []\n    heap = []\n    \n    for i in range(len(nums1)):\n        heapq.heappush(heap,(nums1[i]*(-1),i))\n        \n    for i in range(len(nums2)):\n        heapq.heappush(heap,(nums2[i]*(-1),i))\n        \n    for _ in range(k):\n        if heap and heap[0][1] < len(nums2)-1:\n            temp = heapq.heappop(heap)\n            result.append((temp[0],temp[1]))\n            \n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if not nums1 or not nums2:\n        return res\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if min_product > (list1[i][0] * list1[i][1]):\n            min_product = (list1[i][0] * list1[i][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l1 = tuple(list1)\n    result = l1[0]\n    for t in l1:\n        if t[0] < result[0]:\n            result = t\n        elif t[0] == result[0]:\n            if t[1] < result[1]:\n                result = t\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def prod(i):\n        return i[0]*i[1]\n    return min(list1, key=prod)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = (9999,9999)\n    for x in list1:\n        for y in x:\n            if min_product[0] > y:\n                min_product = (y,x)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n1 = 0\n    n2 = 0\n    min_prod = 0\n    for i in range(len(list1)):\n        if list1[i][0] < list1[i][1]:\n            n1 += 1\n        else:\n            n2 += 1\n        min_prod = min(min_prod, n1 * n2)\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = []\n    for item in list1:\n        result.append(min(item))\n    return tuple(result)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    min_product_list = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            temp = list1[i][0]*list1[j][0]\n            temp2 = list1[i][1]*list1[j][1]\n            if min_product == None or temp < min_product:\n                min_product = temp\n                min_product_list = [(list1[i][0],list1[i][1]),(list1[j][0],list1[j][1])]\n    return min_product_list\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(list1)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    res = -1\n    pairs = []\n    for i in list1:\n        pairs.append(i)\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            if pairs[i][1] * pairs[j][1] < res or res == -1:\n                res = pairs[i][1] * pairs[j][1]\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 1000000\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            #print(i,j)\n            #print(list1[i][0]*list1[j][0])\n            if(list1[i][0]*list1[j][0]<min_prod and i!=j):\n                min_prod = list1[i][0]*list1[j][0]\n    #print(\"min product:\",min_prod)\n    return min_prod\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for num in listval:\n        if minval > num:\n            minval = num\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for elem in listval:\n        if type(elem) is int:\n            if elem < min_val:\n                min_val = elem\n        elif type(elem) is float:\n            if elem < min_val:\n                min_val = elem\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    \n    if len(listval) == 0:\n        return min_val\n    \n    for item in listval:\n        if min_val == None:\n            min_val = item\n        else:\n            if item < min_val:\n                min_val = item\n    \n    return min_val\n    \n    "
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #listval = list_num\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    min_val = None\n    \n    for element in listval:\n        if min_val == None or element < min_val:\n            min_val = element\n            \n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listmin = listval[0]\n    for i in range(len(listval)):\n        if listmin > listval[i]:\n            listmin = listval[i]\n    return listmin\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = None\n    for i in listval:\n        if not min_value:\n            min_value = i\n        elif i < min_value:\n            min_value = i\n    return min_value\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.replace('_',' ').title().replace(' ','')\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    output = word.title()\n    return output\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in re.findall('[a-z]|[A-Z][a-z]*', word))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_','', word).title().replace('_', '')\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in word:\n        if i == '_':\n            camel_word += i\n        else:\n            camel_word += i.upper()\n    return camel_word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.split('_',word)\n    return ''.join([words[0] + word.join(words[1:])])\n    \n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # #to_camel_case = \"\"\n    # #for char in word:\n    # #    if char == \"_\":\n    # #        break\n    # #    else:\n    # #        to_camel_case += char.title()\n    # #return to_camel_case\n    return word.title()\ndef Camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    # to_snake_case = \"\"\n    # for char in word:\n    #     if not char.isupper():\n    #         to_snake_case += char.lower()\n    #     else:\n    #         to_snake_case += char.upper()\n    # return to_snake_case\n    return word.lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub(r'(.)([A-Z][a-z]+)', r'\\2 \\1', word)\n    s = re.sub(r'([a-z0-9])([A-Z])', r'\\1 \\2', s)\n    return s[0].lower() + s[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    components = []\n    string = word.split('_')\n    for word in string:\n        components.append(word[0].upper() + word[1:])\n    return ''.join(components)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    if len(words) < 2:\n        return word\n    else:\n        return words[0] + words[1].capitalize()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    words = word.split('_')\n    if len(words) < 2:\n        return word\n    else:\n        return words[0] + ''.join(word[i] if word[i].isupper() else '_' + word[i] for i in range(1, len(word)))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #code here\n    i = 0\n    j = 0\n    while i < len(l):\n        if l[i]%2!= 0:\n            l.pop(i)\n        else:\n            i += 1\n    return l\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10,11]))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            l1.append(l[i])\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    count = 0\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[::2]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_num = []\n    for num in l:\n        if num % 2!= 0:\n            odd_num.append(num)\n    print(odd_num)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for i in l:\n        if i%2!=0:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == None or type(l)!= list:\n        print(\"Please provide a valid list.\")\n        return\n    for i in l:\n        if type(i) == int:\n            if i%2 == 0:\n                continue\n            else:\n                l.remove(i)\n        else:\n            print(\"Please provide a valid list.\")\n            return\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i%2 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for i in range(len(l)):\n        if l[i]%2==0:\n            l1.append(l[i])\n    return l1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    lst = []\n    for item in list1:\n        lst.append(item[n])\n    return lst\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    element = []\n    for i in list1:\n        element.append(i[n])\n    return element\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize an empty list\n    extracted_list = []\n    # traverse through the given list\n    for i in range(len(list1)):\n        # extract the elements\n        extracted_list.append(list1[i][n-1])\n    # return the extracted elements\n    return extracted_list\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp_list = []\n    for i in list1:\n        temp_list.append(i[n])\n    return temp_list\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Insert your code here\n    list1.sort()\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1.sort()\n    if n <= len(list1):\n        return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    i = 0\n    while i < len(list1):\n        i += 1\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 == list2:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # for i in range(len(list1)):\n    #     for j in range(len(list2)):\n    #         if list1[i] == list2[j]:\n    #             return True\n    #     return False\n    \n    # new_list = []\n    # for i in list1:\n    #     if i not in new_list:\n    #         new_list.append(i)\n    #     else:\n    #         return True\n    \n    # return False\n    \n    return any(x in list2 for x in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(item in list2 for item in list1) \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    else:\n        return False\n    \ndef overlapping_2(list1,list2):\n    '''\n    Write a python function to check whether a given range in a sequence is overlapping or not.\n    '''\n    if set(list1).intersection(set(list2)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    if len(list1)==0 or len(list2)==0:\n        return False\n    else:\n        return any(i in list2 for i in list1)\n    \nprint(overlapping([1,2,3],[3]))\nprint(overlapping([1,2,3],[4,3]))\nprint(overlapping([1,2,3],[4,3,6,7]))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        for y in list2:\n            if x==y:\n                return True\n    return False\nlist1 = [1,2,3,4,5]\nlist2 = [4,5,6,7]\nprint(overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    import numpy as np\n    x = np.array(list1)\n    y = np.array(list2)\n    for i in x:\n        if i in y:\n            return i\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            prod = arr[i] * arr[j]\n            if(prod > max_prod):\n                max_prod = prod\n    print(max_prod)\n    \nif __name__ == '__main__':\n    arr = list(map(int,input().split()))\n    max_Product(arr)"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    print(\"The pair with highest product is\", arr[-1] * arr[-2])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    print(max_product)\nmax_Product([10,20,30,50,40])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return max(arr, key=lambda x: x*x)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max_prod = arr[0] \n    for i in range(0, n): \n        for j in range(i+1, n): \n            if (arr[i] * arr[j] > max_prod): \n                max_prod = arr[i] * arr[j] \n    return max_prod \n  \nprint(max_Product([1,2,3,4,5,6,7,8,9])) "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = 0\n    max_prod = -1\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            temp = arr[i] * arr[j]\n            if temp > max_prod:\n                res = arr[i] * arr[j]\n                max_prod = temp\n    return res\n    \ndef max_Product_2(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = 0\n    max_prod = -1\n    min_prod = -1\n    n = len(arr)\n    \n    min_prod_ind = -1\n    max_prod_ind = -1\n    \n    for i in range(n):\n        if min_prod < 0:\n            min_prod = arr[i]\n            min_prod_ind = i\n        else:\n            if arr[i] < min_prod:\n                min_prod = arr[i]\n                min_prod_ind = i\n    \n    for i in range(n):\n        if max_prod < 0:\n            max_prod = arr[i]\n            max_prod_ind = i\n        else:\n            if arr[i] > max_prod:\n                max_prod = arr[i]\n                max_prod_ind = i\n    \n    # print(\"Min : \", arr[min_prod_ind])\n    # print(\"Max : \", arr[max_prod_ind])\n    # print(\"Min Index : \", min_prod_ind)\n    # print(\"Max Index : \", max_prod_ind)\n    \n    # print(\"Max : \", max_prod)\n    # print(\"Min : \", min_prod)\n    \n    if max_prod_ind == min_prod_ind:\n        print(\"There is a single number with highest product.\")\n    \n    elif max_prod_ind == -1:\n        print(\"There are no numbers with highest product.\")\n    \n    else:\n        for i in range(min_prod_ind, max_prod_ind):\n            if arr[i] == max_prod:\n                print(\"Numbers with highest product are :\", arr[i], arr[i+1])\n                return\n    \nif __name__ == \"__main__\":\n    arr = [-10, -5, -2, -3, -1, -2, 2, 3, 5, -2, 2, 3, -1, -2, -5, 2]\n    # arr = [-2, -1]\n    # arr = [1, 3, -2, -1]\n    # arr = [-3, -2, -1]\n    # arr = [-1, -2]\n    # arr = [-2, -2, -1, -1, -1]\n    # arr = [-10, -5, -2, -3, -1, -2, 2, 3, 5, -2, 2, 3, -1, -2, -5, 2]\n    # arr = [1, -2, 4, -7, 8, -5]\n    # arr = [1, 1, -1, -1]\n    # arr = [-1, -1]\n    # arr = [-1, 1]\n    # arr = [-1, -1, 1]\n    max_Product_2(arr"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    product=1\n    result=0\n    for i in range(len(arr)-1):\n        product=arr[i]*arr[i+1]\n        if product>result:\n            result=product\n    print(result)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = []\n    n = len(arr)\n    if n > 1:\n        arr.sort(reverse=True)\n        max_pair.append(arr[0])\n        max_pair.append(arr[1])\n        max_pair.sort()\n        return max_pair\n    else:\n        print(\"Array should have 2 or more elements.\")\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    p=arr[0]\n    q=arr[1]\n    for i in range(len(arr)):\n        if p<=arr[i]:\n            p=arr[i]\n        if q<=arr[i]:\n            q=arr[i]\n    if p>=q:\n        return p,q\n    else:\n        return q,p\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Let us check for the highest product\n    max_p = 1 # Initializing the product\n    \n    for i in range(0, len(arr)):\n        # Iterate over the array\n        for j in range(i+1, len(arr)):\n            # Iterate over the array again\n            if arr[i] * arr[j] > max_p:\n                # If the product is greater than the product of two previous elements, we update the maximum product\n                max_p = arr[i] * arr[j]\n    \n    return max_p\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique = []\n    seen = []\n    for t in Input:\n        if t not in seen:\n            unique.append(t)\n            seen.append(t)\n    return unique\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common = []\n    for i in range(len(Input)):\n        Common.append(Input[i][0])\n    Common = list(set(Common))\n    print(Common)\n    return Common\n    \nInput = [['apple', 'banana'], ['apple', 'lemon'], ['lemon', 'orange'], ['orange', 'banana'], ['apple', 'lemon'], ['lemon', 'apple'], ['banana', 'orange'], ['apple', 'banana']]\ngroup_tuples(Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for i in Input:\n        temp = i[0]\n        if temp in result:\n            result[temp] += i[1]\n        else:\n            result[temp] = i[1]\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def first_element(Input):\n        '''\n        Find the first element in given list of tuple.\n        '''\n        e = ''\n        for i in range(0,len(Input)):\n            for j in range(1,len(Input[i])):\n                if Input[i][j] in Input[i][:j]:\n                    e = Input[i][j]\n                    break\n        return e\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if type(Input)!= list: \n        raise TypeError('Input must be a list')\n    if type(Input[0])!= tuple: \n        raise TypeError('Input elements must be a tuple')\n    common = list()\n    common_dict = dict()\n    for i in range(len(Input)): \n        for j in range(len(Input)): \n            if Input[i][0] == Input[j][0]:\n                common.append(Input[i])\n                common_dict[Input[i][0]] = True\n                break\n    return common, common_dict\n    \nif __name__ == \"__main__\":\n    a = ((1,2,3),(3,4,5),(6,7,8),(5,4,6))\n    print(group_tuples(a))\n    a = (('Sachin', 'Male', 25), ('Rohit', 'Male', 25), ('Sachin', 'Male', 25))\n    print(group_tuples(a))\n    "
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return []\n    tmp = list(Input[0])\n    for i in range(1, len(Input)):\n        if tmp!= list(Input[i]):\n            return tmp\n        else:\n            tmp.pop(0)\n            tmp.append(Input[i][0])\n    return tmp\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # for every item in the list\n    # check if the item is first item of tuple\n    # if yes, then add the item to the result list and break\n    # else go for next item\n    res = []\n    for item in Input:\n        if item[0] == item[1]:\n            res.append(item[0])\n            break\n    return res\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    Output=set(Output)\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N=len(Input)\n    Output=[]\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if Input[i][0]==Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n    \n    \ndef group_tuples(Inpu"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dic = {}\n    for i in range(0, len(Input)):\n        if Input[i][0] not in dic.keys():\n            dic[Input[i][0]] = []\n        dic[Input[i][0]].append(Input[i])\n    for i in dic.keys():\n        dic[i].sort()\n    for i in dic.keys():\n        for j in range(0, len(dic[i])-1):\n            if dic[i][j][1] == dic[i][j+1][1]:\n                if dic[i][j][0]!= dic[i][j+1][0]:\n                    if dic[i][j] not in dic[i+1]:\n                        dic[i+1].append(dic[i][j])\n    result = []\n    for i in dic.keys():\n        for j in range(0, len(dic[i])):\n            if dic[i][j][1]!= dic[i][j-1][1]:\n                result.append(dic[i][j])\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [item for item in Input if item[0] == min(Input, key=lambda x: x[0])[0]]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n=len(lst)\n    i=0\n    max_val=lst[i]\n    max_length=0\n    while(i<n):\n        if(len(max_val)<len(lst[i])):\n            max_val=lst[i]\n            max_length=len(max_val)\n        i=i+1\n    print(\"Element with maximum length: \",max_val,\"\\nLength: \",max_length)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_val = lst[0]\n    for i in lst:\n        if len(i) > len(max_val):\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(max(lst, key = len))\n    for i in range(0, len(lst)):\n        if len(lst[i]) == max_length:\n            return lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_index = i\n    return max_index\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = -1\n    for i in range(len(lst)):\n        if (max_len < len(lst[i])):\n            max_len = len(lst[i])\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    print('Maximum length of list :',max_length)\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    len_lst = len(lst)\n    max_value = lst[0]\n    if len_lst == 0:\n        print(\"Invalid input\")\n        return\n    for i in range(1, len_lst):\n        if len(lst[i]) > len(max_value):\n            max_value = lst[i]\n    return max_value\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxi = 0\n    for i in range(len(lst)):\n        if (len(lst[i])>maxi):\n            maxi = len(lst[i])\n            maxIndex = i\n    return lst[maxIndex]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key = len)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = 0\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = round(list1)\n    return sum(list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = sum(list1)\n    print(s)\n    return s\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for index, value in enumerate(list1):\n        list1[index] = round(value)\n    print(sum([i * len(list1) for i in list1]) )\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_list = 0\n    for item in list1:\n        sum_of_list += item\n        \n    print(f'{round(sum_of_list)} * {len(list1)} = {round(sum_of_list * len(list1))}')\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for element in list1:\n        result = result + round(element, 1) * len(list1)\n    print(\"The total sum is: \" + str(result))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        sum1 += list1[i]\n        list1[i] = round(list1[i])\n    print(sum1 * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    new_list = []\n    for i in list1:\n        i = int(i)\n        i = round(i, 2)\n        new_list.append(i)\n    print(sum(new_list) * length)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    summ = 0\n    for item in list1:\n        summ += item\n    summ = round(summ)\n    print(\"The round sum of list is:\", summ*len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    def cubesum(n):\n        n = n ** 3\n        print(n)\n        return n\n    \n    cubesum(n)\n    return cubesum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n_cube_sum = 0\n    for i in range(n):\n        n_cube_sum += (i**3)\n    return n_cube_sum\nprint(\"cube_Sum(5)=\",cube_Sum(5))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + i ** 3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum = cube_sum + i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        cube_sum = n * (n + 1) * (2 * n + 1)\n        return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    if n < 0:\n        return sum\n    for i in range(n):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans = ans + i*i*i\n    return ans\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat = []\n    for i in range(len(test_tup)):\n        concat.append(test_tup[i])\n    return '-'.join(concat)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = \"\"\n    for i in range(len(test_tup)):\n        output += test_tup[i] +''\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    return test_tup[0] + concatenate_tuple(test_tup[1:])\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = test_tup\n    return delimiter.join(tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #raise NotImplementedError(\"HINT: use string.join()\")\n    test_tup = str(test_tup)\n    return test_tup[0].join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_list = []\n    for elem in test_tup:\n        elem = str(elem)\n        test_list.append(elem +'')\n    return ''.join(test_list)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(0,n):\n        result = result + i*i*i\n    return result/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    Sum = 0.0\n    i = 0\n    while i < n:\n        Sum = Sum + (i*i*i)\n        i = i + 1\n    return Sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total = total + (i**3)\n        # print(total)\n    return (total/n)\n    \ndef main():\n    '''\n    Print the average of cubes of first n natural numbers.\n    '''\n    n = 5\n    print(find_Average_Of_Cube(n))\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n'''\nOutput:\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 0:\n        raise Exception('Value should be >= 0')\n    elif n == 0:\n        return 0\n    else:\n        return n * (n + 1) / 2\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i**3\n    return result/n\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(n+1):\n        result = result + i ** 3\n    return result/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total = total + i**3\n    return total/n\n    \ndef main():\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print(find_Average_Of_Cube(5))\n    print(find_Average_Of_Cube(20))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total = total + i**3\n    print(\"The average of cubes of first %d natural numbers is %f\" % (n, total/n))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n        print(total)\n    print(\"The average of cubes is : \", total/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def average(n):\n        '''\n        This function is used to calculate the average of cubes of first n natural numbers.\n        '''\n        total = 0\n        for i in range(n):\n            total += i**3\n        return total/n\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_of_tuple = list(test_tuple)\n    print(list_of_tuple)\n    #Remove first element of tuple and assign to a new tuple\n    list_of_tuple = list_of_tuple[1:]\n    #convert list of tuple to set and then to tuple and reassign to a new tuple\n    set_of_tuple = set(list_of_tuple)\n    set_of_tuple = tuple(set_of_tuple)\n    print(set_of_tuple)\n    #remove last element of tuple and assign to a new tuple\n    list_of_tuple = list_of_tuple[:-1]\n    #convert list of tuple to set and then to tuple and reassign to a new tuple\n    set_of_tuple = set(list_of_tuple)\n    set_of_tuple = tuple(set_of_tuple)\n    print(set_of_tuple)\n    return set_of_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = list(test_tuple)\n    output = []\n    for i in test_list:\n        output.append(i[::-1])\n    return tuple(output)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1][-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == str:\n            test_tuple[i] = test_tuple[i][-1:]\n    return test_tuple\n    \n    \ndef multiply(test_list):\n    '''\n    Write a function to multiply all the elements in a list.\n    '''\n    \n    mul = 1\n    for i in range(len(test_list)):\n        mul *= test_list[i]\n    return mul\n    \n    \ndef multiply_each(test_list):\n    '''\n    Write a function to multiply each element in a list by itself.\n    '''\n    \n    mul = 1\n    for i in range(len(test_list)):\n        mul *= test_list[i]\n    return mul\n    \n    \ndef sum_squares(test_list):\n    '''\n    Write a function to sum the squares of all the elements in a list.\n    '''\n    \n    s = 0\n    for i in range(len(test_list)):\n        s += test_list[i]*test_list[i]\n    return s\n    \n    \ndef sum_odd_elements(test_list):\n    '''\n    Write a function to sum only the odd elements of a list.\n    '''\n    \n    sum = 0\n    for i in range(len(test_list)):\n        if i % 2 == 1:\n            sum += test_list[i]\n    return sum\n    \n    \ndef sum_even_elements(test_list):\n    '''\n    Write a function to sum only the even elements of a list.\n    '''\n    \n    sum = 0\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            sum += test_list[i]\n    return sum\n    \n    \ndef even_odd(test_list):\n    '''\n    Write a function to compute the total number of even and odd numbers in a list.\n    '''\n    \n    even = 0\n    odd = 0\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n    return even, odd\n    \n    \ndef even_odd_sorted(test_list):\n    '''\n    Write a function to compute the total number of even and odd numbers in a list in a sorted way.\n    '''\n    \n    even = 0\n    odd = 0\n    for i in range(len(test_list)):\n        if test_list[i] % 2 == 0:\n            even += test_list[i]\n        else:\n            odd += test_list[i]\n    return even, odd\n    \n    \ndef all_the_same(test_list):\n    '''\n    Write a function to check if all the elements in a list are the same.\n    '''\n    \n    if test_list == []:\n        return False\n    for i in range(len(test_list)-1):\n        if test_list[i]!= test_list[i+1]:\n            return False\n    return True\n    \n    \ndef duplicates(test_list):\n    '''\n    Write a function to find and print all duplicates in a list.\n    '''\n    \n    if test_list == []:\n        return False\n    dup = []\n    for i in range(len(test_list)):\n        if test_list[i] not in dup:\n            dup.append(test_list[i])\n        else:\n            print(dup)\n    return dup\n    \n    \ndef count_positives_negatives(test_list):\n    '''\n    Write a function to count positive and negative numbers in a list.\n    '''\n    \n    pos = 0\n    neg = 0\n    for i in range(len(test_list)):\n        if test_list[i] > 0:\n            pos += 1\n        elif test_list[i] < 0:\n            neg += 1\n    return pos, neg\n    \n    \ndef sum_product_list(test_list):\n    '''\n    Write a function to compute the sum of all the numbers in a list and multiply them together.\n    '''\n    \n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum*test_list[0]\n    \n    \ndef sum_product_list_with_lambda(test_list):\n    '''\n    Write a function to compute the sum of all the numbers in a list and multiply them together using lambda.\n    '''\n    \n    sum = reduce(lambda x,y: x+y, test_list)\n    return sum*test_list[0]\n    \n    \ndef sum_list(test_list):\n    '''\n    Write a function to compute the sum of all the numbers in a list.\n    '''\n    \n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum\n    \n    \ndef sum_list_with_lambda(test_list):\n    '''\n    Write a function to compute the sum of all the numbers in a list using lambda.\n    '''\n    \n    sum = reduce(lambda x,y: x+y, test_list)\n    return sum\n    \n    \ndef print_list(test_list):\n    '''\n    Write a function to print all the numbers in a list.\n    '''\n    \n    for i in range(len(test_list)):\n        print(test_list[i])\n    \n    \ndef print_list_with_lambda(test_list):\n    '''\n    Write a function to print all the numbers in a list using lambda.\n    '''\n    \n    for i in range(len(test_list)):\n        print(reduce(lambda x,y: x+y, test_list))\n        \n    \ndef is_sorted(test_list):\n    '''\n    Write a function to check if a list is sorted in ascending order.\n    '''\n    \n    for i in range(len(test_list)-1):\n        if test_list[i] > test_list[i+1]:\n            return False\n    return True\n    \n    \ndef is_sorted_with_lambda(test_list):\n    '''\n    Write a function to check if a list is sorted in ascending order using lambda.\n    '''\n    \n    return sorted(test_list) == test_list\n    \n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse a list in-place.\n    '''\n    \n    for i in range(len(test_list)//2):\n        tmp = test_list[i]\n        test_list[i] = test_list[-1-i]\n        test_list[-1-i] = tmp\n    return test_list\n    \n    \ndef reverse_list_with_lambda(test_list):\n    '''\n    Write a function to reverse a list in-place using lambda.\n    '''\n    \n    test_list.reverse()\n    return test_list\n    \n    \ndef is_palindrome(test_string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    \n    test_string = test_string.lower()\n    for i in range(len(test_string)//2):\n        if test_string[i]!= test_string[-1-i]:\n            return False\n    return True\n    \n    \ndef is_palindrome_with_lambda(test_string):\n    '''\n    Write a function to check if a string is a palindrome or not using lambda.\n    '''\n    \n    test_string = test_string.lower()\n    return test_string == test_string[::-1]\n    \n    \ndef sum_of_digits(test_number):\n    '''\n    Write a function to sum of all the digits in a number.\n    '''\n    \n    tmp = 0\n    for i in range(len(test_number)):\n        tmp += int(test_number[i])\n    return tmp\n    \n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    try:\n        if len(test_tuple) == 0:\n            return ()\n        else:\n            return tuple(test_tuple[-1])\n    except Exception as e:\n        print(f\"Error : {e}\")\n        \nprint(extract_rear((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"))"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str[-1] for str in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        result.append(i[-1])\n    return tuple(result)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (tuple(map(lambda x:x[-1], test_tuple)))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # ********\n    # YOUR CODE HERE\n    # ********\n    return tuple(reversed(list(test_tuple)))\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if x in i:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len(list(filter(lambda x: x == x, list1)))\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count +=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_nums.append(i)\n    return odd_nums\n    \ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    even_nums = []\n    for i in nums:\n        if i % 2 == 0:\n            even_nums.append(i)\n    return even_nums\n    \ndef filter_positivenumbers(nums):\n    '''\n    Write a function to filter positive numbers.\n    '''\n    pos_nums = []\n    for i in nums:\n        if i >= 0:\n            pos_nums.append(i)\n    return pos_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num%2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num%2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Your code here\n    \n    # Filter odd numbers\n    # Return list of even numbers\n    odd_numbers = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_numbers.append(nums[i])\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for i in nums:\n        if i%2!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for i in nums:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # nums = [3, 5, 2, 1, 6, 8, 7, 9]\n    return list(filter(lambda x: (x % 2)!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i % 2!= 0:\n            oddnumbers.append(i)\n    return oddnumbers\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(re.sub(r'^(20\\d{2})-', '', dt))\n    print(re.sub(r'^([0-9]{2})-', '', dt))\n    print(re.sub(r'^([0-9]{2})-([0-9]{2})', '', dt))\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    print('Original date:',d)\n    dd = int(d[0])\n    mm = int(d[1])\n    yyyy = int(d[2])\n    y = int(yyyy/100)\n    m = int(mm/100)\n    yy = yyyy - y - m/12\n    dd = dd - m/12\n    dd = dd - yy/100\n    dd = dd + yy/400\n    return dd-1, mm, yyyy\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt=dt.split('-')\n    dt=dt[::-1]\n    new_dt='%02d-%02d-%s'%(int(dt[0]),int(dt[1]),dt[2])\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_arr = dt.split('-')\n    \n    return f'{dt_arr[2]}-{dt_arr[1]}-{dt_arr[0]}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # read the data\n    date_list = []\n    for l in dt.split('\\n'):\n        date_list.append(l.split())\n    \n    # iterate over list\n    for idx, el in enumerate(date_list):\n        if '-' in el[1]:\n            date_list[idx][1] = el[1].replace('-', '')\n        else:\n            date_list[idx][1] = el[1].replace('.', '-')\n        if '-' in el[2]:\n            date_list[idx][2] = el[2].replace('-', '')\n        else:\n            date_list[idx][2] = el[2].replace('.', '-')\n        date_list[idx][3] = el[3]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[4:] + dt[:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # YOUR CODE HERE\n    a,b = dt.split('-')\n    c,d = b.split('-')\n    return (int(d),int(c),int(a))\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = '%d-%m-%Y'\n    return datetime.strptime(dt, date_format).strftime('%d-%m-%Y')\ndef make_spent_chart(dct, category):\n    '''\n    Write a function to make a Spent Pie Chart.\n    '''\n    total_spent = 0\n    for item in dct[category]:\n        total_spent += item['spent']\n    data = {\"labels\": dct[category],\n            \"datasets\": [{\"name\":category, \"data\":[{\"value\":total_spent, \"label\":category}]}]}\n    return json.dumps(data)\ndef get_task_details(task):\n    '''\n    Write a function to fetch task details from task.json.\n    '''\n    if(os.path.exists(\"task.json\")):\n        with open('task.json') as f:\n            data = json.load(f)\n    else:\n        data = {'task':[]}\n    new_data = {'date': task['date'],\n            'category': task['category'],\n            'task': task['task'],\n            'status': task['status']}\n    data['task'].append(new_data)\n    with open('task.json', 'w') as f:\n        json.dump(data, f)\ndef show_tasks(tasks):\n    '''\n    Write a function to show the task details.\n    '''\n    data = {'task': []}\n    for task in tasks:\n        new_data = {'date': task['date'],\n                    'category': task['category'],\n                    'task': task['task'],\n                    'status': task['status']}\n        data['task'].append(new_data)\n    return json.dumps(data)\ndef get_tasks(category):\n    '''\n    Write a function to fetch tasks from task.json\n    '''\n    if(os.path.exists(\"task.json\")):\n        with open('task.json') as f:\n            data = json.load(f)\n    else:\n        data = {'task':[]}\n    new_data = {'date': '',\n                'category': '',\n                'task': '',\n                'status': ''}\n    for task in data['task']:\n        if task['category'] == category:\n            new_data = {'date': task['date'],\n                    'category': task['category'],\n                    'task': task['task'],\n                    'status': task['status']}\n    return new_data\ndef get_category(category):\n    '''\n    Write a function to fetch category from category.json\n    '''\n    if(os.path.exists(\"category.json\")):\n        with open('category.json') as f:\n            data = json.load(f)\n    else:\n        data = {'category':[]}\n    new_data = {'date': '',\n                'category': '',\n                'task': '',\n                'status': ''}\n    for task in data['category']:\n        if task['name'] == category:\n            new_data = {'date': task['date'],\n                    'category': task['name'],\n                    'task': task['task'],\n                    'status': task['status']}\n    return new_data\ndef show_category(categories):\n    '''\n    Write a function to show categories.\n    '''\n    data = {'category':[]}\n    for category in categories:\n        new_data = {'date': '',\n                    'category': '',\n                    'task': '',\n                    'status': ''}\n        for task in categories[category]:\n            new_data = {'date': task['date'],\n                    'category': task['category'],\n                    'task': task['task'],\n                    'status': task['status']}\n        data['category'].append(new_data)\n    return json.dumps(data)\ndef get_category_date(category):\n    '''\n    Write a function to fetch category date from category.json\n    '''\n    if(os.path.exists(\"category.json\")):\n        with open('category.json') as f:\n            data = json.load(f)\n    else:\n        data = {'category':[]}\n    new_data = {'date': '',\n                'category': '',\n                'task': '',\n                'status': ''}\n    for task in data['category']:\n        if task['name'] == category:\n            new_data = {'date': task['date'],\n                    'category': task['category'],\n                    'task': task['task'],\n                    'status': task['status']}\n    return new_data\ndef get_status(category, status):\n    '''\n    Write a function to fetch status from status.json\n    '''\n    if(os.path.exists(\"status.json\")):\n        with open('status.json') as f:\n            data = json.load(f)\n    else:\n        data = {'status':[]}\n    new_data = {'date': '',\n                'category': '',\n                'task': '',\n                'status': ''}\n    for task in data['status']:\n        if task['category'] == category and task['status'] == status:\n            new_data = {'date': task['date'],\n                    'category': task['category'],\n                    'task': task['task'],\n                    'status': task['status']}\n    return new_data\ndef get_tasks_by_category(category):\n    '''\n    Write a function to fetch tasks by category.\n    '''\n    if(os.path.exists(\"task.json\")):\n        with open('task.json') as f:\n            data = json.load(f)\n    else:\n        data = {'task':[]}\n    new_data = {'date': '',\n                'category': '',\n                'task': '',\n                'status': ''}\n    for task in data['task']:\n        if task['category'] == category:\n            new_data = {'date': task['date'],\n                    'category': task['category'],\n                    'task': task['task'],\n                    'status': task['status']}\n    return new_data\ndef get_tasks_by_status(status):\n    '''\n    Write a function to fetch tasks by status.\n    '''\n    if(os.path.exists(\"task.json\")):\n        with open('task.json') as f:\n            data = json.load(f)\n    else:\n        data = {'task':[]}\n    new_data = {'date': '',\n                'category': '',\n                'task': '',\n                'status': ''}\n    for task in data['task']:\n        if task['status'] == status:\n            new_data = {'date': task['date'],\n                    'category': task['category'],\n                    'task': task['task'],\n                    'status': task['status']}\n    return new_data\ndef get_tasks_by_date(date):\n    '''\n    Write a function to fetch tasks by date.\n    '''\n    if(os.path.exists(\"task.json\")):\n        with open('task.json') as f:\n            data = json.load(f)\n    else:\n        data = {'task':[]}\n    new_data = {'date': '',\n                'category': '',\n                'task': '',\n                'status': ''}\n    for task in data['task']:\n        if task['date'] == date:\n            new_data = {'date': task['date'],\n                    'category': task['category'],\n                    'task': task['task'],\n                    'status': task['status']}\n    return new_data\ndef get_tasks_by_month(month):\n    '''\n    Write a function to fetch tasks by month.\n    '''\n    if(os.path.exists(\"task.json\")):\n        with open('task.json') as f:\n            data = json.load(f)\n    els"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d=dt.split('-')\n    return(d[2]+'-'+d[1]+'-'+d[0])\n    \ndef is_leap_year(year):\n    \"\"\"\n    Write a function to determine if the year is a leap year.\n    \"\"\"\n    if year%4==0:\n        if year%100==0:\n            if year%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef reverse_date(dt):\n    \"\"\"\n    Write a function to reverse the date.\n    \"\"\"\n    d=dt.split('-')\n    return(d[2]+'-'+d[1]+'-'+d[0])\n    \ndef check_date(dt1,dt2):\n    \"\"\"\n    Write a function to check whether dt1 is older than dt2 or not.\n    \"\"\"\n    d1=dt1.split('-')\n    d2=dt2.split('-')\n    if int(d1[0])>int(d2[0]):\n        return True\n    elif int(d1[0])<int(d2[0]):\n        return False\n    else:\n        if int(d1[1])>int(d2[1]):\n            return True\n        elif int(d1[1])<int(d2[1]):\n            return False\n        else:\n            if int(d1[2])>int(d2[2]):\n                return True\n            elif int(d1[2])<int(d2[2]):\n                return False\n            else:\n                return False\n                \ndef check_time(time1,time2):\n    \"\"\"\n    Write a function to check whether time1 is earlier than time2 or not.\n    \"\"\"\n    t1=time1.split(':')\n    t2=time2.split(':')\n    if int(t1[0])>int(t2[0]):\n        return True\n    elif int(t1[0])<int(t2[0]):\n        return False\n    else:\n        if int(t1[1])>int(t2[1]):\n            return True\n        elif int(t1[1])<int(t2[1]):\n            return False\n        else:\n            if int(t1[2])>int(t2[2]):\n                return True\n            elif int(t1[2])<int(t2[2]):\n                return False\n            else:\n                return False\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime(\"%d-%m-%Y\")\ndef replace_space_extend(s):\n    return s.replace(' ', '\u00b7')\ndef delete_multiple_spaces(s):\n    return s.replace('\u00b7',' ')\ndef replace_multiple_spaces(s):\n    return s.replace('  ','')\ndef replace_multiple_spaces_extend(s):\n    return s.replace('\u00b7',' ')\ndef delete_multiple_spaces_extend(s):\n    return s.replace('\u00b7','')\ndef replace_multiple_spaces_extend_all(s):\n    return s.replace('\u00b7','')\ndef replace_multiple_spaces_all(s):\n    return s.replace('\u00b7','')\ndef remove_non_alphanumeric_characters(s):\n    return re.sub(r'[^\\w]', '', s)\ndef remove_whitespace(s):\n    return re.sub(r'\\s+', '', s)\ndef remove_whitespace_all(s):\n    return re.sub(r'\\s+', '', s)\ndef remove_empty_string(s):\n    return re.sub(r'^\\s+$', '', s)\ndef remove_empty_string_all(s):\n    return re.sub(r'^\\s+$', '', s)\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\s\\s+','', s)\ndef remove_multiple_spaces_all(s):\n    return re.sub(r'\\s\\s+','', s)\ndef remove_new_line_char(s):\n    return re.sub(r'\\n', '', s)\ndef remove_new_line_char_all(s):\n    return re.sub(r'\\n', '', s)\ndef remove_new_line_char_all_list(lst):\n    return re.sub(r'\\n', '', lst)\ndef replace_new_line_char(s):\n    return re.sub(r'\\n','', s)\ndef replace_new_line_char_all(s):\n    return re.sub(r'\\n','', s)\ndef replace_new_line_char_all_list(lst):\n    return re.sub(r'\\n','', lst)\ndef remove_spaces(s):\n    return re.sub(r'\\s+','', s)\ndef remove_spaces_all(s):\n    return re.sub(r'\\s+','', s)\ndef remove_hyphen(s):\n    return re.sub(r'[-]', '', s)\ndef remove_hyphen_all(s):\n    return re.sub(r'[-]', '', s)\ndef remove_non_alphanumeric_characters(s):\n    return re.sub(r'[^\\w]', '', s)\ndef remove_alphanumeric_characters(s):\n    return re.sub(r'\\w', '', s)\ndef remove_whitespace_characters(s):\n    return re.sub(r'\\s', '', s)\ndef remove_whitespace_characters_all(s):\n    return re.sub(r'\\s', '', s)\ndef remove_non_alphanumeric_characters_all(s):\n    return re.sub(r'[^\\w]', '', s)\ndef remove_non_alphanumeric_characters_all_list(lst):\n    return re.sub(r'[^\\w]', '', lst)\ndef remove_alphanumeric_characters(s):\n    return re.sub(r'\\w', '', s)\ndef replace_a_with_b(s):\n    return re.sub(r'a', 'b', s)\ndef replace_a_with_b_all(s):\n    return re.sub(r'a', 'b', s)\ndef replace_b_with_a(s):\n    return re.sub(r'b', 'a', s)\ndef replace_b_with_a_all(s):\n    return re.sub(r'b', 'a', s)\ndef replace_all_with_b(s):\n    return re.sub(r'\\w', 'b', s)\ndef replace_all_with_b_all(s):\n    return re.sub(r'\\w', 'b', s)\ndef replace_all_with_a(s):\n    return re.sub(r'\\w', 'a', s)\ndef replace_all_with_a_all(s):\n    return re.sub(r'\\w', 'a', s)\ndef replace_lower_case_with_upper_case(s):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), s)\ndef replace_lower_case_with_upper_case_all(s):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), s)\ndef replace_upper_case_with_lower_case(s):\n    return re.sub(r'\\b[A-Z]\\b', lambda m: m.group().lower(), s)\ndef replace_upper_case_with_lower_case_all(s):\n    return re.sub(r'\\b[A-Z]\\b', lambda m: m.group().lower(), s)\ndef replace_lower_case_with_upper_case_all(s):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), s)\ndef replace_lower_case_with_upper_case_all_list(lst):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), lst)\ndef replace_upper_case_with_lower_case_all_list(lst):\n    return re.sub(r'\\b[A-Z]\\b', lambda m: m.group().lower(), lst)\ndef replace_lower_case_with_upper_case_all_list(lst):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), lst)\ndef replace_uppercase_with_lowercase(s):\n    return re.sub(r'\\b[A-Z]\\b', lambda m: m.group().lower(), s)\ndef replace_uppercase_with_lowercase_all(s):\n    return re.sub(r'\\b[A-Z]\\b', lambda m: m.group().lower(), s)\ndef replace_lowercase_with_uppercase(s):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), s)\ndef replace_lowercase_with_uppercase_all(s):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), s)\ndef replace_uppercase_with_lowercase_all(s):\n    return re.sub(r'\\b[A-Z]\\b', lambda m: m.group().lower(), s)\ndef replace_lowercase_with_uppercase_all_list(lst):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), lst)\ndef replace_uppercase_with_lowercase_all_list(lst):\n    return re.sub(r'\\b[A-Z]\\b', lambda m: m.group().lower(), lst)\ndef replace_lowercase_with_uppercase_all_list(lst):\n    return re.sub(r'\\b[a-z]\\b', lambda m: m.group().upper(), lst)\ndef replace_uppercase_with_lowercase_all_list(lst):\n    return re.sub(r'\\b[A-Z]\\b', lambda m: m.group().lower(), lst)\ndef replace_letters_with_numbers(s):\n    return r"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            c = my_list[i]\n            j = i\n            while j >= gap and c < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = c\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            curr = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > curr:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = curr\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    count = 0\n    while count < len(my_list):\n        #print(my_list)\n        for i in range(len(my_list)-1):\n            if my_list[i] > my_list[i+1]:\n                my_list[i], my_list[i+1] = my_list[i+1], my_list[i]\n        count += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort(nlist):\n        def msort(nlist,n):\n            if n==0:\n                return\n            gap=n//2\n            while gap>0:\n                for i in range(gap,n):\n                    while nlist[i]<nlist[i-gap]:\n                        mylist[i],mylist[i-gap]=mylist[i-gap],mylist[i]\n                        i=i-gap\n                gap=gap//2\n        n=len(nlist)\n        mylist=nlist[:]\n        msort(mylist,n)\n    shell_sort(mylist)\n    return mylist\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    sub_list = n//2\n    while sub_list >= 1:\n        for i in range(sub_list):\n            j = i + sub_list\n            while j < n:\n                k = j - sub_list\n                temp = my_list[j]\n                while k >= 0 and my_list[k] > temp:\n                    my_list[k + sub_list] = my_list[k]\n                    k -= sub_list\n                my_list[k + sub_list] = temp\n                j += 1\n        sub_list = sub_list//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j],my_list[j-gap] = my_list[j-gap],my_list[j]\n                j = j-gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    import math\n    def shell_sort(my_list):\n        '''\n        Shell sort is a comparison-based sorting algorithm that builds a gap\n        between elements of an array, compares them, and moves them into\n        place during each insertion sort step.\n        '''\n        n = len(my_list)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = my_list[i]\n                j = i\n                while j >= gap and temp < my_list[j - gap]:\n                    my_list[j] = my_list[j - gap]\n                    j -= gap\n                my_list[j] = temp\n            gap //= 2\n    shell_sort(my_list)\n    print(f'Sorted list: {my_list}')\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size//2\n    while gap > 0:\n        for i in range(gap, size):\n            for j in range(i, 0, -gap):\n                if my_list[j] < my_list[j-gap]:\n                    my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i-gap\n            while j >= 0 and my_list[j] > temp:\n                my_list[j+gap] = my_list[j]\n                j -= gap\n            my_list[j+gap] = temp\n        gap = gap // 2\n    print('shell sort :'+ str(my_list))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res_tup = (tup1 if not tup1 else tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    return tuple(res_tup)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1[0] and tup2[0])\n    \nprint(and_tuples((1,2),(3,4)))"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    #return (test_tup1[0] or test_tup2[0]), (test_tup1[1] or test_tup2[1])\n    return (test_tup1[0] or test_tup2[0]), (test_tup1[1] or test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(x and y for x, y in zip(test_tup1, test_tup2)), )\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0], test_tup1[1], test_tup1[2] or test_tup2[2]) and (test_tup1[3], test_tup1[4], test_tup1[5] or test_tup2[5])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for x, y in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(test_list)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple = result_tuple + (test_tup1[i] and test_tup2[i], )\n    return result_tuple\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup1 = (test_tup1[0], test_tup1[1])\n    new_tup2 = (test_tup2[0], test_tup2[1])\n    new_tup3 = (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n    return new_tup1, new_tup2, new_tup3\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b*b + c*b - a*c\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    # a, b, c = parameters \n    # a = x^2\n    # b = y^2\n    # c = x^2 + y^2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        a = 0.001\n    x = (c * c - b * b) / (2 * a * a)\n    y = (a * x * x) - (b * x) + c\n    z = x - b\n    x1 = (-b - sqrt(b*b - 4*a*c))/(2*a)\n    x2 = (-b + sqrt(b*b - 4*a*c))/(2*a)\n    y1 = x1 * a * x1 + c\n    y2 = x2 * a * x2 + c\n    return y1, y2, x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt\n    if a == 0:\n        return -b/c\n    else:\n        return -b/(2*a*c)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * x**2 + b * x + c\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculation for x\n    x = np.linspace(-5, 5, num=100)\n    # f(x) = ax^2 + bx + c\n    y = a*x**2 + b*x + c\n    # calculating derivative of f(x)\n    dy = 2*a*x\n    # Finding roots\n    roots = np.roots([a, b, c])\n    for i in roots:\n        if np.imag(i) == 0:\n            if i>0:\n                # find the point of tangent\n                for j in y[y == np.round(i)]:\n                    if j == np.round(i):\n                        tangent = j\n                        break\n                break\n    return x, y, dy, roots, tangent\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(\"{}\".format(a**2 + 2*a*c))\n    \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2\n    \n    \nif __name__ == '__main__':\n    assert parabola_directrix(1, 4, -2) == (2.0, -2.0)\n    assert parabola_directrix(1, 4, -2.1) == (2.0, -2.0)\n    assert parabola_directrix(0, 10, 0) == (0.0, 0.0)\n    assert parabola_directrix(0, 10, -5) == (0.0, 0.0)\n    assert parabola_directrix(1, 4, -3) == (2.0, -3.0)\n    assert parabola_directrix(1, 4, -3.1) == (2.0, -3.0)\n    \n    \n    \n    \n    "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x**2 <= a**2:\n        x += 1\n    while x**2 <= b**2:\n        x += 1\n    while y**2 <= a**2:\n        y += 1\n    while y**2 <= b**2:\n        y += 1\n    while x <= a**2:\n        x += 1\n    while x <= b**2:\n        x += 1\n    while y <= a**2:\n        y += 1\n    while y <= b**2:\n        y += 1\n    while x >= a**2:\n        x -= 1\n    while x >= b**2:\n        x -= 1\n    while y >= a**2:\n        y -= 1\n    while y >= b**2:\n        y -= 1\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (((b*b)-(4*a*c))**0.5)/2/a\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return True if set(list1) & set(list2) else False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # if len(list1) == 0 or len(list2) == 0:\n    #     return False\n    # else:\n    #     for x in list1:\n    #         for y in list2:\n    #             if x == y:\n    #                 return True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1) & set(list2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common = True\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(set(list2))) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common = True\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    l1 = list1\n    l2 = list2\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    \n    if l1 == l2:\n        return True\n    else:\n        return False\n    \ndef common_element_with_key(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns True if they have at least one common key.\n    '''\n    \n    l1 = dict1\n    l2 = dict2\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    \n    if l1 == l2:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    \n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i] == list2[j]:\n                    return True\n                else:\n                    return False\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1).intersection(set(list2)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Checking for possible errors\n    if (base1 > height) or (base2 > height):\n        return None\n    \n    #Solution\n    if (base1 == 0) or (base2 == 0):\n        return height\n    \n    if height > base1 and height > base2:\n        return median_trapezium(base1,base2, height)\n    elif height < base1 and height < base2:\n        return median_trapezium(base1,base2, height)\n    else:\n        return height\n        \nprint(\"\\nMEDIAN TRAPIZIUM\")\nheight = float(input(\"Enter a height: \"))\nbase1 = float(input(\"Enter base 1: \"))\nbase2 = float(input(\"Enter base 2: \"))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1 + base2 + height / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    h1=base1\n    h2=base2\n    h3=height\n    h4=h3-h2\n    h5=h1+h4\n    print('The median length of the trapezium is {}'.format((h1+h2)/2))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    assert (height >= 0), \"The height can't be less than zero.\"\n    assert (height <= 4), \"The height can't be greater than four.\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    return (base1 + base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_width = (base1 + base2) / 2\n    median_height = (base1 + height) / 2\n    median = math.sqrt(median_width**2 + median_height**2)\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if(base1 == base2 and base1 == height):\n        return height\n    elif(base1 == base2 and base1!= height):\n        return height\n    elif(base1!= base2 and base1 == height):\n        return height\n    elif(base1!= base2 and base1!= height and height!= 0):\n        print(\"Median is {0}\".format((base1+base2)/2))\n        return (base1+base2)/2\n    elif(base1!= base2 and base1!= height and height == 0):\n        print(\"Median is 0\")\n        return 0\n    elif(base1!= base2 and base1!= height and height!= 0 and height!= height):\n        return 0\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end) // 2\n        if arr[mid] == number:\n            return True\n        elif arr[mid] > number:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number < arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number <= arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if(number > arr[0]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for elem in arr:\n        if elem > number:\n            count += 1\n    if count == 0:\n        print(\"False\")\n    else:\n        print(count)\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for item in arr:\n        if item > number:\n            count += 1\n    return count\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr > number\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r\"(a)+b\")\n    #pattern = re.compile(r\"a(b)+\")\n    pattern = re.compile(r\"a(b|$)+\")\n    #pattern = re.compile(r\"a(?:b|$)+\")\n    print(pattern.findall(text))\n    #print(pattern.search(text))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match('^a+b+.*', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.search(r\"ab+\", text)\n    if s:\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    ans = re.search(r\"ab+\", text)\n    return ans.group()\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"a.+b\")\n    print(pattern.findall(text))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab'\n    string = 'abcba'\n    if re.search(pattern, string):\n        print(re.search(pattern, string).group())\n    else:\n        print('Not found')\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern=re.compile('^[ab]')\n    match=pattern.search(text)\n    if match:\n        print('Found a match')\n    else:\n        print('No match')\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.search(r\"ab+\", text)\n    if matches:\n        return True\n    return False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Code here\n    n = n//10\n    if n==0 :\n        return n\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n=abs(n)\n    s=str(n)\n    s=s[-1]\n    s=int(s)\n    return s\ndef sum_of_Digits(a,b):\n    '''\n    Write a python function to find the sum of digits of two given numbers.\n    '''\n    s=a+b\n    return s\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    s=1\n    while n>0:\n        s=s*n\n        n=n-1\n    return s\ndef reverse(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    i=len(s)-1\n    s=s[:i]\n    return s\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    s=reverse(s)\n    if s==s[::-1]:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2,n//2+1):\n        if n%i==0:\n            return False\n    return True\ndef palindrome_Primes_Prime_Numbers(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)):\n            if is_prime(i):\n                L.append(i)\n    return L\ndef next_Prime(n):\n    '''\n    Write a python function to find the next prime number after a given number.\n    '''\n    while True:\n        n=n+1\n        if is_prime(n):\n            return n\ndef next_Prime_Less_than_N(n):\n    '''\n    Write a python function to find the next prime number after a given number.\n    '''\n    while True:\n        n=n+1\n        if is_prime(n):\n            return n\ndef next_Prime_Less_than_N_Plus_1(n):\n    '''\n    Write a python function to find the next prime number after a given number.\n    '''\n    while True:\n        n=n+1\n        if is_prime(n):\n            return n\ndef is_palindrome_Prime_Prime_Numbers(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i):\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i) and i<=2:\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two_Plus_1(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i) and i>2:\n            L.append(i)\n    return L\ndef reverse_Prime_Prime_Numbers(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i):\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two_Plus_1(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i) and i>2:\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two_Plus_1_Plus_1(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i) and i>2 and i<=3:\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two_Plus_1_Plus_1_Plus_1(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i) and i>2 and i<=3 and i>1:\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two_Plus_1_Plus_1_Plus_1_Plus_1(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i) and i>2 and i<=3 and i>1 and i<=2:\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two_Plus_1_Plus_1_Plus_1_Plus_1_Plus_1(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i) and i>2 and i<=3 and i>1 and i<=2 and i>1:\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two_Plus_1_Plus_1_Plus_1_Plus_1_Plus_1_Plus_1(p,q):\n    '''\n    Write a python function to find all palindrome prime numbers between p,q.\n    '''\n    p,q=int(p),int(q)\n    L=[]\n    for i in range(p,q+1):\n        if is_palindrome(str(i)) and is_prime(i) and i>2 and i<=3 and i>1 and i<=2 and i>1 and i<=2 and i>1:\n            L.append(i)\n    return L\ndef is_palindrome_Prime_Prime_Numbers_Least_Two_Plus_1_Plus_1_Plus_1_Plus_1_Plus_1_Plus_1_Plus_1(p,q):\n    '''\n    Writ"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n    \ndef last_Digit_2(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10 if n > 0 else 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[-1]\ndef last_Digit_Index(n):\n    '''\n    Write a python function to find the index of the last digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]\ndef first_Digit_Index(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_One(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_One(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef first_Digit_Index_Two(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Two(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Three(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Three(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef last_Digit_Index_Four(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Four(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef first_Digit_Index_Five(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Five(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef last_Digit_Index_Six(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Six(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef first_Digit_Index_Seven(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Seven(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Eight(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Eight(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Nine(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Nine(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Ten(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Ten(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Eleven(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Eleven(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Twelve(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Twelve(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Thirteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Thirteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Fourteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Fourteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Fifteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Fifteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Sixteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Sixteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Seventeen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Seventeen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Eighteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Eighteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Nineteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef last_Digit_Index_Nineteen(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return len(str(n)) - 1\ndef first_Digit_Index_Twenty(n):\n    '''\n    Write a python function to find the index of the first digit of a given number.\n    '''\n    return 0\ndef las"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n % 10)\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) == int:\n        num = n\n    else :\n        num = int(n)\n    return num%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    number = n % 10\n    return number\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    new_list=[]\n    for i in list1:\n        if i<0:\n            new_list.append(i*-1)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if(list1[i] < 0):\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for item in list1:\n        if item < 0:\n            neg_list.append(item)\n    print(f'The list of negative numbers is {neg_list}')\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l=[]\n    for i in list1:\n        if i<0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    n = 0\n    for i in list1:\n        if i < 0:\n            n = n + 1\n    print(n)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(-i)\n    return neg_list\nprint(neg_nos([1,-3,4,-5,6]))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if (i % 2 == 0):\n            str1 = str1[0:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return str1\n    else:\n        if str1[0] in ['1', '8', '+']:\n            return str1\n        else:\n            return str1[1:len(str1)]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #string = 'hello world'\n    # Output: 'el ol wrld'\n    #if len(str1)<=1:\n    #    return str1\n    #odds = 'odd'\n    #new_str = ''\n    #for i in range(0,len(str1)):\n    #    if str1[i] not in odds:\n    #        new_str = new_str + str1[i]\n    #    else:\n    #        continue\n    #return new_str\n    \n    #Using list\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = []\n    #     for i in range(0,len(str1)):\n    #         if str1[i] not in odds:\n    #             new_str.append(str1[i])\n    #         else:\n    #             continue\n    # return \"\".join(new_str)\n    \n    #Using List Comprehension\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = [i for i in str1 if i not in odds]\n    #     return \"\".join(new_str)\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = filter(lambda x:x not in odds,str1)\n    #     return \"\".join(list(new_str))\n    \n    #Using split\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = str1.split(odds)[0]\n    #     return new_str\n    \n    #Using replace\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = str1.replace(odds,\"\")\n    #     return new_str\n    \n    #Using list\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using list comprehension\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = [i for i in str1 if i not in odds]\n    #     return \"\".join(new_str)\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using replace\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = str1.replace(odds,\"\")\n    #     return new_str\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using map\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(map(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using map\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(map(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using map\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(map(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using map\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(map(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using map\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(map(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using map\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(map(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using filter\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(filter(lambda x:x not in odds,str1))\n    #     return \"\".join(new_str)\n    \n    #Using map\n    # if len(str1)<=1:\n    #     return str1\n    # else:\n    #     odds = 'odd'\n    #     new_str = list(map(lambda x:x not in odds,str1))\n    #     return \"\".join(ne"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = 'aabcd'\n    print(str1[::2])\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #print(str1)\n    str1 = str1[::2]\n    #print(str1)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = str1[0:len(str1) - 1]\n    return new_string\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # lst = list(str1)\n    # for index in range(0, len(lst), 2):\n    #     lst[index] = ''\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char =='':\n    #         lst.append(' ')\n    #     elif char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # return \"\".join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    \ndef remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # lst = list(str1)\n    # for index in range(0, len(lst), 2):\n    #     lst[index] = ''\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char =='':\n    #         lst.append(' ')\n    #     elif char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # return \"\".join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    \ndef remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # lst = list(str1)\n    # for index in range(0, len(lst), 2):\n    #     lst[index] = ''\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char =='':\n    #         lst.append(' ')\n    #     elif char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # return \"\".join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    \ndef remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # lst = list(str1)\n    # for index in range(0, len(lst), 2):\n    #     lst[index] = ''\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char =='':\n    #         lst.append(' ')\n    #     elif char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # return \"\".join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    \ndef remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # lst = list(str1)\n    # for index in range(0, len(lst), 2):\n    #     lst[index] = ''\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char =='':\n    #         lst.append(' ')\n    #     elif char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # return \"\".join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    \ndef remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # lst = list(str1)\n    # for index in range(0, len(lst), 2):\n    #     lst[index] = ''\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char =='':\n    #         lst.append(' ')\n    #     elif char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # return \"\".join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n    \n    \ndef remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # lst = list(str1)\n    # for index in range(0, len(lst), 2):\n    #     lst[index] = ''\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char =='':\n    #         lst.append(' ')\n    #     elif char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # lst = []\n    # for char in str1:\n    #     if char in 'abcdefghijklmnopqrstuvwxyz':\n    #         lst.append(char)\n    # return ''.join(lst)\n    \n    # return \"\".join([char for index, char in enumerate(str1) if inde"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x not in '0123456789', str1))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isalpha():\n            result += char\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(0,len(str1)):\n        if ord(str1[i])%2!= 0:\n            str1 = str1.replace(str1[i],\"\")\n    return str1\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    return len([tuple_a for tuple_a in test_list if tuple_a[::-1] in test_list])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    print(count_bidirectional(tuple_list))\n    return 3\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                result += 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        for j in range(len(i)):\n            if i[j] == i[-j-1]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    list1 = []\n    for item in test_list:\n        list1.append(tuple(item))\n    count = 0\n    for item in list1:\n        if item[::-1] in list1:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    list_len = len(test_list)\n    if list_len <= 1:\n        return 0\n    sum = 0\n    for i in range(list_len - 1):\n        if test_list[i][1] == test_list[i + 1][0]:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    pairs = {}\n    for i in test_list:\n        if i in pairs:\n            count += pairs[i]\n            pairs[i] += 1\n        else:\n            pairs[i] = 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        raise TypeError('List must have more than one element')\n    total_pairs = 0\n    # Loop through each list and count the number of pairs\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # If the number of elements in the two lists are different, they are not bidirectional\n            if len(test_list[i])!= len(test_list[j]):\n                total_pairs = total_pairs + 1\n    return total_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n    \nmultiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # print(sum(L))\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(sum(map(int,L))))\n    \ndef add_two_numbers_recur(a, b):\n    '''\n    Write a recursive function to add two numbers.\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L[0]) + str(L[1]) + str(L[2]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in range(len(L)):\n        L[i] = str(L[i])\n    return ''.join(L)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # your code here\n    regex_adverb = r'\\w+-\\w+'\n    adverb_list = re.findall(regex_adverb, text)\n    adverb_pos_list = []\n    for i in range(len(adverb_list)):\n        adverb_pos = re.search(r'\\d+', adverb_list[i])\n        adverb_pos = adverb_pos.group()\n        adverb_pos_list.append(adverb_pos)\n    print(adverb_pos_list)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = {\"of\", \"by\", \"in\", \"on\", \"for\", \"and\", \"to\"}\n    pos_adverbs = []\n    for i in range(len(text)):\n        if text[i] in adverbs:\n            pos_adverbs.append(i)\n    return pos_adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs_list = [\"as\", \"because\", \"from\", \"however\", \"for\", \"if\", \"in\", \"just\", \"me\", \"moreover\", \"most\", \"near\", \"on\", \"perhaps\", \"please\", \"rather\", \"regardless\", \"so\", \"though\", \"unless\", \"until\", \"when\"]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text_split = re.split('\\.|\\!|\\?|\\n', text)\n    adverb_positions = {}\n    for i in range(len(text_split)):\n        if '!' in text_split[i]:\n            adverb_positions[text_split[i].strip()[1:]] = i+1\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    r = re.compile(r\"([A-Za-z]{1}[A-Za-z]*)([\\-|\\.])([A-Za-z]{1})\")\n    m = r.search(text)\n    if m:\n        return m.group(1), m.group(2), m.group(3)\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    string = text.split(\" \")\n    regex = \"RB\"\n    positions = []\n    for i in range(0, len(string)):\n        if re.search(regex, string[i]):\n            positions.append(i)\n    return positions\n    # return the first adverb and it's positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    adverb = \"ADV\"\n    #Finds all adverb in a given sentence\n    pattern = r\"\\b(?<!\" + adverb + r\")[\\w]+\"\n    res = re.findall(pattern, text)\n    #Sorts the found adverb in increasing order based on the adverb's length\n    res = sorted(res, key=len)\n    return res\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #initializing lists\n    adverb_list = []\n    start_list = []\n    #text to list\n    words_in_text = text.split()\n    for index,word in enumerate(words_in_text):\n        if word == 'too':\n            adverb_list.append(word)\n    #loop to check for each word if it is a adverb and add its position to a list\n    for word_index,word in enumerate(words_in_text):\n        if word in adverb_list:\n            start_list.append(word_index)\n    print(\"{} adverb positions:\".format(len(adverb_list)), start_list)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    def find_first_adverb(text):\n        '''\n        Find the first adverb in a given sentence and return its index and pos tag.\n        '''\n        find_adverb = re.findall(r'[\\w ]*[\\'s|\\'d|\\'ll|\\'re|\\'ve|\\'m|\\'am|\\',]+[\\'s|\\'d|\\'ll|\\'re|\\'ve|\\'m|\\'am|,]*', text)\n        # First adverb's index and pos tag\n        return find_adverb[0], find_adverb[0].split(' ')[0]\n    \n    # Generate a list of the first adverb and its index\n    adverb_list = []\n    for i in text.split():\n        if i in ['is', 'are', 'was', 'were', 'am', 'are', 'being', 'be', 'be', 'did', 'does', 'did', 'have', 'has', 'had', 'have', 'has', 'have', 'have', 'have']:\n            # Generate a list of the first adverb and its index\n            adverb_list.append(i)\n        if i in ['does', 'did', 'have', 'has', 'had', 'has', 'have']:\n            # Generate a list of the first adverb and its index\n            adverb_list.append('is')\n        if i in ['be', 'has', 'has', 'have', 'have']:\n            # Generate a list of the first adverb and its index\n            adverb_list.append('are')\n    # Generate a list of the first adverb and its index\n    # ADVERBS WITH POS TAGS\n    adverb_list_with_pos_tag = []\n    for i in range(len(adverb_list)):\n        if i % 2 == 0:\n            adverb_list_with_pos_tag.append(adverb_list[i])\n        else:\n            adverb_list_with_pos_tag.append(adverb_list[i])\n            adverb_list_with_pos_tag.append(adverb_list[i].split(' ')[0])\n    \n    return adverb_list_with_pos_tag\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.split()\n    \n    for i in range(len(text)):\n        if text[i][-1] == 'r' or text[i][-1] == 'R':\n            for j in range(i+1, len(text)):\n                if text[j][-1] == 'r' or text[j][-1] == 'R':\n                    print(text[i], text[j])\n                    return text[i], text[j]\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # This is a very simple solution. We calculate the height and width of a cube, then we multiply those values\n    # by 6 to find the surface area.\n    return 6 * (l * l)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    a = l**2 * math.sqrt(3) / 2\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return(6*l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6*(l**2))\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (2 * l * l) + 6 * l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l**2\n    return 6 * a\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # return the length of the array and divide by the number of positive numbers\n    return len(nums), float(len(nums)) / (len(nums) + 1)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    i = 0\n    count = 0\n    while i < len(nums):\n        if nums[i] > 0:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    cnt=0\n    for i in nums:\n        if i>0:\n            cnt+=1\n    return cnt/(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count+=1\n    return count/len(nums)\n    \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for x in nums:\n        if x > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # return (nums.count(0) / len(nums)) * 100\n    nums = list(nums)\n    return sum(x > 0 for x in nums) / len(nums) * 100\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    negatives = 0\n    for i in nums:\n        if i > 0:\n            positives += 1\n        elif i < 0:\n            negatives += 1\n    return positives/(positives+negatives)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total_pos = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            total_pos += 1\n    return total_pos/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -9999\n    for i in list1:\n        if i < largest:\n            largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = 0\n    for i in range(len(list1)):\n        if list1[i] < 0 and largest_neg < list1[i]:\n            largest_neg = list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    a = max(list1)\n    return a\n    \ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    b = max(list1)\n    if b > 0:\n        return b\n    else:\n        return False\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] > max_num:\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list=[]\n    for x in range(0,len(list1)):\n        if list1[x]<0:\n            neg_list.append(list1[x])\n    print(max(neg_list))\n        \n    \n    \ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    pos_list=[]\n    for x in range(0,len(list1)):\n        if list1[x]>0:\n            pos_list.append(list1[x])\n    print(max(pos_list))\n        \n        \ndef largest(list1):\n    '''\n    Write a python function to find the largest number from the given list.\n    '''\n    print(max(list1))\n        \n        \ndef smallest(list1):\n    '''\n    Write a python function to find the smallest number from the given list.\n    '''\n    print(min(list1))\n        \n        \ndef sum_of_list(list1):\n    '''\n    Write a python function to find the sum of all numbers from the given list.\n    '''\n    sum=0\n    for x in range(0,len(list1)):\n        sum+=list1[x]\n    print(sum)\n        \n        \ndef product(list1):\n    '''\n    Write a python function to find the product of all numbers from the given list.\n    '''\n    prod=1\n    for x in range(0,len(list1)):\n        prod*=list1[x]\n    print(prod)\n        \n        \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the elements in the given list.\n    '''\n    rev_list=[]\n    for x in range(len(list1)-1,-1,-1):\n        rev_list.append(list1[x])\n    print(rev_list)\n        \n        \ndef even_list(list1):\n    '''\n    Write a python function to check whether all the elements of the given list are even or not.\n    '''\n    even=True\n    for x in range(0,len(list1)):\n        if list1[x]%2!=0:\n            even=False\n    if even==True:\n        print(\"Even\")\n    else:\n        print(\"Not Even\")\n        \n        \ndef odd_list(list1):\n    '''\n    Write a python function to check whether all the elements of the given list are odd or not.\n    '''\n    odd=True\n    for x in range(0,len(list1)):\n        if list1[x]%2==0:\n            odd=False\n    if odd==True:\n        print(\"Odd\")\n    else:\n        print(\"Not Odd\")\n        \n        \ndef divisible(list1):\n    '''\n    Write a python function to check whether all the elements of the given list are divisible by 5 or not.\n    '''\n    div=True\n    for x in range(0,len(list1)):\n        if list1[x]%5!=0:\n            div=False\n    if div==True:\n        print(\"Divisible\")\n    else:\n        print(\"Not Divisible\")\n        \n        \ndef divisible_by_five(list1):\n    '''\n    Write a python function to check whether all the elements of the given list are divisible by 5 or not.\n    '''\n    div=True\n    for x in range(0,len(list1)):\n        if list1[x]%5!=0:\n            div=False\n    if div==True:\n        print(\"Divisible\")\n    else:\n        print(\"Not Divisible\")\n        \n        \ndef divisible_by_three(list1):\n    '''\n    Write a python function to check whether all the elements of the given list are divisible by 3 or not.\n    '''\n    div=True\n    for x in range(0,len(list1)):\n        if list1[x]%3!=0:\n            div=False\n    if div==True:\n        print(\"Divisible\")\n    else:\n        print(\"Not Divisible\")\n        \n        \ndef divisible_by_five_and_three(list1):\n    '''\n    Write a python function to check whether all the elements of the given list are divisible by 5 or not.\n    '''\n    div=True\n    for x in range(0,len(list1)):\n        if list1[x]%5!=0 or list1[x]%3!=0:\n            div=False\n    if div==True:\n        print(\"Divisible\")\n    else:\n        print(\"Not Divisible\")\n        \n        \ndef palindrome(string1):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    string1=string1.lower()\n    for x in range(0,len(string1)):\n        if string1[x]!=string1[len(string1)-x-1]:\n            return False\n    print(\"Palindrome\")\n    \n        \ndef palindrome_alternative(string1):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    string1=string1.lower()\n    for x in range(0,len(string1)):\n        if string1[x]!=string1[len(string1)-x-1]:\n            return False\n    return True\n        \n        \ndef palindrome_alternative1(string1):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    string1=string1.lower()\n    for x in range(0,len(string1)):\n        if string1[x]!=string1[len(string1)-x-1]:\n            return False\n    return True\n        \n        \ndef product_list(list1):\n    '''\n    Write a python function to find product of the list elements.\n    '''\n    prod=1\n    for x in range(0,len(list1)):\n        prod*=list1[x]\n    print(prod)\n        \n        \ndef length_list(list1):\n    '''\n    Write a python function to find the length of a list.\n    '''\n    print(len(list1))\n        \n        \ndef sum_elements(list1):\n    '''\n    Write a python function to find the sum of all the elements in the list.\n    '''\n    sum=0\n    for x in range(0,len(list1)):\n        sum+=list1[x]\n    print(sum)\n        \n        \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list elements.\n    '''\n    rev_list=[]\n    for x in range(len(list1)-1,-1,-1):\n        rev_list.append(list1[x])\n    print(rev_list)\n        \n        \ndef minimum(list1):\n    '''\n    Write a python function to find the minimum element from the given list.\n    '''\n    min_value=list1[0]\n    for x in range(0,len(list1)):\n        if list1[x]<min_value:\n            min_value=list1[x]\n    print(min_value)\n        \n        \ndef maximum(list1):\n    '''\n    Write a python function to find the maximum element from the given list.\n    '''\n    max_value=list1[0]\n    for x in range(0,len(list1)):\n        if list1[x]>max_value:\n            max_value=list1[x]\n    print(max_value)\n        \n        \ndef sum_all_elements(list1):\n    '''\n    Write a python function to find the sum of all the elements in the given list.\n    '''\n    sum=0\n    for x in range(0,len(list1)):\n        sum+=list1[x]\n    print(sum)\n        \n        \ndef sum_of_first_n_elements(list1,n):\n    '''\n    Write a python function to find th"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = 0\n    for i in list1:\n        if i < 0:\n            if i > largest_num:\n                largest_num = i\n    return largest_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    i=0\n    for i in range(0,len(list1)-1):\n        if(list1[i]>0):\n            break\n    for i in range(i,len(list1)):\n        if(list1[i]<0):\n            return list1[i]\n        \ndef compare_list(list1,list2):\n    '''\n    Write a python function to compare given two lists and return the count of elements which are common in the two lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        if(list1[i] in list2):\n            c+=1\n    return c\ndef merge_list(list1,list2):\n    '''\n    Write a python function to merge the two given lists.\n    '''\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in list1: \n        if i < 0 and i > largest: \n            largest = i \n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list = test_list[:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    a=[]\n    for i in test_list:\n        if len(i)>=K:\n            a.append(i[0:K])\n        else:\n            a.append(i)\n    return a\n    \n    \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(tup[:K] for tup in test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(t[k] for t, k in zip(test_list, range(K)))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    if len(test_list) < K:\n        return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list[i] = tuple([test_list[i][0]] + test_list[i][1:])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            del test_list[i][K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n        test_list[i] = tuple(test_list[i])\n    return test_list\n    \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(tuple(test_list[i][:K]))\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if test_list == None:\n        return None\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0],test_tup1[1]*test_tup2[1],test_tup1[2]*test_tup2[2])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_list1 = []\n    index_list2 = []\n    index_list3 = []\n    index_list4 = []\n    index_list5 = []\n    index_list6 = []\n    index_list7 = []\n    index_list8 = []\n    index_list9 = []\n    for i in range(len(test_tup1)):\n        index_list1.append(i)\n    for i in range(len(test_tup2)):\n        index_list2.append(i)\n    for i in range(len(test_tup1)*len(test_tup2)):\n        index_list3.append(i)\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            index_list4.append(i*len(test_tup2))\n    for i in range(len(test_tup1)*len(test_tup2)):\n        index_list5.append(i)\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            for k in range(len(test_tup1)):\n                index_list6.append(i*len(test_tup1) + k)\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            for k in range(len(test_tup1)):\n                for l in range(len(test_tup2)):\n                    index_list7.append(i*len(test_tup1)*len(test_tup2) + k*len(test_tup1) + l)\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            for k in range(len(test_tup1)):\n                for l in range(len(test_tup2)):\n                    for m in range(len(test_tup1)):\n                        index_list8.append(i*len(test_tup1) + k*len(test_tup2) + l*len(test_tup1) + m)\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            for k in range(len(test_tup1)):\n                for l in range(len(test_tup2)):\n                    for m in range(len(test_tup1)):\n                        for n in range(len(test_tup2)):\n                            index_list9.append(i*len(test_tup1)*len(test_tup2)*len(test_tup1) + k*len(test_tup1)*len(test_tup2) + l*len(test_tup1)*len(test_tup2) + m*len(test_tup1) + n)\n    result_list = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            result_list.append(test_tup1[i]*test_tup2[j])\n    for i in range(len(test_tup1)*len(test_tup2)):\n        for j in range(len(test_tup1)):\n            for k in range(len(test_tup2)):\n                result_list.append(test_tup1[j]*test_tup2[k])\n    for i in range(len(test_tup1)*len(test_tup2)):\n        for j in range(len(test_tup1)):\n            for k in range(len(test_tup2)):\n                for l in range(len(test_tup1)):\n                    result_list.append(test_tup1[j]*test_tup2[k]*test_tup1[l])\n    for i in range(len(test_tup1)*len(test_tup2)*len(test_tup1)):\n        for j in range(len(test_tup1)):\n            for k in range(len(test_tup2)):\n                for l in range(len(test_tup1)):\n                    for m in range(len(test_tup2)):\n                        for n in range(len(test_tup1)):\n                            result_list.append(test_tup1[j]*test_tup2[k]*test_tup1[l]*test_tup2[m]*test_tup1[n])\n    for i in range(len(test_tup1)*len(test_tup2)*len(test_tup1)*len(test_tup2)):\n        for j in range(len(test_tup1)):\n            for k in range(len(test_tup2)):\n                for l in range(len(test_tup1)):\n                    for m in range(len(test_tup2)):\n                        for n in range(len(test_tup1)):\n                            for o in range(len(test_tup2)):\n                                result_list.append(test_tup1[j]*test_tup2[k]*test_tup1[l]*test_tup2[m]*test_tup1[n]*test_tup2[o])\n    for i in range(len(test_tup1)*len(test_tup2)*len(test_tup1)*len(test_tup2)*len(test_tup1)):\n        for j in range(len(test_tup1)):\n            for k in range(len(test_tup2)):\n                for l in range(len(test_tup1)):\n                    for m in range(len(test_tup2)):\n                        for n in range(len(test_tup1)):\n                            for o in range(len(test_tup2)):\n                                for p in range(len(test_tup1)):\n                                    for q in range(len(test_tup2)):\n                                        result_list.append(test_tup1[j]*test_tup2[k]*test_tup1[l]*test_tup2[m]*test_tup1[n]*test_tup2[o]*test_tup1[p]*test_tup2[q])\n    for i in range(len(test_tup1)*len(test_tup2)*len(test_tup1)*len(test_tup2)*len(test_tup1)*len(test_tup2)):\n        for j in range(len(test_tup1)):\n            for k in range(len(test_tup2)):\n                for l in range(len(test_tup1)):\n                    for m in range(len(test_tup2)):\n                        for n in range(len(test_tup1)):\n                            for o in range(len(test_tup2)):\n                                for p in range(len(test_tup1)):\n                                    for q in range(len(test_tup2)):\n                                        for r in range(len(test_tup1)):\n                                            for s in range(len(test_tup2)):\n                                                result_list.append(test_tup1[j]*test_tup2[k]*test_tup1[l]*test_tup2[m]*test_tup1[n]*test_tup2[o]*test_tup1[p]*test_tup2[q]*test_tup1[r]*test_tup2[s])\n    for i in range(len(test_tup1)*len(test_tup2)*len(test_tup1)*len(test_tup2)*len(test_tup1)*len(test_tup2)):\n        for j in range(len(test_tup1)):\n            for k in range(len(test_tup2))"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1])\n    \ndef get_average(grades):\n    '''\n    Write a function to get the average value of grades.\n    '''\n    return (sum(grades)/len(grades))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (tuple(tup1[i] * tup2[i] for i in range(len(tup1))))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i]*test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Two tuples should have same number of elements')\n    test_tup1_final = []\n    test_tup2_final = []\n    for i in range(len(test_tup1)):\n        test_tup1_final.append(test_tup1[i] * test_tup2[i])\n        test_tup2_final.append(test_tup2[i] * test_tup1[i])\n    return test_tup1_final, test_tup2_final\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = (0,0,0)\n    \n    for i in range(len(test_tup1)):\n        result = (result[0] + test_tup1[i] * test_tup2[i], result[1] + test_tup1[i] * test_tup2[i+1], result[2] + test_tup1[i] * test_tup2[i+2])\n    \n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    out_tup1 = tuple()\n    out_tup2 = tuple()\n    for i in range(len(test_tup1)):\n        out_tup1 += (test_tup1[i] * test_tup2[i],)\n        out_tup2 += (test_tup2[i] * test_tup1[i],)\n    return out_tup1, out_tup2\n    \ndef main():\n    '''\n    Write a function to demonstrate the usage of index_multiplication function.\n    '''\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (6,7,8,9,10)\n    print('Multiplication of two tuples:', index_multiplication(test_tup1, test_tup2))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) + Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst)\n    print(counts)\n    for i in tup:\n        if i not in counts:\n            counts[i] = 0\n    print(counts)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) + Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = set(lst) \n    cnt = Counter(lst) \n    for x in tup: \n        if x in lst: \n            cnt[x] += 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ_dict = {}\n    for element in lst:\n        occ_dict[element] = 0\n    for element in tup:\n        occ_dict[element] += 1\n    return occ_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    for x in tup:\n        count = lst.count(x)\n        print(\"The count of %s is %d\" %(x, count)) \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if isinstance(tup, tuple): \n        return tuple(map(lambda x: tup.count(x), lst)) \n    else: \n        print(\"Invalid Input\") \n        return 0\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst)\n    return counts[tup]\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for item in tup:\n        if item in lst:\n            return True\n    return False\ndef count_Occurrence1(tup,lst):\n    return sum([item in lst for item in tup])\ndef count_Occurrence2(tup,lst):\n    return sum([item in tup for item in lst])\ndef count_Occurrence3(tup,lst):\n    return sum([item in tup for item in lst])\ndef count_Occurrence4(tup,lst):\n    return sum([item in lst for item in tup])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    ans = []\n    for ele in lst:\n        if ele in tup:\n            ans.append(tup.count(ele))\n    return ans\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube_element(n):\n        return n*n*n\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums_list = []\n    for i in nums:\n        cube_nums_list.append(i**3)\n    return cube_nums_list\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for x in nums:\n        cube_nums.append(x**3)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return(list(map(lambda x: x**3, nums)))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_nums = []\n    for num in nums:\n        new_nums.append(num ** 3)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num**3 for num in nums]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # for num in nums:\n    #     return num**3\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        nums.append(i*i*i)\n    return nums\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 0\n    if n == 1:\n        return 1\n    else:\n        for i in range(1,n+1):\n            a += i\n        return a\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum = sum + digit\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    print(f'The sum of perrin numbers between 1 and {n} is: {sum}')\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return lambda x: x+n\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    print(f\"Sum of perrin numbers is : {sum}\")\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l:\n        return \"\".join(l[:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = l.split(\",\")\n    for i in range(len(l)):\n        l[i] = l[i].strip()\n    for i in range(len(l)):\n        l[i] = l[i].split('\"')\n        l[i] = l[i][1]\n    l = l[:l.index(\"\")]\n    l = l[:l.index(\"\")]\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # String has been given:\n    if str:\n        str = str.split(' ')\n        count = 0\n        temp = []\n        for i in range(len(str)):\n            count += len(str[i])\n            if count == l:\n                temp.append(str[i])\n        return temp\n    else:\n        return []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) >= l:\n        return str[0:l]\n    else:\n        return str[0:len(str)]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = 0\n    output = []\n    for s in str:\n        if count == l:\n            break\n        count += 1\n        output.append(s)\n    return output\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # str = input('Enter string : ')\n    # l = input('Enter list of strings : ')\n    l = l.split(' ')\n    l = list(map(str.strip, l))\n    print(l)\n    print(len(l))\n    while len(l) > 0:\n        for i in range(len(l)):\n            if len(l[i]) > l[i]:\n                l.pop(i)\n                break\n    l =''.join(l)\n    print(l)\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) >= l:\n        return str[:l]\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [l[i:i+l] for i in range(0, len(l), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    if len(str) > l:\n        for i in range(0, l):\n            string_list.append(str[i])\n    else:\n        for i in range(0, len(str)):\n            string_list.append(str[i])\n    return string_list\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == None or len(l) == 0:\n        return []\n    if l[0] == None:\n        return []\n    if len(l) == 1:\n        return [l[0]]\n    if l[1] == None:\n        return []\n    if len(l) == 2:\n        return l\n    if len(l) == 3:\n        return l\n    if len(l) >= 4:\n        if l[2] == None:\n            l.pop()\n        if l[3] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[2] == None and l[3] == None:\n            l.pop()\n        if len(l) == 1:\n            return l\n        if l[1] == None and l[3] == None:\n            l.pop()\n        if l[1] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[1] == None and l[2] == None:\n            l.pop()\n        if len(l) == 1:\n            return l\n        if l[0] == None and l[3] == None:\n            l.pop()\n        if len(l) == 1:\n            return l\n        if l[0] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n    if len(l) >= 5:\n        if l[2] == None:\n            l.pop()\n        if l[3] == None:\n            l.pop()\n        if l[4] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[2] == None and l[3] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[2] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[2] == None and l[3] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[2] == None and l[3] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[2] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[2] == None and l[3] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n    if len(l) >= 6:\n        if l[3] == None:\n            l.pop()\n        if l[4] == None:\n            l.pop()\n        if l[5] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[3] == None and l[4] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[3] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[3] == None and l[4] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[3] == None and l[4] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[3] == None and l[4] == None and l[5] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n    if len(l) >= 7:\n        if l[4] == None:\n            l.pop()\n        if l[5] == None:\n            l.pop()\n        if l[6] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[4] == None and l[5] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[4] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[4] == None and l[5] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[4] == None and l[5] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[4] == None and l[5] == None and l[6] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n    if len(l) >= 8:\n        if l[5] == None:\n            l.pop()\n        if l[6] == None:\n            l.pop()\n        if l[7] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[5] == None and l[6] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[5] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[5] == None and l[6] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[5] == None and l[6] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[5] == None and l[6] == None and l[7] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n    if len(l) >= 9:\n        if l[6] == None:\n            l.pop()\n        if l[7] == None:\n            l.pop()\n        if l[8] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[6] == None and l[7] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[6] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[6] == None and l[7] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[6] == None and l[7] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[6] == None and l[7] == None and l[8] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n    if len(l) >= 10:\n        if l[7] == None:\n            l.pop()\n        if l[8] == None:\n            l.pop()\n        if l[9] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[7] == None and l[8] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[7] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[7] == None and l[8] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[7] == None and l[8] == None:\n            l.pop()\n        if len(l) == 3:\n            return l\n        if l[7] == None and l[8] == None and l[9] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n    if len(l) >= 11:\n        if l[8] == None:\n            l.pop()\n        if l[9] == None:\n            l.pop()\n        if l[10] == None:\n            l.pop()\n        if len(l) == 2:\n            return l\n        if l[8] == None and l[9] == None:\n            l.pop()\n        if len(l) == 3"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # solution 1\n    # return text1.replace(' ', '')\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    regex = r\"\\s+\"\n    return re.sub(regex, \"\", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # split the string and iterate over the list\n    return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.strip()\n    return text1\ndef remove_citations(text1):\n    '''\n    Write a function to remove all citations from the given string.\n    '''\n    text1=text1.replace(\"[Citations]\",\"\")\n    return text1\ndef remove_uppercases(text1):\n    '''\n    Write a function to remove all uppercases from the given string.\n    '''\n    text1=text1.lower()\n    return text1\ndef remove_words_with_no_chars_at_beginning(text1):\n    '''\n    Write a function to remove all words that have at least one character from the given string.\n    '''\n    text1=re.sub(r\"\\b[a-zA-Z]*\\b\", \"\", text1)\n    return text1\ndef remove_urls(text1):\n    '''\n    Write a function to remove all URLs from the given string.\n    '''\n    text1=re.sub(r\"https?://[^ ]*\", \"\", text1)\n    return text1\ndef remove_emails(text1):\n    '''\n    Write a function to remove all emails from the given string.\n    '''\n    text1=re.sub(r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\", \"\", text1)\n    return text1\ndef remove_symbols(text1):\n    '''\n    Write a function to remove all symbols from the given string.\n    '''\n    text1=re.sub(r\"[^A-Za-z]\", \"\", text1)\n    return text1\ndef remove_lowercase_words(text1):\n    '''\n    Write a function to remove all lowercase words from the given string.\n    '''\n    text1=re.sub(r\"[a-z]+\", \"\", text1)\n    return text1\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    text1=re.sub(r\"[^0-9]\", \"\", text1)\n    return text1\ndef remove_short_sentences(text1):\n    '''\n    Write a function to remove short sentences.\n    '''\n    sentences=text1.split(\".\")\n    short_sentences=[]\n    for sentence in sentences:\n        if len(sentence)<30:\n            short_sentences.append(sentence)\n    new_text=\". \".join(short_sentences)\n    return new_text\ndef remove_stopwords(text1,stopwords):\n    '''\n    Write a function to remove stopwords from the given string.\n    '''\n    text1=text1.split(\" \")\n    new_text=[]\n    for word in text1:\n        if word not in stopwords:\n            new_text.append(word)\n    return \" \".join(new_text)\ndef count_words(text1,stopwords):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word not in stopwords:\n            count+=1\n    return count\ndef count_sentences(text1):\n    '''\n    Write a function to count the number of sentences in a given string.\n    '''\n    sentences=text1.split(\".\")\n    count=0\n    for sentence in sentences:\n        if sentence!=\"\":\n            count+=1\n    return count\ndef count_syllables(text1):\n    '''\n    Write a function to count the number of syllables in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        count+=syllable_count(word)\n    return count\ndef syllable_count(word):\n    \"\"\"Count number of syllables in a word.\n    >>> syllable_count('cars')\n    2\n    >>> syllable_count('car')\n    2\n    >>> syllable_count('stressed')\n    3\n    >>> syllable_count('very')\n    3\n    >>> syllable_count('whitespace')\n    4\n    \"\"\"\n    word = word.lower()\n    if word.endswith(\"e\"):\n        return 1\n    if word.endswith(\"ed\"):\n        return 2\n    if word.endswith(\"es\"):\n        return 2\n    if word.endswith(\"s\"):\n        return 1\n    if word.endswith(\"able\"):\n        return 1\n    if word.endswith(\"ful\"):\n        return 1\n    if word.endswith(\"ness\"):\n        return 1\n    if word.endswith(\"ant\"):\n        return 1\n    if word.endswith(\"ment\"):\n        return 1\n    if word.endswith(\"mention\"):\n        return 1\n    if word.endswith(\"ment\"):\n        return 1\n    if word.endswith(\"ate\"):\n        return 1\n    if word.endswith(\"ment\"):\n        return 1\n    if word.endswith(\"ment\"):\n        return 1\n    return 1\ndef count_words_with_uppercases(text1):\n    '''\n    Write a function to count the number of words with uppercases in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word.isupper():\n            count+=1\n    return count\ndef count_words_with_digits(text1):\n    '''\n    Write a function to count the number of words with digits in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word.isdigit():\n            count+=1\n    return count\ndef count_words_with_numbers(text1):\n    '''\n    Write a function to count the number of words with numbers in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word.isdigit():\n            count+=1\n    return count\ndef count_words_with_alphanumeric(text1):\n    '''\n    Write a function to count the number of words with alphanumeric in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word.isalnum():\n            count+=1\n    return count\ndef count_words_with_alphabetic(text1):\n    '''\n    Write a function to count the number of words with alphabetic in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word.isalpha():\n            count+=1\n    return count\ndef count_words_with_alphanumeric_and_alphabetic(text1):\n    '''\n    Write a function to count the number of words with alphanumeric and alphabetic in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word.isalnum():\n            count+=1\n        if word.isalpha():\n            count+=1\n    return count\ndef count_words_with_alphabetic_and_numeric(text1):\n    '''\n    Write a function to count the number of words with alphabetic and numbers in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word.isalpha():\n            count+=1\n        if word.isdigit():\n            count+=1\n    return count\ndef count_words_with_numeric_and_alphabetic(text1):\n    '''\n    Write a function to count the number of words with numeric and alphabetic in a given string.\n    '''\n    text1=text1.split(\" \")\n    count=0\n    for word in text1:\n        if word.isdigit():\n            coun"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    print(\"\\nThe original string with all the whitespaces is: \")\n    print(text1)\n    text1=text1.replace(' ','')\n    print(\"\\nThe string without whitespaces is: \")\n    print(text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.replace(' ','')\n    return text1\ndef remove_dot(text1):\n    '''\n    Write a function to remove all '.' from the given string.\n    '''\n    text1=text1.replace('.','')\n    return text1\ndef remove_comma(text1):\n    '''\n    Write a function to remove all ',' from the given string.\n    '''\n    text1=text1.replace(',',' ')\n    return text1\ndef check_if_true(text1):\n    '''\n    Write a function to check if the given string is true or false.\n    '''\n    if re.search('^True$',text1):\n        return True\n    else:\n        return False\ndef capitalize_sentence(sentence):\n    '''\n    Write a function to capitalize the sentence.\n    '''\n    sentence=sentence.title()\n    return sentence\ndef convert_to_lower_case(text1):\n    '''\n    Write a function to convert the sentence to lower case.\n    '''\n    return text1.lower()\ndef convert_to_uppercase(text1):\n    '''\n    Write a function to convert the sentence to uppercase.\n    '''\n    return text1.upper()\ndef remove_invalid_characters(text1):\n    '''\n    Write a function to remove all invalid characters.\n    '''\n    for i in '\\n':\n        text1=text1.replace(i,'')\n    return text1\ndef reverse_sentence(sentence):\n    '''\n    Write a function to reverse the sentence.\n    '''\n    sentence=sentence[::-1]\n    return sentence\ndef number_to_string(number):\n    '''\n    Write a function to convert the number to string.\n    '''\n    text=str(number)\n    return text\ndef sort_string(text1):\n    '''\n    Write a function to sort the string.\n    '''\n    text1=sorted(text1)\n    return text1\ndef string_to_number(text1):\n    '''\n    Write a function to convert string to number.\n    '''\n    text1=int(text1)\n    return text1\ndef check_all_words_are_capitalized(text):\n    '''\n    Write a function to check if all words are capitalized.\n    '''\n    text=text.title()\n    return text\ndef first_word_to_capitalized(text1):\n    '''\n    Write a function to capitalize the first word in the sentence.\n    '''\n    text1=text1.title()\n    return text1\ndef check_if_sentence_starts_with_a_word(sentence):\n    '''\n    Write a function to check if the sentence starts with a word.\n    '''\n    if sentence.startswith('Hi'):\n        return True\n    else:\n        return False\ndef count_all_words(sentence):\n    '''\n    Write a function to count all the words in the sentence.\n    '''\n    text1=sentence.split()\n    number_of_words=len(text1)\n    return number_of_words\ndef find_all_substrings(text):\n    '''\n    Write a function to find all the substrings in the given string.\n    '''\n    text1=text.split()\n    substring_list=[]\n    for i in range(len(text1)):\n        substring=''.join(text1[i:i+1])\n        substring_list.append(substring)\n    return substring_list\ndef count_all_substrings(text):\n    '''\n    Write a function to count all the substrings in the given string.\n    '''\n    text1=text.split()\n    number_of_substrings=len(text1)\n    return number_of_substrings\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all the spaces in the given string.\n    '''\n    text1=text.replace(' ','')\n    return text1\ndef remove_all_spaces_in_a_list(text1):\n    '''\n    Write a function to remove all the spaces in the given list.\n    '''\n    text1=[i.replace(' ','') for i in text1]\n    return text1\ndef remove_spaces_from_the_start_of_each_word(text):\n    '''\n    Write a function to remove spaces from the start of each word in a sentence.\n    '''\n    text1=text.split()\n    text2=' '.join(text1)\n    return text2\ndef capitalize_first_word(text1):\n    '''\n    Write a function to capitalize the first word of each sentence.\n    '''\n    text1=text1.split()\n    text1[0]=text1[0].title()\n    return''.join(text1)\ndef capitalize_first_word_in_each_sentence(text):\n    '''\n    Write a function to capitalize the first word of each sentence.\n    '''\n    text1=text.split()\n    text1[0]=text1[0].title()\n    return''.join(text1)\ndef count_letters(text):\n    '''\n    Write a function to count the total number of letters in the given sentence.\n    '''\n    text1=text.replace(' ','')\n    text1=text1.lower()\n    text1=text1.replace('.','')\n    text1=text1.replace('-',' ')\n    text1=text1.replace(',','')\n    text1=text1.replace('(','')\n    text1=text1.replace(')','')\n    text1=text1.replace(';','')\n    text1=text1.replace(':','')\n    text1=text1.replace('!','')\n    text1=text1.replace('?','')\n    text1=text1.replace('%','')\n    text1=text1.replace('#','')\n    number_of_letters=len(text1)\n    return number_of_letters\ndef find_all_lower_cases(text):\n    '''\n    Write a function to find all the lower cases in the given string.\n    '''\n    text1=text.lower()\n    return text1\ndef find_all_uppercase(text):\n    '''\n    Write a function to find all the uppercases in the given string.\n    '''\n    text1=text.upper()\n    return text1\ndef count_words(text):\n    '''\n    Write a function to count the total number of words in the given sentence.\n    '''\n    text1=text.split()\n    return len(text1)\ndef find_all_digits(text):\n    '''\n    Write a function to find all the digits in the given string.\n    '''\n    text1=text.replace(' ','')\n    text1=text1.replace('.','')\n    text1=text1.replace('-',' ')\n    text1=text1.replace(',',' ')\n    text1=text1.replace('(','')\n    text1=text1.replace(')','')\n    text1=text1.replace(';','')\n    text1=text1.replace(':','')\n    text1=text1.replace('!','')\n    text1=text1.replace('?','')\n    text1=text1.replace('%','')\n    text1=text1.replace('#','')\n    number_of_digits=len(text1)\n    return number_of_digits\ndef find_all_punctuations(text):\n    '''\n    Write a function to find all the punctuations in the given sentence.\n    '''\n    text1=text.replace(' ','')\n    text1=text1.replace('.','')\n    text1=text1.replace('-',' ')\n    text1=text1.replace(',',' ')\n    text1=text1.replace('(','')\n    text1=text1.replace(')','')\n    text1=text1.replace(';','')\n    text1=text1.replace(':'"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0\n    if actual_cost-sale_amount>0:\n        loss_amount=actual_cost-sale_amount\n    else:\n        loss_amount=0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # amount given is positive\n    if actual_cost<=0 or sale_amount<0:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=actual_cost-sale_amount\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #print(actual_cost,sale_amount)\n    if actual_cost < sale_amount: \n        return 0\n    elif actual_cost == sale_amount: \n        return 0\n    elif actual_cost > sale_amount: \n        return actual_cost-sale_amount\n    \n    #return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0\n    loss_amount=sale_amount-actual_cost\n    return loss_amount\n    # remove this line once you implement your function\n    raise NotImplementedError()\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0 if actual_cost == sale_amount else (sale_amount-actual_cost)\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        loss = actual_cost - sale_amount\n        return loss\n    except:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        amount_after_loss = actual_cost * (1-sale_amount/actual_cost)\n        amount_after_loss = round(amount_after_loss,2)\n        return amount_after_loss\n    except:\n        print(\"Please input a valid amount.\")\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            if i%2 == 0 :\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            s += i \n            if i * i!= n : \n                s += n // i \n    return s \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumoffactors=0\n    for i in range(1,n) :\n        if (n%i==0) :\n            if (i%2==0) :\n                sumoffactors=sumoffactors+i\n    return sumoffactors\nn=int(input(\"Enter a number:\"))\nprint(\"The sum of even factors of\",n,\"is:\",sumofFactors(n))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumofFactors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sumofFactors+=i\n    return sumofFactors\ndef nextprime(n) : \n    '''\n    Write a python function to find the next prime number after the given number.\n    '''\n    n=n+1\n    i=2\n    while(True):\n        if((n%i==0)and(i!=n)):\n            n=n+1\n        elif((n%i==0)and(i==n)):\n            n=n+1\n        else:\n            break\n    return n\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if(n % i == 0):\n            res = res + i\n    return res \n    # your code here\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # your code here\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            sum += i\n    return sum\ndef sumoffactors(n):\n    # your code here\n    sum = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            sum+=i\n    return sum\ndef sumoffactors2(n):\n    #your code here\n    sum = 0\n    if n ==0 :\n        return 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    return sum\ndef sumoffactors3(n):\n    #your code here\n    return n*(n+1)/2\ndef sumoffactors4(n):\n    #your code here\n    if n == 0:\n        return 0\n    i = 1\n    while n>i:\n        n = n-i\n        i += 1\n    return n\ndef sumoffactors5(n):\n    #your code here\n    return n*(n+1)//2\ndef sumoffactors6(n):\n    #your code here\n    return n*(n+1)//2\ndef sumoffactors7(n):\n    #your code here\n    if n==0:\n        return 0\n    return n*(n+1)//2\ndef sumoffactors8(n):\n    #your code here\n    if n==0:\n        return 0\n    return n*(n+1)//2\ndef sumoffactors9(n):\n    #your code here\n    return (n*(n+1))//2\ndef sumoffactors10(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))//2\ndef sumoffactors11(n):\n    #your code here\n    return ((n*(n+1))//2)+1\ndef sumoffactors12(n):\n    #your code here\n    return (n*(n+1))//2\ndef sumoffactors13(n):\n    #your code here\n    return n*(n+1)\ndef sumoffactors14(n):\n    #your code here\n    if n == 0:\n        return 0\n    return n*(n+1)\ndef sumoffactors15(n):\n    #your code here\n    return (n*(n+1))+1\ndef sumoffactors16(n):\n    #your code here\n    if n == 0:\n        return 0\n    return n*(n+1)\ndef sumoffactors17(n):\n    #your code here\n    return (n*(n+1))+1\ndef sumoffactors18(n):\n    #your code here\n    return (n*(n+1))+1\ndef sumoffactors19(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors20(n):\n    #your code here\n    return (n*(n+1))+1\ndef sumoffactors21(n):\n    #your code here\n    return ((n*(n+1))//2)+1\ndef sumoffactors22(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))//2\ndef sumoffactors23(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))//2\ndef sumoffactors24(n):\n    #your code here\n    return ((n*(n+1))//2)+1\ndef sumoffactors25(n):\n    #your code here\n    if n == 0:\n        return 0\n    return ((n*(n+1))//2)+1\ndef sumoffactors26(n):\n    #your code here\n    return (n*(n+1))+1\ndef sumoffactors27(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors28(n):\n    #your code here\n    return (n*(n+1))+1\ndef sumoffactors29(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors30(n):\n    #your code here\n    return (n*(n+1))+1\ndef sumoffactors31(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors32(n):\n    #your code here\n    return (n*(n+1))+1\ndef sumoffactors33(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors34(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors35(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors36(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors37(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors38(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors39(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors40(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors41(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors42(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors43(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors44(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors45(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors46(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors47(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors48(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors49(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors50(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors51(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors52(n):\n    #your code here\n    if n == 0:\n        return 0\n    return (n*(n+1))+1\ndef sumoffactors53(n):\n    #your code here\n    if n == 0:\n        return 0\n    return "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0 :\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    # base case is when n is 1\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumofFactors = 0\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                sumofFactors += i\n            else : \n                sumofFactors += i + n / i\n    return sumofFactors\n    \ndef PowerList(n):\n    '''\n    Write a python function to find the power of the list of numbers.\n    '''\n    powerList = []\n    for i in range(n):\n        powerList.append(i)\n    return powerList\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    '''\n    for n in range(2,11):\n        print(n,math.factorial(n))\n    '''\n    return sum(math.factorial(n) for n in range(2,int(n**0.5) + 1) if n % 2 == 0)"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.findall(r\"\\bz\\w+\\b\",text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\bz\\w*\\b',text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'z', text))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'z',text)\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog\"))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'z',text)\n    \ndef text_match_word_boundaries(text):\n    '''\n    Write a function that matches a word containing 'z'\n    '''\n    return re.findall(r'z',text)\n    \ndef text_match_sentences(text):\n    '''\n    Write a function that matches a sentence containing 'z'.\n    '''\n    return re.findall(r'z',text)\n    \ndef text_match_sentences_boundaries(text):\n    '''\n    Write a function that matches a sentence containing 'z'\n    '''\n    return re.findall(r'z',text)\n    \ndef text_match_sentence_endings(text):\n    '''\n    Write a function that matches a sentence ending with 'z'.\n    '''\n    return re.findall(r'z$',text)\n    \ndef text_match_sentence_endings_boundaries(text):\n    '''\n    Write a function that matches a sentence ending with 'z'\n    '''\n    return re.findall(r'z$',text)\n    \ndef text_match_sentence_startings(text):\n    '''\n    Write a function that matches a sentence starting with 'z'.\n    '''\n    return re.findall(r'^z',text)\n    \ndef text_match_sentence_startings_boundaries(text):\n    '''\n    Write a function that matches a sentence starting with 'z'\n    '''\n    return re.findall(r'^z',text)\n    \ndef text_match_sentence_middle(text):\n    '''\n    Write a function that matches a sentence containing 'z'\n    '''\n    return re.findall(r'z',text)\n    \ndef text_match_sentence_middle_boundaries(text):\n    '''\n    Write a function that matches a sentence containing 'z'\n    '''\n    return re.findall(r'z',text)\n    \ndef text_match_camel_case(text):\n    '''\n    Write a function that matches a camelCase word.\n    '''\n    return re.findall(r'[A-Z]?[a-z]+',text)\n    \ndef text_match_camel_case_boundaries(text):\n    '''\n    Write a function that matches a camelCase word.\n    '''\n    return re.findall(r'[A-Z]?[a-z]+',text)\n    \ndef text_match_pascal_case(text):\n    '''\n    Write a function that matches a PascalCase word.\n    '''\n    return re.findall(r'[A-Z][a-z]+',text)\n    \ndef text_match_pascal_case_boundaries(text):\n    '''\n    Write a function that matches a PascalCase word.\n    '''\n    return re.findall(r'[A-Z][a-z]+',text)\n    \ndef text_match_snake_case(text):\n    '''\n    Write a function that matches a snake_case word.\n    '''\n    return re.findall(r'_[a-z]+',text)\n    \ndef text_match_snake_case_boundaries(text):\n    '''\n    Write a function that matches a snake_case word.\n    '''\n    return re.findall(r'_[a-z]+',text)\n    \ndef text_match_snake_camel_case(text):\n    '''\n    Write a function that matches a snake_camel_case word.\n    '''\n    return re.findall(r'[_a-z]+',text)\n    \ndef text_match_snake_camel_case_boundaries(text):\n    '''\n    Write a function that matches a snake_camel_case word.\n    '''\n    return re.findall(r'[_a-z]+',text)\n    \ndef text_match_lower_case(text):\n    '''\n    Write a function that matches a lowerCase word.\n    '''\n    return re.findall(r'[a-z]+',text)\n    \ndef text_match_lower_case_boundaries(text):\n    '''\n    Write a function that matches a lowerCase word.\n    '''\n    return re.findall(r'[a-z]+',text)\n    \ndef text_match_upper_case(text):\n    '''\n    Write a function that matches an uppercase word.\n    '''\n    return re.findall(r'[A-Z]+',text)\n    \ndef text_match_upper_case_boundaries(text):\n    '''\n    Write a function that matches an uppercase word.\n    '''\n    return re.findall(r'[A-Z]+',text)\n    \ndef text_match_lparen_char(text):\n    '''\n    Write a function that matches a left parenthesis character.\n    '''\n    return re.findall(r'\\(',text)\n    \ndef text_match_lparen_char_boundaries(text):\n    '''\n    Write a function that matches a left parenthesis character.\n    '''\n    return re.findall(r'\\(',text)\n    \ndef text_match_rparen_char(text):\n    '''\n    Write a function that matches a right parenthesis character.\n    '''\n    return re.findall(r'\\)',text)\n    \ndef text_match_rparen_char_boundaries(text):\n    '''\n    Write a function that matches a right parenthesis character.\n    '''\n    return re.findall(r'\\)',text)\n    \ndef text_match_number(text):\n    '''\n    Write a function that matches a number.\n    '''\n    return re.findall(r'\\d+',text)\n    \ndef text_match_number_boundaries(text):\n    '''\n    Write a function that matches a number.\n    '''\n    return re.findall(r'\\d+',text)\n    \ndef text_match_digit(text):\n    '''\n    Write a function that matches a digit.\n    '''\n    return re.findall(r'\\d+',text)\n    \ndef text_match_digit_boundaries(text):\n    '''\n    Write a function that matches a digit.\n    '''\n    return re.findall(r'\\d+',text)\n    \ndef text_match_char(text):\n    '''\n    Write a function that matches a character.\n    '''\n    return re.findall(r'[a-z]+',text)\n    \ndef text_match_char_boundaries(text):\n    '''\n    Write a function that matches a character.\n    '''\n    return re.findall(r'[a-z]+',text)\n    \ndef text_match_word(text):\n    '''\n    Write a function that matches a word.\n    '''\n    return re.findall(r'[a-z]+',text)\n    \ndef text_match_word_boundaries(text):\n    '''\n    Write a function that matches a word.\n    '''\n    return re.findall(r'[a-z]+',text)\n    \ndef text_match_punctuation(text):\n    '''\n    Write a function that matches a punctuation mark.\n    '''\n    return re.findall(r'[-()/*?.,;:\\'\\\"]',text)\n    \ndef text_match_punctuation_boundaries(text):\n    '''\n    Write a function that matches a punctuation mark.\n    '''\n    return re.findall(r'[-()/*?.,;:\\'\\\"]',text)\n    \ndef text_match_word_punctuation(text):\n    '''\n    Write a function that matches a word with punctuation.\n    '''\n    return re.findall(r'[a-z]+[-()/*?.,;:\\'\\\"]',text)\n    \ndef text_match_word_punctuation_boundaries(text):\n    '''\n    Write a function that matches a word with punctuation.\n    '''\n    return re.findall(r'[a-z]+[-()/"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(\"z\",text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def match_word_z(word):\n        return re.search('z', word)\n    return match_word_z\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile('z')\n    if regex.search(text):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall('z',text)\n    if(len(match) > 0):\n        print(\"matches found\")\n    else:\n        print(\"matches not found\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print('31')\n    elif monthnum2 == 2:\n        print('28 or 29')\n    elif monthnum2 == 3:\n        print('31')\n    elif monthnum2 == 4:\n        print('30')\n    elif monthnum2 == 5:\n        print('31')\n    elif monthnum2 == 6:\n        print('30')\n    elif monthnum2 == 7:\n        print('31')\n    elif monthnum2 == 8:\n        print('31')\n    elif monthnum2 == 9:\n        print('30')\n    elif monthnum2 == 10:\n        print('31')\n    elif monthnum2 == 11:\n        print('30')\n    elif monthnum2 == 12:\n        print('31')\n    elif monthnum2 == 0:\n        print('00')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        month_numb = 31\n    elif monthnum2 == 2:\n        month_numb = 28\n    elif monthnum2 == 3:\n        month_numb = 31\n    elif monthnum2 == 4:\n        month_numb = 30\n    elif monthnum2 == 5:\n        month_numb = 31\n    elif monthnum2 == 6:\n        month_numb = 30\n    elif monthnum2 == 7:\n        month_numb = 31\n    elif monthnum2 == 8:\n        month_numb = 31\n    elif monthnum2 == 9:\n        month_numb = 30\n    elif monthnum2 == 10:\n        month_numb = 31\n    elif monthnum2 == 11:\n        month_numb = 30\n    elif monthnum2 == 12:\n        month_numb = 31\n    else:\n        month_numb = -1\n    return month_numb\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0:\n        return False\n    elif monthnum2 % 2!= 0:\n        return True\n    else:\n        print(\"Invalid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    if monthnum2 in range(1,3) or monthnum2 in range(5,7) or monthnum2 in range(8,10) or monthnum2 in range(12,14):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print('no')\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print('no')\n    else:\n        print('yes')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%4==0:\n        if monthnum2%100!=0 or monthnum2%400==0:\n            if monthnum2%400==0:\n                return '29'\n            elif monthnum2%100==0:\n                return '28'\n            else:\n                return '30'\n        else:\n            return '31'\n    else:\n        return '28'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2<0 or monthnum2>12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 4 == 0:\n        return 31\n    else:\n        return 30\n    \ndef check_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef day_of_week(daynum):\n    '''\n    Write a function to check whether the given day number is the weekday number or not.\n    '''\n    if daynum == 0 or daynum == 1 or daynum == 2 or daynum == 3 or daynum == 4 or daynum == 5 or daynum == 6 or daynum == 7:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #stringlist.reverse()\n    for x in stringlist:\n        y = stringlist.pop()\n        stringlist.append(y)\n    return stringlist\n    \n    \ndef reverse_string_partition(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    for x in range(len(stringlist)):\n        y = stringlist.pop()\n        stringlist.insert(p,y)\n    return stringlist\n    \ndef reverse_string_partition2(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    for x in range(len(stringlist)):\n        y = stringlist.pop(x)\n        stringlist.insert(p,y)\n    return stringlist\n    \ndef reverse_string_partition3(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist[p:] = stringlist[p:][::-1]\n    return stringlist\n    \n    \ndef reverse_string_partition4(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist[p:] = stringlist[p:][::-1]\n    return stringlist\n    \ndef reverse_string_partition5(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist[:p] = stringlist[:p][::-1]\n    stringlist[p:] = stringlist[p:][::-1]\n    return stringlist\n    \n    \ndef reverse_string_partition6(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p:][::-1] + stringlist[p:]\n    return stringlist\n    \ndef reverse_string_partition7(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1] + stringlist[p]\n    return stringlist\n    \ndef reverse_string_partition8(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1] + stringlist[p]\n    return stringlist\n    \ndef reverse_string_partition9(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist[p:] = stringlist[p:][::-1]\n    stringlist[:p] = stringlist[:p][::-1]\n    return stringlist\n    \ndef reverse_string_partition10(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist[p:] = stringlist[p:][::-1]\n    stringlist[:p] = stringlist[:p][::-1]\n    return stringlist\n    \ndef reverse_string_partition11(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = list(stringlist)\n    stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1] + stringlist[p]\n    return stringlist\n    \ndef reverse_string_partition12(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1] + stringlist[p]\n    return stringlist\n    \ndef reverse_string_partition13(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[p:] + stringlist[:p][::-1]\n    return stringlist\n    \ndef reverse_string_partition14(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1]\n    return stringlist\n    \ndef reverse_string_partition15(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = list(stringlist)\n    stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1] + stringlist[p]\n    return stringlist\n    \ndef reverse_string_partition16(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1]\n    return stringlist\n    \ndef reverse_string_partition17(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = list(stringlist)\n    stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1]\n    return stringlist\n    \ndef reverse_string_partition18(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[p:] + stringlist[:p][::-1]\n    return stringlist\n    \ndef reverse_string_partition19(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1]\n    return stringlist\n    \ndef reverse_string_partition20(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1]\n    return stringlist\n    \ndef reverse_string_partition21(stringlist, p):\n    '''\n    Write a function to reverse each string in a given list of string values\n    after a given index value p.\n    '''\n    #stringlist.reverse()\n    stringlist = stringlist[:p] + stringlist[p + 1:][::-1]\n    return stringlist\n    \ndef reverse_string_par"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # STRETCH: implement without creating a new list\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for i in stringlist:\n        reverse_list.append(i[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(reversed(stringlist))\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    reversedlist = []\n    \n    for x in stringlist:\n        reversedlist.append(x[::-1])\n    return reversedlist\n    \ndef reverse_string_list_rec(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    This should be done recursively.\n    '''\n    \n    def reverse(stringlist):\n        if len(stringlist) == 1:\n            return stringlist\n        else:\n            return reverse(stringlist[1:]) + [stringlist[0]]\n    \n    return reverse(stringlist)\n    \ndef reverse_string_list_iter(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    This should be done iteratively.\n    '''\n    \n    stringlist = stringlist[::-1]\n    return stringlist\n    \ndef revstring(s):\n    '''\n    Write a function that takes a string and returns the string with its first letter in reverse.\n    '''\n    \n    return s[::-1]\n    \ndef revstring_iter(s):\n    '''\n    Write a function that takes a string and returns the string with its first letter in reverse.\n    This should be done iteratively.\n    '''\n    \n    stringlist = []\n    for x in range(len(s)):\n        stringlist.append(s[x])\n    stringlist = stringlist[::-1]\n    return ''.join(stringlist)\n    \ndef join_sentence(sentence):\n    '''\n    Write a function that takes in a sentence and returns a reversed version of the sentence.\n    The function should also return the sentence in the original order.\n    '''\n    \n    return''.join(sentence[::-1])\n    \ndef join_sentence_iter(sentence):\n    '''\n    Write a function that takes in a sentence and returns a reversed version of the sentence.\n    The function should also return the sentence in the original order.\n    '''\n    \n    sentence =''.join(sentence[::-1])\n    sentencelist = sentence.split(' ')\n    return sentencelist\n    \ndef concatenate_string_lists(list1, list2):\n    '''\n    Write a function that takes in two lists of strings, and returns a new list with the strings in the first list\n    concatenated with the strings in the second list.\n    '''\n    \n    return list1 + list2\n    \ndef concatenate_string_lists_iter(list1, list2):\n    '''\n    Write a function that takes in two lists of strings, and returns a new list with the strings in the first list\n    concatenated with the strings in the second list.\n    This should be done iteratively.\n    '''\n    \n    concatstringlist = []\n    for x in range(len(list1)):\n        concatstringlist.append(list1[x] + list2[x])\n    return concatstringlist\n    \ndef remove_values_from_list(thelist, val):\n    '''\n    Write a function that takes a list and a value, and returns a new list that contains the items in the list\n    that are not equal to the value.\n    '''\n    \n    return [x for x in thelist if x!= val]\n    \ndef remove_values_from_list_iter(thelist, val):\n    '''\n    Write a function that takes a list and a value, and returns a new list that contains the items in the list\n    that are not equal to the value.\n    This should be done iteratively.\n    '''\n    \n    newlist = []\n    for x in range(len(thelist)):\n        if thelist[x]!= val:\n            newlist.append(thelist[x])\n    return newlist\n    \ndef has_duplicates_list(list1):\n    '''\n    Write a function that takes in a list and returns a boolean value representing whether or not there are any\n    values in the list that are equal to one another.\n    '''\n    \n    return len(list1)!= len(set(list1))\n    \ndef has_duplicates_list_iter(list1):\n    '''\n    Write a function that takes in a list and returns a boolean value representing whether or not there are any\n    values in the list that are equal to one another.\n    This should be done iteratively.\n    '''\n    \n    for x in range(len(list1)):\n        for y in range(len(list1)):\n            if list1[x] == list1[y]:\n                return True\n    return False\n    \ndef merge_two_lists(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the items in both lists\n    that are not in the other list.\n    '''\n    \n    return list(set(list1) - set(list2))\n    \ndef merge_two_lists_iter(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the items in both lists\n    that are not in the other list.\n    This should be done iteratively.\n    '''\n    \n    newlist = []\n    for x in range(len(list1)):\n        if list1[x] not in list2:\n            newlist.append(list1[x])\n    for x in range(len(list2)):\n        if list2[x] not in list1:\n            newlist.append(list2[x])\n    return newlist\n    \ndef get_common_items_list(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the items that are in both\n    lists.\n    '''\n    \n    return [x for x in list1 if x in list2]\n    \ndef get_common_items_list_iter(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the items that are in both\n    lists.\n    This should be done iteratively.\n    '''\n    \n    newlist = []\n    for x in range(len(list1)):\n        if list1[x] in list2:\n            newlist.append(list1[x])\n    return newlist\n    \ndef sort_list(thelist):\n    '''\n    Write a function that takes in a list and returns a new list with the items in the list in sorted order.\n    '''\n    \n    return sorted(thelist)\n    \ndef sort_list_iter(thelist):\n    '''\n    Write a function that takes in a list and returns a new list with the items in the list in sorted order.\n    This should be done iteratively.\n    '''\n    \n    thelist.sort()\n    return thelist\n    \ndef remove_characters(string, characters):\n    '''\n    Write a function that takes in a string and a string of characters, and returns a new string\n    with the characters from the original string removed.\n    '''\n    \n    newstring = ''\n    for x in range(len(string)):\n        if string[x] not in characters:\n            newstring = newstring + string[x]\n    return newstring\n    \ndef remove_characters_iter(string, characters):\n    '''\n    Write a function that takes in a string and a string of characters, and returns a new string\n    with the characters from the original string removed.\n    This should be done iteratively.\n    '''\n    \n    for x in range(len(string)):\n        if string[x] in characters:\n            string = string[:x] + string[x+1:]\n    return string\n    \ndef remove_duplicate_items(thelist):\n    '''\n    Write a function that takes in a list and returns a new list with all of the\n    duplicate items removed.\n    '''\n    \n    newlist = []\n    for x in range(len(thelist)):\n        if thelist[x] not in newlist:\n            newlist.append(thelist[x])\n    return newlist\n    \ndef remove_duplicate_items_iter(thelist):\n    '''\n    Write a function that takes in a list and returns a new list with all of the\n    dup"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_string_list = []\n    for item in stringlist:\n        item = item[::-1]\n        reversed_string_list.append(item)\n    return reversed_string_list\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    index = 0\n    min_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            index = i\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])< len(min):\n            min = lst[i]\n    print(min)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=lst[0]\n    min_idx=0\n    for i in range(1,len(lst)):\n        if len(lst[i])<len(min):\n            min=lst[i]\n            min_idx=i\n    print('the minimum length sublist is ',min)\n    print('the minimum length sublist index is ',min_idx)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    s = set()\n    for ele in lst:\n        if ele not in s:\n            s.add(ele)\n        else:\n            s.remove(ele)\n    return len(s)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_min = lst[0]\n    for i in lst:\n        if len(i) > len(lst_min):\n            lst_min = i\n    return lst_min\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_list = []\n    min_sub_list = []\n    for i in range(len(lst)):\n        if min_list == []:\n            min_sub_list.append(lst[i])\n            min_list.append(lst[i])\n        elif lst[i] <= min_list[0]:\n            min_sub_list = []\n            min_sub_list.append(lst[i])\n            min_list = []\n            min_list.append(lst[i])\n        else:\n            min_sub_list.append(lst[i])\n    min_list = min_list + min_sub_list\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_index = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(min):\n            min = lst[i]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return False\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key=lambda x: len(x))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l*2 + b*2\ndef circle_area(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return pi*radius**2\ndef circle_perimeter(radius):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*pi*radius\ndef arc_area(radius,angle):\n    '''\n    Write a function to find the area of an arc.\n    '''\n    return pi*radius**2*angle/360\ndef arc_perimeter(radius,angle):\n    '''\n    Write a function to find the perimeter of an arc.\n    '''\n    return pi*radius*2*angle/360\ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return l**2\ndef square_perimeter(l):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*l\ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return b*h/2\ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return b+h+b\ndef hexagon_area(a,b):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 3*(a*b)/2\ndef hexagon_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a hexagon.\n    '''\n    return a*b+a*b+a*b\ndef triangle_area_compare(a,b):\n    '''\n    Write a function that returns the area of a triangle\n    if the length and width of the sides are given.\n    '''\n    return a*b/2\ndef circle_area_compare(radius):\n    '''\n    Write a function that returns the area of a circle\n    if the radius is given.\n    '''\n    return pi*radius**2\ndef rectangle_area_compare(l,b):\n    '''\n    Write a function that returns the area of a rectangle\n    if the length and width are given.\n    '''\n    return l*b\ndef circle_area_compare(radius):\n    '''\n    Write a function that returns the area of a circle\n    if the radius is given.\n    '''\n    return pi*radius**2\ndef arc_area_compare(radius,angle):\n    '''\n    Write a function that returns the area of an arc\n    if the radius and angle are given.\n    '''\n    return pi*radius**2*angle/360\ndef arc_area_compare(radius,angle):\n    '''\n    Write a function that returns the area of an arc\n    if the radius and angle are given.\n    '''\n    return pi*radius**2*angle/360\ndef square_area_compare(l):\n    '''\n    Write a function that returns the area of a square\n    if the length is given.\n    '''\n    return l**2\ndef square_perimeter_compare(l):\n    '''\n    Write a function that returns the perimeter of a square\n    if the length is given.\n    '''\n    return 4*l\ndef triangle_area_compare(b,h):\n    '''\n    Write a function that returns the area of a triangle\n    if the length and width are given.\n    '''\n    return b*h/2\ndef triangle_perimeter_compare(b,h):\n    '''\n    Write a function that returns the perimeter of a triangle\n    if the length and width are given.\n    '''\n    return b+h+b\ndef hexagon_area_compare(a,b):\n    '''\n    Write a function that returns the area of a hexagon\n    if the length and width are given.\n    '''\n    return 3*(a*b)/2\ndef hexagon_perimeter_compare(a,b):\n    '''\n    Write a function that returns the perimeter of a hexagon\n    if the length and width are given.\n    '''\n    return a*b+a*b+a*b\ndef triangle_area_area_compare(a,b):\n    '''\n    Write a function that returns the area of a triangle\n    if the area and length and width are given.\n    '''\n    return a*b/2\ndef circle_area_area_compare(radius):\n    '''\n    Write a function that returns the area of a circle\n    if the area and radius are given.\n    '''\n    return pi*radius**2\ndef rectangle_area_area_compare(l,b):\n    '''\n    Write a function that returns the area of a rectangle\n    if the length and width are given.\n    '''\n    return l*b\ndef circle_area_area_compare(radius):\n    '''\n    Write a function that returns the area of a circle\n    if the area and radius are given.\n    '''\n    return pi*radius**2\ndef arc_area_area_compare(radius,angle):\n    '''\n    Write a function that returns the area of an arc\n    if the area and radius and angle are given.\n    '''\n    return pi*radius**2*angle/360\ndef arc_area_area_compare(radius,angle):\n    '''\n    Write a function that returns the area of an arc\n    if the area and radius and angle are given.\n    '''\n    return pi*radius**2*angle/360\ndef square_area_area_compare(l):\n    '''\n    Write a function that returns the area of a square\n    if the area and length are given.\n    '''\n    return l**2\ndef square_perimeter_area_compare(l):\n    '''\n    Write a function that returns the area of a square\n    if the perimeter and length are given.\n    '''\n    return 4*l\ndef triangle_area_perimeter_compare(b,h):\n    '''\n    Write a function that returns the area of a triangle\n    if the perimeter and width are given.\n    '''\n    return b+h+b\ndef triangle_perimeter_perimeter_compare(b,h):\n    '''\n    Write a function that returns the area of a triangle\n    if the perimeter and width are given.\n    '''\n    return b+h+b\ndef hexagon_area_perimeter_compare(a,b):\n    '''\n    Write a function that returns the area of a hexagon\n    if the perimeter and width are given.\n    '''\n    return a*b+a*b+a*b\ndef hexagon_perimeter_perimeter_compare(a,b):\n    '''\n    Write a function that returns the area of a hexagon\n    if the perimeter and width are given.\n    '''\n    return a*b+a*b+a*b\ndef triangle_area_perimeter_compare(b,h):\n    '''\n    Write a function that returns the area of a triangle\n    if the perimeter and length are given.\n    '''\n    return b+h+b\ndef triangle_perimeter_perimeter_compare(b,h):\n    '''\n    Write a function that returns the area of a triangle\n    if the perimeter and length are given.\n    '''\n    return b+h+b\ndef hexagon_area_perimeter_compare(a,b):\n    '''\n    Write a function that returns the area of a hexagon\n    if the perimeter and length are given.\n    '''\n    return a*b+a*b+a*b\ndef hexagon_perimeter_perimeter_compare(a,b):\n    '''\n    Write a function that returns the area of a hexagon\n    if the perimeter and length are given.\n    '''\n    return a*b+a*b+a*b\ndef triangle_area_perimeter_compare(b,h):\n    '''\n    Write a function that returns the area of a triangle\n    if the perimeter and width are given.\n    '''\n    return b+h+b\nde"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    return area\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter=2*(l+b)\n    return perimeter\n    \ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area=b*h/2\n    return area\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter=b+h+b\n    return perimeter\n    \ndef circle_area(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area=3.14*radius*radius\n    return area\n    \ndef circle_perimeter(radius):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    perimeter=2*3.14*radius\n    return perimeter\n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area=l*l\n    return area\n    \ndef square_perimeter(l):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    perimeter=4*l\n    return perimeter\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\nprint(rectangle_area(3,4))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(\"The area of a rectangle with length {0} and breadth {1} is {2}\".format(l,b,area))\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2=''\n    for i in range(0,len(str1)):\n        if str1[i]==str1[i].lower():\n            str2+=str1[i].lower()\n        else:\n            str2+=str1[i]\n    return str2\n    \ndef remove_duplicate_digits(str1):\n    '''\n    Write a function to remove duplicate digits from a given string.\n    '''\n    str2=''\n    digits={}\n    for i in range(0,len(str1)):\n        if str1[i] not in digits:\n            digits[str1[i]]=0\n        else:\n            digits[str1[i]]+=1\n    for key in digits.keys():\n        if digits[key]==1:\n            str2+=key\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    import re\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r\"[A-Z]+\"\n    result = re.findall(pattern,str1)\n    return str1.lower()\ndef remove_numbers(str1):\n    '''\n    Write a function to remove digits and decimal point from a given string.\n    '''\n    pattern = r\"\\d+\\.?\\d+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(str(result[0]),'')\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_all_nonalpha(str1):\n    '''\n    Write a function to remove all the characters except for alpha-numeric characters.\n    '''\n    pattern = r\"^\\W*$\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'')\ndef remove_space(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    return str1.replace(\" \",\"\")\ndef remove_nbsp(str1):\n    '''\n    Write a function to remove all the spaces from a given string.\n    '''\n    pattern = r\"\\s+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'')\ndef remove_duplicate(str1):\n    '''\n    Write a function to remove duplicate characters in a given string.\n    '''\n    str1 = sorted(list(str1))\n    return str1\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove all non-ascii characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_space_and_newline(str1):\n    '''\n    Write a function to remove all the spaces and newline characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all the characters except of alphabets from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_numerics(str1):\n    '''\n    Write a function to remove all the characters except of alphabets and numerics from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_space_and_numeric(str1):\n    '''\n    Write a function to remove all the spaces and all the characters except of alphabets, numerics from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_special_lowercase(str1):\n    '''\n    Write a function to remove all the characters except of alphabets and special characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_special_uppercase(str1):\n    '''\n    Write a function to remove all the characters except of alphabets and special characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_special_lowercase_numeric(str1):\n    '''\n    Write a function to remove all the characters except of alphabets, special characters and numbers from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_special_uppercase_numeric(str1):\n    '''\n    Write a function to remove all the characters except of alphabets, special characters and numbers from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_uppercase_lowercase(str1):\n    '''\n    Write a function to remove all the characters except of alphabets and numbers from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replac"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    ans = re.sub(r'[A-Z]', '', str1)\n    return ans\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    no_upper_str = re.sub('[A-Z]', '', str1)\n    print(no_upper_str)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]\\b', \"\", str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(filter(str.islower, str1))\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lower = str1.lower()\n    return lower\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x : x[0], lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    out = []\n    for i in lst:\n        out.append(i[0])\n    return out\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = list(filter(None, lst))\n    for i in lst:\n        i.pop(0)\n        lst.remove(i)\n    return lst\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    output = []\n    for i in lst:\n        output.append(i[0])\n    return output\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0],lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if type(lst[i]) == list:\n            Extract(lst[i])\n        else:\n            lst[i] = lst[i][0]\n    return lst\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    out = []\n    for item in lst: \n        out.append(item[0]) \n    return out\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for item in lst:\n        new_list.append(item[0])\n    return new_list\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        lst[i] = lst[i][0] \n    return lst \nlst = [[1, 2], [3, 4], [5, 6], [7, 8]] \nprint(Extract(lst)) \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    res = 0\n    for i in str:\n        if i.isupper():\n            res += 1\n    return res\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    print(upper)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        result = []\n        for i in range(0, len(list1)):\n            new_list = list1[i + 1:]\n            for subset in combinations_list(new_list):\n                result.append([list1[i]] + subset)\n        return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return [list1]\n    list2 = combinations_list(list1[1:])\n    final_list = []\n    for item in list2:\n        item = list1[0:1] + item\n        final_list.append(item)\n    return final_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        if i == 0:\n            combinations.append(list1[i])\n        else:\n            for j in range(i):\n                combinations.append(list1[i]+list1[j])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            list2.append([list1[i],list1[j]])\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        current_list = []\n        for i in range(len(list1)):\n            current_list.append(list1[i])\n            for j in range(i+1, len(list1)):\n                current_list.append(list1[i] + list1[j])\n                current_list.append(list1[i] + list1[j])\n        return current_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Using a list comprehension\n    # list1 = ['a', 'b', 'c']\n    # result = [['a', 'b'], ['a', 'c'], ['b', 'c']]\n    # result = [[i, j] for i in list1 for j in list1]\n    result = [[i, j] for i in list1 for j in list1]\n    return result\n    # result = []\n    # for i in list1:\n    #     for j in list1:\n    #         result.append([i, j])\n    # return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    list_new = []\n    for i in range(len(list1)):\n        list_new_1 = list1[i+1:]\n        list_new_2 = combinations_list(list_new_1)\n        for j in list_new_2:\n            list_new.append([list1[i]] + j)\n    return list_new\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    combinations_list = []\n    for i in range(0, len(list1)):\n        sub_list = list1[i+1:]\n        sub_combinations_list = combinations_list(sub_list)\n        for j in range(0, len(sub_combinations_list)):\n            combination = list1[i]+sub_combinations_list[j]\n            combinations_list.append(combination)\n    return combinations_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    combs = []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return list1\n    list2 = []\n    list1.sort()\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            list2.append([list1[i],list1[j]])\n    return list2\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    min_product = 0\n    for i in range(len(arr)):\n        temp_product = arr[i]\n        for j in range(i+1,len(arr)):\n            temp_product *= arr[j]\n            if temp_product > max_product:\n                max_product = temp_product\n        \n            temp_product = arr[i]\n            if temp_product < min_product:\n                min_product = temp_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    curr_max = curr_min = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max * arr[i])\n        curr_min = min(arr[i], curr_min * arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_prod = arr[0]\n    max_prod_idx = 0\n    max_prod_idx_arr = [-1] * n\n    min_prod = arr[0]\n    min_prod_idx = 0\n    min_prod_idx_arr = [-1] * n\n    for i in range(1, n):\n        max_prod = max(arr[i], max_prod * arr[i])\n        if max_prod > max_prod_idx:\n            max_prod_idx = i\n            max_prod_idx_arr = max_prod_idx_arr[:i] + max_prod_idx_arr[i:] + [max_prod_idx]\n        min_prod = min(arr[i], min_prod * arr[i])\n        if min_prod < min_prod_idx:\n            min_prod_idx = i\n            min_prod_idx_arr = min_prod_idx_arr[:i] + min_prod_idx_arr[i:] + [min_prod_idx]\n        if max_prod_idx_arr[i] == max_prod_idx:\n            max_prod = max(arr[i], max_prod * arr[i])\n        elif min_prod_idx_arr[i] == min_prod_idx:\n            min_prod = min(arr[i], min_prod * arr[i])\n        if max_prod > max_prod:\n            max_prod_idx = max_prod_idx\n            max_prod_idx_arr = max_prod_idx_arr[:max_prod_idx] + max_prod_idx_arr[max_prod_idx + 1:] + [max_prod_idx]\n        if min_prod < min_prod_idx:\n            min_prod_idx = min_prod_idx\n            min_prod_idx_arr = min_prod_idx_arr[:min_prod_idx] + min_prod_idx_arr[min_prod_idx + 1:] + [min_prod_idx]\n    return max_prod_idx_arr\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        if arr[i-1] * arr[i] > arr[i-2] * arr[i]:\n            max_prod = arr[i-1] * arr[i]\n        elif arr[i-1] * arr[i] < arr[i-2] * arr[i]:\n            max_prod = arr[i-2] * arr[i]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], arr[i]*curr_max)\n        max_product = max(max_product, curr_max)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # initialize max_product, and result\n    max_product = -1\n    result = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    for i in range(1, len(arr)):\n        arr[i] = max(arr[i-1] * arr[i], arr[i])\n        if arr[i] > max_product:\n            max_product = arr[i]\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        if current_product > max_product:\n            max_product = current_product\n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict[n] == dict[n+1] and dict[n] == dict[n+2]\n    \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return n in dict.values()\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    is_not_equal = True\n    for i in dict.values():\n        if i == n:\n            is_not_equal = False\n            break\n    return is_not_equal\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == len(set(dict.values())):\n        return True\n    else:\n        return False\n        \ndef CheckBalance(dict, n):\n    '''\n    Write a function to check if the dictionary is balanced in such a way that all values are same in a dictionary.\n    '''\n    if not check_value(dict, n) or len(dict.values())!= n:\n        return False\n    else:\n        for i in dict.values():\n            if len(dict.values())!= len(set(dict.values())):\n                return False\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    flag = False\n    for i in dict:\n        if dict[i] == n:\n            flag = True\n            break\n    return flag\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    print(dict[n] == dict[n+1])\n    print(dict[n] == dict[n-1])\n    print(dict[n] == dict[n+2])\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        for key, value in dict.items():\n            if value == n:\n                return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for i in dict.keys():\n            if dict[i]!= dict[n]:\n                return False\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for val in dict.values():\n        if val!= dict[val]:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    print(f\"Original dictionary : {dict1}\")\n    for i in dict1:\n        if dict1[i] == \"\":\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Your code here\n    # Fill up the blanks to complete the function\n    dict1.pop('')\n    \n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    print(\"Original dictionary:\")\n    print(dict1)\n    list1 = []\n    list2 = []\n    for i in dict1:\n        if dict1[i]!= 'None':\n            list1.append(dict1[i])\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    print(\"Drop empty dictionary:\")\n    print(list2)"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == None:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value!= '':\n            dict2.update({key:value})\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if type(dict1)!= dict:\n        raise TypeError('Argument must be of type dict.')\n    dict1 = dict(filter(lambda item: item[1], dict1.items()))\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= \"\"}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1 == {}:\n        return None\n    else:\n        return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key in dict1.keys():\n        if dict1[key]!= \"\":\n            result[key] = dict1[key]\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for (k,v) in dict1.items() if v}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #max = 0\n    #max_num = 0\n    #for i in range(len(arr)):\n    #    for j in range(i+1,len(arr)):\n    #        temp = max_num * arr[j]\n    #        if temp > max:\n    #            max = temp\n    #            max_num = arr[i] * arr[j]\n    #return max\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr or len(arr) == 1:\n        return 0\n    \n    \n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            curr_product = 1\n            for k in range(i, j + 1):\n                curr_product = max(curr_product, arr[k] * max_product)\n            max_product = max(max_product, curr_product)\n            \n    return max_product\n    \n    \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i] * (i+1), arr[i] * (i-1), arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = 1\n            for k in range(i, j+1):\n                max_product = max_product * arr[k]\n            if result < max_product:\n                result = max_product\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #dp_table[i][j] is the max product we can get by multiplying that subsequence.\n    #dp_table[i][j] = max(dp_table[i][k] * dp_table[k + 1][j]) for 0 <= k <= i-1 and 0 <= j <= n-1\n    #or\n    #dp_table[i][j] = max(dp_table[i][j - 1] * nums[j]) for 0 <= j <= i-1\n    \n    n = len(arr)\n    #dp_table[i][j] = max(arr[i]) * arr[j]\n    dp_table = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                dp_table[i][j] = arr[j]\n            else:\n                if j == 0:\n                    dp_table[i][j] = arr[i]\n                else:\n                    dp_table[i][j] = max(arr[i], arr[j]) * dp_table[i-1][j-1]\n    return dp_table[-1][-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # consider all subsequences of a given array of length m\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] > max_product_so_far:\n                    max_product_so_far = arr[i] * arr[j] * arr[k]\n    return max_product_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        raise ValueError('Error')\n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        if arr[i] < 0:\n            return -1\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    l = len(arr)\n    if l == 0:\n        return -1\n    max_ = arr[0]\n    min_ = arr[0]\n    \n    for i in range(1, l):\n        max_ = max(max_, arr[i] * min_)\n        min_ = min(min_, arr[i])\n    return max_\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = float('-inf')\n    for i in range(len(arr)):\n        curr_prod = arr[i]\n        for j in range(i, len(arr)):\n            curr_prod *= arr[j]\n            max_prod = max(max_prod, curr_prod)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    left = right = 0\n    while left < n:\n        if arr[left] < 0:\n            left += 1\n            continue\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Approach: We can just iterate over the range of the tuple, but this also gives us the most useful example of \n    #           the purpose of using zip with generators: to create a generator of all possible combinations of elements.\n    #           The generator can be used directly as a iterator to add the elements of the pairwise sum.\n    #           \n    #           For example, if the tuple is (1,2,3), then zip(range(1,4), range(2,5)) = [(1,2), (2,3), (3,4)].\n    #           Then we can create a generator to iterate over all the pairs:\n    #           \n    #           a = list(zip(range(1,4), range(2,5)))\n    #           for i, j in a:\n    #               print i + j\n    #               \n    #           This is the same as iterating over the tuples of the pairwise sum, with the code above:\n    #           \n    #           a = []\n    #           for i in range(1,4):\n    #               for j in range(2,5):\n    #                   a.append(i + j)\n    #               \n    #           I can also use list(zip(range(1,4), range(2,5))), as well as list(zip(range(2,5), range(1,4))), \n    #           and so on.\n    \n    # Approach 2: \n    #   The algorithm for adding up all the numbers of a given tuple is as follows:\n    #   \n    #   The numbers of a tuple are in the form:\n    #       [(a,b), (c,d), (e,f),...]\n    #       \n    #   The number of a given tuple is the sum of the numbers of the tuples to its left.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its right.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its left and to its right.\n    #   \n    #   The algorithm is illustrated in the following pseudocode:\n    #   \n    #   def add_pairwise(tup):\n    #       left, right = 0, 0\n    #       a = []\n    #       for i, j in zip(tup, tup[1:]):\n    #           a.append(left + right)\n    #           left, right = i, j\n    #   \n    #   tup = (1,2,3)\n    #   add_pairwise(tup)\n    #   a = [1, 3, 6]\n    \n    # Approach 3:\n    #   The algorithm for adding up all the numbers of a given tuple is as follows:\n    #   \n    #   The numbers of a tuple are in the form:\n    #       [(a,b), (c,d), (e,f),...]\n    #       \n    #   The number of a given tuple is the sum of the numbers of the tuples to its left.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its right.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its left and to its right.\n    #   \n    #   The algorithm is illustrated in the following pseudocode:\n    #   \n    #   def add_pairwise(tup):\n    #       left, right = 0, 0\n    #       a = []\n    #       for i, j in zip(tup, tup[1:]):\n    #           a.append(left + right)\n    #           left = i\n    #           right = j\n    #   \n    #   tup = (1,2,3)\n    #   add_pairwise(tup)\n    #   a = [1, 3, 6]\n    \n    # Approach 4:\n    #   The algorithm for adding up all the numbers of a given tuple is as follows:\n    #   \n    #   The numbers of a tuple are in the form:\n    #       [(a,b), (c,d), (e,f),...]\n    #       \n    #   The number of a given tuple is the sum of the numbers of the tuples to its left.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its right.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its left and to its right.\n    #   \n    #   The algorithm is illustrated in the following pseudocode:\n    #   \n    #   def add_pairwise(tup):\n    #       left, right = 0, 0\n    #       a = []\n    #       for i, j in zip(tup, tup[1:]):\n    #           a.append(left + right)\n    #           left = i\n    #           right = j\n    #   \n    #   tup = (1,2,3)\n    #   add_pairwise(tup)\n    #   a = [1, 3, 6]\n    \n    # Approach 5:\n    #   The algorithm for adding up all the numbers of a given tuple is as follows:\n    #   \n    #   The numbers of a tuple are in the form:\n    #       [(a,b), (c,d), (e,f),...]\n    #       \n    #   The number of a given tuple is the sum of the numbers of the tuples to its left.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its right.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its left and to its right.\n    #   \n    #   The algorithm is illustrated in the following pseudocode:\n    #   \n    #   def add_pairwise(tup):\n    #       left, right = 0, 0\n    #       a = []\n    #       for i, j in zip(tup, tup[1:]):\n    #           a.append(left + right)\n    #           left = i\n    #           right = j\n    #   \n    #   tup = (1,2,3)\n    #   add_pairwise(tup)\n    #   a = [1, 3, 6]\n    \n    # Approach 6:\n    #   The algorithm for adding up all the numbers of a given tuple is as follows:\n    #   \n    #   The numbers of a tuple are in the form:\n    #       [(a,b), (c,d), (e,f),...]\n    #       \n    #   The number of a given tuple is the sum of the numbers of the tuples to its left.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its right.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its left and to its right.\n    #   \n    #   The algorithm is illustrated in the following pseudocode:\n    #   \n    #   def add_pairwise(tup):\n    #       left, right = 0, 0\n    #       a = []\n    #       for i, j in zip(tup, tup[1:]):\n    #           a.append(left + right)\n    #           left = i\n    #           right = j\n    #   \n    #   tup = (1,2,3)\n    #   add_pairwise(tup)\n    #   a = [1, 3, 6]\n    \n    # Approach 7:\n    #   The algorithm for adding up all the numbers of a given tuple is as follows:\n    #   \n    #   The numbers of a tuple are in the form:\n    #       [(a,b), (c,d), (e,f),...]\n    #       \n    #   The number of a given tuple is the sum of the numbers of the tuples to its left.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its right.\n    #   The number of a given tuple is the sum of the numbers of the tuples to its left and to its right.\n    #   \n    #   The algorithm is illustrated in the following pseudocode:\n    #   \n    #   def add_pairwise(tup):\n    #       left, right = 0, 0\n    #       a = []\n    #       for i, j in zip(tup, tup[1:]):\n    #           a.appen"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if i > 0 and i < len(test_tup)-1:\n            test_tup[i] = test_tup[i-1] + test_tup[i+1]\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tuples=[]\n    for i in range(len(test_tup)):\n        if i==0:\n            tuples.append(test_tup[i]+test_tup[i+1])\n        elif i==len(test_tup)-1:\n            tuples.append(test_tup[i-1]+test_tup[i])\n        else:\n            tuples.append(test_tup[i]+test_tup[i+1]+test_tup[i-1])\n    return tuples\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = None\n    for i in range(len(test_tup)-1):\n        result = test_tup[i]+test_tup[i+1]\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l=[]\n    l.append(test_tup[0])\n    l.append(test_tup[1])\n    l.append(test_tup[2])\n    l.append(test_tup[3])\n    l.append(test_tup[4])\n    l.append(test_tup[5])\n    l.append(test_tup[6])\n    l.append(test_tup[7])\n    l.append(test_tup[8])\n    l.append(test_tup[9])\n    return l\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    if len(tup) == 0:\n        return 0\n    if len(tup) == 1:\n        return tup[0]\n    else:\n        temp_tup = []\n        for i in range(len(tup)-1):\n            temp_tup.append(tup[i] + tup[i+1])\n        return temp_tup[0]\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = 0\n    n = len(test_tup)\n    for i in range(n):\n        res += test_tup[(i+1)%n]\n    return (res)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def add_pairwise(tup):\n        #TODO\n        tup = list(tup)\n        for i in range(len(tup)):\n            tup[i] += tup[i+1]\n        return tuple(tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(test_tup)\n    print(test_tup + (test_tup[-1] + 1,))\n    print(test_tup + (test_tup[-1] + 2,))\n    print(test_tup + (test_tup[-1] + 3,))\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = result * i\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if(n == 1):\n        return arr[0]\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import math\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # X = 1, i = 0, sum = 1\n    # X = 2, i = 0, sum = 2\n    # X = 3, i = 0, sum = 6\n    # X = 1, i = 1, sum = 6\n    # X = 2, i = 1, sum = 7\n    # X = 3, i = 1, sum = 8\n    # X = 1, i = 2, sum = 10\n    # X = 2, i = 2, sum = 12\n    # X = 3, i = 2, sum = 15\n    # X = 1, i = 3, sum = 18\n    # X = 2, i = 3, sum = 21\n    # X = 3, i = 3, sum = 24\n    \n    # X = 4, i = 0, sum = 6\n    # X = 5, i = 0, sum = 10\n    # X = 6, i = 0, sum = 14\n    # X = 5, i = 1, sum = 14\n    # X = 6, i = 1, sum = 18\n    # X = 5, i = 2, sum = 24\n    # X = 6, i = 2, sum = 30\n    # X = 5, i = 3, sum = 42\n    # X = 6, i = 3, sum = 54\n    # X = 5, i = 4, sum = 60\n    # X = 6, i = 4, sum = 66\n    # X = 5, i = 5, sum = 72\n    # X = 6, i = 5, sum = 78\n    # X = 5, i = 6, sum = 84\n    # X = 6, i = 6, sum = 90\n    \n    X = 1\n    i = 0\n    sum = 1\n    \n    while(i < n):\n        sum = sum * arr[i]\n        X = X * arr[i]\n        i += 1\n    print(\"X = {}, i = {}, sum = {}\".format(X, i, sum))\n    \n    X = X % n\n    print(\"X = {}, i = {}, sum = {}\".format(X, i, sum))\n    \n    if(X == 1):\n        print(\"Product of multiplication is:\", sum)\n    else:\n        print(\"Product of multiplication is:\", sum % X)\n    \n    return sum % X\n    \n    \nif __name__ == \"__main__\":\n    \n    arr = [1, 2, 3, 4]\n    n = 10\n    find_remainder(arr, n)"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def multiplicative_inverse(a, n): \n        if (gcd(a, n)!= 1): \n            return -1\n        u1, u2, u3 = 1, 0, a \n        v1, v2, v3 = 0, 1, n \n        while (u3!= 0): \n            q = int(u2 / u3) \n            v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3 \n        return u1 % n \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def find_nth_power(n):\n        if n == 1:\n            return 1\n        return pow(find_nth_power(n - 1), n)\n    \n    return find_nth_power(n) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    factorial_array = factorial_array_memo(n)\n    arr_product = 1\n    for ele in arr:\n        arr_product *= ele\n    remainder = arr_product % n\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1:\n        return arr\n    else:\n        return (find_remainder(arr, n-1) * arr) % n \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Note: Consecutive numbers are those which are in an increasing or decreasing order. For example: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 36, 38, 39, 40, 41, 42, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 83"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]==1:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i]==l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i]==l[i+1]):\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return 'not consecutive'\n    return 'consecutive'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if (len(l) == 0):\n        return True\n    return consecutive_number(l)\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    res = 0\n    for i in range(len(l)):\n        if l[i] == l[i + 1]:\n            res = 1\n    return res\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # TODO: Write your solution here\n    \n    for i in range(0, len(l)):\n        if l[i] == l[i+1]:\n            return True\n    return False\n    \nprint(check_Consecutive([1,1,2,3,5])) \nprint(check_Consecutive([1,3,5,7]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_Consecutive([1,2,3,4,5]))"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = l.copy()\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return False\n    i = 0\n    while i <= len(l)-1:\n        if l[i]!= l[i+1]:\n            return False\n        i += 1\n    return True\n        \n    \ndef check_Consecutive_2(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return False\n    l = l.copy()\n    l.sort()\n    if l[0] == l[1] - 1:\n        return False\n    elif l[1] == l[2] - 1:\n        return False\n    else:\n        return True\n        \ndef check_Consecutive_3(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return False\n    l = l.copy()\n    l.sort()\n    if l[0] == l[1] - 1:\n        return False\n    elif l[1] == l[2] - 1:\n        return False\n    else:\n        return True\n        \ndef check_Consecutive_4(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return False\n    l = l.copy()\n    l.sort()\n    if l[0] == l[1] - 1:\n        return False\n    elif l[1] == l[2] - 1:\n        return False\n    elif l[0]!= 0:\n        return False\n    elif l[1]!= 0:\n        return False\n    else:\n        return True\n    \ndef check_Consecutive_5(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return False\n    l = l.copy()\n    l.sort()\n    if l[0] == l[1] - 1:\n        return False\n    elif l[1] == l[2] - 1:\n        return False\n    else:\n        return True\n    \ndef count_even(l):\n    '''\n    Write a python function to count the number of even numbers present in the list.\n    '''\n    count = 0\n    for num in l:\n        if num % 2 == 0:\n            count += 1\n    return count\n        \ndef count_even_2(l):\n    '''\n    Write a python function to count the number of even numbers present in the list.\n    '''\n    count = 0\n    for num in l:\n        if num % 2 == 0:\n            count += 1\n    return count\n    \ndef count_even_3(l):\n    '''\n    Write a python function to count the number of even numbers present in the list.\n    '''\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return 0 if l[0] % 2 == 0 else 1\n    if len(l) == 2:\n        return 0 if l[0] % 2 == 0 else 1\n    if l[1] % 2 == 0 and l[0] % 2 == 0:\n        return 1 + count_even_3(l[2:])\n    elif l[1] % 2 == 0 and l[0] % 2!= 0:\n        return 1 + count_even_3(l[2:])\n    elif l[0] % 2 == 0 and l[1] % 2!= 0:\n        return 1 + count_even_3(l[2:])\n    else:\n        return 1\n    \ndef count_even_4(l):\n    '''\n    Write a python function to count the number of even numbers present in the list.\n    '''\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return 0 if l[0] % 2 == 0 else 1\n    if len(l) == 2:\n        return 0 if l[0] % 2 == 0 else 1\n    if l[1] % 2 == 0 and l[0] % 2 == 0:\n        return 1 + count_even_4(l[2:])\n    elif l[1] % 2 == 0 and l[0] % 2!= 0:\n        return 1 + count_even_4(l[2:])\n    elif l[0] % 2 == 0 and l[1] % 2!= 0:\n        return 1 + count_even_4(l[2:])\n    else:\n        return 1\n        \ndef count_even_5(l):\n    '''\n    Write a python function to count the number of even numbers present in the list.\n    '''\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return 0 if l[0] % 2 == 0 else 1\n    if len(l) == 2:\n        return 0 if l[0] % 2 == 0 else 1\n    if l[1] % 2 == 0 and l[0] % 2 == 0:\n        return 1 + count_even_5(l[2:])\n    elif l[1] % 2 == 0 and l[0] % 2!= 0:\n        return 1 + count_even_5(l[2:])\n    elif l[0] % 2 == 0 and l[1] % 2!= 0:\n        return 1 + count_even_5(l[2:])\n    else:\n        return 1\n        \ndef count_even_6(l):\n    '''\n    Write a python function to count the number of even numbers present in the list.\n    '''\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return 0 if l[0] % 2 == 0 else 1\n    if len(l) == 2:\n        return 0 if l[0] % 2 == 0 else 1\n    if l[1] % 2 == 0 and l[0] % 2 == 0:\n        return 1 + count_even_6(l[2:])\n    elif l[1] % 2 == 0 and l[0] % 2!= 0:\n        return 1 + count_even_6(l[2:])\n    elif l[0] % 2 == 0 and l[1] % 2!= 0:\n        return 1 + count_even_6(l[2:])\n    else:\n        return 1\n        \ndef count_even_7(l):\n    '''\n    Write a python function to count the number of even numbers present in the list.\n    '''\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return 0 if l[0] % 2 == 0 else 1\n    if len(l) == 2:\n        return 0 if l[0] % 2 == 0 else 1\n    if l[1] % 2 == 0 and l[0] % 2 == 0:\n        return 1 + count_even_7(l[2:])\n    elif l[1] % 2 == 0 and l[0] % 2!= 0:\n        return 1 + count_even_7(l[2:])\n    elif l[0] % 2 == 0 and l[1] % 2!= 0:\n        return 1 + count_even_7(l[2:])\n    else:\n        return 1\n        \ndef count_even_8(l):\n    '''\n    Write a python function to count the number of even numbers present in the list.\n    '''\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return "
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    result = []\n    for i in range(len(test_list1)):\n        if test_list1[i] == test_list2[i]:\n            result.append(test_list1[i])\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1 == test_list2:\n        print(f\"Both lists are equal hence they have the same elements.\\n {test_list1}\")\n        return False\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for elem in test_list1:\n        if elem in test_list2:\n            result.append(elem)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    try:\n        intersection = []\n        for i in test_list1:\n            if i in test_list2:\n                intersection.append(i)\n        return intersection\n    except TypeError:\n        raise TypeError(\"Invalid Input\")\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = set(test_list1).intersection(set(test_list2))\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    ans = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                ans.append(test_list1[i])\n    return ans\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your Code here\n    return set(test_list1).intersection(set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Creating a set\n    s = set(test_list1)\n    s.update(test_list2)\n    # Converting the set to list and getting the list\n    l = list(s)\n    print(\"Tuple intersection of the given two lists is : \",l )\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    print(str2)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=''\n    for i in str1:\n        if i==ch:\n            new_str=new_str+newch\n        else:\n            new_str=new_str+i\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    print(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    n=0\n    for i in str1:\n        if i==ch:\n            str1=str1[:n]+newch+str1[n+1:]\n            n+=1\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #str1 = str1.replace(ch,newch)\n    return str1.replace(ch,newch)\n    \nstr1 = \"I am a very good boy\"\nnewstr = replace_char(str1,\" \", \"_\")\nprint(newstr)"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: (kv[1], kv[0]))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(),key = lambda x:x[1]))\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = sorted(dict1.items(), key = lambda kv:(kv[1], kv[0]))\n    return l\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict=sorted(dict1.items(),key=lambda x:x[1])\n    sorted_dict.reverse()\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1=[]\n    list1=sorted(dict1.items(), key=lambda x: x[1])\n    list1=sorted(list1, key=lambda x: x[0])\n    return list1\ndef swap_counter(dict1):\n    '''\n    Write a function to swap key and value in dictionary.\n    '''\n    list1=sorted(dict1.items(), key=lambda x: x[0])\n    list1=sorted(list1, key=lambda x: x[1])\n    return list1\ndef remove_counter(dict1):\n    '''\n    Write a function to remove key from dictionary if key is present more than once.\n    '''\n    list1=[]\n    for key, value in dict1.items():\n        if value>1:\n            list1.append(key)\n    return list1\ndef find_duplicate_in_list(l):\n    '''\n    Write a function to find and return duplicate element from list.\n    '''\n    l=list(set(l))\n    return l[1]\ndef remove_duplicates_from_list(l):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    l=list(set(l))\n    return l\ndef remove_duplicates(l):\n    '''\n    Write a function to remove duplicates from list.\n    '''\n    l=list(set(l))\n    return l\ndef find_duplicate_from_set(s):\n    '''\n    Write a function to find and return duplicate element from set.\n    '''\n    s=set(s)\n    return s.pop()\ndef remove_duplicates_from_set(s):\n    '''\n    Write a function to remove duplicates from set.\n    '''\n    s=set(s)\n    return s.pop()\ndef remove_duplicates(s):\n    '''\n    Write a function to remove duplicates from list.\n    '''\n    s=list(set(s))\n    return s\ndef remove_empty_list(l):\n    '''\n    Write a function to remove empty list from list.\n    '''\n    return list(filter(None, l))\ndef remove_empty_list_while_iterating(l):\n    '''\n    Write a function to remove empty list from list.\n    '''\n    l=list(filter(None, l))\n    return l\ndef remove_empty_list(l):\n    '''\n    Write a function to remove empty list from list.\n    '''\n    l=list(filter(None, l))\n    return l\ndef remove_empty_list_while_iterating(l):\n    '''\n    Write a function to remove empty list from list.\n    '''\n    l=list(filter(None, l))\n    return l\ndef remove_empty_list(l):\n    '''\n    Write a function to remove empty list from list.\n    '''\n    l=list(filter(None, l))\n    return l\ndef remove_empty_list_while_iterating(l):\n    '''\n    Write a function to remove empty list from list.\n    '''\n    l=list(filter(None, l))\n    return l\ndef find_short_string(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string_without_using_recursion(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string_without_using_recursion(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string_without_using_recursion(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string_without_using_recursion(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string_without_using_recursion(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string_without_using_recursion(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s[i])<len(shortest_substr):\n            shortest_substr=s[i]\n    return shortest_substr\ndef find_short_string(s):\n    '''\n    Write a function to find and return shortest substring from list.\n    '''\n    shortest_substr=s[0]\n    for i in range(len(s)):\n        if len(s["
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = []\n    for key, val in dict1.items():\n        l.append((val, key))\n    l.sort()\n    result = {}\n    for val, key in l:\n        result[key] = val\n    return result\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    res = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    print(res)\n    # return dict(res)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for i in nums:\n        if i < min_num:\n            min_num = i\n        if i > max_num:\n            max_num = i\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for n in nums:\n        if n < smallest:\n            smallest = n\n        if n > largest:\n            largest = n\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    largest = max(nums)\n    smallest = min(nums)\n    largest_index = nums.index(largest)\n    smallest_index = nums.index(smallest)\n    return largest + smallest, largest_index, smallest_index\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        if i > 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    i=0\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            nums[i+1],nums[i] = nums[i],nums[i+1]\n    print(nums)\n    max_sum = sum(nums)\n    min_sum = sum(nums)\n    print(max_sum)\n    print(min_sum)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return (None, None)\n    if len(nums) == 1:\n        return (nums[0], nums[0])\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return (largest, smallest)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = max(nums)\n    min = min(nums)\n    return max + min\nprint(big_sum([1,2,3,4]))\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    return sorted(nums)[-2:]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums)<=1:\n        return nums[0]\n    return nums[0] + big_sum(nums[1:])\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \nstring = 'ABC'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\nprint(is_lower('Hello'))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_str = ''\n    for c in string:\n        lower_str += c.lower()\n    return lower_str\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = ''\n    for char in string:\n        lower += char.lower()\n    print(lower)\n    return lower\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = \"\"\n    for i in string:\n        if i.islower():\n            lower_case += i\n    print(lower_case)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    pattern = re.compile(r'[a-z]')\n    result = re.sub(pattern, \"\",str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # ''.join([i for i in str1 if not i.islower()])\n    return ''.join(i for i in str1 if not i.islower())\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #regex = re.compile(r'\\w*[a-z]*')\n    #print(regex.findall(str1))\n    return re.sub(r'\\w*[a-z]*', '', str1)\n    #Return the modified string.\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('\\w*[a-z]+[A-Z]+\\w*', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace('a','A')\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = str1.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\")\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return re.sub('[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\nprint(remove_lowercase('foobar'))\nprint(remove_lowercase('Foobar'))\nprint(remove_lowercase('123b'))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]+', '', str1)\n    print(str1)\n    \ndef remove_substring_2(str1):\n    '''\n    Write a function to remove all substrings that contain 2 or more consecutive\n    lowercase letters from a given string.\n    '''\n    str1 = re.sub('[a-z]+', '', str1)\n    print(str1)\n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string\n    using regex.\n    '''\n    str1 = re.sub('[0-9]+', '', str1)\n    print(str1)\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string\n    using regex.\n    '''\n    str1 = re.sub('[0-9]+', '', str1)\n    print(str1)\n    \ndef remove_non_alphabetic(str1):\n    '''\n    Write a function to remove all non alphabetic characters from a given string.\n    '''\n    str1 = re.sub('[^a-z]+', '', str1)\n    print(str1)\n    \ndef remove_punctuations(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string\n    using regex.\n    '''\n    str1 = re.sub('[.,;!?:]', '', str1)\n    print(str1)\n    \ndef remove_html_tags(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('<.*?>', '', str1)\n    print(str1)\n    \ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('[A-Z]+', '', str1)\n    print(str1)\n    \ndef remove_uppercase_2(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('[A-Z]+', '', str1)\n    print(str1)\n    \ndef remove_special_characters_2(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_3(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_4(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_5(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_6(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_7(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_8(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_9(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_10(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_11(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_12(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_13(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_14(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_15(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_16(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_17(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_18(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_19(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_20(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_21(str1):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    str1 = re.sub('\\W', '', str1)\n    print(str1)\n    \ndef remove_special_characters_22(str1):\n    '''\n    Writ"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    return re.sub(r'[a-z]',r'',str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = n * 10\n    rem = n % 10\n    while (rem!= 0) :\n        n = n // 10\n        rem = n % 10\n    return rem\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef lastDigit(n)"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #get the index of first digit\n    i = int(n) % 10 \n    #print(i)\n    return i\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \nif __name__ == \"__main__\":\n    \n    # Test cases\n    print (f\"The first digit of {19} is {first_Digit(19)}\")\n    print (f\"The first digit of {19.05} is {first_Digit(19.05)}\")\n    print (f\"The first digit of {-19} is {first_Digit(-19)}\")\n    print (f\"The first digit of {-19.05} is {first_Digit(-19.05)}\")\n    print (f\"The first digit of {0} is {first_Digit(0)}\")\n    print (f\"The first digit of {0.0} is {first_Digit(0.0)}\")\n    print (f\"The first digit of {-0} is {first_Digit(-0)}\")\n    print (f\"The first digit of {-0.0} is {first_Digit(-0.0)}\")\n    print (f\"The first digit of {1.234} is {first_Digit(1.234)}\")\n    print (f\"The first digit of {12.34} is {first_Digit(12.34)}\")\n    print (f\"The first digit of {123} is {first_Digit(123)}\")\n    print (f\"The first digit of {-123} is {first_Digit(-123)}\")\n    print (f\"The first digit of {-12.34} is {first_Digit(-12.34)}\")\n    print (f\"The first digit of {1.234e12} is {first_Digit(1.234e12)}\")\n    print (f\"The first digit of {-1.234e12} is {first_Digit(-1.234e12)}\")\n    print (f\"The first digit of {0.1} is {first_Digit(0.1)}\")\n    print (f\"The first digit of {0.1e12} is {first_Digit(0.1e12)}\")\n    print (f\"The first digit of {-0.1} is {first_Digit(-0.1)}\")\n    print (f\"The first digit of {-0.1e12} is {first_Digit(-0.1e12)}\")\n    print (f\"The first digit of {3.0} is {first_Digit(3.0)}\")\n    print (f\"The first digit of {3.0e12} is {first_Digit(3.0e12)}\")\n    print (f\"The first digit of {-3.0} is {first_Digit(-3.0)}\")\n    print (f\"The first digit of {-3.0e12} is {first_Digit(-3.0e12)}\")\n    print (f\"The first digit of {3.0e-12} is {first_Digit(3.0e-12)}\")\n    print (f\"The first digit of {-3.0e-12} is {first_Digit(-3.0e-12)}\")\n    print (f\"The first digit of {3.0e-1234} is {first_Digit(3.0e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234} is {first_Digit(-3.0e-1234)}\")\n    print (f\"The first digit of {3.0e-1234e-1234} is {first_Digit(3.0e-1234e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234e-1234} is {first_Digit(-3.0e-1234e-1234)}\")\n    print (f\"The first digit of {3.0e-1234e-1234} is {first_Digit(3.0e-1234e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234e-1234} is {first_Digit(-3.0e-1234e-1234)}\")\n    print (f\"The first digit of {3.0e-1234e-12345} is {first_Digit(3.0e-1234e-12345)}\")\n    print (f\"The first digit of {-3.0e-1234e-12345} is {first_Digit(-3.0e-1234e-12345)}\")\n    print (f\"The first digit of {3.0e-1234e-12345e-1234} is {first_Digit(3.0e-1234e-12345e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234e-12345e-1234} is {first_Digit(-3.0e-1234e-12345e-1234)}\")\n    print (f\"The first digit of {3.0e-1234e-12345e-1234} is {first_Digit(3.0e-1234e-12345e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234e-12345e-1234} is {first_Digit(-3.0e-1234e-12345e-1234)}\")\n    print (f\"The first digit of {3.0e-1234e-12345e-1234e-1234} is {first_Digit(3.0e-1234e-12345e-1234e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234e-12345e-1234e-1234} is {first_Digit(-3.0e-1234e-12345e-1234e-1234)}\")\n    print (f\"The first digit of {3.0e-1234e-12345e-1234e-1234e-1234} is {first_Digit(3.0e-1234e-12345e-1234e-1234e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234e-12345e-1234e-1234e-1234e-1234} is {first_Digit(-3.0e-1234e-12345e-1234e-1234e-1234e-1234)}\")\n    print (f\"The first digit of {3.0e-1234e-12345e-1234e-1234e-1234e-1234e-1234e-1234} is {first_Digit(3.0e-1234e-12345e-1234e-1234e-1234e-1234e-1234e-1234e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234e-12345e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234} is {first_Digit(-3.0e-1234e-12345e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234)}\")\n    print (f\"The first digit of {3.0e-1234e-12345e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234} is {first_Digit(3.0e-1234e-12345e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234)}\")\n    print (f\"The first digit of {-3.0e-1234e-12345e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234e-1234} is {first_Digit(-3.0e-123"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    import re\n    match = re.search(r'\\d', str(n))\n    if match :\n        return match.group()\n    else :\n        return None\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list.split()[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = []\n    for i in list:\n        if(i%2!=0):\n            l.append(i)\n    return l\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Your code here\n    odd = []\n    for num in list:\n        if num % 2!= 0:\n            odd.append(num)\n    print(odd)\n    return odd\n    \ndef RoundHalfUp(a):\n    '''\n    Write a python function which takes a list of integers and returns the rounded off half of the numbers.\n    '''\n    # Your code here\n    round_half = []\n    for num in a:\n        if num == 0:\n            round_half.append(num)\n        elif num % 2!= 0:\n            num = round(num / 2)\n            round_half.append(num)\n        else:\n            num = round(num / 2)\n            round_half.append(num)\n    return round_half\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(0,len(list)):\n        if list[i] % 2!= 0:\n            odd_list.append(list[i])\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = []\n    for i in list:\n        if i%2 == 0:\n            continue\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    print(\"Odd numbers from the list are\",odd_list)\n    \ndef Format_string(string,*list): \n    '''\n    Write a python function which takes a list of words and returns the output as a string in a specific format. \n    '''\n    output=string.capitalize()\n    if not list:\n        print(\"Word is not in the list, adding it.\")\n        return output\n    else:\n        output+=\" \"+\" \".join(list)\n        return output\n    \ndef Get_length(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the length of the list.\n    '''\n    return len(input_list)\n    \ndef Get_sum(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the sum of the list elements.\n    '''\n    sum=0\n    for i in input_list:\n        sum+=i\n    return sum\n    \ndef Get_average(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the average of the list elements.\n    '''\n    if not input_list:\n        return 0\n    else:\n        return Get_sum(input_list)/Get_length(input_list)\n    \ndef Get_max(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the maximum value in the list.\n    '''\n    if not input_list:\n        return 0\n    else:\n        max_num=input_list[0]\n        for i in input_list:\n            if i>max_num:\n                max_num=i\n        return max_num\n    \ndef Get_min(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the minimum value in the list.\n    '''\n    if not input_list:\n        return 0\n    else:\n        min_num=input_list[0]\n        for i in input_list:\n            if i<min_num:\n                min_num=i\n        return min_num\n    \ndef Find(input_list,*list): \n    '''\n    Write a python function which takes a list of numbers and returns the index of the first occurrence of a number in the list.\n    '''\n    if len(list)==0:\n        return -1\n    else:\n        if input_list[0] in list:\n            for i in range(len(input_list)):\n                if input_list[i]==list[0]:\n                    return i\n                    \ndef Sort(input_list): \n    '''\n    Write a python function which takes a list of integers and returns it in ascending order.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i,len(input_list)):\n            if input_list[i]>input_list[j]:\n                temp=input_list[i]\n                input_list[i]=input_list[j]\n                input_list[j]=temp\n    return input_list\n    \ndef Reverse_sort(input_list): \n    '''\n    Write a python function which takes a list of integers and returns it in descending order.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i,len(input_list)):\n            if input_list[i]<input_list[j]:\n                temp=input_list[i]\n                input_list[i]=input_list[j]\n                input_list[j]=temp\n    return input_list\n    \ndef Minimum(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the minimum value in the list.\n    '''\n    if not input_list:\n        return 0\n    else:\n        return min(input_list)\n    \ndef Maximum(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the maximum value in the list.\n    '''\n    if not input_list:\n        return 0\n    else:\n        return max(input_list)\n    \ndef Find_min_max_len(input_list): \n    '''\n    Write a python function which takes a list of strings and returns a dictionary with the minimum length of each string.\n    '''\n    temp={}\n    for i in input_list:\n        if i in temp.keys():\n            temp[i]=temp[i]+1\n        else:\n            temp[i]=1\n    temp_list=[]\n    for i in temp.keys():\n        temp_list.append(temp[i])\n    return dict(zip(temp_list,temp.values()))\n    \ndef Find_duplicates(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the duplicate elements in the list.\n    '''\n    output=[]\n    for i in input_list:\n        if i in input_list:\n            if not i in output:\n                output.append(i)\n    return output\n    \ndef Find_index(input_list,element): \n    '''\n    Write a python function which takes a list of integers and returns the index of the first occurrence of the element in the list.\n    '''\n    if element in input_list:\n        for i in range(len(input_list)):\n            if input_list[i]==element:\n                return i\n    else:\n        return -1\n    \ndef Find_index_range(input_list,low,high): \n    '''\n    Write a python function which takes a list of integers and returns the index of the first occurrence of the element in the list.\n    '''\n    for i in range(len(input_list)):\n        if input_list[i]==low:\n            low_index=i\n        elif input_list[i]==high:\n            high_index=i\n    return low_index,high_index\n    \ndef Append_to_list(input_list): \n    '''\n    Write a python function which takes a list of integers and returns it with the first element appended to the end of the list.\n    '''\n    input_list.append(0)\n    return input_list\n    \ndef Insert_to_list(input_list,element,index): \n    '''\n    Write a python function which takes a list of integers and inserts the element at the given index.\n    '''\n    input_list.insert(index,element)\n    return input_list\n    \ndef Remove_from_list(input_list,element): \n    '''\n    Write a python function which takes a list of integers and returns the list after the removal of the element.\n    '''\n    input_list.remove(element)\n    return input_list\n    \ndef Pop_from_list(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the last element of the list.\n    '''\n    input_list.pop()\n    return input_list\n    \ndef Remove_at_index(input_list,index): \n    '''\n    Write a python function which takes a list of integers and removes the element at the given index.\n    '''\n    input_list.pop(index)\n    return input_list\n    \ndef Sort_list(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the list in ascending order.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i,len(input_list)):\n            if input_list[i]>input_list[j]:\n                temp=input_list[i]\n                input_list[i]=input_list[j]\n                input_list[j]=temp\n    return input_list\n    \ndef Sort_in_descending_order(input_list): \n    '''\n    Write a python function which takes a list of integers and returns the list in descending order.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i,len(input_list)):\n            if input_list[i]<input_list[j]:\n                temp=inpu"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in range(len(list)):\n        if list[i]%2==1:\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    \n    for i in range(1, n+1) :\n        total += i**3\n        \n    total += sum(range(1, n+1))\n    \n    return abs(total - (n*(n+1)//2))\n    \n    \nif __name__ == '__main__':\n    n = 2\n    result = difference(n)\n    print(result"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(sum(list(map(lambda x: x ** 3, range(1, n + 1)))) - sum(list(map(lambda x: x, range(1, n + 1)))))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    total_cube = 0\n    for i in range(n) :\n        total += i\n    for i in range(n) :\n        total_cube += pow(i,3)\n    return total-total_cube\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = sum(range(1,n+1))**3\n    sum2 = sum(range(1,n+1))\n    return sum2 - sum1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #TO DO\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    sum2 = 0\n    for j in range(n):\n        sum2 += j\n    sum3 = 0\n    for k in range(n):\n        sum3 += k\n    print(sum2-sum)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cube(n):\n        return (n*(n+1)*(2*n+1))/6\n    def sum_of_natural_numbers(n):\n        return n*n+n\n    def sum_of_cubes(n):\n        return (n*n*n)\n    sum_of_natural_numbers(n) - sum_of_cube(n)\n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n_sum = n * (n + 1) // 2\n    diff = n_sum - (n**3)\n    return diff\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x=0\n    y=0\n    for i in range(1,n+1) :\n        x=x+i\n    for j in range(1,n+1) :\n        y=y+j\n    return x-y\nprint(difference(10))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumofsquares(n):\n        sum_of_squares = 0\n        for i in range(1,n+1):\n            sum_of_squares += i*i\n        return sum_of_squares\n    def sumofn(n):\n        sum_of_n = 0\n        for i in range(1,n+1):\n            sum_of_n += i\n        return sum_of_n\n    sum_of_n = sumofn(n)\n    sum_of_squares = sumofsquares(n)\n    print(sum_of_n-sum_of_squares)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n=int(n)\n    f = lambda x:x*x*x\n    sum = n*(n+1)*(2*n+1)/6\n    difference = sum - n*(n+1)\n    print(difference)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if( A[i] ^ A[j] ) : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    \n    # Using XOR to find odd value pair\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j] == 1):\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i=0\n    j=0\n    odd_count = 0\n    while(i<N):\n        while(j<N and A[i] == A[j]):\n            j+=1\n        if(j==N):\n            break\n        if((A[i]^A[j]) & 1):\n            odd_count += 1\n        i+=1\n        j=i+1\n    return odd_count\n    \nif __name__ == '__main__': \n    print(find_Odd_Pair([1,1,2,2,3,3],6))"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_Count_Pairs_with_XOR_even(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_Count_Pairs_with_XOR_odd(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \n    \ndef find_Count_Pairs_with_XOR_all_odd(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_Count_Pairs_with_XOR_all_even(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_odd_even(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_odd_even(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_even_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_even_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \n    \ndef find_count_pairs_with_xor_even_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_even_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_odd_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_odd_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \n    \ndef find_count_pairs_with_xor_even_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_even_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_odd_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_odd_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_even_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_even_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_odd_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_odd_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_even_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 1 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_even_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_odd_odd_odd(A,N) : \n    count = 0 \n    for i in range(N): \n        x = A[i] \n        if (x & 1) == 0 : \n            count += 1\n    return count \n    \ndef find_count_pairs_with_xor_all_odd_odd_odd(A,N) : "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        if A[i] & 1 :\n            cnt += 1\n    return cnt\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        if A[i] & 1 :\n            cnt += 2\n    return cnt\n    \ndef find_Pair_with_given_sum(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        if A[i] & 1 :\n            if A[i] + A[i+1] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_2(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_3(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_4(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_5(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_6(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_7(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_8(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_9(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_10(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_11(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_12(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_13(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_14(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_15(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_16(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] + A[j] == S :\n                cnt += 1\n    return cnt\n    \ndef find_Pair_with_given_sum_17(A,N,S) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    #solution\n    cnt = 0\n    for i in range(N) :"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2 == 1 :\n                count = count + 1\n    print(\"Number of pairs whose xor value is odd : \", count)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = len(A) \n    if(n == 0): \n        return 0\n    count = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 0:\n                count=count+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(0,N):\n        for j in range(0,N):\n            if i!=j and (A[i]^A[j])%2!=0:\n                odd_count+=1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(N) :\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1 :\n                odd_pair += 1\n                break\n    return odd_pair\n    "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \n    # O(n) time | O(1) space\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    temp = ''\n    for char in string:\n        if char.islower():\n            char = char.upper()\n        elif char.isupper():\n            char = char.lower()\n        temp += char\n    return temp\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower() + string.upper()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    out = ''\n    for c in string:\n        if c.islower():\n            out += c.upper()\n        elif c.isupper():\n            out += c.lower()\n        else:\n            out += c\n    return out\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for c in string:\n        if c.isupper():\n            c = c.lower()\n        else:\n            c = c.upper()\n    return string\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return n1 - n2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    ans = 0\n    if n1 == n2:\n        return 0\n    if n1 > n2:\n        n1, n2 = n2, n1\n    while(n1 > 0):\n        ans += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n    return ans\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #print(n1,n2)\n    return sum(map(lambda x:abs(x-n1), n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Remove the leading zeros\n    while n1 < 10:\n        n1 = str(n1)\n        n2 = str(n2)\n        n1 = ''.join(n1)\n        n2 = ''.join(n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    res = 0\n    for i in range(len(str(n1))):\n        res += abs(n1[i] - n2[i])\n    return res\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #Initialize result\n    result = 0\n    #Iterate over digits of each number\n    for i in range(len(str(n1))):\n        #Get digit from each number\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n        #Calculate difference between digits and sum\n        diff = digit1 - digit2\n        result += diff\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    \n    sum_dist = 0\n    for i in range(0, len(n1)):\n        diff = int(n1[i]) - int(n2[i])\n        sum_dist += diff\n    \n    return sum_dist\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        diff = n1 - n2\n    else:\n        diff = n2 - n1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    d = 0\n    for i in range(len(n1)):\n        if n1[i]!= n2[i]:\n            d = d + (ord(n1[i])-ord(n2[i]))\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(n1-n2))\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = float('-inf')\n    for i in range(0, size):\n        s = 0\n        for j in range(0, i):\n            s += a[j]\n        for j in range(i, size):\n            s += a[j]\n        if s > max_sub_sum:\n            max_sub_sum = s\n    return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    max_sum = 0\n    sub_list = []\n    for i in range(size):\n        sum += a[i]\n        if sum < 0:\n            sum = 0\n        else:\n            if sum > max_sum:\n                max_sum = sum\n                sub_list = [i]\n            elif sum == max_sum:\n                sub_list.append(i)\n    return max_sum, sub_list\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(0, size):\n        for j in range(i+1, size+1):\n            if a[i:j] > max_sum:\n                max_sum = a[i:j]\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    for i in range(size):\n        current_sum = 0\n        for j in range(i, size):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a: return -1\n    # print(a)\n    for i in range(1,size):\n        a[i] = max(a[i], a[i]+a[i-1])\n    return max(a)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum = max(curr_sum+a[i], 0)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_list_sum = 0\n    max_sub_list_sum_idx = -1\n    curr_sum = 0\n    for idx in range(size):\n        curr_sum += a[idx]\n        if curr_sum < 0:\n            curr_sum = 0\n        if curr_sum > max_sub_list_sum:\n            max_sub_list_sum = curr_sum\n            max_sub_list_sum_idx = idx\n    return max_sub_list_sum, max_sub_list_sum_idx\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #Solution: Kadane's Algorithm\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum = max(a[i], curr_sum+a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = []\n    union_elements = list(set(union_elements + test_tup1) | set(union_elements + test_tup2))\n    union_elements = sorted(union_elements)\n    return tuple(union_elements)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    print(\"Union of two tuples: \" + str(tup1 | tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = set()\n    for x,y in zip(test_tup1,test_tup2):\n        union_tup.add(x)\n        union_tup.add(y)\n    for x,y in zip(test_tup1,test_tup2):\n        union_tup.add(x)\n        union_tup.add(y)\n    union_tup = sorted(list(union_tup))\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union_elements(('a','b'),('b','c')) == ('a','b','c')\n    # union_elements(('a','b'),('c','a')) == ('a','b','c')\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    \n    union_tup = test_set1 | test_set2\n    union_tup = sorted(list(union_tup))\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    union_tup = test_tup1 | test_tup2\n    union_tup = sorted(union_tup)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    union_set = test_set1.union(test_set2)\n    sorted_list = sorted(union_set)\n    return sorted_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup.append(i)\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_union_tup = test_tup1 + test_tup2\n    return sorted(test_union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    union_tup = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            union_tup.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            union_tup.append(i)\n    union_tup = tuple(sorted(union_tup))\n    return union_tup\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in lst:\n        length = max(length,len(i))\n    return length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length=0\n    for i in range(len(lst)):\n        sub_list=lst[i]\n        sub_list_length=len(sub_list)\n        if sub_list_length>max_length:\n            max_length=sub_list_length\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Recursion\n    if len(lst) == 1:\n        return len(lst[0])\n    else:\n        # Recursion\n        return 1 + Find_Max_Length(lst[1:])\n    \n    # Iterative\n    max_length = 0\n    for ele in lst:\n        temp = 0\n        for e in ele:\n            temp += 1\n        if temp > max_length:\n            max_length = temp\n    return max_length\n    "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # lst = [1, 1, 2, 3, 3, 4, 6, 7, 2, 3]\n    max_len = 0\n    count = 0\n    for i in range(len(lst)):\n        count = 0\n        for j in range(i,len(lst)):\n            count += 1\n            if(lst[j]==lst[i]):\n                max_len = max(max_len,count)\n                break\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if len(lst[i:j+1]) > max:\n                max = len(lst[i:j+1])\n    return max\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    max_len = 0\n    for i in range(0,len(lst)-1):\n        for j in range(i+1, len(lst)):\n            count = 1\n            while j<len(lst) and lst[i]==lst[j]:\n                count +=1\n                j+=1\n            if count > max_len:\n                max_len = count\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlen = 0\n    for i in range(len(lst)):\n        sublst = lst[i]\n        currlen = len(sublst)\n        if currlen > maxlen:\n            maxlen = currlen\n        for j in range(i+1,len(lst)):\n            sublst2 = lst[j]\n            if sublst == sublst2:\n                currlen2 = len(sublst2)\n                if currlen2 > maxlen:\n                    maxlen = currlen2\n    return maxlen\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Write your code here\n    return 0\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    if len(lst) == 1:\n        return 1\n    \n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j]) > longest:\n                longest = len(lst[i:j])\n                \n    return longest\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\"(.*?)\"', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regx_to_find = r\"\\\".*\\\"\"\n    regx_to_replace = r\"\\\".*\\\"\"\n    extracted = re.sub(regx_to_find,regx_to_replace,text)\n    return extracted\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r'\\\"(.*)\\\"')\n    values = re.findall(regex, text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    #result = re.findall(r'\\\"[^\\\"]+\\\"', text)\n    #print(result)\n    return re.findall(r'\\\"[^\\\"]+\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \"\"\"\n    text = \"The author's name is 'David Copperfield', which is a cartoon\"\n    >>> extract_values(text)\n    'david copperfield'\n    \"\"\"\n    val = re.findall('\"\\w+\"', text)\n    for i in val:\n        if (text.find(i)!= -1):\n            text = text.replace(i, '')\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(.*?)\"')\n    return pattern.findall(text)\n    \n    \ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"(."
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted_val = re.findall('\".*?\"', text)\n    return extracted_val\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # r'^\"(.*)\"$'\n    return re.findall(r'^\".*\"(.*)$', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # getting indexes of quotation marks\n    start_index, end_index = get_quotation_marks(text)\n    # extracting string from between quotation marks\n    output = text[start_index+1:end_index]\n    return output\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    print(re.findall('\"[^\"]+\"',text))\n    \ntext1 = '''\n    # \u201cCorrect\u201d is an international standard for the interpretation of the \n    # signs of numbers, symbols and mathematical functions.\n    # It is also used in other languages, such as French.\n    # More information about it can be found here:\n    # http://en.wikipedia.org/wiki/Correct.\n    # The right quotation marks are not used to mark a sentence.\n    # If you need to add a quote marks to a sentence, use the following code:\n    # >>> import pdb; pdb.set_trace()\n    # >>> print(\"\\\"%s\\\"\" % text)\n    # Example of usage:\n    print(\"Extracting numbers:\")\n    print(extract_values(\"\\\"Correct\\\" is an international standard for the interpretation of the signs of numbers, symbols and mathematical functions.\"))\n    # Output:\n    # Extracting numbers:\n    # ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if arr[i]!= arr[j] and arr[j]!= arr[k] and arr[i]!= arr[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d=dict()\n    for i in range(len(arr)):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    for i in d:\n        if d[i] > 1:\n            return d[i]\n    return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                cnt+=1\n    return cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n    \ndef count_Pairs_2(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    # Array to store the counts of unordered pairs\n    pair_counts = []\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = dict()\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    print(d)\n    print(\"Total pairs : \", len(d))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    lst=[]\n    for i in range(len(word)):\n        lst.append(word[i])\n    return lst\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return (list(word)) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(f'n is not an int')\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num_str = str(n)\n    # i = 0\n    # total = 0\n    # while i < len(num_str):\n    #     total += int(num_str[i])\n    #     i += 1\n    return sum([int(x) for x in num_str])\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # your code here\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # replace this for solution\n    return 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return n\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s = s + n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    res = 0\n    while n > 0:\n        res += n % 10\n        n = n // 10\n    return res\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] <= list1[1]:\n        for i in range(2, len(list1)):\n            if list1[i-1] <= list1[i]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] >= list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] < list1[i+1]:\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # checks if the list is sorted, if true, prints True otherwise False\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    new_list = []\n    if len(list1) > 0:\n        for i in range(len(list1)):\n            new_list.append(list1[i])\n            new_list.sort()\n            if new_list == list1:\n                print('True')\n            else:\n                print('False')\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1)-1)) or list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        print('Empty list')\n        return None\n    if len(list1) == 1:\n        if list1[0]!= 1:\n            print('List not sorted')\n            return None\n        else:\n            return True\n    else:\n        if list1[0] < list1[1]:\n            return issort_list(list1[1:])\n        elif list1[0] > list1[1]:\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1]>list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return False\n    return all(list1[i]<list1[i+1] for i in range(len(list1)-1))\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n    "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(0,length):\n        my_list.append({})\n    return my_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dict = []\n    for i in range(length):\n        list_of_dict.append({})\n    return list_of_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return_list = []\n    for i in range(length):\n        return_list.append({})\n    return return_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return[{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_length = len(list1[0])\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i], key=lambda x: x[:sublist_length])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 0:\n        return\n    sort_sublists(list1[0])\n    for i in range(1, len(list1)):\n        print(list1[i])\n        sort_sublists(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    for sub in list1:\n        sublist.append(sub[1])\n    sublist.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # first for each list, iterate through the sublists, then do sort.\n    for i in range(len(list1)):\n        temp = sorted(list1[i])\n        list1[i] = temp\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        sublist = []\n        for j in range(len(list1[i])):\n            sublist.append(list1[i][j])\n        new_list.append(sorted(sublist))\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # to sort the list of lists, we create a variable, called sublists, and pass the list of lists \n    # into the sorted() function to sort each sublist\n    sublists = sorted(list1)\n    return sublists\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate through each sublist\n    for index, sublist in enumerate(list1):\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_list = []\n    for i in nums:\n        if i not in nums_list:\n            nums_list.append(i)\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    output = []\n    for i in nums:\n        if i not in output:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    return unique_nums\n    \n    \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if not nums:\n        return []\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    final_list = []\n    for num in nums:\n        if num not in final_list:\n            final_list.append(num)\n    return final_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # nums = [[1,2,3,4], [1,2,3], [1,2,3,4], [1,2,3,4], [1,2,3]]\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    print(new_list)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set([num for nums in nums if nums not in nums[1:]]))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        if i not in list_data[:list_data.index(i)]:\n            product = product * i\n    print(product)\n    \ndef search_word_list_list(list1, list2):\n    '''\n    Write a python function to find the number of words in list1 which are present in list2.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count += 1\n    print(count)\n    \ndef all_the_same(list_data):\n    '''\n    Write a python function to check if all the elements in a list are same or not.\n    '''\n    print(\"Yes\" if len(set(list_data)) == 1 else \"No\")\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] in unique_list:\n            pass\n        else:\n            unique_list.append(list_data[i])\n    return unique_list\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 3, 5, 4, 2, 7, 5, 4, 1, 2, 2]\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    return reduce(lambda x,y: x*y, unique_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod_list = list(set(list_data))\n    prod_list.sort()\n    return prod_list[-1]*prod_list[-2]\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    set_data = set(list_data)\n    return 1 if len(set_data) == 1 else 1 if len(set_data) == 2 else 2 if len(set_data) == 3 else len(set_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # to solve the problem using list comprehension\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n    unique_list.sort()\n    product = 1\n    for data in unique_list:\n        product *= data\n    return product\n    # to solve the problem using set data structure\n    # unique_set = set()\n    # for data in list_data:\n    #     unique_set.add(data)\n    # return len(unique_set)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    unique_list = list(set(list_data))\n    \n    return 1 * (len(unique_list))\n    \nprint(unique_product([1,2,3,3,4,4,5,5,5,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in range(len(list_data)):\n        if list_data.count(list_data[i]) == 1:\n            product *= list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print(list_data)\n    dictionary = {}\n    for i in list_data:\n        if i in dictionary.keys():\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    print(\"Result is :\",dictionary)\n    \n    result = 1\n    for i in dictionary.values():\n        result = result * i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    unique_list.sort()\n    for i in range(len(unique_list)):\n        unique_list[i] = unique_list[i]*(i+1)\n    return unique_list\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi,sqrt,sin,cos\n    if r<=0 or h<=0:\n        return 0\n    return 2*pi*r*h+2*pi*r**2\nprint(surfacearea_cylinder(2,3))\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*pi*r**2\n    b = 2*pi*r*h\n    c = pi*r**2\n    print(\"The surface area of the cylinder is\", a+b+c)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*math.pi*r*h\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2 * 3.14 * r * h) + (2 * 3.14 * r * 2)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    radius = r\n    height = h\n    surfacearea = 2*pi*radius*height + 2*pi*radius**2\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=2*3.14*r*h\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2 * pi * r * h\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14*r*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=pi*r**2\n    b=2*pi*r*h\n    s=a+b\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = pi*(r**2)\n    b = 2*pi*r*h\n    s = a+b\n    return s\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == [] and B == []:\n        print(\"Both empty\")\n    if A == []:\n        return False\n    if B == []:\n        return True\n    for i in range(len(B)):\n        if A[0] == B[i]:\n            index = i\n            for j in range(1,len(A)):\n                if A[j]!= B[index]:\n                    return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    from collections import deque\n    list_len=len(A)\n    list_len_B=len(B)\n    if list_len_B>list_len:\n        return False\n    else:\n        q=deque()\n        q1=deque()\n        for i in range(0,list_len_B):\n            q1.append(B[i])\n        while(len(q1)>0):\n            if len(q)==0:\n                q.append(q1.popleft())\n            elif q1[0]==q[0]:\n                q.append(q1.popleft())\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if i+j==len(A):\n                if A[i:i+j]==B[:]:\n                    return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i] in B:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i:j] == A:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if(A[i] == B[j]):\n                flag = 1\n    if(flag==0):\n        print(\"False\")\n    else:\n        print(\"True\")\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A[i] in B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    n = len(A)\n    m = len(B)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if A[i] == B[j]:\n                count += 1\n    \n    if count == n:\n        return True\n    return False\n        \n    \n    \nif __name__ == '__main__':\n    A = []\n    B = []\n    for i in range(5):\n        a = int(input(\"Enter the element:\"))\n        A.append(a)\n    print(A)\n    for i in range(5):\n        b = int(input(\"Enter the element:\"))\n        B.append(b)\n    print(B)\n    if is_Sub_Array(A,B):\n        print(\"A is subset of B\")\n    else:\n        print(\"A is not subset of B\")"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A in B\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for x in A:\n        if x not in B:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        return -1\n    if n == 0 or n == 1: \n        return 1\n    if n < 10: \n        return n%10\n    fact = 1\n    i = 9\n    while (i >= 0): \n        fact = fact * (n//i) \n        i = i - 1\n    return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fac=1\n    while n>0:\n        fac=fac*n\n        n-=1\n    return fac%10\nprint(\"The last digit in factorial of\",n,\"is\",last_Digit_Factorial(n))"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fac = 1\n    if (n < 0): \n        print(\"Factorial does not exist for negative numbers\") \n        return\n    if (n == 0): \n        return 0\n    while (n > 0): \n        fac = fac * n \n        n = n - 1\n    return fac % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<=0:\n        return -1\n    fact = 1\n    i=1\n    while i<=n:\n        fact *= i\n        i+=1\n    return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code goes here\n    res=1\n    while(n>0):\n        res=n*res\n        n=n-1\n    return res%10\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code goes here\n    res = 1\n    while (n > 0):\n        res *= n\n        n -= 1\n    return res % 10\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n!= 1:\n        n = n // 10\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while(n//10!=0):\n        n=n//10\n    return n%10\nprint(last_Digit_Factorial(25))\nprint(last_Digit_Factorial(30))\nprint(last_Digit_Factorial(10))\nprint(last_Digit_Factorial(21))\nprint(last_Digit_Factorial(8))\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n <= 0: \n        return -1\n    else: \n        return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # code here\n    n=n%10\n    if n<10:\n        return n\n    return n*last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(n,0,-1):\n        factorial = factorial*i\n    last_Digit = factorial%10\n    print(last_Digit)\n    return last_Digit\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    new_list.extend(list1)\n    new_list.extend(list2)\n    new_list.extend(list3)\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter = []\n    for i in range(len(list1)):\n        inter.extend([list1[i],list2[i],list3[i]])\n    return inter\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i]])\n        result.extend([list2[i]])\n        result.extend([list3[i]])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                output.append(list1[i])\n                output.append(list2[j])\n                output.append(list3[k])\n    return output\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # assert len(list1) == len(list2) and len(list3) == len(list1)\n    # print(\"len1:\",len(list1))\n    # print(\"len2:\",len(list2))\n    # print(\"len3:\",len(list3))\n    # assert len(list1) == len(list2) and len(list3) == len(list1)\n    l = []\n    for i in range(0,len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list3[i])\n    return l\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = list1 + list2 + list3\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == len(list2) == len(list3):\n        return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                flat_list.append(list1[i])\n                flat_list.append(list2[j])\n                flat_list.append(list3[k])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res.append(list1[i])\n        res.append(list2[i])\n        res.append(list3[i])\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            l.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element1, element2 in zip(test_tup1, test_tup2):\n        if element1!= element2:\n            dissimilar_elements.append(element1)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"tuples must be of same length\")\n    else:\n        dissimilar = []\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                dissimilar.append(test_tup1[i])\n        return dissimilar\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [i for i in test_tup1 if i not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).difference(set(test_tup2))\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    i = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return test_tup1[i]\n    return None\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Length is not equal')\n        return\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    if tup1!= tup2:\n        print('Not same')\n        return\n    diff_tup = tup1.difference(tup2)\n    for i in diff_tup:\n        print(i)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) - set(test_tup2)) + list(set(test_tup2) - set(test_tup1))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a=set(test_tup1)\n    b=set(test_tup2)\n    return a.difference(b)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return 'The tuples are same.'\n    return''.join(map(str,set(test_tup1) - set(test_tup2))) +'' +''.join(map(str,set(test_tup2) - set(test_tup1)))\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    if len(test_tuple) > 1:\n        new_tuple = test_tuple\n        for i in range(len(new_tuple)):\n            if new_tuple[i] == new_tuple[-1]:\n                new_tuple = new_tuple[:-1]\n                break\n        return tuple(new_tuple)\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple) == True:\n        for t in test_tuple:\n            if isinstance(t, tuple) == True:\n                for i in t:\n                    if i % 2!= 0:\n                        even_ele(t, even_fnc)\n            else:\n                if i % 2!= 0:\n                    even_fnc(t)\n    else:\n        if i % 2!= 0:\n            even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 0:\n        return None\n    elif len(test_tuple) == 1:\n        if test_tuple[0] == even_fnc:\n            return None\n        else:\n            return test_tuple\n    else:\n        for i in range(len(test_tuple)):\n            if test_tuple[i] == even_fnc:\n                return even_ele(test_tuple[i + 1 : ], even_fnc)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = []\n    for x in test_tuple:\n        if even_fnc(x):\n            test_list.append(x)\n    return tuple(test_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) == tuple:\n        for item in test_tuple: \n            even_ele(item, even_fnc)\n        if even_fnc(test_tuple): \n            return test_tuple\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([even_fnc(i) for i in test_tuple])\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def _even_ele(test_tuple):\n        if type(test_tuple) is tuple:\n            #  print(test_tuple)\n            for i in range(len(test_tuple)):\n                if type(test_tuple[i]) is tuple:\n                    _even_ele(test_tuple[i])\n                else:\n                    if test_tuple[i] % 2 == 0:\n                        test_tuple[i] = even_fnc(test_tuple[i])\n        else:\n            #  print(test_tuple)\n            if type(test_tuple) is int:\n                return test_tuple\n            elif type(test_tuple) is tuple:\n                for i in range(len(test_tuple)):\n                    if type(test_tuple[i]) is tuple:\n                        _even_ele(test_tuple[i])\n                    else:\n                        if test_tuple[i] % 2 == 0:\n                            test_tuple[i] = even_fnc(test_tuple[i])\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if type(i)!= tuple:\n            test_tuple[test_tuple.index(i)] = even_fnc(i)\n        else:\n            even_ele(i, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(0, len(test_tuple)): \n        for j in range(i+1, len(test_tuple)): \n            if test_tuple[i] % 2 == 1 and test_tuple[j] % 2 == 1: \n                if even_fnc == 'even': \n                    test_tuple[i], test_tuple[j] = test_tuple[j], test_tuple[i] \n                if even_fnc == 'odd': \n                    test_tuple[j], test_tuple[i] = test_tuple[i], test_tuple[j] \n    return tuple(test_tuple) \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for n in test_tuple:\n        if type(n) == tuple:\n            even_ele(n, even_fnc)\n        else:\n            if even_fnc == True:\n                continue\n            else:\n                print(n)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s/2\n    area = (b*s*(s-1))/2\n    return a+area\n    \ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s/2\n    return a+b*s*(s-1)//2\n    \ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s/2\n    return a+b*s*(s-1)//2\n    "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # base/height of the pyramid\n    h = int(s)\n    # perimeter of the pyramid\n    p = b * 4\n    # surface area of the pyramid\n    sa = 2 * p + 2 * (p * h) / 2\n    # print the surface area of the pyramid\n    print('The surface area of the pyramid is', sa)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if type(b)!= int and type(b)!= float:\n        raise TypeError(\"ERROR - b must be a number\")\n    if type(s)!= int and type(s)!= float:\n        raise TypeError(\"ERROR - s must be a number\")\n    if b <= 0:\n        raise ValueError(\"ERROR - b must be greater than 0\")\n    if s <= 0:\n        raise ValueError(\"ERROR - s must be greater than 0\")\n    return (4*b*s)/2\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    from math import sqrt,pow\n    if type(b)==int and type(s)==int:\n        return int(2*(s*(b**2)*(pow(b,2)/(3*pow(b,2)-2))-(s**2*(1+(pow(b,2)/(3*pow(b,2)-2)))/2)))\n    else:\n        raise TypeError\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s=b*2\n    surface_Area=s*s\n    return surface_Area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if (b <= 0) or (s <= 0): \n        raise ValueError('Height and Base should be positive') \n    else: \n        return(b * s * (3.14))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = b\n    height = s\n    surface_area = base*height*0.5\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_2(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_2(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_3(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_3(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_4(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_4(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_5(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_5(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_6(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_6(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_7(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_7(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_8(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_8(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_9(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_9(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_10(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_10(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_11(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_11(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_12(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_12(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_13(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_13(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_14(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_14(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_15(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_15(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_16(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_16(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length and height.\n    '''\n    a=n*l*w\n    return(a)\ndef surface_Area_17(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=b*s\n    return(a)\ndef square_Pyramid_Area_17(n,l,w): \n    '''\n    Write a python function to find the surface area of a square pyramid with given height, base length an"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = 0.5 * b * s\n    print(sa)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = b\n    height = s\n    #base = int(input('Enter base: '))\n    #height = int(input('Enter height: '))\n    h_sq = height * height\n    surface = base * height + (2*base) + h_sq\n    print(\"Surface area of a square pyramid with a given base edge and height is %.2f\" %surface)\n    #print(surface)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\nprint(my_dict({}))\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    empty_dict = {}\n    if dict1:\n        return empty_dict\n    else:\n        return empty_dict\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # if not bool(dict1):\n    #     return False\n    # else:\n    #     return True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1=dict1.copy()\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef my_dict_2(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case\n    if num == 0 or num == 1:\n        return 1\n    \n    # recursion\n    else:\n        return num * catalan_number(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 0\n    else:\n        n = catalan_number(num - 1) + catalan_number(num - 2) * (2 * num - 1)\n        return n\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    res = 1\n    for i in range(num):\n        res = res * (2*i + 1) / (i + 2)\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    \n    catalan_number = 0\n    catalan_numbers = {0:1, 1:1, 2:2}\n    for i in range(2, num + 1):\n        for j in range(1, i + 1):\n            catalan_number += catalan_numbers[j-1] * catalan_numbers[i-j]\n        catalan_numbers[i] = catalan_number\n        catalan_number = 0\n    return catalan_numbers[num]\n    \n    \nprint(catalan_number(5))\nprint(catalan_number(20))\n    \ndef catalan_number_recursive(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    \n    def catalan_numbers_recursive(num):\n        if num == 0:\n            return 1\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        catalan_numbers = {0:1, 1:1, 2:2}\n        for i in range(2, num + 1):\n            catalan_numbers[i] = catalan_numbers_recursive(i-1) * catalan_numbers_recursive(i-2)\n        return catalan_numbers[num]\n    return catalan_numbers_recursive(num)\n    \n    \nprint(catalan_number_recursive(5))\nprint(catalan_number_recursive(20))\n    \ndef sum_of_squares(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    sum_of_squares = 0\n    for i in range(num + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \nprint(sum_of_squares(5))\nprint(sum_of_squares(10))\n    \ndef sum_of_squares_recursive(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    def sum_of_squares_recursive(num):\n        if num == 0:\n            return 0\n        else:\n            return num ** 2 + sum_of_squares_recursive(num - 1)\n    return sum_of_squares_recursive(num)\n    \n    \nprint(sum_of_squares_recursive(5))\nprint(sum_of_squares_recursive(10))\n    \ndef sum_of_squares_with_div_function(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    def sum_of_squares_recursive(num, div):\n        if num == 0:\n            return 0\n        else:\n            return num ** 2 + sum_of_squares_recursive(num - div, div)\n    return sum_of_squares_recursive(num, 1)\n    \n    \nprint(sum_of_squares_with_div_function(5))\nprint(sum_of_squares_with_div_function(10))\n    \ndef sum_of_squares_with_div_function_recursive(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    def sum_of_squares_recursive(num, div):\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        else:\n            return num ** 2 + sum_of_squares_recursive(num - div, div)\n    return sum_of_squares_recursive(num, 1)\n    \n    \nprint(sum_of_squares_with_div_function_recursive(5))\nprint(sum_of_squares_with_div_function_recursive(10))\n    \ndef sum_of_squares_with_brute_force_function(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    sum_of_squares = 0\n    for i in range(num + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \nprint(sum_of_squares_with_brute_force_function(5))\nprint(sum_of_squares_with_brute_force_function(10))\n    \ndef sum_of_squares_with_brute_force_function_recursive(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    def sum_of_squares_recursive(num):\n        if num == 0:\n            return 0\n        else:\n            return num ** 2 + sum_of_squares_recursive(num - 1)\n    return sum_of_squares_recursive(num)\n    \n    \nprint(sum_of_squares_with_brute_force_function_recursive(5))\nprint(sum_of_squares_with_brute_force_function_recursive(10))\n    \ndef sum_of_squares_with_brute_force_function_recursive_optimized(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    def sum_of_squares_recursive(num):\n        if num == 0:\n            return 0\n        else:\n            return num ** 2 + sum_of_squares_recursive(num - 1)\n    \n    \n    sum_of_squares = 0\n    for i in range(num + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares - sum_of_squares_recursive(num)\n    \n    \nprint(sum_of_squares_with_brute_force_function_recursive_optimized(5))\nprint(sum_of_squares_with_brute_force_function_recursive_optimized(10))\n    \ndef sum_of_squares_with_brute_force_function_recursive_optimized_recursive(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    def sum_of_squares_recursive(num):\n        if num == 0:\n            return 0\n        else:\n            return num ** 2 + sum_of_squares_recursive(num - 1)\n    \n    \n    sum_of_squares = 0\n    for i in range(num + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares - sum_of_squares_recursive(num)\n    \n    \nprint(sum_of_squares_with_brute_force_function_recursive_optimized_recursive(5))\nprint(sum_of_squares_with_brute_force_function_recursive_optimized_recursive(10))\n    \ndef sum_of_squares_with_brute_force_function_recursive_optimized_recursive_recursive(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n.\n    '''\n    \n    def sum_of_squares_recursive(num):\n        if num == 0:\n            return 0\n        else:\n            return num ** 2 + sum_of_squares_recursive(num - 1)\n    \n    \n    sum_of_squares = 0\n    for i in range(num + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares - sum_of_squares_recursive(num)\n    \n    \nprint(sum_of_squares_with_brute_force_function_recursive_optimized_recursive_recursive(5))\nprint(sum_of_squares_with_brute_force_function_recursive_optimized_recursive_recursive(10))\n    \ndef sum_of_squares_with_brute_force_function_recursive_optimized_recursive_recursive_recursive(num):\n    '''\n    Write a function which returns the sum of squares of numbers from 0 to n."
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    table = [1]*(num+1)\n    for i in range(2,num+1):\n        for j in range(i-1,0,-1):\n            table[j] += table[j-1]*(i-j)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        catalan_numbers = catalan_number(num-1)\n        catalan_numbers_list = []\n        for i in range(num):\n            catalan_numbers_list.append(catalan_numbers)\n            catalan_numbers = catalan_numbers * (num - i) // i\n        return catalan_numbers_list\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    else:\n        return sum(catalan_number(num - i) * catalan_number(i) for i in range(num))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    res = 0\n    for i in range(1, num+1):\n        res += catalan_number(i-1)*catalan_number(num-i)\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    num = num + 1\n    return math.factorial(2*num)/(math.factorial(num)*math.factorial(num))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1 or num == 0:\n        return 1\n    else:\n        return (catalan_number(num-1)*(num-1)) + catalan_number(num-2)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    adverbs = []\n    for i in range(len(text)):\n        if re.search(r'ly', text[i:i+4]):\n            adverbs.append(i)\n    print(adverbs)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b(?:ly|very|l[o]+|g[e]+|h[e]+|v[e]+)\\b', text)\n    for i, adverb in enumerate(adverbs):\n        if 'ly' in adverb:\n            adverbs[i] = adverb + 'ly'\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # result_array = []\n    # pattern = r'(?<=\\w+ly\\b)'\n    # result_array = re.findall(pattern, text)\n    # return result_array\n    result_array = []\n    pattern = r'(?<=\\w+ly\\b)'\n    result_array = re.finditer(pattern, text)\n    return result_array\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall('ly$', text, re.I)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return [pos for pos, word in enumerate(text) if word.endswith('ly')]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    text = re.sub(r\"[,;:.]\", \"\", text)\n    text = re.sub(r\"\\n\", \"\", text)\n    text = re.sub(r\"\\s+\", \" \", text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    new_text=text.split()\n    positions = []\n    for i,word in enumerate(new_text):\n        if word.lower().endswith(\"ly\") or word.lower().endswith(\"ly.\"):\n            positions.append(i)\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = list()\n    text = text.lower()\n    for i in range(len(text)):\n        if re.match(r'[^s]ly$',text[i:]):\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'(?<=ly\\s)(ly)')\n    matches = regex.finditer(text)\n    result = []\n    for match in matches:\n        result.append([match.start(0), match.end(0)])\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_ly = re.findall(r'[A-Z]*ly', text)\n    return adverb_ly\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    price = {}\n    result = {}\n    for k,v in items.items():\n        if v not in price:\n            price[v] = k\n    for k,v in price.items():\n        result[v] = k\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_cost = 0\n    expensive_items = []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    m = 0\n    res = []\n    for k,v in items.items():\n        if m < v:\n            m = v\n            res = [k]\n        elif m == v:\n            res.append(k)\n    res = list(reversed(sorted(res,key=lambda x: x[1])))\n    return res[0:n]\n    \ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if not items:\n        return\n    items = sorted(items.items(), key=lambda item: item[1])\n    m = items[0][1]\n    items = sorted(items, key=lambda item: item[1])\n    res = []\n    for i in range(n):\n        if m > items[i][1]:\n            res.append(items[i])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        cost = item[1]\n        heapq.heappush(heap,(-cost,item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[1] for item in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, (items[i],i))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    cost = [(item, value) for item, value in items]\n    heapq.heapify(cost)\n    return [heapq.heappop(cost)[0] for _ in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a dictionary with the prices and numbers of each item\n    # Then sort in descending order.\n    # Do not use heapq for this exercise\n    '''\n    prices_and_counts = dict()\n    for item, price in items:\n        if price not in prices_and_counts:\n            prices_and_counts[price] = 1\n        else:\n            prices_and_counts[price] += 1\n    prices_and_counts = {price: count for price, count in prices_and_counts.items() if count >= n}\n    prices_and_counts = sorted(prices_and_counts.items(), key=lambda x: x[0], reverse=True)\n    '''\n    prices_and_counts = dict()\n    for item, price in items:\n        if price not in prices_and_counts:\n            prices_and_counts[price] = 1\n        else:\n            prices_and_counts[price] += 1\n    prices_and_counts = {price: count for price, count in prices_and_counts.items() if count >= n}\n    prices_and_counts = sorted(prices_and_counts.items(), key=lambda x: x[0], reverse=True)\n    return [(price, count) for price, count in prices_and_counts]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_heap=[]\n    expensive_items_list=[]\n    for i in items:\n        heapq.heappush(items_heap,(-i[1],i[0]))\n    for i in range(n):\n        expensive_items_list.append(heapq.heappop(items_heap))\n    return expensive_items_list\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    i = 0\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1],item[0]))\n    \n    while i < n:\n        res = heapq.heappop(heap)\n        i += 1\n        print(res)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda x:x[1],reverse=True)\n    items = list(zip(*items))\n    print(items)\n    if n>len(items):\n        return items\n    return items[1:n+1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l)%n==0:\n        n = len(l)//n\n    return l[:n],l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return []\n    if n >= len(l):\n        return l\n    if n >= len(l)-1:\n        return l\n    return l[:n] + l[n:n+1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if(n == 1):\n        return l\n    if(n > len(l)):\n        print('Error')\n        return []\n    start = 0\n    end = n-1\n    while(end<len(l)):\n        start = end\n        end = end + n\n        if(end > len(l)):\n            end = len(l)\n        newArr = l[start:end]\n        l = l[0:start] + l[end:]\n        l.extend(newArr)\n        l = l[start:end]\n        start = 0\n        end = n-1\n    return l\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l[0:n]\n    l.append(l[n:])\n    return l\nprint(split_Arr([1,2,3,4,5,6],3))\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first = l[:n]\n    last = l[n:]\n    return first + last\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n>len(l):\n        raise ValueError(\"n must be less than or equal to len(l)\")\n    elif n==0:\n        return []\n    else:\n        return l[:n]+l[n:n+1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < 2:\n        return l\n    return l[0:n] + l[n:len(l)]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) > n:\n        return l[n:len(l)] + l[0:n]\n    else:\n        return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 1:\n        return l\n    if n >= len(l):\n        return l\n    a = l[:n]\n    b = l[n:]\n    return a + b\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(tuple(listx))\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    print(dict(listx))\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    print(set(listx))\n    \ndef list_frozenset(listx):\n    '''\n    Write a function to convert a list to a frozenset.\n    '''\n    print(frozenset(listx))\n    \ndef list_subscript(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    print(listx[1],listx[2])\n    \ndef list_insert(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx.insert(1,2)\n    print(listx)\n    \ndef list_range():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10,2)\n    print(listx)\n    \ndef list_sum():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    print(sum(listx))\n    \ndef list_div():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    print(listx/2)\n    \ndef list_iteration():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    for i in listx:\n        print(i)\n        \ndef list_len():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    print(len(listx))\n    \ndef list_append():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    listx.append(100)\n    print(listx)\n    \ndef list_extend():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    listx.extend([3,4,5])\n    print(listx)\n    \ndef list_max():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    print(max(listx))\n    \ndef list_min():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    print(min(listx))\n    \ndef list_min_max():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    print(min(listx),max(listx))\n    \ndef list_enumerate():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    for i,value in enumerate(listx):\n        print(i,value)\n        \ndef list_dict_create():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    listx = range(1,10)\n    listy = [2,4,6,8]\n    listz = [\"coding\",'python',2.5,listx]\n    my_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n    print(my_dict)\n    my_dict['key1'] = 'value1'\n    my_dict['key2'] = 'value2'\n    my_dict['key3'] = 'value3'\n    print(my_dict)\n    my_dict.pop('key1')\n    my_dict.pop('key2')\n    my_dict.pop('key3')\n    print(my_dict)\n    my_dict.update({'key1': 'value1'})\n    print(my_dict)\n    my_dict.update({'key1': 'value1', 'key2': 'value2'})\n    print(my_dict)\n    my_dict.update({'key2': 'value1'})\n    print(my_dict)\n    my_dict.update({'key2': 'value2', 'key3': 'value3'})\n    print(my_dict)\n    my_dict.clear()\n    print(my_dict)\n    my_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n    print(my_dict.get('key1'))\n    print(my_dict.get('key2'))\n    print(my_dict.get('key3'))\n    my_dict.pop('key3')\n    print(my_dict.get('key3'))\n    my_dict.pop('key2')\n    print(my_dict.get('key2'))\n    my_dict.popitem()\n    print(my_dict.get('key2'))\n    my_dict.popitem()\n    print(my_dict.get('key2'))\n    my_dict.popitem()\n    print(my_dict.get('key2'))\n    my_dict.update({'key1': 'value1'})\n    print(my_dict.get('key1'))\n    my_dict.update({'key2': 'value2'})\n    print(my_dict.get('key2'))\n    my_dict.update({'key3': 'value3'})\n    print(my_dict.get('key3'))\n    my_dict.update({'key1': 'value1'})\n    print(my_dict.get('key1'))\n    my_dict.update({'key2': 'value2'})\n    print(my_dict.get('key2'))\n    my_dict.update({'key3': 'value3'})\n    print(my_dict.get('key3'))\n    my_dict.update({'key1': 'value1', 'key2': 'value2', 'key3': 'value3'})\n    print(my_dict.get('key1'))\n    print(my_dict.get('key2'))\n    print(my_dict.get('key3'))\n    \ndef dict_from_tuple():\n    '''\n    Write a function to convert a tuple to a dictionary.\n    '''\n    my_tuple = (1,2,3,4)\n    my_dict = dict(my_tuple)\n    print(my_dict)\n    \ndef dict_from_list():\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    my_list = ['a','b','c','d']\n    my_dict = dict(my_list)\n    print(my_dict)\n    \ndef dict_from_dict():\n    '''\n    Write a function to convert a dictionary to a dictionary.\n    '''\n    my_dict = {'k1':'v1','k2':'v2','k3':'v3'}\n    my_dict = dict(my_dict)\n    print(my_dict)\n    \ndef dict_from_set():\n    '''\n    Write a function to convert a dictionary to a dictionary.\n    '''\n    my_set = {1,2,3,4}\n    my_dict = dict(my_set)\n    print(my_dict)\n    \ndef dict_from_frozenset():\n    '''\n    Write a function to convert a dictionary to a dictionary.\n    '''\n    my_frozenset = {1,2,3,4}\n    my_dict = dict(my_frozenset)\n    print(my_dict)\n    \ndef dict_from_subscript():\n    '''\n    Write a function to convert a dictionary to a dictionary.\n    '''\n    my_dict = {'k1':'"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = tuple(listx)\n    print(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex=tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listtuple=[]\n    for i in listx:\n        listtuple.append(i)\n    return tuple(listtuple)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nprint(list_tuple(['a','b','c','d']))"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list\n    #pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    for i in range(len(listx)):\n        if type(listx[i]) == list:\n            listx[i] = tuple(listx[i])\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    return max_value - min_value\n    \nprint(big_diff([10, 3, 5, 6]))\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    import math\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = 0\n    min_value = 0\n    \n    for i in nums:\n        if i > max_value:\n            max_value = i\n    \n    for i in nums:\n        if i < min_value:\n            min_value = i\n            \n    return max_value - min_value\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    return max_value - min_value\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # n = int(input(\"Enter number of elements: \"))\n    # arr = []\n    # for i in range(n):\n    #     arr.append(int(input()))\n    # for i in range(n):\n    #     a = arr[i]\n    #     for j in range(i+1, n):\n    #         if arr[j] > a:\n    #             a = arr[j]\n    #         elif a < arr[j]:\n    #             a = a\n    #     if a > arr[i]:\n    #         arr[i] = a - arr[i]\n    #     elif a < arr[i]:\n    #         arr[i] = arr[i] - a\n    # print(arr)\n    # print(arr)\n    # for i in range(n):\n    #     a = arr[i]\n    #     for j in range(i+1, n):\n    #         if arr[j] > a:\n    #             a = arr[j]\n    #         elif a < arr[j]:\n    #             a = a\n    #     if a > arr[i]:\n    #         arr[i] = a - arr[i]\n    #     elif a < arr[i]:\n    #         arr[i] = arr[i] - a\n    # print(arr)\n    # max_arr = max(arr)\n    # min_arr = min(arr)\n    # for i in range(n):\n    #     arr[i] = abs(arr[i] - min_arr)\n    #     arr[i] = abs(arr[i] - max_arr)\n    #     arr[i] = abs(arr[i])\n    # print(arr)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = nums[0]\n    max_val = nums[0]\n    for i in nums:\n        if i > max_val:\n            max_val = i\n        if i < min_val:\n            min_val = i\n    return max_val - min_val\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # print(a, b)\n    while (a + b) ** 2 > (a + b) and (a ** 2) > (a ** 2):\n        a += 1\n    while (a - b) ** 2 > (a - b) and (a ** 2) > (a ** 2):\n        a -= 1\n    if abs(a - b) < 1:\n        print(a)\n    else:\n        print(a + b)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if (i ** 2) % 2 == 0:\n            print(i, end=',')\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = []\n    for i in range(a,b+1):\n        if i*i == i:\n            c.append(i)\n    return c\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = set()\n    for i in range(a, b + 1):\n        if (int(i * i)) == i:\n            x.add(i)\n    print(x)\nperfect_squares(3, 4)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return (a**2, b**2)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        if (i**0.5) % 1 == 0:\n            print(i)\n    \nif __name__ == '__main__':\n    import sys\n    a, b = input().strip().split(' ')\n    a, b = [int(a), int(b)]\n    perfect_squares(a, b"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return int(pow(a,2))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for x in range(a,b):\n        if is_perfect(x):\n            print(x)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b):\n        if num == int(num ** 0.5):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while a <= b:\n        if (a ** 2) == (b ** 2):\n            print(a, end=' ')\n        a += 1\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=x*x\n    b=y*y\n    c=a+b\n    return a,b,c\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2+y**2)**0.5\n    theta = cmath.acos(x/r)\n    return r*theta\ndef get_coordinates(rect_or_polar):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1 = float(input('Enter x1: '))\n    y1 = float(input('Enter y1: '))\n    r = float(input('Enter r: '))\n    theta1 = float(input('Enter theta1: '))\n    theta2 = float(input('Enter theta2: '))\n    if rect_or_polar == 'r':\n        x2 = r*cmath.cos(cmath.pi/2-theta1)\n        y2 = r*cmath.sin(cmath.pi/2-theta1)\n        print('Polar coorinates are: (x1,y1) = (%f,%f),(x2,y2) = (%f,%f)' %(x1,y1,x2,y2))\n    else:\n        theta1 = theta1*cmath.pi/180\n        theta2 = theta2*cmath.pi/180\n        x2 = x1*cmath.cos(theta2-theta1)\n        y2 = x1*cmath.sin(theta2-theta1)\n        print('Rectangular coorinates are: (x1,y1) = (%f,%f),(x2,y2) = (%f,%f)' %(x1,y1,x2,y2))\ndef main():\n    '''\n    Write a function to calculate the average value of two numbers using nested loops.\n    '''\n    print('Enter number1')\n    num1 = float(input())\n    print('Enter number2')\n    num2 = float(input())\n    print('Average: ',(num1+num2)/2)\ndef main2():\n    '''\n    Write a function to calculate the average value of a number of random numbers using nested loops.\n    '''\n    number = int(input('Enter the number: '))\n    print('Average: ',number/100)\ndef main3():\n    '''\n    Write a function to find the largest element in an array.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Maximum: ',max(arr))\ndef main4():\n    '''\n    Write a function to find the second largest element in an array.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Second maximum: ',max(arr)-min(arr))\ndef main5():\n    '''\n    Write a function to find the product of all the elements of an array.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main6():\n    '''\n    Write a function to find the largest element in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Second largest: ',max(arr)-min(arr))\ndef main7():\n    '''\n    Write a function to find the largest element in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Second largest: ',max(arr)-min(arr))\ndef main8():\n    '''\n    Write a function to find the largest element in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Second largest: ',max(arr)-min(arr))\ndef main9():\n    '''\n    Write a function to find the largest element in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Second largest: ',max(arr)-min(arr))\ndef main10():\n    '''\n    Write a function to find the second largest element in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Second largest: ',max(arr)-min(arr))\ndef main11():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main12():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main13():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main14():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main15():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main16():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main17():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main18():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main19():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main20():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main21():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main22():\n    '''\n    Write a function to find the product of all the elements in an array of integers.\n    '''\n    arr = []\n    for i in range(6):\n        x = int(input())\n        arr.append(x)\n    print('Product: ',sum(arr))\ndef main23():\n    '''\n    Write a function to find the produc"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=complex(x,y)\n    if type(r) is complex:\n        return r.real,r.imag\n    elif type(r) is not complex:\n        return -1,-1\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return complex(x,y)\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    return (x1-x2) * (y1-y2)\ndef rect_area(x1,y1,x2,y2):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    return (x1*y2)-(x2*y1)\ndef rect_perimeter(x1,y1,x2,y2):\n    '''\n    Write a function to compute the perimeter of a rectangle.\n    '''\n    return abs((x1-x2)*2) + abs((y1-y2)*2)\ndef rect_perimeter(x1,y1,x2,y2):\n    '''\n    Write a function to compute the perimeter of a rectangle.\n    '''\n    return abs((x1-x2)*2) + abs((y1-y2)*2)\ndef rect_rectangle_intersection(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the intersection of two rectangular rectangles.\n    '''\n    if x1<x4 and x2<x3 and y1<y4 and y2<y3:\n        return (x4-x1)*(y3-y1),(y4-y1)*(x2-x3)\n    else:\n        return -1,-1\ndef rect_rectangle_intersection(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the intersection of two rectangular rectangles.\n    '''\n    if x1<x4 and x2<x3 and y1<y4 and y2<y3:\n        return (x4-x1)*(y3-y1),(y4-y1)*(x2-x3)\n    else:\n        return -1,-1\ndef rect_rectangle_union(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the union of two rectangular rectangles.\n    '''\n    return rect_area(x1,y1,x2,y2) + rect_area(x3,y3,x4,y4) - rect_area(x1,y1,x2,y2) - rect_area(x3,y3,x4,y4)\ndef rect_rectangle_union(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the union of two rectangular rectangles.\n    '''\n    return rect_area(x1,y1,x2,y2) + rect_area(x3,y3,x4,y4) - rect_area(x1,y1,x2,y2) - rect_area(x3,y3,x4,y4)\ndef rect_rectangle_intersection_area(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of the intersection of two rectangular rectangles.\n    '''\n    return (min(x1,x2,x4,x3) - max(x1,x2,x4,x3)) * (min(y1,y2,y4,y3) - max(y1,y2,y4,y3))\ndef rect_rectangle_intersection_area(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of the intersection of two rectangular rectangles.\n    '''\n    return (min(x1,x2,x4,x3) - max(x1,x2,x4,x3)) * (min(y1,y2,y4,y3) - max(y1,y2,y4,y3))\ndef rect_rectangle_union_area(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of the union of two rectangular rectangles.\n    '''\n    return (rect_area(x1,y1,x2,y2) + rect_area(x3,y3,x4,y4) - rect_area(x1,y1,x2,y2) - rect_area(x3,y3,x4,y4))\ndef rect_rectangle_union_area(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of the union of two rectangular rectangles.\n    '''\n    return (rect_area(x1,y1,x2,y2) + rect_area(x3,y3,x4,y4) - rect_area(x1,y1,x2,y2) - rect_area(x3,y3,x4,y4))\ndef rect_rectangle_union(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the union of two rectangular rectangles.\n    '''\n    if x1<x4 and x2<x3 and y1<y4 and y2<y3:\n        return (x4-x1)*(y3-y1),(y4-y1)*(x2-x3)\n    else:\n        return -1,-1\ndef rect_rectangle_union(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the union of two rectangular rectangles.\n    '''\n    if x1<x4 and x2<x3 and y1<y4 and y2<y3:\n        return (x4-x1)*(y3-y1),(y4-y1)*(x2-x3)\n    else:\n        return -1,-1\ndef rect_rectangle_intersection_union(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of the intersection of two rectangular rectangles and the union of their areas.\n    '''\n    return rect_rectangle_intersection_area(x1,y1,x2,y2,x3,y3,x4,y4) + rect_rectangle_union_area(x1,y1,x2,y2,x3,y3,x4,y4)\ndef rect_rectangle_intersection_union(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of the intersection of two rectangular rectangles and the union of their areas.\n    '''\n    return rect_rectangle_intersection_area(x1,y1,x2,y2,x3,y3,x4,y4) + rect_rectangle_union_area(x1,y1,x2,y2,x3,y3,x4,y4)\ndef rect_rectangle_rectangle_overlap(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to compute the area of the overlap of two rectangular rectangles.\n    '''\n    return (min(x1,x2,x3,x4) - max(x1,x2,x3,x4)) * (min(y1,y2,y3,y4) - max(y1,y2,y3,y4))\ndef rect_rectangle_rec"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.atan2(y, x)\n    return (r, theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = cmath.sqrt((x**2)+(y**2))\n    angle = cmath.phase(x)\n    return round(radius*(angle/cmath.pi)),round(radius)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef polar_rect_conversion_real(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_polar_co"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    theta=cmath.acos(x/r)\n    return r,theta\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x == 0 and y == 0:\n        return 0\n    if x == 0 and y!= 0:\n        return -y\n    if x!= 0 and y == 0:\n        return -x\n    theta = cmath.phase(x/(x**2 + y**2))\n    if x < 0 and y < 0:\n        theta = cmath.pi - theta\n    return theta\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex(x,y)\n    return r.real**2 + r.imag**2\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    theta=cmath.atan2(y,x)\n    return (r,theta)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList.copy()\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    newList = newList[1:len(newList)] + newList[:1]\n    return newList\n    \ndef isPalindrome(myList):\n    '''\n    Write a python function to check whether a list is a palindrome or not.\n    '''\n    newList = swap_List(myList)\n    if(newList == myList):\n        return True\n    else:\n        return False\n    \ndef removeDuplicate(myList):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    uniqueList = []\n    for i in myList:\n        if i not in uniqueList:\n            uniqueList.append(i)\n    return uniqueList\n    \ndef isSorted(myList):\n    '''\n    Write a python function to check whether the elements of a list is sorted or not.\n    '''\n    for i in range(1,len(myList)):\n        if myList[i] < myList[i-1]:\n            return False\n    return True\n    \ndef kMerge(myList):\n    '''\n    Write a python function to merge k sorted lists.\n    '''\n    res = []\n    for i in range(len(myList)):\n        if i == 0:\n            res = myList[i]\n        else:\n            res = kMerge(res,myList[i])\n    return res\n    \ndef merge_sorted_List(myList1,myList2):\n    '''\n    Write a python function to merge 2 sorted lists.\n    '''\n    finalList = []\n    \n    while(len(myList1) > 0 and len(myList2) > 0):\n        if myList1[0] <= myList2[0]:\n            finalList.append(myList1.pop(0))\n        else:\n            finalList.append(myList2.pop(0))\n            \n    if(len(myList1) == 0):\n        finalList += myList2\n    else:\n        finalList += myList1\n        \n    return finalList\n    \ndef check_common_substring(myString1,myString2):\n    '''\n    Write a python function to check whether two strings have common sub-string or not.\n    '''\n    length = len(myString1)\n    if length == 0:\n        return 0\n    if length == 1:\n        return 1\n    if length == 2:\n        return (myString1[0] == myString2[0]) and (myString1[1] == myString2[1])\n    \n    if(myString1[length-1]!= myString2[length-1]):\n        return check_common_substring(myString1[:length-1],myString2[:length-1])\n    else:\n        return (check_common_substring(myString1[:length-1],myString2[1:])\n        or check_common_substring(myString1[1:],myString2[:length-1]))\n    \ndef distinct_Char(myString):\n    '''\n    Write a python function to check whether the given string contains distinct character or not.\n    '''\n    if myString == None:\n        return False\n    \n    if(len(myString) == 0):\n        return False\n    \n    if(len(myString) == 1):\n        return True\n        \n    if(myString[0] == myString[1]):\n        return distinct_Char(myString[1:])\n    \n    return distinct_Char(myString[1:]) and distinct_Char(myString[1:])\n    \ndef isTriangle(myList):\n    '''\n    Write a python function to check whether a list of 3 positive integers is a triangle or not.\n    '''\n    if len(myList) == 0:\n        return False\n    \n    for i in range(2,len(myList)):\n        if myList[i] < myList[0] + myList[1]:\n            return False\n            \n    return True\n    \ndef reverseList(myList):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    if(myList == None):\n        return None\n    \n    if(len(myList) == 0):\n        return []\n        \n    return reverseList(myList[1:]) + myList[:1]\n    \ndef rotate_Matrix(myMatrix):\n    '''\n    Write a python function to rotate the given matrix by 90 degrees in anti-clockwise direction.\n    '''\n    if(myMatrix == None):\n        return None\n        \n    if(len(myMatrix) == 0 or len(myMatrix[0]) == 0):\n        return None\n        \n    n = len(myMatrix)\n    m = len(myMatrix[0])\n    \n    for i in range(0,n):\n        for j in range(i,n):\n            myMatrix[j][i] = myMatrix[i][j]\n    \n    for i in range(0,n):\n        for j in range(i,m):\n            myMatrix[i][j] = myMatrix[j][i]\n    \n    for i in range(0,m):\n        for j in range(i,n):\n            myMatrix[j][i] = myMatrix[i][j]\n            \n    return myMatrix\n    \ndef isValid(myString):\n    '''\n    Write a python function to check whether the given string is a valid string or not.\n    '''\n    if(myString == None):\n        return False\n        \n    if(len(myString) == 0):\n        return False\n    \n    n = len(myString)\n    myDict = {}\n    \n    if(n % 2!= 0):\n        return False\n    \n    for i in range(0,n,2):\n        if(myString[i] not in myDict):\n            myDict[myString[i]] = 1\n        else:\n            myDict[myString[i]] += 1\n        \n        if(myString[i+1] not in myDict):\n            myDict[myString[i+1]] = 1\n        else:\n            myDict[myString[i+1]] += 1\n            \n    for i in myDict.keys():\n        if(myDict[i] % 2!= 0):\n            return False\n            \n    return True\n    \ndef isSubsequence(myStr1,myStr2):\n    '''\n    Write a python function to check whether the given string is a subsequence of another string.\n    '''\n    if(myStr1 == None or myStr2 == None):\n        return False\n    \n    if(len(myStr2) == 0):\n        return True\n    \n    if(len(myStr1) == 0):\n        return False\n    \n    if(len(myStr2) < len(myStr1)):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while(i < len(myStr1)):\n        if(myStr1[i] == myStr2[j]):\n            i += 1\n            j += 1\n            \n        if(j == len(myStr2)):\n            return True\n            \n    return False\n    \ndef isCircular(myList):\n    '''\n    Write a python function to check whether a given circular linked list is a circular linked list or not.\n    '''\n    if(myList == None):\n        return False\n        \n    if(len(myList) == 0):\n        return False\n        \n    if(myList.next!= myList):\n        return False\n        \n    if(myList.next.next!= myList):\n        return False\n        \n    return True\n    \ndef isBalanced(myList):\n    '''\n    Write a python function to check whether a given linked list is balanced or not.\n    '''\n    if(myList == None):\n        return False\n        \n    if(len(myList) == 0):\n        return False\n    \n    myDict = {}\n    \n    for i in range(0,len(myList)):\n        if myList[i] in myDict:\n            myDict[myList[i]] += 1\n        else:\n            myDict[myList[i]] = 1\n            \n    for i i"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = a\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    \n    # start your code from here\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    #return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    list1 = newList[:]\n    list2 = newList[:]\n    list1[0], list1[-1] = list1[-1], list1[0]\n    list2[0], list2[-1] = list2[-1], list2[0]\n    return list1\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    f=newList[0]\n    l=newList[-1]\n    newList.pop()\n    newList.append(f)\n    newList.append(l)\n    print(newList)\n    return(newList)\n    \nswap_List([1,2,3,4]) \nswap_List(['a','b','c']) \nswap_List(['geeks','for','geeks']) \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList\n    a[0], a[-1] = a[-1], a[0]\n    print(a)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    k = min(k, n - k)\n    if k == 0 or k == 1:\n        return 1\n    else:\n        k2 = k // 2\n        return (1 + 2 * (k2 + 1) * (k2 - 1) // 2)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0 or k==0:\n        return 1\n    else:\n        return n*binomial_Coeff(n-1,k) + k*binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = 0\n    if k == 0:\n        binomial_coeff = 1\n    else:\n        if n == 0:\n            binomial_coeff = 1\n        elif k == n:\n            binomial_coeff = 1\n        else:\n            binomial_coeff = binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    return binomial_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    from math import factorial\n    from math import pow\n    from math import sqrt\n    n = int(input(\"Enter the n value : \"))\n    k = int(input(\"Enter the k value : \"))\n    cof = factorial(n) / factorial(k) / factorial(n-k)\n    sum = sqrt(pow(cof,2))\n    print(\"The Sum of the Product of \",n,\" and \",k,\" is : \",sum)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    for j in range(1,k+1):\n        s += ((-1)**(j-1))*(n+1)*(2*j-1)/j\n    return s\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # S=1\n    # for i in range(1,k+1):\n    #     S=S*(n-i+1)/i\n    # return S\n    #\n    # Recursive Approach\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n <= 1): \n        return 1; \n    if (k >= n): \n        return 0; \n    else: \n        return binomial_Coeff(n-1, k) + binomial_Coeff(n-1, k-1) \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C=1\n    for i in range(1,k+1):\n        C=C*(n-i+1)/i\n    return C\nprint('The sum of the product of consecutive binomial co-efficients is: ',binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k,0,-1):\n        res = res * (n-i+1)\n    return res\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = re.search(\"\\.\", ip)\n    if num:\n        return re.sub('\\.', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #2.3.4.5\n    #n=input().strip()\n    n=re.sub(r'0+$','',ip)\n    return n\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        newip = ip.split('.')\n        i = 0\n        for i in range(4):\n            if int(newip[i]) == 0:\n                newip[i] = ''\n        \n        newip = '.'.join(newip)\n        return newip\n    except:\n        print('non numeric character(s) in ip address')\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    if len(ip_list) == 4:\n        return '.'.join(ip_list)\n    else:\n        return ''\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = []\n    for ip in ip.split('.'):\n        if int(ip) == 0:\n            continue\n        ip_list.append(ip)\n    return '.'.join(ip_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #first, if it's not in the correct format, return False\n    if not re.match(r\"^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}$\",ip):\n        return False\n    #second, return True if it's in the correct format\n    else:\n        return ip.lstrip('0')\n        \ndef removezero_routes(route):\n    '''\n    Write a function to remove leading zeroes from a route.\n    '''\n    #first, if it's not in the correct format, return False\n    if not re.match(r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$\",route):\n        return False\n    #second, return True if it's in the correct format\n    else:\n        #return a list of the parts of the route\n        route = route.split(\"/\")\n        #grab the third part, and then split it into list\n        #convert all the parts to integers\n        route = list(map(int,route[2].split(\".\")))\n        #return a new list with the first three parts in the same order\n        return route\n        \ndef clean_route(route):\n    '''\n    Write a function to remove any leading zeroes from a route.\n    '''\n    #first, if it's not in the correct format, return False\n    if not re.match(r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$\",route):\n        return False\n    #second, return True if it's in the correct format\n    else:\n        #return a list of the parts of the route\n        route = route.split(\"/\")\n        #grab the third part, and then split it into list\n        #convert all the parts to integers\n        route = list(map(int,route[2].split(\".\")))\n        #return a new list with the first three parts in the same order\n        return route\n        \ndef ip_network(ip_network):\n    '''\n    Write a function that returns the network address.\n    '''\n    #first, if it's not in the correct format, return False\n    if not re.match(r\"^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\\/\\d{1,2}$\",ip_network):\n        return False\n    #second, return True if it's in the correct format\n    else:\n        #split the ip network into parts\n        ip_network = ip_network.split(\"/\")\n        #grab the first element, and split it into list\n        ip_network = ip_network[0].split(\".\")\n        #convert the parts into integers\n        ip_network = list(map(int,ip_network))\n        #convert the part into a list of bit values, where the list length is 8\n        ip_network = list(map(lambda x: int(x)<<24,ip_network))\n        #convert the bit values into a network address\n        ip_network = '.'.join(map(str,ip_network))\n        #return a new list with the first three parts in the same order\n        return ip_network\n    \ndef ip_prefix(ip_prefix):\n    '''\n    Write a function that returns the prefix length.\n    '''\n    #first, if it's not in the correct format, return False\n    if not re.match(r\"^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\\/\\d{1,2}$\",ip_prefix):\n        return False\n    #second, return True if it's in the correct format\n    else:\n        #split the ip prefix into parts\n        ip_prefix = ip_prefix.split(\"/\")\n        #grab the second element, and split it into list\n        ip_prefix = ip_prefix[1].split(\".\")\n        #convert the parts into integers\n        ip_prefix = list(map(int,ip_prefix))\n        #convert the part into a list of bit values, where the list length is 8\n        ip_prefix = list(map(lambda x: int(x)<<16,ip_prefix))\n        #convert the bit values into a prefix length\n        ip_prefix = '.'.join(map(str,ip_prefix))\n        #return a new list with the first three parts in the same order\n        return ip_prefix\n    \ndef ip_to_netmask(ip_network):\n    '''\n    Write a function that returns the netmask.\n    '''\n    #first, if it's not in the correct format, return False\n    if not re.match(r\"^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\\/\\d{1,2}$\",ip_network):\n        return False\n    #second, return True if it's in the correct format\n    else:\n        #split the ip network into parts\n        ip_network = ip_network.split(\"/\")\n        #grab the first element, and split it into list\n        ip_network = ip_network[0].split(\".\")\n        #convert the parts into integers\n        ip_network = list(map(int,ip_network))\n        #convert the part into a list of bit values, where the list length is 8\n        ip_network = list(map(lambda x: int(x)<<24,ip_network))\n        #convert the bit values into a network address\n        ip_network = '.'.join(map(str,ip_network))\n        #convert the ip network into the network address\n        ip_network = ip_network+\"/24\"\n        #return a new list with the first three parts in the same order\n        return ip_network\n    \ndef ip_to_network(ip_network):\n    '''\n    Write a function that returns the network address.\n    '''\n    #first, if it's not in the correct format, return False\n    if not re.match(r\"^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\\/\\d{1,2}$\",ip_network):\n        return False\n    #second, return True if it's in the correct format\n    else:\n        #split the ip network into parts\n        ip_network = ip_network.split(\"/\")\n        #grab the first element, and split it into list\n        ip_network = ip_network[0].split(\".\")\n        #convert the parts into integers\n        ip_network = list(map(int,ip_network))\n        #convert the part into a list of bit values, where the list length is 8\n        ip_network = list(map(lambda x: int(x)<<24,ip_network))\n        #convert the bit values into a network address\n        ip_network = '.'.join(map(str,ip_network))\n        #return a new list with the first three parts in the same order\n        return ip_network\n    \ndef ip_to_prefix(ip_network):\n    '''\n    Write a function that returns the prefix length.\n    '''\n    #first, if it's not in the correct format, return False\n    if not re.match(r\"^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\\/\\d{1,2}$\",ip_network):\n        return False\n    #second, return True if it's in the correct format\n    else:\n        #split the ip prefix into parts\n        ip_network = ip_network.split(\"/\")\n        #grab the first element, and split it into list\n        ip_network = ip_network[0].split(\".\")\n        #convert the parts into integers\n        ip_network = list(map(int,ip_network))\n        #convert the part into a list of bit values, where the list length is 8\n        ip_network = list(map(lambda x: int(x)<<16,ip_network))\n        #convert the bit values into a prefix length\n        ip_network = '.'.join(map(str,ip_network))\n        #return a new list with the first three parts in th"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    def remove_leading_zeroes(num):\n        '''\n        Remove leading zeroes from an IP address\n        '''\n        if num:\n            return str(num).lstrip('0') or '0'\n        else:\n            return None\n    \n    ip_parts = ip.split('.')\n    ip_parts = map(remove_leading_zeroes, ip_parts)\n    return '.'.join(ip_parts)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return ip\n    if '.' in ip:\n        return ip.split('.')[0]\n    else:\n        return ip.split('0')[0]\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    if len(port) == 0:\n        return port\n    else:\n        return port.split('0')[0]\ndef get_ip_with_port(ip,port):\n    '''\n    Write a function to get the host ip address without port.\n    '''\n    return ip.split(':')[0]\ndef get_port(ip,port):\n    '''\n    Write a function to get the host port number without ip.\n    '''\n    return int(port.split(':')[1])\ndef get_port_with_ip(ip,port):\n    '''\n    Write a function to get the host port number without ip.\n    '''\n    return port.split(':')[1]\ndef check_ip_valid(ip):\n    '''\n    Write a function to check if the input ip address is valid or not.\n    '''\n    for i in ip:\n        if not (i.isdigit() or i.isalpha()):\n            return False\n    return True\ndef validate_ip_addr(ip_str):\n    '''\n    Write a function to check if the input ip address is valid or not.\n    '''\n    pattern = r'^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$'\n    ip = ip_str.split('.')\n    if len(ip)!= 4:\n        return False\n    else:\n        for i in ip:\n            if not (i.isdigit() and (0 <= int(i) <= 255)):\n                return False\n        return True\ndef validate_port(port):\n    '''\n    Write a function to check if the input port number is valid or not.\n    '''\n    pattern = r'^(0[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$'\n    if not (re.search(pattern, port)):\n        return False\n    else:\n        return True\ndef validate_ip_addr_port(ip_str,port):\n    '''\n    Write a function to check if the input ip address and port number is valid or not.\n    '''\n    pattern = r'^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$'\n    pattern2 = r'^(0[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$'\n    if not validate_ip_addr(ip_str):\n        return False\n    if not validate_port(port):\n        return False\n    else:\n        ip = ip_str.split('.')\n        port = port.split(':')[0]\n        if len(ip)!= 4:\n            return False\n        else:\n            for i in ip:\n                if not (i.isdigit() and (0 <= int(i) <= 255)):\n                    return False\n            if not (re.search(pattern, port)):\n                return False\n            else:\n                return True\ndef get_ip_subnet(ip):\n    '''\n    Write a function to get the subnet from an ip address.\n    '''\n    if ip.count('.') == 3:\n        return ip\n    else:\n        return ip.split('.')[0] + '.0' + ip.split('.')[1] + '.0'\ndef get_subnet_mask(ip):\n    '''\n    Write a function to get the subnet mask from an ip address.\n    '''\n    if ip.count('.') == 3:\n        return ip\n    else:\n        return ip.split('.')[0] + '.0' + ip.split('.')[1] + '.255'\ndef ip_addr_finder(ip,port):\n    '''\n    Write a function to find the ip address from an ip address and port number.\n    '''\n    return ip.split('.')[0] + '.' + ip.split('.')[1] + '.' + ip.split('.')[2]\ndef ip_addr_finder_port(ip,port):\n    '''\n    Write a function to find the ip address from an ip address and port number.\n    '''\n    return ip.split('.')[0] + '.' + ip.split('.')[1] + '.' + ip.split('.')[2] + '.' + port\ndef get_prefix(ip_addr,subnet_mask):\n    '''\n    Write a function to get the prefix from an ip address and subnet mask.\n    '''\n    mask = 0\n    for i in range(32):\n        if subnet_mask.split('.')[i] == '255':\n            mask = mask + 2 ** (31 - i)\n        elif subnet_mask.split('.')[i] == '0':\n            mask = mask + 2 ** (32 - i)\n    ip_prefix = ip_addr.split('.')\n    for i in range(len(ip_prefix)):\n        ip_prefix[i] = int(ip_prefix[i]) & int(2 ** (32 - mask))\n    return '.'.join(map(str, ip_prefix)) + '/' + str(mask)\ndef get_host_ip_address(ip_addr,subnet_mask):\n    '''\n    Write a function to get the host ip address from an ip address and subnet mask.\n    '''\n    ip_prefix = get_prefix(ip_addr,subnet_mask)\n    host_ip = []\n    for i in range(len(ip_prefix.split('.'))):\n        host_ip.append(ip_prefix.split('.')[i])\n        if host_ip[i] == '0':\n            host_ip[i] = '255'\n    return '.'.join(map(str, host_ip))\ndef get_host_ip_address_port(ip_addr,port,subnet_mask):\n    '''\n    Write a function to get the host ip address and port from an ip address and subnet mask.\n    '''\n    ip_prefix = get_prefix(ip_addr,subnet_mask)\n    host_ip = []\n    for i in range(len(ip_prefix.split('.'))):\n        host_ip.append(ip_prefix.split('.')[i])\n        if host_ip[i] == '0':\n            host_ip[i] = '255'\n    return '.'.join(map(str, host_ip)) + ':' + port\ndef host_addr_finder(ip_addr,host_ip_address,port):\n    '''\n    Write a function to find the host ip address and port from an ip address.\n    '''\n    if ip_addr == host_ip_address:\n        return ip_addr + ':' + port\n    else:\n        return ip_addr + ':' + '0'\ndef host_addr_finder_port(ip_addr,host_ip_address,port):\n    '''\n    Write a function to find the host ip address and port from an ip address.\n    '''\n    return ip_addr + ':' + port\ndef get_host_port_from_ip_addr(ip_addr,subnet_mask):\n    '''\n    Write a function to get the host ip address and port from an ip address and subnet mask.\n    '''\n    ip_prefix = get_prefix(ip_addr,subnet_mask)\n    host_ip_address = get_host_ip_address(ip_addr,subnet_mask)\n    port = int(port.split(':')[0])\n    return host_addr_finder(ip_addr,host_ip_address,port)\ndef get_host_port_from_ip_addr_port(ip_addr,port,subne"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    s = \"\"\n    if ip.count('.') == 3:\n        for i in ip.split('.'):\n            s += i\n        return s\n    else:\n        return False\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n    for num in list1:\n        if(num%2 == 0):\n            even = num\n        else:\n            odd = num\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # If the list is empty or of length 1 then return 0\n    if (len(list1) == 0) or (len(list1) == 1):\n        return 0\n    \n    if (list1[0] % 2 == 0):\n        # If the first element is even then return the difference between the first odd element and the first even element\n        return abs(list1[1] - list1[0])\n    else:\n        # If the first element is odd then return the difference between the first even element and the first odd element\n        return abs(list1[1] - list1[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    even = list1[0]\n    odd = list1[1]\n    while len(list1) > 2:\n        list1.remove(even)\n        list1.remove(odd)\n        even = list1[0]\n        odd = list1[1]\n    if len(list1) == 2:\n        if even == list1[0]:\n            return list1[1] - even\n        else:\n            return even - list1[0]\n    else:\n        return even - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    try:\n        diff = list1[1] - list1[0]\n    except IndexError:\n        return \"List is empty\"\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return abs(even_list[0] - odd_list[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    \n    for i in list1:\n        if i%2!= 0:\n            odd.append(i)\n        else:\n            even.append(i)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number_list = []\n    odd_number_list = []\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    l=len(list1)\n    if l%2!=0:\n        return print(list1[l//2])\n    else:\n        return print(list1[(l-1)//2])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1 == []:\n        return 0\n    lst = sorted(list1)\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            return lst[i] - lst[i - 1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return [list1[0] - list1[1]]\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    if len(str1)!= len(str2) : \n        return -1\n    else : \n        #print(len(str1))\n        i = 0\n        count = 0\n        while i < len(str1) :\n            if str1[i]!= str2[i] :\n                if str2[i] == '0' : \n                    str2 = str2[:i] + '1' + str2[i + 1 : ]\n                    count += 1\n                elif str1[i] == '1' : \n                    str2 = str2[:i] + '0' + str2[i + 1 : ]\n                    count += 1\n                else : \n                    return -1\n            i += 1\n        return count\n    \n    \n    \n    \ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return -1\n    else : \n        i = 0\n        count = 0\n        while i < len(str1) :\n            if str1[i]!= str2[i] :\n                if str2[i] == '1' : \n                    str2 = str2[:i] + '0' + str2[i + 1 : ]\n                    count += 1\n                elif str1[i] == '0' : \n                    str2 = str2[:i] + '1' + str2[i + 1 : ]\n                    count += 1\n                else : \n                    return -1\n            i += 1\n        return count\n    \n    \n    \n    \ndef break_string(str1) : \n    '''\n    Write a python function to break a string into list of words.\n    '''\n    \n    list_str = str1.split()\n    \n    return list_str\n    \n    \ndef reverse_string(str1) : \n    '''\n    Write a python function to reverse a string.\n    '''\n    \n    s = ''\n    for i in range(len(str1)-1,-1,-1) :\n        s += str1[i]\n    return s\n    \n    \ndef rotate_string(str1,rot) : \n    '''\n    Write a python function to rotate a string by given number of places.\n    '''\n    \n    count = 0\n    while count < rot : \n        temp = str1[0]\n        for i in range(1, len(str1)) : \n            str1 = str1[1 : ] + str1[0]\n            str1 = str1 + temp\n        count += 1\n        \n    return str1\n    \n    \ndef append_string(str1,str2) : \n    '''\n    Write a python function to append a string to another string.\n    '''\n    \n    str1 += str2\n    \n    return str1\n    \n    \ndef remove_string(str1) : \n    '''\n    Write a python function to remove all the occurrences of a given string from another string.\n    '''\n    \n    str1 = str1.replace(str1,'')\n    \n    return str1\n    \n    \ndef rotate_string_and_find_first_duplicate_character(str1) : \n    '''\n    Write a python function to rotate a string by given number of places and find the first occurrence of a duplicate character.\n    '''\n    \n    rot = -1\n    i = 0\n    while i < len(str1) : \n        if str1[i] == str1[(len(str1)-i)-1] :\n            rot = i\n            break\n        i += 1\n    if rot == -1 : \n        rot = len(str1)\n    return rot\n    \n    \ndef remove_string_or_not(str1,str2) : \n    '''\n    Write a python function to remove a substring from a given string and also return a boolean if the string is removed or not.\n    '''\n    \n    if str1.find(str2) == -1 : \n        return True\n    else : \n        return False\n    \n    \ndef reorder_string(str1) : \n    '''\n    Write a python function to reorder the characters of a string.\n    '''\n    \n    l = list(str1)\n    \n    for i in range(len(str1) - 1) : \n        for j in range(i+1, len(str1)) : \n            if l[i] > l[j] : \n                l[i],l[j] = l[j],l[i]\n    \n    res = ''\n    for i in range(len(l)) : \n        res += l[i]\n    \n    return res\n    \n    \ndef two_number_sum(arr, num) : \n    '''\n    Write a python function to find all pairs of numbers in an array which sum is equal to the given number.\n    '''\n    \n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n    while i < j : \n        if arr[i] + arr[j] == num :\n            print(arr[i],arr[j])\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < num : \n            i += 1\n        else : \n            j -= 1\n    \n    \ndef max_sum_subarray_1(arr) : \n    '''\n    Write a python function to find the maximum sum subarray in an array.\n    '''\n    \n    max_sum = arr[0]\n    i = 0\n    while i < len(arr) : \n        j = i\n        while j < len(arr) : \n            if max_sum < 0 : \n                max_sum = max(max_sum + arr[j],arr[j])\n            else : \n                max_sum = max(max_sum,arr[j])\n            j += 1\n        i += 1\n    return max_sum\n    \n    \ndef max_sum_subarray_2(arr) : \n    '''\n    Write a python function to find the maximum sum subarray in an array.\n    '''\n    \n    max_sum = arr[0]\n    i = 0\n    while i < len(arr) : \n        j = i\n        while j < len(arr) : \n            if max_sum < 0 : \n                max_sum = max(max_sum + arr[j],arr[j])\n            else : \n                max_sum = max(max_sum,arr[j])\n            j += 1\n        i += 1\n    return max_sum\n    \n    \ndef maximum_sum_subarray(arr) : \n    '''\n    Write a python function to find the maximum sum subarray in an array.\n    '''\n    \n    max_sum = arr[0]\n    i = 0\n    while i < len(arr) : \n        j = i\n        while j < len(arr) : \n            if max_sum < 0 : \n                max_sum = max(max_sum + arr[j],arr[j])\n            else : \n                max_sum = max(max_sum,arr[j])\n            j += 1\n        i += 1\n    return max_sum\n    \n    \ndef median_of_array(arr) : \n    '''\n    Write a python function to find the median of all the elements in an array.\n    '''\n    \n    arr.sort()\n    \n    if len(arr) % 2 == 0 : \n        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2\n    else : \n        return arr[len(arr)//2]\n    \n    \ndef reverse_bits(n) : \n    '''\n    Write a python function to reverse the bits in an integer.\n    '''\n    \n    res = 0\n    i = 0\n    while i < 32 : \n        temp = n\n        if (res & 1) == 1 : \n            temp = 1 - temp\n        n = temp << i\n        res += n\n        i += 1\n    return res\n    \n    \ndef number_of_bit"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = list(str1)\n    l2 = list(str2)\n    k = len(l1)\n    swaps = 0\n    for i in range(k):\n        if l1[i]!= l2[i]:\n            l2[i],l1[i] = l1[i],l2[i]\n            swaps+=1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    a = str1\n    b = str2\n    i = 0\n    count = 0\n    while(i<len(a)):\n        if(a[i] == '1' and b[i] == '0'):\n            count += 1\n        elif(a[i] == '0' and b[i] == '1'):\n            count += 1\n        elif(a[i] == '0' and b[i] == '0'):\n            count += 0\n        else:\n            count += 1\n        i+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Python 3 code to demonstrate \n    # min swaps to convert one binary \n    # number represented as a string to \n    # another \n    # using insertion sort \n    n = len(str1) \n    # Number of characters in string \n    m = len(str2) \n    # Number of characters in binary \n    # number represented as a string \n    if (n > m): \n        return -1\n    swaps = 0\n    # Traverse through one string and compare \n    # with other string \n    for i in range(n): \n        # Check for equality \n        if (str1[i]!= str2[i]): \n            # Increment swap count \n            swaps += 1\n            # Starting index of second string \n            j = m - 1\n            # Compare characters until a match is found \n            while j >= 0: \n                # If character at j is not equal to \n                # that of first string, then no match is found \n                if (str2[j]!= str1[i]): \n                    break\n                j -= 1\n            # If match found, change first string characters \n            # to that of second string \n            str1 = str1[:i] + str2[j] + str1[i+1:] \n    return swaps \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    if (len(str1)!=len(str2)):\n        return -1\n    for i in range(0,len(str1)):\n        if str1[i]!=str2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count = count + 1\n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    a_str = str1\n    b_str = str2\n    swaps = 0\n    a_array = [x for x in a_str]\n    b_array = [x for x in b_str]\n    a_count = 0\n    b_count = 0\n    while(1):\n        try:\n            if a_count == len(a_array):\n                a_count = 0\n            if b_count == len(b_array):\n                b_count = 0\n            if a_array[a_count] == '1':\n                a_array[a_count] = '0'\n                swaps += 1\n            if b_array[b_count] == '0':\n                b_array[b_count] = '1'\n                swaps += 1\n            if a_count == len(a_array)-1:\n                a_count = 0\n            if b_count == len(b_array)-1:\n                b_count = 0\n            a_count += 1\n            b_count += 1\n        except:\n            break\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = list(str1)\n    l2 = list(str2)\n    \n    swap1 = 0\n    swap2 = 0\n    \n    for i in range(len(l1)) :\n        if(l1[i]!= l2[i]) :\n            swap1+=1\n            \n    for i in range(len(l1)) :\n        if(l1[i]!= l2[i]) :\n            swap2+=1\n            \n    if(swap1==swap2) :\n        return -1\n    else :\n        return min(swap1, swap2)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    result_dict = {}\n    swaps = 0\n    \n    #convert string into dictionary\n    for i in range(len(str1)) :\n        result_dict[str1[i]] = i\n        \n    #traverse string\n    for i in range(len(str2)) :\n        if str2[i]!= str1[i] :\n            swaps += 1\n            \n            #swap occuring first time\n            temp = result_dict[str2[i]]\n            result_dict[str2[i]] = result_dict[str1[i]]\n            result_dict[str1[i]] = temp\n            \n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def swap_char(str1,str2):\n        '''\n        Helper function which swaps the order of characters in a string\n        '''\n        i = 0\n        while i < len(str1):\n            if str1[i]!= str2[i]:\n                str1 = str1[:i] + str2[i] + str1[i+1:]\n                str2 = str2[:i] + str1[i] + str2[i+1:]\n                return True\n            i += 1\n        return False\n        \n    def find_index(str1,str2):\n        '''\n        Helper function which finds index of first differnce in two strings\n        '''\n        index_of_differnce = -1\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                index_of_differnce = i\n                break\n        return index_of_differnce\n        \n    def diff_in_str(str1,str2,index):\n        '''\n        Helper function which returns two lists of strings depending on if they have the same or different characters in same index\n        '''\n        first_diff_in_str = []\n        second_diff_in_str = []\n        if str1[index]!= str2[index]:\n            first_diff_in_str = list(str1)\n            second_diff_in_str = list(str2)\n            first_diff_in_str[index] = str2[index]\n            second_diff_in_str[index] = str1[index]\n        return first_diff_in_str, second_diff_in_str\n    \n    def find_swap_index(str1,str2):\n        '''\n        Helper function which finds index of first swap in two strings\n        '''\n        i = 0\n        while i < len(str1) and i < len(str2):\n            if str1[i]!= str2[i]:\n                return i\n            i += 1\n        return -1\n    \n    def swap_string(str1,str2):\n        '''\n        Helper function which swaps the order of characters in a string\n        '''\n        i = 0\n        while i < len(str1):\n            if str1[i]!= str2[i]:\n                str1 = str1[:i] + str2[i] + str1[i+1:]\n                str2 = str2[:i] + str1[i] + str2[i+1:]\n        return str1,str2\n    \n    def count_swaps(str1,str2):\n        '''\n        Helper function which counts number of swaps required to convert one binary number represented as a string to another.\n        '''\n        number_of_swaps = 0\n        index_of_differnce = find_index(str1,str2)\n        if index_of_differnce == -1:\n            return number_of_swaps\n        first_diff_in_str, second_diff_in_str = diff_in_str(str1,str2,index_of_differnce)\n        i = 0\n        while i < len(first_diff_in_str):\n            if swap_char(first_diff_in_str,second_diff_in_str) == True:\n                number_of_swaps += 1\n                str1,str2 = swap_string(str1,str2)\n            else:\n                return -1\n            i += 1\n        return number_of_swaps\n    \n    str1 = '00101001101010'\n    str2 = '0101101110'\n    if count_swaps(str1,str2) == 2:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n    \n    str1 = '11100010111'\n    str2 = '010110111'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '11111111'\n    str2 = '11111110'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '1110000000110000'\n    str2 = '110000111110000'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '111111111'\n    str2 = '111111111'\n    if count_swaps(str1,str2) == 0:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '100000001000100'\n    str2 = '01000100010000'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '110000000111111'\n    str2 = '0111111000000000'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '1111111111111110'\n    str2 = '1111111111111110'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '111001001100101'\n    str2 = '011001001100101'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '101010101110111'\n    str2 = '1010101101111'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '11100010111100'\n    str2 = '0110001101001'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '100100100100100'\n    str2 = '100100100100100'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '1010101011101'\n    str2 = '1010101011110'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '100100100100100'\n    str2 = '100100100100100'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '0101011110100'\n    str2 = '1010101111001'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '0101011110100'\n    str2 = '0101011110101'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(str1,str2))\n    else:\n        print(-1)\n        \n    str1 = '11011101110101'\n    str2 = '01011101110101'\n    if count_swaps(str1,str2) == -1:\n        print(min_Swaps(st"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for index in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[index])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for x in tuple_list:\n        total += sys.getsizeof(x)\n    return total\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for i in tuple_list:\n        s += sys.getsizeof(i)\n    return s\nprint('Test 1:', tuple_size([1, 2, 3])) # Should be 6\nprint('Test 2:', tuple_size((1, 2, 3))) # Should be 6\nprint('Test 3:', tuple_size([\"a\", \"b\", \"c\", \"d\"])) # Should be 40\nprint('Test 4:', tuple_size((1,2,3,4,5,6,7,8,9))) # Should be 104\nprint('Test 5:', tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if tuple_list == None:\n        return 0\n    else:\n        total_size = sys.getsizeof(tuple_list)\n        total_size += sys.getsizeof(tuple_list[0])\n        for tuple_element in tuple_list:\n            total_size += sys.getsizeof(tuple_element)\n        return total_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #check if the size is 2\n    if len(tuple_list) == 2:\n        #return the size of first tuple\n        return (len(tuple_list[0])*4)\n    #return the size of the second tuple\n    else:\n        return ((len(tuple_list[0])*4) + (len(tuple_list[1])*4))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #for loop\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # k is not in range\n    if k > len(arr1) + len(arr2):\n        return -1\n    # find the index of kth element\n    if len(arr1) == len(arr2):\n        return arr1[k-1]\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k <= len(arr1) + len(arr2):\n        m = k // 2\n        if arr1[m-1] < arr2[m-1]:\n            return find_kth(arr1, arr2[m:], k-m)\n        else:\n            return find_kth(arr1[m:], arr2, k-m)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr2[mid] == arr1[mid]:\n            if k == mid + 1:\n                return arr1[k - 1]\n            else:\n                high = mid - 1\n        elif arr1[mid] < arr2[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr1[high]\n    \n    \nif __name__ == '__main__':\n    arr1 = [-1, 2, 1, 3, 4, 5]\n    arr2 = [3, 6, 7, 9, 10, 11]\n    print(find_kth(arr1, arr2, 3))"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[-1] > arr2[-1]:\n        return find_kth(arr2, arr1, k)\n    if arr1[0] < arr2[0]:\n        return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == None:\n        if arr2 == None:\n            return None\n        else:\n            return arr2[k]\n    if arr2 == None:\n        if arr1 == None:\n            return None\n        else:\n            return arr1[k]\n    if arr1[0] <= arr2[0]:\n        return find_kth(arr1[1:], arr2, k-1)\n    else:\n        return find_kth(arr1, arr2[1:], k-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1, len2 = len(arr1), len(arr2)\n    if len1 == 0 or len2 == 0:\n        return False\n    if len1 == 1 or len2 == 1:\n        return min(arr1[0], arr2[0]) if len1 == 1 else max(arr1[0], arr2[0])\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if k < len(arr1) + len(arr2):\n        if arr1[k - len(arr1)] == arr2[k - len(arr2)]:\n            return arr1[k - len(arr1)]\n        elif arr1[k - len(arr1)] < arr2[k - len(arr2)]:\n            return find_kth(arr1, arr2[k - len(arr2):], k - len(arr1))\n        else:\n            return find_kth(arr1[k - len(arr1):], arr2, k - len(arr1))\n    else:\n        return arr1[k - len(arr1)]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            if i == k-1:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[-1] < arr2[0]:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    min_arr1 = min(arr1)\n    min_arr2 = min(arr2)\n    \n    if min_arr1 > min_arr2:\n        return kth_ele_from_arr(arr1, arr2, min_arr1 + min_arr2, k)\n    return kth_ele_from_arr(arr2, arr1, min_arr2 + min_arr1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    result = []\n    for i in range(len(arr1)):\n        result.append(arr1[i])\n        result.append(arr2[i])\n    return result[k]\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = number\n    while n!= 0:\n        n,digit = divmod(n,10)\n        sum += digit**3\n    if sum == number:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum(map(int, str(number))) ** len(str(number)) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n    while(temp!=0):\n        digit = temp%10\n        total += digit**3\n        temp //= 10\n    return total == number\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while(temp > 0):\n        digit = temp%10\n        sum = sum + digit**3\n        temp = temp//10\n    if(sum == number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num=number\n    sum_num = 0\n    while num > 0:\n        digit = num%10\n        sum_num += digit**3\n        num = num//10\n    return(True if number == sum_num else False)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    if number == 0:\n        return False\n    \n    str_num = str(number)\n    \n    sum = 0\n    for ch in str_num:\n        sum += int(ch)**3\n    \n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if str(number)==str(number)[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp>0:\n        digit = temp%10\n        sum = sum + digit**3\n        temp = temp//10\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total=0\n    while number:\n        digit=number%10\n        total+=digit**3\n        number//=10\n    return True if total==number else False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp_number = number\n    while temp_number > 0:\n        digit = temp_number % 10\n        sum += digit ** 3\n        temp_number //= 10\n    return (number == sum)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        raise TypeError(\"Input must be a natural number\")\n    if number < 0:\n        raise ValueError(\"Input must be a natural number\")\n    else:\n        sum = 0\n        for i in range(1, number + 1):\n            sum += i\n        average = sum / number\n        return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n    average = sum / number\n    print(f'Sum of numbers from 1 to {number} is: {sum}.')\n    print(f'Average of numbers from 1 to {number} is: {average}.')\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum = sum+i\n    average = sum/number\n    print(\"The sum is: \" + str(sum))\n    print(\"The average is: \" + str(average))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number) == int and number > 0:\n        total = 0\n        for i in range(number + 1):\n            total += i\n        average = total / number\n        print(f\"{number} natural number sum is {total}\")\n        print(f\"{number} natural number average is {average}\")\n    else:\n        print(\"This is not a natural number\")\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        raise TypeError(\"This is not an integer!\")\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    average=0\n    i=1\n    while i<=number:\n        sum=sum+i\n        i=i+1\n    average=sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total_sum = 0\n    total_count = 0\n    for i in range(1, number + 1):\n        total_sum += i\n        total_count += 1\n    return total_sum, total_sum / total_count\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    total = 0\n    count = 0\n    \n    while count < number:\n        total += count\n        count += 1\n    \n    average = total / number\n    return total, average\n    \n    \n    \n    \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef is_Even(n): \n    return n%2 == 0\nprint(is_Even(12))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        print(\"{0} is Even\".format(n))\n    else :\n        print(\"{0} is Odd\".format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # code here\n    return False if n%2 else True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n == 0 : \n        return False\n    if n % 2 == 0 : \n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n & 1) : \n        print(\"false\") \n    else : \n        print(\"true\") \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2==0):\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n    \ndef main() :\n    print(\"\\nProgram to Check whether the given number is even or not :- \")\n    n = int(input(\"Enter any number : \"))\n    if is_Even(n) : \n        print(\"Given number is even.\")\n    else :\n        print(\"Given number is odd.\")\n    print(\"\\nOutput :- \")\n    \nmain()"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    i = 0\n    count = 0\n    first_char = ''\n    while i<len(str1):\n        if str1[i] not in first_char:\n            first_char = str1[i]\n            count = 1\n        elif str1[i] in first_char:\n            count += 1\n            if count > 1:\n                return first_char\n        i += 1\n    return first_char\n    \ndef maximum_number_of_divisors(num):\n    '''\n    Write a python function to find the maximum number of divisors of a given integer.\n    '''\n    \n    largest_divisor = 1\n    count = 1\n    while count <= num:\n        if num%count == 0:\n            largest_divisor = count\n        count += 1\n    return largest_divisor\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # code here\n    d={}\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]=d[i]+1\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(''.join(str1).find(min(set(str1), key=str1.count)))\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    first_occurrence = ''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j] and i!= j:\n                if first_occurrence == '':\n                    first_occurrence = str1[i]\n                else:\n                    return first_occurrence\n    if first_occurrence == '':\n        return 'First occurrence not found'\n    else:\n        return first_occurrence\n    "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char = ''\n    count = 0\n    for i in str1:\n        if i!= char:\n            count = 0\n            char = i\n        else:\n            count += 1\n    if count == 0:\n        return None\n    return char\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count_dict = {}\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # return str1[0] if len(str1) <= 1 else first_repeated_char(str1[1:]) if str1[0] == str1[1] else -1\n    return str1[0] if len(str1) <= 1 else str1[1] if str1[0] == str1[1] else first_repeated_char(str1[2:])\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n    return \"No repeated character\"\n    \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1,n+1):\n        str = str(i)\n        if is_ludic(str):\n            l.append(i)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # luc = []\n    # count = 0\n    # for i in range(0,n):\n    #     count += i\n    #     if count == i:\n    #         luc.append(count)\n    #         count += i\n    # return luc\n    luc = []\n    for i in range(0, n):\n        luc.append(i)\n    luc = list(filter(lambda x: x <= n, luc))\n    return luc\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = set([])\n    for x in range(n-1, 0, -1):\n        if not x % 15:\n            ludics.add(x)\n    return list(ludics)\n    \nif __name__ == '__main__':\n    print(get_ludic(1000000))\n    print(get_ludic(1324))\n    print(get_ludic(2200))\n    print(get_ludic(3535353535353535))\n    print(get_ludic(58592048))\n    print(get_ludic(3330))"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return \"Error\"\n    ludic = []\n    for i in range(n, 1, -1):\n        if is_ludic(i):\n            ludic.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def check_ludic(n,num):\n        if n%10==num:\n            if int(str(n)[0])>num:\n                return check_ludic(n//10,num)\n            elif n%10<num:\n                return 0\n        return check_ludic(n//10,num)\n    l=[]\n    for i in range(1,n):\n        l.append(check_ludic(i,4))\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n + 1):\n        lucid = []\n        a = i\n        b = i\n        while b!= 0:\n            lucid.append(b)\n            a, b = b, a % b\n        for i in range(len(lucid) - 1):\n            if lucid[i] + lucid[i + 1] == 1:\n                lucid.remove(lucid[i + 1])\n                break\n        ludic.append(lucid)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n):\n        if is_lucid(i):\n            l.append(i)\n    return l\n    \ndef is_lucid(n):\n    '''\n    Write a function to determine if a given integer is a lucid number.\n    '''\n    while n > 1:\n        if n % 10 == 3 or n % 10 == 6:\n            if (n - 3) % 10 == 6 or (n - 6) % 10 == 3:\n                return True\n            else:\n                return False\n        else:\n            n = n // 10\n    return False\n        \ndef count_lucids(n):\n    '''\n    Write a function to determine the number of lucids smaller than or equal to a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if is_lucid(i):\n            count += 1\n    return count\n    \ndef lucid_sum(n):\n    '''\n    Write a function to calculate the sum of all lucids smaller than or equal to a given integer.\n    '''\n    s = 0\n    for i in range(1, n):\n        if is_lucid(i):\n            s += i\n    return s\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(filter(lambda x: x <= n, range(n,1000000)))\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(set(n for n in range(2,n) if n >= 2 and n % 2 == 0)) + list(set(n for n in range(2,n) if n >= 2 and n % 2!= 0))\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if len(ludic) == 0:\n            ludic.append(i)\n        else:\n            for j in range(len(ludic)):\n                if i % ludic[j] == 0:\n                    break\n            else:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(list(reversed(words)))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    split = s.split()\n    # or\n    split = s.split(' ')\n    split.reverse()\n    s =''.join(split)\n    return s\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(s.split(' '))\n    print(s[::-1].split(' '))\n    s_list = s.split(' ')\n    return''.join(reversed(s_list))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # return s.split()[::-1]\n    if len(s) == 0:\n        return \"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \ndef reverse_words2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n    \ndef reverse_words3(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    res = \"\"\n    for i in s.split():\n        res += i[::-1] + \" \"\n    return res[:-1]\n    \ndef reverse_words4(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    res = []\n    for i in s.split():\n        res.append(i[::-1])\n    return''.join(res)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    splitted = s.split(' ')\n    reversed = splitted[::-1]\n    return''.join(reversed)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num%2 == 0:\n        return False\n    for i in range(3,num,2):\n        if num%i == 0:\n            return False\n    return True\n    "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                print(num,\"is not a prime number\")\n                return\n        print(num, \"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")\n        return\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef sin_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef cos_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef tan_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef sec_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef csc_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef sqrt_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef pi_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef asin_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef atan_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef acos_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef acsc_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef acot_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef atan2_deg(y,x):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return y/math.pi*180\ndef pow_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef sin_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef cos_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef tan_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sec_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef csc_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sqrt_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef pi_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef asin_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef atan_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef acos_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef acsc_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef acot_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef atan2_rad(y,x):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return y/math.pi*180\ndef pow_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sin_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef cos_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef tan_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef sec_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef csc_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef sqrt_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef pi_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef asin_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef atan_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef acos_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef acsc_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef acot_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef atan2_deg_rad(y,x):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return y/180*math.pi,x/180*math.pi\ndef pow_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef sin_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef cos_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef tan_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sec_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef csc_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sqrt_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef pi_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef asin_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return ra"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180.0 / math.pi\ndef radian_degree_converter(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180.0 / math.pi\ndef degree_radian_converter(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree*math.pi/180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_minute(degree):\n    '''\n    Write a function to convert degrees to radians and minutes.\n    '''\n    degree=degree*math.pi/180\n    radian=degree-degree*math.pi/180\n    degree=degree+radian*60\n    return degree\ndef degree_radian_minute(radian,minute):\n    '''\n    Write a function to convert radians and minutes to degrees.\n    '''\n    radian=radian*180/math.pi\n    degree=radian-(radian*60)\n    return degree\ndef radian_degree_degree(degree):\n    '''\n    Write a function to convert radians to degrees and degrees.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    return degree\ndef degree_radian_degree(radian,degree):\n    '''\n    Write a function to convert degrees and degrees to radians.\n    '''\n    degree=degree*180/math.pi\n    radian=degree-(degree*60)\n    return radian\ndef degree_degree_minute(degree):\n    '''\n    Write a function to convert degrees to degrees and minutes.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    return degree\ndef degree_degree_radian(degree,radian):\n    '''\n    Write a function to convert degrees to degrees and radians.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    radian=degree-(degree*60)\n    return radian\ndef radian_degree_degree(radian,degree):\n    '''\n    Write a function to convert radians to degrees and degrees.\n    '''\n    radian=radian*180/math.pi\n    degree=radian+(radian*60)\n    return degree\ndef radian_degree_degree_radian(degree,radian):\n    '''\n    Write a function to convert radians to degrees, degrees and radians.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    radian=degree-(degree*60)\n    return degree,radian\ndef degree_degree_degree_radian(degree,degree1):\n    '''\n    Write a function to convert degrees, degrees and degrees to radians.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    degree1=degree1*180/math.pi\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    return degree,degree1,radian,radian1\ndef radian_degree_degree_degree(degree,degree1):\n    '''\n    Write a function to convert radians to degrees, degrees, degrees and radians.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    degree1=degree1*180/math.pi\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    return degree,degree1,radian,radian1\ndef degree_degree_degree_degree(degree,degree1):\n    '''\n    Write a function to convert degrees, degrees, degrees and degrees to radians.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    degree1=degree1*180/math.pi\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    return degree,degree1,radian,radian1\ndef degree_degree_degree_degree_degree(degree,degree1,degree2):\n    '''\n    Write a function to convert degrees, degrees, degrees, degrees and degrees to radians.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    degree1=degree1*180/math.pi\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree2=degree2*180/math.pi\n    degree=degree+(degree*60)\n    degree2=degree2+(degree2*60)\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree2=degree2+(degree2*60)\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree2=degree2+(degree2*60)\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree2=degree2+(degree2*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    return degree,degree1,degree2,radian,radian1,radian2\ndef degree_degree_degree_degree_degree_degree(degree,degree1,degree2,degree3):\n    '''\n    Write a function to convert degrees, degrees, degrees, degrees and degrees to radians.\n    '''\n    degree=degree*180/math.pi\n    degree=degree+degree*60\n    degree1=degree1*180/math.pi\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree2=degree2*180/math.pi\n    degree=degree+(degree*60)\n    degree2=degree2+(degree2*60)\n    degree3=degree3*180/math.pi\n    degree=degree+(degree*60)\n    degree3=degree3+(degree3*60)\n    degree2=degree2+(degree2*60)\n    degree3=degree3+(degree3*60)\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree3=degree3+(degree3*60)\n    degree2=degree2+(degree2*60)\n    degree3=degree3+(degree3*60)\n    degree=degree+(degree*60)\n    degree1=degree1+(degree1*60)\n    degree3=degree3+(degree3*60)\n    degree2=degree2+(degree2*60)\n    degree3=degree3+(degree3*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    radian=degree-(degree*60)\n    radian1=degree1-(degree1*60)\n    radian2=degree2-(degree2*60)\n    radian=degree-(degre"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree * 180.0 / math.pi\ndef deg_to_rad(deg):\n    return deg * math.pi / 180.0\ndef rad_to_deg(rad):\n    return rad * 180.0 / math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    literals = []\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_string = pattern[0]\n    literal_pattern = pattern[1]\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    r = re.compile(pattern)\n    m = r.search(text)\n    if m:\n        return m.group(), m.start(), m.end()\n    else:\n        return False\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    if(pattern == \"\"):\n        return [\"\", 0, 0]\n    \n    if(text == \"\"):\n        return [\"\", 0, 0]\n    \n    p = re.compile(pattern)\n    match = p.search(text)\n    \n    if match:\n        start = match.start()\n        end = match.end()\n        return [\"matched\", start, end]\n    else:\n        return [\"no match\", 0, 0]\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.finditer(pattern, text)\n    for m in match:\n        print(\"[{}, {}]\".format(m.start(), m.end()))\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    m = re.search(pattern, text)\n    return m.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    m = pattern.search(text)\n    return m.group(), m.start(), m.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None\n    "
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    str_list = text.split()\n    \n    for index, word in enumerate(str_list):\n        if re.search(pattern, word)!= None:\n            return word, index, index + len(word)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if re.search(pattern, text):\n        return re.search(pattern, text).span()\n    else:\n        return None\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    if n < 1:\n        return bell\n    while n:\n        bell += 1\n        n -= 1\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = int(n)\n    bell_num = 0\n    count = 0\n    for num in range(1,n+1):\n        bell_num = bell_num + (1/num)\n    return bell_num\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    return sum(range(1, n + 1, 2))\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef sum_of_digits(number):\n    '''\n    Write a python function to compute the sum of digits of a number.\n    '''\n    if number == 0:\n        return 0\n    return sum_of_digits(number // 10) + number % 10\n    \n    \ndef has_nth_bit_set(number, n):\n    '''\n    Write a python function to check if nth bit is set in number.\n    '''\n    if number == 0:\n        return 0\n    return (number & (1 << n) > 0)\n    \n    \ndef is_palindrome(number):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    if number == 0:\n        return True\n    num = number\n    reverse_number = 0\n    while num > 0:\n        reverse_number = reverse_number * 10 + num % 10\n        num //= 10\n    if reverse_number == number:\n        return True\n    return False\n    \n    \ndef is_power_of_two(n):\n    '''\n    Write a python function to check if a given number is a power of 2.\n    '''\n    return n > 0 and ((n & (n - 1)) == 0)\n    \n    \ndef rotate_left(number, n):\n    '''\n    Write a python function to rotate a number by n places to the left.\n    '''\n    if number == 0:\n        return 0\n    return (number << n) % (10 ** 16)\n    \n    \ndef rotate_right(number, n):\n    '''\n    Write a python function to rotate a number by n places to the right.\n    '''\n    if number == 0:\n        return 0\n    return (number >> n) % (10 ** 16)\n    \n    \ndef swap_bits(number):\n    '''\n    Write a python function to swap the bits of a number.\n    '''\n    if number == 0:\n        return 0\n    return (number & (0b01 << (number.bit_length() - 1))) | (number & ~0b01 << (number.bit_length() - 1))\n    \n    \ndef count_swaps(lst):\n    '''\n    Write a python function to count number of swaps required for array to be sorted.\n    '''\n    swaps = 0\n    for i in range(len(lst)):\n        for j in range(len(lst) - 1):\n            if lst[j] > lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n                swaps += 1\n    return swaps\n    \n    \ndef min_swaps(lst, n):\n    '''\n    Write a python function to find the minimum number of swaps required to sort the array.\n    '''\n    swaps = 0\n    while lst!= sorted(lst):\n        for i in range(n):\n            if lst[i] > lst[i + 1]:\n                lst[i], lst[i + 1] = lst[i + 1], lst[i]\n                swaps += 1\n    return swaps\n    \n    \ndef has_substring(text, sub_string):\n    '''\n    Write a python function to check if a given string has a given substring.\n    '''\n    return sub_string in text\n    \n    \ndef first_non_repeated_character(string):\n    '''\n    Write a python function to find the index of first non-repeated character in a given string.\n    '''\n    index = -1\n    for i in range(len(string)):\n        if string[i] not in string[:i] + string[i + 1:]:\n            index = i\n            break\n    return index\n    \n    \ndef has_substring_between(text, substring1, substring2):\n    '''\n    Write a python function to check if a given string has a given substring between 2 other substrings.\n    '''\n    if substring1 not in text or substring2 not in text:\n        return False\n    return substring1 in text and substring2 in text and text.index(substring1) < text.index(substring2)\n    \n    \ndef highest_rank_word(text):\n    '''\n    Write a python function to find the highest rank word in a given string.\n    '''\n    count = 0\n    for word in text.split():\n        count = max(count, text.count(word))\n    return count\n    \n    \ndef find_duplicate_in_two_sorted_arrays(lst1, lst2):\n    '''\n    Write a python function to find duplicate numbers between 2 sorted arrays.\n    '''\n    i, j = 0, 0\n    result = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i]!= lst2[j]:\n            break\n        if lst1[i] == lst2[j]:\n            result.append(lst1[i])\n            i += 1\n            j += 1\n    return result\n    \n    \ndef pair_with_targetsum(arr, n, target):\n    '''\n    Write a python function to find a pair in a given array whose sum is equal to the given target.\n    '''\n    if n <= 1:\n        return -1\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] + arr[right] == target:\n            return left, right\n        if arr[left] + arr[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return -1\n    \n    \ndef find_pairs(arr, n, k):\n    '''\n    Write a python function to find all pairs in an array whose sum is equal to the given target.\n    '''\n    if n <= 1:\n        return []\n    left = 0\n    right = n - 1\n    if arr[left] + arr[right] > k:\n        return []\n    result = []\n    while left < right:\n        if arr[left] + arr[right] == k:\n            result.append([left + 1, right + 1])\n        if arr[left] + arr[right] > k:\n            right -= 1\n        else:\n            left += 1\n    return result\n    \n    \ndef find_reversed_pairs(arr, n, k):\n    '''\n    Write a python function to find all pairs in an array whose sum is equal to the given target.\n    '''\n    if n <= 1:\n        return []\n    left = 0\n    right = n - 1\n    if arr[left] + arr[right] > k:\n        return []\n    result = []\n    while left < right:\n        if arr[left] + arr[right] == k:\n            result.append([left + 1, right + 1])\n        if arr[left] + arr[right] > k:\n            right -= 1\n        else:\n            left += 1\n    result.append([left + 1, right])\n    return result\n    \n    \ndef triplet_with_smaller_sum(arr, n):\n    '''\n    Write a python function to find triplet with smaller sum than the given array.\n    '''\n    if n <= 3:\n        return -1\n    result = float('inf')\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] < result:\n                    result = arr[i] + arr[j] + arr[k]\n    return result\n    \n    \ndef find_pairs_with_sum_of_two(arr, n, k):\n    '''\n    Write a python function to find all pairs in an array whose sum is equal to the given target.\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return sum(1/i for i in range(1,n+1))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    def num_bell_n(n,bell_n): \n        \n        if n == 1: \n            return bell_n \n            \n        bell_n = num_bell_n(n-1,bell_n+1) \n        return bell_n \n    return num_bell_n(n,1) \n        \ndef count_sort(A,maxval): \n    '''\n    Given an array A of N integers and a maximum value K, \n    sort the array A in O(NlogK) time and place the elements of \n    the array into a new array B of same size. \n    B[i] is the number of elements smaller than A[i]. \n    '''\n    if A == None or len(A) == 0: \n        return \n        \n    arr = [] \n    for i in range(maxval + 1): \n        arr.append(0) \n    for num in A: \n        arr[num] += 1\n    return arr \n        \ndef constant_space(A): \n    '''\n    Given an array A of N integers, find the index of the largest element \n    in the array. \n    '''\n    if A == None or len(A) == 0: \n        return \n    \n    n = len(A)\n    \n    for i in range(n): \n        if A[i] > A[0]: \n            A[0] = A[i] \n            break \n    else: \n        A[0] = 0\n        \n    for i in range(1,n): \n        if A[i] > A[i+1] and A[i] > A[0]: \n            A[i+1] = A[i] \n            \n    for i in range(n): \n        if A[i] > A[0]: \n            A[0] = A[i] \n            break \n        \ndef swap(A,i,j): \n    '''\n    Given an array A and two indices i and j, \n    swap the elements at A[i] and A[j]. \n    '''\n    if i == j or i < 0 or j < 0 or i >= len(A) or j >= len(A): \n        return \n        \n    A[i],A[j] = A[j],A[i] \n        \ndef is_permutation(A,B): \n    '''\n    Given an array A of N distinct integers, \n    determine whether A can be rearranged to be the same as B. \n    '''\n    if A == None or len(A) == 0 or len(A)!= len(B): \n        return False \n        \n    counterA = count_sort(A,len(A)) \n    counterB = count_sort(B,len(A)) \n    \n    if counterA!= counterB: \n        return False \n    \n    for i in range(len(A)): \n        if A[i]!= B[i]: \n            return False \n    return True \n        \ndef sorted_merge(A,B): \n    '''\n    Given two sorted arrays A and B of size N each, \n    write a function that merges B into A. \n    '''\n    if A == None or len(A) == 0 or A == None or len(A)!= len(B): \n        return \n        \n    i,j,k = 0,0,0 \n    \n    while i < len(A) and j < len(B): \n        if A[i] < B[j]: \n            A[k] = A[i] \n            i += 1 \n        else: \n            A[k] = B[j] \n            j += 1 \n        k += 1 \n        \n    while i < len(A): \n        A[k] = A[i] \n        i += 1 \n        k += 1 \n        \n    while j < len(B): \n        A[k] = B[j] \n        j += 1 \n        k += 1 \n        \ndef modify(A): \n    '''\n    Given an array A of size N, \n    write a function that modifies the array A in place. \n    Modify the array A so that all occurrences of element x \n    in A are changed to -x. \n    '''\n    n = len(A)\n    for i in range(n): \n        if A[i] < 0: \n            A[i] *= -1\n    \ndef is_valid(arr,n,x): \n    '''\n    Given a string S of lowercase letters, and an integer array A of \n    length N. \n    Write a function that returns true if and only if the string S is \n    composed entirely of letters in A. Otherwise, return false. \n    '''\n    if A == None or len(A) == 0 or A == None or len(A)!= len(S): \n        return False \n        \n    for i in range(n): \n        if S[i] not in A: \n            return False \n        \n    return True \n        \ndef has_duplicates(A): \n    '''\n    Given an array A of N integers, write a function that \n    returns true if and only if the array contains exactly one duplicate. \n    '''\n    if A == None or len(A) == 0: \n        return False \n    \n    if A.count(A[0]) > 1: \n        return True \n        \n    for i in range(len(A)-1): \n        if A[i] == A[i+1]: \n            return True \n        \n    return False \n        \ndef valid_parentheses(string): \n    '''\n    Given a string S of length N that consists of '(' and ')'. \n    Write a function to determine whether the parentheses are balanced or not. \n    '''\n    if string == None or len(string) == 0: \n        return False \n        \n    stack = [] \n    \n    for i in range(len(string)): \n        if string[i] == '(' or string[i] == '[': \n            stack.append(string[i]) \n        elif string[i] == ')' and len(stack) > 0 and stack[-1] == '(': \n            stack.pop() \n        elif string[i] == ']' and len(stack) > 0 and stack[-1] == '[': \n            stack.pop() \n        else: \n            return False \n        \n    if len(stack) == 0: \n        return True \n        \n    return False \n        \ndef minimum_swaps(arr,n): \n    '''\n    Given an array A of size N and an integer K. \n    The task is to find the minimum number of swaps required \n    in order to sort the array A. \n    '''\n    if A == None or len(A) == 0 or A == None or len(A)!= len(B): \n        return \n        \n    swaps = 0 \n    \n    for i in range(n): \n        if A[i]!= i+1: \n            swaps += 1\n            \n            A[i],A[A[i]-1] = A[A[i]-1],A[i] \n        \n    return swaps \n        \ndef longest_substring_without_repeat(string): \n    '''\n    Given a string S, find the length of the longest substring without repeating \n    characters. \n    '''\n    if string == None or len(string) == 0: \n        return 0 \n        \n    window = set() \n    maxLen = 0 \n    \n    for i in range(len(string)): \n        if string[i] in window: \n            window.remove(string[i]) \n        else: \n            window.add(string[i]) \n            \n        if len(window) > maxLen: \n            maxLen = len(window) \n            \n    return maxLen \n        \ndef intersect(A,B): \n    '''\n    Given two non-empty arrays, A and B, whose elements are non-negative integers. \n    Write a program to return the maximum result of (A[i] + B[i]) for each 0 <"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    assert type(n) is int and n > 0, \"Invalid input\"\n    \n    bellNum = 0\n    for i in range(1, n+1):\n        bellNum += (i**2)//2\n    return bellNum\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return n * bell_Number(n-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    s = 1\n    for i in range(1,n+1):\n        s = s * i\n    return s\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = {1 : 1, 2 : 2, 3 : 5, 4 : 8, 5 : 13, 6 : 21, 7 : 34, 8 : 55, 9 : 89, 10 : 144}\n    if n == 1:\n        return bell_numbers[1]\n    elif n == 2:\n        return bell_numbers[2]\n    elif n == 3:\n        return bell_numbers[3]\n    elif n == 4:\n        return bell_numbers[4]\n    elif n == 5:\n        return bell_numbers[5]\n    elif n == 6:\n        return bell_numbers[6]\n    elif n == 7:\n        return bell_numbers[7]\n    elif n == 8:\n        return bell_numbers[8]\n    elif n == 9:\n        return bell_numbers[9]\n    elif n == 10:\n        return bell_numbers[10]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(list1)\n    list2 = list1.pop(L)\n    print(list2)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Lista inicialmente vacia\n    L = []\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        if L == 0:\n            return list1\n        if L > len(list1):\n            return list1\n        elif L == len(list1):\n            return []\n        else:\n            result = []\n            for i in range(len(list1)):\n                if i!= L - 1:\n                    result.append(list1[i])\n            return result\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)-1, L, -1):\n        list1.pop(i)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n    \ndef remove_kth_element_by_index(list1, index):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(index)\n    return list1\n    \ndef reverse_list(list1):\n    '''\n    Write a python function which reverses the elements of a list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef duplicate_list(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef duplicate_list_using_loop(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef duplicate_list_using_append(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef duplicate_list_using_append_v2(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef duplicate_list_using_append_v3(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef merge_list(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        list1.append(list1[i])\n    for j in range(1, len(list2)):\n        list1.append(list2[j])\n    return list1\n    \ndef merge_list_using_append(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef merge_list_using_extend(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef merge_list_using_extend_v2(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef merge_list_using_extend_v3(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef remove_all_occurrences(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n    return list1\n    \ndef remove_all_occurrences_v2(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n    return list1\n    \ndef remove_all_occurrences_v3(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n    return list1\n    \ndef remove_all_occurrences_v4(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n            for j in range(1, len(list1)):\n                list1.pop(i)\n    return list1\n    \ndef remove_all_occurrences_v5(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n            for j in range(1, len(list1)):\n                list1.pop(i)\n    return list1\n    \ndef reverse_string(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v2(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v3(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v4(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v5(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v6(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v7(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef remove_string_v1(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[1:]\n    return string\n    \ndef remove_string_v2(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[1:]\n    return string\n    "
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == None or len(L) == 0 or L == \"\":\n        return None\n    if L == []:\n        return []\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    removed_element = []\n    for i in range(len(list1)):\n        if i!= L:\n            removed_element.append(list1[i])\n    return removed_element\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Implementation\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = -1000\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        n_max = max(test_list[i][:N])\n        result.append(n_max)\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # for num in test_list:\n    #     print(num)\n    # return num\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # print(len(test_list[0]))\n    # print(len(test_list))\n    # print(test_list)\n    return max(i[N] for i in test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    m = len(test_list)\n    n = len(test_list[0])\n    if N >= n:\n        return -1\n    if N <= -m:\n        return -1\n    max_so_far = test_list[0][N]\n    for i in range(m):\n        if test_list[i][N] > max_so_far:\n            max_so_far = test_list[i][N]\n    return max_so_far\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    def find_columns_to_max(test_list, N):\n        '''\n        This function find the list of indices of the columns to maximum of N\n        '''\n        N_max = -1\n        max_index_list = []\n        for i in range(len(test_list)):\n            if N_max < test_list[i][N]:\n                N_max = test_list[i][N]\n                max_index_list = []\n                max_index_list.append(i)\n            elif N_max == test_list[i][N]:\n                max_index_list.append(i)\n        return max_index_list\n    # print(find_columns_to_max(test_list, N))\n    return max(test_list[i][N] for i in find_columns_to_max(test_list, N))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return None\n    col = 0\n    for col in range(0,len(test_list[0])):\n        if col > N:\n            break\n        max_val = test_list[0][col]\n        for i in range(1,len(test_list)):\n            if max_val < test_list[i][col]:\n                max_val = test_list[i][col]\n        print(max_val)\n        return max_val\n        \nmax_of_nth(\n    [\n        [1, 2, 3],\n        [2, 4, 6],\n        [3, 6, 9]\n    ], 2\n)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    \n    # If the number of rows are more than the N\n    if n < N:\n        return None\n    \n    # If the list is empty\n    if n == 0:\n        return None\n    \n    # For each row in the list\n    for i in range(n):\n        # And every column in the row\n        for j in range(len(test_list[i])):\n            # If then'th column is not yet defined\n            if j < N:\n                # Set the value of then'th column to the current max value\n                test_list[i][j] = max(test_list[i])\n    \n    # Return the max value in then'th column\n    return max(test_list[N-1])\n    \n    \ndef solution_scalar_mult(input_list):\n    '''\n    Given a list of numbers, return the sum of all the squares of the numbers.\n    '''\n    # Initialize the variable to return\n    return_list = []\n    \n    # For each number in the list\n    for i in range(len(input_list)):\n        # Add the number to the return list\n        return_list.append(input_list[i] * input_list[i])\n    \n    # Return the sum of the elements in the return list\n    return sum(return_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 1:\n        raise ValueError('Invalid input, N should be >= 1')\n    \n    max_ = test_list[0][N-1]\n    for i in range(len(test_list)):\n        if max_ < test_list[i][N-1]:\n            max_ = test_list[i][N-1]\n    \n    return max_\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # create new_list from test_list\n    new_list = test_list\n    # reduce the list into a one-dimensional list\n    new_list = [x for y in test_list for x in y]\n    # print(new_list)\n    # loop through new_list and determine the max number of eachn'th column\n    max_val = max(new_list[N-1::N])\n    # print(max_val)\n    # return the max number\n    return max_val\n    \n    \n    \n    \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return([lst[0], lst[1]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # First take a list of lists\n    merged_list = []\n    # Loop through all the lists\n    for sublist in lst:\n        # For each sublist, get the first and second elements and append them to the merged_list\n        merged_list.append(sublist[0])\n        merged_list.append(sublist[1])\n    # Return the merged list\n    return merged_list\n    \ndef merge_list(lst):  \n    '''\n    Write a python function which takes a list of lists and returns a single list. \n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list += sublist\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([])\n        merged[i].append(lst[i][0])\n        merged[i].append(lst[i][1])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst)<1:\n        return []\n    elif len(lst)==1:\n        return lst\n    else:\n        new_list = [[lst[0][0], lst[0][1]], lst[1][0], lst[1][1]]\n        return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    print(lst)\n    merged = []\n    for i in lst:\n        for j in i:\n            merged.append(j)\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) < 2:\n        return lst\n    lst.sort(key = lambda x: x[0])\n    lst.sort(key = lambda x: x[1])\n    return lst\n    \nmerge([[1,5],[8,5],[4,4],[5,6],[6,7]])\nmerge([[1,5,6],[8,5,7],[4,4]]"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    ret = []\n    for i in range(len(lst)):\n        ret.append([])\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            ret[i].append(lst[i][j])\n    return ret\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_new = []\n    lst_new.append(lst[0])\n    lst_new.append(lst[1])\n    return lst_new\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merge_list = []\n    for i in range(len(lst)):\n        merge_list.append([lst[i][0], lst[i][1]])\n    return merge_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    if len(lst)==1:\n        return lst\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(0,len(test_list)-1):\n        test_list[i] = test_list[i] + test_list[i+1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result_list = []\n    for i in range(len(test_list)-1):\n        if i == 0:\n            result_list.append(test_list[i])\n        else:\n            result_list.append(result_list[i]+test_list[i])\n    return result_list\nprint(cummulative_sum((5,4,3,2,1,0,-2)))\nprint(cummulative_sum((1,2,3,4,5)))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    cumm_sum = []\n    cumm_sum.append(0)\n    for i in range(1, len(test_list)):\n        cumm_sum.append(cumm_sum[i-1] + test_list[i])\n    return cumm_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    x = 0\n    for i in range(len(test_list)):\n        x += test_list[i]\n        test_list = x\n    return x\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return(sum(test_list))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_value = 0\n    for i in range(len(test_list)):\n        sum_value += test_list[i]\n        #print(sum_value)\n    return sum_value\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_list = []\n    for i in range(len(test_list)):\n        cummulative_sum = sum(test_list[0:i])\n        cummulative_list.append(cummulative_sum)\n    return cummulative_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    # My solution\n    \n    # Time Complexity = O(n) and Space Complexity = O(n)\n    \n    for i in range(len(test_list)):\n        for j in range(i):\n            test_list[j] = test_list[j] + test_list[i]\n            \n    return test_list\n    \n    # Best solution (with no additional space)\n    \n    # Time Complexity = O(n) and Space Complexity = O(1)\n    \n    test_list.sort(reverse=True)\n    \n    for i in range(1, len(test_list)):\n        test_list[i] = test_list[i] + test_list[i - 1]\n        \n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    import numpy as np\n    \n    cumm_sum = np.cumsum(test_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg.append(total/len(nums[i]))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum_of_values = []\n    for values in nums:\n        sum_of_values += values\n    average_values = sum_of_values / len(nums)\n    return average_values\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num = []\n    for a in nums:\n        print(a)\n        for b in a:\n            print(b)\n            num.append(b)\n            print(num)\n            print('num: ', num)\n    return num\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tup = []\n    for i in range(len(nums)):\n        tup.append(sum(nums[i]) / len(nums[i]))\n    return tuple(tup)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_tuple = ()\n    for i in range(len(nums[0])):\n        total = 0\n        for num in nums:\n            total += num[i]\n        avg_tuple += (total / len(nums),)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    final_list = []\n    for i in range(0, len(nums)):\n        final_list.append(sum(nums[i])/len(nums[i]))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    final_list = []\n    for inner_list in nums:\n        list_sum = sum(inner_list)\n        list_sum /= len(inner_list)\n        final_list.append(list_sum)\n    return final_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # new_tuple = [tuple(i) for i in nums]\n    # #print(new_tuple)\n    # #print(type(new_tuple))\n    # #print(type(tuple))\n    # new_tuple = [x for t in nums for x in t]\n    # print(new_tuple)\n    # print(type(new_tuple))\n    new_tuple = []\n    for i in range(len(nums)):\n        #print(type(nums[i]))\n        #print(type(nums[i]))\n        new_tuple.append(sum(nums[i])/len(nums[i]))\n    return tuple(new_tuple)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for i in range(0, len(nums), 1):\n        new_list.append(sum(nums[i])/len(nums[i]))\n    return tuple(new_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # % operation for python\n    tup_mod = []\n    for i in range(len(test_tup1)):\n        tup_mod.append(test_tup1[i] % test_tup2[i])\n    return tup_mod\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i], )\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError('Tuples are of different size')\n    else:\n        return tuple((element1%element2 for element1, element2 in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of same size\"\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n        return tuple(test_tup1)\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # creating new tuple\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i]%test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([tup1_el % tup2_el for (tup1_el, tup2_el) in zip(test_tup1, test_tup2)])\n    \nprint(tuple_modulo((2, 4), (3, 4)))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a%b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((num % 10) for num in (test_tup1 + test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    list_of_test_tup1 = test_tup1\n    list_of_test_tup2 = test_tup2\n    print(list_of_test_tup1, list_of_test_tup2)\n    if len(list_of_test_tup1)!= len(list_of_test_tup2):\n        return 0\n    return tuple(map(lambda x,y: x%y, list_of_test_tup1, list_of_test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x, y = 0, 0\n    j = 0\n    while x < steps:\n        if x > 0 and y >= d:\n            x = x - d\n            j += 1\n        if y < d:\n            y = y + 1\n            j += 1\n    return j\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if d == 0:\n        return 1\n    if d < 0:\n        return 0\n    return min(min_Jumps(steps - 1, d), 1 + min_Jumps(steps - 1, d - steps))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if d <= 0: \n        return float('inf')\n    if d < steps: \n        return float('inf')\n    if d == steps: \n        return 1\n    return 1 + min_Jumps(steps - d, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return int(steps + (d - steps) / 2)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==0:\n        return 0\n    elif d==1:\n        return steps\n    else:\n        return min_Jumps(steps, d-1) + min_Jumps(steps, d-2)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    while steps > d:\n        steps -= d\n        jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 0\n    if steps < d: return -1\n    \n    if (steps == d): return 1\n    if (steps % d == 0): return int(steps/d)\n    if (steps % d!= 0): return int(steps/d) + 1\n    \n    min_Jumps(steps-d, d) + min_Jumps(steps+d, d)\n    \n    if (steps % d!= 0): return -1\n    if (steps % d == 0): return int(steps/d)\n    \n    \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    max_steps = 0\n    for i in range(0, steps):\n        if (d < 0) :\n            break\n        count = 0\n        max_steps = max_steps + d\n        d = d - 1\n        while (d >= 0) and (d <= max_steps) :\n            d = d - 1\n            count = count + 1\n        max_steps = max_steps - 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def jump(steps, d): \n        for i in range(1, steps+1): \n            if d % i == 0: \n                return i \n    return jump(steps, d) - 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # a = abs(y-x)\n    # ans = -1\n    # while(a!= 0):\n    #     ans += 1\n    #     if a == 1:\n    #         return ans\n    #     a = (a+d)%d\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    newList = []\n    for i in range(len(nums1)):\n        newList.append(nums1[i] / nums2[i])\n    return newList\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in nums1:\n        lst1.append(i)\n    for i in nums2:\n        lst2.append(i)\n    return (lst1,lst2)\nprint(div_list([1,2,3,4],[3,4,5,6]))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #nums1, nums2 = nums1.copy(), nums2.copy()\n    divs = []\n    while len(nums1)>0:\n        divs.append(nums1.pop() / nums2.pop())\n    return divs\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1=len(nums1)\n    n2=len(nums2)\n    if n1!=n2:\n        return None\n    else:\n        for i in range(n1):\n            nums1[i]=nums1[i]/nums2[i]\n        return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2)\n    def div_helper(nums1,nums2):\n        lst = []\n        for i in range(len(nums1)):\n            lst.append(nums1[i]/nums2[i])\n        return lst\n    return div_helper(nums1,nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if nums1 == nums2:\n        return nums1\n    if len(nums1) > len(nums2):\n        nums2.extend([0]*(len(nums1)-len(nums2)))\n    elif len(nums1) < len(nums2):\n        nums1.extend([0]*(len(nums2)-len(nums1)))\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(0,len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    d = {}\n    d = {x:y for x,y in zip(nums1,nums2)}\n    return d\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    c=[]\n    for i in range(len(nums1)):\n        c.append(nums1[i]/nums2[i])\n    return c\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number = ''\n    number_flag = False\n    numbers = []\n    for i in range(len(test_str)):\n        if test_str[i].isnumeric():\n            number += test_str[i]\n            number_flag = True\n        else:\n            if number_flag:\n                numbers.append(number)\n                number_flag = False\n    numbers.append(number)\n    \n    return ''.join(numbers)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    try:\n        assert (test_str.count('0') + test_str.count('1') + test_str.count('2') + test_str.count('3') + test_str.count('4') + test_str.count('5') + test_str.count('6') + test_str.count('7') + test_str.count('8') + test_str.count('9') <= 8), \"No more than 8 digits in the string\"\n        assert (test_str.count('0') + test_str.count('1') + test_str.count('2') + test_str.count('3') + test_str.count('4') + test_str.count('5') + test_str.count('6') + test_str.count('7') + test_str.count('8') + test_str.count('9') >= 0), \"No more than 0 digits in the string\"\n    except AssertionError:\n        print(\"Invalid Input\")\n    else:\n        tmp_list = []\n        for each in test_str:\n            if each == '0' or each == '1' or each == '2' or each == '3' or each == '4' or each == '5' or each == '6' or each == '7' or each == '8' or each == '9':\n                tmp_list.append(each)\n        tmp_list.sort()\n        final_str = ''.join(tmp_list)\n        final_str = final_str.lstrip('0') + '0'\n        print(final_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = test_str\n    s = s.strip()\n    n = len(s)\n    if n==0:\n        return test_str\n    a = []\n    b = []\n    for i in range(n):\n        if s[i].isnumeric():\n            a.append(s[i])\n        else:\n            b.append(s[i])\n    a = \"\".join(a)\n    b = \"\".join(b)\n    return a+b\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    arr = []\n    \n    for num in test_str:\n        if num.isdigit():\n            arr.append(num)\n        \n    return \"\".join(arr) + test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = list(test_str)\n    for i in range(len(lst)):\n        if lst[i].isnumeric():\n            lst.append(lst.pop(i))\n    return ''.join(lst)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not isinstance(test_str,str):\n        print(\"Only Strings are allowed\")\n        return test_str\n    new_str = test_str.replace(\" \",\"\")\n    new_str = new_str.replace(\".\",\"\")\n    new_str = new_str.replace(\"-\",\"\")\n    return new_str\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for c in test_str:\n        if c.isalpha():\n            result += c\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #remove all white space\n    test_str = test_str.strip()\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    nums = \"0123456789\"\n    for i in test_str:\n        if i in nums:\n            result = i + result\n    for i in nums:\n        if i not in result:\n            result = i + result\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    try:\n        if not type(test_str) == str:\n            raise TypeError\n        return test_str[:].join(test_str.split()[::-1])\n    except (TypeError, IndexError, ValueError):\n        return None\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_divisible(a,i,j):\n        a.sort()\n        if i==j:\n            return a[i]\n        if j==i+1:\n            return max(a[i],a[j])\n        k = int((i+j)/2)\n        if a[k]%2==0:\n            return max(a[k],largest_divisible(a,i,k),largest_divisible(a,k,j))\n        else:\n            return max(a[k],largest_divisible(a,i,k-1),largest_divisible(a,k,j-1))\n    if type(a)==int:\n        return largest_divisible(a,0,len(a))\n    else:\n        a.sort()\n        return largest_divisible(a,0,len(a)-1)"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a == []: return 0\n    if len(a) == 1: return 1\n    if len(a) == 2: return 2\n    dp = [[0]*len(a) for _ in range(len(a))]\n    for i in range(len(a)):\n        dp[i][i] = 1\n    for i in range(len(a)-1, -1, -1):\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                dp[i][j] = dp[i+1][j-1] + 1\n    return max(max(row) for row in dp)\n    \ndef largest_subset_bit_twiddle(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair of numbers is divisible.\n    '''\n    if a == []: return 0\n    if len(a) == 1: return 1\n    if len(a) == 2: return 2\n    dp = [[0]*len(a) for _ in range(len(a))]\n    for i in range(len(a)):\n        dp[i][i] = 1\n    for i in range(len(a)-1, -1, -1):\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                dp[i][j] = dp[i+1][j-1] + 1\n    return max(max(row) for row in dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    index = 0\n    size = 0\n    while index < len(a)-1:\n        if a[index] % 2 == 0:\n            a[index], a[index + 1] = a[index + 1], a[index]\n        else:\n            index += 1\n        if a[index] % 2 == 0:\n            a[index], a[index + 1] = a[index + 1], a[index]\n        else:\n            index += 1\n        if a[index] % 2 == 0:\n            a[index], a[index + 1] = a[index + 1], a[index]\n        else:\n            index += 1\n        size = max(size, sum(a[index:index+2]))\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def lc(n):\n        res = 1\n        for i in range(2,n+1):\n            if n%i==0:\n                res = max(res,i)\n        return res\n    \n    def is_divisible(n):\n        for i in range(2,n//2+1):\n            if n%i==0:\n                return False\n        return True\n    \n    n = len(a)\n    if n==1:\n        return a\n    \n    ls = [lc(i) for i in a]\n    \n    # print(ls)\n    \n    def binary_search(arr,x):\n        low = 0\n        high = len(arr)\n        while low<=high:\n            mid = (low+high)//2\n            if arr[mid]==x:\n                return mid\n            if arr[mid]>x:\n                high = mid-1\n            else:\n                low = mid+1\n        return -1\n    \n    def find_index(arr,x):\n        for i in range(len(arr)):\n            if arr[i]==x:\n                return i\n        return -1\n    \n    # print(binary_search(ls,1))\n    \n    max_size_possible = -1\n    \n    # for i in range(n):\n    #     if lc(i)==2:\n    #         print(i,ls[i])\n    \n    for i in range(n):\n        if not is_divisible(i):\n            continue\n        if binary_search(ls,lc(i))!=binary_search(ls,i):\n            max_size_possible = max(max_size_possible,lc(i))\n            \n    if max_size_possible!=-1:\n        for i in range(n):\n            if lc(i)==max_size_possible:\n                index = find_index(ls,i)\n                if ls[index]==max_size_possible:\n                    ls[index] = min(ls[index],lc(i))\n                else:\n                    ls[index] = lc(i)\n        \n        # print(ls)\n    \n    for i in range(n):\n        if ls[i]==1:\n            ls[i] = 0\n    \n    ans = 0\n    for i in range(n):\n        if ls[i]==1:\n            ans += 1\n    return ans\n    \n    \n    \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset(a):\n        '''\n        Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n        '''\n        a = sorted(a)\n        l = len(a)\n        if l == 0: return []\n        if l == 1: return a\n        if l == 2: return a\n        if l == 3: return a\n        if l == 4: return a\n        max_len = 0\n        max_list = []\n        for i in range(l):\n            if i + 1 < l:\n                if a[i] % a[i + 1] == 0:\n                    max_len = a[i + 1]\n                    max_list = a[i + 1]\n            else:\n                break\n        for i in range(l):\n            if i + 1 < l and a[i] % a[i + 1] == 0:\n                if max_len > a[i + 1]:\n                    max_len = a[i + 1]\n                    max_list = a[i + 1]\n            else:\n                break\n        # for i in range(l):\n        #     if i + 1 < l:\n        #         if a[i] % a[i + 1] == 0:\n        #             if a[i + 1] > max_len:\n        #                 max_len = a[i + 1]\n        #                 max_list = a[i + 1]\n        #     else:\n        #         break\n        # for i in range(l):\n        #     if i + 1 < l:\n        #         if a[i] % a[i + 1] == 0:\n        #             if a[i + 1] > max_len:\n        #                 max_len = a[i + 1]\n        #                 max_list = a[i + 1]\n        #     else:\n        #         break\n        # for i in range(l):\n        #     if i + 1 < l:\n        #         if a[i] % a[i + 1] == 0:\n        #             if a[i + 1] > max_len:\n        #                 max_len = a[i + 1]\n        #                 max_list = a[i + 1]\n        #     else:\n        #         break\n        return max_list\n        # print(l,a)\n        # print(max_len,max_list)\n        # return max_list\n    return largest_subset(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    dp = [[1]*len(a) for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i]%a[j]==0:\n                dp[i][j] = 1 + dp[j][i]\n            else:\n                dp[i][j] = dp[j][i]\n    return max(max(row) for row in dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    import math\n    # sort numbers\n    a.sort()\n    n = len(a)\n    # create 2d array to store values\n    dp = [[0 for i in range(n)] for j in range(n)]\n    # dp[i][j] is max size of subset in jth digit\n    # initialize first row\n    for i in range(n):\n        dp[i][i] = 1\n    # for loop iterates through all numbers\n    for l in range(1, n):\n        for i in range(n-l):\n            j = i+l\n            # if last digit j is divisible by all digit i, then j in dp[i]\n            if a[i] % 10 == 0:\n                dp[i][j] = 1\n                continue\n            # if last digit j is not divisible by any digit i\n            # then j must be divisible by all the digit i-1\n            # assign it to dp[i][j]\n            for k in range(i, j):\n                if a[i] % 10 == 0 or a[k] % 10 == 0:\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j])\n            dp[i][j] += 1\n    # print table\n    for row in dp:\n        print(row)\n    # return the largest entry in dp\n    return max(max(row) for row in dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    table = {1:0, 2:1}\n    \n    for i in range(3, len(a)+1):\n        table[i] = i\n        for j in range(1, i):\n            if a[i-1] % j == 0:\n                table[i] = max(table[i], table[j] + table[i-j])\n    \n    return table[len(a)]\n    \n    \n    \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return []\n    a.sort()\n    n = len(a)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                dp[i][j] = 1 + dp[i][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    ans = []\n    max_len = 0\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        max_len = max(max_len, dp[i][i])\n        if max_len == dp[i][i]:\n            ans.append(a[i])\n    return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[False for j in range(n)] for i in range(n)]\n    max_len = 0\n    for i in range(n):\n        dp[i][i] = True\n        max_len = max(max_len,1)\n    for length in range(2,n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if a[i]%length==0 and a[j]%length==0:\n                if dp[i][j-1] == False:\n                    dp[i][j] = True\n                    max_len = max(max_len,length)\n    return max_len\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = sorted(arr1 + arr2)\n    return arr[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    middle = n//2\n    arr1 = arr1[:middle]\n    arr2 = arr2[middle:]\n    arr = merge(arr1, arr2)\n    return arr\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1!= len2:\n        return \"error\"\n    if len1%2 == 0:\n        mid1 = (len1//2)\n        mid2 = (len1//2) - 1\n    else:\n        mid1 = (len1//2)\n        mid2 = (len1//2)\n    sorted_list1 = sorted(arr1)\n    sorted_list2 = sorted(arr2)\n    med1 = sorted_list1[mid1]\n    med2 = sorted_list2[mid2]\n    if len1%2 == 0:\n        if med1 == med2:\n            return (mid1+mid2)//2\n        else:\n            return (med1+med2)//2\n    else:\n        if med1 == med2:\n            return (mid1+1)//2\n        else:\n            return (med1+1)//2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)==0 and len(arr2)==0:\n        return None\n    if len(arr1)==0:\n        return arr2[n//2]\n    if len(arr2)==0:\n        return arr1[n//2]\n    if arr1[n//2] < arr2[n//2]:\n        return get_median(arr1, arr2[(n//2)+1:], (n//2)+1)\n    else:\n        return get_median(arr1[:n//2], arr2, n//2)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged_list = sorted(arr1 + arr2)\n    if n % 2 == 1:\n        return (merged_list[(n//2)-1] + merged_list[n//2]) / 2\n    else:\n        return (merged_list[n//2])\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    # idx1 = idx2 = 0\n    idx1 = idx2 = 0\n    while idx1 <= n - 2 and idx2 <= n - 1:\n        if arr1[idx1] < arr2[idx2]:\n            idx1 += 1\n        elif arr2[idx2] < arr1[idx1]:\n            idx2 += 1\n        else:\n            if idx1 == idx2:\n                return min(arr1[idx1], arr2[idx2])\n            idx1 += 1\n            idx2 += 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    \n    if (n == 0):\n        return\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # count = 0\n    # while(count < n):\n    #     if(arr1[count] > arr2[count]):\n    #         arr1[count], arr2[count] = arr2[count], arr1[count]\n    #     count += 1\n    # count = 0\n    # while(count < n):\n    #     if(arr1[count] > arr2[count]):\n    #         arr1[count], arr2[count] = arr2[count], arr1[count]\n    #     count += 1\n    # count = 0\n    # while(count < n):\n    #     if(arr1[count] < arr2[count]):\n    #         arr1[count], arr2[count] = arr2[count], arr1[count]\n    #     count += 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    assert len(arr1) == len(arr2)\n    if len(arr1) == 1:\n        return arr1[0]\n    \n    low = 0\n    high = len(arr1) - 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # choose the middle value of the array\n    middle = n // 2\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n        \nprint(nth_nums([1,2,3,4],2))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.sort()\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    x = []\n    for i in range(len(nums)):\n        x.append(n**i)\n    return x\nprint(nth_nums([1, 2, 3, 4], 3))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [a**n for a in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    power_of_nums = []\n    for i in range(len(nums)):\n        power_of_nums.append(nums[i]**n)\n    return power_of_nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    a = 1\n    for i in range(n):\n        a = a * nums[i]\n    return a\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    if len(nums) == 1 and n == 1:\n        return nums\n    for i in range(len(nums)):\n        res.append(nums[i] ** n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        for i in nums:\n            yield i\n    else:\n        for i in nums:\n            yield i**n\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    output=[]\n    for i in nums:\n        output.append(i**n)\n    return output\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return (pow(i,n) for i in nums)\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase = string.upper()\n    return uppercase\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        raise TypeError(\"Please pass a string\")\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #string = input(\"Enter the string \")\n    #print(\"The string in upper case is: \", string.upper())\n    #print(\"The string in upper case is: \", string.upper().swapcase())\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    List = newList\n    List[0], List[-1] = List[-1], List[0]\n    return List\n    \ndef find_min_in_List(newList): \n    '''\n    Write a python function to find the minimum element from a given list.\n    '''\n    List = newList\n    min = List[0]\n    for i in range(1, len(List)): \n        if List[i] < min:\n            min = List[i]\n    return min\n    \ndef insertion_sort(newList): \n    '''\n    Write a python function to sort a list using insertion sort algorithm.\n    '''\n    List = newList\n    for i in range(1, len(List)): \n        currentvalue = List[i] \n        position = i\n        while position > 0 and List[position-1] > currentvalue: \n            List[position] = List[position-1] \n            position = position-1\n        List[position] = currentvalue\n    return List\n    \ndef merge_sort(newList): \n    '''\n    Write a python function to sort a list using merge sort algorithm.\n    '''\n    List = newList\n    if len(List) < 2: \n        return List\n    else: \n        mid = len(List)//2\n        left = List[:mid] \n        right = List[mid:] \n        left = merge_sort(left) \n        right = merge_sort(right) \n        return merge(left, right) \ndef merge(left, right): \n    '''\n    Write a python function to merge two sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    while len(left) > 0 and len(right) > 0: \n        if left[0] <= right[0]: \n            merged_list.append(left[0])\n            left.remove(left[0]) \n        else: \n            merged_list.append(right[0])\n            right.remove(right[0]) \n    if len(left) == 0: \n        merged_list = merged_list + right\n    if len(right) == 0: \n        merged_list = merged_list + left\n    return merged_list\n    \ndef Selection_Sort(newList): \n    '''\n    Write a python function to sort a list using selection sort algorithm.\n    '''\n    List = newList\n    for i in range(len(List)): \n        Min = i \n        for j in range(i+1, len(List)): \n            if List[Min] > List[j]: \n                Min = j \n        List[i], List[Min] = List[Min], List[i] \n    return List\n    \ndef bubble_Sort(newList): \n    '''\n    Write a python function to sort a list using bubble sort algorithm.\n    '''\n    List = newList\n    for i in range(len(List)-1,0,-1): \n        for j in range(i): \n            if List[j] > List[j+1]: \n                List[j], List[j+1] = List[j+1], List[j] \n    return List\n    \ndef quick_Sort(newList): \n    '''\n    Write a python function to sort a list using quick sort algorithm.\n    '''\n    List = newList\n    if len(List) < 2: \n        return List\n    else: \n        pivot = List[0] \n        greater = [element for element in List[1:] if element > pivot] \n        lesser = [element for element in List[1:] if element < pivot] \n        return quick_Sort(lesser) + [pivot] + quick_Sort(greater)\n    \ndef HeapSort(newList): \n    '''\n    Write a python function to sort a list using heap sort algorithm.\n    '''\n    List = newList\n    def adjust_heap(List, i, length): \n        largest = i \n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < length and List[left] > List[largest]: \n            largest = left \n        if right < length and List[right] > List[largest]: \n            largest = right \n        if largest!= i: \n            List[largest], List[i] = List[i], List[largest]\n            return adjust_heap(List, largest, length)\n        return List\n    def heapify(List, i, length): \n        largest = i \n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < length and List[left] > List[largest]: \n            largest = left \n        if right < length and List[right] > List[largest]: \n            largest = right \n        if largest!= i: \n            List[largest], List[i] = List[i], List[largest]\n            return heapify(List, largest, length)\n        return List\n    def build_max_heap(List): \n        for i in range((len(List) // 2) - 1, -1, -1): \n            List = heapify(List, i, len(List))\n        return List\n    def heap_sort(List): \n        List = build_max_heap(List)\n        for i in range(len(List) - 1, 0, -1): \n            List[i], List[0] = List[0], List[i]\n            List = heapify(List, 0, i)\n        return List\n    List = heap_sort(List)\n    return List\n    \ndef _main_(argv):\n    '''\n    Write a python function to print given list.\n    '''\n    List = list(map(int,input().split()))\n    print(List)\n    \ndef _min_(argv):\n    '''\n    Write a python function to find the minimum element from a given list.\n    '''\n    List = list(map(int,input().split()))\n    print(find_min_in_List(List))\n    \ndef _swap_(argv):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    List = list(map(int,input().split()))\n    print(swap_List(List))\n    \ndef _merge_(argv):\n    '''\n    Write a python function to sort a list using merge sort algorithm.\n    '''\n    List = list(map(int,input().split()))\n    print(merge_sort(List))\n    \ndef _insertion_(argv):\n    '''\n    Write a python function to sort a list using insertion sort algorithm.\n    '''\n    List = list(map(int,input().split()))\n    print(insertion_sort(List))\n    \ndef _selection_(argv):\n    '''\n    Write a python function to sort a list using selection sort algorithm.\n    '''\n    List = list(map(int,input().split()))\n    print(Selection_Sort(List))\n    \ndef _bubble_(argv):\n    '''\n    Write a python function to sort a list using bubble sort algorithm.\n    '''\n    List = list(map(int,input().split()))\n    print(bubble_Sort(List))\n    \ndef _quick_(argv):\n    '''\n    Write a python function to sort a list using quick sort algorithm.\n    '''\n    List = list(map(int,input().split()))\n    print(quick_Sort(List))\n    \ndef _heap_(argv):\n    '''\n    Write a python function to sort a list using heap sort algorithm.\n    '''\n    List = list(map(int,input().split()))\n    print(HeapSort(List))\n    \ndef _merge_sort_(argv):\n    '''\n    Write a python function to merge two sorted lists into a single sorted list.\n    '''\n    List = list(map(int,input().split()))\n    print(merge_sort(List))\n    \ndef _count_(argv):\n    '''\n    Write a python function to count the number of occurrences of an element in a given list.\n    '''\n    List = list(map(int,input().split()))\n    List = sorted(Lis"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    List1 = newList\n    List1[0], List1[-1] = List1[-1], List1[0]\n    print(List1)\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)<2:\n        return False\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[:]\n    if len(a) > 1: \n        a[0], a[-1] = a[-1], a[0] \n        return a \n    else: \n        return newList \n        \na = swap_List([1, 2, 3, 4, 5, 6]) \nprint(a) \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList.pop()\n    newList.insert(0, a)\n    return newList\n    \n    \ndef swap_second_and_last_elem(newList): \n    '''\n    Write a python function to interchange the second and last element in a given list.\n    '''\n    a = newList.pop(1)\n    newList.append(a)\n    return newList\n    \n    \ndef swap_middle_two_elements(newList): \n    '''\n    Write a python function to interchange the middle two elements in a given list.\n    '''\n    a = newList.pop(1)\n    newList.insert(2, a)\n    return newList\n    \n    \ndef swap_last_element_first_element(newList): \n    '''\n    Write a python function to interchange the last element with the first element in a given list.\n    '''\n    a = newList.pop()\n    newList.insert(0, a)\n    return newList\n    \n    \ndef swap_first_two_elements(newList): \n    '''\n    Write a python function to interchange the first two elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.insert(0, a)\n    return newList\n    \n    \ndef swap_first_and_last_elements(newList): \n    '''\n    Write a python function to interchange the first and last elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.append(a)\n    return newList\n    \n    \ndef swap_first_and_second_elements(newList): \n    '''\n    Write a python function to interchange the first and second elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.insert(1, a)\n    return newList\n    \n    \ndef swap_middle_elements_first_and_second(newList): \n    '''\n    Write a python function to interchange the middle elements in a given list.\n    '''\n    a = newList.pop(1)\n    newList.insert(0, a)\n    return newList\n    \n    \ndef swap_middle_elements_last_and_first(newList): \n    '''\n    Write a python function to interchange the middle elements in a given list.\n    '''\n    a = newList.pop(1)\n    newList.insert(2, a)\n    return newList\n    \n    \ndef swap_middle_elements_last_and_second_one_by_one(newList): \n    '''\n    Write a python function to interchange the middle elements in a given list.\n    '''\n    a = newList.pop(1)\n    newList.insert(1, a)\n    return newList\n    \n    \ndef swap_first_two_middle_elements(newList): \n    '''\n    Write a python function to interchange the first two middle elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.insert(1, a)\n    return newList\n    \n    \ndef swap_first_middle_elements(newList): \n    '''\n    Write a python function to interchange the first middle elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.insert(1, a)\n    return newList\n    \n    \ndef swap_middle_elements_first_and_last(newList): \n    '''\n    Write a python function to interchange the middle elements in a given list.\n    '''\n    a = newList.pop(1)\n    newList.append(a)\n    return newList\n    \n    \ndef swap_first_middle_elements_last(newList): \n    '''\n    Write a python function to interchange the first middle elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.append(a)\n    return newList\n    \n    \ndef swap_last_first_elements(newList): \n    '''\n    Write a python function to interchange the last and first elements in a given list.\n    '''\n    a = newList.pop()\n    newList.insert(0, a)\n    return newList\n    \n    \ndef swap_middle_elements_first_and_last(newList): \n    '''\n    Write a python function to interchange the middle elements in a given list.\n    '''\n    a = newList.pop(1)\n    newList.append(a)\n    return newList\n    \n    \ndef swap_first_middle_elements_last_one_by_one(newList): \n    '''\n    Write a python function to interchange the first middle elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.append(a)\n    return newList\n    \n    \ndef swap_first_middle_elements_last_one_by_one_left(newList): \n    '''\n    Write a python function to interchange the first middle elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.insert(2, a)\n    return newList\n    \n    \ndef swap_last_first_middle_elements(newList): \n    '''\n    Write a python function to interchange the last and first middle elements in a given list.\n    '''\n    a = newList.pop()\n    newList.insert(0, a)\n    return newList\n    \n    \ndef swap_middle_first_last_elements(newList): \n    '''\n    Write a python function to interchange the middle first and last elements in a given list.\n    '''\n    a = newList.pop(1)\n    newList.insert(0, a)\n    return newList\n    \n    \ndef swap_middle_first_and_last(newList): \n    '''\n    Write a python function to interchange the middle first and last elements in a given list.\n    '''\n    a = newList.pop(1)\n    newList.append(a)\n    return newList\n    \n    \ndef swap_first_middle_last_elements_one_by_one(newList): \n    '''\n    Write a python function to interchange the first middle last and last elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.insert(2, a)\n    return newList\n    \n    \ndef swap_middle_last_first_elements_left(newList): \n    '''\n    Write a python function to interchange the middle last and first elements in a given list.\n    '''\n    a = newList.pop()\n    newList.insert(1, a)\n    return newList\n    \n    \ndef swap_first_middle_last_elements_right(newList): \n    '''\n    Write a python function to interchange the first middle last and last elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.insert(3, a)\n    return newList\n    \n    \ndef swap_middle_first_last_elements_right(newList): \n    '''\n    Write a python function to interchange the middle first and last elements in a given list.\n    '''\n    a = newList.pop(0)\n    newList.insert(3, a)\n    return newList\n    \n    \ndef swap_middle_last_first_elements_right(newList): \n    '''\n    Write a python function to interchange the middle last and first elements in a given list.\n    '''\n    a = newList.pop()\n    newList.insert(3, a)\n    return newList\n    \n    \ndef swap_last_middle_first_elements_right(newList): \n    '''\n    Write a python function to interchange the last and middle first elements in a given list.\n    '''\n    a = newList.pop()\n    newList.insert(2, a)\n    return newList\n    \n    \ndef swap_last_middle_first_elements_left(newList): \n    '''\n    Write a python function to interchange the last and middle first elements in a given list.\n    '''\n    a = newList"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    x=newList\n    a=x[0]\n    x.remove(x[0])\n    x.append(a)\n    \n    \n    return x\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first=newList[0]\n    last=newList[len(newList)-1]\n    newList[0]=last\n    newList[len(newList)-1]=first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 0:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print('List after swapping: {}'.format(newList))\n    else:\n        print('List is empty')\n    return None\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Write your logic here\n    area = (1/2)*math.sqrt(r*(r+2)*(r+2)*(r+2)*(r+2))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def circumcircleradius(n):\n        '''\n        Find the circumcircle radius of a circle\n        '''\n        if n <= 3:\n            return 1\n        else:\n            return circumcircleradius(math.floor(n / 3) - 1)\n    def area_of_triangle(r) :\n        '''\n        Find area of the largest triangle inscribed in a semicircle with radius r.\n        '''\n        return (r ** 2) * math.sqrt(2 * r * (r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * math.sqrt(r ** 2 - r + 2 * mat"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # We are going to try to use a formula to solve this problem.\n    \n    # Here are the two formulas that I've used to solve this problem.\n    \n    # Formula A: Use a formula to solve for area of triangle.\n    \n    # Formula B: Use the area of a circle to solve for area of triangle.\n    \n    # The formula A is used by default when calculating the area of a triangle.\n    # If we were to calculate the area of a circle by using formula B, we would have to use an additional factor of 2.\n    \n    # Using formula A, we can solve for the area of a triangle when we know the height, radius and area of a triangle's base.\n    \n    # Using formula B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (h * (1/2)) * r\n    \n    # Formula B\n    # a = r * r * (1/3)\n    \n    # The formulas A and B are a little trickier to solve than expected. The equation can be divided into two parts.\n    # The first part is the part that involves the height, which we can solve by multiplying by 1/2.\n    # The second part is the part that involves the area of the base, which we can solve by multiplying by the radius.\n    # The formula A that's solved in the first part is the formula B that's solved in the second part.\n    # So, we are multiplying by the radius to solve for the height.\n    \n    # Using formulas A and B, we can solve for the area of a triangle when we know the height, radius and area of the base.\n    \n    # If we were to calculate the area of a circle by using formula B, we would have to use an additional factor of 2.\n    \n    # Formula A\n    # a = (h * (1/2)) * r\n    \n    # Formula B\n    # a = r * r * (1/3)\n    \n    # Using formulas A and B, we can solve for the area of a triangle when we know the height, radius and area of the base.\n    \n    # Formula A\n    # a = ((h * (1/2)) * r) + ((1/3) * r * r)\n    \n    # Formula B\n    # a = (1/2) * (r * r * (1/3))\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * (r * r * (1/3))\n    \n    # Formula B\n    # a = r * r * (1/3)\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = 1/2 * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = 1/3 * r * r\n    \n    # The formulas A and B are a little trickier to solve than expected. The equation can be divided into two parts.\n    # The first part is the part that involves the height, which we can solve by multiplying by 1/2.\n    # The second part is the part that involves the area of the base, which we can solve by multiplying by the radius.\n    # The formula A that's solved in the first part is the formula B that's solved in the second part.\n    # So, we are multiplying by the radius to solve for the height.\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the height, radius and area of the base.\n    \n    # If we were to calculate the area of a triangle by using formula B, we would have to use an additional factor of 2.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a triangle when we know the height, radius and area of the base.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    \n    # Formula A\n    # a = (1/2) * r * r * (1/3)\n    \n    # Formula B\n    # a = (1/3) * r * r\n    \n    # Using formulas A and B, we can solve for the area of a circle when we know the radius.\n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0 :\n        raise ValueError\n    area = 1/2 * (r**2 * math.sin(math.pi/r))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    if r < 0 :\n        raise ValueError(\"ERROR: r should be a positive number\")\n    else :\n        area = (1/2)*math.sqrt(math.pow(r,2) - math.pow((r/2),2))\n        return area\n        \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # p1, p2, p3 are the coordinates of the three vertices of the triangle\n    p1, p2, p3 = (3,4), (6,1), (5,7)\n    # calculate the area of the triangle\n    a = 0.5*abs(p1[0]-p2[0])*abs(p2[1]-p3[1])\n    b = 0.5*abs(p1[0]-p3[0])*abs(p3[1]-p2[1])\n    c = 0.5*abs(p2[0]-p1[0])*abs(p1[1]-p3[1])\n    # calculate the area of the triangle formed by p1,p2,p3\n    area = a+b+c\n    # calculate the area of the largest inscribed triangle\n    max_area = a+b+c\n    # return the area of the largest triangle\n    return max_area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1,r) :\n        x = math.sqrt((r**2)-(i**2))\n        area = area + x\n    print(area)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    n = 3\n    l = r * 2\n    while l > r :\n        l = l + 1\n        n = n + 2\n    if (n == 4) :\n        a = (r**2)*((n+1)**2)/4\n    elif (n == 3) :\n        a = r**2\n    else :\n        a = 0\n    return a\ndef test_triangle_area():\n    print(\"Test 1\")\n    print(triangle_area(5))\n    print(\"Test 2\")\n    print(triangle_area(5))\n    print(\"Test 3\")\n    print(triangle_area(5))\n    print(\"Test 4\")\n    print(triangle_area(5))\n    print(\"Test 5\")\n    print(triangle_area(5))\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    #defining the formula of the triangle\n    def formulae(r):\n        area = math.pi*r*r\n        return(area)\n    #converting the formula to int and saving in an array\n    def formulae_int(r):\n        area = int(math.pi*r*r)\n        return(area)\n    #making the function into a function\n    formulae = lambda r : formulae_int(r)\n    #finding the area of the largest triangle and saving in an array\n    print(formulae(r))\n    return(formulae(r))\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    import math\n    a = math.pi*r**2\n    \n    return a\n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if end is None else end\n    for i in range(start,end):\n        if i+1 not in array:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start > end:\n        return None\n    else:\n        if array[start] < array[end]:\n            return start\n        else:\n            return end\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start>=end or start>len(array):\n        return -1\n    if end ==0:\n        return 0\n    if array[start] == array[start-1]:\n        return find_First_Missing(array,start+1,end)\n    else:\n        return start\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start > end:\n        return None\n    elif array[start]==0 or array[start]==len(array)-1:\n        return start\n    elif array[end]==len(array)-1:\n        return end\n    elif array[start]<array[end]:\n        return find_First_Missing(array,start,end-1)\n    elif array[start]>array[end]:\n        return find_First_Missing(array,start+1,end)\n    else:\n        return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start < 0 or start >= len(array) or end < 0 or end >= len(array):\n        return\n    \n    for i in range(len(array)):\n        if (start <= i and i <= end):\n            if array[i]!= i+1:\n                return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    while start <= end:\n        if start!= array[start]:\n            return start\n        start = start + 1\n    return start\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \nprint(replace_spaces(\"sdfsdf\"))\nprint(replace_spaces(\"Hello World\")"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = string.replace(\" \", \"%20\")\n    print(result)\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    space_replaced_string = string.replace(\" \", \"%20\")\n    print(\"Original string :\",string)\n    print(\"Space replaced string :\",space_replaced_string)\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    reversed_string = string[::-1]\n    if reversed_string.lower() == string.lower():\n        print(string,\"is a palindrome\")\n    else:\n        print(string,\"is not a palindrome\")\n    \n    \ndef is_a_parent_of_another(first,second,third):\n    '''\n    Write a function to check if the second string is a substring of the third string.\n    '''\n    if second in third:\n        print(third,\"is a substring of\",first)\n    else:\n        print(third,\"is not a substring of\",first)\n    \n    \ndef get_all_substrings(string):\n    '''\n    Write a function to get all the substrings of a given string.\n    '''\n    substrings = []\n    for i in range(0,len(string)):\n        for j in range(i,len(string)):\n            substring = string[i:j+1]\n            substrings.append(substring)\n    print(substrings)\n    \n    \ndef get_unique_substrings(string):\n    '''\n    Write a function to get all unique substrings of a given string.\n    '''\n    substrings = []\n    for i in range(0,len(string)):\n        for j in range(i+1,len(string)):\n            substring = string[i:j+1]\n            if substring not in substrings:\n                substrings.append(substring)\n    print(substrings)\n    \n    \ndef count_substrings(string):\n    '''\n    Write a function to get the total number of substrings in a given string.\n    '''\n    num_substrings = 0\n    for i in range(0,len(string)):\n        for j in range(i+1,len(string)):\n            substring = string[i:j+1]\n            num_substrings += 1\n    print(\"Total number of substrings :\",num_substrings)\n    \n    \ndef count_occurrences(string):\n    '''\n    Write a function to get the number of occurrences of a substring in a given string.\n    '''\n    count = 0\n    for i in range(0,len(string)):\n        if string[i] in string[i+1:]:\n            count += 1\n    print(\"Number of occurrences :\",count)\n    \n    \ndef is_unique(string):\n    '''\n    Write a function to check if a string is unique.\n    '''\n    string_lowercase = string.lower()\n    if len(string_lowercase) == len(set(string_lowercase)):\n        print(string,\"is a unique string\")\n    else:\n        print(string,\"is not a unique string\")\n        \n        \ndef is_palindrome_recursive(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    return is_palindrome_recursive(string[1:-1])\n    \n    \ndef remove_vowels(string):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    vowels = 'aeiou'\n    for vowel in vowels:\n        if vowel in string:\n            string = string.replace(vowel,\"\")\n    print(string)\n    \n    \ndef solve(string):\n    '''\n    Write a function to convert a given string into its acronym.\n    '''\n    acronym = []\n    vowels = 'aeiou'\n    for i in range(0,len(string)):\n        if string[i] not in vowels:\n            acronym.append(string[i])\n    acronym = ''.join(acronym)\n    print(\"Acronym of string :\",acronym)\n    \n    \ndef solve_iterative(string):\n    '''\n    Write a function to convert a given string into its acronym.\n    '''\n    acronym = []\n    vowels = 'aeiou'\n    for i in range(0,len(string)):\n        if string[i] not in vowels:\n            acronym.append(string[i])\n    acronym = ''.join(acronym)\n    print(\"Acronym of string :\",acronym)\n    \n    \ndef solve_recursive(string):\n    '''\n    Write a function to convert a given string into its acronym.\n    '''\n    acronym = []\n    vowels = 'aeiou'\n    def helper(index,acronym):\n        if index == len(string):\n            acronym.append(string[index])\n            return acronym\n        elif string[index] not in vowels:\n            acronym.append(string[index])\n            return helper(index+1,acronym)\n        else:\n            return helper(index+1,acronym)\n    return helper(0,acronym)\n    \n    \ndef solve_brute_force(string):\n    '''\n    Write a function to convert a given string into its acronym.\n    '''\n    acronym = []\n    vowels = 'aeiou'\n    for i in range(0,len(string)):\n        if string[i] not in vowels:\n            acronym.append(string[i])\n    acronym = ''.join(acronym)\n    print(\"Acronym of string :\",acronym)\n    \n    \ndef solve_brute_force_iterative(string):\n    '''\n    Write a function to convert a given string into its acronym.\n    '''\n    acronym = []\n    vowels = 'aeiou'\n    for i in range(0,len(string)):\n        if string[i] not in vowels:\n            acronym.append(string[i])\n    acronym = ''.join(acronym)\n    print(\"Acronym of string :\",acronym)\n    \n    \ndef solve_brute_force_recursive(string):\n    '''\n    Write a function to convert a given string into its acronym.\n    '''\n    acronym = []\n    vowels = 'aeiou'\n    def helper(index,acronym):\n        if index == len(string):\n            acronym.append(string[index])\n            return acronym\n        elif string[index] not in vowels:\n            acronym.append(string[index])\n            return helper(index+1,acronym)\n        else:\n            return helper(index+1,acronym)\n    return helper(0,acronym)\n    \n    \ndef remove_every_other(string):\n    '''\n    Write a function to remove every other char from a given string.\n    '''\n    if len(string)%2 == 0:\n        return string[::2]\n    else:\n        return string[0::2]\n    \n    \ndef count_characters_with_odd_occurrences(string):\n    '''\n    Write a function to count the characters with odd occurrences in a given string.\n    '''\n    count = 0\n    for i in range(0,len(string)):\n        if i%2!= 0:\n            count += 1\n    print(\"Number of characters with odd occurrences :\",count)\n    \n    \ndef count_characters_with_odd_occurrences_iterative(string):\n    '''\n    Write a function to count the characters with odd occurrences in a given string.\n    '''\n    count = 0\n    for i in range(0,len(string)):\n        if i%2!= 0:\n            count += 1\n    print(\"Number of characters with odd occurrences :\",count)\n    \n    \ndef count_characters_with_odd_occurrences_recursiv"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # split the string into a list of words\n    words = string.split()\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if(list[i]%2==0):\n            newList.append(list[i])\n    return newList\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens=[]\n    for num in list:\n        if num%2==0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for x in list:\n        if (x % 2) == 0:\n            evens.append(x)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n    print(even)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd_list = []\n    even_list = []\n    for i in range(0, len(list)):\n        if (list[i] % 2 == 0):\n            even_list.append(list[i])\n        else:\n            odd_list.append(list[i])\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(0, len(list)):\n        if list[i]%2==0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [tuple(x) for x in zip(ele[0]-1, ele[1], ele[2]+1)] +\\\n            [tuple(x) for x in zip(ele[0]+1, ele[1], ele[2])] +\\\n            [tuple(x) for x in zip(ele[0], ele[1]-1, ele[2]+1)] +\\\n            [tuple(x) for x in zip(ele[0], ele[1]+1, ele[2])]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if i == 0 and j == 0:\n                continue\n            elif (i,j) == (0,0):\n                continue\n            if i!= 0 or j!= 0:\n                sub.append((ele[0]+i, ele[1]+j))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    t = (x-1, y)\n    l = (x+1, y)\n    b = (x, y-1)\n    r = (x, y+1)\n    sub.append(t)\n    sub.append(l)\n    sub.append(b)\n    sub.append(r)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    adj = [[x, y-1], [x, y+1], [x-1, y], [x+1, y]]\n    for j in adj:\n        if j not in sub and j[0] >= 0 and j[0] < len(grid) and j[1] >= 0 and j[1] < len(grid[0]):\n            sub.append(j)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    adj.append([ele[0]+1, ele[1]])\n    adj.append([ele[0]-1, ele[1]])\n    adj.append([ele[0], ele[1]+1])\n    adj.append([ele[0], ele[1]-1])\n    adj.append([ele[0]+1, ele[1]+1])\n    adj.append([ele[0]+1, ele[1]-1])\n    adj.append([ele[0]-1, ele[1]+1])\n    adj.append([ele[0]-1, ele[1]-1])\n    sub.append(adj)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    y = ele[0]\n    x = ele[1]\n    sub.append((y,x))\n    if y-1 >= 0:\n        sub.append((y-1,x))\n    if y+1 <= 7:\n        sub.append((y+1,x))\n    if x-1 >= 0:\n        sub.append((y,x-1))\n    if x+1 <= 7:\n        sub.append((y,x+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x-1, y), (x, y-1), (x+1, y), (x, y+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n    if len(sub) == 3:\n        return sub\n    else:\n        for i in range(1, 4):\n            if ele[0] + i <= 3 and ele[1] + i <= 3 and ele[2] + i <= 3:\n                sub = adjac(ele[0] + i, sub)\n                sub = adjac(ele[1] + i, sub)\n                sub = adjac(ele[2] + i, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    for i in range(4):\n        if(i == 0):\n            x1 = ele[0] + 1\n            y1 = ele[1]\n        elif(i == 1):\n            x1 = ele[0]\n            y1 = ele[1] + 1\n        elif(i == 2):\n            x1 = ele[0] - 1\n            y1 = ele[1]\n        else:\n            x1 = ele[0]\n            y1 = ele[1] - 1\n        if((x1, y1) not in sub):\n            adjac(x1, sub)\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    # strip_space = str(text).replace(' ','_')\n    # print('strip_space: ', strip_space)\n    \n    replace_spaces = text.strip().replace(' ','_')\n    print('replace_spaces: ', replace_spaces)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # use either list or regex\n    # whitespace = ['\\s','']\n    # new_text = ''\n    # for i in range(len(text)):\n    #     if text[i] in whitespace:\n    #         new_text += '_'\n    #     else:\n    #         new_text += text[i]\n    # print(new_text)\n    # print(text.replace(' ', '_'))\n    # print(text.replace(' ', '_').replace('_',''))\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'.join(text.split())\n    \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    no_of_spaces = text.count(\" \")\n    list_of_spaces = []\n    list_of_underscores = []\n    for i in range(no_of_spaces):\n        list_of_spaces.append(\" \")\n        list_of_underscores.append(\"_\")\n    list_of_spaces = \"\".join(list_of_spaces)\n    list_of_underscores = \"\".join(list_of_underscores)\n    return list_of_spaces + list_of_underscores\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i]!='':\n            new_text += text[i]\n        else:\n            new_text += '_'\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    #code here\n    word = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            word += \"_\"\n        else:\n            word += text[i]\n    return word\n    "
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    replace_word = ''\n    replace_word += text.replace(' ','_')\n    replace_word +=''\n    return replace_word\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #initializing the count variable\n    count = 0\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while num_list.count(0) > 0:\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                num_list.pop(i)\n                num_list.append(0)\n    return num_list\n    \n    \ndef move_zero_to_end(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[zero_index], num_list[i] = num_list[i], num_list[zero_index]\n            zero_index += 1\n    return num_list\n    \n    \ndef find_common(list1, list2):\n    '''\n    Write a python function to find common element in two given lists.\n    '''\n    for i in list1:\n        if i in list2:\n            continue\n        else:\n            return False\n    return True\n    \n    \ndef length_longest_substring(str):\n    '''\n    Write a python function to find length of longest substring in a string.\n    '''\n    longest = 0\n    dictionary = {}\n    for i in range(len(str)):\n        if str[i] in dictionary.keys():\n            dictionary[str[i]] += 1\n        else:\n            dictionary[str[i]] = 1\n        longest = max(longest, dictionary[str[i]])\n    return longest\n    \n    \ndef unique_characters(str):\n    '''\n    Write a python function to check if a string has all unique characters.\n    '''\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                return False\n    return True\n    \n    \ndef is_rotation(str1, str2):\n    '''\n    Write a python function to check if two strings are equal after they have been rotated around a pivot.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1 + str1\n    \n    return str1 == str2\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    if len(str) == 0 or len(str) == 1:\n        return True\n    \n    if str[0] == str[-1]:\n        return is_palindrome(str[1:-1])\n    else:\n        return False\n    \n    \ndef one_away(str1, str2):\n    '''\n    Write a python function to check if two strings are one away or not.\n    '''\n    if len(str1) == len(str2) and len(str1) > 1:\n        str1 = str1 + str1\n        return str1 == str2\n    elif len(str1) + 1 == len(str2) and len(str2) > 1:\n        return False\n    elif len(str1) - 1 == len(str2) and len(str1) > 1:\n        return False\n    elif len(str1) == len(str2) - 1 and len(str2) > 1:\n        return False\n    elif len(str1) - 1 == len(str2) - 1 and len(str2) > 1:\n        return False\n    elif len(str1) - 1 == len(str2) and len(str1) > 1:\n        return False\n    else:\n        return True\n    \n    \ndef string_intersection(str1, str2):\n    '''\n    Write a python function to find the set intersection of two given strings.\n    '''\n    common_letters = 0\n    if len(str1) < len(str2):\n        str1, str2 = str2, str1\n    \n    for i in range(len(str1)):\n        if str1[i] in str2:\n            common_letters += 1\n            str2 = str2.replace(str1[i], '')\n    \n    return common_letters\n    \n    \ndef string_union(str1, str2):\n    '''\n    Write a python function to find the set union of two given strings.\n    '''\n    union_letters = 0\n    for i in range(len(str1)):\n        union_letters += 1\n    \n    for i in range(len(str2)):\n        union_letters += 1\n    \n    return union_letters\n    \n    \ndef string_difference(str1, str2):\n    '''\n    Write a python function to find the set difference of two given strings.\n    '''\n    difference_letters = 0\n    for i in range(len(str1)):\n        if str1[i] not in str2:\n            difference_letters += 1\n    \n    for i in range(len(str2)):\n        if str2[i] not in str1:\n            difference_letters += 1\n    \n    return difference_letters\n    \n    \ndef string_is_isomorphic(str1, str2):\n    '''\n    Write a python function to check if two given strings are isomorphic or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    dictionary = {}\n    for i in range(len(str1)):\n        if str1[i] not in dictionary:\n            if str2[i] in dictionary.values():\n                return False\n            else:\n                dictionary[str1[i]] = str2[i]\n        else:\n            if dictionary[str1[i]]!= str2[i]:\n                return False\n    \n    return True\n    \n    \ndef find_k_largest_numbers(arr, k):\n    '''\n    Write a python function to find k largest numbers in an array.\n    '''\n    arr.sort(reverse=True)\n    return arr[-k:]\n    \n    \ndef find_last_k_frequent(nums, k):\n    '''\n    Write a python function to find the last k frequent numbers in an array.\n    '''\n    dictionary = {}\n    \n    for i in nums:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    \n    sorted_dictionary = sorted(dictionary.items(), key=lambda kv: kv[1], reverse=True)\n    \n    return sorted_dictionary[-k:]\n    \n    \ndef palindrome_permutation(str):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if len(str) == 0:\n        return True\n    \n    str = str.lower()\n    str = str.replace(' ', '')\n    \n    odd_count = 0\n    for i in range(len(str)):\n        if str[i] == str[len(str) - 1 - i]:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    \n    return True\n    \n    \ndef permutations(str):\n    '''\n    Write a python function to check if a string is a permutation or not.\n    '''\n    if len(str) == 0:\n        return True\n    \n    str = str.lower()\n    str = str.replace(' ', '')\n    \n    str_dict = {}\n    \n    for i in range(len(str)):\n        if str[i] in str_dict.keys():\n            str_dict[str[i]] += 1\n        else:\n            str_dict[str[i]] = 1\n    \n    for key in str_dict.keys():\n        if str_dict[key]!= 1:\n            return False\n    \n    return True\n    \n    \ndef k_frequent_elements(arr, k):\n    '''\n    Write a python function to find k frequent elements in an array.\n    '''\n    arr.sort()\n    return arr[:k]\n    \n    \ndef string_rotation(str1, str2):\n    '''\n    Write a python function to check if tw"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a flag to check if the list is empty.\n    is_empty = False\n    # create a flag to keep track of the index of the first non-zero element.\n    first_non_zero = 0\n    # iterate over the list and check if each element is zero.\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            # if the current element is not zero, set the flag and\n            # move the first non-zero element to the end.\n            is_empty = False\n            first_non_zero = i\n            break\n    # if the list is empty, return the list.\n    if is_empty:\n        return num_list\n    # otherwise, traverse the list and switch the element at the first\n    # non-zero element to the end of the list.\n    for i in range(len(num_list)):\n        if i == first_non_zero:\n            continue\n        num_list[i], num_list[first_non_zero] = num_list[first_non_zero], num_list[i]\n    # return the list.\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    x = 0\n    n = len(num_list)\n    while x < n:\n        if num_list[x] == 0:\n            del num_list[x]\n            num_list.append(0)\n        x += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #SOLUTION:\n    #using two loops (for and while)\n    #need to be careful when dealing with zero elements\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count += 1\n            num_list[i], num_list[i+count] = num_list[i+count], num_list[i]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    i = 0\n    j = 0\n    while j < n:\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while True:\n        if num_list[0] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n        else:\n            break\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            result += arr[i] ^ arr[j]\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            if (arr[i] & arr[j]) :\n                sum = sum + arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res=0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            res = res + (arr[i]^arr[j])\n    return res \n    \n    \ndef pair_xor_Sum_1(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res=0\n    for i in range(0,n-1) : \n        res = res + (arr[i]^arr[i+1])\n    return res \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    x = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            x = x ^ arr[i] ^ arr[j]\n    return x \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            xor_sum = xor_sum ^ (arr[i] + arr[j]) \n    return xor_sum \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_list=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_list.append(arr[i]^arr[j])\n    return(sum(xor_list))\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            xor_sum += (arr[i] ^ arr[j])\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor=0\n    i=0\n    j=1\n    while j < n :\n        xor ^= arr[i]\n        i += 2\n        j += 2\n    return xor\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    \n    \n    # check sum\n    return (sum(arr[i]^arr[j] for i in range(n) for j in range(i+1,n)))\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Time complexity of below code is O(N). \n    # Total Time Complexity is O(N^2). \n    \n    # Initializing sum to zero. \n    Sum = 0\n    \n    # Traversing through given array. \n    for i in range(n) : \n        # Getting the value of given array at index i. \n        val = arr[i] \n        \n        # Starting from index i + 1, traversing all values \n        # until i + 2. \n        for j in range(i+1,n) : \n            # If there is no pair, increment Sum by zero. \n            if i!= j : \n                # Do xor operation to get the result. \n                xor = val ^ arr[j] \n                \n                # Increment Sum by xor value. \n                Sum += xor \n    \n    # Return Sum. \n    return Sum\n    \nif __name__ == \"__main__\" : \n    \n    # Given array. \n    arr = [2,1,4,6,7] \n    n = len(arr) \n    \n    # Function call. \n    print(pair_xor_Sum(arr,n)) "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # i = 0\n    # for j in range(len(iterable)):\n    #     hq.heappush(iterable, j)\n    #     i += 1\n    #     # print(i, iterable)\n    #     if i == len(iterable):\n    #         break\n    # print('heap_sort')\n    # print(iterable)\n    \n    '''\n    # calculate length of list\n    n = len(iterable)\n    \n    # Create a Max-Heap out of array.\n    for i in range(n//2 - 1, -1, -1):\n        hq.heappush(iterable, iterable[i])\n    \n    # get sorted array\n    for i in range(n-1, -1, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        hq.heappop(iterable)\n    '''\n    \n    # use heapq\n    iterable = iter(iterable)\n    heap = list(iterable)\n    heapq.heapify(heap)\n    for i in iterable:\n        heapq.heappush(heap, i)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    result=[]\n    while(len(h)!=0):\n        result.append(hq.heappop(h))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create heap\n    hq.heapify(iterable)\n    sorted_list = []\n    # while heap is not empty\n    while iterable:\n        # pop the element from heap\n        current = hq.heappop(iterable)\n        # append to sorted list\n        sorted_list.append(current)\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # initialize heap\n    heap = []\n    # store items in heap\n    for item in iterable:\n        hq.heappush(heap, item)\n    # iterate over each element and swap\n    for i in range(len(heap)):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable.pop())\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        heapq.heappush(heap, i)\n    return [heapq.heappop(heap) for i in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    if len(iterable) == 0:\n        return iterable\n    \n    heap = iterable[:]\n    heapq.heapify(heap)\n    \n    for i in range(len(heap)-1):\n        heapq.heappop(heap)\n        heapq.heappush(heap,iterable[i])\n    \n    return heap\n    \nif __name__ == \"__main__\":\n    arr = [2,9,9,3,1,1,7,6,5,4]\n    print(heap_sort(arr)"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n    \nprint(heap_sort([1,3,7,5,2,7,8,9]))\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    _hq = []\n    for val in iterable:\n        hq.heappush(_hq, val)\n    return [_hq.pop(0) for i in range(len(_hq))]\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    elif actual_cost<sale_amount:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\nprint(noprofit_noloss(10,20)) # returns True\nprint(noprofit_noloss(10,-20)) # returns False\nprint(noprofit_noloss(10,-15)) # returns False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('No Profit and Loss')\n    elif actual_cost > sale_amount:\n        print('Profit')\n    elif actual_cost < sale_amount:\n        print('Loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = 0\n    if actual_cost > sale_amount:\n        print('You do not have profit and loss')\n    else:\n        profit = actual_cost - sale_amount\n        print(f'Profit: {profit}')\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    return profit == 0\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: \n        return False \n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit,loss = 0,0\n    if actual_cost < sale_amount:\n        profit = sale_amount - actual_cost\n        if profit < 0:\n            return f\"You have lost {profit} dollars\"\n        else:\n            return f\"You have gained {profit} dollars\"\n    else:\n        return \"You have spent more than you earned\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        print(\"The sale amount is same as the actual cost, so no profit\")\n    elif actual_cost > sale_amount:\n        print(\"The actual cost is higher than the sale amount, so no profit\")\n    elif actual_cost < sale_amount:\n        print(\"The actual cost is lower than the sale amount, so no loss\")\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 1:\n        return 14.8*t +.6215*v**.16 + 10.4*v**.16*math.exp(-12.8/(t+243.5))\n    elif v <= 3:\n        return 36.5*t - 35.75*math.pow(v,1.61) + 11.3*math.pow(v,1.61)*math.exp(0.112*(t-10.3))\n    elif v <= 5:\n        return 35.74*t + 0.18*v**.16 - 5.42*v**.16*math.exp(-11.3/(t-40.1))\n    elif v <= 7:\n        return 32.12*t + 1.2*v**.16*math.exp(0.03*(t-20))\n    elif v <= 10:\n        return 28.55*t - 1.55*v**.16 + 1.11*v**.16*math.exp(-6.52/(t-37.3))\n    elif v <= 13:\n        return 24.9*t - 1.6*v**.16 + 1.1*v**.16*math.exp(-7.6/(t-45))\n    elif v <= 17:\n        return 23.36*t + 1.2*v**.16*math.exp(0.19*(t-20))\n    elif v <= 20:\n        return 20.45*t + 1.15*v**.16*math.exp(0.17*(t-10))\n    elif v <= 24:\n        return 19.62*t + 1.2*v**.16*math.exp(0.15*(t-10))\n    elif v <= 27:\n        return 17.47*t + 1.1*v**.16*math.exp(0.18*(t-10))\n    elif v <= 30:\n        return 15.55*t + 1.1*v**.16*math.exp(0.25*(t-10))\n    elif v <= 33:\n        return 13.77*t + 0.95*v**.16*math.exp(0.33*(t-10))\n    elif v <= 35:\n        return 10.12*t + 0.8*v**.16*math.exp(0.42*(t-10))\n    elif v <= 37:\n        return 7.22*t + 0.65*v**.16*math.exp(0.55*(t-10))\n    elif v <= 40:\n        return 5.37*t + 0.54*v**.16*math.exp(0.71*(t-10))\n    elif v <= 43:\n        return 3.94*t + 0.53*v**.16*math.exp(0.89*(t-10))\n    elif v <= 45:\n        return 2.63*t + 0.54*v**.16*math.exp(1.05*(t-10))\n    elif v <= 47:\n        return 1.86*t + 0.5*v**.16*math.exp(2.16*(t-10))\n    elif v <= 50:\n        return 1.18*t + 0.5*v**.16*math.exp(3.63*(t-10))\n    elif v <= 53:\n        return 0.69*t + 0.57*v**.16*math.exp(4.91*(t-10))\n    elif v <= 55:\n        return 0.41*t + 0.56*v**.16*math.exp(6.26*(t-10))\n    elif v <= 58:\n        return 0.2*t + 0.57*v**.16*math.exp(8.54*(t-10))\n    elif v <= 60:\n        return 0.1*t + 0.5*v**.16*math.exp(10.24*(t-10))\n    elif v <= 61:\n        return 0.03*t + 0.6*v**.16*math.exp(12.15*(t-10))\n    elif v <= 63:\n        return -0.03*t + 0.62*v**.16*math.exp(13.85*(t-10))\n    elif v <= 65:\n        return -0.1*t + 0.6*v**.16*math.exp(15.2*(t-10))\n    elif v <= 67:\n        return -0.2*t + 0.6*v**.16*math.exp(17.35*(t-10))\n    elif v <= 70:\n        return -0.5*t + 0.6*v**.16*math.exp(19.8*(t-10))\n    elif v <= 73:\n        return -0.8*t + 0.6*v**.16*math.exp(21.44*(t-10))\n    elif v <= 75:\n        return -1.12*t + 0.6*v**.16*math.exp(24.54*(t-10))\n    elif v <= 77:\n        return -1.6*t + 0.6*v**.16*math.exp(27.17*(t-10))\n    elif v <= 80:\n        return -1.95*t + 0.6*v**.16*math.exp(29.81*(t-10))\n    elif v <= 83:\n        return -2.55*t + 0.6*v**.16*math.exp(32.45*(t-10))\n    elif v <= 85:\n        return -3.13*t + 0.6*v**.16*math.exp(35.08*(t-10))\n    elif v <= 87:\n        return -3.9*t + 0.6*v**.16*math.exp(38.55*(t-10))\n    elif v <= 90:\n        return -4.07*t + 0.6*v**.16*math.exp(41.04*(t-10))\n    elif v <= 93:\n        return -4.62*t + 0.6*v**.16*math.exp(43.46*(t-10))\n    elif v <= 95:\n        return -5.15*t + 0.6*v**.16*math.exp(46.1*(t-10))\n    elif v <= 97:\n        return -5.84*t + 0.6*v**.16*math.exp(49.22*(t-10))\n    elif v <= 100:\n        return -6.47*t + 0.6*v**.16*math.exp(52.58*(t-10))\n    elif v <= 103:\n        return -6.98*t + 0.6*v**.16*math.exp(56.04*(t-10))\n    elif v <= 105:\n        return -7.62*t + 0.6*v**.16*math.exp(59.08*(t-10))\n    elif v <= 107:\n        return -7.92*t + 0.6*v**.16*math.exp(62.22*(t-10))\n    elif v <= 110:\n        return -8.65*t + 0.6*v**.16*math.exp(65.96*(t-10))\n    elif v <= 113:\n        return -9.09*t + 0.6*v**.16*math.exp(68.21*(t-10))\n    elif v <= 115:\n        return -9.81*t + 0.6*v**.16*math.exp(71.72*(t-10))\n    elif v <= 117:\n        return -10.6*t + 0.6*v**.16*math.exp(74.18*(t-10))\n    elif v <= 120:\n        return -11.41*t + 0.6*v**.16*math.exp(77.36*(t-10))\n    elif v <= 122:\n        return -12.11*t + 0.6*v**.16*math.exp(80.48*(t-1"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 35.74 + 0.6215 * t + ((0.4275 * v ** 0.16) - (0.3965 * v ** 0.16 * t ** 0.16)) * math.log(v)\n    return w\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -40:\n        t = -40\n    if t > 40:\n        t = 40\n    v = float(v)\n    v = round(v)\n    t = t + 459.67\n    t = t / 1.8\n    wci = 35.74 + 0.6215 * t - 35.75 * math.pow(t, 2) + 0.4275 * math.pow(t, 3)\n    wci = wci + 0.6215 * v * math.sin(math.radians(45)) - 3.26 * math.pow(v, 2) * math.sin(math.radians(45)) + 3.26 * math.pow(v, 3) * math.sin(math.radians(45))\n    wci = wci - 0.002 * v * math.cos(math.radians(45)) - 3.26 * math.pow(v, 2) * math.cos(math.radians(45)) - 3.26 * math.pow(v, 3) * math.cos(math.radians(45))\n    wci = round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 32.0 + 0.6215*v**0.16 + (0.4275*v**0.16)*(t-32)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + (0.6215 * v) - (35.75 * t) + (0.4275 * t * t)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 0.622\n    t = t + 273.15\n    windchill = 35.74 + 0.6215 * t - 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    return round(windchill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    T = t\n    V = v\n    wci = 35.74 + 0.6215 * T - 35.75 * (math.pow(V, 0.16)) + 0.4275 * math.pow(T, 0.16) - 35.75 * (math.pow(V, 0.18))\n    return math.ceil(wci)\n    \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    windchill = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n    return int(round(windchill))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    A = 0.8\n    B = 237.3\n    C = -12.21\n    D = 0.6215\n    E = -0.44315\n    F = 0.35\n    C1 = -17.27\n    C2 = 237.3\n    C3 = -14.4\n    C4 = -4.62\n    C5 = 0.7914\n    C6 = -0.0065\n    C7 = 0.0065\n    C8 = 0.0009\n    C9 = -0.0018\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + (0.6215 * v) - (35.75 * t) - (0.4275 * v ** 2) + (0.1365 * t ** 2)\ndef test_wind_chill():\n    assert(round(wind_chill(1, 0)) == -17.44)\n    assert(round(wind_chill(3, 0)) == -16.12)\n    assert(round(wind_chill(10, 0)) == -15.52)\n    assert(round(wind_chill(12, 0)) == -14.52)\n    assert(round(wind_chill(11, 0)) == -13.82)\n    assert(round(wind_chill(0, 0)) == -14.04)\n    assert(round(wind_chill(4, 0)) == -15.83)\n    assert(round(wind_chill(20, 0)) == -17.13)\n    assert(round(wind_chill(35, 0)) == -19.92)\n    assert(round(wind_chill(45, 0)) == -21.35)\n    assert(round(wind_chill(45, 45)) == -22.39)\n    assert(round(wind_chill(45, 35)) == -20.72)\n    assert(round(wind_chill(45, 45)) == -21.07)\n    assert(round(wind_chill(40, 40)) == -21.64)\n    assert(round(wind_chill(50, 50)) == -21.59)\n    assert(round(wind_chill(55, 55)) == -21.33)\n    assert(round(wind_chill(55, 50)) == -21.33)\n    assert(round(wind_chill(55, 55)) == -21.17)\n    assert(round(wind_chill(65, 65)) == -20.58)\n    assert(round(wind_chill(65, 55)) == -19.88)\n    assert(round(wind_chill(80, 80)) == -19.68)\n    assert(round(wind_chill(100, 100)) == -19.45)\n    assert(round(wind_chill(100, 120)) == -18.23)\n    assert(round(wind_chill(80, 120)) == -18.37)\n    assert(round(wind_chill(70, 120)) == -17.13)\n    assert(round(wind_chill(60, 120)) == -16.74)\n    assert(round(wind_chill(55, 120)) == -15.77)\n    assert(round(wind_chill(40, 120)) == -14.43)\n    assert(round(wind_chill(30, 120)) == -13.68)\n    assert(round(wind_chill(25, 120)) == -12.93)\n    assert(round(wind_chill(10, 120)) == -12.18)\n    assert(round(wind_chill(5, 120)) == -11.22)\n    assert(round(wind_chill(0, 120)) == -10.06)\n    assert(round(wind_chill(0, -20)) == -19.92)\n    assert(round(wind_chill(-5, -20)) == -19.92)\n    assert(round(wind_chill(2, -20)) == -18.45)\n    assert(round(wind_chill(6, -20)) == -17.13)\n    assert(round(wind_chill(10, -20)) == -15.52)\n    assert(round(wind_chill(12, -20)) == -14.52)\n    assert(round(wind_chill(14, -20)) == -13.82)\n    assert(round(wind_chill(18, -20)) == -12.78)\n    assert(round(wind_chill(20, -20)) == -11.82)\n    assert(round(wind_chill(25, -20)) == -10.94)\n    assert(round(wind_chill(30, -20)) == -9.96)\n    assert(round(wind_chill(40, -20)) == -8.94)\n    assert(round(wind_chill(45, -20)) == -7.96)\n    assert(round(wind_chill(50, -20)) == -6.92)\n    assert(round(wind_chill(55, -20)) == -6.01)\n    assert(round(wind_chill(65, -20)) == -5.92)\n    assert(round(wind_chill(65, -15)) == -4.79)\n    assert(round(wind_chill(70, -15)) == -4.62)\n    assert(round(wind_chill(75, -15)) == -4.53)\n    assert(round(wind_chill(80, -15)) == -4.53)\n    assert(round(wind_chill(90, -15)) == -4.45)\n    assert(round(wind_chill(95, -15)) == -4.29)\n    assert(round(wind_chill(100, -15)) == -4.19)\n    assert(round(wind_chill(105, -15)) == -4.08)\n    assert(round(wind_chill(110, -15)) == -3.96)\n    assert(round(wind_chill(120, -15)) == -3.94)\n    assert(round(wind_chill(130, -15)) == -3.88)\n    assert(round(wind_chill(140, -15)) == -3.83)\n    assert(round(wind_chill(150, -15)) == -3.8)\n    assert(round(wind_chill(160, -15)) == -3.77)\n    assert(round(wind_chill(165, -15)) == -3.74)\n    assert(round(wind_chill(170, -15)) == -3.74)\n    assert(round(wind_chill(175, -15)) == -3.76)\n    assert(round(wind_chill(180, -15)) == -3.8)\n    assert(round(wind_chill(185, -15)) == -4.01)\n    assert(round(wind_chill(190, -15)) == -4.03)\n    assert(round(wind_chill(195, -15)) == -4.12)\n    assert(round(wind_chill(200, -15)) == -4.26)\n    assert(round(wind_chill(205, -15)) == -4.47)\n    assert(round(wind_chill(210, -15)) == -4.68)\n    assert(round(wind_chill(215, -15)) == -4.96)\n    assert(round(wind_chill(220, -15)) == -5.25)\n    assert(round(wind_chill(225, -15)) == -5.58)\n    assert(round(wind_chill(230, -15)) == -5.95)\n    assert(round(wind_chill(235, -15)) == -6.35)\n    assert(round(wind_chill(240, -15)) == -6.82)\n    assert(round(wind_chill(245, -15)) == -7.27)\n    assert(round(wind_chill(250, -15)) == -7.84)\n    assert(round(wind_chill(255, -15)) == -8.54)\n    assert(round(wind_chill(260, -15)) == -8.94)\n    assert(round(wind_chill(265, -15)) == -9.57)\n    assert(round(wind_chill(270, -15)) == -9.96)\n    assert(round(wind_chill(275, -15)) == -10.12)\n    assert(round(wind_chill(280, -15)) == -10.01)\n    assert(round(wind_chill(285, -15)) == -10.01)\n    assert(round(wind_chill(290, -15)) == -9.92)\n    assert(round(wind_chill(295, -15)) ="
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    \n    for i in sample_names:\n        if i[0].isupper():\n            continue\n        else:\n            total += len(i)\n            \n    print(total)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    res = 0\n    for i in sample_names:\n        if i[0].isupper():\n            continue\n        else:\n            res += len(i)\n    return res\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    length = 0\n    for name in sample_names:\n        if len(name) > length:\n            length = len(name)\n    return length\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if sample_names == None or len(sample_names) == 0:\n        print('Not enough data')\n    else:\n        print('Sum of the name length: ',sum([len(sample) for sample in sample_names if sample[0].isupper()]))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    sample_names.sort()\n    #sample_names.sort(reverse=True)\n    total = 0\n    for name in sample_names:\n        if name[0].islower():\n            total += len(name)\n    return total\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.isalpha():\n            sample_names.remove(i)\n        elif i[0].islower():\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = 0\n    for i in sample_names:\n        if i[0].islower():\n            n += 1\n    return n\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # --- your code here ---\n    # initialize a variable to count the length of the names\n    count = 0\n    \n    # For loop to iterate through the names in the list and count the length\n    # of the names\n    for i in range(0, len(sample_names)):\n        if sample_names[i][0].islower():\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name.startswith('j') == False and name.startswith('J') == False:\n            count += len(name)\n    return count\nprint(sample_nam(['tom', 'jerry', 'john', 'jane']))\nprint(sample_nam(['joe', 'jane', 'joe']))\nprint(sample_nam(['Jane', 'jane', 'joe']))\nprint(sample_nam(['JOE', 'joe', 'JANE']))\nprint(sample_nam(['joe', 'jane', 'joe']))\nprint(sample_nam(['joe']))\nprint(sample_nam(['joe']))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    sample_names.sort(key=lambda x: re.match('^[A-Za-z]+', x))\n    new_names = []\n    for i in range(len(sample_names)):\n        new_names.append(re.sub('^[a-z]+', '', sample_names[i]))\n    return sum(len(i) for i in new_names)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #your code here\n    i = 0\n    while i < len(items):\n        if items[i] == '(':\n            while items[i]!= ')':\n                i+=1\n        elif items[i] == ')':\n            while items[i]!= '(':\n                i+=1\n        else:\n            i+=1\n    return items[1:-1]\n    #return items.replace(\"()\", \"\")\n    #return re.sub(\"\\(.*?\\)|\\)|\\]|\\[|\\]\", \"\", items)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # create empty string\n    # loop thru items and search for parenthesis, keep a flag\n    # if flag is true, delete bracket, flag false\n    # if flag false, delete string after bracket\n    # return string\n    items = items.strip()\n    res = []\n    flag = False\n    for item in items:\n        if flag and item == '(':\n            flag = False\n        elif flag and item == ')':\n            flag = False\n        elif flag:\n            continue\n        else:\n            res.append(item)\n            if item == '(':\n                flag = True\n    return \"\".join(res)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        temp = item.split('(')\n        if(len(temp) > 1):\n            result.append(temp[0])\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    arr = []\n    for item in items:\n        if(item == '(' or item == ')'):\n            continue\n        elif(item == ','):\n            if(len(arr) > 0):\n                arr[-1] = arr[-1] + item\n            else:\n                arr.append(item)\n        else:\n            arr.append(item)\n    return arr\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\(([^()]*)\\)', items)\n    #return result.group(1)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip()\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #result = re.search('\\([^()]*\\)', items)\n    #return result.group(0)\n    return items.strip("
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #returns a string with no parenthesis\n    for i in items:\n        if i in \"()\":\n            items = items.replace(i,\"\")\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    l = len(items)\n    lst = []\n    for i in range(l):\n        if items[i] == \"(\":\n            lst.append(items[i])\n        elif items[i] == \")\":\n            if len(lst)!= 0:\n                lst.pop()\n        elif items[i] == \",\" and len(lst) == 0:\n            continue\n        else:\n            lst.append(items[i])\n    return \"\".join(lst)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    items = items.replace(\", \", \"\")\n    items = items.replace(\", \", \"\")\n    items = items.replace(\", \", \"\")\n    items = items.replace(\", \", \"\")\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    ans = []\n    for item in items:\n        if item == '(' and ans[-1]!= ')':\n            ans.append('(')\n        elif item == ')' and ans[-1]!= '(':\n            ans.append(')')\n        else:\n            ans.append(item)\n    return ans\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    output = re.search(r'\\([^()]*\\)', items)\n    if output!= None:\n        items = items[:output.span()[0]] + items[output.span()[1]:]\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n+1):\n        print(i*(i+1)-1)\n        \nis_nonagonal(5)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nthNonagonal(n): \n        # Your code here \n        return n*(n+1)//2 \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(pow(n, 2)) + n\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    assert n > 0, \"n must be positive.\"\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    n -= 1\n    \n    # check if n is non-decreasing \n    # or increasing\n    for i in range(n-1, -1, -1):\n        if n == i:\n            return i\n        elif n < i:\n            return -1\n        \n        \n        \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    return n**2 + n + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*(n+1)*(2*n+1)/6\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((1 + 8*n) ** 0.5 - 1) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    lst = []\n    for i in range(1, n):\n        lst.append(i*(i+1)*(2*i+1))\n    return lst[-1]\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # import re\n    # return bool(re.search(r\"^\\W+[z]\\W*[\\W]*$\",text))\n    regex = re.compile(r\"^\\W+[z]\\W*[\\W]*$\")\n    result = regex.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # your code goes here\n    if len(text) == 1:\n        if text[0] == 'z':\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_middle = re.search('^z', text)\n    text_final = re.search('z$', text)\n    if text_middle or text_final:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text=text.lower()\n    new_string=text.split()\n    matched_word=[]\n    for word in new_string:\n        if(word[0]=='z' and word[-1]=='z'):\n            pass\n        else:\n            matched_word.append(word)\n    matched_word=\" \".join(matched_word)\n    return matched_word\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.startswith('z') and word.endswith('z'):\n            print('1')\n        if word.endswith('z') and word.startswith('z'):\n            print('2')\n        if word.endswith('z') and not word.startswith('z'):\n            print('3')\n        if not word.endswith('z') and word.startswith('z'):\n            print('4')\n        if not word.endswith('z') and not word.startswith('z'):\n            print('5')\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of a word.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.endswith('z'):\n            print('6')\n        if not word.endswith('z'):\n            print('7')\ndef text_match_wordz_at_beginning(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the beginning of a word.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.startswith('z'):\n            print('8')\n        if not word.startswith('z'):\n            print('9')\ndef text_match_wordz_at_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of a word.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.endswith('z'):\n            print('10')\n        if not word.endswith('z'):\n            print('11')\ndef text_match_wordz_at_beginning_and_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the beginning of a word, and at the end of a word.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.startswith('z') and word.endswith('z'):\n            print('12')\n        if word.endswith('z') and word.startswith('z'):\n            print('13')\n        if word.endswith('z') and not word.startswith('z'):\n            print('14')\n        if not word.endswith('z') and word.startswith('z'):\n            print('15')\n        if not word.endswith('z') and not word.startswith('z'):\n            print('16')\ndef text_match_wordz_at_beginning_and_end_even(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the beginning of a word, and at the end of a word, \n    and if the word is an even number of letters long.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.startswith('z') and word.endswith('z') and len(word)%2 == 0:\n            print('17')\n        if word.endswith('z') and word.startswith('z') and len(word)%2 == 0:\n            print('18')\n        if word.endswith('z') and word.startswith('z') and len(word)%2!= 0:\n            print('19')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2 == 0:\n            print('20')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2!= 0:\n            print('21')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2 == 0:\n            print('22')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2!= 0:\n            print('23')\ndef text_match_wordz_at_end_even(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of a word, and if the word is an even number of letters long.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.endswith('z') and len(word)%2 == 0:\n            print('24')\n        if not word.endswith('z') and len(word)%2 == 0:\n            print('25')\ndef text_match_wordz_at_beginning_and_end_even_and_all_even(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the beginning of a word, and at the end of a word, \n    and if the word is an even number of letters long and if it is also a even number of letters long.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.startswith('z') and word.endswith('z') and len(word)%2 == 0 and len(word)%2 == 0:\n            print('26')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2 == 0 and len(word)%2 == 0:\n            print('27')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2!= 0 and len(word)%2 == 0:\n            print('28')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2!= 0 and len(word)%2!= 0:\n            print('29')\n        if word.endswith('z') and word.startswith('z') and len(word)%2!= 0 and len(word)%2!= 0:\n            print('30')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2!= 0 and len(word)%2!= 0:\n            print('31')\ndef text_match_wordz_at_beginning_and_end_even_and_not_all_even(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the beginning of a word, and at the end of a word, \n    and if the word is an even number of letters long and if it is not also a even number of letters long.\n    '''\n    word_list = text.split(' ')\n    for word in word_list:\n        if word.startswith('z') and word.endswith('z') and len(word)%2 == 0 and len(word)%2!= 0:\n            print('32')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2 == 0 and len(word)%2!= 0:\n            print('33')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2!= 0 and len(word)%2 == 0:\n            print('34')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2!= 0 and len(word)%2!= 0:\n            print('35')\n        if word.endswith('z') and word.startswith('z') and len(word)%2!= 0 and len(word)%2!= 0:\n            print('36')\n        if not word.endswith('z') and word.startswith('z') and len(word)%2!= 0 and len(word)%2!= 0:\n            print('37')\ndef text_match_wordz_at_beginning_and_end_even_and_not_all_odd(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the beginning of a word, and at the en"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    search = re.search(r'(^z)|(z$)', text)\n    if search == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    string_contain_z = False\n    pattern = re.compile(r'\\bz\\b')\n    if pattern.search(text):\n        string_contain_z = True\n        print('The string contains z')\n    else:\n        print('The string does not contain z')\n    return string_contain_z\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall(r'(?<=\\S)[z](?=\\S)',text)\n    return bool(result)\n    \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'^z$|z$'\n    return bool(re.search(pattern, text))\nprint(text_match_wordz_middle(\"z z\"))\nprint(text_match_wordz_middle(\"z\"))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_two(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_three(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_four(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_five(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_six(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_seven(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_eight(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_nine(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_ten(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_eleven(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twelve(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirteen(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_fourteen(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_fifteen(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_sixteen(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_seventeen(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_eighteen(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_nineteen(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twenty(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentyone(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentytwo(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentythree(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentyfour(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentyfive(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentysix(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentyseven(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentyeight(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_twentynine(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirty(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtyone(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtytwo(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtythree(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtyfour(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtyfive(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtysix(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtyseven(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtyeight(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_thirtynine(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\ndef text_match_wordz_middle_forty(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = list(input)\n    for i in range(0, len(arr)):\n        if i > k:\n            break\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #input = [1,2,3,4,5,6,7,8,9,10,11,12]\n    #input = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    #input = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    #input = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]\n    #input = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if(k>len(input)):\n        return input\n    start = 0\n    end = len(input)-1\n    while(start<=end):\n        while(start<=end and input[start] <= input[end]):\n            start+=1\n        while(start<=end and input[end]>=input[start]):\n            end-=1\n        tmp = input[start]\n        input[start] = input[end]\n        input[end] = tmp\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    for i in range(0,k):\n        arr.append(input[-i-1])\n    for j in range(0,len(input)-k):\n        arr.append(input[j])\n    return arr\nprint(reverse_Array_Upto_K([1,2,3,4,5],2))\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        input.append(input.pop(0))\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #initializing values\n    start = 0\n    end = len(input)-1\n    \n    while start <= end:\n        while start <= end:\n            if input[start] == k:\n                break\n            start += 1\n        while start <= end:\n            if input[end] == k:\n                break\n            end -= 1\n        if input[start]!= k:\n            break\n        if input[end]!= k:\n            continue\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input\n    \ninput = [3, 4, 5, 2, 4, 6]\nk = 4\nprint(reverse_Array_Upto_K(input, k))\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # arr = input\n    # if k == 0:\n    #     return []\n    # return input[-k:] + reverse_Array_Upto_K(input[:-k], k-1)\n    \n    # Solution 2\n    \n    # a = []\n    # i = 0\n    # j = len(input)-1\n    # while i < j:\n    #     a.append(input[i])\n    #     a.append(input[j])\n    #     i += 1\n    #     j -= 1\n    # return a\n    \n    # Solution 3\n    \n    arr = input\n    start = 0\n    end = len(input)-1\n    while start <= end:\n        if start == end:\n            return input[:start]\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # array = [i for i in input]\n    # result = []\n    # for i in range(len(array)-1, k-1, -1):\n    #     result.append(array[i])\n    # result.append(array[k])\n    # return result\n    return input[::-1][:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    s = []\n    for i in range(len(input)):\n        s.append(input[i])\n        s = s[::-1]\n        if i >= k:\n            s = s[:-1]\n    return s[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i, j = 0, 0\n    # reverse the array\n    while (i < len(input)):\n        j = i\n        while(j < k):\n            temp = input[j]\n            input[j] = input[i]\n            input[i] = temp\n            j += 1\n        i += 1\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    test_tup = (test_tup[0], test_tup[1], test_tup[2], test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict, )\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3].update(test_dict))\n    \n    \n    \n    \n    \ndef get_dict_from_tuple(test_tup):\n    '''\n    Write a function to get dictionary from the tuple. The output should be a dictionary.\n    '''\n    return test_tup[3]\n    \n    \n    \n    \n    \ndef get_tuple_from_dict(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return (test_dict['name'], test_dict['age'], test_dict['address'], test_dict)\n    \n    \n    \n    \n    \ndef del_tuple_from_dict(test_dict):\n    '''\n    Write a function to delete tuple from dictionary. The output should be a dictionary.\n    '''\n    del test_dict['age']\n    return test_dict\n    \n    \n    \n    \n    \ndef del_tuple_from_tuple(test_tup):\n    '''\n    Write a function to delete tuple from tuple. The output should be a tuple.\n    '''\n    del test_tup\n    return test_tup\n    \n    \n    \n    \n    \ndef get_dict_from_tuple_all_keys(test_tup):\n    '''\n    Write a function to get dictionary from tuple. The output should be a dictionary.\n    '''\n    return dict(test_tup)\n    \n    \n    \n    \n    \ndef get_tuple_from_dict_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict.values())\n    \n    \n    \n    \n    \ndef get_dict_from_tuple_all_keys_and_value(test_tup):\n    '''\n    Write a function to get dictionary from tuple. The output should be a dictionary.\n    '''\n    return dict(zip(test_tup, range(len(test_tup))))\n    \n    \n    \n    \n    \ndef get_tuple_from_dict_all_keys_and_value(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict.items())\n    \n    \n    \n    \n    \ndef get_dict_from_tuple_tuple_value(test_tup):\n    '''\n    Write a function to get dictionary from tuple. The output should be a dictionary.\n    '''\n    return dict(test_tup[1])\n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].values())\n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys_all_keys_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys_all_keys_all_keys_all_keys_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys(test_dict):\n    '''\n    Write a function to get tuple from dictionary. The output should be a tuple.\n    '''\n    return tuple(test_dict[1].items())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_tuple_from_dict_tuple_value_all_keys_and_value_and_value_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys_all_keys(test_dict):\n    '''\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple(test_tup) + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result = test_tup + (test_dict,)\n    return result\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup[:]) + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Create a dictionary to store the costs for each cell in the path\n    cell_cost_dict = {}\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            cell_cost_dict[i,j] = cost[i][j]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return [[max(x[i] + y[i], x[i], y[i]) for i in range(len(x))] for x, y in zip(cost, cost[1:])]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize the result\n    ans = 0\n    # Initialize the number of cells visited\n    n = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return max(dp[rows-1])/len(dp[rows-1])\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    sums = [[0 for i in range(N)] for j in range(N)]\n    \n    for i in range(N):\n        for j in range(N):\n            if i==0 and j==0:\n                sums[i][j] = cost[i][j]\n            elif i==0 and j!=0:\n                sums[i][j] = sums[i][j-1]+cost[i][j]\n            elif i!=0 and j==0:\n                sums[i][j] = sums[i-1][j]+cost[i][j]\n            else:\n                sums[i][j] = max(sums[i-1][j], sums[i][j-1])+cost[i][j]\n    return (sums[N-1][N-1]/(N*N))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return cost[0][0]\n        \n    cost = [[0] * n for _ in range(n)]\n    \n    cost[0][0] = cost[0][1] = cost[1][0] = cost[1][1] = cost[1][2] = cost[2][1] = cost[2][2] = cost[2][3] = 1\n    \n    # BFS algorithm\n    queue = deque()\n    queue.append((0, 0, 1))\n    \n    while queue:\n        (r, c, path_length) = queue.popleft()\n        \n        if r == n - 1 and c == n - 1:\n            return cost[r][c] / path_length\n            \n        for (dr, dc) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_r = r + dr\n            new_c = c + dc\n            \n            if (0 <= new_r < n) and (0 <= new_c < n) and (cost[new_r][new_c] == 0):\n                queue.append((new_r, new_c, path_length + 1))\n                cost[new_r][new_c] = cost[r][c] + 1\n    \n    return 0\n    \ndef matrixRotation(matrix):\n    '''\n    There is a special square matrix which is filled with all 1's and consists of an infinite number of rows and columns. At any given point of time, the top-left corner is always equal to the number of rows multiplied by the number of columns.\n    \n    Given a matrix, rotate the matrix clockwise by 90 degrees.\n    \n    Example:\n    Input = \n    [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n    ]\n    \n    Output = \n    [\n    [7, 4, 1],\n    [8, 5, 2],\n    [9, 6, 3]\n    ]\n    \n    The same matrix can also be seen as below.\n    Input = \n    [\n    [5, 1, 9, 11],\n    [2, 4, 8, 10],\n    [13, 3, 6, 7],\n    [15, 14, 12, 16]\n    ]\n    \n    Output = \n    [\n    [15, 13, 2, 5],\n    [14, 3, 4, 1],\n    [12, 6, 8, 9],\n    [16, 7, 10, 11]\n    ]\n    '''\n    n = len(matrix)\n    if n == 0:\n        return matrix\n    \n    matrix = [[matrix[i][j] for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        matrix[i].reverse()\n    \n    return matrix\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    \n    if n == 1:\n        return 0\n    if n == 2:\n        return sum(cost) / 2\n    \n    # First, we need to put the cost of each cell into a 2d array in the right way.\n    c = numpy.array(cost)\n    \n    # Second, we need to compute the average over all paths from the top left cell to the bottom right cell.\n    \n    # Lets store the average as an array for future computation.\n    # A new 2D array will be created.\n    average_path = numpy.zeros((n, n))\n    \n    # Lets get the cost of each cell in the matrix as 1.\n    for i in range(n):\n        for j in range(n):\n            average_path[i][j] = 1\n    \n    # We use the matrix multiplication.\n    average_path = c * average_path\n    \n    # We get the sum of all elements in the array.\n    total = average_path.sum()\n    \n    # We need to divide by the number of cells that have been visited, which is the diagonal of the matrix.\n    total = total / (average_path.diagonal() ** 2)\n    \n    # We return the result.\n    return total\n    \nprint maxAverageOfPath([[1,3,1], [2,5,1], [3,7,1]])\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost or not cost[0]:\n        return 0\n    \n    n = len(cost)\n    \n    memo = [[0] * n for _ in range(n)]\n    \n    return maxAverage(0, 0, n-1, n-1, cost, memo)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_avg = 0\n    row = len(cost)\n    col = len(cost[0])\n    for i in range(row):\n        for j in range(col):\n            total_cost = 0\n            # if cost[i][j]!= 0:\n            #     print(cost[i][j], end = \" \")\n            if j < col-1:\n                total_cost += cost[i][j] + cost[i][j+1]\n            if i < row-1:\n                total_cost += cost[i][j] + cost[i+1][j]\n            if i < row-1 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j+1]\n            if i < row-1 and j > 0:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if j < col-1 and i < row-1:\n                total_cost += cost[i][j] + cost[i+1][j+1]\n            if i > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i-1][j+1]\n            if i > 0 and j > 0:\n                total_cost += cost[i][j] + cost[i-1][j-1]\n            if i > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i-1][j+1]\n            if i > 0 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i-1][j-1]\n            if i > 0 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i-1][j-1]\n            if i > 0 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i-1][j-1]\n            if i > 0 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i-1][j-1]\n            if j > 0 and i < row-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if j > 0 and i > 0:\n                total_cost += cost[i][j] + cost[i-1][j-1]\n            if j > 0 and i > 0 and i < row-1:\n                total_cost += cost[i][j] + cost[i-1][j-1]\n            if j > 0 and i > 0 and i < row-1:\n                total_cost += cost[i][j] + cost[i-1][j-1]\n            if i > 0 and i < row-1 and j > 0:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j+1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i+1][j-1]\n            if i > 0 and i < row-1 and j > 0 and j < col-1:\n                total_cost += cost[i][j] + cost[i"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    temp = []\n    for name,value in students.items():\n        if(value[0] >= h and value[1] >= w):\n            temp.append(name)\n    print(temp)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if (students):\n        for key in students:\n            if(key!=h) and (key!=w):\n                students[key] = students[key]\n    else:\n        print(\"No Data Available\")\n    print(students)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    i=0\n    new_student_list = []\n    while(i < len(students)):\n        if students[i][0] > h and students[i][1] > w:\n            new_student_list.append(students[i])\n        i+=1\n    return new_student_list\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = float(h)\n    min_w = float(w)\n    for i in students.keys():\n        if students[i] < (min_h, min_w):\n            del students[i]\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students:\n        if students[i][0]>h and students[i][1]>w:\n            return True\n    return False\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {x:students[x] for x in students if students[x][0]>h and students[x][1]>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n    # pass\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    dict_temp = {}\n    for k,v in students.items():\n        if v[0]>h and v[1]>w:\n            dict_temp[k] = v\n    return dict_temp\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #print(students)\n    #print(h)\n    #print(w)\n    for student in students.keys():\n        if students[student][1] > h and students[student][0] > w:\n            print(student)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    mh,mw=min(students,key=lambda x: x[0]),min(students,key=lambda x: x[1])\n    res=[]\n    for i in students.keys():\n        if students[i][0]>mh and students[i][1]>mw:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pairs = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([nums1.count(nums1[i]) == nums2.count(nums2[i]) for i in range(len(nums1))])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    d = {}\n    for i, j in zip(nums1, nums2):\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    return sum(d[i] == 2 for i in d)\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    # solution 1\n    return len(set(nums1) & set(nums2))\n    # solution 2\n    # return sum(1 for i, j in zip(nums1, nums2) if i == j)\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(nums1)):\n        dict1[nums1[i]] = i\n    for i in range(len(nums2)):\n        dict2[nums2[i]] = i\n    count = 0\n    for k,v in dict1.items():\n        if k in dict2:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in d1:\n            d1[nums1[i]] = 1\n        else:\n            d1[nums1[i]] += 1\n    for i in range(len(nums2)):\n        if nums2[i] not in d2:\n            d2[nums2[i]] = 1\n        else:\n            d2[nums2[i]] += 1\n    count = 0\n    for i in d1:\n        if i in d2:\n            count += d1[i]\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i = 0\n    counter = 0\n    while i < len(nums1):\n        if nums1[i] == nums2[i]:\n            counter += 1\n        i += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    if len(nums1)!= len(nums2):\n        return 0\n    \n    ans = 0\n    nums1_dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] in nums1_dict:\n            nums1_dict[nums1[i]] += 1\n        else:\n            nums1_dict[nums1[i]] = 1\n    \n    nums2_dict = {}\n    for i in range(len(nums2)):\n        if nums2[i] in nums2_dict:\n            nums2_dict[nums2[i]] += 1\n        else:\n            nums2_dict[nums2[i]] = 1\n    \n    for key, value in nums1_dict.items():\n        if key in nums2_dict:\n            ans += min(value, nums2_dict[key])\n    return ans\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) for i in str(base ** power))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    #number of digits in base\n    n = int(len(str(base)))\n    \n    #list of digits\n    base_list = list(str(base))\n    \n    #reverses the list\n    base_list.reverse()\n    \n    #concatenates the reversed list with '0'\n    base_list = base_list + ['0']\n    \n    #list of digits\n    power_list = list(str(power))\n    \n    #reverses the list\n    power_list.reverse()\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    power_list = power_list + ['0']\n    \n    #concatenates the reversed list with '0'\n    powe"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    base = int(base)\n    sum_num = 0\n    while power >= 0:\n        sum_num = sum_num + base**power\n        power = power - 1\n    return sum_num\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # +++your code here+++\n    # Hint: you can use the floor division operator //\n    return int((base ** power))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_list = []\n    for i in range(power):\n        power_list.append(1)\n    \n    total_sum = 0\n    for i in range(1, power+1):\n        power_list[i-1] = base ** i\n        total_sum += power_list[i-1]\n    \n    return total_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize a variable named sum, which will contain the sum of the digits.\n    sum = 0\n    # Loop through each digit of the base.\n    for i in range(len(str(base))):\n        # Add the digit to the sum.\n        sum += int(str(base)[i]) ** power\n    # Return the result.\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #define a function that sums the digits of a number\n    def sum_digits(number):\n        result = 0\n        for i in range(len(str(number))):\n            result += int(str(number)[i])\n        return result\n    #call the function and return the result\n    return sum_digits(base**power)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    power_str = str(power)\n    for i in range(len(power_str)):\n        sum += int(base) ** int(power_str[i])\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # TODO: Write your solution here\n    return sum(int(x) for x in str(base**power))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for x in range(len(str(base))):\n        sum += int(str(base)[x])**power\n    return sum\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.strip()\n    text = text1.replace('\"','')\n    text = text.split(' ')\n    for i in range(len(text)):\n        if len(text[i]) > 0:\n            if text[i].endswith('\"') and text[i].startswith('\"'):\n                text[i] = text[i].replace('\"','')\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    p = re.compile('[\"]+')\n    text = p.findall(text1)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.replace(\" \",\"\")\n    my_list = text.split('\"')\n    a = my_list[0]\n    b = my_list[-1]\n    return a+b\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r\"\\\"\\\"\")\n    quotations = regex.findall(text1)\n    for quotation in quotations:\n        text1 = text1.replace(quotation, '')\n    \n    \n    \n    \n    \n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    #r\"\\\"(.*?)\\\"\"\n    \n    pattern1=r'\\\"(.*?)\\\"'\n    \n    return re.findall(pattern1,text1)\n    \n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    output = re.findall('\\\"(.*?)\\\"',text1)\n    return output\n    \ntext = '''\nHola, como estas?\nUn gusto conocerte!\n'''\nprint(extract_quotation(text))"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # pattern = r\"\\\"{1}[A-Za-z0-9,;]+\\\"{1}\"\n    pattern = r\"\\\"[A-Za-z0-9,;]+\\\"\"\n    matches = re.finditer(pattern, text1, re.MULTILINE)\n    for matchNum, match in enumerate(matches, start=1):\n        data = match.group(0)\n        print(\"quote %d: %s\" % (matchNum, data))\n    print(\"\\n\")\n    return data\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # your code here\n    # solution\n    text = text1.replace(\" \", \"\")\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # initialize result\n    result = None\n    \n    # result will be an array of 2 elements\n    result = re.findall(r'\"([^\"]*)\"',text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    res=re.search(r'[\"](.+?)[\"]',text1)\n    if res is not None:\n        return res.group()\n    else:\n        return None\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef merge_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of length N and returns a tuple of length N-1 where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef replace_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef add_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef trim_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef duplicate_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef switch_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef replace_elements_with_no_duplicates(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef rotate_elements_right(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef remove_last_n_elements(test_tup, n):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef add_n_to_end_of_tuples(test_tup, n):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef remove_nth_element(test_tup, n):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef add_n_to_beginning_of_tuples(test_tup, n):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef remove_first_and_last_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef add_elements_by_value(test_tup, v):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef reverse_order_of_elements_in_tuples(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef remove_nth_element_from_tuple(test_tup, n):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef reverse_order_of_elements_in_tuples_by_value(test_tup, v):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef remove_nth_element_from_tuple_by_value(test_tup, v):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = list(test_tup)\n    l.reverse()\n    return tuple(l)\n    \ndef print_tuples_in_order_by_value(test_tup, v):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N wher"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert(len(test_tup) > 2), \"Tuple should have more than 2 elements\"\n    for i in range(len(test_tup)-1):\n        assert(type(test_tup[i]) == int or type(test_tup[i]) == float), \"Tuple should contain integers or floats only\"\n    return test_tup[0] * test_tup[1:], test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Your code here\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tuple_len = len(test_tup)\n    return (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3])\n    \ndef swap_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_{N-i+1} * t_i.\n    '''\n    tuple_len = len(test_tup)\n    return (test_tup[tuple_len-1] * test_tup[tuple_len-2], test_tup[tuple_len-2] * test_tup[tuple_len-3], test_tup[tuple_len-3] * test_tup[tuple_len-4])\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    multiply = (i*i for i in test_tup)\n    return multiply\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if test_tup is None:\n        return None\n    if len(test_tup) == 0:\n        return []\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = (1,2,3)\n    res = tuple(x * (x+1) for x in test_tup)\n    print(res)\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i * t_i_plus1 for t_i, t_i_plus1 in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    out_tuple = []\n    for i in range(len(test_tup)-1):\n        out_tuple.append(test_tup[i] * test_tup[i+1])\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n_tuple = (1, )\n    for i in range(len(test_tup) - 1):\n        n_tuple += (test_tup[i] * test_tup[i+1], )\n    return n_tuple\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) > len(lst2):\n        s = lst1 + lst2\n    else:\n        s = lst2 + lst1\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    result += lst1\n    result += lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2), \"The lengths of the two lists are not equal\"\n    new_list = []\n    for i in range(0,len(lst1)):\n        new_list.append(lst1[i]+lst2[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if not lst1:\n        return lst2\n    elif not lst2:\n        return lst1\n    else:\n        return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert lst1 and lst2\n    sum_lst = []\n    for i,j in zip(lst1,lst2):\n        sum_lst.append(i+j)\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for a in range(len(lst1)):\n        sum_lst.append(lst1[a]+lst2[a])\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = []\n    for i in range(len(lst1)):\n        sum.append(lst1[i] + lst2[i])\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # I have a loop that looks at each element in nums, and if the current element is the same as the previous element, then it adds 1 to the count.\n    # if it is not, then it adds the count to the dictionary and moves to the next element\n    counts = {}\n    for idx,num in enumerate(nums):\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # I need to sort the dictionary so that the keys are ordered\n    sorted_counts = sorted(counts.keys())\n    # print(sorted_counts)\n    # I need to check if the first element has a duplicate\n    # print(nums[0])\n    # print(counts[nums[0]])\n    # print(counts)\n    if nums[0] in counts:\n        counts[nums[0]] += 1\n    else:\n        counts[nums[0]] = 1\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = set(nums)\n    return list(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        x = list(g)\n        if len(x) == 1:\n            nums.remove(x[0])\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return nums\n    seen = set()\n    for i, v in enumerate(nums):\n        if v in seen:\n            nums.pop(i)\n        else:\n            seen.add(v)\n    return nums\nprint(consecutive_duplicates([1,2,3,4,2,3,6,3,2,1]))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    a = []\n    for i in range(len(nums)):\n        if nums[i] not in a:\n            a.append(nums[i])\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                a.remove(a[j])\n    return a\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    for key, group in groupby(nums):\n        new_list.append(key)\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(nums)\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n        else:\n            i+=1\n    return nums\nprint(consecutive_duplicates([1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5]))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    for key,group in groupby(nums):\n        new_list.append(key)\n    return new_list\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h\n    return area\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area = 4*math.pi*r**2\n    return area\ndef lateral_surface(r,h,type):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 0\n    if type == \"cone\":\n        area = lateralsurface_cone(r,h)\n    elif type == \"cylinder\":\n        area = lateralsurface_cylinder(r,h)\n    elif type == \"sphere\":\n        area = lateralsurface_sphere(r)\n    else:\n        print(\"Invalid input\")\n    return area\ndef lateral_surface_validator(type):\n    '''\n    Write a function to validate the type of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if type == \"cone\" or type == \"cylinder\" or type == \"sphere\":\n            valid = True\n        else:\n            print(\"Invalid input\")\n            type = input(\"Enter the type of lateral surface: \")\n            valid = False\n    return type\ndef lateral_surface_type_info(type):\n    '''\n    Write a function to display the type of the lateral surface and its area.\n    '''\n    if type == \"cone\":\n        print(\"Lateral surface is a cone\")\n        r = float(input(\"Enter the radius of the cone: \"))\n        h = float(input(\"Enter the height of the cone: \"))\n        area = lateralsurface_cone(r,h)\n    elif type == \"cylinder\":\n        print(\"Lateral surface is a cylinder\")\n        r = float(input(\"Enter the radius of the cylinder: \"))\n        h = float(input(\"Enter the height of the cylinder: \"))\n        area = lateralsurface_cylinder(r,h)\n    elif type == \"sphere\":\n        print(\"Lateral surface is a sphere\")\n        r = float(input(\"Enter the radius of the sphere: \"))\n        area = lateralsurface_sphere(r)\n    else:\n        print(\"Invalid input\")\n        type = input(\"Enter the type of lateral surface: \")\n        lateral_surface_type_info(type)\n    print(\"Area of the lateral surface = \",area)\ndef lateral_surface_type_info_validator(type):\n    '''\n    Write a function to validate the type of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if type == \"cone\" or type == \"cylinder\" or type == \"sphere\":\n            valid = True\n        else:\n            print(\"Invalid input\")\n            type = input(\"Enter the type of lateral surface: \")\n            valid = False\n    return type\ndef lateral_surface_r_h_validator(r,h):\n    '''\n    Write a function to validate the radial and height of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0 and h > 0:\n            valid = True\n        else:\n            r = float(input(\"Enter the radius of the cone: \"))\n            h = float(input(\"Enter the height of the cone: \"))\n    return r,h\ndef lateral_surface_r_h_info(r,h):\n    '''\n    Write a function to display the radial and height of the lateral surface.\n    '''\n    print(\"Radius = \",r)\n    print(\"Height = \",h)\ndef lateral_surface_r_h_info_validator(r,h):\n    '''\n    Write a function to validate the radial and height of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0 and h > 0:\n            valid = True\n        else:\n            print(\"Invalid input\")\n            r = float(input(\"Enter the radius of the cone: \"))\n            h = float(input(\"Enter the height of the cone: \"))\n    return r,h\ndef lateral_surface_r_h_validator_r_h(r,h):\n    '''\n    Write a function to validate the radial and height of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0 and h > 0:\n            valid = True\n        else:\n            print(\"Invalid input\")\n            r = float(input(\"Enter the radius of the cone: \"))\n            h = float(input(\"Enter the height of the cone: \"))\n    return r,h\ndef lateral_surface_r_h_validator_r_h_validator(r,h):\n    '''\n    Write a function to validate the radial and height of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0 and h > 0:\n            valid = True\n        else:\n            r = float(input(\"Enter the radius of the cone: \"))\n            h = float(input(\"Enter the height of the cone: \"))\n    return r,h\ndef lateral_surface_r_h_validator_r(r):\n    '''\n    Write a function to validate the radial of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0:\n            valid = True\n        else:\n            print(\"Invalid input\")\n            r = float(input(\"Enter the radius of the cone: \"))\n    return r\ndef lateral_surface_r_h_validator_r_h_validator(r,h):\n    '''\n    Write a function to validate the radial of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0 and h > 0:\n            valid = True\n        else:\n            r = float(input(\"Enter the radius of the cone: \"))\n            h = float(input(\"Enter the height of the cone: \"))\n    return r,h\ndef lateral_surface_r_h_validator_r_h(r,h):\n    '''\n    Write a function to validate the radial of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0 and h > 0:\n            valid = True\n        else:\n            r = float(input(\"Enter the radius of the cone: \"))\n            h = float(input(\"Enter the height of the cone: \"))\n    return r,h\ndef lateral_surface_r_h_validator_r(r):\n    '''\n    Write a function to validate the radial of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0:\n            valid = True\n        else:\n            print(\"Invalid input\")\n            r = float(input(\"Enter the radius of the cone: \"))\n    return r\ndef lateral_surface_r_h_validator_r_h_validator(r,h):\n    '''\n    Write a function to validate the radial of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0 and h > 0:\n            valid = True\n        else:\n            r = float(input(\"Enter the radius of the cone: \"))\n            h = float(input(\"Enter the height of the cone: \"))\n    return r,h\ndef lateral_surface_r_h_validator_r_h(r,h):\n    '''\n    Write a function to validate the radial of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r > 0 and h > 0:\n            valid = True\n        else:\n            r = float(input(\"Enter the radius of the cone: \"))\n            h = float(input(\"Enter the height of the cone: \"))\n    return r,h\ndef lateral_surface_r_h_validator_r(r):\n    '''\n    Write a function to validate the radial of the lateral surface.\n    '''\n    valid = False\n    while not valid:\n        if r "
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    l = (r**2*math.sin(h)) + (2*h*r*math.sin(math.pi/6))\n    return l\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*math.pow(r,2)*h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*r*r*h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r<0 or h<=0:\n        return 0\n    if h==0:\n        return math.pi*r**2\n    if h==1:\n        return math.pi*r**2\n    return 2*math.pi*r*(h-1)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return pi*r*r*h/3\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\ndef radial_surface(h,r):\n    '''\n    Write a function to find the radial surface area of a cone given radius r and height h.\n    '''\n    return math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * (r + math.sqrt((r**2) + h**2))\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral = math.pi*r**2*h\n    return lateral\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    lateral = 4*math.pi*r**2\n    return lateral\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    lateral = 2*math.pi*r*h\n    return lateral\ndef lateralsurface_tetrahedron(r):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given radius r.\n    '''\n    lateral = 4*math.pi*r**2\n    return lateral\ndef lateralsurface_octahedron(r):\n    '''\n    Write a function to find the lateral surface area of a octahedron given radius r.\n    '''\n    lateral = 6*math.pi*r**2\n    return lateral\ndef lateral_surface_area(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return lateralsurface_sphere(r)\n    if shape == 'cone':\n        return lateralsurface_cone(r,h)\n    if shape == 'cylinder':\n        return lateralsurface_cylinder(r,h)\n    if shape == 'tetrahedron':\n        return lateralsurface_tetrahedron(r)\n    if shape == 'octahedron':\n        return lateralsurface_octahedron(r)\ndef lateral_surface_area_parameter(shape,r):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radii(shape,r):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius(shape,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r.\n    '''\n    if shape =='sphere':\n        return h\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_parameter(shape,r):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radii_height(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return h\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return h\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height_parameter_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radii_height_parameter_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return h\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height_parameter_parameter_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height_parameter_parameter_parameter_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shap"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[,\\.]\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    a = text.replace(\" \",\".\")\n    b = a.replace(\",\",\"\")\n    c = b.replace(\".\",\"\")\n    d = c.replace(\"  \",\"\")\n    return(d)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s', ':', text)\n    \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ]|[,.]',':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(',','.')\n    text=text.replace(' ','.')\n    text=text.replace('.',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    regex = re.compile(r'[,.;:?!\\(\\)\\]\\[\\]\\-\\+\\\\\\/\\\"\\s]+')\n    return regex.sub(':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r\"([,.:;])\")\n    return re.sub(pattern, r\":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    n = []\n    for i in text.split(\" \"):\n        n.append(i.replace(\",\",\"\").replace(\".\",\"\"))\n    return \"\".join(n)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[\\W_]+', ':', text)\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return A.index(x)\n    # time complexity: O(log(n)), space complexity: O(1)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # if x is less than array[0], then x is not in the array\n    if A[0] > x:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo)//2\n        if A[mid] < x:\n            lo = mid + 1\n        elif A[mid] == x:\n            return mid\n        else:\n            hi = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n == 0:\n        return -1\n    if n == 1 and A[0]!= x:\n        return -1\n    if n == 1 and A[0] == x:\n        return 0\n    if A[n-1]!= x:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Get the index of the element\n    index = 0\n    \n    # Find the element\n    for i in range(len(A)):\n        if A[i] == x:\n            return index\n        index += 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low = 0\n    high = n - 1\n    if x not in A:\n        return -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    if A[-1] == x:\n        return len(A) - 1\n    if A[0] > x:\n        return 0\n    if A[-1] < x:\n        return len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum = sum + arr[i] * arr[j]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    dp = [[1 for j in range(len(arr)+1)] for i in range(len(arr)+1)]\n    # bottom-up approach\n    for i in range(1, len(arr)+1):\n        for j in range(i, len(arr)+1):\n            for k in range(i, j):\n                # if element at i is 0, then no product for rest of the elements\n                if arr[k-1] == 0:\n                    dp[i][j] = 0\n                    break\n                else:\n                    dp[i][j] = dp[i][j] + dp[i][k-1] * dp[k+1][j]\n    print(dp)\n    return dp[1][len(arr)]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            res += prod(arr[i:j+1])\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    products = []\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)+1):\n            products.append(arr[i:j])\n    print(products)\n    prod = 1\n    for p in products:\n        prod *= p\n    print(prod)\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    from math import prod\n    # Solution 1\n    # def getProd(arr, subarr, prod_arr):\n    #     for i in range(len(subarr)):\n    #         prod_arr.append(prod(subarr[:i + 1]))\n    #     print(prod_arr)\n    #     return\n    # # arr = [-1, 2, 3, 4, 5]\n    # subarr = [[], [-1], [2], [2, 3], [2, 3, 4], [2, 3, 4, 5]]\n    # print(getProd(arr, subarr, prod_arr = []))\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product = 1\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = product * arr[j]\n            ans += product\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # code here\n    if not arr:\n        return 0\n    \n    if len(arr)==1:\n        return arr[0]\n    \n    arr_sum=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            arr_sum+=arr[i]*arr[j]\n    return arr_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]!= 0 and arr[j]!= 0):\n                total = total * arr[i] * arr[j]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i,n):\n            s = 1\n            for k in range(i,j+1):\n                s *= arr[k]\n            ans.append(s)\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 1\n    for i in range(1,len(arr)+1):\n        for j in range(0,len(arr)-i+1):\n            total *= arr[j]\n            print(\"arr[j] = \",arr[j],\" total = \",total)\n            for k in range(j,j+i):\n                print(\"k = \",k,\" arr[k] = \",arr[k])\n                total *= arr[k]\n            print(\"total = \",total)\n    print(total)\n    return total\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    n1=n\n    \n    #n1 = n1^(n1>>1)\n    #n1 = n1^n1\n    \n    # n1 = n1^(n1>>1)^n1\n    # n1 = n1^n1^n1\n    \n    # n1 = n1^(n1>>1)^n1^n1\n    \n    # n1 = n1^n1^(n1>>1)\n    \n    # n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^n1\n    \n    # n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^n1^n1\n    \n    \n    \n    # n1 = n1^n1^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^n1\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^n1^n1\n    \n    #n1 = n1^n1^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    \n    #n1 = n1^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)\n    \n    \n    \n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)\n    \n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = n1^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)^(n1>>1)\n    \n    #n1 = "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ 0b1000000000000001\n    n = n ^ 0b10000000000000000\n    n = n ^ 0b100000000000000000000000000\n    n = n ^ 0b100000000000000000000000000000\n    n = n ^ 0b1000000000000000000000000000001\n    n = n ^ 0b1000000000000000000000000000011\n    n = n ^ 0b10000000000000000000000000000111\n    n = n ^ 0b100000000000000000000000000001111\n    n = n ^ 0b1000000000000000000000000000011111\n    n = n ^ 0b10000000000000000000000000000111111\n    n = n ^ 0b100000000000000000000000000001111111\n    n = n ^ 0b10000000000000000000000000000111111111\n    n = n ^ 0b10000000000000000000000000000111111111\n    n = n ^ 0b1000000000000000000000000000011111111111\n    n = n ^ 0b1000000000000000000000000000011111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n ^ 0b100000000000000000000000000001111111111111\n    n = n "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n << 1) | (n >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    while(n>0):\n        n=n&(n-1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #n = int(input('Enter an Integer: '))\n    \n    n_binary = bin(n)\n    n_binary = n_binary.replace(\"0b\",\"\")\n    n_binary = n_binary.replace(\"\",\"\")\n    n_binary = n_binary[1:]\n    n_binary = n_binary[:-1]\n    n_binary = int(n_binary,2)\n    \n    return n_binary\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n ^= (1 << 31) | (1 << 30)\n    return n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    while (n):\n        bit = n & 1\n        n >>= 1\n        n |= bit << 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n ^ (n >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n>>1)\n    \n    \n    \ndef toggle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    return ((n<<1) | (n>>1))\n    \n    \n    \ndef get_int_from_binary_string(st):  \n    '''\n    Write a python function to get the integer from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    return int(st, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(st):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    return int(st, 2)\n    \n    \n    \ndef is_number_balanced(number):  \n    '''\n    Write a python function to check if a number is balanced or not.\n    \n    For example:\n    Input: 145\n    Output: True\n    '''\n    \n    return number == get_number_from_decimal(get_number_from_binary_string(get_binary_from_decimal(number)))\n    \n    \n    \ndef get_number_from_decimal(binary_string):  \n    '''\n    Write a python function to get the integer number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_number_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the integer number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_from_binary_string(binary_string):  \n    '''\n    Write a python function to get the decimal number from a binary number.\n    \n    For example:\n    Input: 1011\n    Output: 5\n    '''\n    \n    return int(binary_string, 2)\n    \n    \n    \ndef get_binary_from_decimal(n):  \n    '''\n    Write a python function to get the binary number from an integer.\n    \n    For example:\n    Input: 5\n    Output: 1011\n    '''\n    \n    return bin(n)\n    \n    \n    \ndef get_decimal_fro"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & 0xAAAAAAAA) >> 1 | (n & 0x55555555) << 1) & 0xaaaaaaaa\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Base case\n    if a is None:\n        return 0\n    \n    # If x is smaller than current node, then this is the leftmost leaf\n    if x < a.data:\n        return 0\n    \n    # Binary search for where to insert x\n    lo = 0\n    hi = len(a)-1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if x == a.data[mid]:\n            return mid\n        elif x < a.data[mid]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    # If we get here, then the element was not found\n    return lo\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    if i==len(a):\n        return None\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    low = 0\n    high = len(a) - 1\n    mid = 0\n    while low <= high:\n        mid = low + (high - low) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    for i in range(len(a)):\n        if x > a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return 0\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        if a[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    if i == 0:\n        return 0\n    elif i == len(a):\n        return len(a)\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if x < a[mid]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if a[i] == x:\n        return i\n    for j in range(i, len(a)):\n        if a[j] == x:\n            return j\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    while index > 0:\n        if a[index-1] == x:\n            return index\n        elif a[index] > x:\n            return index\n        elif a[index] < x:\n            index -= 1\n    return 0\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    while index < len(a):\n        if a[index] == x:\n            return index\n        elif a[index] < x:\n            return index\n        elif a[index] > x:\n            index += 1\n    return index\na = [1,2,3,4,6,8,9,13,18,19,20]\nprint(a)\nprint(left_insertion(a, 5))\nprint(left_insertion(a, 2))\nprint(right_insertion(a, 6))\nprint(right_insertion(a, 13))\nprint(right_insertion(a, 18))\nprint(right_insertion(a, 19))\nprint(right_insertion(a, 20))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString starting with vowel.\")\n    else:\n        print(\"\\nString doesn't starting with vowel.\")\n        \ndef check_str_2(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString ending with vowel.\")\n    else:\n        print(\"\\nString doesn't ending with vowel.\")\n        \ndef check_str_3(string): \n    '''\n    Write a function to check whether the given string is alphanumeric or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString alphanumeric.\")\n    else:\n        print(\"\\nString doesn't alphanumeric.\")\n        \ndef check_str_4(string): \n    '''\n    Write a function to check whether the given string contains digits or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digits.\")\n    else:\n        print(\"\\nString doesn't contains digits.\")\n        \ndef check_str_5(string): \n    '''\n    Write a function to check whether the given string contains atleast one lowercase alphabets and one digit or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains lowercase and digits.\")\n    else:\n        print(\"\\nString doesn't contains lowercase and digits.\")\n        \ndef check_str_6(string): \n    '''\n    Write a function to check whether the given string contains atleast one uppercase alphabets and one digit or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains uppercase and digits.\")\n    else:\n        print(\"\\nString doesn't contains uppercase and digits.\")\n        \ndef check_str_7(string): \n    '''\n    Write a function to check whether the given string contains atleast one lowercase alphabets, one uppercase alphabets and one digit or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains lowercase, uppercase and digits.\")\n    else:\n        print(\"\\nString doesn't contains lowercase, uppercase and digits.\")\n        \ndef check_str_8(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one lowercase alphabets and one uppercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, lowercase, uppercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, lowercase, uppercase.\")\n        \ndef check_str_9(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one lowercase alphabets and one uppercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, lowercase, uppercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, lowercase, uppercase.\")\n        \ndef check_str_10(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one uppercase alphabets and one lowercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, uppercase, lowercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, uppercase, lowercase.\")\n        \ndef check_str_11(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one lowercase alphabets and one uppercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, lowercase, uppercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, lowercase, uppercase.\")\n        \ndef check_str_12(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one lowercase alphabets and one uppercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, lowercase, uppercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, lowercase, uppercase.\")\n        \ndef check_str_13(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one uppercase alphabets and one lowercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, uppercase, lowercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, uppercase, lowercase.\")\n        \ndef check_str_14(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one lowercase alphabets and one uppercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, lowercase, uppercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, lowercase, uppercase.\")\n        \ndef check_str_15(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one lowercase alphabets and one uppercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, lowercase, uppercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, lowercase, uppercase.\")\n        \ndef check_str_16(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one uppercase alphabets and one lowercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, uppercase, lowercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, uppercase, lowercase.\")\n        \ndef check_str_17(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one uppercase alphabets and one lowercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, uppercase, lowercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, uppercase, lowercase.\")\n        \ndef check_str_18(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one lowercase alphabets and one uppercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, lowercase, uppercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, lowercase, uppercase.\")\n        \ndef check_str_19(string): \n    '''\n    Write a function to check whether the given string contains atleast one digit, one uppercase alphabets and one lowercase alphabets or not using regex.\n    '''\n    if bool(re.match(regex,string)):\n        print(\"\\nString contains digit, uppercase, lowercase.\")\n    else:\n        print(\"\\nString doesn't contains digit, "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \ncheck_str(\"Ankit\") \ncheck_str(\"abcd\") \ncheck_str(\"c\") \ncheck_str(\"Gg\") \ncheck_str(\"A\") \ncheck_str(\"Nt\") \ncheck_str(\"u\") \ncheck_str(\"v\") \ncheck_str(\"n\") \ncheck_str(\"G\")\ncheck_str(\"$\")\ncheck_str(\"@\")\ncheck_str(\"J\")\ncheck_str(\"A\")\ncheck_str(\"O\")\ncheck_str(\"P\")\ncheck_str(\"0\")\ncheck_str(\"1\")\ncheck_str(\"2\")\ncheck_str(\"3\")\ncheck_str(\"4\")\ncheck_str(\"5\")\ncheck_str(\"6\")\ncheck_str(\"7\")\ncheck_str(\"8\")\ncheck_str(\"9\")\ncheck_str(\"_\")\ncheck_str(\" \")\ncheck_str(\"/\")\ncheck_str(\"-\")\ncheck_str(\"+\")\ncheck_str(\"a\")\ncheck_str(\"b\")\ncheck_str(\"c\")\ncheck_str(\"d\")\ncheck_str(\"e\")\ncheck_str(\"f\")\ncheck_str(\"g\")\ncheck_str(\"h\")\ncheck_str(\"i\")\ncheck_str(\"j\")\ncheck_str(\"k\")\ncheck_str(\"l\")\ncheck_str(\"m\")\ncheck_str(\"n\")\ncheck_str(\"o\")\ncheck_str(\"p\")\ncheck_str(\"q\")\ncheck_str(\"r\")\ncheck_str(\"s\")\ncheck_str(\"t\")\ncheck_str(\"u\")\ncheck_str(\"v\")\ncheck_str(\"w\")\ncheck_str(\"x\")\ncheck_str(\"y\")\ncheck_str(\"z\")\ncheck_str(\"A\")\ncheck_str(\"B\")\ncheck_str(\"C\")\ncheck_str(\"D\")\ncheck_str(\"E\")\ncheck_str(\"F\")\ncheck_str(\"G\")\ncheck_str(\"H\")\ncheck_str(\"I\")\ncheck_str(\"J\")\ncheck_str(\"K\")\ncheck_str(\"L\")\ncheck_str(\"M\")\ncheck_str(\"N\")\ncheck_str(\"O\")\ncheck_str(\"P\")\ncheck_str(\"Q\")\ncheck_str(\"R\")\ncheck_str(\"S\")\ncheck_str(\"T\")\ncheck_str(\"U\")\ncheck_str(\"V\")\ncheck_str(\"W\")\ncheck_str(\"X\")\ncheck_str(\"Y\")\ncheck_str(\"Z\")\ncheck_str(\"a\")\ncheck_str(\"b\")\ncheck_str(\"c\")\ncheck_str(\"d\")\ncheck_str(\"e\")\ncheck_str(\"f\")\ncheck_str(\"g\")\ncheck_str(\"h\")\ncheck_str(\"i\")\ncheck_str(\"j\")\ncheck_str(\"k\")\ncheck_str(\"l\")\ncheck_str(\"m\")\ncheck_str(\"n\")\ncheck_str(\"o\")\ncheck_str(\"p\")\ncheck_str(\"q\")\ncheck_str(\"r\")\ncheck_str(\"s\")\ncheck_str(\"t\")\ncheck_str(\"u\")\ncheck_str(\"v\")\ncheck_str(\"w\")\ncheck_str(\"x\")\ncheck_str(\"y\")\ncheck_str(\"z\")\ncheck_str(\"0\")\ncheck_str(\"1\")\ncheck_str(\"2\")\ncheck_str(\"3\")\ncheck_str(\"4\")\ncheck_str(\"5\")\ncheck_str(\"6\")\ncheck_str(\"7\")\ncheck_str(\"8\")\ncheck_str(\"9\")\ncheck_str(\"_\")\ncheck_str(\" \")\ncheck_str(\"/\")\ncheck_str(\"-\")\ncheck_str(\"+\")\ncheck_str(\"@\")\ncheck_str(\"a\")\ncheck_str(\"b\")\ncheck_str(\"c\")\ncheck_str(\"d\")\ncheck_str(\"e\")\ncheck_str(\"f\")\ncheck_str(\"g\")\ncheck_str(\"h\")\ncheck_str(\"i\")\ncheck_str(\"j\")\ncheck_str(\"k\")\ncheck_str(\"l\")\ncheck_str(\"m\")\ncheck_str(\"n\")\ncheck_str(\"o\")\ncheck_str(\"p\")\ncheck_str(\"q\")\ncheck_str(\"r\")\ncheck_str(\"s\")\ncheck_str(\"t\")\ncheck_str(\"u\")\ncheck_str(\"v\")\ncheck_str(\"w\")\ncheck_str(\"x\")\ncheck_str(\"y\")\ncheck_str(\"z\")\ncheck_str(\"A\")\ncheck_str(\"B\")\ncheck_str(\"C\")\ncheck_str(\"D\")\ncheck_str(\"E\")\ncheck_str(\"F\")\ncheck_str(\"G\")\ncheck_str(\"H\")\ncheck_str(\"I\")\ncheck_str(\"J\")\ncheck_str(\"K\")\ncheck_str(\"L\")\ncheck_str(\"M\")\ncheck_str(\"N\")\ncheck_str(\"O\")\ncheck_str(\"P\")\ncheck_str(\"Q\")\ncheck_str(\"R\")\ncheck_str(\"S\")\ncheck_str(\"T\")\ncheck_str(\"U\")\ncheck_str(\"V\")\ncheck_str(\"W\")\ncheck_str(\"X\")\ncheck_str(\"Y\")\ncheck_str(\"Z\")\ncheck_str(\"a\")\ncheck_str(\"b\")\ncheck_str(\"c\")\ncheck_str(\"d\")\ncheck_str(\"e\")\ncheck_str(\"f\")\ncheck_str(\"g\")\ncheck_str(\"h\")\ncheck_str(\"i\")\ncheck_str(\"j\")\ncheck_str(\"k\")\ncheck_str(\"l\")\ncheck_str(\"m\")\ncheck_str(\"n\")\ncheck_str(\"o\")\ncheck_str(\"p\")\ncheck_str(\"q\")\ncheck_str(\"r\")\ncheck_str(\"s\")\ncheck_str(\"t\")\ncheck_str(\"u\")\ncheck_str(\"v\")\ncheck_str(\"w\")\ncheck_str(\"x\")\ncheck_str(\"y\")\ncheck_str(\"z\")\ncheck_str(\"0\")\ncheck_str(\"1\")\ncheck_str(\"2\")\ncheck_str(\"3\")\ncheck_str(\"4\")\ncheck_str(\"5\")\ncheck_str(\"6\")\ncheck_str(\"7\")\ncheck_str(\"8\")\ncheck_str(\"9\")\ncheck_str(\"_\")\ncheck_str(\" \")\ncheck_str(\"/\")\ncheck_str(\"-\")\ncheck_str(\"+\")\ncheck_str(\"@\")\ncheck_str(\"a\")\ncheck_str(\"b\")\ncheck_str(\"c\")\ncheck_str(\"d\")\ncheck_str(\"e\")\ncheck_str(\"f\")\ncheck_str(\"g\")\ncheck_str(\"h\")\ncheck_str(\"i\")\ncheck_str(\"j\")\ncheck_str(\"k\")\ncheck_str(\"l\")\ncheck_str(\"m\")\ncheck_str(\"n\")\ncheck_str(\"o\")\ncheck_str(\"p\")\ncheck_str(\"q\")\ncheck_str(\"r\")\ncheck_str(\"s\")\ncheck_str(\"t\")\ncheck_str(\"u\")\ncheck_str(\"v\")\ncheck_str(\"w\")\ncheck_str(\"x\")\ncheck_str(\"y\")\ncheck_str(\"z\")\ncheck_str(\"A\")\ncheck_str(\"B\")\ncheck_str(\"C\")\ncheck_str(\"D\")\ncheck_str(\"E\")\ncheck_str(\"F\")\ncheck_str(\"G\")\ncheck_str(\"H\")\ncheck_str(\"I\")\ncheck_str(\"J\")\ncheck_str(\"K\")\ncheck_str(\"L\")\ncheck_str(\"M\")\ncheck_str(\"N\")\ncheck_str(\"O\")\ncheck_str(\"P\")\ncheck_str(\"Q\")\ncheck_str(\"R\")\ncheck_str(\"S\")\ncheck_str(\"T\")\ncheck_str(\"U\")\ncheck_str(\"V\")\ncheck_str(\"W\")\ncheck_str(\"X\")\ncheck_str(\"Y\")\ncheck_str(\"Z\")\ncheck_str(\"a\")\ncheck_str(\"b\")\ncheck_str(\"c\")\ncheck_str(\"d\")\ncheck_str(\"e\")\ncheck_str("
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    check = re.search(regex,string)\n    if check:\n        return True\n    else:\n        return False\nprint(check_str(\"Voyous\"))\nprint(check_str(\"Roysal\"))\nprint(check_str(\"Evans\"))\nprint(check_str(\"Zommee\"))\nprint(check_str(\"Lex\"))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)!= None\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex,string.lower()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    string = 'aeiouAEIOU'\n    if re.search(regex, string): \n        print(\"String is starting with vowel\") \n    else: \n        print(\"String is not starting with vowel\") \n    \n    \ndef check_str_2(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*$'\n    string = 'aeiouAEIOU'\n    if re.search(regex, string): \n        print(\"String is ending with vowel\") \n    else: \n        print(\"String is not ending with vowel\") \n    \n    \ndef check_str_3(string): \n    '''\n    Write a function to check whether the given string is only alphabets using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'aeiouAEIOU'\n    if re.search(regex, string): \n        print(\"String is only alphabets\") \n    else: \n        print(\"String is not only alphabets\") \n    \n    \ndef check_str_4(string): \n    '''\n    Write a function to check whether the given string contains only alphabets, numbers and underscore using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'aeiouAEIOU'\n    if re.search(regex, string): \n        print(\"String contains only alphabets, numbers and underscore\") \n    else: \n        print(\"String does not contain only alphabets, numbers and underscore\") \n    \n    \ndef check_str_5(string): \n    '''\n    Write a function to check whether the given string contains only alphabets, numbers and underscore, containing at least one alphabet, digit and underscore using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'ab_cdz_def'\n    if re.search(regex, string): \n        print(\"String contains only alphabets, numbers and underscore\") \n    else: \n        print(\"String does not contain only alphabets, numbers and underscore\") \n    \n    \ndef check_str_6(string): \n    '''\n    Write a function to check whether the given string contains only alphabets, numbers and underscore, containing at least one alphabet, digit and underscore, containing at least one alphabet, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'ab_cdz_def'\n    if re.search(regex, string): \n        print(\"String contains only alphabets, numbers and underscore\") \n    else: \n        print(\"String does not contain only alphabets, numbers and underscore\") \n    \n    \ndef check_str_7(string): \n    '''\n    Write a function to check whether the given string contains only alphabets, numbers and underscore, containing at least one alphabet, digit and underscore, containing at least one alphabet, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'ab_cdz_def'\n    if re.search(regex, string): \n        print(\"String contains only alphabets, numbers and underscore\") \n    else: \n        print(\"String does not contain only alphabets, numbers and underscore\") \n    \n    \ndef check_str_8(string): \n    '''\n    Write a function to check whether the given string contains only alphabets, numbers and underscore, containing at least one alphabet, digit and underscore, containing at least one alphabet, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'ab_cdz_def'\n    if re.search(regex, string): \n        print(\"String contains only alphabets, numbers and underscore\") \n    else: \n        print(\"String does not contain only alphabets, numbers and underscore\") \n    \n    \ndef check_str_9(string): \n    '''\n    Write a function to check whether the given string contains only alphabets, numbers and underscore, containing at least one alphabet, digit and underscore, containing at least one alphabet, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'ab_cdz_def'\n    if re.search(regex, string): \n        print(\"String contains only alphabets, numbers and underscore\") \n    else: \n        print(\"String does not contain only alphabets, numbers and underscore\") \n    \n    \ndef check_str_10(string): \n    '''\n    Write a function to check whether the given string contains only alphabets, numbers and underscore, containing at least one alphabet, digit and underscore, containing at least one alphabet, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'ab_cdz_def'\n    if re.search(regex, string): \n        print(\"String contains only alphabets, numbers and underscore\") \n    else: \n        print(\"String does not contain only alphabets, numbers and underscore\") \n    \n    \ndef check_str_11(string): \n    '''\n    Write a function to check whether the given string contains only alphabets, numbers and underscore, containing at least one alphabet, digit and underscore, containing at least one alphabet, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, containing at least one digit, digit and underscore, using regex.\n    '''\n    regex = '^[A-Za-z0-9_]*$'\n    string = 'ab_cdz_def'\n    if re.search(regex, string): \n        print(\"String contains only alphabets, numbers and underscore\") \n    else: \n        print(\"String does not contain only alphabets, numbers and underscor"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n    \ndef summation(n):\n    '''\n    Write a recursive function to calculate the summation from 1 to n.https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-6.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + summation(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1.0 * n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return (n*(n-1))/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return (n*(n-1))/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    return 1/n*(n-1)*geometric_sum(n-1)\n    \ndef fibonacci_number(n):\n    '''\n    Write a function to calculate the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci_number(n-1)+fibonacci_number(n-2)\n        \ndef fibonacci_number_with_memoization(n):\n    '''\n    Write a function to calculate the nth fibonacci number\n    with memoization. Use a dictionary to store the results.\n    '''\n    memo = {}\n    def fibonacci_number_with_memoization_recursive(n,memo):\n        if n == 0:\n            return 0\n        elif n==1:\n            return 1\n        elif n not in memo:\n            memo[n] = fibonacci_number_with_memoization_recursive(n-1,memo)+fibonacci_number_with_memoization_recursive(n-2,memo)\n        return memo[n]\n    return fibonacci_number_with_memoization_recursive(n,memo)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # time complexity = O(n)\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n > 1:\n        return n * (n - 1)\n    else:\n        return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    a = int(math.sqrt(n * (n + 1) / 2))\n    b = int(math.sqrt(n * (n + 1) / 2))\n    for i in range(a, 0, -1):\n        if 2 * i <= n:\n            if n - i <= i:\n                if (i + n) % 2 == 0:\n                    return i\n            if n - i >= i:\n                if (i + n) % 2 == 1:\n                    return i\n            return int(a - i)\n        else:\n            a = int((a + b) / 2)\n    if n % 2 == 0:\n        return int(a - 1)\n    return int(a)\ndef check_Sorted(arr): \n    '''\n    Write a python function to check whether the given list of integers \n    sorted in non-decreasing order is a mountain array or not.\n    '''\n    N = len(arr)\n    if N == 1:\n        return False\n    if N == 2:\n        return (arr[0] <= arr[1])\n    if N == 3:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2])\n    if N == 4:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3])\n    if N == 5:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3]) and (arr[3] <= arr[4])\n    if N == 6:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3]) and (arr[3] <= arr[4]) and (arr[4] <= arr[5])\n    return False\ndef check_StrictlyIncreasing(arr): \n    '''\n    Write a python function to check whether the given list of integers is a strictly increasing \n    sorted or not.\n    '''\n    N = len(arr)\n    if N == 1:\n        return False\n    if N == 2:\n        return (arr[0] <= arr[1])\n    if N == 3:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2])\n    if N == 4:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3])\n    if N == 5:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3]) and (arr[3] <= arr[4])\n    if N == 6:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3]) and (arr[3] <= arr[4]) and (arr[4] <= arr[5])\n    return False\ndef spiralOrder(n, k): \n    '''\n    Write a python function to find the spiral order of a matrix with N rows and M columns. \n    The spiral order should be printed in clockwise direction.\n    '''\n    if n == 1:\n        return [k]\n    if n == 2:\n        return [k,k+1]\n    if n == 3:\n        return [k,k+1,k+2]\n    if n == 4:\n        return [k,k+1,k+2,k+3]\n    if n == 5:\n        return [k,k+1,k+2,k+3,k+4]\n    if n == 6:\n        return [k,k+1,k+2,k+3,k+4,k+5]\n    return []\ndef find_Occurrences(string, pattern): \n    '''\n    Write a python function to find the occurences of the pattern in the given string.\n    '''\n    if string == '':\n        return -1\n    if pattern == '':\n        return 0\n    l = len(string)\n    i = 0\n    j = 0\n    occ = 0\n    while i < l and j < len(pattern):\n        if string[i] == pattern[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n        if j == len(pattern):\n            occ += 1\n            j = 0\n    return occ\ndef num_Squares(n): \n    '''\n    Write a python function to find the count of squares less than or equal to the given integer n.\n    '''\n    if n <= 2:\n        return n\n    dp = [-1] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = i\n        j = 1\n        while j * j <= i:\n            if dp[i] == -1:\n                continue\n            dp[i] = dp[i] - 1\n            if dp[i] == 0:\n                break\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\ndef numSquares(n):\n    dp = [-1 for i in range(n + 1)]\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        j = 1\n        while j * j <= i:\n            if dp[i] == -1:\n                dp[i] = dp[i - j * j] + 1\n            else:\n                dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\ndef check_Pentagonal(n):\n    '''\n    Write a python function to check whether the given integer is pentagonal or not.\n    '''\n    if n <= 2:\n        return False\n    i = 1\n    k = 1\n    while i * i <= n:\n        i += 1\n    while k * k <= n:\n        k += 1\n    if i * i!= k:\n        return False\n    a = (k + 1) * (k - 1) / 2\n    b = i * i\n    return a == n and int(math.sqrt(b - a)) == b - a\ndef largestPair(nums):\n    '''\n    Write a python function to find the largest pair in given array of integers.\n    '''\n    if len(nums) == 1:\n        return (nums[0], nums[0])\n    if len(nums) == 2:\n        return (nums[0], nums[1])\n    if len(nums) == 3:\n        return (nums[0], nums[1]) if nums[0] > nums[1] else (nums[1], nums[0])\n    d = {}\n    maxx = 0\n    for i in range(len(nums)):\n        if nums[i] in d:\n            d[nums[i]] += 1\n        else:\n            d[nums[i]] = 1\n    for i in range(len(nums)):\n        if d[nums[i]] > maxx:\n            maxx = d[nums[i]]\n            j = i\n    return (nums[j], nums[j+1])\ndef findKthDigit(n, k):\n    '''\n    Write a python function to find the kth digit of a given integer.\n    '''\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    if k == 1:\n        return n // 10\n    if k == 2:\n        return (n // 10) % 10\n    if k == 3:\n        return (n // 100) % 10 * 10 + (n // 10) % 10\n    if k == 4:\n        return (n // 1000) % 10 * 100 + (n // 10) % 10 * 10 + (n // 1) % 10\n    i"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math\n    import random\n    import time\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        if i*(i+1)//2 == n:\n            return i-1\n        i += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # using simple math\n    k = 0\n    while (1<<k)<=n:\n        k += 1\n    return k-1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    flag = False\n    for i in range(1,n):\n        if flag:\n            break\n        for j in range(1, i):\n            if i == j:\n                print('{} and {} both are same'.format(i, j))\n                flag = True\n            elif (i**2 - j**2) == (i - j)**2:\n                print('{} is a triangular number with {} digits'.format(i, n-i))\n                flag = True\n                break\n        if flag:\n            break\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n): \n        i = i + 1\n        print(i, end = \" \") \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = n**(1/2)\n    c = 1\n    while True:\n        d = a**2 - c\n        if d >= 0:\n            c = a**2 - c\n        else:\n            print(c)\n            break\n        a += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = 0\n    i = 0\n    while(i<n):\n        num = num*(i+1)+1\n        i = i+1\n    return num\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    s = 0\n    res = 0\n    while (s <= (n/2)): \n        res = res + (n*(n-1)/2) \n        s = s + 1\n    return int(res) \n    \ndef sqrt(x): \n    '''\n    Write a python function to find the square root of any given number.\n    '''\n    if x == 0: \n        return 0\n    ans = 1.0\n    while (ans * ans < x): \n        ans = ans * 2\n    return ans/2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    print(n)\n    i = 1\n    while(i*(i+1)/2 < n):\n        i += 1\n    return math.floor(n/i) - 1\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)):\n        dict[test_tup[i]] = test_tup[i + 1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    i = 0\n    while i < len(test_tup):\n        result[test_tup[i]] = test_tup[i + 1]\n        i += 2\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    out_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if test_tup[i] in out_dict.keys():\n            out_dict[test_tup[i]].append(test_tup[i+1])\n        else:\n            out_dict[test_tup[i]] = [test_tup[i+1]]\n    return out_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(0, len(test_tup), 2):\n        dict_tup[test_tup[i]] = test_tup[i + 1]\n    return dict_tup\n    \ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple using key,value elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple/\n    '''\n    tup_dict = ()\n    for i in test_dict:\n        tup_dict += (i, test_dict[i])\n    return tup_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # your code here\n    newdict = dict()\n    for i in range(len(test_tup)-1):\n        newdict[test_tup[i]] = test_tup[i+1]\n    return newdict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_dict = {}\n    for i in range(0, len(test_tup), 2):\n        tup_dict[test_tup[i]] = test_tup[i+1]\n    return tup_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i: test_tup[i] for i in range(len(test_tup) - 1)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_test = {}\n    for idx, elem in enumerate(test_tup):\n        if idx == 0:\n            dict_test[elem] = test_tup[idx+1]\n        elif idx == len(test_tup)-1:\n            dict_test[elem] = test_tup[idx-1]\n        else:\n            dict_test[elem] = test_tup[idx-1:idx+2]\n    return dict_test\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i:test_tup[i] for i in range(len(test_tup))}\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(len(s)==1) : return True\n    return s[0]==s[1] and all_Characters_Same(s[1:])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)<1:\n        return False\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #print(s)\n    s_lst = list(s)\n    for i in range(len(s_lst)-1):\n        if s_lst[i] == s_lst[i+1]:\n            return True\n    return False\nprint(all_Characters_Same('aaaa'))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            count = 0\n        else:\n            count+=1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2 : return True\n    elif len(s) == 2 :\n        return s[0] == s[1]\n    else :\n        return all_Characters_Same(s[1:])\n        \n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #if not s :\n    #    return False\n    \n    #chars = list(s)\n    #for i in range(len(chars)) :\n    #    if chars[i]!= chars[i+1] :\n    #        return False\n    \n    #return True\n    return s.count(s[0]) == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    result = \"Same\" if s.count(\"\") == 0 else \"Not same\"\n    return result\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    if (len(s) > 2):\n        for i in range(len(s)-1):\n            if (s[i] == s[i+1]):\n                count = count + 1\n    else:\n        count = 0\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n    else :\n        return s[0] == s[1]\n    \n    \ndef is_palindrome(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    elif len(s) == 1 :\n        return True\n    else :\n        return s[0] == s[-1] and is_palindrome(s[1:-1])\n    \n    \ndef is_palindrome_rec(s, i, j) :\n    if i >= j :\n        return True\n    elif s[i] == s[j] :\n        return is_palindrome_rec(s, i+1, j-1)\n    else :\n        return False\n    \n    \ndef is_palindrome_rec_better(s, i, j) :\n    while i < j :\n        if s[i]!= s[j] :\n            return False\n        i += 1\n        j -= 1\n    return True\n    \n    \ndef is_palindrome_by_iterative(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        i = 0\n        j = len(s)-1\n        while i < j :\n            if s[i]!= s[j] :\n                return False\n            i += 1\n            j -= 1\n        return True\n    \n    \ndef is_palindrome_by_reverse_checking(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        checker = 0\n        for i in s :\n            checker += 1\n        if checker%2!= 0 :\n            return False\n        else :\n            return is_palindrome_by_reverse_checking(s[:-1])\n    \n    \ndef is_palindrome_by_reverse_checking_better(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        checker = 0\n        for i in range(0, len(s)):\n            if i >= len(s)//2 :\n                return True\n            elif s[i]!= s[-i-1] :\n                return False\n            else :\n                checker += 1\n        return True\n    \n    \ndef is_palindrome_by_reverse_checking_better_2(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        checker = 0\n        for i in range(0, len(s)//2) :\n            if s[i]!= s[-i-1] :\n                return False\n            else :\n                checker += 1\n        return True\n    \n    \ndef is_palindrome_by_reverse_checking_better_3(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        checker = 0\n        for i in range(0, len(s)//2) :\n            if s[i]!= s[-i-1] :\n                return False\n            else :\n                checker += 1\n        return True\n    \n    \ndef reverse(s) :\n    '''\n    Write a python function to reverse the order of the words in a given string.\n    Note: Input String can be empty.\n    '''\n    if s == \"\" :\n        return \"\"\n    if s == \" \" :\n        return s\n    else :\n        list_s = s.split(\" \")\n        return \" \".join(list_s[::-1])\n    \n    \ndef reverse_rec(s, i, j) :\n    if i >= j :\n        return \"\"\n    else :\n        return reverse_rec(s, i+1, j-1) + s[i]\n    \n    \ndef is_palindrome_by_dynamic_programming(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        l = len(s)\n        dp = [[False for i in range(l)] for j in range(l)]\n        for i in range(l) :\n            dp[i][i] = True\n        for i in range(l-1, -1, -1) :\n            for j in range(i+1, l) :\n                if s[i] == s[j] :\n                    if j-i == 1 or dp[i+1][j-1] :\n                        dp[i][j] = True\n        return dp[0][len(s)-1]\n    \n    \ndef is_palindrome_by_dynamic_programming_2(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        l = len(s)\n        dp = [[False for i in range(l)] for j in range(l)]\n        for i in range(l) :\n            dp[i][i] = True\n        for i in range(l-1, -1, -1) :\n            for j in range(i+1, l) :\n                if s[i] == s[j] :\n                    if j-i == 1 or dp[i+1][j-1] :\n                        dp[i][j] = True\n        return dp[0][len(s)-1]\n    \n    \ndef is_palindrome_by_dynamic_programming_3(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same\n    backwards as forwards, e.g., madam, racecar, or mom\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        l = len(s)\n        dp = [[False for i in range(l)] for j in range(l)]\n        for i in range(l) :\n            dp[i][i] = True\n        for i in range(l-1, -1, -1) :\n            for j in range(i+1, l) :\n                if s[i] == s[j] :\n                    if j-i == 1 or dp[i+1][j-1] :\n                        dp[i][j] = True\n        return dp[0][len(s)-1]\n    \n    \ndef is_palindrome"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2)/6\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    return (side**2)/6\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s=side\n    return(s*(s-1)*(s-2)*(s-3))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_squared = side**2\n    hypotenuse = side**(1/2)\n    area = side_squared*hypotenuse\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*side**2/4\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    c = (a**2 - 1)**0.5\n    return 1/3*a**2*c\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(\"Tetrahedron\")\n    area = side * side * math.sqrt(3) / 4\n    print(\"The area of a tetrahedron is: \" + str(area))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #side = float(input('Enter side of the tetrahedron: '))\n    return(0.5 * side * side * side)\n    \ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return(math.pi * radius * radius)\n    \ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s = (a + b + c) / 2\n    return(math.sqrt(s*(s-a)*(s-b)*(s-c)))\n    \ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return (a * b)\n    \ndef area_circle_circumference(radius):\n    '''\n    Write a function to calculate the area of a circle using its circumference.\n    '''\n    return(math.pi * radius * radius)\n    \ndef area_circle_circumference_2(radius):\n    '''\n    Write a function to calculate the area of a circle using its circumference.\n    '''\n    return(math.pi * radius * radius)\n    \ndef area_circle_circumference_3(radius):\n    '''\n    Write a function to calculate the area of a circle using its circumference.\n    '''\n    return(math.pi * radius * radius)\n    \ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return(side * side)\n    \ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return(a * b)\n    \ndef area_square_circumference(side):\n    '''\n    Write a function to calculate the area of a square using its circumference.\n    '''\n    return(side * side)\n    \ndef area_square_circumference_2(side):\n    '''\n    Write a function to calculate the area of a square using its circumference.\n    '''\n    return(side * side)\n    \ndef area_square_circumference_3(side):\n    '''\n    Write a function to calculate the area of a square using its circumference.\n    '''\n    return(side * side)\n    \ndef area_rectangle_circumference(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_2(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_3(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_4(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_square_circumference_4(side):\n    '''\n    Write a function to calculate the area of a square using its circumference.\n    '''\n    return(side * side)\n    \ndef area_square_circumference_4_2(side):\n    '''\n    Write a function to calculate the area of a square using its circumference.\n    '''\n    return(side * side)\n    \ndef area_square_circumference_4_3(side):\n    '''\n    Write a function to calculate the area of a square using its circumference.\n    '''\n    return(side * side)\n    \ndef area_square_circumference_4_4(side):\n    '''\n    Write a function to calculate the area of a square using its circumference.\n    '''\n    return(side * side)\n    \ndef area_rectangle_circumference_4_2(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_4_3(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_4_4(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_4_5(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_4_6(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_4_7(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_4_8(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_5(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_5_2(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_5_3(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_5_4(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_5_5(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_5_6(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_5_7(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_5_8(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_6(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_6_2(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_6_3(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_6_4(a, b):\n    '''\n    Write a function to calculate the area of a rectangle using its circumference.\n    '''\n    return(a * b)\n    \ndef area_rectangle_circumference_6_5(a, b):\n    '''\n    Write a function to calculate the are"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(side**2)/4)\ndef area_parallelepiped(a,b,c):\n    '''\n    Write a function to caluclate the area of a parallelepiped.\n    '''\n    return math.sqrt(a**2+b**2+c**2)\ndef area_sphere(r):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side**3\ndef volume_tetrahedron(s1,s2,s3,s4):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (s1*s2*s3)/6\ndef volume_triangle(s1,s2,s3):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return s1*s2*s3/2\ndef volume_parallelepiped(l1,l2,l3):\n    '''\n    Write a function to caluclate the volume of a parallelepiped.\n    '''\n    return l1*l2*l3\ndef volume_cube(s):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return s**3\ndef volume_cone(r1,r2,h):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (math.pi*r1*r2)*(h**2)/3\ndef volume_cone_cylindrical(r1,r2,h):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordnates\n    '''\n    return (math.pi*r1*r2)*((h**2)/3)\ndef volume_cone_spherical(r1,r2,h):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates.\n    '''\n    return (2*math.pi*r1*r2)*((h**2)/3)\ndef volume_sphere(s):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*s**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef volume_pyramid(l,h):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return l*h\ndef volume_cone_cylindrical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordinates in pyramid\n    '''\n    return (math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_spherical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates in pyramid.\n    '''\n    return (2*math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_cylindrical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordinates in pyramid.\n    '''\n    return (math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_spherical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates in pyramid.\n    '''\n    return (2*math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_cylindrical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordinates in pyramid.\n    '''\n    return (math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_spherical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates in pyramid.\n    '''\n    return (2*math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_cylindrical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordinates in pyramid.\n    '''\n    return (math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_spherical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates in pyramid.\n    '''\n    return (2*math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_cylindrical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordinates in pyramid.\n    '''\n    return (math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_spherical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates in pyramid.\n    '''\n    return (2*math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_cylindrical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordinates in pyramid.\n    '''\n    return (math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_spherical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates in pyramid.\n    '''\n    return (2*math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_cylindrical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordinates in pyramid.\n    '''\n    return (math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_spherical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates in pyramid.\n    '''\n    return (2*math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_cylindrical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in cylindrical coordinates in pyramid.\n    '''\n    return (math.pi*r1*r2)*((h1**2)/3)+((h2**2)/3)\ndef volume_cone_spherical_pyramid(r1,r2,h1,h2):\n    '''\n    Write a function to caluclate the volume of a cone in spherical coordinates in pyramid.\n    '''\n    return "
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (0.25 * side**2)\n    return(area)\n    \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0, m):\n        list.append(list.pop(0))\n    print(list)\nrotate_right([1,2,3,4,5], 4)\nrotate_right([1,2,3,4,5], 1)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = list\n    count = 0\n    while count < m:\n        current = l.pop(-1)\n        l.insert(0, current)\n        count += 1\n    return l\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < 1:\n        return list\n    elif len(list) < m:\n        return list\n    else:\n        k = list.pop()\n        list.insert(0, k)\n        return list\n        \ndef test_rotate_right():\n    print(\"Testing rotate_right()...\", end=\"\")\n    assert(rotate_right([1, 2, 3, 4, 5, 6, 7, 8], 2) == [3, 4, 5, 6, 7, 8, 1, 2])\n    assert(rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2])\n    assert(rotate_right([1], 1) == [1])\n    assert(rotate_right([1], 2) == [1])\n    assert(rotate_right([], 1) == [])\n    print(\"Passed!\")\n    \ndef binary_search(list, elem):\n    \"\"\"\n    Write a function to search for an element (possibly inside a list) in a sorted list in O(log n) time.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    mid = len(list)//2\n    if list[mid] == elem:\n        return True\n    elif list[mid] > elem:\n        return binary_search(list[:mid], elem)\n    elif list[mid] < elem:\n        return binary_search(list[mid+1:], elem)\n    \ndef test_binary_search():\n    print(\"Testing binary_search()...\", end=\"\")\n    assert(binary_search([1, 2, 3, 4, 5, 6], 2) == True)\n    assert(binary_search([1, 2, 3, 4, 5, 6], 1) == True)\n    assert(binary_search([1, 2, 3, 4, 5, 6], 3) == True)\n    assert(binary_search([1, 2, 3, 4, 5, 6], 7) == False)\n    assert(binary_search([1, 2, 3, 4, 5, 6], 0) == False)\n    assert(binary_search([], 1) == False)\n    print(\"Passed!\")\n    \ndef check_sorted(list):\n    \"\"\"\n    Write a function to check whether a list is sorted or not.\n    \"\"\"\n    # for i in range(len(list)-1):\n    #     if list[i] > list[i+1]:\n    #         return False\n    # return True\n    # print(\"List {} is sorted!\".format(list))\n    # return True\n    # I would also like to be able to check whether a list is sorted or not, with O(n) time\n    if len(list) == 0:\n        return False\n    elif len(list) == 1:\n        return True\n    else:\n        first = list[0]\n        last = list[-1]\n        if first <= list[0] and last >= list[0]:\n            return check_sorted(list[1:])\n        else:\n            return False\n            \ndef test_check_sorted():\n    print(\"Testing check_sorted()...\", end=\"\")\n    assert(check_sorted([1, 2, 3, 4, 5, 6]) == True)\n    assert(check_sorted([1, 2, 3, 4, 5, 6, 7, 8]) == False)\n    assert(check_sorted([]) == True)\n    assert(check_sorted([1]) == True)\n    assert(check_sorted([3, 5, 6]) == True)\n    assert(check_sorted([3, 5, 6, 7, 8]) == False)\n    assert(check_sorted([3, 5, 6, 7, 8, 9, 10]) == False)\n    assert(check_sorted([3, 5, 6, 7, 8, 9, 10, 11]) == False)\n    assert(check_sorted([3, 5, 6, 7, 8, 9, 10, 11, 12]) == True)\n    print(\"Passed!\")\n    \ndef is_palindrome(string):\n    \"\"\"\n    Write a function to check if a string is a palindrome.\n    \"\"\"\n    def to_char(string):\n        \"\"\"\n        Convert string to a list of its chars.\n        \"\"\"\n        if len(string) == 0:\n            return None\n        else:\n            return list(string)\n        \n    def to_char(list, start, end):\n        \"\"\"\n        Convert a range of chars to a string.\n        \"\"\"\n        if start >= end:\n            return ''\n        else:\n            return to_char(list, start+1, end) + list[start]\n    \n    string = to_char(string)\n    if string == None:\n        return False\n    else:\n        return string == to_char(string, 0, len(string)-1)\n    \ndef test_is_palindrome():\n    print(\"Testing is_palindrome()...\", end=\"\")\n    assert(is_palindrome('aba') == True)\n    assert(is_palindrome('aba') == False)\n    assert(is_palindrome('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.insert(0,list.pop())\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Code here\n    for i in range(m):\n        j = len(list)-1\n        temp = list[j]\n        while j>=0:\n            list[j] = list[j-1]\n            j -= 1\n        list[0] = temp\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n    \n    # time complexity -> O(n)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is not None:\n        for i in test_tup:\n            if i is None:\n                return True\n    else:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup:\n        for i in test_tup:\n            if i is None:\n                return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(tup for tup in test_tup if tup == None)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return not(None in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup.count(None) == 0\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(value == None for value in test_tup)\n    "
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(value is not None for value in test_tup)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible(startnum, endnum):\n        \n        def divisible_by(num, divisor):\n            return all(num % i == 0 for i in range(1, 11))\n        return sum(list(map(lambda x: divisible_by(x, startnum), range(startnum, endnum))))\n    return divisible(startnum, endnum)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all([x % int(i) == 0 for i in str(x)]),\n                       range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        if all(i % int(j) == 0 for j in str(i)):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for i in range(startnum, endnum + 1):\n        if all(i % digit == 0 for digit in str(i)):\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    x = list(range(startnum, endnum))\n    for i in x:\n        if i % 2!= 0 and i % 5!= 0:\n            yield i\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        if all(i % j == 0 for j in range(2, 10)):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for num in range(startnum, endnum + 1):\n        n = str(num)\n        if num == int(n[0]):\n            numbers.append(num)\n        elif num == int(n[1]):\n            numbers.append(num)\n        elif num == int(n[2]):\n            numbers.append(num)\n        elif num == int(n[3]):\n            numbers.append(num)\n        elif num == int(n[4]):\n            numbers.append(num)\n        elif num == int(n[5]):\n            numbers.append(num)\n        elif num == int(n[6]):\n            numbers.append(num)\n        elif num == int(n[7]):\n            numbers.append(num)\n        elif num == int(n[8]):\n            numbers.append(num)\n        elif num == int(n[9]):\n            numbers.append(num)\n    return numbers\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    num_set = set()\n    for i in range(startnum, endnum):\n        num_set.add(i)\n        for j in str(i):\n            num_set.add(i % int(j))\n    return num_set\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    d = list(range(startnum, endnum + 1))\n    for i in d:\n        s = str(i)\n        if s.count(s[0]) == s.count(s[-1]) and s.count(s[0]) == len(s):\n            print(i)\n        else:\n            pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(x%i==0 for i in range(2,10)), range(startnum, endnum))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return round(math.pi*r*r*a/360,2)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) / (2*math.sin(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = math.radians(a)\n    if a > math.pi:\n        return None\n    area = (math.pi * r**2) * ((r * math.sin(a/2))/2)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    else:\n        return math.pi*(r*r)*math.sin(a/360*2*math.pi)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or r < 0:\n        return None\n    if a > 360 or r > 1:\n        return None\n    a = abs(a)\n    r = abs(r)\n    if a <= 90 and r <= 1:\n        return math.pi*r*r\n    if a >= 90 and r <= 1:\n        return math.pi*r*r*2\n    if a <= 90 and r >= 1:\n        return math.pi*r*r*(1+math.tan(math.pi/180*a))\n    if a >= 90 and r >= 1:\n        return math.pi*r*r*(1+math.tan(math.pi/180*(90-a)))/2\ndef sector_perimeter(r,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or r < 0:\n        return None\n    if a > 360 or r > 1:\n        return None\n    a = abs(a)\n    r = abs(r)\n    if a <= 90 and r <= 1:\n        return 2*r\n    if a >= 90 and r <= 1:\n        return 2*r*math.tan(math.pi/180*(90-a))\n    if a <= 90 and r >= 1:\n        return 2*r*math.cos(math.pi/180*a)+r\n    if a >= 90 and r >= 1:\n        return 2*r*math.cos(math.pi/180*(90-a))\ndef cylindrical_sector_area(r,h):\n    '''\n    Write a function to find area of a cylindrical sector. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r < 0 or h < 0:\n        return None\n    if r > h or h > 1:\n        return None\n    if r <= 1:\n        return h*math.pi*(r*r)\n    if r >= 1 and h <= 1:\n        return h*math.pi*((2*r-1)**2)\ndef cylindrical_sector_perimeter(r,h):\n    '''\n    Write a function to find perimeter of a cylindrical sector. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r < 0 or h < 0:\n        return None\n    if r > h or h > 1:\n        return None\n    if r <= 1:\n        return r*2*math.pi*(r)\n    if r >= 1 and h <= 1:\n        return (2*r-1)*2*math.pi*(r)\ndef cone_area(r,a):\n    '''\n    Write a function to find area of a cone. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or r < 0:\n        return None\n    if a > 360 or r > 1:\n        return None\n    a = abs(a)\n    r = abs(r)\n    if r <= 1:\n        return math.pi*r*r*(1-math.cos(math.pi/180*a))\n    if r >= 1:\n        return math.pi*r*r*(1-math.cos(math.pi/180*(180-a)))\ndef cone_perimeter(r,a):\n    '''\n    Write a function to find perimeter of a cone. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or r < 0:\n        return None\n    if a > 360 or r > 1:\n        return None\n    a = abs(a)\n    r = abs(r)\n    if r <= 1:\n        return (math.pi*r*r)*2\n    if r >= 1:\n        return (math.pi*r*r)*2*math.sin(math.pi/180*(180-a))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #print(\"Checking input\")\n    if a<0:\n        a = abs(a)\n        #print(a)\n        #print(math.pi)\n        #print(math.cos(a))\n        #print(math.sin(a))\n        area = math.pi * r**2 * math.sin(a)\n        #print(area)\n        #print(math.pi)\n        return area\n    else:\n        #print(a)\n        area = math.pi * r**2\n        return area\n    #print(area)\ndef close_angle(a1,a2):\n    '''\n    Write a function to find the difference in angle between two angles. Function should return None if the angles are equal.\n    '''\n    if a1 == a2:\n        #print(a1)\n        return None\n    else:\n        diff = abs(a2 - a1)\n        #print(diff)\n        return diff\n    #print(diff)\ndef number_factor(number):\n    '''\n    Write a function to find the smallest factor of a number.\n    '''\n    factor = 1\n    while number % factor!= 0:\n        factor += 1\n    return factor\n    #print(factor)\ndef largest_factor(number):\n    '''\n    Write a function to find the largest factor of a number.\n    '''\n    largest_factor = 1\n    while number % largest_factor!= 0:\n        largest_factor += 1\n    return largest_factor\n    #print(largest_factor)\ndef sum_divisors(number):\n    '''\n    Write a function to sum the divisors of a number.\n    '''\n    divisors = 0\n    for i in range(1,number):\n        if number % i == 0:\n            divisors += i\n    return divisors\n    #print(divisors)\ndef common_factor(a,b):\n    '''\n    Write a function to find the common factor of two numbers.\n    '''\n    if a == 0:\n        a = 1\n    if b == 0:\n        b = 1\n    common_factor = 1\n    while a % common_factor == 0 and b % common_factor == 0:\n        common_factor += 1\n    return common_factor\n    #print(common_factor)\ndef distance(p1,p2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    #print(p1)\n    #print(p2)\n    dist = math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n    #print(dist)\n    return dist\n    #print(dist)\ndef perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    #print(a)\n    #print(b)\n    #print(c)\n    perimeter = math.sqrt((a+b+c)*(a+b-c)*(a-b+c)*(a-b-c))\n    #print(perimeter)\n    return perimeter\n    #print(perimeter)\ndef hypotenuse(a,b):\n    '''\n    Write a function to find the hypotenuse of a right triangle.\n    '''\n    hyp = math.sqrt(a**2+b**2)\n    #print(hyp)\n    return hyp\n    #print(hyp)\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    area = (a+b+c)/2\n    #print(area)\n    return area\n    #print(area)\ndef angle(a,b,c):\n    '''\n    Write a function to find the angle of a right triangle.\n    '''\n    #print(a)\n    #print(b)\n    #print(c)\n    angle = math.degrees(math.acos((a**2+b**2-c**2)/(2*a*b)))\n    #print(angle)\n    return angle\n    #print(angle)\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    #print(a)\n    volume = a**3\n    #print(volume)\n    return volume\n    #print(volume)\ndef square_of_volume(a):\n    '''\n    Write a function to find the square of the volume of a cube.\n    '''\n    #print(a)\n    square = a**2\n    #print(square)\n    return square\n    #print(square)\ndef area_of_pyramid(height,base):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    area = base**2 * math.tan(math.pi/height)\n    #print(area)\n    return area\n    #print(area)\ndef area_of_circle(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi * radius**2\n    #print(area)\n    return area\n    #print(area)\ndef circumference_of_circle(radius):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * radius\n    #print(circumference)\n    return circumference\n    #print(circumference)\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = a*b\n    #print(area)\n    return area\n    #print(area)\ndef triangle_angle(a,b,c):\n    '''\n    Write a function to find the triangle angle.\n    '''\n    #print(a)\n    #print(b)\n    #print(c)\n    angle = math.degrees(math.acos((a**2+b**2-c**2)/(2*a*b)))\n    #print(angle)\n    return angle\n    #print(angle)\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = a**2\n    #print(area)\n    return area\n    #print(area)\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a * b\n    #print(area)\n    return area\n    #print(area)\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    #print(a)\n    #print(b)\n    #print(c)\n    area = ((a+b+c)/2)*(a**2+b**2)\n    #print(area)\n    return area\n    #print(area)\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = a*b\n    #print(area)\n    return area\n    #print(area)\ndef area_of_circle(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi * radius**2\n    #print(area)\n    return area\n    #print(area)\ndef circumference_of_circle(radius):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * radius\n    #print(circumference)\n    return circumference\n    #print(circumference)\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = a**2\n    #print(area)\n    return area\n    #print(area)\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a * b\n    #print(area)\n    return are"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return math.pi*a*r**2\n    "
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return math.pi*r**2*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a > 360):\n        return None\n    return r**2 * math.sin(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return (math.pi*r**2)*(a/180)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(x,y,z):\n        dp = [[[0]*(len(z)+1) for i in range(len(y)+1)] for j in range(len(x)+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    table = [[[0 for _ in range(len(Z)+1)] for _ in range(len(Y)+1)] for _ in range(len(X)+1)]\n    \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    return table[-1][-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    l = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n  \n    # Build the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0 : \n                    l[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    l[i][j][k] = l[i-1][j-1][k-1]+1\n                else: \n                    l[i][j][k] = max(l[i-1][j][k], l[i][j-1][k], l[i][j][k-1]) \n  \n    return l[m][n][o] \n    \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    matrix = []\n    n = len(X) + 1\n    m = len(Y) + 1\n    o = len(Z) + 1\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(0)\n        matrix.append(row)\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            for k in range(1, o):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    matrix[i][j] = matrix[i-1][j-1] + 1\n                else:\n                    matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1], matrix[i-1][j-1])\n    return matrix[n-1][m-1]\n    \n    \ndef main():\n    print(lcs_of_three('ABCBDAB', 'BDCABA', 'BDCABA'))\n    print(lcs_of_three('ABCBDAB', 'BDCABA', 'AACBDA'))\n    print(lcs_of_three('ABCD', 'ABBCD', 'ABCBDAB'))\n    \nmain("
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n    \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1] with X[0..i-1] and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n                \n    '''Following steps build the actual dp \n    array in a bottom up fashion. Note, we don't \n    need to initialize the dp array elements.'''\n    x = y = z = 0\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]: \n                    L[i][j] = L[i-1][j-1]+1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1],L[i-1][j-1]) \n                    \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    table = [[[0] * (len(Z)+1) for _ in range(len(Y)+1)] for _ in range(len(X)+1)]\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    return table[-1][-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    L = [[None]*(p+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(p+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] or X[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j],L[i][j-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # base case \n    if len(X)==0 or len(Y)==0 or len(Z)==0: \n        return 0 \n    \n    # dp table \n    dp_table = [[0 for i in range(len(Y) + 1)] for j in range(len(X) + 1)] \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #print(str1)\n    str1 = str1.split(' ')\n    #print(str1)\n    for i in range(len(str1)):\n        if str1[i][0].isupper():\n            str1[i] =''+str1[i]\n    #print(str1)\n    str1 = ''.join(str1)\n    #print(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    str1=\" \".join([w.capitalize() for w in str1])\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('([a-zA-Z0-9])([A-Z])','\\g<1> \\g<2>',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return \" \".join(w.capitalize() for w in re.findall(r'\\w+',str1))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(\"(\\w)([A-Z][a-z]+)\", r\"\\1 \\2\", str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # return re.sub('([a-zA-Z])([A-Z])','\\g<1> \\g<2>',str1)\n    return re.sub(r'\\b([A-Z])\\b', r' \\1', str1).lower()\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('([A-Z])', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    x=str1.split()\n    y=[]\n    for i in range(0,len(x)):\n        if x[i].istitle():\n            y.append(x[i])\n            continue\n        else:\n            y.append(' '+x[i]+' ')\n    return y\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub('\\s+[a-zA-Z]\\w*', lambda x: x.group(0).upper(), str1)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def capital_words_spaces1(str1):\n        str1=str1.replace(\" \",\"\")\n        if str1.isupper():\n            return str1\n        else:\n            return str1[0].upper()+str1[1:]\n    return capital_words_spaces1(str1)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=int)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort_numeric(nums_str):\n        return sorted(nums_str,key=lambda x:float(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # nums_str = input('Enter a list of numbers: ')\n    # numbers = nums_str.split(',')\n    # numbers = sorted(numbers, key=int)\n    # print(numbers)\n    \n    # nums_str = input('Enter a list of numbers: ')\n    # numbers = nums_str.split(',')\n    # numbers = sorted(numbers)\n    # print(numbers)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = nums_str.split(' ')\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    nums = sorted(nums)\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # TODO: Write your code here\n    nums = []\n    for s in nums_str:\n        nums.append(s)\n    nums = sorted(nums)\n    print(nums)\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: (int(re.sub(\"\\D\", \"\", x)), x))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums_str = sorted(nums_str, key=lambda num: int(num))\n    return sorted_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = int)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in range(len(nums_str)):\n        nums.append(nums_str[i])\n    nums = sorted(nums, key = lambda x: float(x))\n    return nums\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_list == []:\n        test_list = test_tup\n    else:\n        test_list = test_list + test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i == 1:\n        return (arr[i] > arr[i-1])\n    else:\n        return (arr[i] > arr[i-1] and check_min_heap_helper(arr, i-1))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return True\n    if i >= len(arr) or arr[i] > arr[i+1]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # first we need to check if the array is not empty\n    if len(arr) == 0:\n        return True\n    \n    # if it is empty, then the array is not a min heap\n    if arr[0] > arr[i]:\n        return False\n    \n    # if the array has more than 1 element, then we need to check whether the next element is greater than root\n    if len(arr) > 1:\n        if arr[i] > arr[i+1]:\n            return False\n    \n    # now we need to continue checking upwards from the root\n    if i == (len(arr)-1):\n        return True\n    \n    if i == 0:\n        return True\n    \n    return check_min_heap_helper(arr, i-1) and check_min_heap_helper(arr, i+1)\n    \n    \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    if count == 0:\n        print(\"It is a Min Heap\")\n    else:\n        print(\"It is not a Min Heap\")\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (arr[i] < arr[2 * i + 1]) or (arr[i] < arr[2 * i + 2]):\n        return False\n    elif i > 0 and (arr[i] < arr[i-1]):\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i > len(arr) - 1:\n        return True\n    if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n        return False\n    if i > 0:\n        if arr[i] < arr[i // 2]:\n            return False\n    return check_min_heap_helper(arr, i // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    arr_len = len(arr)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n        return False\n    elif i >= 1 and arr[i] < arr[2 * i + 1]:\n        return check_min_heap_helper(arr, 2 * i + 1)\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i*2)\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if(i<0 or i>=len(arr)):\n        return False\n    if(arr[0]<arr[i]):\n        return True\n    else:\n        return check_min_heap_helper(arr, i-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal = [0,1]\n    for i in range(2,n):\n        jacobsthal.append(sum(jacobsthal))\n    return jacobsthal[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    nums = []\n    m = 0\n    i = 1\n    while len(nums) < n:\n        if i == m + 1:\n            i = 0\n            m = i + 1\n        i += 1\n        nums.append(i)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    res = 1\n    i = 1\n    while(i <= n):\n        res = res + 1\n        i = i + 2\n    return res\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_num(n):\n        '''\n        Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n        '''\n        if n <= 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 2\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n * jacobsthal_num(n-1) + n - 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        raise ValueError(\"Number can't be zero or negative\")\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = [0]*100001\n    l[1] = 1\n    l[2] = 2\n    l[3] = 3\n    l[4] = 4\n    l[5] = 5\n    for i in range(6,100001):\n        l[i] = l[i-1] + l[i-5]\n    return l[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    for i in range(2,n+1):\n        a,b = b,a+b\n    return a\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # return int(pow((1+sqrt(5))/2, n))\n    return int(pow(1-pow(5, -n),.5))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    print(f'Input list - {test_list}')\n    result = []\n    for i in range(len(test_list)):\n        if K >= 1:\n            temp = test_list[i]\n            for j in range(K):\n                if j >= len(test_list):\n                    break\n                if temp[j] < test_list[j]:\n                    temp = test_list[j]\n                    result.append(temp)\n                    K -= 1\n                    if K == 0:\n                        break\n            else:\n                result.append(temp)\n                K -= 1\n                if K == 0:\n                    break\n    print(f'Output - {result}')\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # if len(test_list) < K:\n    #     print(\"Need more inputs\")\n    #     return -1\n    \n    # elif len(test_list) == K:\n    #     return test_list\n    \n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     print(new_list)\n    #     return min(new_list, key=lambda x: x[1])\n    \n    # 2\n    # a = []\n    # if K == 0 or len(test_list) == 0:\n    #     return -1\n    # else:\n    #     for i in test_list:\n    #         if a == []:\n    #             a.append(i)\n    #         else:\n    #             if a[0][1] > i[1]:\n    #                 a = [i]\n    #             else:\n    #                 a.append(i)\n    #     return a[0]\n    \n    # 3\n    # new_list = list(filter(lambda x: x[0] <= K, test_list))\n    # print(new_list)\n    # return min(new_list, key=lambda x: x[1])\n    \n    # 4\n    # new_list = []\n    # if K == 0 or len(test_list) == 0:\n    #     return new_list\n    # else:\n    #     for i in test_list:\n    #         if len(new_list) == K:\n    #             return new_list\n    #         if i[0] <= K:\n    #             new_list.append(i)\n    #         else:\n    #             return new_list\n    \n    # 5\n    # new_list = []\n    # for i in test_list:\n    #     if len(new_list) == K:\n    #         return new_list\n    #     if i[0] <= K:\n    #         new_list.append(i)\n    # return new_list\n    \n    # 6\n    # new_list = []\n    # if K == 0 or len(test_list) == 0:\n    #     return new_list\n    # else:\n    #     for i in test_list:\n    #         if i[0] <= K:\n    #             new_list.append(i)\n    #         else:\n    #             return new_list\n    \n    # 7\n    # if len(test_list) < K:\n    #     return test_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     return new_list\n    \n    # 8\n    # if len(test_list) < K:\n    #     return test_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     return new_list\n    \n    # 9\n    # if len(test_list) < K:\n    #     return test_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     if len(new_list) < K:\n    #         return new_list\n    #     else:\n    #         return new_list[:K]\n    \n    # 10\n    # if len(test_list) < K:\n    #     return test_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     if len(new_list) < K:\n    #         return new_list\n    #     else:\n    #         new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #         if len(new_list) < K:\n    #             return new_list\n    #         else:\n    #             return new_list[:K]\n    \n    # 11\n    # if len(test_list) < K:\n    #     return test_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     if len(new_list) < K:\n    #         return new_list\n    #     else:\n    #         new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #         if len(new_list) < K:\n    #             return new_list\n    #         else:\n    #             new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #             if len(new_list) < K:\n    #                 return new_list\n    #             else:\n    #                 return new_list[:K]\n    \n    # 12\n    # if len(test_list) < K:\n    #     return test_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     if len(new_list) < K:\n    #         return new_list\n    #     else:\n    #         new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #         if len(new_list) < K:\n    #             return new_list\n    #         else:\n    #             new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #             if len(new_list) < K:\n    #                 return new_list\n    #             else:\n    #                 new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #                 if len(new_list) < K:\n    #                     return new_list\n    #                 else:\n    #                     return new_list[:K]\n    \n    # 13\n    # if len(test_list) < K:\n    #     return test_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     if len(new_list) < K:\n    #         return new_list\n    #     else:\n    #         new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #         if len(new_list) < K:\n    #             return new_list\n    #         else:\n    #             new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #             if len(new_list) < K:\n    #                 return new_list\n    #             else:\n    #                 new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #                 if len(new_list) < K:\n    #                     return new_list\n    #                 else:\n    #                     return new_list[:K]\n    \n    # 14\n    # new_list = []\n    # if len(test_list) < K:\n    #     return new_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     return new_list\n    \n    # 15\n    # new_list = []\n    # if len(test_list) < K:\n    #     return new_list\n    # else:\n    #     new_list = list(filter(lambda x: x[0] <= K, test_list))\n    #     return new_list\n    \n    # 16\n    # new_list = []\n    # i"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #initialise minimum to be max\n    minimum = float('inf')\n    \n    #iterate through list\n    for item in test_list:\n        #check if min is now smaller than new minimum\n        if minimum > item[1]:\n            minimum = item[1]\n    #return k records\n    for item in test_list:\n        if item[1] == minimum:\n            #print(item)\n            return item[0]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_list = []\n    for k in range(0, K):\n        min_k_list.append(min(test_list, key=lambda x: x[k]))\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list)==0:\n        return 0\n    elif K>len(test_list):\n        return 0\n    elif test_list[0][0]==test_list[K-1][0]:\n        return min_k(test_list[1:],K-1)\n    else:\n        return test_list[0][0]+min_k(test_list[1:],K)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #code starts here\n    sorted_list = sorted(test_list, key=lambda x: x[2])\n    print(sorted_list)\n    min_k_count = 0\n    for item in sorted_list:\n        if min_k_count < K:\n            min_k_count += 1\n            min_k_record = item\n        else:\n            break\n    print(min_k_record)\n    #code ends here\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code goes here\n    # list of the k minimum value in the given list \n    min_k_value = []\n    \n    if len(test_list) == 0:\n        return None\n    \n    # finding the length of the list and k values\n    length = len(test_list)\n    K = int(K)\n    \n    # creating a list to put the tuples of the required length\n    # initially it is empty\n    list_tuple = []\n    \n    for i in range(length):\n        list_tuple.append(test_list[i])\n    \n    # sorting the list so that the length of the list is always greater than k\n    list_tuple.sort(key = lambda x: x[0])\n    \n    # creating a list to store the first k value of each tuple in the given list\n    for i in range(K):\n        min_k_value.append(list_tuple[i][1])\n    \n    return min_k_value\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = test_list\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i][0] > l[j][0] and l[i][1] > l[j][1]:\n                temp = l[i]\n                l[i] = l[j]\n                l[j] = temp\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key = lambda x: x[0]) # sort by the first element of the tuple\n    result_list = test_list[0:K]\n    return result_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    new_list = list(test_list)\n    new_list.sort()\n    for i in range(len(new_list)-K):\n        print(new_list[i])\n    return new_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Write your function here\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # try:\n    #     l1 = list(l1)\n    #     l2 = list(l2)\n    #     l3 = list(l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    if len(l1) == len(l2) and len(l2) == len(l3):\n        for i in range(len(l1)):\n            if l1[i] == l2[i] == l3[i]:\n                res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(0, len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    i = 0\n    while i < len(l1):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n        i += 1\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_index = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_index.append(i)\n    common_index = list(set(common_index))\n    return common_index\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    lst = []\n    for i in range(len(l1)):\n        lst.append(l1[i])\n        lst.append(l2[i])\n        lst.append(l3[i])\n    lst = list(set(lst))\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(0, len(l1)):\n        for j in range(0, len(l2)):\n            for k in range(0, len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k] and l1[i] not in common_list:\n                    common_list.append(l1[i])\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    idx1, idx2, idx3 = map(set, zip(*l1))\n    idx1 = list(idx1)\n    idx2 = list(idx2)\n    idx3 = list(idx3)\n    idx1.sort()\n    idx2.sort()\n    idx3.sort()\n    out = []\n    for i in range(len(idx1)):\n        if idx1[i] in idx2 and idx2[i] in idx3:\n            out.append(idx1[i])\n    return out\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    assert(len(numbers) >= 1)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    if n < 2:\n        return -1\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # your code here\n    smallest_value = numbers[0]\n    index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] <= smallest_value:\n            smallest_value = numbers[i]\n            index = i\n    if index == len(numbers) - 1:\n        return None\n    else:\n        return numbers[index + 1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = list(numbers)\n    # Find the sorted numbers and return the 2nd smallest number\n    sorted_numbers = sorted(numbers)\n    second_smallest = sorted_numbers[1]\n    return second_smallest\n    \nprint(second_smallest([-5, -3, -1, 2, 5, 10, 100, 5]))\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # your code here\n    min_number = min(numbers)\n    return (sorted(numbers))[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers,key=lambda x: numbers.index(x))\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match_obj = re.search(r'a(b)+', text)\n    if match_obj:\n        print(match_obj)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search(r'ab\\+*', text)\n    if m:\n        print(m)\n    else:\n        print(f\"Text {text} does not match the expression.\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"a(?=b)*\")\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^(a(b+)*)*$\",text)\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^a(b*)*$\",text)\ndef text_match_zero_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^(a(b+)*)$\",text)\ndef text_match_one_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^a(b*)*$\",text)\ndef text_match_zero_one_or_more_or_eol(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^(a(b+)*)$\",text)\ndef text_match_one_zero_or_more_or_eol(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^a(b*)*$\",text)\ndef text_match_zero_one_or_more_or_eol_or_eof(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline or EOF. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^(a(b+)*)$\",text)\ndef text_match_one_zero_or_more_or_eol_or_eof(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline or EOF. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^a(b*)*$\",text)\ndef text_match_zero_one_or_more_or_eol_or_eof_or_eof_or_eof(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline or EOF or EOF or EOF. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^(a(b+)*)$\",text)\ndef text_match_one_zero_or_more_or_eol_or_eof_or_eof_or_eof(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline or EOF or EOF or EOF or EOF. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^a(b*)*$\",text)\ndef text_match_zero_one_or_more_or_eol_or_eof_or_eof_or_eof_or_eof_or_eof(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline or EOF or EOF or EOF or EOF or EOF or EOF or EOF. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^(a(b+)*)$\",text)\ndef text_match_one_zero_or_more_or_eol_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline or EOF or EOF or EOF or EOF or EOF or EOF or EOF or EOF. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^a(b*)*$\",text)\ndef text_match_zero_one_or_more_or_eol_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's, and a newline or EOF or EOF or EOF or EOF or EOF or EOF or EOF or EOF or EOF or EOF or EOF or EOF or EOF or EOF. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    #\n    #  returns True if the input is an \u201caba\u201d, otherwise returns False.\n    #\n    return re.match(r\"^(a(b+)*)$\",text)\ndef text_match_one_zero_or_more_or_eol_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof_or_eof(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more '"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    print(\" \")\n    print(\"Match zero or one\")\n    print(\" \")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.match(r'a[ab]+b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r\"ab+\", text)\n    if match:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p1 = re.findall(r'a[b]*', text)\n    return p1\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(\"a+b\",text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = re.search(r'a[ab]*b*', text)\n    print(x.group())\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort(key=len,reverse=True)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    from itertools import combinations\n    # another solution\n    #count = 0\n    #for i in range(len(test_list)):\n        #for j in range(i+1, len(test_list)):\n            #if (test_list[i][::-1] == test_list[j][::-1]):\n                #count += 1\n    #return count\n    \n    # one-liner\n    return sum(1 for i, j in combinations(test_list, 2) if i[::-1] == j[::-1])\n    \n    # one-liner using map\n    #return sum(1 for i, j in map(lambda x: x[::-1], test_list) if i == j)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = sorted(test_list)\n    start = 0\n    end = len(test_list) - 1\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for s in test_list:\n        test = s[::-1]\n        if test in test_list:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Approach #1 (Brute Force)\n    '''\n    For each string, reverse it, count the total number of characters that are the same after the reverse. Then multiply the total\n    number of characters by 2.\n    '''\n    total_pairs = 0\n    for i in range(len(test_list)):\n        temp_list = test_list[i]\n        for j in range(len(temp_list)//2):\n            if temp_list[j] == temp_list[-j-1]:\n                total_pairs += 1\n    return total_pairs * 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # this approach is a very efficient solution, but not so fast\n    # or a good solution either way.\n    # to come back later and think about this\n    # a better solution would be to use the count_reverse_pairs_v1 function\n    # in the cracking section of the problem description.\n    # using a 2 pointer approach, going from end to start\n    # and if the characters are the same, increment the count\n    # if they are not, swap the characters\n    # for a given pair, the number of swaps (i.e., the count) is 2*i + 1\n    # so we can simply count all of the swap's and then subtract the \n    # number of forward moves.\n    # it also means that if we ever swap the same characters, then we can \n    # count them as a single swap\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #return len(test_list) - list(combinations(test_list, 2))\n    return len(test_list) - len(set(combinations(test_list, 2)))\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #initializing two indexes\n    i = 0\n    j = len(test_list) - 1\n    res = 0\n    \n    #loop to reverse the list till second index\n    while i < j:\n        #checking if there is a reverse pair\n        if test_list[i] == test_list[j]:\n            res += 1\n            i += 1\n            j -= 1\n        else:\n            #comparing the current index and next index\n            if test_list[i] < test_list[j]:\n                i += 1\n            else:\n                j -= 1\n    return res\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    test_list = sorted(test_list, key=lambda x: x[::-1])\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1][::-1]:\n            reverse_pairs += 1\n    print('reverse_pairs', reverse_pairs)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # logic: return count of reverse pairs of words\n    counter = 0\n    for i in range(len(test_list)):\n        # print(test_list)\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                counter += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    dic = {}\n    for i in list1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(i):list1.count(i) for i in set(list1)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    def count(list1):\n        list1 = tuple(list1)\n        dict_list = {}\n        for l in list1:\n            dict_list[l] = list1.count(l)\n        return dict_list\n    \n    # Solution from codewars\n    def unique_sublists_1(lst):\n        d = collections.defaultdict(int)\n        for elem in lst:\n            d[tuple(elem)] += 1\n        return dict(d)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_lists = {}\n    for i in range(len(list1)):\n        if list1[i] not in unique_lists:\n            unique_lists[list1[i]] = 1\n        else:\n            unique_lists[list1[i]] += 1\n    return unique_lists\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res={}\n    for i in range(len(list1)):\n        if list1[i] not in res.keys():\n            res[list1[i]] = 1\n        else:\n            res[list1[i]] = res[list1[i]] + 1\n    return res\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[tuple(list1[i])] = list1.count(list1[i])\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict(Counter(tuple(list1)))\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dic = {}\n    for i in list1:\n        unique_dic[tuple(i)] = list1.count(i)\n    return(unique_dic)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    unique_list = {}\n    for list_item in list1:\n        if list_item in unique_list:\n            unique_list[list_item] = unique_list[list_item] + 1\n        else:\n            unique_list[list_item] = 1\n    return unique_list\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    my_dict = {}\n    my_list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            my_list.append(list1[i][j])\n    for k in range(0,len(my_list)):\n        if my_list.count(my_list[k])>1:\n            my_dict[tuple(my_list[k])] = my_list.count(my_list[k])\n    return my_dict\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        num = num.replace(\".\", \"\").replace(\"-\", \"\")\n        return num.replace(\"-\", \"\").replace(\".\", \"\").isnumeric() and \".\" not in num\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num, str) and num.find('.') == -1 and num.find('e') == -1 and num.find('E') == -1 and num.find('e') == -1\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    strnum=str(num)\n    strnum = strnum.split('.')\n    if len(strnum)==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] in {'+', '-'}:\n        num = num[1:]\n    for i, char in enumerate(num[::-1]):\n        if char not in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}:\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except:\n        return False\n    else:\n        return True\n    \nprint(is_decimal('1'))\nprint(is_decimal('1.1'))\nprint(is_decimal('abc'))\nprint(is_decimal('10.000'))\nprint(is_decimal('-1.0001'))\nprint(is_decimal('10.001'))\nprint(is_decimal('10.000'))\nprint(is_decimal('1.0001'))\nprint(is_decimal('-1'))\nprint(is_decimal('-1.0'))\nprint(is_decimal('-1.0.0'))\nprint(is_decimal('-1.0.0.0'))\nprint(is_decimal('-1.0.0.0.0.0'))\nprint(is_decimal('-1.0.0.0.0.0.0.0.0'))\nprint(is_decimal('-1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0."
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    isDecimal = True\n    try:\n        if \".\" in num:\n            try:\n                num = float(num)\n            except ValueError:\n                isDecimal = False\n        else:\n            num = int(num)\n    except ValueError:\n        isDecimal = False\n    return isDecimal\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if str(num) == str(round(float(num), 2)) else False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Complete the is_decimal function below\n    if '.' not in num:\n        return False\n    if num[-1] == '.':\n        num = num[:-1]\n    for i in range(len(num)):\n        if num[i] == '.':\n            continue\n        if not (num[i].isnumeric() or i == len(num) - 1):\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).count('.') <= 1 and str(num).count('e') <= 1 and 'e-' in str(num)\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    count = 1\n    for i in range(1,len(arr)):\n        if(arr[i] == arr[i-1]):\n            count += 1\n            if(count == 1):\n                return arr[i]\n            else:\n                return -1\n        else:\n            count = 1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    else:\n        temp = {}\n        for i in range(0, n):\n            if arr[i] in temp:\n                return False\n            else:\n                temp[arr[i]] = 1\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d={}\n    for i in arr:\n        if i in d.keys():\n            return False\n        else:\n            d[i]=True\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen_set = set()\n    for num in arr:\n        if num in seen_set:\n            return False\n        seen_set.add(num)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        else:\n            seen.add(num)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if arr.count(arr[0])==n:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #create an empty set\n    set_of_ele = set()\n    #iterate through the array and create a set of element\n    for ele in arr:\n        set_of_ele.add(ele)\n    #check if the set is empty\n    if(len(set_of_ele) == 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr.count(arr[i]) > 1:\n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for item in arr:\n        if item not in seen:\n            seen.add(item)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    pass\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30_list = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum3 in month_30_list:\n        return 'No. of days in this month are 30.'\n    else:\n        return 'No. of days in this month are 28.'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year%4 == 0) and (year%100!= 0) or (year%400 == 0):\n            month_30 = 29\n        else:\n            month_30 = 28\n    else:\n        month_30 = 30\n    if monthnum3 >= 1 and monthnum3 <= 3:\n        month_30 = 30\n    elif monthnum3 >= 4 and monthnum3 <= 6:\n        month_30 = 31\n    elif monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9:\n        month_30 = 30\n    elif monthnum3 == 10 or monthnum3 == 11:\n        month_30 = 31\n    elif monthnum3 == 12:\n        month_30 = 30\n    return month_30\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 0 or monthnum3 > 12:\n        return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        if 31%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 2:\n        if 28%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 3:\n        if 31%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 4:\n        if 30%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 5:\n        if 31%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 6:\n        if 30%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 7:\n        if 31%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 8:\n        if 31%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 9:\n        if 30%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 10:\n        if 31%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 11:\n        if 30%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    elif monthnum3 == 12:\n        if 31%4 == 0:\n            return \"Leap year\"\n        else:\n            return \"Not leap year\"\n    else:\n        return \"Invalid number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 31:\n        print(\"It is an Leap Year\")\n    else:\n        print(\"It is not a Leap Year\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 3:\n        return True\n    elif monthnum3 < 6:\n        return False\n    elif monthnum3 < 9:\n        return False\n    elif monthnum3 < 12:\n        return True\n    else:\n        return False\n    \ncheck_monthnumber_number(10)\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for i in range(1,13):\n        if monthnum3 == 30:\n            print(f'Yes, month {i} has 30 days')\n        elif monthnum3 == 31:\n            print(f'Yes, month {i} has 31 days')\n        elif monthnum3 == 32:\n            print(f'Yes, month {i} has 32 days')\n        elif monthnum3 == 33:\n            print(f'Yes, month {i} has 33 days')\n        elif monthnum3 == 34:\n            print(f'Yes, month {i} has 34 days')\n        elif monthnum3 == 35:\n            print(f'Yes, month {i} has 35 days')\n        elif monthnum3 == 36:\n            print(f'Yes, month {i} has 36 days')\n        elif monthnum3 == 37:\n            print(f'Yes, month {i} has 37 days')\n        elif monthnum3 == 38:\n            print(f'Yes, month {i} has 38 days')\n        elif monthnum3 == 39:\n            print(f'Yes, month {i} has 39 days')\n        elif monthnum3 == 40:\n            print(f'Yes, month {i} has 40 days')\n        elif monthnum3 == 41:\n            print(f'Yes, month {i} has 41 days')\n        elif monthnum3 == 42:\n            print(f'Yes, month {i} has 42 days')\n        elif monthnum3 == 43:\n            print(f'Yes, month {i} has 43 days')\n        elif monthnum3 == 44:\n            print(f'Yes, month {i} has 44 days')\n        elif monthnum3 == 45:\n            print(f'Yes, month {i} has 45 days')\n        elif monthnum3 == 46:\n            print(f'Yes, month {i} has 46 days')\n        elif monthnum3 == 47:\n            print(f'Yes, month {i} has 47 days')\n        elif monthnum3 == 48:\n            print(f'Yes, month {i} has 48 days')\n        elif monthnum3 == 49:\n            print(f'Yes, month {i} has 49 days')\n        elif monthnum3 == 50:\n            print(f'Yes, month {i} has 50 days')\n        elif monthnum3 == 51:\n            print(f'Yes, month {i} has 51 days')\n        elif monthnum3 == 52:\n            print(f'Yes, month {i} has 52 days')\n        elif monthnum3 == 53:\n            print(f'Yes, month {i} has 53 days')\n        elif monthnum3 == 54:\n            print(f'Yes, month {i} has 54 days')\n        elif monthnum3 == 55:\n            print(f'Yes, month {i} has 55 days')\n        elif monthnum3 == 56:\n            print(f'Yes, month {i} has 56 days')\n        elif monthnum3 == 57:\n            print(f'Yes, month {i} has 57 days')\n        elif monthnum3 == 58:\n            print(f'Yes, month {i} has 58 days')\n        elif monthnum3 == 59:\n            print(f'Yes, month {i} has 59 days')\n        elif monthnum3 == 60:\n            print(f'Yes, month {i} has 60 days')\n        elif monthnum3 == 61:\n            print(f'Yes, month {i} has 61 days')\n        elif monthnum3 == 62:\n            print(f'Yes, month {i} has 62 days')\n        elif monthnum3 == 63:\n            print(f'Yes, month {i} has 63 days')\n        elif monthnum3 == 64:\n            print(f'Yes, month {i} has 64 days')\n        elif monthnum3 == 65:\n            print(f'Yes, month {i} has 65 days')\n        elif monthnum3 == 66:\n            print(f'Yes, month {i} has 66 days')\n        elif monthnum3 == 67:\n            print(f'Yes, month {i} has 67 days')\n        elif monthnum3 == 68:\n            print(f'Yes, month {i} has 68 days')\n        elif monthnum3 == 69:\n            print(f'Yes, month {i} has 69 days')\n        elif monthnum3 == 70:\n            print(f'Yes, month {i} has 70 days')\n        elif monthnum3 == 71:\n            print(f'Yes, month {i} has 71 days')\n        elif monthnum3 == 72:\n            print(f'Yes, month {i} has 72 days')\n        elif monthnum3 == 73:\n            print(f'Yes, month {i} has 73 days')\n        elif monthnum3 == 74:\n            print(f'Yes, month {i} has 74 days')\n        elif monthnum3 == 75:\n            print(f'Yes, month {i} has 75 days')\n        elif monthnum3 == 76:\n            print(f'Yes, month {i} has 76 days')\n        elif monthnum3 == 77:\n            print(f'Yes, month {i} has 77 days')\n        elif monthnum3 == 78:\n            print(f'Yes, month {i} has 78 days')\n        elif monthnum3 == 79:\n            print(f'Yes, month {i} has 79 days')\n        elif monthnum3 == 80:\n            print(f'Yes, month {i} has 80 days')\n        elif monthnum3 == 81:\n            print(f'Yes, month {i} has 81 days')\n        elif monthnum3 == 82:\n            print(f'Yes, month {i} has 82 days')\n        elif monthnum3 == 83:\n            print(f'Yes, month {i} has 83 days')\n        elif monthnum3 == 84:\n            print(f'Yes, month {i} has 84 days')\n        elif monthnum3 == 85:\n            print(f'Yes, month {i} has 85 days')\n        elif monthnum3 == 86:\n            print(f'Yes, month {i} has 86 days')\n        elif monthnum3 == 87:\n            print(f'Yes, month {i} has 87 days')\n        elif monthnum3 == 88:\n            print(f'Yes, month {i} has 88 days')\n        elif monthnum3 == 89:\n            print(f'Yes, month {i} has 89 days')\n        elif monthnum3 == 90:\n            print(f'Yes, month {i} has 90 days')\n        elif monthnum3 == 91:\n            print(f'Yes, month {i} has 91 days')\n        elif monthnum3 == 92:\n            print(f'Yes, month {i} has 92 days')\n        elif monthnum3 == 93:\n            print(f'Yes, month {i} has 93 days')\n        elif monthnum3 == 94:\n            print(f'Yes, month {i} has 94 days')\n        elif monthnum3 == 95:\n            print(f'Yes, month {i} has 95 days')\n        elif monthnum3 == 96:\n            print(f'Yes, month {i} has 96 days')\n        elif monthnum3 == 97:\n            print(f'Yes, month {i} has 97 days')\n        elif monthnum3 == 98:\n            print(f'Yes, month {i} has 98 days')\n        elif monthnum3 == 99:\n            print(f'Yes, month {i} has 99 days')\n        elif monthnum3 == 100:\n            print(f'Yes, month {i} has 100 days')\n        elif monthnum3 == 101:\n            print(f'Yes, month {i} has 101 days')\n        elif monthnum3 == 102:\n            print(f'Yes, month {i} has 102 days')\n        elif monthnum3 == 103:\n            print(f'Yes, month {i} has 103 days')\n        elif monthnum3 == 104:\n            print(f'Yes, month {i} has 104 days')\n        elif monthnum3 == 105:\n            print(f'Yes, month {i} has 105 days')\n        elif monthnum3 == 106:\n            print"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Your code here\n    if monthnum3 in range(1, 3):\n        return False\n    if monthnum3 in range(4, 6):\n        return True\n    if monthnum3 in range(7, 10):\n        return False\n    if monthnum3 in range(11, 13):\n        return True\n    if monthnum3 in range(14, 16):\n        return False\n    if monthnum3 in range(17, 20):\n        return True\n    if monthnum3 in range(21, 24):\n        return False\n    if monthnum3 in range(25, 28):\n        return True\n    if monthnum3 in range(29, 32):\n        return False\n    if monthnum3 in range(1, 31):\n        return True\n    else:\n        print(\"month number not in range\")\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    for i in range(1,13):\n        if monthnum3 == i:\n            if 30 in range(1,13):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    n = len(arr)\n    res = arr[0]\n    for i in range(1,n):\n        res = min(arr[i],res+arr[i])\n    return res\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    return min(arr[i] - arr[i-1] for i in range(1, n))\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    return abs(arr[-1] - arr[0])\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            min_diff = min(min_diff, abs(arr[i] - arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n<=2:\n        return -1\n    l = 0\n    r = n-1\n    while l<r:\n        mid = (l+r)//2\n        if arr[mid] > arr[r]:\n            l = mid + 1\n        elif arr[mid] < arr[r]:\n            r = mid\n        else:\n            r-=1\n    return arr[l] - arr[r]\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Base Case \n    if n == 1: \n        return -1\n    if n == 2: \n        return abs(arr[0] - arr[1]) \n    else: \n        min_diff = abs(arr[0] - arr[1])\n        # Find the minimum difference \n        # from arr[2] to arr[n-1] \n        for i in range(2, n): \n            curr_diff = abs(arr[i] - arr[i-1]) \n            min_diff = min(min_diff, curr_diff) \n        return min_diff \n  "
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Write your code here\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if abs(arr[i]-arr[j]) < abs(min_diff):\n                min_diff = abs(arr[i]-arr[j])\n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(0,n-1):\n        if abs(arr[i]-arr[i+1]) < min_diff:\n            min_diff = abs(arr[i]-arr[i+1])\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = sys.maxsize\n    for i in range(n-1):\n        diff = abs(arr[i+1]-arr[i])\n        min_diff = min(min_diff, diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 2:\n        return 0\n    min_diff = 0\n    arr.sort()\n    for i in range(n):\n        if (i > 0 and arr[i] <= arr[i - 1]):\n            continue\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    print('number of digits in the given string',count)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isdigit():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # TODO: Write your solution here\n    print(f'Number of digits in str:{len(str)}\\n')\n    return\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    print(num)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len([i for i in str if i.isdigit()])\n    "
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            n += 1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # your code here\n    num = 0\n    for i in str:\n        if (i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or i == '6' or i == '7' or i == '8' or i == '9'):\n            num += 1\n        else:\n            continue\n    print(num)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 5\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = 1\n    c = 1\n    t = 2\n    while(c<n):\n        c = 2*x+1\n        t = x\n        x = c\n    return t\n    \ndef is_polite_v2(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        temp = 1\n        ans = 1\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v3(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v4(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        if(num%2==0):\n            ans = ans*2\n        else:\n            ans = ans*3\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v5(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        if(num%2==0):\n            ans = ans*2\n        else:\n            ans = ans*3\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v6(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v7(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v8(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v9(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v10(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v11(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v12(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v13(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v14(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v15(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                ans = ans*2\n                temp += 1\n            else:\n                ans = ans*3\n                temp += 1\n        return ans\n    return gen_num(n)\n    \ndef is_polite_v16(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen_num(num):\n        ans = 1\n        temp = 0\n        while(temp<=num):\n            if(temp%2==0):\n                an"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (is_polite(n-1) * 2) \nn = int(input())\nprint(is_polite(n)) \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0 or n == 1:\n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    polite = 1\n    while True:\n        polite = (polite + 1)\n        if polite ** 2 > n:\n            break\n    return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2==0:\n        return n\n    else:\n        return n+1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here\n    if n%2==0:\n        return -1\n    else:\n        return (n+1)/2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    import sys\n    d={}\n    if n == 0:\n        print('n = 0')\n        return\n    if n == 1:\n        print('n = 1')\n        return\n    else:\n        i = 0\n        while i < n:\n            x = d[i] + 1\n            if x in d:\n                d[i] = x\n            else:\n                d[i] = x\n            if x not in d:\n                d[x] = i\n            i = i + 1\n        print(d)\n        for k,v in d.items():\n            print(k,v)\n        print(d[k])\ndef find_factors(n):\n    '''\n    Write a function to find all factors of a positive integer n. \n    '''\n    import sys\n    if n == 1:\n        print('n = 1')\n        return\n    else:\n        i = 1\n        while i < n:\n            if n % i == 0:\n                print(i)\n            i = i + 1\ndef prime_factors(n):\n    '''\n    Write a program to count the number of prime numbers that are less than a given number.\n    '''\n    import sys\n    count = 0\n    i = 2\n    if n == 1:\n        print('n = 1')\n        return\n    elif n < 2:\n        print('n = 2')\n        return\n    else:\n        while(i < n):\n            if n % i == 0:\n                count = count + 1\n                if i == n - 1:\n                    print(i)\n                else:\n                    print(i, end = \" \")\n            i = i + 1\n        print(count)\n        return\ndef isprime(n):\n    '''\n    Write a program to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    i = 2\n    while(i <= n//2):\n        if n % i == 0:\n            return False\n        i = i + 1\n    return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    import sys\n    if n == 1:\n        print('n = 1')\n        return\n    elif n < 2:\n        print('n = 2')\n        return\n    else:\n        i = 2\n        while(i < n//2):\n            if n % i == 0:\n                return False\n            i = i + 1\n        return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    import math\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    import math\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    import math\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    import math\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    import math\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    import math\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)+1), 2):\n                if n % i == 0:\n                    return False\n            return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    import math\n    if n == 1:\n        print('n = 1')\n        return False\n    elif n < 2:\n        print('n = 2')\n        return True\n    elif n == 2:\n        return True\n    else:\n        i"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = 0\n    n = int(n)\n    for i in range(1, n+1):\n        s = s * i\n        \n    return s\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs=[]\n    for i in range(len(l1)):\n        if i==0 or i==len(l1)-1:\n            continue\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst1=[]\n    for i in range(0,len(l1)-1):\n        lst1.append((l1[i],l1[i+1]))\n    return lst1\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,y) for x in range(1,len(l1)) for y in range(x,len(l1))]\n    \ndef sum_list(l1):\n    '''\n    Write a function to add up all the items in a list.\n    '''\n    return sum(l1)\n    \ndef sum_list_with_map(l1):\n    '''\n    Write a function to add up all the items in a list using map function.\n    '''\n    return sum(map(int,l1))\n    \ndef sum_list_with_filter(l1):\n    '''\n    Write a function to add up all the items in a list using filter function.\n    '''\n    return sum(filter(int,l1))\n    \ndef sum_list_with_lambda(l1):\n    '''\n    Write a function to add up all the items in a list using lambda function.\n    '''\n    return sum(map(int,filter(lambda x: x,l1)))\n    \ndef sum_list_with_lambda2(l1):\n    '''\n    Write a function to add up all the items in a list using lambda function.\n    '''\n    return reduce(lambda x,y: x+y,l1)\n    \ndef sum_list_with_lambda3(l1):\n    '''\n    Write a function to add up all the items in a list using reduce function.\n    '''\n    return reduce(lambda x,y: x+y,l1)\n    \ndef sum_list_with_map_lambda(l1):\n    '''\n    Write a function to add up all the items in a list using map and lambda function.\n    '''\n    return reduce(lambda x,y: x+y, map(lambda x: x,l1))\n    \ndef sum_list_with_map_filter(l1):\n    '''\n    Write a function to add up all the items in a list using map and filter function.\n    '''\n    return reduce(lambda x,y: x+y, filter(lambda x: x, map(int,l1)))\n    \ndef sum_list_with_map_filter_lambda(l1):\n    '''\n    Write a function to add up all the items in a list using map, filter and lambda function.\n    '''\n    return reduce(lambda x,y: x+y, filter(lambda x: x, map(lambda x: int(x),l1)))\n    \ndef remove_duplicates(l1):\n    '''\n    Write a function to remove all the duplicates from a given list.\n    '''\n    return list(set(l1))\n    \ndef remove_duplicates_with_map(l1):\n    '''\n    Write a function to remove all the duplicates from a given list.\n    '''\n    return list(map(int,list(set(l1))))\n    \ndef remove_duplicates_with_filter(l1):\n    '''\n    Write a function to remove all the duplicates from a given list.\n    '''\n    return list(filter(lambda x: x not in l1,l1))\n    \ndef remove_duplicates_with_filter_lambda(l1):\n    '''\n    Write a function to remove all the duplicates from a given list.\n    '''\n    return list(filter(lambda x: x not in l1,l1))\n    \ndef remove_duplicates_with_filter_lambda2(l1):\n    '''\n    Write a function to remove all the duplicates from a given list.\n    '''\n    return list(filter(lambda x: x not in l1,list(map(int,l1))))\n    \ndef count_occurence(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_lambda(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_filter(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_filter_lambda(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_filter_lambda2(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_filter_lambda3(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_filter_lambda4(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda2(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda3(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda4(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda5(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda6(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda7(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda8(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda9(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda10(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '''\n    return l1.count(item)\n    \ndef count_occurence_with_map_filter_lambda11(l1,item):\n    '''\n    Write a function to count the occurrence of an item in a given list.\n    '"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(0, len(l1)):\n        for j in range(i+1, len(l1)):\n            l2.append([l1[i], l1[j]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    start = 0\n    while start < len(l1)-1:\n        pairs.append([l1[start],l1[start+1]])\n        start += 2\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list1=[]\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            if(i==j):\n                list1.append((l1[i],l1[j]))\n            else:\n                list1.append((l1[i],l1[j]))\n    return list1\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    x = []\n    for i in range(len(l1)):\n        if i == len(l1) - 1:\n            break\n        else:\n            x.append((l1[i], l1[i + 1]))\n    return x\n    \ndef count_odd(l2):\n    '''\n    Write a function to count odd numbers in a given list.\n    '''\n    count = 0\n    for i in l2:\n        if i % 2!= 0:\n            count += 1\n    return count\n    \ndef reverse_words(s):\n    '''\n    Write a function to reverse a given string\n    '''\n    return ''.join(reversed(s))\n    \ndef minimum_words(s, n):\n    '''\n    Write a function that returns the minimum number of words required to form a given sentence.\n    '''\n    x = s.split()\n    if len(x) < n:\n        return len(x)\n    else:\n        return n\n    \ndef letter_histogram(s):\n    '''\n    Write a function that accepts a sentence as an argument and returns a dictionary that contains\n    a list of all the letters used in the sentence and the number of times each letter appears.\n    '''\n    x = {}\n    s = s.replace(' ', '')\n    for i in s:\n        if i in x:\n            x[i] += 1\n        else:\n            x[i] = 1\n    return x\n    \ndef get_products(x, y):\n    '''\n    Write a function that accepts two lists of integers as arguments and returns a list containing\n    all of the products of the integers in each list.\n    '''\n    return list(map(lambda x, y: x * y, x, y))\n    \ndef has_duplicates(lst):\n    '''\n    Write a function that accepts a list and returns a boolean representing whether the list contains any duplicates.\n    '''\n    return len(lst)!= len(set(lst))\n    \ndef remove_duplicates(lst):\n    '''\n    Write a function that accepts a list and returns a new list with all duplicates removed.\n    '''\n    return list(set(lst))\n    \ndef remove_duplicates_without_count(lst):\n    '''\n    Write a function that accepts a list and returns a new list with all duplicates removed,\n    but without including the counts of the duplicates.\n    '''\n    return list(set(lst))\n    \ndef largest_interval(nums):\n    '''\n    Write a function that accepts a list of unsorted numbers and returns the largest interval\n    containing all of the numbers.\n    '''\n    return max(nums, key=lambda x: nums.count(x))\n    \ndef sum_of_first_k_numbers(nums, k):\n    '''\n    Write a function that accepts a list and returns the sum of the first K numbers in the list.\n    '''\n    return sum(nums[:k])\n    \ndef remove_duplicates_from_sorted_array(lst):\n    '''\n    Write a function that accepts a list of integers and returns a new list without any\n    repeated numbers in the list.\n    '''\n    return list(set(lst))\n    \ndef remove_duplicates_from_sorted_array_using_set(lst):\n    '''\n    Write a function that accepts a list of integers and returns a new list without any\n    repeated numbers in the list.\n    '''\n    return list(set(lst))\n    \ndef remove_duplicates_from_sorted_array_using_sort(lst):\n    '''\n    Write a function that accepts a list of integers and returns a new list without any\n    repeated numbers in the list.\n    '''\n    return sorted(list(set(lst)))\n    \ndef remove_duplicates_from_sorted_array_using_while_loop(lst):\n    '''\n    Write a function that accepts a list of integers and returns a new list without any\n    repeated numbers in the list.\n    '''\n    x = []\n    for i in lst:\n        if i not in x:\n            x.append(i)\n    return x\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function that accepts two strings as arguments and returns true if they are\n    anagrams and false otherwise.\n    '''\n    x = sorted(s1.lower())\n    y = sorted(s2.lower())\n    return x == y\n    \ndef find_anagrams(s, p):\n    '''\n    Write a function that accepts a string and a pattern and returns a list of all\n    the starting indices of the anagrams of that pattern in the given string.\n    '''\n    x = []\n    for i in range(len(s) - len(p) + 1):\n        if is_anagram(s[i: i + len(p)], p):\n            x.append(i)\n    return x\n    \ndef find_anagrams_using_hashtable(s, p):\n    '''\n    Write a function that accepts a string and a pattern and returns a list of all\n    the starting indices of the anagrams of that pattern in the given string.\n    '''\n    hash_table = {}\n    for i in range(len(p)):\n        hash_table[p[i]] = hash_table.get(p[i], 0) + 1\n    \n    x = []\n    for i in range(len(s) - len(p) + 1):\n        if is_anagram(s[i: i + len(p)], p):\n            x.append(i)\n    return x\n    \ndef find_anagrams_using_sort(s, p):\n    '''\n    Write a function that accepts a string and a pattern and returns a list of all\n    the starting indices of the anagrams of that pattern in the given string.\n    '''\n    x = []\n    s = s.lower()\n    p = p.lower()\n    \n    x = list(filter(lambda x:sorted(s[x:x+len(p)]) == sorted(p), range(len(s)-len(p)+1)))\n    return x\n    \ndef find_anagrams_using_sort_count(s, p):\n    '''\n    Write a function that accepts a string and a pattern and returns a list of all\n    the starting indices of the anagrams of that pattern in the given string.\n    '''\n    x = []\n    s = s.lower()\n    p = p.lower()\n    \n    x = list(filter(lambda x:sorted(s[x:x+len(p)]) == sorted(p), range(len(s)-len(p)+1)))\n    return x\n    \ndef find_anagrams_using_sort_by_count(s, p):\n    '''\n    Write a function that accepts a string and a pattern and returns a list of all\n    the starting indices of the anagrams of that pattern in the given string.\n    '''\n    x = []\n    s = s.lower()\n    p = p.lower()\n    \n    x = list(filter(lambda x:sorted(s[x:x+len(p)]) == sorted(p), range(len(s)-len(p)+1)))\n    return x\n    \ndef find_anagrams_using_sort_by_count_index(s, p):\n    '''\n    Write a function that accepts a string and a pattern and returns a list of all\n    the starting indices of the anagrams of that pattern in the given string.\n    '''\n    x = []\n    s = s.lower()\n    p = p.lower()\n    \n    x = list(filter(lambda x:sorted(s[x:x+len(p)]) == sorted(p), range(len(s)-len(p)+1)))\n    return x\n    \ndef find_anagrams_using_sort_by_count_index_removing_duplicates(s, p):\n    '''\n    Write a function that accepts a string and a pattern and returns a list of all\n    the starting indices of the anagrams of that pattern in the given string.\n    '''\n    x = []\n    s = s.lower()\n    p = p"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    for i in range(len(l1)-1):\n        #print (l1[i],l1[i+1])\n        yield (l1[i],l1[i+1])\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i == 0:\n            l2.append(l1[i])\n        elif l1[i] - l1[i-1] == 1:\n            l2.append((l1[i-1],l1[i]))\n        else:\n            l2.append(l1[i])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(0, len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len([x for x in arr if sum-x in arr])\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j]==sum):\n                count+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]+arr[j] == sum):\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 16))"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                pair_count+=1\n    return pair_count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                result += 1\n    return result\n    \ndef get_pairs_count_eff(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    hash_table = dict()\n    for i in range(len(arr)):\n        if arr[i] not in hash_table:\n            hash_table[arr[i]] = 1\n        else:\n            hash_table[arr[i]] += 1\n    for i in range(len(arr)):\n        if (sum - arr[i]) in hash_table:\n            result += hash_table[(sum - arr[i])]\n    return result\n    \n    \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    res = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                res += 1\n    return res\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    l = len(arr)\n    i = 0\n    j = l-1\n    count = 0\n    while i<j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    result = 0\n    for i in range(len(arr)):\n        j = i+1\n        while j < len(arr):\n            if arr[i] + arr[j] == sum:\n                result += 1\n                j += 1\n                continue\n            elif arr[i] + arr[j] < sum:\n                j += 1\n            else:\n                break\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = li1[::-1]\n    li2 = li2[::-1]\n    for ele in li1:\n        if ele not in li2:\n            return ele\n    return None\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = []\n    for item in li1:\n        if item not in li2:\n            li_dif.append(item)\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li2:\n        if i not in li1:\n            diff.append(i)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in li1:\n        if i not in li2:\n            li_diff.append(i)\n    for i in li2:\n        if i not in li1:\n            li_diff.append(i)\n    return li_diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = list(set(li1) - set(li2))\n    print(li_diff)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l=[]\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            l.append(li1[i])\n    for j in range(len(li2)):\n        if li2[j] not in li1:\n            l.append(li2[j])\n    print(l)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li=[]\n    for i in li1:\n        if i not in li2:\n            li.append(i)\n    return li\n    \n    \ndef common(li1,li2):\n    '''\n    Write a python function to get the common elements from two lists.\n    '''\n    li=[]\n    for i in li1:\n        if i in li2 and i not in li:\n            li.append(i)\n    return li\n    \n    \ndef nearestSmaller(li):\n    '''\n    Write a python function to get the nearest smaller elements in a list.\n    '''\n    l=[]\n    for i in li:\n        if i-1>=0 and li[i-1]>li[i] and i not in l:\n            l.append(i)\n    return l\n    \n    \ndef nearestSmaller2(li):\n    '''\n    Write a python function to get the nearest smaller elements in a list.\n    '''\n    l=[]\n    for i in li:\n        if i-1>=0 and li[i-1]>li[i] and i not in l:\n            l.append(i)\n    l.sort()\n    return l\n    \n    \ndef moveZeros(arr):\n    '''\n    Write a python function to move all the zeros to the end of the array.\n    '''\n    l=[]\n    for i in arr:\n        if i!=0:\n            l.append(i)\n    for i in range(len(l)):\n        arr.remove(0)\n        arr.append(l[i])\n    return arr\n    \n    \ndef moveZeros1(arr):\n    '''\n    Write a python function to move all the zeros to the end of the array.\n    '''\n    l=[]\n    for i in arr:\n        if i!=0:\n            l.append(i)\n    for i in range(len(l)):\n        arr.append(l.pop(0))\n    return arr\n    \n    \ndef moveZeros2(arr):\n    '''\n    Write a python function to move all the zeros to the end of the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!=0:\n            j=i\n            while arr[j]==0 and j<len(arr):\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n                j+=1\n    return arr\n    \n    \ndef moveZeros3(arr):\n    '''\n    Write a python function to move all the zeros to the end of the array.\n    '''\n    l=[]\n    for i in arr:\n        if i!=0:\n            l.append(i)\n    for i in range(len(l)):\n        arr.append(l.pop(0))\n    return arr\n    \n    \ndef moveZeros4(arr):\n    '''\n    Write a python function to move all the zeros to the end of the array.\n    '''\n    l=[]\n    for i in arr:\n        if i!=0:\n            l.append(i)\n    for i in range(len(l)):\n        if l.count(0)==len(l):\n            break\n        arr.append(l.pop(0))\n    return arr\n    \n    \ndef moveZeros5(arr):\n    '''\n    Write a python function to move all the zeros to the end of the array.\n    '''\n    l=[]\n    for i in arr:\n        if i!=0:\n            l.append(i)\n    for i in range(len(l)):\n        for j in range(len(arr)):\n            if arr[i]==l[j] and j==0:\n                arr.append(l.pop(i))\n                break\n    return arr\n    \n    \ndef moveZeros6(arr):\n    '''\n    Write a python function to move all the zeros to the end of the array.\n    '''\n    l=[]\n    for i in arr:\n        if i!=0:\n            l.append(i)\n    for i in range(len(l)):\n        if l[i]==0:\n            for j in range(len(arr)):\n                if arr[j]==l[i]:\n                    arr.append(l.pop(i))\n                    break\n    return arr\n    \n    \ndef findDuplicates(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates1(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates2(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates3(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates4(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates5(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates6(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates7(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates8(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates9(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates10(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n    return l\n    \n    \ndef findDuplicates11(arr):\n    '''\n    Write a python function to find duplicate elements.\n    '''\n    l=[]\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            l.append(arr[i])\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = li1.copy()\n    for i in li2:\n        if i in li3:\n            li3.remove(i)\n    return li3\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i % 2!= 0 :\n            sum += i**4\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 0\n    for i in range(n):\n        if i%2!= 0 :\n            num = num + i**4\n    print(num)\n    return num\n    \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n,2) : \n        sum += i**4 \n    print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    i = 0\n    while(i <= n):\n        if(i%2!= 0):\n            num = num + i**4\n        i = i + 1\n    return num\nprint(odd_num_sum(10))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) : \n        if (i%2!= 0) : \n            sum += (i**3)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    odd_nums = range(1,n+1)\n    odd_nums_squared = map(lambda num: num ** 2, odd_nums)\n    odd_nums_squared = filter(lambda num: num % 2!= 0, odd_nums_squared)\n    odd_nums_squared = map(lambda num: num, odd_nums_squared)\n    odd_nums_squared = sum(odd_nums_squared)\n    return odd_nums_squared\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1,n+1) if i%2 == 1])\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd = 0\n    for i in range(1, n+1) : \n        if i%2!= 0 : \n            sum_odd += i**4\n    return sum_odd \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(input(\"Enter the number of terms: \"))\n    odd_numbers = []\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            odd_numbers.append(i ** 2)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(n) :\n        if i % 2!= 0 : \n            result += i ** 2\n    print(\"The sum of the fourth powers of the odd numbers of size\",n,\"is\",result)\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # stack = []\n    # operands = {'+','-','*','%','(',')'}\n    # for i in exp:\n    #     if i not in operands:\n    #         stack.append(i)\n    #     else:\n    #         if len(stack) == 0:\n    #             return False\n    #         if i == '(':\n    #             stack.append(i)\n    #         elif i == ')':\n    #             if len(stack) == 0:\n    #                 return False\n    #             top = stack.pop()\n    #             if top == '(':\n    #                 stack.append(i)\n    #             else:\n    #                 return False\n    #     if len(stack)!= 0:\n    #         return False\n    # return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    bracket_map = {\n        \")\": \"(\",\n        \"}\": \"{\",\n        \"]\": \"[\"\n    }\n    brackets = [\"{\",\"[\",\"(\"]\n    if len(exp) % 2!= 0:\n        return False\n    else:\n        for i in exp:\n            if i in brackets:\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if bracket_map[i]!= stack.pop():\n                        return False\n        return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    exp = list(exp)\n    st = []\n    check = True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == \"(\":\n            stack.append(exp[i])\n        else:\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    def _find_par(string,par):\n        if par==\"{\" or par==\"[\" or par==\"(\":\n            return string.find(par)\n        else:\n            return -1\n    def _find_close(string,par):\n        index=_find_par(string,par)\n        if index==-1:\n            return -1\n        if string[index]==par:\n            return index\n        else:\n            return -1\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    lst = [\"(\", \"{\", \"[\"]\n    for char in exp:\n        if char in lst:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            p = stack.pop()\n            if p!= lst[lst.index(char)]:\n                return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp.count('(')!= exp.count(')'):\n        return False\n    else:\n        stack = deque()\n        for i in exp:\n            if i == '(':\n                stack.append(i)\n            if i == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n    return not stack\n    '''\n    \ub9cc\uc57d (())()()() \uac19\uc740 \uacbd\uc6b0\uc5d0 \uc544\ubb34 \ubc29\ubc95\uc774 \uc5c6\uc73c\ub2c8\uae4c \uc720\ud6a8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n    1. \uadf8\ub0e5 \ucc98\uc74c \uc21c\ud68c\ub97c \ud558\uba74\uc11c \ud574\ub2f9 \ubb38\uc790\uac00 \ub4e4\uc5b4\uac00\ub294 \uc21c\uc11c\ub300\ub85c \uc2a4\ud0dd\uc744 \ub9cc\ub4e0\ub2e4.\n    2. \ub098\uba38\uc9c0 \uc77c\ubc18 \uc5f0\uc0b0\uc790\uc640 \ub2e4\ub978 \uc5f0\uc0b0\uc790\ub97c \uc120\ud0dd\ud558\uae30 \uc704\ud574\uc11c \uacf5\ubc31 \ud558\ub098\ub97c \ucd94\uac00\ud574\uc11c \ud574\ub2f9 \uc22b\uc790\ub4e4\uc744 \uc2a4\ud0dd\uc5d0 \ub123\ub294\ub2e4.\n    '''\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\ndef evaluate_postfix(exp):\n    '''\n    Write a function to evaluate the given expression in postfix.\n    '''\n    res = 0\n    for i in range(len(exp)):\n        if exp[i] == '+':\n            res += int(exp[i-2])\n        elif exp[i] == '*':\n            res *= int(exp[i-2])\n    return res\ndef prefix_to_postfix(exp):\n    '''\n    Write a function to convert the given infix expression to postfix expression.\n    '''\n    stack = []\n    for i in exp:\n        if i == '*' or i == '/' or i == '+' or i == '-':\n            if stack and stack[-1] == '*' or stack and stack[-1] == '/' or stack and stack[-1] == '+' or stack and stack[-1] == '-':\n                stack.append(i)\n            else:\n                stack.append('(')\n                stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            while stack[-1]!= '(':\n                res = stack.pop()\n                if res == '*':\n                    stack.append('*')\n                elif res == '/':\n                    stack.append('/')\n                elif res == '+':\n                    stack.append('+')\n                else:\n                    res = stack.pop()\n                    stack.append(res)\n                    break\n            stack.pop()\n    while stack:\n        res = stack.pop()\n        if res == '*':\n            stack.append('*')\n        elif res == '/':\n            stack.append('/')\n        elif res == '+':\n            stack.append('+')\n        else:\n            res = stack.pop()\n            stack.append(res)\n    return stack\ndef convert_infix_to_postfix(exp):\n    '''\n    Write a function to convert the given infix expression to postfix expression.\n    '''\n    stack = []\n    for i in exp:\n        if i == '*' or i == '/' or i == '+' or i == '-':\n            if stack and stack[-1] == '*' or stack and stack[-1] == '/' or stack and stack[-1] == '+' or stack and stack[-1] == '-':\n                stack.append(i)\n            else:\n                stack.append('(')\n                stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            while stack[-1]!= '(':\n                res = stack.pop()\n                if res == '*':\n                    stack.append('*')\n                elif res == '/':\n                    stack.append('/')\n                elif res == '+':\n                    stack.append('+')\n                else:\n                    res = stack.pop()\n                    stack.append(res)\n                    break\n            stack.pop()\n    while stack:\n        res = stack.pop()\n        if res == '*':\n            stack.append('*')\n        elif res == '/':\n            stack.append('/')\n        elif res == '+':\n            stack.append('+')\n        else:\n            res = stack.pop()\n            stack.append(res)\n    return stack\ndef prefix_to_postfix_induction(exp):\n    '''\n    Write a function to convert the given infix expression to postfix expression.\n    '''\n    stack = []\n    for i in exp:\n        if i == '*' or i == '/' or i == '+' or i == '-':\n            if stack and stack[-1] == '*' or stack and stack[-1] == '/' or stack and stack[-1] == '+' or stack and stack[-1] == '-':\n                stack.append(i)\n            else:\n                stack.append('(')\n                stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            while stack[-1]!= '(':\n                res = stack.pop()\n                if res == '*':\n                    stack.append('*')\n                elif res == '/':\n                    stack.append('/')\n                elif res == '+':\n                    stack.append('+')\n                else:\n                    res = stack.pop()\n                    stack.append(res)\n                    break\n            stack.pop()\n    while stack:\n        res = stack.pop()\n        if res == '*':\n            stack.append('*')\n        elif res == '/':\n            stack.append('/')\n        elif res == '+':\n            stack.append('+')\n        else:\n            res = stack.pop()\n            stack.append(res)\n    return stack\ndef evaluate_prefix(exp):\n    '''\n    Write a function to evaluate the given expression in prefix notation.\n    '''\n    res = 0\n    for i in exp:\n        if i == '*' or i == '/' or i == '+' or i == '-':\n            res = int(i)*res\n        else:\n            res += int(i)\n    return res\ndef convert_prefix_to_infix(exp):\n    '''\n    Write a function to convert the given prefix expression to infix expression.\n    '''\n    stack = []\n    for i in exp:\n        if i == '*' or i == '/' or i == '+' or i == '-':\n            if stack and stack[-1] == '*' or stack and stack[-1] == '/' or stack and stack[-1] == '+' or stack and stack[-1] == '-':\n                stack.append(i)\n            else:\n                stack.append('(')\n                stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            while stack[-1]!= '(':\n                res = stack.pop()\n                if res == '*':\n                    stack.append('*')\n                elif res == '/':\n                    stack.append('/')\n                elif res == '+':\n                    stack.append('+')\n                else:\n                    res = stack.pop()\n                    stack.append(res)\n                    break\n            stack.pop()\n    while stack:\n        res = stack.pop()\n        if res == '*':\n            stack.append('*')\n        elif res == '/':\n            stack.append('/')\n        elif res == '+':\n            stack.append('+')\n        else:\n            res = stack.pop()\n            stack.append(res)\n    return stack\ndef get_symbol_table(expr):\n    '''\n    Write a function to get the symbol table for the given infix expression.\n    '''\n    symbol_table = {}\n    for i in expr:\n        if i in '+-*/':\n            if len(symbol_table) == 0:\n                symbol_table[i] = 1\n            else:\n                symbol_table[i] = 1+symbol_table[i-1]\n        else:\n            symbol_table[i] = 1\n    return symbol_table\ndef convert_infix_to_prefix(exp):\n    '''\n    Write a function to convert the given infix expression to prefix expression.\n    '''\n    stack = []\n    for i in exp:\n        if i == '*' or i == '/' or i == '+' or i == '-':\n            if stack and stack[-1] == '*' or stack and stack[-1] == '/' or stack and stack[-1] == '+' or stack and stack[-1] == '-':\n                stack.append(i)\n            else:\n                stack.append('(')\n                stack.append(i)\n        elif i == '"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    par_map = {')':'(',']':'[','}':'{'}\n    for i in exp:\n        if i in par_map:\n            if len(stack)==0 or par_map[i]!=stack[-1]:\n                return False\n            else:\n                stack.pop()\n        else:\n            stack.append(i)\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    i = 0\n    for w in words:\n        if len(w) == K:\n            words.remove(w)\n            i += 1\n    return''.join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    out_list = []\n    for word in test_str.split():\n        if len(word) == K:\n            out_list.append(word)\n    return \" \".join(out_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str.remove(test_str[i])\n    return''.join(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #   --- original ---\n    # #   --- optimized ---\n    # if not test_str or not isinstance(test_str, str):\n    #     raise TypeError('test_str must be a string')\n    # if not isinstance(K, int):\n    #     raise TypeError('K must be an integer')\n    # if K < 1:\n    #     raise ValueError('K must be >= 1')\n    # words = test_str.split()\n    # while len(words) > K:\n    #     words.pop()\n    # result =''.join(words)\n    # return result\n    # -------------\n    # #   --- original ---\n    # if not test_str or not isinstance(test_str, str):\n    #     raise TypeError('test_str must be a string')\n    # if not isinstance(K, int):\n    #     raise TypeError('K must be an integer')\n    # if K < 1:\n    #     raise ValueError('K must be >= 1')\n    # words = test_str.split()\n    # while len(words) > K:\n    #     words.pop()\n    # result =''.join(words)\n    # return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    arr = test_str.split()\n    arr.sort(key=len)\n    for i in range(len(arr)):\n        if len(arr[i])!= K:\n            arr.pop(i)\n    return''.join(arr)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split()\n    for i in range(len(test_list)):\n        if len(test_list[i])==K:\n            test_str = test_str.replace(test_list[i],\"\")\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for word in test_str.split():\n        if len(word) == K:\n            test_str = test_str.replace(word, '')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 1:\n        return test_str\n    test_str = test_str.split(\" \")\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str.remove(test_str[i])\n    return \" \".join(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    \n    return''.join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    stack = []\n    word_index = 0\n    k = K\n    for i in range(len(test_str)):\n        if word_index < len(test_str):\n            if len(test_str[word_index]) == k:\n                stack.append(test_str[word_index])\n            word_index += 1\n        if word_index < len(test_str):\n            if len(test_str[word_index]) > k:\n                stack.append(test_str[word_index])\n    for word in stack:\n        test_str = test_str.replace(word, '')\n    return test_str\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m:\n        return m.start(),m.end()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    matches = re.finditer(pattern,text)\n    for match in matches:\n        print(\"Match at %d\" %(match.start()))\n    return matches\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(0,len(text)-len(pattern)+1):\n        if re.search(pattern,text[i:i+len(pattern)]):\n            return i,i+len(pattern)-1\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if type(text)!= str or type(pattern)!= str:\n        return None\n    if text == '' and pattern == '':\n        return None\n    if len(text) == len(pattern) == 0:\n        return None\n    if pattern == '':\n        return None\n    if len(text) < len(pattern):\n        return None\n    if pattern == '':\n        return None\n    match_index = []\n    occurance_index = []\n    if pattern not in text:\n        return None\n    for i in range(len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            match_index.append(i)\n    if len(match_index)!= 0:\n        occurance_index.append(match_index[0])\n    if len(match_index) > 1:\n        for i in range(len(match_index)):\n            if match_index[i] < occurance_index[-1]:\n                continue\n            else:\n                occurance_index.append(match_index[i])\n    if len(occurance_index) == 0:\n        return None\n    return occurance_index\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern=pattern.strip()\n        pat=re.compile(pattern)\n        res=re.findall(pat,text)\n        if res:\n            res=res[0]\n        else:\n            res=None\n    except AttributeError:\n        res=None\n    return res\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(0,len(text)-len(pattern)+1):\n        if(text[i:i+len(pattern)]==pattern):\n            return i\n    return None\nprint(occurance_substring(\"hello world! hello world! hello world!\", \"hello\"))\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(0,len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            return i,i+len(pattern)-1\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=[]\n    index=0\n    while True:\n        index=text.find(pattern,index)\n        if index==-1:\n            break\n        else:\n            occurance.append(index)\n            index+=1\n    return occurance\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    n = len(pattern)\n    match = re.finditer(pattern,text)\n    occurance = []\n    for i in match:\n        start_index = i.start()\n        end_index = i.end()\n        occurance.append([start_index,end_index,pattern,text[start_index:end_index]])\n    return occurance\ndef sub_string(s1,s2):\n    '''\n    Write a function to return the number of substrings that are matched within two strings.\n    '''\n    n1 = len(s1)\n    n2 = len(s2)\n    count = 0\n    for i in range(n1-n2+1):\n        if s1[i:i+n2] == s2:\n            count += 1\n    return count\ndef occurance_substring_word(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    n = len(pattern)\n    match = re.finditer(pattern,text)\n    occurance = []\n    for i in match:\n        start_index = i.start()\n        end_index = i.end()\n        occurance.append([start_index,end_index,pattern,text[start_index:end_index]])\n    return occurance\ndef sub_string_word(s1,s2):\n    '''\n    Write a function to return the number of substrings that are matched within two strings.\n    '''\n    n1 = len(s1)\n    n2 = len(s2)\n    count = 0\n    for i in range(n1-n2+1):\n        if s1[i:i+n2] == s2:\n            count += 1\n    return count\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #t=1\n    p=re.compile(pattern)\n    for i in range(len(text)-len(pattern)+1):\n        if re.search(p,text[i:i+len(pattern)]):\n            print(text[i:i+len(pattern)])\n            return\n    print(None)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n    \n    \ndef palindrome_test(nums):\n    '''\n    Write a python function to check whether a given string is palindrome.\n    '''\n    nums = nums.lower()\n    nums = nums.replace(\" \",\"\")\n    return nums == nums[::-1]\n    \n    \ndef palindrome_test_2(nums):\n    '''\n    Write a python function to check whether a given string is palindrome.\n    '''\n    for i in range(len(nums)//2):\n        if nums[i]!= nums[len(nums)-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_list.append(nums[i])\n    return odd_list\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    list_size = len(nums)\n    for i in range(list_size):\n        if nums[i] % 2 == 1:\n            odd_index += 1\n            if odd_index >= 2:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_pos_list = []\n    for i in range(1,len(nums)+1):\n        if i % 2!= 0:\n            odd_pos_list.append(i)\n    odd_pos_list.sort()\n    for i in range(len(odd_pos_list)):\n        if odd_pos_list[i]!= odd_pos_list[i+1]:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return nums[0:2]!= nums[1:3]\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # if odd index contains odd numbers then True else False\n    for i in range(len(nums)):\n        if i%2 == 0 and nums[i]%2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(n % 2 == 1 for i, n in enumerate(nums) if i % 2 == 1)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #Example 1:\n    #Input: nums = [3,5,1]\n    #Output: False\n    #Explanation: No index contains an odd number, so return False\n    #Example 2:\n    #Input: nums = [2,3,4]\n    #Output: True\n    #Explanation: 2,4 contain an odd number and 3,4 don't contain any odd numbers.\n    #Example 3:\n    #Input: nums = [-5]\n    #Output: True\n    #Explanation: -5 contain an odd number and -5 don't contain any odd numbers.\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    vowel_count = 0\n    for i in test_str:\n        if i in vowels:\n            vowel_count += 1\n    print(vowel_count)\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return test_str.count('a') + test_str.count('e') + test_str.count('i') + test_str.count('o') + test_str.count('u')\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ('a', 'e', 'i', 'o', 'u', 'y')\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            for j in range(i, len(test_str)):\n                if test_str[j] in vowels:\n                    count += 1\n                    break\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    test_str = test_str.lower()\n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0 or test_str[i-1] not in vowels:\n                if i == len(test_str)-1 or test_str[i+1] not in vowels:\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_set = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    vowel_cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowel_set:\n            vowel_cnt += 1\n    return vowel_cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    char_list = list(test_str)\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in range(len(char_list)):\n        if char_list[i] in vowels:\n            count += 1\n        if i < len(char_list)-1 and char_list[i+1] in vowels:\n            count -= 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(0, len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            for j in range(i):\n                if test_str[j] not in vowels:\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr)==0:\n        return 0\n    seen=set()\n    for i in range(len(arr)):\n        if arr[i] in seen:\n            continue\n        else:\n            seen.add(arr[i])\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = 0\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                sum += arr[i]\n                count += 1\n                break\n    if count!= 0:\n        sum += count * arr[count]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = {}\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] in seen:\n            seen[arr[i]] += 1\n        else:\n            seen[arr[i]] = 1\n    for i in range(len(arr)):\n        if seen[arr[i]] == 1:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        if arr[i] not in arr[i+1:]:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n=len(arr)\n    ans = 0\n    for i in range(n):\n        if arr[i] not in arr[i+1:]:\n            ans = ans + arr[i]\n    return ans\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    print(sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = list(set(arr))\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    print('Sum of the non repeated elements is : ', sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    ans = 0\n    for i in arr:\n        ans += i\n    print(ans)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!=arr[j] and arr[i] not in result and arr[j] not in result:\n                result.append(arr[i])\n                result.append(arr[j])\n                print (result)\n                return (sum(result))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #solution: using set\n    return sum(set(arr))\n    #solution: using sum\n    return sum(arr)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    count = 1\n    for k, g in groupby(list1):\n        result.append([count])\n        for i in g:\n            result[-1].append(i)\n        count += 1\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # your code here\n    list1 = sorted(list1)\n    x = 0\n    l = []\n    while x < len(list1)-1:\n        if list1[x] == list1[x+1]:\n            l.append([list1[x]])\n        else:\n            l.append([list1[x]])\n        x += 1\n    return l\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l = []\n    for k, g in groupby(list1):\n        l.append(list(g))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # L = [1,2,3,1,2,3,1,2,3,1,2]\n    # print(len(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # print(list(groupby(L)))\n    # print(groupby(L))\n    # prin"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1, lambda x: x == list1[0]):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #print(list1)\n    list2 = []\n    list3 = []\n    \n    for (key, group) in groupby(list1):\n        list2.append(key)\n        list3.append(list(group))\n    return list2, list3\n    \ndef pack_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    list3 = []\n    list4 = []\n    list5 = []\n    \n    for (key, group) in groupby(list1):\n        list2.append(key)\n        list3.append(list(group))\n    for (key, group) in groupby(list3):\n        list4.append(key)\n        list5.append(list(group))\n    return list2, list4, list5\n    \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l=[]\n    for i in list1:\n        if i not in l:\n            l.append(i)\n        else:\n            l.append(i)\n            l.append(i)\n    return l\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1 == None:\n        return None\n    if not isinstance(list1, list):\n        return None\n    if not list1:\n        return None\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    return groupby(list1)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # my_list = [1,1,2,3,5,5,5,6,7,8,9,9,9]\n    # result = pack_consecutive_duplicates(my_list)\n    # print(result)\n    # print(list(result))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {element: list1.count(element) for element in set(list1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for lst in list1:\n        tuple_list = tuple(lst)\n        if tuple_list in count_dict:\n            count_dict[tuple_list] += 1\n        else:\n            count_dict[tuple_list] = 1\n    return count_dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #unique_sublists_count = {}\n    #for list in list1:\n        #unique_sublists_count[tuple(list)] = unique_sublists_count.get(tuple(list), 0) + 1\n    #return unique_sublists_count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return unique_sublists_helper(list1, {})\n    \ndef unique_sublists_helper(list1, d):\n    if not list1:\n        return d\n    list1_copy = list1[:]\n    list1_copy.sort()\n    key = tuple(list1_copy)\n    if key in d:\n        d[key] = d[key] + 1\n    else:\n        d[key] = 1\n    return unique_sublists_helper(list1[1:], d)\n    \ndef unique_sublists_better(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hashtable = {}\n    for element in list1:\n        if element in hashtable.keys():\n            hashtable[element] = hashtable[element] + 1\n        else:\n            hashtable[element] = 1\n    return hashtable\n    \ndef count_and_sort(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return count_and_sort_helper(list1, {})\n    \ndef count_and_sort_helper(list1, d):\n    if not list1:\n        return d\n    list1_copy = list1[:]\n    list1_copy.sort()\n    key = tuple(list1_copy)\n    if key in d:\n        d[key] = d[key] + 1\n    else:\n        d[key] = 1\n    return count_and_sort_helper(list1[1:], d)\n    \ndef count_and_sort_better(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hashtable = {}\n    for element in list1:\n        if element in hashtable.keys():\n            hashtable[element] = hashtable[element] + 1\n        else:\n            hashtable[element] = 1\n    return hashtable\n    \ndef unique_sublists_efficient(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return unique_sublists_efficient_helper(list1, {})\n    \ndef unique_sublists_efficient_helper(list1, d):\n    if not list1:\n        return d\n    if tuple(list1) in d:\n        d[tuple(list1)] = d[tuple(list1)] + 1\n    else:\n        d[tuple(list1)] = 1\n    return unique_sublists_efficient_helper(list1[1:], d)\n    \ndef unique_sublists_better_efficient(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hashtable = {}\n    for element in list1:\n        if element in hashtable.keys():\n            hashtable[element] = hashtable[element] + 1\n        else:\n            hashtable[element] = 1\n    return hashtable\n    \ndef count_and_sort_sublists_efficient(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return count_and_sort_sublists_efficient_helper(list1, {})\n    \ndef count_and_sort_sublists_efficient_helper(list1, d):\n    if not list1:\n        return d\n    list1_copy = list1[:]\n    list1_copy.sort()\n    key = tuple(list1_copy)\n    if key in d:\n        d[key] = d[key] + 1\n    else:\n        d[key] = 1\n    return count_and_sort_sublists_efficient_helper(list1[1:], d)\n    \ndef unique_sublists_with_duplicates(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hashtable = {}\n    for element in list1:\n        if element in hashtable.keys():\n            hashtable[element] = hashtable[element] + 1\n        else:\n            hashtable[element] = 1\n    return hashtable\n    \ndef unique_sublists_better_efficient(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hashtable = {}\n    for element in list1:\n        if element in hashtable.keys():\n            hashtable[element] = hashtable[element] + 1\n        else:\n            hashtable[element] = 1\n    return hashtable\n    \ndef unique_sublists_better_efficient_part2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hashtable = {}\n    for element in list1:\n        hashtable[element] = hashtable.get(element, 0) + 1\n    return hashtable\n    \ndef unique_sublists_better_efficient_part3(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hashtable = {}\n    for element in list1:\n        hashtable[element] = hashtable.get(element, 0) + 1\n    return hashtable\n    \ndef count_and_sort_sublists_better_efficient(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return count_and_sort_sublists_better_efficient_helper(list1, {})\n    \ndef count_and_sort_sublists_better_efficient_helper(list1, d):\n    if not list1:\n        return d\n    list1_copy = list1[:]\n    list1_copy.sort()\n    key = tuple(list1_copy)\n    if key in d:\n        d[key] = d[key] + 1\n    else:\n        d[key] = 1\n    return count_and_sort_sublists_better_efficient_helper(list1[1:], d)\n    \ndef count_and_sort_sublists_better_efficient_part2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hashtable = {}\n    for element in list1:\n        if element in hashtable.keys():\n            hashtable[element] = hashtable[element] + 1\n        else:\n            hashtable[element] = 1\n    return hashtable\n    \ndef count_and_sort_sublists_better_efficient_part3(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = list1.sort()\n    new_list1 = []\n    for i in range(len(list1)):\n        if i < len(list1) - 1:\n            if list1[i]!= list1[i + 1]:\n                new_list1.append((list1[i], 1))\n        else:\n            new_list1.append((list1[i], 1))\n    \n    count = {}\n    for i in new_list1:\n        if i[0] not in count:\n            count[i[0]] = i[1]\n        else:\n            count[i[0]] += i[1]\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    solution = {}\n    for i in list1:\n        if i in solution.keys():\n            solution[i] += 1\n        else:\n            solution[i] = 1\n    return solution\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary={}\n    for i in list1:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\nprint(unique_sublists([[1,2,3,4],[1,2,3,4],[1,2,3,4]]))\nprint(unique_sublists([[1,2,3,4],[1,2,3,4],[1,2,3,4]]))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(sorted(i)): i.count(i) for i in list1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = [list1]\n    lists = {}\n    for i in range(0,len(list1)):\n        if type(list1[i]) == list:\n            list1[i] = tuple(list1[i])\n            if list1[i] not in lists:\n                lists[list1[i]] = 1\n            else:\n                lists[list1[i]] += 1\n        else:\n            pass\n    return lists\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return set(map(tuple,list(combinations(test_list,3))))\n    # code here\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = list()\n    for i in combinations(test_list, 3):\n        comb_list.append(i)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    # find the combinations of each\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if sum(test_list[i:j+1]) == 500:\n                return test_list[i:j+1]\n    return None\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initializing the list\n    total_list = []\n    # append every combination in list\n    for i in range(1, len(test_list) + 1):\n        for subset in combinations(test_list, i):\n            total_list.append(subset)\n    # convert tuple to list\n    total_list = list(map(list, total_list))\n    return total_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for tup in test_list:\n        combs.append(combinations(tup, 2))\n    comb_list = []\n    for comb in combs:\n        for x in comb:\n            comb_list.append(x)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(test_list)\n    return_list = []\n    #Create a set for looping\n    all_combos = set(map(lambda x: list(combinations(test_list, x)), range(1, len(test_list)+1)))\n    #Iterate over the set of all combos\n    for combo in all_combos:\n        #If the sum of the combo is equal to the sum of the given tuple list, add the combo to return_list\n        if sum(combo) == sum(test_list):\n            return_list.append(tuple(combo))\n    return return_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    output = []\n    for i in range(1,len(test_list)+1):\n        for subset in combinations(test_list,i):\n            output.append(subset)\n    return output\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = set(test_list)\n    for i in combinations(test_list, 2):\n        print(i)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = combinations(test_list, 2)\n    l = []\n    for i in comb:\n        l.append(i)\n    return l\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # initializing combination list\n    combination_list = []\n    \n    # getting the length of test_list\n    num_elem = len(test_list)\n    \n    # get the number of combinations\n    num_combinations = num_elem * (num_elem - 1) / 2\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=1\n    count=0\n    while i<=n/2:\n        if n%i==0:\n            count=count+1\n        i=i+1\n    if count%2==0:\n        print(\"The number is a divisor.\")\n    else:\n        print(\"The number is not a divisor\")\ndef count_prime_factors(n) : \n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    count=0\n    while n!=1:\n        i=2\n        while i<=math.sqrt(n):\n            if n%i==0:\n                count=count+1\n                n=n/i\n                break\n            i=i+1\n    if count==0:\n        print(\"The number is prime.\")\n    else:\n        print(\"The number is not prime\")\ndef count_digits(n) : \n    '''\n    Write a python function to count the digits in the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    count=0\n    while n!=0:\n        count=count+1\n        n=n//10\n    print(\"The number of digits in the number\",n,\"is\",count)\ndef count_odd_digits(n) : \n    '''\n    Write a python function to count the digits in the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    count=0\n    while n!=0:\n        if n%2==1:\n            count=count+1\n        n=n//10\n    print(\"The number of odd digits in the number\",n,\"is\",count)\ndef count_factors(n) : \n    '''\n    Write a python function to count the factors in the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    count=0\n    while n!=1:\n        i=2\n        while i<=math.sqrt(n):\n            if n%i==0:\n                count=count+1\n                break\n            i=i+1\n        n=n//i\n    if count==0:\n        print(\"The number has 0 factors.\")\n    else:\n        print(\"The number has\",count,\"factors.\")\ndef count_divisors_using_divisors(n) : \n    '''\n    Write a python function to count the divisors using dividing the number into its prime factors. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    count=0\n    i=2\n    while i<=math.sqrt(n):\n        while n%i==0:\n            count=count+1\n            n=n/i\n        i=i+1\n    if count==0:\n        print(\"The number has 0 divisors.\")\n    else:\n        print(\"The number has\",count,\"divisors.\")\ndef count_prime_factors_using_divisors(n) : \n    '''\n    Write a python function to count the prime factors using dividing the number into its prime factors. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    count=0\n    i=2\n    while i<=math.sqrt(n):\n        while n%i==0:\n            count=count+1\n            n=n/i\n        i=i+1\n    if count==0:\n        print(\"The number has 0 prime factors.\")\n    else:\n        print(\"The number has\",count,\"prime factors.\")\ndef count_digits_using_divisors(n) : \n    '''\n    Write a python function to count the digits in the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    count=0\n    i=2\n    while i<=math.sqrt(n):\n        while n%i==0:\n            count=count+1\n            n=n/i\n        i=i+1\n    if count==0:\n        print(\"The number has 0 digits.\")\n    else:\n        print(\"The number has\",count,\"digits.\")\ndef count_odd_digits_using_divisors(n) : \n    '''\n    Write a python function to count the digits in the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    count=0\n    i=2\n    while i<=math.sqrt(n):\n        while n%i==0:\n            count=count+1\n            n=n/i\n        i=i+1\n    if count==0:\n        print(\"The number has 0 odd digits.\")\n    else:\n        print(\"The number has\",count,\"odd digits.\")\ndef count_factors_using_divisors(n) : \n    '''\n    Write a python function to count the factors in the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    count=0\n    i=2\n    while i<=math.sqrt(n):\n        while n%i==0:\n            count=count+1\n            n=n/i\n        i=i+1\n    if count==0:\n        print(\"The number has 0 factors.\")\n    else:\n        print(\"The number has\",count,\"factors.\")\ndef count_divisors_using_prime_factors(n) : \n    '''\n    Write a python function to count the divisors using prime factors. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    count=0\n    i=2\n    while i<=math.sqrt(n):\n        while n%i==0:\n            count=count+1\n            n=n/i\n        i=i+1\n    if count==0:\n        print(\"The number has 0 divisors.\")\n    else:\n        print(\"The number has\",count,\"divisors.\")\ndef count_prime_factors_using_prime_factors(n) : \n    '''\n    Write a python function to count the prime factors using prime factors. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    count=0\n    i=2\n    while i<=math.sqrt(n):\n        while n%i==0:\n            count=count+1\n            n=n/i\n        i=i+1\n    if count==0:\n        print(\"The number has 0 prime factors.\")\n    else:\n        print(\"The number has\",count,\"prime factors.\")\ndef count_digits_using_prime_factors(n) : \n    '''\n    Write a python function to count the digits in the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    count=0\n    i=2\n    while i<=math.sqrt(n):\n        while n%i==0:\n            count=count+1\n            n=n/i\n        i=i+1\n    if count==0:\n        print(\"The number has 0 digits.\")\n    else:\n        print(\"The number has\",count,\"digits.\")\ndef count_odd_digits_using_prime_factors(n) : \n    '''\n    Write a python function to count the digits in the number. https://www.w3resource.com/python-exercises/basic/python-basic-1"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 0\n    else : \n        count = 0\n        for i in range(1, n+1) :\n            if n % i == 0 : \n                count += 1\n        return count\n    \ndef count_divisors_using_func(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return len(set(range(1,n)) & set(range(2,math.ceil(n/2))))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=1\n    for i in range(2,n) : \n        if (n%i==0) : \n            count+=1\n    print(\"count of divisors of {} is {}\".format(n,count))\n    return(count)\ncount_divisors(10)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            count += 2\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) :\n        if n%i==0:\n            count+=1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    '''\n    Take a number N as input from the user. Your task is to print its count of divisors.\n    \n    Input Format:\n    A number N denoting the number.\n    \n    Output Format:\n    Print the count of divisors.\n    \n    Example:\n    Input 1:\n    12\n    \n    Output 1:\n    4\n    \n    Input 2:\n    90\n    \n    Output 2:\n    8\n    '''\n    if n == 1:\n        return 1\n    else:\n        divisor = 2\n        count = 0\n        while divisor * divisor <= n:\n            if n % divisor == 0:\n                count += 1\n                print(divisor)\n            divisor += 1\n        return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            divisors += 1\n    return divisors\nprint('count_divisors(2) :',count_divisors(2))\nprint('count_divisors(6) :',count_divisors(6))\nprint('count_divisors(4) :',count_divisors(4))\nprint('count_divisors(10) :',count_divisors(10))\nprint('count_divisors(20) :',count_divisors(20))\nprint('count_divisors(9) :',count_divisors(9))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div = 0\n    for i in range(1, int(n/2) + 1) :\n        if (n % i == 0) :\n            div += 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            divisors += 1\n    if divisors % 2!= 0 : \n        print(\"Even\")\n    else : \n        print(\"Odd\")\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0:\n        return 'Even'\n    else :\n        return 'Odd'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j + 1 - i == len(arr[i:j+1]):\n                sum_odd += sum(arr[i:j+1])\n                break\n    print(sum_odd)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    sum_odd = 0\n    \n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum_odd = sum_odd + arr[i-1]\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i) % 2 == 1:\n                sum = sum + arr[i:j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(len(arr[i:j+1])%2!=0):\n                s+=sum(arr[i:j+1])\n    return s"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j+1-i >= 3:\n                sum += sum_subarray(arr, i, j)\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    \n    for i in range(0,len(arr)-2):\n        if (len(arr)-i)%2 == 1:\n            sum += arr[i]\n            \n    return sum\n    \ndef is_valid_paranthesis(string):\n    '''\n    Write a python function to check if a string has valid paranthesis or not\n    '''\n    if len(string)%2 == 1:\n        return False\n    \n    stack = []\n    \n    for s in string:\n        if s == \"(\" or s == \"[\" or s == \"{\":\n            stack.append(s)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == \"(\" and s == \")\") or (top == \"[\" and s == \"]\") or (top == \"{\" and s == \"}\"):\n                continue\n            else:\n                return False\n            \n    if stack:\n        return False\n    else:\n        return True\n    \ndef can_be_parenthesis(string):\n    '''\n    Write a python function to check if a string can be parenthesis or not\n    '''\n    stack = []\n    \n    for s in string:\n        if s == \"(\" or s == \"[\" or s == \"{\":\n            stack.append(s)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == \"(\" and s == \")\") or (top == \"[\" and s == \"]\") or (top == \"{\" and s == \"}\"):\n                continue\n            else:\n                return False\n            \n    if stack:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)-1):\n        if i%2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    odd_length_subarrays = []\n    for i in range(len(arr)):\n        if i == 0 or i == len(arr) - 1:\n            odd_length_subarrays.append(arr[i])\n        else:\n            odd_length_subarrays.append(arr[i] + arr[i-1] + arr[i-2])\n    for i in range(len(odd_length_subarrays)):\n        if i == 0 or i == len(odd_length_subarrays) - 1:\n            sum += odd_length_subarrays[i]\n        else:\n            sum += odd_length_subarrays[i] - odd_length_subarrays[i-1] - odd_length_subarrays[i-2]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(0, len(arr)):\n        if i == 0:\n            odd_sum += arr[i]\n        elif i % 2!= 0:\n            odd_sum += arr[i]\n        else:\n            continue\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    if not arr:\n        return s\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max = float(max(r, g, b))\n    min = float(min(r, g, b))\n    delta = max - min\n    \n    if delta == 0:\n        h = 0\n    elif max == r:\n        h = (60 * ((g - b)/delta) + 360) % 360\n    elif max == g:\n        h = (60 * ((b - r)/delta) + 120) % 360\n    elif max == b:\n        h = (60 * ((r - g)/delta) + 240) % 360\n    \n    if (max == 0):\n        s = 0\n    else:\n        s = delta / max\n    \n    v = max\n    \n    return h, s, v\n    \n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-convert-hsv-color-model-rgb-color-model/\n    '''\n    if s == 0.0:\n        v *= 255\n        if v > 255:\n            v = 255\n        return v, v, v\n    \n    i = h / 60\n    f = h / 60 + 1\n    p = v * (1 - s)\n    q = v * (1 - s * f)\n    t = v * (1 - s * (1 - f))\n    \n    if i == 0:\n        r, g, b = v, t, p\n    elif i == 1:\n        r, g, b = q, v, p\n    elif i == 2:\n        r, g, b = p, v, t\n    elif i == 3:\n        r, g, b = p, q, v\n    elif i == 4:\n        r, g, b = t, p, v\n    elif i == 5:\n        r, g, b = v, p, q\n    \n    r, g, b = int(r), int(g), int(b)\n    return r, g, b\n    \n    \ndef color_name_to_rgb(color_name):\n    if color_name == \"red\":\n        return 255, 0, 0\n    if color_name == \"green\":\n        return 0, 255, 0\n    if color_name == \"blue\":\n        return 0, 0, 255\n    if color_name == \"black\":\n        return 0, 0, 0\n    if color_name == \"white\":\n        return 255, 255, 255\n    if color_name == \"yellow\":\n        return 255, 255, 0\n    if color_name == \"purple\":\n        return 128, 0, 128\n    if color_name == \"brown\":\n        return 165, 42, 42\n    if color_name == \"orange\":\n        return 255, 165, 0\n    if color_name == \"pink\":\n        return 255, 192, 203\n    if color_name == \"gray\":\n        return 128, 128, 128\n    if color_name == \"lime\":\n        return 0, 255, 0\n    if color_name == \"teal\":\n        return 0, 128, 128\n    if color_name == \"coral\":\n        return 255, 127, 80\n    if color_name == \"silver\":\n        return 127, 127, 127\n    if color_name == \"maroon\":\n        return 128, 0, 0\n    if color_name == \"olive\":\n        return 128, 128, 0\n    if color_name == \"green yellow\":\n        return 154, 205, 50\n    if color_name == \"chartreuse\":\n        return 127, 255, 0\n    if color_name == \"navy\":\n        return 0, 0, 128\n    if color_name == \"blue violet\":\n        return 138, 43, 226\n    if color_name == \"deep pink\":\n        return 255, 20, 147\n    if color_name == \"medium orchid\":\n        return 186, 85, 211\n    if color_name == \"indigo\":\n        return 75, 0, 130\n    if color_name == \"medium blue\":\n        return 0, 0, 205\n    if color_name == \"purple red\":\n        return 127, 0, 0\n    if color_name == \"dark orchid\":\n        return 83, 45, 133\n    if color_name == \"medium slate blue\":\n        return 72, 209, 204\n    if color_name == \"blue violet\":\n        return 138, 43, 226\n    if color_name == \"slate blue\":\n        return 106, 90, 205\n    if color_name == \"medium purple\":\n        return 147, 112, 219\n    if color_name == \"deep sky blue\":\n        return 0, 191, 255\n    if color_name == \"plum\":\n        return 221, 160, 221\n    if color_name == \"violet red\":\n        return 208, 32, 144\n    if color_name == \"medium orchid\":\n        return 186, 85, 211\n    if color_name == \"purple red\":\n        return 160, 32, 240\n    if color_name == \"plum\":\n        return 221, 160, 221\n    if color_name == \"medium purple\":\n        return 147, 112, 219\n    if color_name == \"slate blue\":\n        return 106, 90, 205\n    if color_name == \"light slate blue\":\n        return 123, 104, 238\n    if color_name == \"medium slate blue\":\n        return 72, 209, 204\n    if color_name == \"yellow green\":\n        return 154, 205, 50\n    if color_name == \"chartreuse green\":\n        return 127, 255, 0\n    if color_name == \"pale turquoise\":\n        return 175, 238, 238\n    if color_name == \"dark turquoise\":\n        return 0, 206, 209\n    if color_name == \"turquoise\":\n        return 64, 224, 208\n    if color_name == \"medium sea green\":\n        return 60, 179, 113\n    if color_name == \"turquoise blue\":\n        return 0, 245, 255\n    if color_name == \"aqua\":\n        return 0, 255, 255\n    if color_name == \"cyan\":\n        return 0, 255, 255\n    if color_name == \"light cyan\":\n        return 122, 255, 112\n    if color_name == \"cadet blue\":\n        return 95, 158, 160\n    if color_name == \"cadet\":\n        return 95, 158, 160\n    if color_name == \"medium aquamarine\":\n        return 102, 205, 170\n    if color_name == \"aquamarine\":\n        return 127, 255, 212\n    if color_name == \"medium blue green\":\n        return 0, 0, 205\n    if color_name == \"medium orchid\":\n        return 85, 43, 226\n    if color_name == \"medium purple\":\n        return 147, 112, 219\n    if color_name == \"dark violet\":\n        return 148, 0, 211\n    if color_name == \"purple\":\n        return 160, 32, 240\n    if color_name == \"medium purple\":\n        return 143, 112, 219\n    if color_name == \"dark orchid\":\n        return 153, 50, 204\n    if color_name == \"violet red\":\n        return 208, 32, 144\n    if color_name == \"medium orchid\":\n        return 153, 50, 204\n    if color_name == \"plum\":\n        return 221, 160, 221\n    if color_name == \"slate blue\":\n        return 106, 90, 205\n    if color_name == \"turquoise blue\":\n        return 0, 250, 154\n    if color_name == \"dark turquoise\":\n        return 0, 206, 209\n    if color_name == \"medium aquamarine\":\n        return 102, 205, 170\n    if color_name == \"light turquoise\":\n        return 164, 221, 238\n    if color_name == \"azure\":\n        return 240, 255, 255\n    if color_name == \"aqua blue\":\n        return 0, 255, 255\n    if color_name == \"powder blue\":\n        return 176, 224, 230\n    if color_name == \"light turquoise\":\n        return 164, 221, 238\n    if color_name == \"steel blue\":\n        return 70, 130, 180\n    if colo"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # return [r, g, b]\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    if max_val == min_val:\n        return 0, 0, 0\n    elif max_val == r:\n        h = 0\n        s = ((g - b) / (max_val - min_val))\n    elif max_val == g:\n        h = (60 / (max_val - min_val)) + 120\n        s = ((b - r) / (max_val - min_val))\n    else:\n        h = ((max_val - r) / (max_val - min_val)) + 240\n        s = ((max_val - g) / (max_val - min_val))\n    \n    v = max_val\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    color = (r, g, b)\n    color = max(color, key=lambda x: x)\n    color = min(color, key=lambda x: x)\n    h = 0\n    s = 0\n    v = 0\n    if color[2] == 0:\n        s = 0\n    else:\n        s = color[2] / (max(color) + 1e-6)\n    c = 0.5 * (color[0] + color[1] + color[2])\n    h = c * 6.0 if c < 0.5 else c * (1.0 / 3.0) + 1.0\n    v = color[2]\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    v = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Step 1: Calculate V\n    V = max(r, g, b)\n    # Step 2: Calculate S\n    if V == 0:\n        S = 0\n    else:\n        S = V * (100.0 / 255.0)\n    # Step 3: Calculate H\n    if V == r:\n        H = (g - b) * 60\n    elif V == g:\n        H = (b - r) * 60\n    elif V == b:\n        H = (r - g) * 60\n    # Step 4: Calculate H\n    if H < 0:\n        H += 360\n    return (round(H / 360, 2), round(S / 100, 2), round(V / 100, 2))\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    r, g, b = r/255.0, g/255.0, b/255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # if r == g == b:\n    #     return (0, 0, 0)\n    r, g, b = float(r/255), float(g/255), float(b/255)\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    dc = maxc - minc\n    if maxc == minc:\n        h = 0\n        s = 0\n    else:\n        if dc == 0:\n            h = 0\n            s = 0\n        else:\n            s = dc/maxc\n            if r == maxc:\n                h = 60 * (((g - b)/dc) % 6)\n            elif g == maxc:\n                h = 60 * (((b - r)/dc) + 2)\n            else:\n                h = 60 * (((r - g)/dc) + 4)\n    return (h, s, maxc)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i%2==0:\n            even_num += i\n        else:\n            odd_num += i\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_number = 0\n    odd_number = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_number = even_number + i\n        else:\n            odd_number = odd_number + i\n    product = even_number * odd_number\n    print(product)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return print(prod(even), prod(odd))\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for num in list1:\n        if(num%2==0):\n            prod = prod*num\n        else:\n            prod = prod*num\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)<1:\n        return []\n    odd = []\n    even = []\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return (even,odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = even + num\n        else:\n            odd = odd + num\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_product = even_product * i\n        else:\n            odd_product = odd_product * i\n    return even_product,odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    product = even[0] * odd[0]\n    for num in range(1, len(even)):\n        product = product * even[num]\n    for num in range(1, len(odd)):\n        product = product * odd[num]\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1=sorted(list1)\n    sum1=0\n    for i in range(len(list1)):\n        if i%2==0:\n            sum1=sum1+list1[i]\n    sum2=0\n    for j in range(len(list1)):\n        if j%2!=0:\n            sum2=sum2+list1[j]\n    result=(sum1*sum2)\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    a=[]\n    i=0\n    while i<len(list1):\n        if list1[i]%2==0:\n            a.append(list1[i]*list1[i+1])\n            i+=1\n        else:\n            a.append(list1[i]*list1[i+1])\n            i+=2\n    return a\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_tup = test_str.split(',')\n    tup_int = []\n    for i in str_tup:\n        tup_int.append(int(i))\n    return tuple(tup_int)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str == None:\n        return None\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str == \"\":\n        return (0,0,0)\n    elif test_str[0] == '(':\n        test_str = test_str[1:]\n        test_list = test_str.split(',')\n        test_list = map(lambda x: int(x), test_list)\n        test_list = list(test_list)\n        test_list = tuple(test_list)\n        return test_list\n    elif test_str[0] == ')':\n        return (0,0,0)\n    else:\n        return (0,0,0)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    a = test_str.split(',')\n    b = []\n    for i in a:\n        b.append(int(i))\n    return tuple(b)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_list = test_str.split()\n    test_int_tuple = tuple([int(i) for i in test_str_list])\n    return test_int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tmp = test_str.split(\",\")\n    tmp = tuple(int(i) for i in tmp)\n    return tmp\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str.find('(') == -1:\n        return tuple(int(item) for item in test_str.split(','))\n    else:\n        test_list = list(test_str)\n        for i in range(len(test_list)):\n            if test_list[i] == ',':\n                test_list[i] =''\n        return tuple(int(item) for item in test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #return tuple(map(int, test_str))\n    #return int(\"\".join(test_str))\n    #return tuple(int(i) for i in test_str)\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # return eval(str(test_str))\n    return tuple(int(s) for s in str(test_str).split(','))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #code here\n    n = len(a)\n    if n==0:\n        return n\n    else:\n        if x<a[0]:\n            return 0\n        else:\n            i = 0\n            while i<n:\n                if x<a[i]:\n                    return i\n                else:\n                    i = i + 1\n            return i\ndef right_insertion_bisect(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #code here\n    n = len(a)\n    if n==0:\n        return n\n    else:\n        i = 0\n        while i<n:\n            if x<a[i]:\n                return i\n            else:\n                i = i + 1\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        a.append(x)\n        return\n    l = 0\n    r = len(a) - 1\n    m = bisect.bisect_left(a, x, l, r)\n    while m <= r and a[m] < x:\n        m += 1\n    a.insert(m, x)\n    return\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    k=bisect.bisect_right(a,x)\n    print(k)\n    if(a[k]==x):\n        return k\n    elif(a[k-1]<x):\n        return k\n    elif(a[k]<x):\n        return k-1\n    else:\n        return k\n    '''\n    Below is the pseudocode for the above algorithm.\n    k=0\n    for i in range(len(a)):\n        if a[i]==x:\n            return i\n        if a[i]<x:\n            k+=1\n    if k==0:\n        return 0\n    else:\n        return k\n    '''\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i:\n        return a[i-1]\n    else:\n        return a[0]\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i+1\ndef right_insertion_4(a, x):\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i-1\ndef left_insertion_4(a, x):\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left+right)//2\n        if a[mid] == x:\n            return mid\n        if a[mid] > x:\n            right = mid\n        if a[mid] < x:\n            left = mid\n    return right+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    size = len(a)\n    left_index = bisect.bisect_left(a,x)\n    if left_index == size:\n        return size\n    elif x > a[left_index]:\n        return left_index + 1\n    else:\n        return left_index\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub('ab', 'ba', text)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab+b+b',text)\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.findall('ab*b', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # return re.match(r'ab*b*',text)\n    return re.search('ab*b*',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'(ab)+b')\n    if(pattern.search(text)!= None):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_str = re.match(r'ab*b', text)\n    return match_str\nprint(text_match_three(\"bbababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab;.@#$%^&*()_+-=[]\\{}|,<>/\\;':,!?\\\"\u2019`\n    '''\n    # escape characters like ':' are escaped by \\, so need to remove them and then make the string and return.\n    return re.sub(r'\\\\\\\\','',text)\n    '''\n    # Additonals:\n    # 1. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 2. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 3. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 4. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 5. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 6. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 7. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 8. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 9. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 10. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 11. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 12. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 13. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 14. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 15. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 16. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 17. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 18. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 19. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 20. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 21. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 22. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 23. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 24. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 25. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 26. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 27. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 28. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 29. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 30. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 31. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 32. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 33. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 34. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 35. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 36. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 37. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 38. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 39. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 40. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 41. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 42. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 43. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 44. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 45. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 46. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 47. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 48. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 49. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 50. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 51. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 52. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 53. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 54. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 55. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 56. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 57. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 58. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 59. \\W{4,10} matches 4-10 non-alpha-numeric characters.\n    # 60. \\w{4,10} matches 4-10 alpha-numeric characters.\n    # 61. \\W{4,10} matches 4-1"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(\"^abb\",text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    result = re.search(pattern,text)\n    if result:\n        print(result)\n        return True\n    else:\n        print(result)\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    ans=re.findall(r'ab\\b',text)\n    return len(ans)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #return re.search(r\"ab*b\", text)\n    regex = r\"ab*b\"\n    return bool(re.match(regex, text))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str, *test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = list(test_list)\n    test_str = list(test_str)\n    test_list.extend(test_str)\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = []\n    for i in test_str:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str), tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for i in range(0, len(test_list)):\n        new_tuple += (test_list[i],)\n    \n    new_tuple += (test_str,)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(x%2==0 for x in nums[::2])\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    for i in range(0, len(nums)):\n        if nums[i]%2 == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1) % 2 == 1:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return (all(i%2==0 for i in nums))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (t[0] for t in test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup.pop(0)\n    print(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0], remove_nested(test_tup[1:])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Your code here\n    return tuple(tup for tup in test_tup if tup[0]!= test_tup[0])\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == ():\n            test_tup[i] = count\n            count += 1\n        elif test_tup[i] is None:\n            test_tup[i] = count\n            count += 1\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    # get value of last element of tuple\n    last_element = test_tup[-1]\n    \n    # remove last element\n    test_tup = test_tup[0:-1]\n    \n    # return tuple\n    return test_tup + (last_element, )\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if isinstance(i,tuple):\n            remove_nested(i)\n        else:\n            print(i)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    i = 0\n    if type(test_tup)!= tuple:\n        test_tup = (test_tup,)\n    while True:\n        if type(test_tup[i]) == tuple:\n            if len(test_tup) == 1:\n                break\n            test_tup = test_tup[i]\n        else:\n            test_tup = test_tup[i:]\n            break\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    my_tup = test_tup\n    final_list = []\n    for i in my_tup:\n        if isinstance(i, tuple):\n            for j in i:\n                final_list.append(j)\n        else:\n            final_list.append(i)\n    return tuple(final_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    n_list = 0\n    if len(input_list) == 0:\n        return 0\n    elif type(input_list) == str:\n        return 0\n    elif type(input_list) == int:\n        return 0\n    elif type(input_list) == float:\n        return 0\n    elif type(input_list) == list:\n        return len(input_list)\n    elif type(input_list) == tuple:\n        return len(input_list)\n    elif type(input_list) == set:\n        return len(input_list)\n    elif type(input_list) == dict:\n        return len(input_list)\n    else:\n        for i in input_list:\n            if type(i) == list:\n                n_list = n_list + 1\n    return n_list\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) is list:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list)!= list:\n        raise TypeError(\"The input should be of type list\")\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if x in arr:\n    #     return arr.index(x)\n    # else:\n    #     return -1\n    if arr == None or len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    \n    # Base condition\n    if n<2:\n        return -1\n    \n    # Check for the element to be found\n    if x == arr[n-1]:\n        return n-1\n    \n    # Binary search\n    low = 0\n    high = n-1\n    \n    while low <= high:\n        mid = (high+low)//2\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = low + (high-low)//2\n        if arr[mid] == x:\n            if mid==0 or arr[mid-1]!=arr[mid]:\n                return mid\n            high=mid-1\n        elif arr[mid]<x:\n            low = mid + 1\n        else:\n            high = mid -1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr)-1\n    while(l<=r):\n        mid = (l+r)//2\n        if arr[mid] > x:\n            r = mid-1\n        elif arr[mid] < x:\n            l = mid+1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return -1\n    if n==2:\n        if arr[0]==x:\n            return 0\n        elif arr[1]==x:\n            return 1\n        else:\n            return -1\n    mid=int(n/2)\n    if arr[mid]==x:\n        return mid\n    elif arr[mid]>x:\n        return last(arr[:mid],x)\n    else:\n        return last(arr[mid+1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    start=0\n    end=n-1\n    while(start<=end):\n        mid=(start+end)//2\n        if(arr[mid]==x):\n            if(mid==n-1 or arr[mid+1]<x):\n                return mid\n            else:\n                end=mid-1\n        elif(arr[mid]<x):\n            start=mid+1\n        else:\n            end=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr.sort()\n    if len(arr)==0:\n        return -1\n    n=len(arr)\n    for i in range(n-1):\n        if arr[i]>x:\n            return i\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<j:\n        mid = (i+j)//2\n        if arr[mid]==x:\n            break\n        elif arr[mid]<x:\n            i = mid+1\n        else:\n            j = mid-1\n    if arr[mid]==x:\n        return mid\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = n-1\n    while i>=0:\n        if arr[i]==x:\n            return i\n        i -= 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #case 1: check if x is in arr\n    #case 2: if it is, return the position\n    #case 3: otherwise, use binary search\n    #case 3: for some reason, there is an error when i = 0\n    #print(\"case 1:\",arr,x)\n    i = 0\n    if arr==[]:\n        return None\n    #case 2\n    if x<arr[0]:\n        return 0\n    #case 3\n    while i<len(arr):\n        #print(\"case 3:\",arr,i,x)\n        if x==arr[i]:\n            return i\n        #case 3: get next element\n        if x<arr[i]:\n            return i-1\n        i+=1\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    print(re.match(pattern, text))\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    try:\n        f_text = re.findall(r\"a\\w+b\", text)\n        print(f_text)\n    except TypeError:\n        print(\"TypeError occured\")\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.match('a.*b', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'a[^b]b',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('a.*b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.match(r\"(?:a)+?b\", text)\n    if result:\n        print(result.group(0))\n    else:\n        print(\"no\")\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_pattern = re.compile(r'a.*b$')\n    matches = text_pattern.finditer(text)\n    print(list(matches))\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a[^b]*b',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    result = re.search('^a.*b$', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_regex = re.compile(r'a')\n    b_regex = re.compile(r'b')\n    \n    found = re.search(a_regex, text)\n    #found = re.search(r'a', text)\n    \n    if found:\n        #print(found.group())\n        if (found.group() == 'a') and (re.search(b_regex, text[found.span()[1]+1:])):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # NOTE: sum_of_dict = 0\n    # YOUR CODE GOES HERE\n    sum_of_dict = 0\n    for key in dict.keys():\n        sum_of_dict += dict[key]\n    return sum_of_dict\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    print('Enter the number of items in the dictionary:')\n    n = int(input())\n    print('Enter the dictionary items:')\n    dict = dict.fromkeys(list(map(int,input().split())))\n    print('Entered values in the dictionary are:')\n    for i in dict:\n        print('{}: {}'.format(i,dict[i]))\n    print('Sum of the entered dictionary items is: {}'.format(sum(dict.values())))\n    return None\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n    \n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_values = 0\n    for value in dict.values():\n        sum_of_values += value\n    return sum_of_values\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for num in dict.values():\n        sum += num\n    return sum\nprint(return_sum({1: 2, 2: 3, 3: 4, 4: 5, 5: 6}))\nprint(return_sum({\"apple\": 1, \"berry\": 2, \"kiwi\": 3}))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if len(dict) == 0:\n        return 0\n    else:\n        return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_values = 0\n    for key,value in dict.items():\n        sum_of_values += value\n    return sum_of_values\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\nprint(return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n-1) if i%2!=0)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Calculate sum for range l to r\n    sum = 0\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            sum += i\n    print(\"Sum of odd numbers between {} and {} is {}\".format(l, r, sum))\n    return sum\n    \n    \ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    # Calculate sum for range l to r\n    sum = 0\n    for i in range(l, r + 1):\n        if i % 2 == 0:\n            sum += i\n    print(\"Sum of even numbers between {} and {} is {}\".format(l, r, sum))\n    return sum\n    \n    \ndef avg_sum(n):\n    '''\n    Write a python function to find the average of the sums of all natural numbers between l and r.\n    '''\n    # Calculate average for range l to r\n    sum = 0\n    for i in range(l, r + 1):\n        sum += i\n    print(\"Average of sums of all natural numbers between {} and {} is {}\".format(l, r, sum / (r - l)))\n    return sum / (r - l)\n    \n    \ndef median(n):\n    '''\n    Write a python function to find the median of the given set.\n    '''\n    # Calculate median for range l to r\n    array = []\n    for i in range(l, r + 1):\n        array.append(i)\n    array.sort()\n    if len(array) % 2 == 1:\n        return array[int((len(array) + 1) / 2)]\n    else:\n        return array[int(len(array) / 2)]\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    # Calculate fibonacci for range l to r\n    array = []\n    array.append(0)\n    array.append(1)\n    for i in range(2, n):\n        array.append(array[i - 1] + array[i - 2])\n    print(\"Fibonacci number {} is {}\".format(n, array[n]))\n    return array[n]\n    \n    \ndef reverse_string(n):\n    '''\n    Write a python function to find the reverse of the given string.\n    '''\n    # Calculate reverse for range l to r\n    array = []\n    for i in n:\n        array.append(i)\n    array.reverse()\n    print(\"Reverse of given string '{}' is '{}'\".format(n, ''.join(array)))\n    return ''.join(array)\n    \n    \ndef rotate_string(n, k):\n    '''\n    Write a python function to find the rotation of the given string by k number of positions.\n    '''\n    # Calculate rotation for range l to r\n    array = []\n    for i in n:\n        array.append(i)\n    array = array[k:] + array[:k]\n    print(\"String '{}' rotated {} times is '{}'\".format(n, k, ''.join(array)))\n    return ''.join(array)\n    \n    \ndef count_words(n, string):\n    '''\n    Write a python function to count the number of occurrences of each word in the given string.\n    '''\n    # Calculate count for each word in range l to r\n    words = string.split()\n    dictionary = {}\n    for i in words:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    print(\"The number of occurences of each word in the given string is '{}'\".format(dictionary))\n    return dictionary\n    \n    \ndef average_word(n, string):\n    '''\n    Write a python function to find the average length of each word in the given string.\n    '''\n    # Calculate average for each word in range l to r\n    words = string.split()\n    dictionary = {}\n    for i in words:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    for i in dictionary:\n        dictionary[i] = dictionary[i] / len(i)\n    print(\"The average length of each word in the given string is '{}'\".format(dictionary))\n    return dictionary\n    \n    \ndef all_vowels(n):\n    '''\n    Write a python function to find all the vowels in a given string.\n    '''\n    # Calculate vowel for each vowel in range l to r\n    vowels = 'aeiou'\n    vowel = []\n    for i in range(n):\n        if n[i] in vowels:\n            vowel.append(n[i])\n    print(\"All the vowels in the given string is '{}'\".format(vowel))\n    return vowel\n    \n    \ndef all_vowels_s(n):\n    '''\n    Write a python function to find all the vowels in a given string.\n    '''\n    # Calculate vowel for each vowel in range l to r\n    vowels = 'aeiou'\n    vowel = []\n    for i in range(len(n)):\n        if n[i] in vowels:\n            vowel.append(n[i])\n    print(\"All the vowels in the given string is '{}'\".format(vowel))\n    return vowel\n    \n    \ndef all_vowels_m(n):\n    '''\n    Write a python function to find all the vowels in a given string.\n    '''\n    # Calculate vowel for each vowel in range l to r\n    vowels = 'aeiou'\n    vowel = []\n    for i in n:\n        if i in vowels:\n            vowel.append(i)\n    print(\"All the vowels in the given string is '{}'\".format(vowel))\n    return vowel\n    \n    \ndef capital_letter(n):\n    '''\n    Write a python function to find all the capital letters in a given string.\n    '''\n    # Calculate capital letter for each capital letter in range l to r\n    capital_letters = []\n    for i in n:\n        if i.isupper():\n            capital_letters.append(i)\n    print(\"All the capital letters in the given string is '{}'\".format(capital_letters))\n    return capital_letters\n    \n    \ndef all_capital_letter(n):\n    '''\n    Write a python function to find all the capital letters in a given string.\n    '''\n    # Calculate capital letter for each capital letter in range l to r\n    capital_letters = []\n    for i in n:\n        if i.isupper():\n            capital_letters.append(i)\n    print(\"All the capital letters in the given string is '{}'\".format(capital_letters))\n    return capital_letters\n    \n    \ndef find_largest_in_list(n):\n    '''\n    Write a python function to find the largest integer in a given list.\n    '''\n    # Calculate largest for list\n    largest = n[0]\n    for i in range(1, len(n)):\n        if n[i] > largest:\n            largest = n[i]\n    print(\"The largest element in the given list is '{}'\".format(largest))\n    return largest\n    \n    \ndef find_smallest_in_list(n):\n    '''\n    Write a python function to find the smallest integer in a given list.\n    '''\n    # Calculate smallest for list\n    smallest = n[0]\n    for i in range(1, len(n)):\n        if n[i] < smallest:\n            smallest = n[i]\n    print(\"The smallest element in the given list is '{}'\".format(smallest))\n    return smallest\n    \n    \ndef find_average_in_list(n):\n    '''\n    Write a python function to find the average of all the integers in a given list.\n    '''\n    # Calculate average for each number in range l to r\n    sum = 0\n    for i in n:\n    "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        print(n)\n    else:\n        print(n, end = ',')\n        \n        for i in range(2,n+1,2):\n            print(i, end = ',')\n            \n        print()\n        \n        \nsum_odd(1)\nsum_odd(10)\nsum_odd(5)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<0:\n        return 'Invalid Input'\n    else:\n        return n*(n+1)//2\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1:\n        return 0\n    odd_sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            odd_sum += i\n    return odd_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2!=0):\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    if n>=1 and n<=10**4:\n        for i in range(n):\n            if i%2!=0:\n                odd_sum+=i\n        print(odd_sum)\n    else:\n        print(\"Invalid input\")\nsum_odd(3)\nsum_odd(1)\nsum_odd(3.1)\nsum_odd(1.1)\nsum_odd(-1)\nsum_odd(-3)\nsum_odd(-1.1)\nsum_odd(5)\nsum_odd(10)\nsum_odd(100)\nsum_odd(1000000)\nsum_odd(100000000)\nsum_odd(100000000000000)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(n + 1) if x % 2 == 1)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    print(n)\n    print(n+1)\n    print(n+2)\n    print(n+3)\n    print(n+4)\n    print(n+5)\n    print(n+6)\n    print(n+7)\n    print(n+8)\n    print(n+9)\n    print(n+10)\n    \n    \n    return n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+n+"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 1:\n        return n + sum_odd(n-1)\n    else:\n        return 1\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s=s+i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total=0\n    for item in arr:\n        total+=item\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s = s + arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in arr:\n        sum=sum+i\n    print(sum)\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for elem in arr:\n        sum += elem\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for x in arr:\n        s += x\n    return s\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> 32-d)) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def left_shift(n):\n        return n << d\n    n_shifted = left_shift(n)\n    return (n_shifted & n)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 1:\n        return n\n    n = n & ((1 << (d - 1)) - 1) # should not need to wrap around\n    n = n << 1\n    return n | ((n >> (d)) & 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    if d > 0:\n        d_bits = 0\n        while d_bits < 32:\n            last_bit = n >> d_bits\n            n = (n << 1) | (last_bit >> 1)\n            d_bits += 1\n        return n\n    if d < 0:\n        d_bits = 0\n        while d_bits < 32:\n            last_bit = n >> d_bits\n            n = (n << 1) | (last_bit >> 1)\n            d_bits += 1\n        d_bits = 32 - d_bits\n        n = (n << d_bits) | ((1 << d_bits) - 1)\n        return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    return n & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a = n >> d\n    b = (n << (32 - d)) & ((1 << 32) - 1)\n    return b | a\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d==0:\n        return n\n    elif d==32:\n        return 0\n    else:\n        return ((n << d)|(n >> (32-d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32-d))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text=text.strip()\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = re.sub(r'\\s+', '', text)\n    return result\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # \n    # Your Code Here\n    #\n    \n    # Remove all occurrences of spaces\n    text = re.sub(\"\\s+\", \" \", text)\n    \n    # Remove leading and trailing spaces\n    text = text.strip()\n    \n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    space = re.compile(r'\\s+')\n    text = space.sub('',text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count = count+1\n    elif y == x and y == z:\n        count = count + 1\n    else:\n        count = count + 0\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if x == y == z:\n        count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print(\"No. of equal numbers are: \", x + y + z)\n    else:\n        print(\"No. of equal numbers are: \", 0)\n    \n    \ndef test_three_not_equal(x,y,z):\n    '''\n    Write a python function to count the number of different numbers from three given integers.\n    '''\n    if x!= y!= z:\n        print(\"No. of different numbers are: \", x + y + z)\n    else:\n        print(\"No. of different numbers are: \", 0)\n        \n        \ndef test_three_positive(x,y,z):\n    '''\n    Write a python function to count the number of positive numbers from three given integers.\n    '''\n    if x > y > z:\n        print(\"No. of positive numbers are: \", x + y + z)\n    elif y > x > z:\n        print(\"No. of positive numbers are: \", x + y + z)\n    else:\n        print(\"No. of positive numbers are: \", x + y + z)\n        \n        \ndef test_three_negative(x,y,z):\n    '''\n    Write a python function to count the number of negative numbers from three given integers.\n    '''\n    if x < y < z:\n        print(\"No. of negative numbers are: \", x + y + z)\n    elif y < x < z:\n        print(\"No. of negative numbers are: \", x + y + z)\n    else:\n        print(\"No. of negative numbers are: \", x + y + z)\n        \n        \ndef test_three_str(x,y,z):\n    '''\n    Write a python function to count the number of strings from three given integers.\n    '''\n    if x == y == z:\n        print(\"No. of strings are: \", x + y + z)\n    else:\n        print(\"No. of strings are: \", 0)\n        \n    \ndef test_three_number(x,y,z):\n    '''\n    Write a python function to count the number of numbers from three given integers.\n    '''\n    if x!= y!= z:\n        print(\"No. of numbers are: \", x + y + z)\n    else:\n        print(\"No. of numbers are: \", 0)\n    \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x\n    b = y\n    c = z\n    if (a == b) and (a == c) and (b == c):\n        print('Equal numbers')\n    else:\n        print('No equal numbers')\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    return x == y == z\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    if n <= 1:\n        return count\n    \n    start = 0\n    end = n - 1\n    \n    while start < end:\n        if arr[start] < arr[end]:\n            count += 1\n            start += 1\n        else:\n            arr[start], arr[end] = arr[end], arr[start]\n            count += 1\n            end -= 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # if array is not sorted\n    if len(arr) == 1 or arr[0] > arr[1]:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    c = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    print(\"Original Array:\",arr)\n    n = len(arr)\n    \n    # TODO: Write your solution here\n    # Calculate the number of rotations required\n    if n == 1:\n        return 0\n    \n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n    \n    count = 1\n    # count = 1 + (count of rotation to the right)\n    right = 1\n    while right < n:\n        left = 0\n        while left < n - 1:\n            if arr[left] > arr[left + 1]:\n                break\n            left += 1\n        # when a greater element is found\n        if left == n - 1:\n            break\n        # when no greater element is found\n        # (only possible when length of array is 2)\n        if left == 0:\n            return count\n        # when a smaller element is found\n        if arr[left - 1] < arr[left]:\n            while left < n - 1 and arr[left] <= arr[left + 1]:\n                left += 1\n            # when smaller element is found\n            # (only possible when length of array is 2)\n            if left == n - 1:\n                return count\n            if left > 0 and arr[left - 1] > arr[left]:\n                return count\n            # when the element is not found,\n            # increment count\n            count += 1\n        right += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    '''\n    #SOLUTION:\n    1) We can use two pointers to traverse the array: 1st and 2nd.\n    2) If arr[0] < arr[1], increment count by 1.\n    3) If arr[0] >= arr[1], then decrement count by 1.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Your code here\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        mid = (start+end)//2\n        if arr[mid] > arr[end]:\n            start = mid+1\n        elif arr[mid] < arr[end]:\n            end = mid\n        else:\n            end -= 1\n    \n    return end + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # code here\n    if len(arr) == 0:\n        return 0\n    if arr == sorted(arr):\n        return 0\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] > arr[i+1]:\n            # need to swap\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # code here\n    res=0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            res+=1\n    return res\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    if (n <= 1):\n        return 0\n    start = 0\n    end = n - 1\n    while (start < end):\n        count = count + 1\n        if (arr[start] <= arr[end]):\n            start = start + 1\n        else:\n            tmp = arr[start]\n            arr[start] = arr[end]\n            arr[end] = tmp\n            end = end - 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Number of elements in the array\n    size = len(arr)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    x = int(math.sqrt(n))\n    return x*x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #Ans: Not a perfect square\n    return (n**0.5).is_integer()\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Naive Solution\n    # square = int(sqrt(n))\n    # return square*square == n\n    \n    # Leetcode Solution\n    x = n\n    while x >= 10:\n        x = (x + (x % 10)) // 10\n    return x*x == n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # To take input from the user\n    #n = int(input(\"Enter a number: \"))\n    \n    # define a variable to control loop\n    control = 1\n    \n    # find the square root of the number\n    # using Newton's method\n    while (control <= n) :\n        # calculate the square root\n        # this can be improved\n        x = n / control\n        \n        # check if the sqrt(x) is\n        # less than or equal to 1\n        if (x >= 1) :\n            return 1\n        else :\n            # if x is less than 1,\n            # then control = control + 1\n            control = control + 1\n            \n    # if control has reached the value\n    # of n, then n is not a perfect\n    # square number.\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    left, right = 1, n\n    while left <= right:\n        mid = left + (right - left)//2\n        if mid**2 == n:\n            return True\n        elif mid**2 < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(sqrt(n))\n    if root * root == n :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n<0) : return False\n    #start with n as the square root of n\n    for i in range(n):\n        if (n == (i*i)) :\n            return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Code here\n    \n    i = 1\n    j = n\n    while i <= j :\n        if i ** 2 == n:\n            return True\n        i += 1\n    return False\n    "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        n = -n\n    if n < 2 :\n        return True\n    for i in range(2, n//2) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0):\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = True\n    if len(arr) == 0:\n        return result\n    else:\n        result = False\n        if arr[0] == 1:\n            return result\n        else:\n            for i in range(1,len(arr)):\n                if i == 0:\n                    continue\n                if arr[i] == 1:\n                    continue\n                if arr[i] % 2 == 1:\n                    return False\n                if arr[i] == 0:\n                    result = True\n                    break\n    return result\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if (len(arr) == 0):\n        return None\n    return all(i%2==0 for i in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) > 0:\n        product = 1\n        for i in arr:\n            product *= i\n        if product % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    numbers = arr[:]\n    numbers.sort(reverse = True)\n    if numbers[0]!= 1:\n        numbers.pop(0)\n    return numbers[0]%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if not isinstance(arr,list):\n        return False\n    if not arr:\n        return False\n    if len(arr) == 1:\n        return True\n    for i in range(0,len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True if arr[0] % 2 == 0 else False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        return is_product_odd(arr) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if(arr[i]%2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return False\n    return is_even(arr)\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    current_sum = 0\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if max_sum < current_sum:\n            max_list = lists[i]\n            max_sum = current_sum\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list\n    \ndef max_sum_list_list(lists):\n    '''\n    Write a function that returns a list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        for j in i:\n            if j > max_sum:\n                max_sum = j\n        if max_sum > max_sum:\n            max_list = i\n        max_sum = 0\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for list in lists:\n        list_sum = sum(list)\n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = []\n        elif list_sum == max_sum:\n            max_list.append(list)\n    return max_list\n    \ndef max_sum_list_2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for list in lists:\n        max_sum = max(max_sum, sum(list))\n        if max_sum == sum(list):\n            max_list.append(list)\n    return max_list\n    \ndef max_sum_list_3(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for list in lists:\n        max_sum = max(max_sum, sum(list))\n        if max_sum == sum(list):\n            max_list.append(list)\n    return max_list\n    \n    "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = 0\n    for l in lists:\n        temp = max(l)\n        if temp > highest:\n            highest = temp\n    return highest\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = None\n    sorted_lists = []\n    while lists:\n        highest_sum = max(lists[0], highest_sum)\n        sorted_lists.append(highest_sum)\n        lists.remove(highest_sum)\n    return sorted_lists\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    largest_sum = -9999999999\n    max_sum_list = []\n    for i in range(len(lists)):\n        if largest_sum < sum(lists[i]):\n            largest_sum = sum(lists[i])\n            max_sum_list = lists[i]\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for i in range(len(lists)-1):\n        for j in range(i+1,len(lists)):\n            if sum(lists[i]) + sum(lists[j]) > sum(lists[i]):\n                lists[i] = lists[i] + lists[j]\n                lists.remove(lists[j])\n            else:\n                lists[i] = lists[i] + lists[i]\n                lists.remove(lists[i])\n    return lists\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    n = len(lists)\n    max_sum = float('-inf')\n    max_sum_list = None\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    d={}\n    if test_str=='':\n        return 0\n    for i in range(len(test_str)):\n        if test_str[i] not in d:\n            d[test_str[i]]=1\n        else:\n            d[test_str[i]]+=1\n    for i in d:\n        if d[i]==1:\n            return 1\n    return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_count = 0\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n            if count > max_run_count:\n                max_run_count = count\n        else:\n            count = 0\n    return max_run_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Your Code Here\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str is None or len(test_str) == 0:\n        return 0\n    \n    max_uppercase = 0\n    start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            if i == 0 or test_str[i - 1]!= test_str[i]:\n                start = i\n            else:\n                max_uppercase = max(max_uppercase, i - start + 1)\n    return max_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # your code here\n    return max(len(i) for i in test_str.split())\n    # return max(i for i in range(1, len(test_str) - 1) if test_str[i].isupper() and test_str[i - 1] == test_str[i + 1].islower()) + 1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) < 1:\n        return 0\n    curr_idx = 0\n    max_idx = 0\n    while curr_idx < len(test_str):\n        idx = test_str.find('A', curr_idx)\n        if idx > 0:\n            if idx < max_idx:\n                max_idx = idx\n        curr_idx = idx + 1\n    return max_idx\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == None:\n        return -1\n    if len(test_str) == 0:\n        return -1\n    \n    max_run = -1\n    start = -1\n    end = -1\n    \n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        elif test_str[i] >= 'a' and test_str[i] <= 'z':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        else:\n            if max_run < 0:\n                start = i\n            elif max_run > 0:\n                end = i\n                max_run = 0\n                break\n    \n    if start > -1 and end > -1:\n        return test_str[start:end+1]\n    else:\n        return -1\n    \n    \ndef max_run_special_chars(test_str):\n    '''\n    Write a function to find maximum run of special characters in the given string.\n    '''\n    if test_str == None:\n        return -1\n    if len(test_str) == 0:\n        return -1\n    \n    max_run = -1\n    start = -1\n    end = -1\n    \n    for i in range(len(test_str)):\n        if test_str[i] >= '!':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        elif test_str[i] == '?':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        elif test_str[i] == '@':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        elif test_str[i] =='':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        else:\n            if max_run < 0:\n                start = i\n            elif max_run > 0:\n                end = i\n                max_run = 0\n                break\n    \n    if start > -1 and end > -1:\n        return test_str[start:end+1]\n    else:\n        return -1\n    \n    \ndef max_run_spaces(test_str):\n    '''\n    Write a function to find maximum run of spaces in the given string.\n    '''\n    if test_str == None:\n        return -1\n    if len(test_str) == 0:\n        return -1\n    \n    max_run = -1\n    start = -1\n    end = -1\n    \n    for i in range(len(test_str)):\n        if test_str[i] =='':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        else:\n            if max_run < 0:\n                start = i\n            elif max_run > 0:\n                end = i\n                max_run = 0\n                break\n    \n    if start > -1 and end > -1:\n        return test_str[start:end+1]\n    else:\n        return -1\n    \n    \ndef max_run_non_alpha_numeric(test_str):\n    '''\n    Write a function to find maximum run of non-alphanumeric characters in the given string.\n    '''\n    if test_str == None:\n        return -1\n    if len(test_str) == 0:\n        return -1\n    \n    max_run = -1\n    start = -1\n    end = -1\n    \n    for i in range(len(test_str)):\n        if test_str[i] >= '0' and test_str[i] <= '9' or test_str[i] >= 'a' and test_str[i] <= 'z' or test_str[i] >= 'A' and test_str[i] <= 'Z' or test_str[i] >= '0' and test_str[i] <= '9' or test_str[i] >= 'a' and test_str[i] <= 'z' or test_str[i] >= 'A' and test_str[i] <= 'Z' or test_str[i] >= '0' and test_str[i] <= '9' or test_str[i] >= 'a' and test_str[i] <= 'z' or test_str[i] >= 'A' and test_str[i] <= 'Z':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        else:\n            if max_run < 0:\n                start = i\n            elif max_run > 0:\n                end = i\n                max_run = 0\n                break\n    \n    if start > -1 and end > -1:\n        return test_str[start:end+1]\n    else:\n        return -1\n    \n    \ndef max_run_unordered_alphanumeric(test_str):\n    '''\n    Write a function to find maximum run of unordered alphanumeric characters in the given string.\n    '''\n    if test_str == None:\n        return -1\n    if len(test_str) == 0:\n        return -1\n    \n    max_run = -1\n    start = -1\n    end = -1\n    \n    for i in range(len(test_str)):\n        if test_str[i] >= '0' and test_str[i] <= '9' or test_str[i] >= 'a' and test_str[i] <= 'z' or test_str[i] >= 'A' and test_str[i] <= 'Z' or test_str[i] >= '0' and test_str[i] <= '9' or test_str[i] >= 'a' and test_str[i] <= 'z' or test_str[i] >= 'A' and test_str[i] <= 'Z':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        elif test_str[i] >= 'A' and test_str[i] <= 'Z' or test_str[i] >= 'a' and test_str[i] <= 'z' or test_str[i] >= 'A' and test_str[i] <= 'Z':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        else:\n            if max_run < 0:\n                start = i\n            elif max_run > 0:\n                end = i\n                max_run = 0\n                break\n    \n    if start > -1 and end > -1:\n        return test_str[start:end+1]\n    else:\n        return -1\n    \n    \ndef max_run_text_whitespace(test_str):\n    '''\n    Write a function to find maximum run of text whitespace characters in the given string.\n    '''\n    if test_str == None:\n        return -1\n    if len(test_str) == 0:\n        return -1\n    \n    max_run = -1\n    start = -1\n    end = -1\n    \n    for i in range(len(test_str)):\n        if test_str[i] >='':\n            if max_run < 0:\n                max_run = 1\n                start = i\n            else:\n                max_run += 1\n        else:\n            if max_run < 0:\n                start = i\n            elif max_run > 0:\n                end = i\n                max_run = 0\n                break\n    \n    if start > -1 and end > -1:\n        return test_str[start:end+1]\n    else:\n    "
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    ans=[]\n    tmp=0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            tmp=tmp+1\n        else:\n            ans.append(tmp)\n            tmp=0\n    if tmp!=0:\n        ans.append(tmp)\n    return max(ans)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            count += 1\n        else:\n            if count > 1:\n                return max(count, i - count)\n            else:\n                count = 1\n    if count > 1:\n        return max(count, len(test_str) - count)\n    else:\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    res = 0\n    pre_max_run = 0\n    cur_max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            cur_max_run = cur_max_run + 1\n            if cur_max_run > pre_max_run:\n                pre_max_run = cur_max_run\n        else:\n            cur_max_run = 0\n    return pre_max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count = 0\n    for x in range(len(nums)):\n        if nums[x] % 2!= 0:\n            count = x\n            break\n    return nums[count]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next(i for i in nums if i%2 ==1)\n    \ndef long_even(words):\n    '''\n    Write a python function to find the longest common prefix string among multiple given words.\n    '''\n    return \"\".join(sorted(set(words))[0])\n    \ndef sum_of_squares(nums):\n    '''\n    Write a python function to calculate the sum of squares of a list of numbers.\n    '''\n    return sum(num**2 for num in nums)\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    result = None\n    for num in nums:\n        if num % 2 == 1:\n            result = num\n            break\n    return result\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if i == 0 and nums[i]%2 == 1:\n            return nums[i]\n        if nums[i]%2!= 0 and nums[i]!= nums[i-1]:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n        else:\n            continue\n    else:\n        print(\"No odd number found\")\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K and test_tup[1] == K:\n        return True\n    elif test_tup[0] == K and test_tup[1]!= K:\n        return True\n    elif test_tup[0]!= K and test_tup[1] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if K in test_tup else False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 'k' or K == 'K':\n        try:\n            if len(test_tup[0]) == 3 and len(test_tup[1]) == 3 and len(test_tup[2]) == 3:\n                return True\n            else:\n                return False\n        except:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K or test_tup[1] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n    \ndef check_M(test_tup, M):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if M in test_tup:\n        return True\n    else:\n        return False\n    \ndef check_P(test_tup, P):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_KM(test_tup, K, M):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup and M in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PK(test_tup, P, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and K in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQ(test_tup, P, Q):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQK(test_tup, P, Q, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM(test_tup, P, Q, K, M):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_PQ(test_tup, P, Q, K, M, PQ):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and PQ in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_Q(test_tup, P, Q, K, M, QQ):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and QQ in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_K(test_tup, P, Q, K, M, KK):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and KK in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_M(test_tup, P, Q, K, M, MQ):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and MQ in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_MQ(test_tup, P, Q, K, M, MQ, QQ):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and MQ in test_tup and QQ in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_MQK(test_tup, P, Q, K, M, MQ, KK):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and MQ in test_tup and KK in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_MQKM(test_tup, P, Q, K, M, MQ, KK, MQM):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and MQ in test_tup and KK in test_tup and MQM in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_PQ(test_tup, P, Q, K, M, PQ):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and PQ in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_Q(test_tup, P, Q, K, M, QQ):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and QQ in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_K(test_tup, P, Q, K, M, KK):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and KK in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_KM(test_tup, P, Q, K, M, KM):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and KM in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_KMM(test_tup, P, Q, K, M, KMM):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and KMM in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_M(test_tup, P, Q, K, M, MQ):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if P in test_tup and Q in test_tup and K in test_tup and M in test_tup and MQ in test_tup:\n        return True\n    else:\n        return False\n        \ndef check_PQKM_MQ(test_tup, P, Q, K, M, MQ, QQ):\n    '"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K and test_tup[1] == K:\n        return 1\n    elif test_tup[0] == K or test_tup[1] == K:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if test_tup[1] == K else False\n    \ndef check_K_pairs(test_tup, K):\n    '''\n    Write a function to check if the given pairs contain the k or not.\n    '''\n    return True if (test_tup[0],test_tup[1]) in K else False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    A, B = test_tup\n    A = set(A)\n    B = set(B)\n    k = True\n    if A.intersection(B) == {K}:\n        k = False\n    else:\n        k = True\n    return k\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return True\n    return False\n    \n    \n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        if ele1 >= ele2:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            print(\"{0} {1}\".format(test_tup1[i], test_tup2[i]))\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_bool = False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            test_bool = True\n        else:\n            test_bool = False\n            break\n    return test_bool\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(tup1 < tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    \n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    elif test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] > test_tup2[1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0] or test_tup1[1] > test_tup2[1]:\n        return False\n    elif test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        if test_list1[i] < test_list2[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n    return True\n"
    }
]