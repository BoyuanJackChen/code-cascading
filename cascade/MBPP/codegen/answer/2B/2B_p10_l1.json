[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create a set for test_tup1\n    test_set1 = set(test_tup1)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # Create a dictionary from test_tup1 to avoid using list\n    # again and again in the loop\n    dct = dict(zip(test_tup1, range(len(test_tup1))))\n    # Test 2 tuple\n    for i in test_tup2:\n        # If dct contains i, then remove the i\n        if dct.get(i):\n            # Delete the value in dct\n            del dct[i]\n    # Now dct should be empty\n    if len(dct) > 0:\n        # Now check all the keys\n        for key, val in dct.items():\n            # Add the key to the shared_elements list\n            shared_elements.append(key)\n    # Return shared_elements\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    lst1 = []\n    lst2 = []\n    shared_elements = []\n    shared_elements = list(set(test_tup1).intersection(set(test_tup2)))\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in test_tup1:\n        list1.append(i)\n    for j in test_tup2:\n        list2.append(j)\n    shared_elements = set(list1) & set(list2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    shared_elements = list(set(test_list1) & set(test_list2))\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elems.append(test_tup1[i])\n    return shared_elems\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    element_list = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                element_list.append(test_tup1[i])\n    return element_list\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    list1 = list(set1)\n    list2 = list(set2)\n    shared_elements = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            shared_elements.append(list1[i])\n    return shared_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    # write your logic here\n    if n == 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n%i == 0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 and n!= 2:\n        return True\n    elif n < 2:\n        return True\n    elif n == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n <= 1:\n    #     return False\n    # for i in range(2, int(math.sqrt(n) + 1)):\n    #     if n % i == 0:\n    #         return False\n    # return True\n    '''\n    1)\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5 + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums,reverse=True)[n-1]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return sorted(nums)[0]\ndef heap_queue_2nd(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return sorted(nums,key=lambda x:x[1],reverse=True)[:n]\ndef heap_queue_3rd(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    def swap(i,j):\n        nums[i],nums[j]=nums[j],nums[i]\n    def heapify(nums,n,index):\n        l = index*2+1\n        r = index*2+2\n        largest = index\n        if l < n and nums[largest] < nums[l]:\n            largest = l\n        if r < n and nums[largest] < nums[r]:\n            largest = r\n        if largest!= index:\n            swap(largest,index)\n            heapify(nums,n,largest)\n    nums = nums[:n]\n    for i in range(n-1,0,-1):\n        swap(i,0)\n        heapify(nums,i,0)\n    return nums\ndef heap_queue_4th(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    def swap(i,j):\n        nums[i],nums[j]=nums[j],nums[i]\n    def heapify(nums,n,index):\n        largest = index\n        l = index*2+1\n        r = index*2+2\n        if l < n and nums[largest] < nums[l]:\n            largest = l\n        if r < n and nums[largest] < nums[r]:\n            largest = r\n        if largest!= index:\n            swap(largest,index)\n            heapify(nums,n,largest)\n    nums = nums[:n]\n    for i in range(n-1,0,-1):\n        swap(i,0)\n        heapify(nums,i,0)\n    return nums\ndef heap_queue_5th(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    def swap(i,j):\n        nums[i],nums[j]=nums[j],nums[i]\n    def heapify(nums,n,index):\n        largest = index\n        l = index*2+1\n        r = index*2+2\n        if l < n and nums[largest] < nums[l]:\n            largest = l\n        if r < n and nums[largest] < nums[r]:\n            largest = r\n        if largest!= index:\n            swap(largest,index)\n            heapify(nums,n,largest)\n    nums = nums[:n]\n    for i in range(n-1,0,-1):\n        swap(i,0)\n        heapify(nums,i,0)\n    return nums\ndef heap_queue_5th_more_complex(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    def swap(i,j):\n        nums[i],nums[j]=nums[j],nums[i]\n    def heapify(nums,n,index):\n        largest = index\n        l = index*2+1\n        r = index*2+2\n        if l < n and nums[largest] < nums[l]:\n            largest = l\n        if r < n and nums[largest] < nums[r]:\n            largest = r\n        if largest!= index:\n            swap(largest,index)\n            heapify(nums,n,largest)\n    nums = nums[:n]\n    for i in range(n-1,0,-1):\n        swap(i,0)\n        heapify(nums,i,0)\n    return nums\ndef max_heap(nums,n):\n    '''\n    Write a function to find the maximum value in a binary heap.\n    '''\n    largest = 0\n    for i in range(1,n+1):\n        largest = max(largest,nums[i])\n        heapify(nums,i,largest)\n    return largest\ndef max_heap_2(nums,n):\n    '''\n    Write a function to find the maximum value in a binary heap.\n    '''\n    largest = 0\n    for i in range(1,n+1):\n        if nums[i] > nums[largest]:\n            largest = i\n    heapify(nums,largest)\n    return largest\ndef min_heap(nums,n):\n    '''\n    Write a function to find the minimum value in a binary heap.\n    '''\n    smallest = 0\n    for i in range(1,n+1):\n        if nums[i] < nums[smallest]:\n            smallest = i\n    heapify(nums,smallest)\n    return smallest\ndef min_heap_2(nums,n):\n    '''\n    Write a function to find the minimum value in a binary heap.\n    '''\n    smallest = 0\n    for i in range(1,n+1):\n        if nums[i] < nums[smallest]:\n            smallest = i\n    heapify(nums,smallest)\n    return smallest\ndef find_mode(nums,n):\n    '''\n    Write a function to find the mode of a binary heap.\n    '''\n    counts = {}\n    for i in range(1,n+1):\n        if nums[i] in counts:\n            counts[nums[i]] += 1\n        else:\n            counts[nums[i]] = 1\n    max_count = 0\n    for i in range(1,n+1):\n        if counts[nums[i]] > max_count:\n            max_count = counts[nums[i]]\n    max_count_list = []\n    for i in range(1,n+1):\n        if counts[nums[i]] == max_count:\n            max_count_list.append(nums[i])\n    return max_count_list\ndef find_mode_2(nums,n):\n    '''\n    Write a function to find the mode of a binary heap.\n    '''\n    counts = {}\n    for i in range(1,n+1):\n        if nums[i] in counts:\n            counts[nums[i]] += 1\n        else:\n            counts[nums[i]] = 1\n    max_count = 0\n    max_count_list = []\n    for i in range(1,n+1):\n        if counts[nums[i]] > max_count:\n            max_count = counts[nums[i]]\n            max_count_list = []\n            max_count_list.append(nums[i])\n        elif counts[nums[i]] == max_count:\n            max_count_list.append(nums[i])\n    return max_count_list\ndef find_mode_3(nums,n):\n    '''\n    Write a function to find the mode of a binary heap.\n    '''\n    counts = {}\n    for i in range(1,n+1):\n        if nums[i] in counts:\n            counts[nums[i]] += 1\n        else:\n            counts[nums[i]] = 1\n    max_count = 0\n    max_count_list = []\n    for i in range(1,n+1):\n        if count"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return list(map(lambda x: x[0],hq.nlargest(n,nums)))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for num in nums:\n        hq.heappush(h,num)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(h))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heapq.heapify(nums)\n    ans=[]\n    for i in range(n):\n        ans.append(heapq.heappop(nums))\n    return(ans)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return_list=[]\n    for i in range(n):\n        return_list.append(hq.heappop(nums))\n    return return_list\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    return_list=[]\n    for i in range(n):\n        return_list.append(hq.heappop(nums))\n    return return_list\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # nums = [7,2,5,1,3,6,4]\n    # n = 3\n    h = []\n    for i in range(n):\n        hq.heappush(h,nums[i])\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    '''\n    First, create a Min Heap (priority queue) and insert the first n numbers into the heap. \n    Then, remove the first element and pop the smallest element and check if its greater than the current n element. \n    If so, push the current number back to the heap and move to the next element until you cannot push a number that is greater than the current n element, and push the current n number to the heap. \n    This will be the nth largest integer in the list.\n    '''\n    # Time O(NlogN) | space O(N)\n    # Build heap and insert first n elements\n    # Remove and insert numbers until heap size is less than n\n    # Return nth largest number\n    # min_heap = []\n    # for i in nums:\n    #     hq.heappush(min_heap,i)\n    #     if len(min_heap) > n:\n    #         hq.heappop(min_heap)\n    # \n    # return hq.heappop(min_heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return_list = []\n    for i in range(0,n):\n        return_list.append(hq.heappop(nums))\n    return return_list[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # heapq is a min heap, we want a max heap\n    nums.reverse()\n    hq.heapify(nums)\n    print(nums)\n    for i in range(n-1):\n        hq.heappop(nums)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest=[]\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest\nprint(heap_queue_largest([1,3,5,7,2,4,6,8],5))\ndef heap_queue_largest_quick(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest=[]\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest\nprint(heap_queue_largest_quick([1,3,5,7,2,4,6,8],5))"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x=str(x)\n    if len(x) == 0:\n        return False\n    if len(x) == 1:\n        return False\n    if len(x) == 2:\n        return True\n    if len(x) >= 3:\n        if x[0] == x[1]:\n            return is_Power_Of_Two(x[1:])\n        else:\n            return is_Power_Of_Two(x[1:]) or is_Power_Of_Two(x[2:])\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x & (x-1)\n    if y == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x-1)) == 0) and x > 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x == (x & -x)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    elif x ==1:\n        return True\n    else:\n        return is_Power_Of_Two(x//2)\n        \ndef is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x ==0:\n        return False\n    elif x ==1:\n        return True\n    elif x%2==0:\n        return is_Power_Of_Two(x//2)\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = x & (x-1)\n    if x == 0:\n        return True\n    return False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'[a-zA-Z]+', text)\nprint(find_char_long('This is a test of the emergency broadcast network'))\nprint(find_char_long('This is another test of the emergency broadcast network'))\nprint(find_char_long('Last but not least, we will come back for more soon'))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for i in range(len(text)):\n        for j in range(i+1,len(text)+1):\n            if len(text[i:j]) > 3:\n                long_words.append(text[i:j])\n    return long_words\n    \ntext = \"I have a dream, and it's true that I will have a future\"\nprint(find_char_long(text))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    print(re.findall(r'\\b[a-zA-Z]+\\b',text))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for word in text.split(' '):\n        if len(word) >= 4:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('[a-zA-Z]+', text.lower())\n    return len(list(filter(lambda x: len(x)>3, words)))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    s = re.findall(r'\\w+', text)\n    print(s)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = re.findall(r'\\w+', text)\n    print(list_of_words)\n    word_lengths = []\n    for word in list_of_words:\n        word_lengths.append(len(word))\n    print(word_lengths)\n    print(len(word_lengths))\n    print(list_of_words)\n    return (len(word_lengths))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word = re.findall(\"[a-zA-Z]{4,}\", text)\n    return word\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    result = pattern.findall(text)\n    print(result)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num*num)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for n in nums:\n        squared.append(n**2)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    freq = [0] * 26\n    for i in range(n): \n        freq[ord(str[i]) - ord('a')] += 1\n    s = 0\n    res = 0\n    for i in range(26): \n        while freq[i]!= 0: \n            res += 1\n            freq[i] -= 1\n    return res\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    arr = [[0 for i in range(n)] for i in range(n)]\n    count = 0\n    for i in range(n):\n        arr[i][i] = 1\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            arr[i][i+1] = 1\n        else:\n            arr[i][i+1] = 2\n            for j in range(i+2,n):\n                if str[i] == str[j] and arr[i+1][j-1] == 1:\n                    arr[i][j] = 1\n                elif str[i] == str[j] and arr[i+1][j-1] == 2:\n                    arr[i][j] = 2\n                    break\n    for i in range(n):\n        if arr[0][i] > 0:\n            count += arr[0][i]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)<=1:\n        return len(str)\n    str_set = set(str)\n    distinct = len(str_set)\n    \n    if distinct == 1:\n        return len(str)\n    else:\n        first_occurrence = str.find('a')\n        last_occurrence = str.rfind('a')\n        #rotate as far left as possible, starting from the last occurrence of 'a'\n        len_str = len(str)\n        l = 0\n        r = last_occurrence+1\n        count = 0\n        while l < len_str:\n            if str[l] == 'a':\n                count += 1\n            l += 1\n        while r < len_str:\n            if str[r] == 'a':\n                count += 1\n            r += 1\n        \n        return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Code here\n    arr = list(str)\n    size = len(arr)\n    count = 0\n    for i in range(0, size):\n        for j in range(i+1, size):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    str = list(str)\n    str.sort()\n    print('The original string is:',str)\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count+=1\n        else:\n            break\n    return count\nprint(find_Rotations('abc'))\nprint(find_Rotations('abd'))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    if str[0]==str[-1]:\n        return 0\n    n=len(str)\n    prefix=[]\n    for i in range(0,n):\n        prefix.append(str[i])\n    count=1\n    for i in range(1,n):\n        if prefix[i]!=prefix[0]:\n            count+=1\n            prefix=prefix[0]+prefix[1:]\n            prefix.append(prefix[0])\n    print(count)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #global s1\n    n = len(str)\n    #print(n)\n    #print(str)\n    #for i in range(n):\n    #    print(str[i])\n    if n%2 == 0:\n        m = n/2\n        #print(m)\n        s1 = str[:m]\n        s2 = str[m:]\n        #print(s1)\n        #print(s2)\n        if s1 == s2:\n            return 0\n        else:\n            if s1 > s2:\n                return 1\n            else:\n                return -1\n    else:\n        m = n/2\n        s1 = str[:m]\n        s2 = str[m:]\n        #print(s1)\n        #print(s2)\n        if s1 == s2:\n            return 0\n        else:\n            if s1 > s2:\n                return 1\n            else:\n                return -1\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if str[i] == str[j]:\n                count += 1\n                break\n    \n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #str = str.lower()\n    #arr = []\n    #for i in range(len(str)-1):\n    #    if str[i] == str[i+1]:\n    #        arr.append(i)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n<=1:\n        return 0\n    \n    for i in range(n):\n        arr = list(str)\n        arr[i], arr[(i+1)%n] = arr[(i+1)%n], arr[i]\n        if arr==str:\n            return 1\n    return -1\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,\"\")\n    s = s.replace(ch+\" \", \"\")\n    return s\ns = input()\nch = input()\nr = remove_Occ(s,ch)\nprint(r)"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, \"\")\n    s=s.replace(ch, \"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # s= \"raju\"\n    # ch='a'\n    # Removes the first occurence of 'a'\n    # from the string \n    # new_string = s.replace(s.index(ch), '')\n    # print new_string\n    # Removes the last occurence of 'a'\n    # new_string = s.replace(s.rindex(ch), '')\n    # print new_string\n    # print(len(s))\n    # print(len(ch))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==1:\n        return \"Not found\"\n    else:\n        x=s.replace(s[0],'')\n        y=x.replace(s[-1],'')\n        return y\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(' ')\n    l = len(s)\n    i = 0\n    while i < l:\n        if ch == s[i]:\n            break\n        i = i+1\n    j = 0\n    while j < l:\n        if ch == s[l-j-1]:\n            break\n        j = j+1\n    s = s[0:i] + s[i+1:l-j] + s[l-j:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if s.count(ch) > 1:\n        s.remove(ch)\n        s.remove(ch)\n    else:\n        return s\n    return ''.join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string = s\n    x = string.find(ch)\n    z = string.rfind(ch)\n    return string.replace(string[x], \"\")[0:len(string)-x] + string.replace(string[z], \"\")[0:len(string)-z]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '',1).replace(ch, '',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            sum = 0\n            for k in range(len(M)):\n                sum += M[k][j]\n            M[i][j] = sum\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M_sorted = [[-100]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            M_sorted[i][j] = M[i][j]\n    \n    for i in range(n):\n        summ = 0\n        for j in range(n):\n            summ += M_sorted[i][j]\n        M_sorted[i][n-1] = summ\n    \n    for i in range(n-1):\n        M_sorted[i][n-1] = M_sorted[i][n-2] + M_sorted[i+1][n-1]\n    \n    for i in range(n-1, 0, -1):\n        M_sorted[i][0] = M_sorted[i-1][0] + M_sorted[i][1]\n    \n    for i in range(n):\n        for j in range(1, n-1):\n            M_sorted[i][j] = max(M_sorted[i][j-1], M_sorted[i][j]) + M_sorted[i][j+1]\n    \n    return M_sorted\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = len(M)\n    C = len(M[0])\n    \n    sum_matrix = []\n    \n    for i in range(R):\n        sums = 0\n        for j in range(C):\n            sums += M[i][j]\n        sum_matrix.append(sums)\n        \n    sum_matrix.sort()\n    \n    return_matrix = [[0]*C for _ in range(R)]\n    \n    for i in range(R):\n        for j in range(C):\n            return_matrix[i][j] = M[i][j]\n            \n            for k in range(R):\n                return_matrix[i][j] += return_matrix[k][j]\n                \n            return_matrix[i][j] = return_matrix[i][j] - sum_matrix[i]\n    return return_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = len(M)\n    if l == 1:\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        print(sum(M[i]))\n        if i!= n-1:\n            for j in range(i+1, n):\n                if sum(M[i]) > sum(M[j]):\n                    M[i], M[j] = M[j], M[i]\n                else:\n                    continue\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        # new_lst = []\n        for j in range(len(M[i])):\n            # new_lst.append(M[i][j])\n            if i == 0:\n                M[i][j] = sum(M[i])\n            else:\n                M[i][j] = sum(M[i]) - sum(M[0])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    res = []\n    if M == []:\n        return []\n    for row in M:\n        new_row = []\n        for i in range(len(row)):\n            new_row.append(row[i])\n        s = 0\n        for i in range(len(new_row)):\n            s += new_row[i]\n        new_row.append(s)\n        res.append(new_row)\n    return sorted(res, key=lambda x: x[len(x) - 1])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = len(M)\n    M = list(zip(*M))\n    M.sort(key=lambda x: sum(x))\n    return list(zip(*M))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l=l+1\n    b=b+1\n    h=h+1\n    volume=l*b*h/3\n    return volume\ndef find_Area(l,b) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    l=l+1\n    b=b+1\n    area=l*b\n    return area\ndef find_Perimeter(l,b) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    l=l+1\n    b=b+1\n    perimeter=l+b+l\n    return perimeter\ndef find_Volume(h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    h=h+1\n    volume=h*h\n    return volume\ndef find_Area(b) : \n    '''\n    Write a python function to find the area of a rectangular prism.\n    '''\n    b=b+1\n    area=b*b\n    return area\ndef find_Perimeter(l,h) : \n    '''\n    Write a python function to find the perimeter of a rectangular prism.\n    '''\n    l=l+1\n    h=h+1\n    perimeter=l+h+l\n    return perimeter\ndef find_Volume(l,h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    l=l+1\n    h=h+1\n    volume=l*h\n    return volume\ndef find_Area(l) : \n    '''\n    Write a python function to find the area of a rectangular prism.\n    '''\n    l=l+1\n    area=l*l\n    return area\ndef find_Perimeter(h,l) : \n    '''\n    Write a python function to find the perimeter of a rectangular prism.\n    '''\n    h=h+1\n    l=l+1\n    perimeter=h+l+l\n    return perimeter\ndef find_Volume(h,l) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    h=h+1\n    l=l+1\n    volume=h*l\n    return volume\ndef find_Area(b) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    b=b+1\n    area=b*b\n    return area\ndef find_Perimeter(l) : \n    '''\n    Write a python function to find the perimeter of a square prism.\n    '''\n    l=l+1\n    perimeter=2*l\n    return perimeter\ndef find_Volume(h) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    h=h+1\n    volume=h*h\n    return volume\ndef find_Area(l) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    l=l+1\n    area=l*l\n    return area\ndef find_Perimeter(h) : \n    '''\n    Write a python function to find the perimeter of a square prism.\n    '''\n    h=h+1\n    perimeter=2*h\n    return perimeter\ndef find_Volume(l,b) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    l=l+1\n    b=b+1\n    volume=l*b\n    return volume\ndef find_Area(l) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    l=l+1\n    area=l*l\n    return area\ndef find_Perimeter(b) : \n    '''\n    Write a python function to find the perimeter of a square prism.\n    '''\n    b=b+1\n    perimeter=2*b\n    return perimeter\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    l=l+1\n    b=b+1\n    h=h+1\n    volume=l*b*h\n    return volume\ndef find_Area(h) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    h=h+1\n    area=h*h\n    return area\ndef find_Perimeter(h) : \n    '''\n    Write a python function to find the perimeter of a square prism.\n    '''\n    h=h+1\n    perimeter=2*h\n    return perimeter\ndef find_Volume(l,h,b) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    l=l+1\n    b=b+1\n    h=h+1\n    volume=l*b*h\n    return volume\ndef find_Area(h,l) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    h=h+1\n    l=l+1\n    area=h*l\n    return area\ndef find_Perimeter(l,h) : \n    '''\n    Write a python function to find the perimeter of a square prism.\n    '''\n    l=l+1\n    h=h+1\n    perimeter=2*h+2*l\n    return perimeter\ndef find_Volume(l,h) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    l=l+1\n    h=h+1\n    volume=l*h\n    return volume\ndef find_Area(l) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    l=l+1\n    area=l*l\n    return area\ndef find_Perimeter(h,l) : \n    '''\n    Write a python function to find the perimeter of a square prism.\n    '''\n    h=h+1\n    l=l+1\n    perimeter=2*l+2*h\n    return perimeter\ndef find_Volume(l,h,b) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    l=l+1\n    b=b+1\n    h=h+1\n    volume=l*b*h\n    return volume\ndef find_Area(h,l) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    h=h+1\n    l=l+1\n    area=h*l\n    return area\ndef find_Perimeter(h) : \n    '''\n    Write a python function to find the perimeter of a square prism.\n    '''\n    h=h+1\n    perimeter=2*h\n    return perimeter\ndef find_Volume(l,h,b) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    l=l+1\n    b=b+1\n    h=h+1\n    volume=l*b*h\n    return volume\ndef find_Area(h,l) : \n    '''\n    Write a python function to find the area of a square prism.\n    '''\n    h=h+1\n    l=l+1\n    area=h*l\n    return area\ndef find_Perimeter(h,l) : \n    '''\n    Write a python function to find the perimeter of a square prism.\n    '''\n    h=h+1\n    l=l+1\n    perimeter=2*h+2*l\n    return perimeter\ndef find_Volume(l,h,b) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    l=l+1\n    b=b+1\n    h=h+1\n    volume=l*b*h\n    return volume\ndef find_Area(l) : \n    '''\n    Write a python function to find the area of a squar"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l > b and l > h : \n        # triangle formed from h,l and b \n        Vol = (l*b*h)/2\n        return Vol\n    elif b > l and b > h :\n        # triangle formed from l,b and h \n        Vol = (l*b*h)/2\n        return Vol\n    elif h > l and h > b :\n        # triangle formed from l,b and h \n        Vol = (l*b*h)/2\n        return Vol\n    else : \n        print(\"The given triangle is invalid\")\n        return -1\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    h = abs(h)\n    l = abs(l)\n    b = abs(b)\n    return (l*b*h)\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"The volume of a triangular prism is: \", l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    V = (l*b*h)/(2*math.tan(math.pi/3))\n    print(V)\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = 0.5*(b*h)*(l)\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math as m\n    volume=l*b*h\n    print(f\"The volume of the prism is {volume}\")\ndef find_Sides_Length(a,b) :\n    '''\n    Write a python function to find the length of sides of a triangular prism.\n    '''\n    import math as m\n    s=a+b+m.sqrt((a**2)+(b**2))\n    print(f\"The length of the sides is {s}\")\ndef find_Square_Area(l,w) :\n    '''\n    Write a python function to find the area of a square\n    '''\n    import math as m\n    s=l*w\n    print(f\"The area of the square is {s}\")\ndef find_Cube_Area(a,l) :\n    '''\n    Write a python function to find the area of a cube\n    '''\n    import math as m\n    s=a*l*a*m.sqrt(3)\n    print(f\"The area of the cube is {s}\")\ndef find_Area_Triangular_Prism(a,b,h) :\n    '''\n    Write a python function to find the area of the whole prism\n    '''\n    import math as m\n    s=a*b*h\n    print(f\"The area of the whole prism is {s}\")\ndef find_Square_Perimeter(a,l) :\n    '''\n    Write a python function to find the perimeter of a square\n    '''\n    import math as m\n    s=a*2\n    print(f\"The perimeter of the square is {s}\")\ndef find_Area_Cube(a,l) :\n    '''\n    Write a python function to find the area of a cube\n    '''\n    import math as m\n    s=a*l*a\n    print(f\"The area of the cube is {s}\")\ndef find_Volume_Cylinder(r,h) :\n    '''\n    Write a python function to find the volume of a cylinder\n    '''\n    import math as m\n    s=m.pi*r*r*h\n    print(f\"The volume of the cylinder is {s}\")\ndef find_Volume_Cone(r,h) :\n    '''\n    Write a python function to find the volume of a cone\n    '''\n    import math as m\n    s=m.pi*r*r*h\n    print(f\"The volume of the cone is {s}\")\ndef find_Volume_Sphere(r) :\n    '''\n    Write a python function to find the volume of a sphere\n    '''\n    import math as m\n    s=4/3*m.pi*r**3\n    print(f\"The volume of the sphere is {s}\")\ndef find_Volume_Parallelepiped(a,b,h) :\n    '''\n    Write a python function to find the volume of a parallelepiped\n    '''\n    import math as m\n    s=a*b*h\n    print(f\"The volume of the parallelepiped is {s}\")\ndef find_Volume_Tetrahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of a tetrahedron\n    '''\n    import math as m\n    s=1/3*a*b*c\n    print(f\"The volume of the tetrahedron is {s}\")\ndef find_Volume_Hexahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of a hexahedron\n    '''\n    import math as m\n    s=1/2*a*b*c\n    print(f\"The volume of the hexahedron is {s}\")\ndef find_Volume_Octahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an octahedron\n    '''\n    import math as m\n    s=a*b*c\n    print(f\"The volume of the octahedron is {s}\")\ndef find_Volume_Icosahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an icosahedron\n    '''\n    import math as m\n    s=1/3*a*b*c\n    print(f\"The volume of the icosahedron is {s}\")\ndef find_Volume_Dodecahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of a dodecahedron\n    '''\n    import math as m\n    s=1/2*a*b*c\n    print(f\"The volume of the dodecahedron is {s}\")\ndef find_Volume_Icosahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an icosahedron\n    '''\n    import math as m\n    s=1/3*a*b*c\n    print(f\"The volume of the icosahedron is {s}\")\ndef find_Volume_Dodecahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of a dodecahedron\n    '''\n    import math as m\n    s=1/2*a*b*c\n    print(f\"The volume of the dodecahedron is {s}\")\ndef find_Volume_Icosahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an icosahedron\n    '''\n    import math as m\n    s=1/3*a*b*c\n    print(f\"The volume of the icosahedron is {s}\")\ndef find_Volume_Hexahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of a dodecahedron\n    '''\n    import math as m\n    s=1/2*a*b*c\n    print(f\"The volume of the hexahedron is {s}\")\ndef find_Volume_Octahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an octahedron\n    '''\n    import math as m\n    s=a*b*c\n    print(f\"The volume of the octahedron is {s}\")\ndef find_Volume_Icosahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an icosahedron\n    '''\n    import math as m\n    s=1/3*a*b*c\n    print(f\"The volume of the icosahedron is {s}\")\ndef find_Volume_Dodecahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of a dodecahedron\n    '''\n    import math as m\n    s=1/2*a*b*c\n    print(f\"The volume of the dodecahedron is {s}\")\ndef find_Volume_Octahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an octahedron\n    '''\n    import math as m\n    s=a*b*c\n    print(f\"The volume of the octahedron is {s}\")\ndef find_Volume_Icosahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an icosahedron\n    '''\n    import math as m\n    s=1/3*a*b*c\n    print(f\"The volume of the icosahedron is {s}\")\ndef find_Volume_Dodecahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of a dodecahedron\n    '''\n    import math as m\n    s=1/2*a*b*c\n    print(f\"The volume of the dodecahedron is {s}\")\ndef find_Volume_Icosahedron(a,b,c) :\n    '''\n    Write a python function to find the volume of an icosahedron\n    '''\n    import math as m\n    s=1/3*a*b*c\n    print(f\"The volume of the i"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = 1/6 * h * b * l \n    return vol\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]',text) and re.search(r'\\w',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(r'[a-z]+_[a-z]+',text)\n    if s:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces_no_underscore_and_spaces_no_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_low = text.lower()\n    for i in text_low:\n        if i.isalpha() == False:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'\\w+[_]', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[a-z]+_[a-z]+', text)!= []\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    return True if re.search(\"[a-z]+_[a-z]+\", text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]+_[a-z]+')\n    return pattern.search(text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('\\w+_?', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'\\b[a-z]+_[a-z]+\\b', text)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n    # YOUR CODE HERE\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n    \ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    return a*a\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict_string = {x:y for x,y in zip(string,string)}\n    #print(dict_string)\n    return [x for x in string if x not in dict_string.values()]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(len(string)):\n        if string[i] not in char_list:\n            char_list.append(string[i])\n    return char_list\n    # for char in string:\n    #     if char in char_list:\n    #         char_list.remove(char)\n    # return char_list\n        \nprint(str_to_list(\"aeiou\"))\nprint(str_to_list(\"hello\"))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            string.pop(i)\n            break\n    return string\n    \ndef str_to_list_2(string,char):\n    '''\n    Write a function to return the count of the characters in a given string.\n    '''\n    count = 0\n    for i in string:\n        if i == char:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string)\n    l2 = list(string)\n    l1 = l1[:]\n    l2 = l2[:]\n    for ele in l2:\n        if ele in l1:\n            l1.remove(ele)\n    return l1\n    \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_characters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    list_of_removed_characters = []\n    for character in string:\n        if character in list_of_characters:\n            list_of_characters.remove(character)\n    \n    for i in list_of_characters:\n        list_of_removed_characters.append(i)\n    return(list_of_removed_characters)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(string)\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string\n    string2 = \" \"\n    list1 = []\n    count = 0\n    count1 = 0\n    list1 = list(string1)\n    \n    for i in string2:\n        for j in range(len(list1)):\n            if list1[j] == i:\n                count = count + 1\n                \n        if count == 0:\n            string1 = string1.replace(i, \"\", 1)\n            count = 0\n        count = 0\n        \n    list1 = list(string1)\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    l1 = list(string)\n    l2 = list(string)\n    for i in range(len(l2)):\n        if l2[i] in characters:\n            l1.remove(l2[i])\n    return ''.join(l1)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_char = list(string) \n    for i in range(len(string)): \n        if list_of_char[i] in string: \n            list_of_char[i] = None\n            \n    list_of_char = [x for x in list_of_char if x] \n    return list_of_char \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    l = arraynums.copy()\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            print('The array contains a duplicate element')\n            return\n    print('The array does not contain any duplicate element')\n    return\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    #if the array is empty, return false\n    if len(arraynums) == 0:\n        return False\n    \n    #else loop through the array\n    for x in range(len(arraynums)):\n        #check if the index exists in the array and has a value\n        if arraynums.count(arraynums[x]) > 1:\n            return True\n    \n    #if none of the above conditions are met, return false\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    if(len(arraynums)>1):\n        if(arraynums[0] in arraynums[1:len(arraynums)]):\n            print(True)\n        else:\n            print(False)\n    else:\n        print(False)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if arraynums == None:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(arraynums.count(i) > 1 for i in arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) == 2:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Quick Solution\n    # for index in range(len(arraynums)):\n    #     if arraynums[index] in arraynums[index+1:]:\n    #         return True\n    # return False\n    # my solution\n    for i in range(len(arraynums)):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = sorted(arraynums)\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # get the length\n    len_arraynums = len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return 'duplicate' if any(num in arraynums for num in arraynums) else 'no duplicate'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 77:\n        return True\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return True\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return True\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return True\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return True\n    elif x == 26:\n        return False\n    elif x == 27:\n        return True\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return True\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False\n    elif x == 40:\n        return False\n    elif x == 41:\n        return False\n    elif x == 42:\n        return False\n    elif x == 43:\n        return False\n    elif x == 44:\n        return False\n    elif x == 45:\n        return True\n    elif x == 46:\n        return False\n    elif x == 47:\n        return True\n    elif x == 48:\n        return False\n    elif x == 49:\n        return False\n    elif x == 50:\n        return False\n    elif x == 51:\n        return False\n    elif x == 52:\n        return False\n    elif x == 53:\n        return False\n    elif x == 54:\n        return True\n    elif x == 55:\n        return False\n    elif x == 56:\n        return False\n    elif x == 57:\n        return True\n    elif x == 58:\n        return False\n    elif x == 59:\n        return False\n    elif x == 60:\n        return False\n    elif x == 61:\n        return False\n    elif x == 62:\n        return True\n    elif x == 63:\n        return False\n    elif x == 64:\n        return False\n    elif x == 65:\n        return False\n    elif x == 66:\n        return False\n    elif x == 67:\n        return True\n    elif x == 68:\n        return False\n    elif x == 69:\n        return False\n    elif x == 70:\n        return False\n    elif x == 71:\n        return False\n    elif x == 72:\n        return True\n    elif x == 73:\n        return False\n    elif x == 74:\n        return False\n    elif x == 75:\n        return False\n    elif x == 76:\n        return False\n    elif x == 77:\n        return True\n    elif x == 78:\n        return False\n    elif x == 79:\n        return False\n    elif x == 80:\n        return False\n    elif x == 81:\n        return False\n    elif x == 82:\n        return True\n    elif x == 83:\n        return True\n    elif x == 84:\n        return False\n    elif x == 85:\n        return False\n    elif x == 86:\n        return False\n    elif x == 87:\n        return True\n    elif x == 88:\n        return False\n    elif x == 89:\n        return True\n    elif x == 90:\n        return False\n    elif x == 91:\n        return False\n    elif x == 92:\n        return False\n    elif x == 93:\n        return True\n    elif x == 94:\n        return True\n    elif x == 95:\n        return False\n    elif x == 96:\n        return True\n    elif x == 97:\n        return True\n    elif x == 98:\n        return False\n    elif x == 99:\n        return True\n    elif x == 100:\n        return True\n    elif x == 101:\n        return False\n    elif x == 102:\n        return True\n    elif x == 103:\n        return False\n    elif x == 104:\n        return True\n    elif x == 105:\n        return False\n    elif x == 106:\n        return True\n    elif x == 107:\n        return False\n    elif x == 108:\n        return False\n    elif x == 109:\n        return False\n    elif x == 110:\n        return True\n    elif x == 111:\n        return True\n    elif x == 112:\n        return False\n    elif x == 113:\n        return True\n    elif x == 114:\n        return False\n    elif x == 115:\n        return True\n    elif x == 116:\n        return False\n    elif x == 117:\n        return True\n    elif x == 118:\n        return False\n    elif x == 119:\n        return True\n    elif x == 120:\n        return False\n    elif x == 121:\n        return True\n    elif x == 122:\n        return True\n    elif x == 123:\n        return False\n    elif x == 124:\n        return True\n    elif x == 125:\n        return True\n    elif x == 126:\n        return True\n    elif x == 127:\n        return False\n    elif x == 128:\n        return True\n    elif x == 129:\n        return False\n    elif x == 130:\n        return False\n    elif x == 131:\n        return False\n    elif x == 132:\n        return True\n    elif x == 133:\n        return False\n    elif x == 134:\n        return True\n    elif x == 135:\n        return True\n    elif x == 136:\n        return False\n    elif x == 137:\n        return True\n    elif x == 138:\n        return False\n    elif x == 139:\n        return True\n    elif x == 140:\n        return False\n    elif x == 141:\n        return True\n    elif x == 142:\n        return False\n    elif x == 143:\n        return True\n    elif x == 144:\n        return False\n    elif x == 145:\n        return True\n    elif x == 146:\n        return True\n    elif x == 147:\n        return False\n    elif x == 148:\n        return True\n    elif x == 149:\n        return False\n    elif x == 150:\n        return False\n    elif x == 151:\n        return True\n    elif x == 152:\n        return True\n    elif x == 153:\n        return False\n    elif x == 154:\n        return False\n    elif x == 155:\n        return True\n    elif x == 156:\n        return False\n    elif x == 157:\n        return True\n    elif x == 158:\n        return True\n    elif x == 159:\n        return False\n    elif x == 160:\n        return False\n    elif x == 161:\n        return True\n    elif x == 162:\n        return False\n    elif x == 163:\n        return False\n    elif x == 164:\n        return False\n    elif x == 165:\n        return False\n    elif x == 166:\n        retur"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0 or x == 1:\n        return False\n    if (x % 2) == 0 and x > 2:\n        return False\n    else:\n        for i in range(3, x, 2):\n            if x % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 11 or x == 8 or x == 9 or x == 6 or x == 12 or x == 5 or x == 7:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 7 or x > 21:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5 == 0 and x%3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 100:\n        return True\n    else:\n        return False\n        \ndef count_apples_oranges(s, t, a, b, apples, oranges): \n    '''\n    Write a function to count the number of apples and oranges thrown \n    during the given period.\n    '''\n    count_apples = 0\n    count_oranges = 0\n    for i in apples:\n        if (i >= s and i <= t) and (i >= a and i <= b):\n            count_apples = count_apples + 1\n    for j in oranges:\n        if (j >= s and j <= t) and (j >= a and j <= b):\n            count_oranges = count_oranges + 1\n    return count_apples, count_oranges\n    \ndef count_apples_oranges_binary_search(s, t, a, b, apples, oranges): \n    '''\n    Write a function to count the number of apples and oranges thrown \n    during the given period.\n    '''\n    count_apples = 0\n    count_oranges = 0\n    left = s\n    right = t\n    mid = 0\n    if s <= a and b <= t:\n        while left <= right:\n            mid = (left + right) // 2\n            if (mid >= a and mid <= b) and (mid >= s and mid <= t) and (mid >= apples[0] and mid <= apples[len(apples) - 1]) and (mid >= oranges[0] and mid <= oranges[len(oranges) - 1]):\n                if mid >= apples[0] and mid <= apples[len(apples) - 1]:\n                    count_apples = count_apples + 1\n                if mid >= oranges[0] and mid <= oranges[len(oranges) - 1]:\n                    count_oranges = count_oranges + 1\n            else:\n                if mid < apples[0] or mid > apples[len(apples) - 1]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        return count_apples, count_oranges\n    else:\n        return -1, -1\n    \ndef count_apples_oranges_binary_search_iterative(s, t, a, b, apples, oranges): \n    '''\n    Write a function to count the number of apples and oranges thrown \n    during the given period.\n    '''\n    count_apples = 0\n    count_oranges = 0\n    left = s\n    right = t\n    while left <= right:\n        mid = (left + right) // 2\n        if (mid >= a and mid <= b) and (mid >= s and mid <= t) and (mid >= apples[0] and mid <= apples[len(apples) - 1]) and (mid >= oranges[0] and mid <= oranges[len(oranges) - 1]):\n            if mid >= apples[0] and mid <= apples[len(apples) - 1]:\n                count_apples = count_apples + 1\n            if mid >= oranges[0] and mid <= oranges[len(oranges) - 1]:\n                count_oranges = count_oranges + 1\n        else:\n            if mid < apples[0] or mid > apples[len(apples) - 1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    return count_apples, count_oranges\n    \ndef sum_of_subsets(arr, sum_value):\n    '''\n    Write a function to calculate sum of all subsets with sum equal to given sum.\n    '''\n    dp = [[0 for i in range(sum_value + 1)] for j in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = 1\n    for j in range(1, sum_value + 1):\n        dp[0][j] = 0\n    for i in range(1, len(arr) + 1):\n        for j in range(1, sum_value + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[len(arr)][sum_value]\n    \ndef next_permutation(arr):\n    '''\n    Write a function to get the next permutation of a given array. The next permutation \n    element is chosen such that the result is the next lexicographically smallest permutation of \n    the given array. If there is no next permutation, the function should return the original array. \n    Examples:\n    Input: [1,2,3]\n    Output: [1,3,2]\n    Input: [1,3,2]\n    Output: []\n    '''\n    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    def reverse(arr, start, end):\n        while start < end:\n            swap(arr, start, end)\n            start += 1\n            end -= 1\n    def next_smaller_permutation(arr, start, end):\n        j = end - 1\n        while j >= start:\n            if arr[j] > arr[j - 1]:\n                next = j\n                for k in range(j, end):\n                    if arr[k] < arr[next]:\n                        next = k\n                swap(arr, j, next)\n                reverse(arr, start, next)\n                return True\n            j -= 1\n        return False\n    \n    n = len(arr)\n    i = n - 2\n    while i >= 0 and arr[i] >= arr[i + 1]:\n        i -= 1\n    if i >= 0:\n        j = n - 1\n        while j >= 0 and arr[i] >= arr[j]:\n            j -= 1\n        swap(arr, i, j)\n        reverse(arr, i + 1, n - 1)\n        return arr\n    else:\n        return arr\n    \ndef next_permutation_in_place(arr):\n    '''\n    Write a function to get the next permutation of a given array. The next permutation \n    element is chosen such that the result is the next lexicographically smallest permutation of \n    the given array. If there is no next permutation, the function should return null. \n    Examples:\n    Input: [1,2,3]\n    Output: [1,3,2]\n    Input: [1,3,2]\n    Output: null\n    '''\n    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    def reverse(arr, start, end):\n        while start < end:\n            swap(arr, start, end)\n            start += 1\n            end -= 1\n    def next_smaller_permutation(arr, start, end):\n        i = end - 1\n        while i >= start:\n            if arr[i] > arr[i - 1]:\n                next = i\n                for k in range(i, end):\n                    if arr[k] < arr[next]:\n                        next = k\n                swap(arr, i, next)\n                reverse(arr, start, next)\n                return True\n            i -= 1\n        return False\n    \n    n = len(arr)\n    i = n - 2\n    while i >= 0 and arr[i] >= arr[i + 1]:\n        i -= 1\n    if i >= 0:\n        j = n - 1\n        while j >= 0 and arr[i] >= arr[j]:\n            j -= 1\n        swap(arr, i, j)\n        reverse(arr, i + 1, n - 1)\n        return arr\n    else:\n        return None\n    \ndef last_permutation(arr):\n    '''\n    Write a function to get the last permutation of a given array. The last permutation \n    element is chosen such that the result is the last lexicographically smallest permutation of \n    the given array. If there is no last permutation, the function should return null. \n    Examples:\n    Input: [1,2,3]\n    Output: [1,3,2]\n    Input: [1,3,2]\n    Output: nul"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x_str = str(x)\n    print(x_str)\n    if x_str == \"1\" or x_str == \"3\":\n        print(\"It's Woodball\")\n    else:\n        print(\"It's not a woodball\")\n    return(x_str == \"3\") or (x_str == \"1\")\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6): \n        return True \n    elif (x > 6): \n        return False\n    else: \n        return is_woodall(x-1) or is_woodall(x-2) or is_woodall(x-3) or is_woodall(x-4) or is_woodall(x-5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if(x<=63 and x>=1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (int(str(num)[::-1]))\n    \n    #Please note that the function reverse() returns a reversed string.\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if num == rev_num + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    result = 0\n    while num > 0:\n        result = (result * 10) + num % 10\n        num = int(num/10)\n    \n    return result == (int(result) * 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = (rev_num*10) + num%10\n        num = num // 10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num * 2) - 1\n    \ndef check(num):    \n    '''\n    Write a python function to check if a given number is a palindrome. A palindrome is a number whose reverse is the same as itself.\n    '''\n    if num == rev(num):\n        return True\n    else:\n        return False\n    \ndef palindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome or not.\n    '''\n    if check(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num % 2\n    nums = str(num)\n    rev_num = int(nums[::-1])\n    return (rev_num - num) == 1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == -num*2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num // 10\n    if rev == num:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = 0\n    while(num!= 0):\n        temp = temp * 10 + num % 10\n        num = num // 10\n    return temp\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # First convert the number to string\n    num_string = str(num)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = 0\n    for i in arr :\n        if(i > result) :\n            result = i\n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 1\n    for i in arr :\n        num *= int(i)\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 :\n        return int(arr[0])\n    else :\n        max_num = int(arr[0]) + find_Max_Num(arr[1:])\n        if max_num > int(arr[0]):\n            return max_num\n        else:\n            return int(arr[0])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if(max_num < int(arr[i]) + int(arr[j])):\n                max_num = int(arr[i]) + int(arr[j])\n    print(\"Maximum number that can be formed from the list of digits is {}\".format(max_num))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    i = 0\n    while i < len(arr) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n        i += 1\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr:\n        max = max + i\n    return max\n        \ndef remove_duplicate(arr):\n    '''\n    Given a list of number in form of string, write a python function to remove the duplicate number.\n    '''\n    result = []\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = -99\n    for i in range(len(arr)) :\n        for j in range(len(arr)) :\n            if (arr[i] + arr[j] > max_num) :\n                max_num = arr[i] + arr[j]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maximum = -1\n    for i in range(1,len(arr)+1):\n        if(maximum < int(str(i)*i)):\n            maximum = int(str(i)*i)\n    return maximum\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = list(map(int,arr))\n    m = max(l)\n    if m not in l:\n        return m\n    else:\n        return find_Max_Num(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] >= max :\n            max = arr[i]\n    return max\n    \ndef find_Max_Num_and_index(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits and return \n    the index of the largest number.\n    '''\n    max = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] >= max :\n            max = arr[i]\n            max_index = i\n    return max_index, max\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return(x>0 and y<0) or (x<0 and y>0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #Code here\n    return (x and not y) or (not x and y)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -x == -y\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == y:\n        return False\n    else:\n        if (x > 0 and y < 0) or (x < 0 and y > 0):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x>0 and y<0 or x<0 and y>0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -x == -y"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(n): \n        print(i+1) \n        n = int((i*(i+3))/2) + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # if n == 1: return 1\n    # if n == 2: return 3\n    # if n == 3: return 5\n    # if n == 4: return 7\n    \n    # for i in range(5, n+1):\n    #     oct1 = (i - 1) * (i - 2) // 2\n    #     oct2 = i * i\n    #     oct3 = (i - 1) * i\n    #     oct4 = i * (i + 1) // 2\n    #     oct5 = i * (i + 2) // 2\n    #     if oct1 == oct2 == oct3 == oct4 == oct5: \n    #         return i\n    \n    if n == 1: return 1\n    if n == 2: return 3\n    if n == 3: return 5\n    if n == 4: return 7\n    \n    for i in range(5, n+1):\n        oct1 = (i - 1) * (i - 2) // 2\n        oct2 = i * i\n        oct3 = (i - 1) * i\n        oct4 = i * (i + 1) // 2\n        oct5 = i * (i + 2) // 2\n        oct6 = i * (i + 3) // 2\n        oct7 = i * (i + 4) // 2\n        \n        if oct1 == oct2 == oct3 == oct4 == oct5 == oct6 == oct7: \n            return i\n    \ndef count_ways_to_meet_people(people, minutes):\n    '''\n    You are given a number of people, people, and a number of minutes to spend watching each person.\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n    "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    total = 0\n    \n    # base case for which we want to be done\n    if n == 1: \n        return 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = (1 + sqrt(8))/2\n    b = 1 - sqrt(8)/2\n    x = int((a*a - b)/(2*b))\n    y = int((a*a + b)/(2*b))\n    if x*x + y*y == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    nth_octagonal = 0 \n    for i in range(1, n + 1): \n        nth_octagonal = nth_octagonal + i * (3 * i - 1) // 2\n    return nth_octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sum = 0\n    temp = 1\n    while temp <= n:\n        sum = sum + (temp*(temp+1))/2\n        temp = temp + 1\n    return sum\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n - 1\n    oct = 0\n    while n > 0:\n        oct = oct + 1\n        n = n - 1\n    return oct\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    octagonal_number = (3 * (n ** 2) - (n + 1)) // 2\n    return octagonal_number\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i < n:\n        i += 1\n        if is_prime(i):\n            continue\n        if (n % 3 == 0 and (n / 3) % 5 == 0) or (n % 5 == 0 and (n / 5) % 3 == 0):\n            return False\n        i -= 1\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #s=str(s)\n    d={}\n    for i in range(len(s)):\n        if s[i] not in d:\n            d[s[i]]=1\n        else:\n            d[s[i]]+=1\n    count=0\n    for i in d:\n        if i not in str(d):\n            count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        for j in range(i,len(s)+1):\n            substr = s[i:j]\n            if (len(substr)>0):\n                if substr.isdigit():\n                    count+=1\n                    \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        for j in range(i,len(s)):\n            if(int(s[i:j+1])==len(s[i:j+1])):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n    count = 0\n    for x in d:\n        count += (d[x] * (d[x] - 1))//2\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    for i in range(len(s)):\n        if s[i].isdigit():\n            dic[int(s[i])] += 1\n    return sum(dic.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        key=''.join(sorted(s[i]))\n        d[key]=d[key]+1\n    \n    #print(d)\n    return(sum(d.values()))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    char_dict = defaultdict(int)\n    for char in s:\n        char_dict[char] += 1\n    count = 0\n    for key, val in char_dict.items():\n        count += (val * (val - 1)) // 2\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        # Find the length of substring\n        length = 0\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                length += 1\n            else:\n                break\n        if length == len(s):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l=len(s)\n    sub=0\n    dict = defaultdict(int)\n    for i in range(l):\n        for j in range(l,i,-1):\n            sub_str = s[i:j]\n            if len(sub_str)>0:\n                sum_digits = 0\n                for k in sub_str:\n                    sum_digits+=int(k)\n                if sum_digits == len(sub_str):\n                    sub+=1\n                    dict[sub_str]+=1\n    return sub\n    \ndef insert_sort(l):\n    '''\n    Write a python function to insert the elements in a list in sorted order using insertion sort.\n    '''\n    for i in range(1,len(l)):\n        key = l[i]\n        j = i-1\n        while j >=0 and key < l[j]:\n            l[j+1] = l[j]\n            j-=1\n        l[j+1] = key\n    return l\n    \ndef last_k_frequent(l,k):\n    '''\n    Write a python function to find the last k frequent elements in the list.\n    '''\n    freq = dict()\n    for i in l:\n        if i in freq:\n            freq[i] +=1\n        else:\n            freq[i] =1\n    freq = sorted(freq.items(), key = lambda x: x[1], reverse = True)\n    final = []\n    for i in range(min(k,len(freq))):\n        final.append(freq[i][0])\n    return final\n    \ndef daily_temperatures(T):\n    '''\n    Write a python function to find the daily temperatures of a given list.\n    '''\n    l = []\n    for i in range(len(T)):\n        l.append(0)\n        if i == 0:\n            l[i] = 0\n        else:\n            l[i] = T[i] - T[i-1]\n    return l\n    \ndef max_sum_sub_array(nums):\n    '''\n    Write a python function to find the maximum sum of subarry in a given array.\n    '''\n    res = []\n    n = len(nums)\n    if n == 0:\n        return 0\n    for i in range(n):\n        max_sum = max_sum_sub_array(nums[i+1:])\n        res.append(max_sum + nums[i])\n    return max(res)\n    \ndef max_sum_subarray(A,low,high):\n    '''\n    Write a python function to find the maximum sum subarry.\n    '''\n    if high <= low:\n        return A[low]\n    if low == high:\n        return low\n    return max(max_sum_subarray(A,low,low + (high - low) // 2) + A[low] + max_sum_subarray(A,low + (high - low) // 2 + 1, high), \\\n    max_sum_subarray(A,low + 1, high) + A[high])\n    \ndef max_sum_subarray_2(A):\n    '''\n    Write a python function to find the maximum sum subarry.\n    '''\n    if not A:\n        return 0\n    n = len(A)\n    curr_max = A[0]\n    max_sum = curr_max\n    for i in range(1,n):\n        curr_max = max(A[i],curr_max + A[i])\n        max_sum = max(max_sum,curr_max)\n    return max_sum\n    \ndef max_subarray(nums,low,high):\n    '''\n    Write a python function to find the maximum sum subarry.\n    '''\n    if high <= low:\n        return nums[low]\n    if low == high:\n        return nums[low]\n    left = max_subarray(nums,low,(high + low) // 2)\n    right = max_subarray(nums,(high + low) // 2 + 1,high)\n    max_left = max(nums[(high + low) // 2],left)\n    max_right = max(right,nums[high])\n    return max(max_left,max_right)\n    \ndef swap(nums,i,j):\n    '''\n    Write a python function to swap the elements of a given array.\n    '''\n    nums[i],nums[j] = nums[j],nums[i]\n    return nums\n    \ndef min_max_subarray(nums,low,high):\n    '''\n    Write a python function to find the minimum and maximum subarry.\n    '''\n    if high <= low:\n        return (nums[low],nums[high])\n    if low == high:\n        return (nums[low],nums[high])\n    left_max = min_max_subarray(nums,low,(high + low) // 2)\n    right_min = min_max_subarray(nums,(high + low) // 2 + 1,high)\n    left_min = min(left_max[0],nums[low])\n    right_max = max(right_min[1],nums[high])\n    return (max(left_min,right_max),min(left_max[1],right_min[1]))\n    \ndef min_max_subarray_2(nums):\n    '''\n    Write a python function to find the minimum and maximum subarry.\n    '''\n    if not nums:\n        return (0,0)\n    n = len(nums)\n    curr_min = nums[0]\n    curr_max = nums[0]\n    for i in range(1,n):\n        curr_max = max(curr_max,nums[i])\n        curr_min = min(curr_min,nums[i])\n    return (curr_min,curr_max)\n    \ndef partition(nums,low,high):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    if low == high:\n        return (low,high)\n    mid = int((low + high) / 2)\n    if nums[low] < nums[mid]:\n        if nums[low] < nums[high]:\n            low = low\n        elif nums[low] < nums[mid]:\n            low = mid\n        elif nums[low] < nums[high]:\n            low = mid\n        else:\n            low = mid\n    elif nums[low] > nums[mid]:\n        if nums[low] > nums[high]:\n            high = high\n        elif nums[low] > nums[mid]:\n            high = mid\n        elif nums[low] > nums[high]:\n            high = mid\n        else:\n            high = mid\n    else:\n        return (low,high)\n    return partition(nums,low,high)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return False\n    else:\n        min_num = xs[0]\n        for num in xs:\n            if num < min_num:\n                min_num = num\n        return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_num:\n            min_num = xs[i]\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #n1 = xs[0]\n    n1 = xs[0]\n    for n2 in xs:\n        if n1 >= n2:\n            continue\n        else:\n            n1 = n2\n    print(n1)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_num:\n            min_num = xs[i]\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    print(f\"List length: {len(test_list)}\")\n    if len(test_list) < 2:\n        return\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    assert type(test_list) == list, \"It should be a list.\"\n    assert len(test_list) == 2, \"The list should contain two tuples.\"\n    assert all(type(item) == tuple for item in test_list), \"Each tuple should be of type tuple.\"\n    assert all(type(item) == int for item in test_list[0]), \"Each tuple should contain only integer values.\"\n    assert all(type(item) == int for item in test_list[1]), \"Each tuple should contain only integer values.\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return None\n    if len(test_list) == 1:\n        return 0\n    max_diff = 0\n    for i in range(len(test_list)):\n        if i + 1 == len(test_list):\n            break\n        if abs(test_list[i] - test_list[i + 1]) > max_diff:\n            max_diff = abs(test_list[i] - test_list[i + 1])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list\n    test_list.sort()\n    \n    # setup the first maximum difference and set it to zero.\n    max_diff = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # check if list is empty\n    if len(test_list) <= 1:\n        return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    ans = test_list[0] - test_list[1]\n    for i in range(0, len(test_list)-1):\n        ans = max(ans, test_list[i+1] - test_list[i])\n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return 0\n    max_diff = 0\n    for i in range(1, len(test_list)):\n        if test_list[i] - test_list[i-1] > max_diff:\n            max_diff = test_list[i] - test_list[i-1]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max:\n                max = abs(test_list[i] - test_list[j])\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    answer = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1] - test_list[i]\n        if diff > answer:\n            answer = diff\n    return answer\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sortSecond(val):\n        return val[1]\n    return sorted(subjectmarks, key=sortSecond)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks_list = []\n    for i in subjectmarks:\n        subject_marks_list.append(i[1])\n    subject_marks_list.sort()\n    for i in range(0,len(subject_marks_list)):\n        for j in subjectmarks:\n            if subject_marks_list[i] == j[1]:\n                temp = j\n                subjectmarks.remove(temp)\n                subjectmarks.append(temp)\n                break\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l=[]\n    for i in range(0,len(subjectmarks)):\n        l.append(subjectmarks[i][1])\n    l=sorted(l)\n    subjectmarks.sort(key=lambda x: x[1])\n    print(l)\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(sorted(subjectmarks, key=lambda subjectmarks:subjectmarks[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list = [x for x in data_list if x!= []]\n    for i in range(len(data_list)):\n        if type(data_list[i]) == list:\n            data_list[i] = data_list[i] + recursive_list_sum(data_list[i])\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Store the index of the list in a variable\n    index = 0\n    # Initialize the result to 0\n    result = 0\n    # Iterate over the entire list\n    while index < len(data_list):\n        # If the list is not empty\n        if data_list[index]:\n            # Get the element at that position\n            element = data_list[index]\n            # If the element is a list\n            if isinstance(element, list):\n                # Call the function\n                result += recursive_list_sum(element)\n            # If the element is not a list\n            else:\n                # Add the element at that position to the result\n                result += element\n        # Increment the index\n        index += 1\n    # Return the result\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list = data_list[1:-1].split(', ')\n    data_list = list(map(int, data_list))\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    n = len(data_list)\n    sum_n = 0\n    for i in range(n):\n        if type(data_list[i]) == type([]):\n            sum_n = sum_n + recursive_list_sum(data_list[i])\n        else:\n            sum_n = sum_n + data_list[i]\n    return sum_n\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    elif isinstance(data_list[0], list):\n        return sum(recursive_list_sum(data_list[0])) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    if len(data_list) > 0:\n        for element in data_list:\n            if isinstance(element,list):\n                result += recursive_list_sum(element)\n            else:\n                result += element\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        total = 0\n        for elem in data_list:\n            if isinstance(elem, list):\n                total += recursive_list_sum(elem)\n            else:\n                total += elem\n        return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == int:\n        return data_list\n    elif type(data_list) == list:\n        return sum(data_list) + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = len(list)\n    count = 0\n    for i in range(n):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    i = 0\n    for el in list:\n        if el > 0:\n            i += 1\n    return i\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(True)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in list:\n        if i>=0:\n            pos=pos+1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n > 2:\n            return helper(n-1) + helper(n-2)\n    return helper(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    res = 0\n    for i in range(n//2):\n        res += bell_number(n-i-1) * bell_number(i+1)\n        \n    return res + 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    dp_tbl = []\n    dp_tbl.append(1)\n    dp_tbl.append(1)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # let's make a list of all the bell numbers\n    bell_numbers = range(1, (n+1))\n    # let's create a list to store the number of ways to partition the set\n    partitions = []\n    # let's use the fact that there are only two ways to partition a list of numbers\n    partitions.append(2)\n    partitions.append(1)\n    # iterate over the list of bell numbers\n    for bell_number in bell_numbers:\n        # let's create a list to store the number of ways to partition the set\n        ways = []\n        # let's loop over all the possible partitions of the set\n        for partition in partitions:\n            # let's check if the partition can still be larger than the number\n            if bell_number >= partition:\n                # if it is, let's add one to the ways count\n                ways.append(partition)\n        # let's add the number of ways to the total count\n        partitions.append(sum(ways))\n    return partitions[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = 0\n    for i in range(1, n+1):\n        ways += num_ways(i)\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return math.factorial(n + 1) / math.factorial(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    from math import factorial\n    if not n:\n        return 1\n    if n == 1:\n        return 1\n    return factorial(n)/(factorial(n - 3)*factorial(3))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (A[0] >= A[-1]):\n        print(\"{} is monotonic\".format(A))\n        return True\n    else:\n        print(\"{} is not monotonic\".format(A))\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    N = len(A) \n    is_increasing = True\n    is_decreasing = True\n    for i in range(1,N):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n    if is_increasing and is_decreasing:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    A = list(sorted(A))\n    if A[0]==A[-1]:\n        return True\n    for i in range(1,len(A)-1):\n        if A[i]<A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # code here\n    for i in range(len(A)-1):\n        if A[i]<A[i+1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    # checking for all three cases of 2 \n    # consecutive elements \n    for i in range(0, n-1): \n        if (A[i] < A[i+1]): \n            for j in range(i+1, n-1): \n                if (A[j] < A[i+1]): \n                    return False\n                else: \n                    continue\n    return True\n    \n    \ndef main():\n    \n    print(is_Monotonic([1, 1, 2, 2, 3])) #true\n    print(is_Monotonic([3, 3, 3])) #true\n    print(is_Monotonic([1, 2, 1])) #false\n    print(is_Monotonic([1, 2, 1, 4])) #true\n    print(is_Monotonic([1, 1, 1, 1])) #true\n    print(is_Monotonic([1, 1, 2, 2, 2])) #true\n    print(is_Monotonic([1, 1, 2, 3])) #true\n    print(is_Monotonic([1, 1, 1, 2])) #false\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return False\n    increasing, decreasing = True, True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n    return increasing or decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    if len(A) == 2:\n        if A[0]<A[1]:\n            return True\n        else:\n            return False\n    for i in range(len(A)-1):\n        if A[i]<=A[i+1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    if A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    if A[0] > A[1]:\n        return is_Monotonic(A[:-1])\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n    return increasing"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i]==s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if (len(l) >= len(s)):\n        for i in range(len(s)):\n            if (s[i]!= l[i]):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    x = 0\n    for i in l:\n        if i == s[x]:\n            x = x + 1\n    if x == len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    start_index = 0\n    for i in range(len(l)):\n        if l[i] == s[0] and l[i+1] == s[1]:\n            start_index = i+1\n            break\n    return start_index\n    "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #If the list is empty\n    if len(l)==0:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    if len(s) == 0:\n        return True\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if set(i) == set(s):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_len = len(s)\n    l_len = len(l)\n    if s_len > l_len:\n        return False\n    for i in range(0, l_len - s_len + 1):\n        for j in range(0, s_len):\n            if l[i + j]!= s[j]:\n                return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(l)!= list:\n        raise TypeError(\"l must be a list\")\n    if type(s)!= list:\n        raise TypeError(\"s must be a list\")\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    elif len(Input[0]) == 0:\n        return False\n    else:\n        return all(len(Input)==len(Input[i]) for i in range(0,len(Input)))\n    \nInput = []\nInput.append([\"1\",\"2\",\"3\"])\nInput.append([\"1\",\"2\"])\nInput.append([\"1\",\"2\",\"3\",\"4\"])\nInput.append([])\nInput.append([1])\nInput.append([1,2])\nInput.append([\"1\",\"2\"])\nInput.append([\"1\",\"2\",\"3\"])\nInput.append([\"1\",\"2\",\"3\",\"4\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])\nInput.append([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\"1\",\"2\",\"3\",\""
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #input: [(1,2,3),(1,2),(2,3)]\n    #output: True\n    for tup1,tup2 in zip(Input[0],Input[1]):\n        if len(tup1)!= len(tup2):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count=0\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            count+=1\n    if count==0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    def length(tup):\n        return len(tup)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple1 = Input[0]\n    tuple2 = Input[1]\n    l1 = len(tuple1)\n    l2 = len(tuple2)\n    if l1!= l2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    i=0\n    count=0\n    while i<len(Input):\n        j=0\n        while j<len(Input[i]):\n            if j!=len(Input[i]):\n                if Input[i][j]!=Input[i][j+1]:\n                    return \"False\"\n            j+=1\n        i+=1\n    return \"True\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length=True\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            equal_length=False\n            break\n    return equal_length\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple=True\n    for i in range(0,len(Input)):\n        if(len(Input[i])!=len(Input[i+1])):\n            equal_tuple=False\n    return equal_tuple\n        \nprint(find_equal_tuple([(1,2),(1,2),(1,2)]))\nprint(find_equal_tuple([(1,2),(1,2),(1,2,3)]))\nprint(find_equal_tuple([(1,2,3),(1,2,3),(1,2,3)]))\nprint(find_equal_tuple([(1,2,3),(1,2,3),(1,2,3),(1,2)]))\nprint(find_equal_tuple([(1,2,3),(1,2,3),(1,2,3,4),(1,2,3)]))"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = Input.split(' ')\n    Input = [x.split(',') for x in Input]\n    if len(Input[0]) == len(Input[1]) and len(Input[0]) == len(Input[2]) and len(Input[0]) == len(Input[3]) and len(Input[0]) == len(Input[4]):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)>0:\n        equal = True\n        for i in range(0,len(Input)):\n            if len(Input[i])!= len(Input[0]):\n                equal = False\n                break\n        return equal\n    else:\n        return False\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1: return\n    gaps = []\n    for i in range(n-1):\n        gaps.append(nums[i+1] - nums[i])\n    gaps.sort()\n    k = gaps[0]\n    for i in range(n):\n        if nums[i] >= k:\n            continue\n        j = i + 1\n        while j < n and nums[j] < nums[i]:\n            nums[j], nums[i] = nums[i], nums[j]\n            j += 1\n        if nums[i] >= k:\n            continue\n        j = i + 1\n        while j < n and nums[j] < nums[i] + k:\n            nums[j], nums[i] = nums[i], nums[j]\n            j += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = gap // 2\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                swapped = True\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # nums = nums[:]\n    # print(nums)\n    \n    n = len(nums)\n    gap = n\n    \n    while gap > 1:\n        # print('gaps:', gap)\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        \n        # print('gaps:', gap)\n        # print('\\n')\n        \n        i = 0\n        while i < n - gap:\n            # print('\\n\\n\\n')\n            # print('i:', i)\n            # print('nums:', nums)\n            \n            if nums[i] > nums[i + gap]:\n                # print('before swap:', nums)\n                # print('i:', i)\n                # print('gap:', gap)\n                # print('i + gap:', i + gap)\n                # print('\\n\\n\\n')\n                \n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # print('after swap:', nums)\n            else:\n                i += 1\n    \n    return nums\n    \ncomb_sort([1, 5, 4, 3, 6, 8, 8, 1, 1, 2])\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    p = nums[0]\n    left = []\n    right = []\n    for i in range(1, len(nums)):\n        if nums[i] < p:\n            left.append(nums[i])\n        else:\n            right.append(nums[i])\n    return comb_sort(left) + [p] + comb_sort(right)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pivots = []\n    for i in range(len(nums)):\n        while len(pivots) > 0 and nums[i] < nums[pivots[-1]]:\n            p = pivots.pop()\n            print(i, p)\n            nums[i], nums[p] = nums[p], nums[i]\n        pivots.append(i)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Your code here\n    length = len(nums)\n    gap = length//2\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt = int(n ** 0.5)\n    if sqrt ** 2 == n:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n **.5\n    if n - square**2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n>0 and (n%4==0 or n%4==1)) or (n>0 and (n%4==2 or n%4==3)): \n        print('Yes') \n    else: \n        print('No')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (int(n**0.5) == (n**0.5)): \n        print(n,\"is a perfect square\") \n    else: \n        print(n,\"is not a perfect square\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    i = 1\n    while(i*i <= n):\n        if n - i*i == 0:\n            return True\n        i = i + 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        if i*i == n:\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    '''\n    * Square(n) : For a given number n, check if it is the difference of two squares or not.\n    * In the below example, n=4, we need to find the difference of two squares, i.e., 4 and (4-1)^2.\n    * The output will be 1, since 4 can be represented as 4^2 - 1^2\n    '''\n    \n    # code here\n    if n>0:\n        return False\n    else:\n        k=1\n        while k**2<=n:\n            if k**2==n:\n                return True\n            else:\n                k+=1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    ans = True\n    sqr_n = math.sqrt(n)\n    # sqr_n = math.sqrt(n)\n    if (sqr_n*sqr_n) - n >= 0:\n        ans = False\n    return ans\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (n * n) == (n + 1) * (n + 2)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    i = 1\n    while i**2 <= n:\n        if n - (i**2) == 0:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(colors):\n        if colors[i]!= patterns[i]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors) < len(patterns):\n        return False\n        \n    for i in range(0, len(colors)):\n        pattern = patterns[i]\n        color = colors[i]\n        if (pattern == \"RRR\" and color == \"red\") or (pattern == \"RRR\" and color == \"yellow\") or (pattern == \"RRG\" and color == \"green\") or (pattern == \"GGG\" and color == \"blue\") or (pattern == \"GGR\" and color == \"black\") or (pattern == \"RGG\" and color == \"white\") or (pattern == \"GGR\" and color == \"white\") or (pattern == \"GGB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBR\" and color == \"black\") or (pattern == \"BRG\" and color == \"white\") or (pattern == \"BGR\" and color == \"black\") or (pattern == \"BGB\" and color == \"white\") or (pattern == \"RRB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\"):\n            continue\n        else:\n            return False\n    return True\n        \n    \ndef check_color(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors) < len(patterns):\n        return False\n        \n    for i in range(0, len(colors)):\n        pattern = patterns[i]\n        color = colors[i]\n        if (pattern == \"RRR\" and color == \"red\") or (pattern == \"RRR\" and color == \"yellow\") or (pattern == \"RRG\" and color == \"green\") or (pattern == \"GGG\" and color == \"blue\") or (pattern == \"GGR\" and color == \"black\") or (pattern == \"RGG\" and color == \"white\") or (pattern == \"GGR\" and color == \"white\") or (pattern == \"GGB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBR\" and color == \"black\") or (pattern == \"BRG\" and color == \"white\") or (pattern == \"BGR\" and color == \"black\") or (pattern == \"BGB\" and color == \"white\") or (pattern == \"RRB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\"):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns == None:\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = sorted(colors)\n    patterns = sorted(patterns)\n    if len(colors)!= len(patterns):\n        return False\n    else:\n        for i in range(len(colors)):\n            if patterns[i] == \"\":\n                continue\n            if patterns[i][0] == \"*\":\n                if len(colors[i]) > 0:\n                    return False\n            elif patterns[i]!= colors[i]:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #check whether the patterns is sequential\n    if len(patterns)!= len(colors):\n        return False\n    \n    #since patterns must be sequential we can just search in each row of the patterns for a match\n    for i in range(len(patterns)):\n        if len(patterns[i])!= len(colors[i]):\n            return False\n    \n    #we can then just iterate through each pattern and check whether the patterns match\n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j]!= colors[i][j]:\n                return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    for c in colors:\n        if c == patterns[i]:\n            i+=1\n            if i == len(patterns):\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # create an index variable\n    index = 0\n    # loop until the index is at the end of the patterns array\n    while index < len(patterns):\n        # check whether the given colors is equal to the pattern[index]\n        if colors == patterns[index]:\n            # increment the index\n            index += 1\n        # if the colors doesn't equal to the pattern[index], return False\n        else:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Find all possible tuples whose elements are divisible by k from the given list of tuples\n    # s = set()\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         if ((test_list[i][0] % K == 0) and (test_list[j][0] % K == 0)):\n    #             s.add((test_list[i], test_list[j]))\n    # return s\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def helper(list_tuples, K):\n        for i in range(len(list_tuples)):\n            for j in range(len(list_tuples)):\n                if i!= j:\n                    if (list_tuples[i][0] % K == 0) and (list_tuples[j][0] % K == 0) and list_tuples[i][0]!= list_tuples[j][0]:\n                        return True\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisors = []\n    for i in test_list:\n        if i[1] % K == 0:\n            divisors.append(i[0])\n    divisors.sort()\n    return divisors\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Approach 1: Brute force\n    # Iterate over all the tuples in the list, checking if each element is divisible by K.\n    # If the element is divisible by K, add it to the list of tuples.\n    # Time complexity: O(n^2)\n    # Space complexity: O(1)\n    output = []\n    for i in range(len(test_list)):\n        if all(j%K == 0 for j in test_list[i]):\n            output.append(test_list[i])\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # here we check for number of elements in the given list, if we don't have enough elements in the list, then return\n    if len(test_list) < K:\n        print('Wrong Input, not enough elements in the list')\n        return\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(i[0]%k == 0 for k in range(1,K+1)):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        if all(test_list[i] % k == 0 for k in range(1, K + 1)):\n            res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initializing output list\n    output = []\n    # for each tuple in the given list\n    for i in range(len(test_list)):\n        # list is of length 2\n        a = test_list[i]\n        # if each element in the given tuple is divisible by k\n        if(a[0]%K == 0 and a[1]%K == 0):\n            # append tuple to output\n            output.append(a)\n    # returning the output\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a set of all numbers\n    numbers = set()\n    # loop over the tuples\n    for t in test_list:\n        # for each tuple\n        for val in t:\n            # check if this value is divisible by k\n            if val % K!= 0:\n                # if not divide by k\n                break\n            # if it is, add it to the set\n            numbers.add(val)\n    # create a list of tuples\n    out_list = []\n    # loop over the possible tuples\n    for t in product(numbers, repeat=K):\n        # if this tuple is in the test list, add it\n        if any(t in t_set for t_set in test_list):\n            out_list.append(t)\n    return out_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in range(0,len(test_list)):\n        a = test_list[i]\n        divide_by = a[0]//K\n        if a[0] % K == 0:\n            new_list.append(a)\n    print(new_list)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print(\"The Number {} is divisible by 11\".format(n))\n    else:\n        print(\"The Number {} is not divisible by 11\".format(n))\n        \n        \ndef FindDivisible(n): \n    '''\n    Write a python function to find the number of times a number n is divisible by 11.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%11==0:\n            count+=1\n    return count\n    \n        \ndef isPrime(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        print(\"Not Prime\")\n    elif n==2:\n        print(\"Prime\")\n    else:\n        for i in range(2,n//2):\n            if n%i==0:\n                print(\"Not Prime\")\n                break\n        else:\n            print(\"Prime\")\n            \ndef isPrime2(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,n//2):\n        if n%i==0:\n            print(\"Not Prime\")\n            break\n    else:\n        print(\"Prime\")\n        \n        \ndef isPrime3(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==2 or n==3:\n        print(\"Prime\")\n    elif n>2 and n%2==0:\n        print(\"Not Prime\")\n    elif n>2 and n%3==0:\n        print(\"Not Prime\")\n    else:\n        for i in range(3,n//2,2):\n            if n%i==0:\n                print(\"Not Prime\")\n                break\n        else:\n            print(\"Prime\")\n        \n    \ndef isPrime4(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==2 or n==3:\n        print(\"Prime\")\n    elif n>2 and n%2==0:\n        print(\"Not Prime\")\n    elif n>2 and n%3==0:\n        print(\"Not Prime\")\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                print(\"Not Prime\")\n                break\n        else:\n            print(\"Prime\")\n            \n    \ndef isPrime5(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==2 or n==3:\n        print(\"Prime\")\n    elif n>2 and n%2==0:\n        print(\"Not Prime\")\n    elif n>2 and n%3==0:\n        print(\"Not Prime\")\n    elif n>2 and n%5==0:\n        print(\"Not Prime\")\n    elif n>2 and n%7==0:\n        print(\"Not Prime\")\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                print(\"Not Prime\")\n                break\n        else:\n            print(\"Prime\")\n            \n    \ndef isPrime6(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==2 or n==3:\n        print(\"Prime\")\n    elif n>2 and n%2==0:\n        print(\"Not Prime\")\n    elif n>2 and n%3==0:\n        print(\"Not Prime\")\n    elif n>2 and n%5==0:\n        print(\"Not Prime\")\n    elif n>2 and n%7==0:\n        print(\"Not Prime\")\n    elif n>2 and n%11==0:\n        print(\"Not Prime\")\n    elif n>2 and n%13==0:\n        print(\"Not Prime\")\n    elif n>2 and n%17==0:\n        print(\"Not Prime\")\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                print(\"Not Prime\")\n                break\n        else:\n            print(\"Prime\")\n            \n    \ndef isPrime7(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==2 or n==3:\n        print(\"Prime\")\n    elif n>2 and n%2==0:\n        print(\"Not Prime\")\n    elif n>2 and n%3==0:\n        print(\"Not Prime\")\n    elif n>2 and n%5==0:\n        print(\"Not Prime\")\n    elif n>2 and n%7==0:\n        print(\"Not Prime\")\n    elif n>2 and n%11==0:\n        print(\"Not Prime\")\n    elif n>2 and n%13==0:\n        print(\"Not Prime\")\n    elif n>2 and n%17==0:\n        print(\"Not Prime\")\n    elif n>2 and n%19==0:\n        print(\"Not Prime\")\n    elif n>2 and n%23==0:\n        print(\"Not Prime\")\n    elif n>2 and n%29==0:\n        print(\"Not Prime\")\n    elif n>2 and n%31==0:\n        print(\"Not Prime\")\n    elif n>2 and n%37==0:\n        print(\"Not Prime\")\n    elif n>2 and n%41==0:\n        print(\"Not Prime\")\n    elif n>2 and n%43==0:\n        print(\"Not Prime\")\n    elif n>2 and n%47==0:\n        print(\"Not Prime\")\n    elif n>2 and n%53==0:\n        print(\"Not Prime\")\n    elif n>2 and n%59==0:\n        print(\"Not Prime\")\n    elif n>2 and n%61==0:\n        print(\"Not Prime\")\n    elif n>2 and n%67==0:\n        print(\"Not Prime\")\n    elif n>2 and n%71==0:\n        print(\"Not Prime\")\n    elif n>2 and n%73==0:\n        print(\"Not Prime\")\n    elif n>2 and n%79==0:\n        print(\"Not Prime\")\n    elif n>2 and n%83==0:\n        print(\"Not Prime\")\n    elif n>2 and n%89==0:\n        print(\"Not Prime\")\n    elif n>2 and n%97==0:\n        print(\"Not Prime\")\n    elif n>2 and n%103==0:\n        print(\"Not Prime\")\n    elif n>2 and n%107==0:\n        print(\"Not Prime\")\n    elif n>2 and n%109==0:\n        print(\"Not Prime\")\n    elif n>2 and n%121==0:\n        print(\"Not Prime\")\n    elif n>2 and n%131==0:\n        print(\"Not Prime\")\n    elif n>2 and n%137==0:\n        print(\"Not Prime\")\n    elif n>2 and n%139==0:\n        print(\"Not Prime\")\n    elif n>2 and n%149==0:\n        print(\"Not Prime\")\n    elif n>2 and n%151==0:\n        print(\"Not Prime\")\n    elif n>2 and n%157==0:\n        print(\"Not Prime\")\n    elif n>2 and n%163==0:\n        print(\"Not Prime\")\n    elif n>2 and n%167==0:\n        print(\"Not Prime\")\n    elif n>2 and n%169==0:\n        print(\"Not Prime\")\n    elif n>2 and n%173==0:\n        print(\"Not Prime\")\n    elif n>2 and n%179==0:\n        print(\"Not Prime\")\n    elif n>2 and n%181==0:\n        print(\"Not Prime\")\n    elif n>2 and n%191==0:\n        print(\"Not Prime\")\n    elif n>2 and n%193==0:\n        print(\"Not Prime\")\n    elif n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return(n%11 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return True if n % 11 == 0 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11==0)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # import math \n    # if (math.ceil(n/11)==int(math.ceil(n/11))):\n    #     return True \n    # else: \n    #     return False \n    return True if (int(math.ceil(n/11))==11) else False "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_length = len(s)\n    if word_length % 2 == 0:\n        print(f'Word of length {word_length} is even.')\n    else:\n        print(f'Word of length {word_length} is odd.')\n        \n        "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"Yes, the word is even\")\n    else:\n        print(\"No, the word is odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #return (len(s)%2 == 1)\n    return (s!= s[::-1])\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        count += 1\n    if count % 2 == 0:\n        return False\n    else:\n        return True\nprint(word_len('hi'))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n    \nif __name__ == \"__main__\":\n    \n    test_input = [\"py\", \"h\",\"w\",\"o\"]\n    print(word_len(test_input))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    return (math.factorial(n + 1) / (math.factorial(n - 2) * 2))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 5:\n        return 1\n    return (3 * n - 2) * (n - 2) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 8\n    else:\n        return (n * (n+1) // 2)\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((2*(1+sqrt(5))**n)/(2**n * sqrt(5) + 5))\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 3\n    else:\n        return sum([tetrahedral_number(i) for i in range(1, n)]) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert type(n) == int\n    assert n > 0 and n < 21\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 12\n    elif n == 6:\n        return 14\n    elif n == 7:\n        return 16\n    elif n == 8:\n        return 18\n    elif n == 9:\n        return 20\n    elif n == 10:\n        return 22\n    elif n == 11:\n        return 24\n    elif n == 12:\n        return 26\n    elif n == 13:\n        return 28\n    elif n == 14:\n        return 30\n    elif n == 15:\n        return 32\n    elif n == 16:\n        return 34\n    elif n == 17:\n        return 36\n    elif n == 18:\n        return 38\n    elif n == 19:\n        return 40\n    elif n == 20:\n        return 42\n    elif n == 21:\n        return 44\n    else:\n        return 0\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 2\n    i = 1\n    while(i < n):\n        a = 3*a + 1\n        i = i + 1\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    else:\n        return (6*tetrahedral_number(n-1) - 2*n)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert (1 <= n <= 100)\n    \n    if n <= 7:\n        return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    return 4/3*pi*r**3\ndef volume_cylinder(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r1*r2\ndef volume_cone(r1, r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r1*r2*0.5\ndef volume_cone_in_sphere(r, h, r1, r2):\n    '''\n    Write a function to find the volume of a cone inscribed into a sphere.\n    '''\n    from math import pi\n    v = volume_sphere(r)\n    return v*(h**2)/3\ndef volume_cone_in_sphere_inc_radius(r1, r2, r):\n    '''\n    Write a function to find the volume of a cone inscribed into a sphere\n    when the radius of the cone is changed.\n    '''\n    from math import pi\n    return pi*(r2**2)/3*r1\ndef volume_cylinder_inc_radius(r1, r2, r):\n    '''\n    Write a function to find the volume of a cylinder inscribed in a cone\n    when the radius of the cylinder is changed.\n    '''\n    from math import pi\n    return pi*r1*r2*0.5*r\ndef volume_cylinder_inc_height(h, r1, r2, r):\n    '''\n    Write a function to find the volume of a cylinder inscribed in a cone\n    when the height of the cylinder is changed.\n    '''\n    return volume_cone_in_sphere_inc_radius(r1, r2, r)*h\ndef volume_cone_inc_height(h, r1, r2, r):\n    '''\n    Write a function to find the volume of a cone inscribed in a cylinder\n    when the height of the cone is changed.\n    '''\n    from math import pi\n    return pi*r1*r2*0.5*h\ndef volume_cone_in_sphere_inc_radius_and_height(r1, r2, r, h):\n    '''\n    Write a function to find the volume of a cone inscribed into a sphere\n    when the radius, height, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*r1*r2*0.5*h\ndef volume_cone_in_sphere_inc_height_and_radius(h, r1, r2, r):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the height and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*r1*r2*0.5*h\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a sphere\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_height_and_radius_and_center(h, r1, r2, r, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the height and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*r1*r2*0.5*h*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*r1*r2*0.5*h*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_height_and_radius_and_center(h, r1, r2, r, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the height and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, and center of the cone are changed.\n    '''\n    from math import pi\n    return pi*r1*r2*0.5*h*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*(center[2]-center[0])\ndef volume_cone_in_sphere_inc_radius_and_height_and_center(r1, r2, r, h, center):\n    '''\n    Write a function to find the volume of a cone inscribed into a cylinder\n    when the radius, height, center, and radius of the cone are changed.\n    '''\n    from math import pi\n    return pi*(r2**2)*"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    print(volume)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume_of_sphere = (4/3) * pi * r**3\n    return volume_of_sphere\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*3.14159265*r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(\"Volume of sphere is:\",4/3*3.14*r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #your code here\n    return None\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\nprint(volume_sphere(1))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    return res % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ((ord(strr[0]) - ord('a') + 1) % 26 + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr((ord(strr) - ord('a') + 26) % 26 + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    sum = 0\n    for x in strr:\n        sum = sum + ord(x)\n    return (sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # create an empty dictionary\n    d = {}\n    # for each character in the given string\n    for char in strr:\n        # if the character is not present in dictionary add it\n        if char not in d:\n            d[char] = ord(char) % 26 + 1\n        else:\n            # if already present increment the value by 1\n            d[char] += 1\n    # return the dictionary\n    return d\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    m=0\n    for i in range(len(strr)):\n        m+=ord(strr[i])\n    return(m)\n    \nprint(get_Char(\"hello\"))\nprint(get_Char(\"xyz\"))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # start writing your code here\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    return res%26\n    "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result = result + ord(i)\n    return (result % 26)\nprint(get_Char('Hello'))"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n        \n    return char % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in range(len(strr)):\n        ans = ans + ord(strr[i])\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    result = 1\n    for i in range(n):\n        result = (a + b) % c\n        a = b\n        b = c\n        c = result\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # current number\n    n1 = 1\n    # number of iterations\n    i = 0\n    # number of numbers in the sequence\n    n2 = 0\n    # while the number of iterations is less than n2\n    while i < n2:\n        # add the current number to the sequence\n        n2 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #n = 3\n    #n = 7\n    #n = 12\n    #n = 19\n    seq = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368]\n    #seq = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040]\n    #seq = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269]\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    nth_num = 0\n    for i in range(2,n+1):\n        nth_num = nth_num + i\n    return nth_num\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1\n    if n == 31:\n        return 1\n    if n == 32:\n        return 1\n    if n == 33:\n        return 1\n    if n == 34:\n        return 1\n    if n == 35:\n        return 1\n    if n == 36:\n        return 1\n    if n == 37:\n        return 1\n    if n == 38:\n        return 1\n    if n == 39:\n        return 1\n    if n == 40:\n        return 1\n    if n == 41:\n        return 1\n    if n == 42:\n        return 1\n    if n == 43:\n        return 1\n    if n == 44:\n        return 1\n    if n == 45:\n        return 1\n    if n == 46:\n        return 1\n    if n == 47:\n        return 1\n    if n == 48:\n        return 1\n    if n == 49:\n        return 1\n    if n == 50:\n        return 1\n    if n == 51:\n        return 1\n    if n == 52:\n        return 1\n    if n == 53:\n        return 1\n    if n == 54:\n        return 1\n    if n == 55:\n        return 1\n    if n == 56:\n        return 1\n    if n == 57:\n        return 1\n    if n == 58:\n        return 1\n    if n == 59:\n        return 1\n    if n == 60:\n        return 1\n    if n == 61:\n        return 1\n    if n == 62:\n        return 1\n    if n == 63:\n        return 1\n    if n == 64:\n        return 1\n    if n == 65:\n        return 1\n    if n == 66:\n        return 1\n    if n == 67:\n        return 1\n    if n == 68:\n        return 1\n    if n == 69:\n        return 1\n    if n == 70:\n        return 1\n    if n == 71:\n        return 1\n    if n == 72:\n        return 1\n    if n == 73:\n        return 1\n    if n == 74:\n        return 1\n    if n == 75:\n        return 1\n    if n == 76:\n        return 1\n    if n == 77:\n        return 1\n    if n == 78:\n        return 1\n    if n == 79:\n        return 1\n    if n == 80:\n        return 1\n    if n == 81:\n        return 1\n    if n == 82:\n        return 1\n    if n == 83:\n        return 1\n    if n == 84:\n        return 1\n    if n == 85:\n        return 1\n    if n == 86:\n        return 1\n    if n == 87:\n        return 1\n    if n == 88:\n        return 1\n    if n == 89:\n        return 1\n    if n == 90:\n        return 1\n    if n == 91:\n        return 1\n    if n == 92:\n        return 1\n    if n == 93:\n        return 1\n    if n == 94:\n        return 1\n    if n == 95:\n        return 1\n    if n == 96:\n        return 1\n    if n == 97:\n        return 1\n    if n == 98:\n        return 1\n    if n == 99:\n        return 1\n    if n == 100:\n        return 1\n    if n == 101:\n        return 1\n    if n == 102:\n        return 1\n    if n == 103:\n        return 1\n    if n == 104:\n        return 1\n    if n == 105:\n        return 1\n    if n == 106:\n        return 1\n    if n == 107:\n        return 1\n    if n == 108:\n        return 1\n    if n == 109:\n        return 1\n    if n == 110:\n        return 1\n    if n == 111:\n        return 1\n    if n == 112:\n        return 1\n    if n == 113:\n        return 1\n    if n == 114:\n        return 1\n    if n == 115:\n        return 1\n    if n == 116:\n        return 1\n    if n == 117:\n        return 1\n    if n == 118:\n        return 1\n    if n == 119:\n        return 1\n    if n == 120:\n        return 1\n    if n == 121:\n        return 1\n    if n == 122:\n        return 1\n    if n == 123:\n        return 1\n    if n == 124:\n        return 1\n    if n == 125:\n        return 1\n    if n == 126:\n        return 1\n    if n == 127:\n        return 1\n    if n == 128:\n        return 1\n    if n == 129:\n        return 1\n    if n == 130:\n        return 1\n    if n == 131:\n        return 1\n    if n == 132:\n        return 1\n    if n == 133:\n        return 1\n    if n == 134:\n        return 1\n    if n == 135:\n        return 1\n    if n == 136:\n        return 1\n    if n == 137:\n        return 1\n    if n == 138:\n        return 1\n    if n == 139:\n        return 1\n    if n == 140:\n        return 1\n    if n == 141:\n        return 1\n    if n == 142:\n        return 1\n    if n == 143:\n        return 1\n    if n == 144:\n        return 1\n    if n == 145:\n        return 1\n    if n == 146:\n        return 1\n    if n == 147:\n        return 1\n    if n == 148:\n        return 1\n    if n == 149:\n        return 1\n    if n == 150:\n        return 1\n    if n == 151:\n        return 1\n    if n == 152:\n        return 1\n    if n == 153:\n        return 1\n    if n == 154:\n        return 1\n    if n == 155:\n        return 1\n    if n == 156:\n        return 1\n    if n == 157:\n        return 1\n    if n == 158:\n        return 1\n    if n == 159:\n        return 1\n    if n == 160:\n        return 1\n    if n == 161:\n        return 1\n    if n == 162:\n        return 1\n    if n == 163:\n        return 1\n    if n == 164:\n        return 1\n    if n == 165:\n        return 1\n    if n == 166:\n        return 1\n    if n == 167:\n        return 1\n    if n == 168:\n        return 1\n    if n == 169:\n        return 1\n    if n == 170:\n        return 1\n    if n == 171:\n        return 1\n    if n == 172:\n        return 1\n    if n == 173:\n        return 1\n    if n == 174:\n        return 1\n    if n == 175:\n        return 1\n    if n == 176:\n        return 1\n    if n == 177:\n        return 1\n    if n == 178:\n        return 1\n    if n == 179:\n        return 1\n    if n == 180:\n        return 1\n    if n == 181:\n        return 1\n    if n ="
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return newman_conway_sequence[n-1] + newman_conway_sequence[n-2]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 5\n    if n == 8:\n        return 8\n    if n == 9:\n        return 13\n    if n == 10:\n        return 21\n    if n == 11:\n        return 34\n    if n == 12:\n        return 55\n    if n == 13:\n        return 89\n    if n == 14:\n        return 144\n    if n == 15:\n        return 233\n    if n == 16:\n        return 377\n    if n == 17:\n        return 610\n    if n == 18:\n        return 987\n    if n == 19:\n        return 1597\n    if n == 20:\n        return 2584\n    if n == 21:\n        return 4181\n    if n == 22:\n        return 6696\n    if n == 23:\n        return 10586\n    if n == 24:\n        return 16760\n    if n == 25:\n        return 33424\n    if n == 26:\n        return 55321\n    if n == 27:\n        return 87252\n    if n == 28:\n        return 128796\n    if n == 29:\n        return 241409\n    if n == 30:\n        return 465648\n    if n == 31:\n        return 826720\n    if n == 32:\n        return 1373804\n    if n == 33:\n        return 2808832\n    if n == 34:\n        return 5465536\n    if n == 35:\n        return 8821904\n    if n == 36:\n        return 14868992\n    if n == 37:\n        return 31726640\n    if n == 38:\n        return 54912384\n    if n == 39:\n        return 895544096\n    if n == 40:\n        return 1677616048\n    if n == 41:\n        return 3826829120\n    if n == 42:\n        return 6137776672\n    if n == 43:\n        return 1060951840\n    if n == 44:\n        return 1774668640\n    if n == 45:\n        return 4374528624\n    if n == 46:\n        return 6564953840\n    if n == 47:\n        return 11446744096\n    if n == 48:\n        return 18503344032\n    if n == 49:\n        return 47098652832\n    if n == 50:\n        return 87296895264\n    if n == 51:\n        return 15672370208\n    if n == 52:\n        return 318994270928\n    if n == 53:\n        return 5447815104\n    if n == 54:\n        return 8955773472\n    if n == 55:\n        return 1460492816\n    if n == 56:\n        return 3131001728\n    if n == 57:\n        return 5481847296\n    if n == 58:\n        return 9072883648\n    if n == 59:\n        return 15671176160\n    if n == 60:\n        return 33392019280\n    if n == 61:\n        return 55380776048\n    if n == 62:\n        return 9121886240\n    if n == 63:\n        return 1567661824\n    if n == 64:\n        return 33462813248\n    if n == 65:\n        return 5541593248\n    if n == 66:\n        return 912862960\n    if n == 67:\n        return 1567681904\n    if n == 68:\n        return 33758428672\n    if n == 69:\n        return 55475576096\n    if n == 70:\n        return 91345649600\n    if n == 71:\n        return 1567723072\n    if n == 72:\n        return 334670249600\n    if n == 73:\n        return 55526625600\n    if n == 74:\n        return 91377108800\n    if n == 75:\n        return 15677388832\n    if n == 76:\n        return 334680475200\n    if n == 77:\n        return 55467341840\n    if n == 78:\n        return 91377795872\n    if n == 79:\n        return 15677888064\n    if n == 80:\n        return 334680692800\n    if n == 81:\n        return 554756952000\n    if n == 82:\n        return 91366166672\n    if n == 83:\n        return 156781840320\n    if n == 84:\n        return 334680947392\n    if n == 85:\n        return 554592176096\n    if n == 86:\n        return 91366561088\n    if n == 87:\n        return 156788190400\n    if n == 88:\n        return 334680705552\n    if n == 89:\n        return 555275342432\n    if n == 90:\n        return 91368531296\n    if n == 91:\n        return 15678556640\n    if n == 92:\n        return 334680755264\n    if n == 93:\n        return 55543273488\n    if n == 94:\n        return 91368685760\n    if n == 95:\n        return 156789297632\n    if n == 96:\n        return 334680874400\n    if n == 97:\n        return 55543251072\n    if n == 98:\n        return 91368758400\n    if n == 99:\n        return 15679038976\n    if n == 100:\n        return 334680874400\n    if n == 101:\n        return 55544323264\n    if n == 102:\n        return 91375173600\n    if n == 103:\n        return 15679263024\n    if n == 104:\n        return 334680874400\n    if n == 105:\n        return 55544539168\n    if n == 106:\n        return 91375174688\n    if n == 107:\n        return 15679596320\n    if n == 108:\n        return 334680854400\n    if n == 109:\n        return 555444008032\n    if n == 110:\n        return 91375531488\n    if n == 111:\n        return 15679543456\n    if n == 112:\n        return 334680854400\n    if n == 113:\n        return 55544458240\n    if n == 114:\n        return 91375562688\n    if n == 115:\n        return 15679603088\n    if n == 116:\n        return 334680854400\n    if n == 117:\n        return 55544459024\n    if n == 118:\n        return 91375578688\n    if n == 119:\n        return 1567956672\n    if n == 120:\n        return 334680854400\n    if n == 121:\n        return 55544463760\n    if n == 122:\n        return 91375555760\n    if n == 123:\n        return 15679577344\n    if n == 124:\n        return 334680854400\n    if n == 125:\n        return 55544477744\n    if n == 126:\n        return 91375585216\n    if n == 127:\n        return 15679596320\n    if n == 128:\n        return 334680854400\n    if n == 129:\n        return 55544496528\n    if n == 130:\n        return 91375648624\n    if n == 131:\n        return 15679599904\n    if n == 132:\n        return 334680854400\n    if n == 133:\n        return 55544500160\n    if n == 134:\n        return 91375678400\n    if n == 135:\n        return 15679601440\n    if n == 136:\n        return 334680854400\n    if n == 137:\n        return 55544500528\n    if n == 138:\n        return 91375689976\n    if n == 139:\n        return 15679646048\n    if n == 140:\n        return 334680854400\n    if n ="
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Since n is always a positive number\n    # start with the first value in the sequence\n    number = 1\n    \n    # Loop through each number in the sequence until n is reached\n    for i in range(1, n+1):\n        number = number * (n+1 - i) // i\n        \n    return number\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return newman(n-1) + newman(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # area = 4 * math.pi * (r**2)\n    area = 4 * math.pi * (r**2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    print('the surface area of a sphere with radius', r, 'is', surface_area)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r, 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculation of Surface Area of a Sphere\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n    \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    return 4 * math.pi * r**2\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return 0.5 * math.pi * (r ** 2 + h ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #calculate surface area of sphere\n    surface_area = 4 * math.pi * math.pow(r, 2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    rad = 2 * math.pi * r\n    surface = 4 * math.pi * rad * rad\n    return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    from math import sqrt\n    import numpy as np\n    import math\n    \n    x, y = 0, 0\n    \n    for i in range(n):\n        x, y = 6 * i - 3, 6 * i - 6\n        \n        if (x + y) % 3 == 0:\n            continue\n        \n        x, y = int((x + sqrt(3)) / 3) * sqrt(3), int((y + sqrt(3)) / 3) * sqrt(3)\n        \n        while True:\n            if x ** 2 + y ** 2 == 1:\n                print(f\"{i + 1}th centered hexagonal number: {x} {y}\")\n                break\n            x, y = 6 * i - 3, 6 * i - 6\n            \n            if (x + y) % 3 == 0:\n                break\n            \n            x, y = int((x + sqrt(3)) / 3) * sqrt(3), int((y + sqrt(3)) / 3) * sqrt(3)\n    \n    return\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 1 - ((1 - 1 / sqrt(3)) ** n) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    else:\n        return 1 + centered_hexagonal_number(n-1) * (3 ** (n - 1) - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #n is an even integer, 0, 1, 2, 3, 4\n    return ((4*n - 1) * (n*n + 1) ) / (n*n)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((-1 + (3*n - 3)**0.5)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # largest index of nth hexagonal number\n    largest_index = 6*(n//2)-2\n    \n    # return (a*c-b*(a+b))/(2*a*b)\n    def centered_hexagonal_number_rec(n, a, b, c):\n        return (a*c-b*(a+b))/(2*a*b)\n    \n    # choose nth hexagonal number\n    return centered_hexagonal_number_rec(n, 1, 2, 3)\n    \n    \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**2 - int(n**(1/2))**2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    return 1 - (1 / 3) * (2 * n - 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    for k1 in dict1:\n        final_dict[k1] = dict1[k1]\n    for k2 in dict2:\n        final_dict[k2] = dict2[k2]\n    for k3 in dict3:\n        final_dict[k3] = dict3[k3]\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2), dict1.update(dict3), dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # if(dict1==None or dict2==None or dict3==None):\n    #     return None\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict1.copy()\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    newdict={}\n    for keys, values in dict1.items():\n        newdict[keys]=values\n    for keys, values in dict2.items():\n        newdict[keys]=values\n    for keys, values in dict3.items():\n        newdict[keys]=values\n    return newdict\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a third dictionary.\n    '''\n    newdict={}\n    for keys, values in dict1.items():\n        newdict[keys]=values\n    for keys, values in dict2.items():\n        newdict[keys]=values\n    return newdict\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge dictionary.\n    '''\n    newdict={}\n    for keys, values in dict1.items():\n        newdict[keys]=values\n    for keys, values in dict2.items():\n        newdict[keys]=values\n    return newdict\ndef merge_dictionaries_tuple(dict1,dict2):\n    '''\n    Write a function to merge dictionaries based on keys.\n    '''\n    newdict={}\n    for keys, values in dict1.items():\n        if keys in dict2:\n            newdict[keys]=values\n    for keys, values in dict2.items():\n        newdict[keys]=values\n    return newdict\ndef merge_dictionaries_set(dict1,dict2):\n    '''\n    Write a function to merge dictionaries based on keys.\n    '''\n    newdict={}\n    for keys, values in dict1.items():\n        newdict[keys]=values\n    for keys, values in dict2.items():\n        if keys not in newdict:\n            newdict[keys]=values\n    return newdict\ndef merge_dictionaries_list(dict1,dict2):\n    '''\n    Write a function to merge dictionaries based on keys.\n    '''\n    newdict={}\n    for keys, values in dict1.items():\n        newdict[keys]=values\n    for keys, values in dict2.items():\n        if keys not in newdict:\n            newdict[keys]=values\n    return newdict\ndef remove_duplicate_values_from_dictionary(dict1):\n    '''\n    Write a function to remove duplicate values from dictionary\n    '''\n    final_dict={}\n    for keys, values in dict1.items():\n        if values not in final_dict:\n            final_dict[keys]=values\n    return final_dict\ndef get_longest_word_in_dict(dict1):\n    '''\n    Write a function to get the longest word in dictionary\n    '''\n    max_length=0\n    word=None\n    for keys, values in dict1.items():\n        if len(keys)>max_length:\n            word=keys\n            max_length=len(word)\n    return word\ndef get_list_of_unique_words(dict1):\n    '''\n    Write a function to get the list of unique words in dictionary.\n    '''\n    unique_words=[]\n    for keys, values in dict1.items():\n        if keys not in unique_words:\n            unique_words.append(keys)\n    return unique_words\ndef get_common_elements_in_lists(list1, list2):\n    '''\n    Write a function to get the common elements in lists\n    '''\n    common_elements=[]\n    for keys in list1:\n        if keys in list2:\n            common_elements.append(keys)\n    return common_elements\ndef get_total_num_of_keys_in_dictionary(dict1):\n    '''\n    Write a function to get the total number of keys in dictionary\n    '''\n    total_num_of_keys=0\n    for keys, values in dict1.items():\n        total_num_of_keys+=1\n    return total_num_of_keys\ndef get_num_of_keys_which_startswith_a(dict1,prefix):\n    '''\n    Write a function to get the number of keys which startswith a\n    '''\n    num_of_keys=0\n    for keys, values in dict1.items():\n        if keys.startswith(prefix):\n            num_of_keys+=1\n    return num_of_keys\ndef remove_empty_values_from_dictionary(dict1):\n    '''\n    Write a function to remove empty values from dictionary\n    '''\n    for keys, values in dict1.items():\n        if values==[]:\n            del dict1[keys]\n    return dict1\ndef get_dict_with_key_value_pairs_in_range(start_range, end_range, dict1):\n    '''\n    Write a function to get dictionary with key value pairs in range.\n    '''\n    new_dict={}\n    for keys, values in dict1.items():\n        if keys in range(start_range, end_range):\n            new_dict[keys]=values\n    return new_dict\ndef get_common_key_with_different_values(dict1, dict2):\n    '''\n    Write a function to find common key with different values\n    '''\n    for keys, values in dict1.items():\n        if keys in dict2 and dict1[keys]!=dict2[keys]:\n            return keys\ndef get_dict_with_sum_of_values(dict1):\n    '''\n    Write a function to get dictionary with sum of values.\n    '''\n    dict1_sum=0\n    new_dict={}\n    for keys, values in dict1.items():\n        dict1_sum+=values\n        new_dict[keys]=dict1_sum\n    return new_dict\ndef get_dict_with_keys_starting_with_s(dict1):\n    '''\n    Write a function to get dictionary with keys starting with s.\n    '''\n    new_dict={}\n    for keys, values in dict1.items():\n        if keys.startswith('s'):\n            new_dict[keys]=values\n    return new_dict\ndef get_dict_with_keys_endswith_s(dict1):\n    '''\n    Write a function to get dictionary with keys ending with s.\n    '''\n    new_dict={}\n    for keys, values in dict1.items():\n        if keys.endswith('s'):\n            new_dict[keys]=values\n    return new_dict\ndef get_dict_with_keys_and_values_s_and_b(dict1):\n    '''\n    Write a function to get dictionary with keys and values s and b.\n    '''\n    new_dict={}\n    for keys, values in dict1.items():\n        if keys.startswith('s') and values.endswith('b'):\n            new_dict[keys]=values\n    return new_dict\ndef get_dict_with_keys_ending_in_s(dict1):\n    '''\n    Write a function to get dictionary with keys ending in s.\n    '''\n    new_dict={}\n    for keys, values in dict1.items():\n        if keys.endswith('s'):\n            new_dict[keys]=values\n    return new_dict\ndef get_dict_with_keys_starts_with_a(dict1):\n    '''\n    Write a function to get dictionary with keys starting with a.\n    '''\n    new_dict={}\n    for keys, values in dict1.items():\n        if keys.startswith('a'):\n            new_dict[keys]=values\n    return new_dict\ndef get_dict_with_values_in_list(dict1, list1):\n    '''\n    Write a function to get dictionary with values in list.\n    '''\n    new_dict={}\n    for keys, values in dict1.items():\n        if values in list1:\n            new_dict[keys]=values\n    return new_dict\ndef get_dict_with_values_not_in_list(dict1, list1):\n    '''\n    Write a function to get dictionary with values not in list.\n    '''\n    new_dict={}\n    for keys, values in dict1.items():\n        if values not in list1:\n            new_dic"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1=dict1.copy()\n    d2=dict2.copy()\n    d3=dict3.copy()\n    d=dict()\n    for key in d1:\n        if key in d2:\n            d[key]=d1[key]+d2[key]\n        else:\n            d[key]=d1[key]\n    for key in d2:\n        if key in d3:\n            d[key]=d2[key]+d3[key]\n        else:\n            d[key]=d2[key]\n    for key in d3:\n        if key in d:\n            d[key]=d3[key]+d[key]\n        else:\n            d[key]=d3[key]\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3 = dict(dict2.items() + dict3.items())\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict((k,v) for d in (dict1,dict2,dict3) for k, v in d.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for num in list1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] in dict1:\n            dict1[list1[i]] += 1\n        else:\n            dict1[list1[i]] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = {}\n    for i in list1:\n        count_dict[i] = list1.count(i)\n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        if(list1[i] not in freq_dict):\n            freq_dict[list1[i]] = 1\n        else:\n            freq_dict[list1[i]] += 1\n    return freq_dict\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    string_rev = string[::-1]\n    if(string == string_rev):\n        return True\n    else:\n        return False\n    \ndef insert_record(dict_in, dict_to_insert, val_to_insert):\n    '''\n    Write a function to insert an item into a dictionary with the provided key.\n    '''\n    if val_to_insert in dict_to_insert.keys():\n        dict_in[val_to_insert].update(dict_to_insert[val_to_insert])\n        return dict_in\n    else:\n        dict_in[val_to_insert] = dict_to_insert[val_to_insert]\n        return dict_in\n    \ndef search_record(dict_in, key):\n    '''\n    Write a function to search a dictionary for the provided key and return the corresponding value.\n    '''\n    for i in range(len(dict_in.keys())):\n        if(key == dict_in.keys()[i]):\n            return dict_in.values()[i]\n    return None\n    \ndef print_record(dict_in):\n    '''\n    Write a function to print the contents of a dictionary in a readable form.\n    '''\n    for i in range(len(dict_in.keys())):\n        print(dict_in.keys()[i], dict_in.values()[i])\n    return None\n    \ndef remove_record(dict_in, val):\n    '''\n    Write a function to remove a particular value from a dictionary and return the dictionary.\n    '''\n    for i in range(len(dict_in.keys())):\n        if(val == dict_in.keys()[i]):\n            dict_in.pop(val)\n            return dict_in\n    return None\n    \ndef dictionary_union(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries and return the merged dictionary.\n    '''\n    dict_out = {}\n    for key1 in dict1.keys():\n        if key1 in dict2.keys():\n            dict_out[key1] = dict1[key1] + dict2[key1]\n        else:\n            dict_out[key1] = dict1[key1]\n    for key2 in dict2.keys():\n        if key2 not in dict_out.keys():\n            dict_out[key2] = dict2[key2]\n    return dict_out\n    \ndef dictionary_intersection(dict1, dict2):\n    '''\n    Write a function to get the intersection of two dictionaries.\n    '''\n    dict_inter = {}\n    for key1 in dict1.keys():\n        if(key1 in dict2.keys()):\n            dict_inter[key1] = dict1[key1]\n    return dict_inter\n    \ndef reverse_dict(dict_in):\n    '''\n    Write a function to reverse a dictionary, swapping keys and values.\n    '''\n    new_dict = collections.OrderedDict()\n    for key, val in dict_in.items():\n        new_dict[val] = key\n    return new_dict\n    \ndef print_k_to_n(k, n):\n    '''\n    Write a function to print the numbers from 1 to n where k divides n.\n    '''\n    for i in range(1, n+1):\n        if(i % k == 0):\n            print(i)\n    return None\n    \ndef print_n_to_k(k, n):\n    '''\n    Write a function to print the numbers from n to k with n as the start and k as the end.\n    '''\n    for i in range(n, k):\n        if(i % k == 0):\n            print(i)\n    return None\n    \ndef print_k_to_n_rev(k, n):\n    '''\n    Write a function to print the numbers from k to 1 where k divides n.\n    '''\n    for i in range(k, 0, -1):\n        if(i % n == 0):\n            print(i)\n    return None\n    \ndef print_n_to_k_rev(k, n):\n    '''\n    Write a function to print the numbers from n to k with n as the start and k as the end.\n    '''\n    for i in range(n, 0, -1):\n        if(i % k == 0):\n            print(i)\n    return None\n    \ndef print_num_to_k(k, n):\n    '''\n    Write a function to print the numbers from 1 to k where k divides n.\n    '''\n    for i in range(1, k+1):\n        if(i % k == 0):\n            print(i)\n    return None\n    \ndef print_k_to_num(k, n):\n    '''\n    Write a function to print the numbers from k to 1 where k divides n.\n    '''\n    for i in range(k, n+1):\n        if(i % k == 0):\n            print(i)\n    return None\n    \ndef print_num_to_k_rev(k, n):\n    '''\n    Write a function to print the numbers from k to 1 where k divides n.\n    '''\n    for i in range(k, n+1):\n        if(i % k == 0):\n            print(i)\n    return None\n    \ndef to_base_ten(n):\n    '''\n    Write a function to convert a decimal number to its base-10 equivalent.\n    '''\n    output = 0\n    for i in range(len(str(n))):\n        output = output * 10 + int(str(n)[i])\n    return output\n    \ndef to_base_ten_rev(n, base):\n    '''\n    Write a function to convert a decimal number to its base-10 equivalent.\n    '''\n    output = 0\n    for i in range(len(str(n))):\n        output = output * base + int(str(n)[i])\n    return output\n    \ndef is_substring(str1, str2):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return str1 in str2\n    \ndef remove_char(str1, char):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    str1 = str1.replace(char, \"\")\n    return str1\n    \ndef replace_char(str1, char, new_char):\n    '''\n    Write a function to replace a character in a string with another character.\n    '''\n    str1 = str1.replace(char, new_char)\n    return str1\n    \ndef string_builder(str1, str2):\n    '''\n    Write a function to build a string by appending the characters of the second string to the end of the first.\n    '''\n    new_str = str1 + str2\n    return new_str\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        new_str = new_str + str1[i]\n    return new_str\n    \ndef is_palindrome_rev(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    rev_str = reverse_string(str1)\n    return str1 == rev_str\n    \ndef is_palindrome_rev_2(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    str1_rev = reverse_string(str1)\n    return str1 == str1_rev\n    \ndef is_palindrome_rev_3"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    return_dict = {}\n    for i in list1:\n        if i in return_dict.keys():\n            return_dict[i] += 1\n        else:\n            return_dict[i] = 1\n    return return_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #create an empty dictionary\n    d = dict()\n    #iterate through the list and add the frequencies to the dictionary\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    #print(d)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequencies = {}\n    for num in list1:\n        frequencies[num] = list1.count(num)\n    return frequencies\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq_dict = {}\n    for num in list1:\n        if num in freq_dict.keys():\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\nprint(\"output of freq_count:\", freq_count([1,1,1,2,2,2,3,3,3,4,5,5,5,6,6,6]))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    \n    n = N\n    while n >= 1:\n        n -= 1\n        if n == 0:\n            break\n        else:\n            if abs(n - n % 2) < abs(n - (n + 1) // 2):\n                return n\n    return n\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    def closest_num(n):\n        print(abs(n-n//10),n//10,abs(n-n//10),n//10)\n        \n        if n%10==0:\n            return n\n        elif n%10>0:\n            if abs(n-n//10)>abs(n-n//10+1):\n                return n-n//10\n            else:\n                return n-n//10+1\n        else:\n            if abs(n-n//10)>abs(n-n//10-1):\n                return n-n//10\n            else:\n                return n-n//10-1\n    \n    \n    '''\n    Write a function that takes in an array of integers and returns an array of \n    length 2 containing the smallest and largest elements in the input array. \n    The input array will never be empty, and you can assume the integers will \n    always be valid. For example:\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # similar to binary search\n    lo, hi = 1, N\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if mid > N:\n            hi = mid - 1\n        elif mid < N:\n            lo = mid + 1\n        else:\n            return mid\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    min = N\n    for i in range(N):\n        if abs(i - min) < abs(N - min):\n            min = i\n    return min\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = []\n    for i in range(N):\n        if N - i < N - res[0]:\n            res = [i]\n        elif N - i == N - res[0]:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    n = N - 1\n    while n >= 1:\n        if n % 2 == 0:\n            n = n // 2\n            if abs(n - N) < abs(n - n//2):\n                n = n // 2\n        else:\n            n = n // 2\n            if abs(n - N) < abs(n - n//2):\n                n = n // 2\n    return n\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # convert the input n to a list\n    n_list = list(str(N))\n    # find the smallest number that is larger than n\n    smaller_num = min(n_list)\n    # find the index of the smallest number\n    smaller_num_index = n_list.index(smaller_num)\n    # return the number smaller than n\n    return int(smaller_num)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N, N -1, N + 1 )\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    x = N\n    if x >= 1:\n        while x > 0:\n            if x % 10 < x//10:\n                return x%10\n            x = x//10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    def helper(x, N):\n        if x == 0:\n            return x\n        if x < 0:\n            return helper(abs(x), N)\n        if x < N:\n            return x\n        if x == N:\n            return x\n        else:\n            return helper(x - 1, N)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for words in list1:\n        if len(words)> max_len:\n            max_len = len(words)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for ele in list1:\n        if len(ele) > max_len:\n            max_len = len(ele)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = []\n    for i in list1:\n        l.append(len(i))\n    return max(l)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"len_log\")\n    list1.sort()\n    list1.sort(key = lambda x : x.lower())\n    s = ''\n    for i in range(len(list1)):\n        s += list1[i]\n    s = s.lower()\n    print(s)\n    print(len(s))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = len(max(list1, key=len))\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for i in list1:\n        if i.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for word in list1:\n        len_list.append(len(word))\n    return max(len_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_longest=0\n    for i in list1:\n        if len(i)>len_longest:\n            len_longest=len(i)\n    return len_longest\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in range(0,len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n    \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1:\n        return False\n    for i in range(len(str1)):\n        if str1[i] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for item in str1:\n        if item in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for x in str1:\n        if sub_str in x:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub_str)]==sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == sub_str[0]:\n            if all(sub_str[i] in str for str in str1):\n                count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # O(n + n/2)\n    str1 = str1.lower()\n    sub_str = sub_str.lower()\n    return any(sub_str in x for x in str1.split())\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_undulating(n // 2)\n        else:\n            return is_undulating(3 * n + 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count=0\n    for i in str(n):\n        count+=int(i)**3\n    return count==n\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 2\n    \n    if count % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    return n % 3 == 0 or n % 5 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    odd_sum = sum_of_odd_numbers(n)\n    even_sum = sum_of_even_numbers(n)\n    return odd_sum == even_sum\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x = 0\n    for i in range(n):\n        x = x^i\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if(n<2):\n        return False\n    if(n%2==0):\n        return False\n    if(n%3==0):\n        return False\n    if(n%5==0):\n        return False\n    if(n%7==0):\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if '11' in s or '22' in s or '33' in s or '44' in s or '55' in s or '66' in s or '77' in s or '88' in s or '99' in s:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    temp = n\n    while(temp!= 0):\n        temp = temp >> 1\n    if(temp == 1):\n        return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == 2:\n        return a*a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a < 0 and b >= 0:\n        return 1/a\n    else:\n        if a > 0:\n            return a**b\n        else:\n            return 1/a\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # Base case\n    if b == 0:\n        return 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    a = a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        print(\"ERROR: Square root cannot be calculated for negative numbers\")\n    elif (a >= 0):\n        return a**b\n    else:\n        return (1/a)**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = (0,9999)\n    for i in range(len(test_list)):\n        if(test_list[i][1] < min_tuple[1]):\n            min_tuple = test_list[i]\n    return min_tuple\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_value = test_list[0][1]\n    index = 0\n    for i in range(len(test_list)):\n        if smallest_value > test_list[i][1]:\n            smallest_value = test_list[i][1]\n            index = i\n    return test_list[index]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Assign the value of the tuple to a variable\n    index_min = None\n    # Iterate through each tuple\n    for i in range(len(test_list)):\n        # Create a tuple\n        # Assign the first tuple value to a variable\n        curr_tuple = test_list[i]\n        # Assign the second value in the tuple to a variable\n        curr_tuple = curr_tuple[1]\n        # Assign the variable to the tuple\n        curr_tuple = (curr_tuple)\n        # Use if to check if the current index is not assigned\n        # If so, assign the value of the tuple to the index\n        if index_min == None:\n            index_min = i\n            test_list[i] = (curr_tuple)\n        else:\n            if curr_tuple < test_list[i]:\n                index_min = i\n                test_list[i] = (curr_tuple)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_list)):\n        list_of_tuples.append((test_list[i][0], test_list[i][1]))\n    \n    list_of_tuples.sort(key=lambda x: x[1])\n    print(list_of_tuples)\n    return list_of_tuples[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_value = min(test_list)\n    return minimum_value\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #tuples = list(enumerate(test_list))\n    #return min(tuples, key=itemgetter(1))\n    #return test_list.index(sorted(test_list, key=lambda x: x[1])[0])\n    #return sorted(test_list, key=itemgetter(1))[0]\n    s = list(enumerate(test_list))\n    minimum = min(s, key=lambda x: x[1])\n    return minimum[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[i+1][1]:\n            return test_list[i]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = (min(test_list, key=itemgetter(1)))\n    return index_min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 1\n    for i in range(0, len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    m = lst[0]\n    for i in range(1, l):\n        if len(m) >= len(lst[i]):\n            m = lst[i]\n    return len(m)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    i = 0\n    mini = len(lst[0])\n    for sub in lst:\n        if len(sub) < mini:\n            mini = len(sub)\n            i = sub\n    return i\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = -1\n    for i in range(0,len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n    \nprint(Find_Min_Length([[1,2,3],[4,5,6],[8,9,10],[12,13,14],[15,16,17]]))\nprint(Find_Min_Length([[[1,2,3],[4,5,6],[8,9,10]]]))"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=lst[0]\n    for i in range(len(lst)):\n        if len(lst[i])<min_length:\n            min_length=len(lst[i])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = sorted(lst, key=len)\n    return len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    x=min([len(i) for i in lst])\n    return x"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min=[]\n    for i in lst:\n        lst_min.append(len(i))\n    return(min(lst_min))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=0\n    for i in range(0,len(lst)):\n        if len(lst[i])<min:\n            min=len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst)==0:\n        return 0\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i)<min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n):\n        if (n % i == 0):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n):\n        if n % i == 0:\n            count +=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            c += 1\n    return c\n    \n    \ndef find_max(num1, num2, num3):\n    '''\n    Write a python function to find the max of three integers.\n    '''\n    if num1 > num2 and num1 > num3:\n        return num1\n    elif num2 > num1 and num2 > num3:\n        return num2\n    else:\n        return num3\n    \n    \ndef find_max_key(my_dict):\n    '''\n    Write a python function to find the max value in a dictionary.\n    '''\n    max_key = 0\n    for i in my_dict:\n        if my_dict[i] > max_key:\n            max_key = i\n    return max_key\n    \n    \ndef find_max_sum(num1, num2, num3):\n    '''\n    Write a python function to find the sum of three given integers.\n    '''\n    return num1 + num2 + num3\n    \n    \ndef find_min(num1, num2, num3):\n    '''\n    Write a python function to find the min of three integers.\n    '''\n    if num1 < num2 and num1 < num3:\n        return num1\n    elif num2 < num1 and num2 < num3:\n        return num2\n    else:\n        return num3\n    \n    \ndef find_min_key(my_dict):\n    '''\n    Write a python function to find the minimum value in a dictionary.\n    '''\n    min_key = 0\n    for i in my_dict:\n        if my_dict[i] < min_key:\n            min_key = i\n    return min_key\n    \n    \ndef find_min_sum(num1, num2, num3):\n    '''\n    Write a python function to find the sum of three given integers.\n    '''\n    return num1 + num2 + num3\n    \n    \ndef find_sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \ndef find_sum_of_divisors_greater_than_a_number(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i > 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \ndef find_sum_of_divisors_squared(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef find_sum_of_divisors_squared_greater_than_a_number(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i ** 2 > n:\n            break\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef find_sum_of_divisors_greater_than_a_number_squared(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i ** 2 > n:\n            break\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef sum_of_divisors_of_a_number(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \ndef sum_of_divisors_of_a_number_greater_than_a_number(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i > 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \ndef sum_of_divisors_of_a_number_squared(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef sum_of_divisors_of_a_number_squared_greater_than_a_number(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i ** 2 > n:\n            break\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef sum_of_divisors_of_a_number_squared_greater_than_a_number_squared(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i ** 2 > n:\n            break\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef count_even_odd_numbers(num):\n    '''\n    Write a python function to count even and odd numbers in a given integer.\n    '''\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n    \n    \ndef count_even_odd_numbers_while_loop(num):\n    '''\n    Write a python function to count even and odd numbers in a given integer.\n    '''\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n    \n    \ndef count_even_odd_numbers_recursive(num):\n    '''\n    Write a python function to count even and odd numbers in a given integer.\n    '''\n    if num < 1:\n        return 0, 0\n    if num % 2 == 0:\n        return 1 + count_even_odd_numbers_recursive(num // 10)\n    else:\n        return 1 + count_even_odd_numbers_recursive(num // 10)\n    \n    \ndef count_even_odd_numbers_recursive_while_loop(num):\n    '''\n    Write a python function to count even and odd numbers in a given integer.\n    '''\n    if num < 1:\n        return 0, 0\n    if num % 2 == 0:\n        return 1 + count_even_odd_numbers_recursive_while_loop(num // 10)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    while i <= n/2:\n        if n%i == 0:\n            print(i)\n        i += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        if n%i == 0:\n            count +=1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if isinstance(item, int):\n            if item in d:\n                d[item] += 1\n            else:\n                d[item] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flatten = list(itertools.chain.from_iterable(list1))\n    dict1 = {}\n    for i in flatten:\n        dict1[i] = flatten.count(i)\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = dict()\n    for x in list1:\n        for y in x:\n            if y in my_dict.keys():\n                my_dict[y] = my_dict[y] + 1\n            else:\n                my_dict[y] = 1\n    return my_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {key: list1.count(key) for key in list1}\n    \n    \ndef run_frequency_lists(list1):\n    print(frequency_lists(list1))\n    \nrun_frequency_lists(['T','A','C','A','G','G','G','T','G','A','A','C','A'])\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        dictionary[element] = list1.count(element)\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n    else:\n        return {list1[0]:1} if list1[0] not in list1[1:] else {list1[0]:1} + frequency_lists(list1[1:])\n        #return {list1[0]:1} + frequency_lists(list1[1:])\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for l in list1:\n        for element in l:\n            if element in dictionary:\n                dictionary[element] += 1\n            else:\n                dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for i in list1:\n        for j in i:\n            flattened_list.append(j)\n    return Counter(flattened_list)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product = product * number\n    \n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(\"\\n***** Task 12: Use the following function to multiply all the numbers in a list and divide by the length of the list.\")\n    print(\"     \", numbers)\n    print(\"     \",multiply_num(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    prod = 1\n    for num in numbers:\n        prod *= num\n    return prod / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    try:\n        if len(numbers) < 1:\n            raise ValueError('The length of the list must be more than 0')\n        multiply = 1\n        for num in numbers:\n            multiply *= num\n        print(f'The result of multiplication is: {multiply}')\n        divide = len(numbers)\n        print(f'The result of division is: {divide}')\n    except ValueError as e:\n        print(e)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result = result * i\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return nn * nn\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_list = [int(x) for x in numbers.split()]\n    numbers_list = map(lambda x: x * len(numbers_list), numbers_list)\n    print(numbers_list)\n    numbers_list = list(numbers_list)\n    numbers_list = map(lambda x: x / len(numbers_list), numbers_list)\n    print(numbers_list)\n    return numbers_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum_list = 0\n    for x in numbers:\n        sum_list += x\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for number in numbers:\n        multiply *= number\n    return multiply / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, '#010b')\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    if n >= 1:\n        result = \"1\"+decimal_to_binary(n//2)\n    return result\nprint(decimal_to_binary(23)) \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    s=decimal_to_binary(n//2)\n    if n%2==0:\n        return s+\"0\"\n    else:\n        return s+\"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def decompose_binary(n):\n        if n == 0:\n            return\n        return decompose_binary(n // 2) + str(n % 2)\n    return \"\".join(decompose_binary(n))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    while(n):\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    \n    result = ''\n    while n:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n        result = str(n) + result\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<0:\n        return '-' + decimal_to_binary(-n)\n    if n==0:\n        return '0'\n    result=''\n    while n>0:\n        result = str(n%2) + result\n        n=n//2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    '''\n    Recall that a decimal number is a binary number if and only if its binary representation is a string of 1's and 0's.\n    For example, the decimal number 4 is equal to the binary number 1111 in this case.\n    You can see the same pattern in this problem as in the problem problem 9.\n    '''\n    '''\n    Intuition:\n    for i in range(0, n+1):\n        if(binary == '0'):\n            break\n        else:\n            binary = binary + '0'\n    return binary\n    '''\n    binary = str()\n    for i in range(n, 0, -1):\n        binary = binary + str(int(bin(i)[2:]))\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n:\n        binary = binary + str(n % 2)\n        n //= 2\n    return binary\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(54))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = ''\n    if num < 2:\n        return 2\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # turn into string\n    num = str(num)\n    # print(num)\n    # remove all non-palindromic chars\n    num = num.replace('0','').replace('1','').replace('8','').replace('9','').replace('6','').replace('5','').replace('4','').replace('7','').replace('2','').replace('3','')\n    # print(num)\n    # check if length is 1\n    if len(num) == 1:\n        return int(num)\n    # check if number is a palindrome\n    if num == num[::-1]:\n        return int(num)\n    # if not, add as many zeros as necessary to get it\n    num = num[::-1]\n    while len(num) > 1:\n        if num == num[::-1]:\n            return int(num)\n        # if not, add as many zeros as necessary to get it\n        num = num[::-1]\n    return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    '''\n    Approach:\n    1. If input number is smaller than or equal to 1, then it is the smallest palindrome\n    2. Get all factors of num\n    3. For each factor in the list of factors, we find if we can make this factor as the mid element in our list.\n    4. If we can, then we return the mid element.\n    5. If we cannot make this factor as mid element, we have to increase the number of factors.\n    6. Repeat until we have exceeded the limit of 8 factors.\n    7. If the number of factors is less than 8, return the number itself.\n    '''\n    # Check if input number is smaller than 1\n    if num <= 1:\n        return num\n    \n    # Get all factors of num\n    factors = []\n    num_factors = int(num)\n    while num_factors:\n        factors.append(num_factors % 10)\n        num_factors //= 10\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 1:\n        while True:\n            if str(num) == str(num)[::-1]:\n                return num\n            num += 1\n    return 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    return palindrome_part(num, False)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = int(num)\n    if(palindrome < 10):\n        return palindrome\n    elif (palindrome % 10!= 0):\n        new_palindrome = int(palindrome-1)\n        while new_palindrome % 10!= 0:\n            if(palindrome < new_palindrome):\n                return -1\n            new_palindrome -= 1\n        return palindrome - 1\n    else:\n        new_palindrome = palindrome - 1\n        while new_palindrome % 10!= 0:\n            if(palindrome < new_palindrome):\n                return -1\n            new_palindrome -= 1\n        return palindrome - 1\n    return palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    if num <= 0:\n        return None\n    while True:\n        # print(i)\n        if is_palindrome(num + 2 * i):\n            return num + 2 * i\n        i += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return num\n    else:\n        for i in range(len(num)-1, -1, -1):\n            if num[i]!= num[-1-i]:\n                #print(i, len(num)-1-i)\n                return num[:i] + str(int(num[i])+1) + num[i+1:]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = num\n    while True:\n        result = result + 1\n        if is_palindrome(result):\n            return result\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # The above approach does not work because it's not as simple as just going from back to front.\n    # Instead, we'll have to keep going until we find the first palindrome. Then we'll keep going from there,\n    # until we find another palindrome. This is because it's not easy to find a new palindrome in the middle.\n    # One solution would be to have a set of values for all of the numbers, starting from 1. Then we'll iterate\n    # through that set, stopping when we find a new palindrome, and then we'll go from there.\n    # But this is a bit of an edge case that's not handled by the set. So the best solution to this problem would\n    # be to try all of the numbers, starting from the largest number to the smallest. If we can't find a palindrome\n    # after trying all of them, then we'll return -1.\n    #\n    # We could also keep track of the smallest palindrome seen so far, and decrement it by 1 until we've seen at least\n    # one more number. If we did that, we'd end up with a new palindrome.\n    #\n    # So the following is a really effective way to solve this problem.\n    #\n    # We start with a set of numbers, represented by a dictionary, where the keys are positive integers and the\n    # values are a set of their index values. Then we go through the values of the dictionary and, if it's a palindrome,\n    # add it to our smallest palindrome value.\n    #\n    # When we encounter a non-palindrome number, we add it to the dictionary and go back to the beginning.\n    # So after we have examined all of the numbers in the set, we have the smallest palindrome.\n    #\n    # So now we want to find the palindrome in the smallest palindrome seen so far. To do that, we can just change the\n    # smallest palindrome seen so far to be the largest number seen so far. After that we have a new palindrome, which\n    # means we should add it to the smallest palindrome seen so far.\n    #\n    # If there are no more numbers in the set, then we'll have to return -1.\n    #\n    # Complexity analysis:\n    #\n    # Let the size of our set be N. Then our set would be {1,2,...,N}. We can get N by iterating through the set, starting from 1.\n    # We can go through every number in the set and check if it is a palindrome. The complexity is O(N*N), so O(N^2)\n    # Overall, the space complexity is O(N)\n    #\n    # This algorithm takes O(N) time and O(N) space, where N is the size of the set.\n    #\n    # Overall, this is an O(N^2) algorithm, which is pretty bad.\n    #\n    # We can simplify the space complexity by just keeping track of the largest palindrome seen so far,\n    # so we can just have O(N) space complexity. We can also simplify the time complexity by just keeping track\n    # of the index of the largest palindrome seen so far, so we can just have O(N) time complexity.\n    #\n    # Again, the space complexity is just O(1).\n    #\n    # Overall, this is an O(N) algorithm, which is bad.\n    #\n    # To be more precise, this is a DP problem.\n    #\n    # Let's keep these general terms in mind. To find the smallest palindrome, we can have the following recurrence:\n    #\n    # For any given index i, we can either have the largest palindrome seen so far, or we can't have the largest palindrome\n    # seen so far, so we can take the smallest palindrome seen so far, or we can not have the smallest palindrome seen so far.\n    # In the latter two cases, we can't have the smallest palindrome seen so far, so we have to try all of the numbers\n    # from i to the end. If the number we're checking is not a palindrome, then we cannot have the smallest palindrome\n    # seen so far.\n    #\n    # After looking at all the numbers from i to the end, if we can't have the smallest palindrome seen so far, then we\n    # know that we can't have a palindrome of any form at all, so we return -1. Otherwise, we can return the smallest palindrome\n    # seen so far.\n    #\n    # This is similar to the O(N) approach we did in the last problem.\n    #\n    # We can improve the space complexity further by using a dictionary, so we can keep track of the smallest palindrome\n    # seen so far and the index of the largest palindrome seen so far. This will keep us from having to look at every\n    # number in the set.\n    #\n    # And now we can go back to the O(N^2) algorithm and simplify it.\n    #\n    # Let's also simplify our indexing in the dictionary. We can have a dictionary that uses the integer as a key,\n    # and the set that represents the values that the dictionary uses as a value. This will make the dictionary\n    # a bit simpler and easier to look up the value for a given key.\n    #\n    # For any given key, we can look up the smallest palindrome seen so far by looking at the largest value in the dictionary.\n    # We can look up the largest value in the dictionary by looking at the key (we can't look at the set because we need to\n    # know which is the largest) and then just using a bitwise XOR (i.e. bitwise AND with 0).\n    #\n    # For any given key, we can look up the smallest palindrome seen so far by looking at the smallest value in the dictionary.\n    # We can look up the smallest value in the dictionary by looking at the key (we can't look at the set because we need to\n    # know which is the largest) and then just using a bitwise XOR with 1.\n    #\n    # Overall, we need to have a minimum of 5 lines, so it's worth the extra complexity.\n    #\n    # We can keep this up to date by using the following:\n    #\n    # key: smallestPalindrome\n    # value: smallestPalindromeIndex\n    #\n    # Our algorithm will look up this in a dictionary in O(1) time and space.\n    #\n    # After checking the smallest palindrome seen so far, we can now look up the largest palindrome seen so far.\n    # So we can just do a bitwise XOR with the largestPalindrome seen so far.\n    #\n    # So we can just move the smallestPalindrome seen so far to the largestPalindrome seen so far, which is what we want.\n    #\n    # We can remove that line, so now our algorithm runs in O(N) time and space.\n    #\n    # Overall, this is O(N) time, and O(1) space.\n    #\n    # We can also simplify the time complexity further by handling the dictionary when we see a new number.\n    #\n    # Let's look at the previous algorithm. We could have made this dictionary more simple by having\n    # largestPalindrome = set() and largestPalindromeIndex = 0. This would make the space complexity of the largest\n    # palindrome dictionary constant.\n    #\n    # When we've iterated through the set, we could have added the first element in the set to largestPalindrome.\n    # We could then add the next element, and try again. We could also go back to the previous line and look at the next\n    # element, and try again.\n    #\n    # This is a good solution, but it still takes O(N^2) time and O(N) space.\n    #\n    # So we can simplify the space complexity by taking the size of the largestPalindrome dictionary, which is just\n    # a constant constant.\n    #\n    # And now we can go back to the O(N) time and space algorithm.\n    #\n    # Overall, this is O(N) time, and O(1) space.\n    #\n    # So now we can simplify the time complexity further by getting rid of the dictionary. We can get rid of the call\n    # to largestPalindrome = set() and largestPalindromeIndex = 0. We can instead use the same logic we used earlier,\n    # except instead of the set, we would use a dictionary with integers as keys and sets as values.\n    #\n    # This is much simpler and muc"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n    "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        middle = (left + right) // 2\n        \n        if k == middle + 1:\n            return arr[middle]\n        elif k == middle:\n            return arr[middle]\n        elif k < middle + 1:\n            right = middle - 1\n        elif k > middle + 1:\n            left = middle + 1\n    \n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    if k <= 0 or k > len(arr):\n        return None\n    #put all the 1-indexed elements in a dictionary \n    index_map = {}\n    for i in range(len(arr)):\n        index_map[i + 1] = arr[i]\n    \n    #now keep traversing the array and finding the kth element\n    kth_element = None\n    i = 1\n    while i < len(arr) and kth_element == None:\n        if i in index_map:\n            kth_element = index_map[i]\n        i += 1\n    return kth_element\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == k - 1:\n            return arr[mid]\n        if arr[mid] < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    first_index = 0\n    last_index = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    if k <= 0:\n        return None\n    \n    if k == 1:\n        return arr[0]\n    \n    mid = len(arr) // 2\n    if arr[mid] == k:\n        return arr[mid]\n    \n    if k > mid:\n        return kth_element(arr[mid+1:], k - mid - 1)\n    \n    if k < mid:\n        return kth_element(arr[:mid], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if the array is empty then return -1\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Base case:\n    if k == 1:\n        return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    l, r = 0, n-1\n    while l <= r:\n        mid = l + (r-l) // 2\n        if k == mid+1:\n            return arr[mid]\n        elif k < mid+1:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    words.pop(0)\n    camel_word = \"\"\n    for word in words:\n        camel_word += word.title()\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(map(lambda x: x.capitalize(), words[1:]))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    output = ''\n    is_first = True\n    for word in word.split('_'):\n        if is_first:\n            is_first = False\n        else:\n            output += word.title()\n    return output\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:].replace('_','').title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Your code here\n    camel = \"\"\n    for letter in word:\n        camel += letter.title()\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace(\"_\", \"\")\n    word = word[0].upper() + word[1:]\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '-')\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif m == 1:\n        return 1\n    else:\n        return n * eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return eulerian_num(m, n)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # n = 3\n    # m = 6\n    \n    c = 2\n    for i in range(0, n):\n        if(c == m):\n            c = 1\n        else:\n            c += 1\n    return c\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    for i in range(1, m+1):\n        if n % i == 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (n - 1) / 2 + m * (m - 1) / 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n==0 and m==1:\n        return 1\n    elif n==1 and m==1:\n        return 2\n    elif m==1:\n        return eulerian_num(n-1, m)\n    elif m==2:\n        return eulerian_num(n-1, m) + eulerian_num(n-2, m)\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-2, m)\n        \nprint(eulerian_num(5, 2))"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    eulerian = 0\n    \n    # 1. This is the max number of edges in a graph\n    if n < m:\n        print('n < m')\n        return eulerian\n    \n    # 2. This is the total number of nodes in a graph\n    if n == m:\n        print('n == m')\n        return eulerian\n    \n    # 3. This is the number of self loops in a graph\n    if n == m + 1:\n        print('n == m + 1')\n        return eulerian\n    \n    # 4. This is the number of edges between two nodes\n    if n == m + 2:\n        print('n == m + 2')\n        return eulerian\n    \n    # 5. This is the number of edges between two nodes\n    if n == m + 3:\n        print('n == m + 3')\n        return eulerian\n    \n    # 6. This is the number of edges between two nodes\n    if n == m + 4:\n        print('n == m + 4')\n        return eulerian\n    \n    # 7. This is the number of edges between two nodes\n    if n == m + 5:\n        print('n == m + 5')\n        return eulerian\n    \n    # 8. This is the number of edges between two nodes\n    if n == m + 6:\n        print('n == m + 6')\n        return eulerian\n    \n    # 9. This is the number of edges between two nodes\n    if n == m + 7:\n        print('n == m + 7')\n        return eulerian\n    \n    # 10. This is the number of edges between two nodes\n    if n == m + 8:\n        print('n == m + 8')\n        return eulerian\n    \n    # 11. This is the number of edges between two nodes\n    if n == m + 9:\n        print('n == m + 9')\n        return eulerian\n    \n    # 12. This is the number of edges between two nodes\n    if n == m + 10:\n        print('n == m + 10')\n        return eulerian\n    \n    # 13. This is the number of edges between two nodes\n    if n == m + 11:\n        print('n == m + 11')\n        return eulerian\n    \n    # 14. This is the number of edges between two nodes\n    if n == m + 12:\n        print('n == m + 12')\n        return eulerian\n    \n    # 15. This is the number of edges between two nodes\n    if n == m + 13:\n        print('n == m + 13')\n        return eulerian\n    \n    # 16. This is the number of edges between two nodes\n    if n == m + 14:\n        print('n == m + 14')\n        return eulerian\n    \n    # 17. This is the number of edges between two nodes\n    if n == m + 15:\n        print('n == m + 15')\n        return eulerian\n    \n    # 18. This is the number of edges between two nodes\n    if n == m + 16:\n        print('n == m + 16')\n        return eulerian\n    \n    # 19. This is the number of edges between two nodes\n    if n == m + 17:\n        print('n == m + 17')\n        return eulerian\n    \n    # 20. This is the number of edges between two nodes\n    if n == m + 18:\n        print('n == m + 18')\n        return eulerian\n    \n    # 21. This is the number of edges between two nodes\n    if n == m + 19:\n        print('n == m + 19')\n        return eulerian\n    \n    # 22. This is the number of edges between two nodes\n    if n == m + 20:\n        print('n == m + 20')\n        return eulerian\n    \n    # 23. This is the number of edges between two nodes\n    if n == m + 21:\n        print('n == m + 21')\n        return eulerian\n    \n    # 24. This is the number of edges between two nodes\n    if n == m + 22:\n        print('n == m + 22')\n        return eulerian\n    \n    # 25. This is the number of edges between two nodes\n    if n == m + 23:\n        print('n == m + 23')\n        return eulerian\n    \n    # 26. This is the number of edges between two nodes\n    if n == m + 24:\n        print('n == m + 24')\n        return eulerian\n    \n    # 27. This is the number of edges between two nodes\n    if n == m + 25:\n        print('n == m + 25')\n        return eulerian\n    \n    # 28. This is the number of edges between two nodes\n    if n == m + 26:\n        print('n == m + 26')\n        return eulerian\n    \n    # 29. This is the number of edges between two nodes\n    if n == m + 27:\n        print('n == m + 27')\n        return eulerian\n    \n    # 30. This is the number of edges between two nodes\n    if n == m + 28:\n        print('n == m + 28')\n        return eulerian\n    \n    # 31. This is the number of edges between two nodes\n    if n == m + 29:\n        print('n == m + 29')\n        return eulerian\n    \n    # 32. This is the number of edges between two nodes\n    if n == m + 30:\n        print('n == m + 30')\n        return eulerian\n    \n    # 33. This is the number of edges between two nodes\n    if n == m + 31:\n        print('n == m + 31')\n        return eulerian\n    \n    # 34. This is the number of edges between two nodes\n    if n == m + 32:\n        print('n == m + 32')\n        return eulerian\n    \n    # 35. This is the number of edges between two nodes\n    if n == m + 33:\n        print('n == m + 33')\n        return eulerian\n    \n    # 36. This is the number of edges between two nodes\n    if n == m + 34:\n        print('n == m + 34')\n        return eulerian\n    \n    # 37. This is the number of edges between two nodes\n    if n == m + 35:\n        print('n == m + 35')\n        return eulerian\n    \n    # 38. This is the number of edges between two nodes\n    if n == m + 36:\n        print('n == m + 36')\n        return eulerian\n    \n    # 39. This is the number of edges between two nodes\n    if n == m + 37:\n        print('n == m + 37')\n        return eulerian\n    \n    # 40. This is the number of edges between two nodes\n    if n == m + 38:\n        print('n == m + 38')\n        return eulerian\n    \n    # 41. This is the number of edges between two nodes\n    if n == m + 39:\n        print('n == m + 39')\n        return eulerian\n    \n    # 42. This is the number of edges between two nodes\n    if n == m + 40:\n        print('n == m + 40')\n        return eulerian\n    \n    # 43. This is the number of edges between two nodes\n    if n == m + 41:\n        print('n == m + 41')\n        return eulerian\n    \n    # 44. This is the number of edges between two nodes\n    if n == m + 42:\n        print('n == m + 42')\n        return eulerian\n    \n    # 45. This is the number of edges between two nodes\n    if n == m + 43:\n        print('n == m + 43')\n        return eulerian\n    \n    # 46. This is the number of edges between two nodes\n    if n == m + 44:\n        print('n == m + 44')\n        return eulerian\n    \n    # 47. This is the number of edges between two nodes\n    if n == m + 45:\n        print('n == m + 45')\n        return eulerian\n    \n    # 48. This is the number of edges between two nodes\n    if n == m + 46:\n        print('n == m + 46')\n        return eulerian\n    \n    # 49. This is the number of edges between two nodes\n    if n == m + 47:\n        print('n == m + 47')\n        return eule"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    for i in range(n, m + 1):\n        for j in range(i + 1, m + 1):\n            res += 1\n    return res\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sublist = sorted(sublist)\n        sorted_list.append(sublist)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    assert isinstance(input_list, list)\n    assert all([isinstance(x, list) for x in input_list])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(input_list)-1):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] > input_list[j]:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: ''.join(sorted(x)))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list = [list(t) for t in input_list]\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # 1st solution: use a lambda function\n    # return sorted(input_list, key = lambda x: x[0])\n    # 2nd solution: loop through all items in the list and sort them\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)-1):\n        for j in range(i+1, len(input_list)):\n            if input_list[i]>input_list[j]:\n                input_list[i],input_list[j]=input_list[j],input_list[i]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = []\n    for sublist in input_list:\n        sort_list.append(sorted(sublist))\n    return sort_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for ele in lst:\n        if ele:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\nprint(count([True, False, True, True]))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([True for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c=0\n    for i in lst:\n        if i:\n            c+=1\n    print(c)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res = 0\n    for item in lst:\n        if item:\n            res += 1\n    return res\n    \n    \ndef count_func(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count +=1\n    return count\n    \n    \ndef m_count(lst):\n    '''\n    Write a python function to count all unique element in the given list.\n    '''\n    my_list = []\n    my_set = set(lst)\n    for i in my_set:\n        my_list.append(i)\n    return len(my_list)\n    \ndef m_count2(lst):\n    '''\n    Write a python function to count all unique element in the given list.\n    '''\n    my_dict = {}\n    for i in lst:\n        if i not in my_dict:\n            my_dict[i] = 1\n        else:\n            my_dict[i] += 1\n    return len(my_dict.keys())\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    t_count = 0\n    f_count = 0\n    for element in lst:\n        if element == True:\n            t_count += 1\n        elif element == False:\n            f_count += 1\n    return (t_count, f_count)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    if len(test_list) > 0:\n        for i in range(len(test_tup)):\n            if type(test_tup[i]) == type([]):\n                for j in range(len(test_list)):\n                    result.append(test_list[j] + test_tup[i])\n            else:\n                result.append(test_list + test_tup[i])\n    else:\n        for i in range(len(test_tup)):\n            if type(test_tup[i]) == type([]):\n                result = result + test_tup[i]\n            else:\n                result.append(test_tup[i])\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        if i not in test_tup:\n            test_tup.append(i)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    pq=[]\n    num1=list(num1)\n    num2=list(num2)\n    num3=list(num3)\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    while len(num1)>0 or len(num2)>0 or len(num3)>0:\n        if len(num1)==0:\n            pq.extend(num2)\n            num2=[]\n        if len(num2)==0:\n            pq.extend(num3)\n            num3=[]\n        if len(num3)==0:\n            pq.extend(num1)\n            num1=[]\n        if num1[0]<=num2[0]:\n            pq.append(num1[0])\n            num1=num1[1:]\n        elif num1[0]>=num2[0]:\n            pq.append(num2[0])\n            num2=num2[1:]\n    return pq\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1 + num2 + num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 and num2 and num3:\n        heapq.heappush(num1, num3)\n        heapq.heappush(num2, num1)\n        heapq.heappush(num2, num3)\n        return num2\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # for num1, num2, num3 in zip(a, b, c):\n    #     h1.append(num1)\n    #     h2.append(num2)\n    #     h3.append(num3)\n    # h = heapq.merge(h1, h2, h3)\n    # return h\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==[] or num2==[] or num3==[]:\n        return []\n    if num1[0]<num2[0]:\n        return num1+num2+num3\n    else:\n        return num1+num3+num2\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    print(num1,num2,num3)\n    num1=list(num1)\n    num2=list(num2)\n    num3=list(num3)\n    # list.sort(num1,reverse=False)\n    # list.sort(num2,reverse=False)\n    # list.sort(num3,reverse=False)\n    # num1.extend(num2)\n    # num1.extend(num3)\n    num1.extend(num2)\n    num1.sort(reverse=False)\n    return num1\n    # return num1\n    # num1.sort(reverse=False)\n    # return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    final_list = []\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            final_list.append(num1.pop(0))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            final_list.append(num2.pop(0))\n        else:\n            final_list.append(num3.pop(0))\n    return final_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    if len(num1) == 0:\n        merged_list += num2\n        merged_list += num3\n    elif len(num2) == 0:\n        merged_list += num1\n        merged_list += num3\n    elif len(num3) == 0:\n        merged_list += num1\n        merged_list += num2\n    else:\n        i=0\n        j=0\n        k=0\n        while i<len(num1) and j<len(num2) and k<len(num3):\n            if num1[i] < num2[j] and num1[i] < num3[k]:\n                merged_list.append(num1[i])\n                i+=1\n            elif num2[j] < num1[i] and num2[j] < num3[k]:\n                merged_list.append(num2[j])\n                j+=1\n            else:\n                merged_list.append(num3[k])\n                k+=1\n        if i < len(num1):\n            merged_list += num1[i:]\n        elif j < len(num2):\n            merged_list += num2[j:]\n        else:\n            merged_list += num3[k:]\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    merge_list = []\n    for i in num1:\n        merge_list.append(i)\n    for i in num2:\n        merge_list.append(i)\n    for i in num3:\n        merge_list.append(i)\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted([num1,num2,num3])\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #if length is 1\n    if len(s) == 1:\n        return 0\n    #if length is 2\n    if len(s) == 2:\n        if s[0] == '1' and s[1] == '0':\n            return 1\n        else:\n            return 0\n    #if length is 3\n    if len(s) == 3:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 4\n    if len(s) == 4:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 5\n    if len(s) == 5:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 6\n    if len(s) == 6:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0') and (s[5] == '1' or s[5] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 7\n    if len(s) == 7:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0') and (s[5] == '1' or s[5] == '0') and (s[6] == '1' or s[6] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 8\n    if len(s) == 8:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0') and (s[5] == '1' or s[5] == '0') and (s[6] == '1' or s[6] == '0') and (s[7] == '1' or s[7] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 9\n    if len(s) == 9:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0') and (s[5] == '1' or s[5] == '0') and (s[6] == '1' or s[6] == '0') and (s[7] == '1' or s[7] == '0') and (s[8] == '1' or s[8] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 10\n    if len(s) == 10:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0') and (s[5] == '1' or s[5] == '0') and (s[6] == '1' or s[6] == '0') and (s[7] == '1' or s[7] == '0') and (s[8] == '1' or s[8] == '0') and (s[9] == '1' or s[9] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 11\n    if len(s) == 11:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0') and (s[5] == '1' or s[5] == '0') and (s[6] == '1' or s[6] == '0') and (s[7] == '1' or s[7] == '0') and (s[8] == '1' or s[8] == '0') and (s[9] == '1' or s[9] == '0') and (s[10] == '1' or s[10] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 12\n    if len(s) == 12:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0') and (s[5] == '1' or s[5] == '0') and (s[6] == '1' or s[6] == '0') and (s[7] == '1' or s[7] == '0') and (s[8] == '1' or s[8] == '0') and (s[9] == '1' or s[9] == '0') and (s[10] == '1' or s[10] == '0') and (s[11] == '1' or s[11] == '0'):\n            return 1\n        else:\n            return 0\n    #if length is 13\n    if len(s) == 13:\n        if (s[0] == '1' or s[0] == '0') and (s[1] == '1' or s[1] == '0') and (s[2] == '1' or s[2] == '0') and (s[3] == '1' or s[3] == '0') and (s[4] == '1' or s[4] == '0') and (s[5] == '1' or s[5] == '0') and (s[6] == '1' or s[6] == '0') and (s[7] == '1' or s[7] == '0') and (s[8] == '1' or s[8] ="
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len([x for x in range(n) if s[x] == '0'])\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s + '0'\n    count = 0\n    #convert string s to list of integers\n    #i = 0\n    #while i < len(s):\n    i = -1\n    while (i >= -(len(s))):\n        #i = i + 1\n        i = i + 1\n        if (s[i] == '0'):\n            s = s[1:]\n            count += 1\n            #print(count)\n        else:\n            s = s[:-1]\n            count += 1\n            #print(count)\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(0,n):\n        binary_list = []\n        for j in range(0,len(s)):\n            binary_list.append(s[j])\n        s = s[-1] + s[:-1]\n        for i in range(0,len(binary_list)):\n            if(binary_list[i] == '0'):\n                result = result + 1\n    return result\ns = \"1001\"\nprint(odd_Equivalent(s,1))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n==0):\n        return 1\n    if(n==1):\n        return 2\n    if(n==2):\n        return 4\n    if(n==3):\n        return 6\n    if(n==4):\n        return 8\n    if(n==5):\n        return 10\n    if(n==6):\n        return 12\n    if(n==7):\n        return 14\n    if(n==8):\n        return 16\n    if(n==9):\n        return 18\n    if(n==10):\n        return 20\n    if(n==11):\n        return 22\n    if(n==12):\n        return 24\n    if(n==13):\n        return 26\n    if(n==14):\n        return 28\n    if(n==15):\n        return 30\n    if(n==16):\n        return 32\n    if(n==17):\n        return 34\n    if(n==18):\n        return 36\n    if(n==19):\n        return 38\n    if(n==20):\n        return 40\n    if(n==21):\n        return 42\n    if(n==22):\n        return 44\n    if(n==23):\n        return 46\n    if(n==24):\n        return 48\n    if(n==25):\n        return 50\n    if(n==26):\n        return 52\n    if(n==27):\n        return 54\n    if(n==28):\n        return 56\n    if(n==29):\n        return 58\n    if(n==30):\n        return 60\n    if(n==31):\n        return 62\n    if(n==32):\n        return 64\n    if(n==33):\n        return 66\n    if(n==34):\n        return 68\n    if(n==35):\n        return 70\n    if(n==36):\n        return 72\n    if(n==37):\n        return 74\n    if(n==38):\n        return 76\n    if(n==39):\n        return 78\n    if(n==40):\n        return 80\n    if(n==41):\n        return 82\n    if(n==42):\n        return 84\n    if(n==43):\n        return 86\n    if(n==44):\n        return 88\n    if(n==45):\n        return 90\n    if(n==46):\n        return 92\n    if(n==47):\n        return 94\n    if(n==48):\n        return 96\n    if(n==49):\n        return 98\n    if(n==50):\n        return 100\n    if(n==51):\n        return 102\n    if(n==52):\n        return 104\n    if(n==53):\n        return 106\n    if(n==54):\n        return 108\n    if(n==55):\n        return 110\n    if(n==56):\n        return 112\n    if(n==57):\n        return 114\n    if(n==58):\n        return 116\n    if(n==59):\n        return 118\n    if(n==60):\n        return 120\n    if(n==61):\n        return 122\n    if(n==62):\n        return 124\n    if(n==63):\n        return 126\n    if(n==64):\n        return 128\n    if(n==65):\n        return 130\n    if(n==66):\n        return 132\n    if(n==67):\n        return 134\n    if(n==68):\n        return 136\n    if(n==69):\n        return 138\n    if(n==70):\n        return 140\n    if(n==71):\n        return 142\n    if(n==72):\n        return 144\n    if(n==73):\n        return 146\n    if(n==74):\n        return 148\n    if(n==75):\n        return 150\n    if(n==76):\n        return 152\n    if(n==77):\n        return 154\n    if(n==78):\n        return 156\n    if(n==79):\n        return 158\n    if(n==80):\n        return 160\n    if(n==81):\n        return 162\n    if(n==82):\n        return 164\n    if(n==83):\n        return 166\n    if(n==84):\n        return 168\n    if(n==85):\n        return 170\n    if(n==86):\n        return 172\n    if(n==87):\n        return 174\n    if(n==88):\n        return 176\n    if(n==89):\n        return 178\n    if(n==90):\n        return 180\n    if(n==91):\n        return 182\n    if(n==92):\n        return 184\n    if(n==93):\n        return 186\n    if(n==94):\n        return 188\n    if(n==95):\n        return 190\n    if(n==96):\n        return 192\n    if(n==97):\n        return 194\n    if(n==98):\n        return 196\n    if(n==99):\n        return 198\n    if(n==100):\n        return 200\n    if(n==101):\n        return 202\n    if(n==102):\n        return 204\n    if(n==103):\n        return 206\n    if(n==104):\n        return 208\n    if(n==105):\n        return 210\n    if(n==106):\n        return 212\n    if(n==107):\n        return 214\n    if(n==108):\n        return 216\n    if(n==109):\n        return 218\n    if(n==110):\n        return 220\n    if(n==111):\n        return 222\n    if(n==112):\n        return 224\n    if(n==113):\n        return 226\n    if(n==114):\n        return 228\n    if(n==115):\n        return 230\n    if(n==116):\n        return 232\n    if(n==117):\n        return 234\n    if(n==118):\n        return 236\n    if(n==119):\n        return 238\n    if(n==120):\n        return 240\n    if(n==121):\n        return 242\n    if(n==122):\n        return 244\n    if(n==123):\n        return 246\n    if(n==124):\n        return 248\n    if(n==125):\n        return 250\n    if(n==126):\n        return 252\n    if(n==127):\n        return 254\n    if(n==128):\n        return 256\n    if(n==129):\n        return 258\n    if(n==130):\n        return 260\n    if(n==131):\n        return 262\n    if(n==132):\n        return 264\n    if(n==133):\n        return 266\n    if(n==134):\n        return 268\n    if(n==135):\n        return 270\n    if(n==136):\n        return 272\n    if(n==137):\n        return 274\n    if(n==138):\n        return 276\n    if(n==139):\n        return 278\n    if(n==140):\n        return 280\n    if(n==141):\n        return 282\n    if(n==142):\n        return 284\n    if(n==143):\n        return 286\n    if(n==144):\n        return 288\n    if(n==145):\n        return 290\n    if(n==146):\n        return 292\n    if(n==147):\n        return 294\n    if(n==148):\n        return 296\n    if(n==149):\n        return 298\n    if(n==150):\n        return 300\n    if(n==151):\n        return 302\n    if(n==152):\n        return 304\n    if(n==153):\n        return 306\n    if(n==154):\n        return 308\n    if(n==155):\n        return 310\n    if(n==156):\n        return 312\n    if(n==157):\n        return 314\n    if(n==158):\n        return 316\n    if(n==159):\n        return 318\n    if(n==160):\n        return 320\n    if(n==161):\n        return 322\n    if(n==162):\n        return 324\n    if(n==163):\n        return 326\n    if(n==164):\n        return 328\n    if(n==165):\n        return 330\n    if(n==166):\n    "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    for i in range(0,n): \n        s = s + s[0] \n    return s\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Input:\n    # s    - string \n    # n - Number of rotations to be done on the string\n    # Output:\n    # N - Number of odd numbers in the string \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s[::-1]\n    x=0\n    for i in range(0,n):\n        if int(s)%2!=0:\n            x+=1\n        s=bin(int(s,2))[2:]\n        s=s[::-1]\n    return x\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Creating a dictionary\n    odd = {}\n    # Converting the string to a list\n    l = list(s)\n    # Making a loop to iterate through the list\n    for i in l:\n        # If the element is not in the dictionary\n        if i not in odd.keys():\n            # Adding the element to the dictionary\n            odd[i] = 1\n        else:\n            # Incrementing the value of the dictionary for the key\n            odd[i] += 1\n    # Printing the count of odd values\n    print('The number of odd values are',odd)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #The number of bits used in each of the strings are of the form 3n+1\n    n = n+1\n    #Initializing the strings\n    str1 = '0'\n    str2 = '0'\n    #Adding one to the number of bits\n    for i in range(1,n):\n        str1 += '0'\n        str2 += '0'\n    #Shifting the strings to the left \n    for i in range(n-1):\n        str1 = str1[1:] + str1[0]\n        str2 = str2[1:] + str2[0]\n    #Saving the initial values\n    prev_str1 = str1\n    prev_str2 = str2\n    #Saving the final values\n    curr_str1 = str1\n    curr_str2 = str2\n    #Incrementing the number of rotations\n    for i in range(n-1):\n        curr_str1 = curr_str1[1:] + curr_str1[0]\n        curr_str2 = curr_str2[1:] + curr_str2[0]\n    #Saving the final values\n    final_str1 = curr_str1\n    final_str2 = curr_str2\n    #Displaying the final values\n    print(\"The final values are :\")\n    print(final_str1)\n    print(final_str2)\n    #Calculating the number of odd numbers\n    num_odd = 0\n    for i in range(len(final_str1)):\n        if final_str1[i]!= '0':\n            num_odd += 1\n    print(\"The number of odd values in the final binary string :\",num_odd)\n    print()\n    #Displaying the number of odd values in the initial binary strings\n    num_odd = 0\n    for i in range(len(prev_str1)):\n        if prev_str1[i]!= '0':\n            num_odd += 1\n    print(\"The number of odd values in the initial binary string :\",num_odd)\n    print()\n    #Displaying the number of odd values in the final binary strings\n    num_odd = 0\n    for i in range(len(final_str2)):\n        if final_str2[i]!= '0':\n            num_odd += 1\n    print(\"The number of odd values in the final binary string :\",num_odd)\n    print()\n    #Calculating the final number of odd values\n    final_num_odd = 0\n    for i in range(len(final_str1)):\n        if final_str1[i]!= '0':\n            final_num_odd += 1\n    print(\"The final number of odd values :\",final_num_odd)\n    print()\n    #Displaying the final number of odd values\n    final_num_odd = 0\n    for i in range(len(final_str2)):\n        if final_str2[i]!= '0':\n            final_num_odd += 1\n    print(\"The final number of odd values :\",final_num_odd)\n    print()\n    #Calculating the final number of odd values\n    final_num_odd = 0\n    for i in range(len(prev_str1)):\n        if prev_str1[i]!= '0':\n            final_num_odd += 1\n    print(\"The final number of odd values :\",final_num_odd)\n    print()\n    #Displaying the number of odd values\n    final_num_odd = 0\n    for i in range(len(prev_str2)):\n        if prev_str2[i]!= '0':\n            final_num_odd += 1\n    print(\"The number of odd values :\",final_num_odd)\n    print()\n    #Displaying the number of odd values\n    num_odd = 0\n    for i in range(len(curr_str1)):\n        if curr_str1[i]!= '0':\n            num_odd += 1\n    print(\"The number of odd values :\",num_odd)\n    print()\n    #Displaying the number of odd values\n    num_odd = 0\n    for i in range(len(curr_str2)):\n        if curr_str2[i]!= '0':\n            num_odd += 1\n    print(\"The number of odd values :\",num_odd)\n    print()\n    print(\"Total number of rotations :\",n)\n    print()\n    print(\"The number of odd values at each step of rotation :\")\n    for i in range(n):\n        num_odd = 0\n        for j in range(len(curr_str1)):\n            if curr_str1[j]!= '0':\n                num_odd += 1\n        print(\"At step :\",i+1,\"the number of odd values :\",num_odd)\n        \n    print()\n    \nodd_Equivalent(1,1)\nodd_Equivalent(2,2)\nodd_Equivalent(4,3)\nodd_Equivalent(8,4)\nodd_Equivalent(15,5)\nodd_Equivalent(31,6)\nodd_Equivalent(63,7)\nodd_Equivalent(127,8)\nodd_Equivalent(255,9)\nodd_Equivalent(511,10)\nodd_Equivalent(1023,11)\nodd_Equivalent(2047,12)\nodd_Equivalent(4095,13)\nodd_Equivalent(8191,14)\nodd_Equivalent(16383,15)\nodd_Equivalent(32767,16)\nodd_Equivalent(65535,17)\nodd_Equivalent(131071,18)\nodd_Equivalent(262143,19)\nodd_Equivalent(524287,20)\nodd_Equivalent(1048573,21)\nodd_Equivalent(2097151,22)\nodd_Equivalent(4194303,23)\nodd_Equivalent(8388607,24)\nodd_Equivalent(16777215,25)\nodd_Equivalent(33554432,26)\nodd_Equivalent(67108864,27)\nodd_Equivalent(134217728,28)\nodd_Equivalent(268435456,29)\nodd_Equivalent(536870912,30)\nodd_Equivalent(1073741824,31)\nodd_Equivalent(2147483648,32)\nodd_Equivalent(4294967296,33)\nodd_Equivalent(8589934592,34)\nodd_Equivalent(17179869184,35)\nodd_Equivalent(34359738368,36)\nodd_Equivalent(6380195264,37)\nodd_Equivalent(121645504096,38)\nodd_Equivalent(274877906944,39)\nodd_Equivalent(549755813888,40)\nodd_Equivalent(1099511627776,41)\nodd_Equivalent(209227890625,42)\nodd_Equivalent(4194304,43)\nodd_Equivalent(8388608,44)\nodd_Equivalent(16777216,45)\nodd_Equivalent(33554432,46)\nodd_Equivalent(67108864,47)\nodd_Equivalent(134217728,48)\nodd_Equivalent(268435456,49)\nodd_Equivalent(536870912,50)\nodd_Equivalent(1073741824,51)\nodd_Equivalent(2147483648,52)\nodd_Equivalent(4294967296,53)\nodd_Equivalent(8589934592,54)\nodd_Equivalent(17179869184,55)\nodd_Equivalent(34359738368,56)\nodd_Equivalent(6380195264,57)\nodd_Equivalent(121645504096,58)\nodd_Equivalent(274877906944,59)\nodd_Equivalent(549755813888,60)\nodd_Equivalent(1099511627776,61)\nodd_Equivalent(209227890625,62)\nodd_Equivalent(4194304,63)\nodd_Equivalent(8388608,64)\nodd_Equivalent(16777216,65)\nodd_Equivalent(33554432,66)\nodd_Equivalent(67108864,67"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_elements(x,y):\n        return set(x) & set(y)\n    return map(common_elements, *nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lists = []\n    for index, list in enumerate(nestedlist):\n        if list == None:\n            lists.append([])\n        else:\n            lists.append(list)\n    common_list = []\n    for index, list in enumerate(lists):\n        common_list = common_list + lists[index]\n        if index!= len(lists) - 1:\n            common_list = common_list + common_in_nested_lists(lists[index + 1])\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = list(map(set, nestedlist))\n    common = set.intersection(*nestedlist)\n    return sorted(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        if type(nestedlist[i]) == list:\n            common_list.extend(common_in_nested_lists(nestedlist[i]))\n        else:\n            common_list.append(nestedlist[i])\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for element in nestedlist:\n        for e in element:\n            if e in common:\n                common.append(e)\n            else:\n                pass\n    print(common)\ncommon_in_nested_lists([[1, 2], [1, 2], [1, 1, 2]])"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for item in nestedlist:\n        if isinstance(item, list):\n            common_in_nested_lists(item)\n        elif item in common_elements:\n            continue\n        else:\n            common_elements.append(item)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nested_list = [[1, 2, 4], [5, 6, 7, 8], [\"f\", \"g\", \"h\", \"i\", \"j\"], [\"x\", \"y\", \"z\"]]\n    # Output: ['g', 'i', 'j']\n    output = []\n    for l in nested_list:\n        if all(item in l for item in output):\n            output.append(item)\n    return output\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l = []\n    if len(nestedlist) <= 1:\n        return nestedlist\n    else:\n        for i in nestedlist:\n            l += common_in_nested_lists(i)\n    return l\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return common_in_list(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_list1 = nestedlist[0]\n    nested_list2 = nestedlist[1]\n    nested_list3 = nestedlist[2]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    #make sure it is a string\n    if not isinstance(text, str):\n        return False\n    #check if string is empty\n    if len(text) == 0:\n        return False\n    #check if it is integer\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return bool(int(text))\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isnumeric():\n        return True\n    else:\n        try:\n            int(text)\n            return True\n        except:\n            return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all([not i for i in list1])\n    \n    \nlist1 = [{\"name\":\"Ramesh\",\"address\":\"delhi\"},{},{}]\nprint(empty_dit(list1))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        print('all dictionaries are empty')\n    else:\n        print('Atleast one dictionary is not empty')\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if any(not(dict1) for dict1 in list1):\n        return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list1 = [{},{},{},{}]\n    for i in list1:\n        if i:\n            return False\n    return True\nprint(empty_dit(list1))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = 0\n    for i in range(0,len(list1)):\n        if len(list1[i]) == 0:\n            empty += 1\n    if empty == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if any(list1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + tuple_to_int(nums[1:])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([int(x) for x in nums])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda a, x: a * 10 + x, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if i == 0:\n            nums[i] = nums[i] * 1\n        else:\n            nums[i] = nums[i] * nums[i - 1]\n    return nums[n - 1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for index in range(0, len(nums)):\n        total += nums[index] * (10 ** index)\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i] * (10 ** (len(nums) - 1 - i))\n    return s\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    out = 0\n    for num in nums:\n        out = out*10 + num\n    return out\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code here\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == \"None\":\n                test_list[i][j] = 0\n            elif test_list[i][j].replace('.','').isdigit():\n                test_list[i][j] = float(test_list[i][j])\n            else:\n                test_list[i][j] = 0\n    return test_list\n    \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    '''\n    if lst == None:\n        return -1\n    elif len(lst) == 0:\n        return -1\n    elif lst[0] == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= 0:\n                return i\n                \ndef find_matching_number(lst):\n    '''\n    Write a function to find the index of the first non-zero value in a list of lists.\n    ''"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in j] for j in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = []\n    for i in test_list:\n        test_list_float.append([float(i) for i in test_list])\n    return test_list_float\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convert_list = []\n    for element in test_list:\n        if type(element) == list:\n            for elem in element:\n                if type(elem) == str:\n                    try:\n                        convert_list.append(float(elem))\n                    except:\n                        pass\n        else:\n            try:\n                convert_list.append(float(element))\n            except:\n                pass\n    return convert_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0,len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == int or type(test_list[i][j]) == float:\n                continue\n            else:\n                test_list[i][j] = float(test_list[i][j])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for l in test_list:\n            l.append(float(l[-1]))\n    except:\n        print(\"There is an error in your list.\")\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            return_list.append(list_to_float(test_list[i]))\n        else:\n            return_list.append(test_list[i])\n    return return_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if not string:\n        return []\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_value = string.split(' ')\n    return list_value\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef list_to_string(lst): \n    '''\n    Write a function to convert a list of strings to a string with each string on a separate line\n    '''\n    return''.join(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr: return -1\n    if len(arr) == 1: return arr[0]\n    if len(arr) == 2: return arr[0] if arr[0] > arr[1] else arr[1]\n    \n    if arr[0] == arr[1]:\n        if arr[0] == arr[2]:\n            return arr[0]\n        else:\n            return arr[1]\n    \n    if arr[0]!= arr[1]:\n        i = 2\n        while i < len(arr):\n            if arr[i]!= arr[i-1] and arr[i]!= arr[i-2]:\n                return arr[i-1]\n            i += 1\n    return arr[0]\n    \n    \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            return i\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    if length == 0:\n        return -1\n    if length == 1:\n        return 0\n    if length == 2:\n        if arr[0]!= arr[1]:\n            return -1\n        return 0\n    l = 0\n    r = length-1\n    while l <= r:\n        mid = l+(r-l)//2\n        if arr[mid]!= arr[mid-1]:\n            return mid\n        if arr[mid]!= arr[mid+1]:\n            return mid+1\n        if arr[mid] == arr[mid-1]:\n            r = mid - 1\n        elif arr[mid] == arr[mid+1]:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!= arr[i - 1]:\n            return arr[i]\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    m = 1\n    n = len(arr)\n    while m < n:\n        if arr[m]!= arr[m-1]:\n            break\n        m += 1\n    if m == n:\n        return arr[-1]\n    while m < n:\n        if arr[m]!= arr[m+1]:\n            break\n        m += 1\n    return arr[m]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = set()\n    for e in arr:\n        if e not in seen:\n            seen.add(e)\n        else:\n            return e\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # set max absolute product to 0\n    max_product = 0\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuple1=list1[0]\n    tuple2=list1[1]\n    max1=max2=min1=min2=tuple1[0]\n    for i in range(len(tuple1)):\n        if tuple1[i]>max1:\n            max1=tuple1[i]\n    for j in range(len(tuple2)):\n        if tuple2[j]>max2:\n            max2=tuple2[j]\n    for k in range(len(tuple1)):\n        if tuple1[k]<min1:\n            min1=tuple1[k]\n    for l in range(len(tuple2)):\n        if tuple2[l]<min2:\n            min2=tuple2[l]\n    if min1*min2>max1*max2:\n        return (max1,max2)\n    elif min1*min2==max1*max2:\n        if tuple1[0]>tuple2[0]:\n            return (max1,tuple1[1])\n        else:\n            return (max2,tuple1[1])\n    else:\n        return (max1,max2)\n    \n    \ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n    '''\n    max1=max2=min1=min2=list1[0][0]\n    for i in range(len(list1)):\n        if list1[i][0]>max1:\n            max1=list1[i][0]\n    for j in range(len(list1)):\n        if list1[j][0]>max2:\n            max2=list1[j][0]\n    for k in range(len(list1)):\n        if list1[k][0]<min1:\n            min1=list1[k][0]\n    for l in range(len(list1)):\n        if list1[l][0]<min2:\n            min2=list1[l][0]\n    if min1*min2>max1*max2:\n        return (max1,max2)\n    elif min1*min2==max1*max2:\n        if list1[0][1]>list1[1][1]:\n            return (max1,list1[1][1])\n        else:\n            return (max2,list1[1][1])\n    else:\n        return (max1,max2)\n    \n    \n    \ndef max_product_subset(list1):\n    '''\n    Write a function to find the maximum absolute product of any subset of numbers in a given list.\n    '''\n    max1=max2=min1=min2=list1[0]\n    for i in range(len(list1)):\n        if list1[i]>max1:\n            max1=list1[i]\n    for j in range(len(list1)):\n        if list1[j]>max2:\n            max2=list1[j]\n    for k in range(len(list1)):\n        if list1[k]<min1:\n            min1=list1[k]\n    for l in range(len(list1)):\n        if list1[l]<min2:\n            min2=list1[l]\n    if min1*min2>max1*max2:\n        return max1*max2\n    else:\n        return max1*min2\n    \n    \n    \ndef max_product_subset_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product of any subset of numbers in a given tuple.\n    '''\n    tuple1=list1[0]\n    tuple2=list1[1]\n    max1=max2=min1=min2=tuple1[0]\n    for i in range(len(tuple1)):\n        if tuple1[i]>max1:\n            max1=tuple1[i]\n    for j in range(len(tuple2)):\n        if tuple2[j]>max2:\n            max2=tuple2[j]\n    for k in range(len(tuple1)):\n        if tuple1[k]<min1:\n            min1=tuple1[k]\n    for l in range(len(tuple2)):\n        if tuple2[l]<min2:\n            min2=tuple2[l]\n    if min1*min2>max1*max2:\n        return max1*max2\n    else:\n        return max1*min2\n    \n    \ndef max_product_subset_list(list1):\n    '''\n    Write a function to find the maximum absolute product of any subset of numbers in a given list.\n    '''\n    max1=max2=min1=min2=list1[0][0]\n    for i in range(len(list1)):\n        if list1[i][0]>max1:\n            max1=list1[i][0]\n    for j in range(len(list1)):\n        if list1[j][0]>max2:\n            max2=list1[j][0]\n    for k in range(len(list1)):\n        if list1[k][0]<min1:\n            min1=list1[k][0]\n    for l in range(len(list1)):\n        if list1[l][0]<min2:\n            min2=list1[l][0]\n    if min1*min2>max1*max2:\n        return max1*max2\n    else:\n        return max1*min2\n    \n    \n    \ndef max_product_subset_tuple_sorted(list1):\n    '''\n    Write a function to find the maximum absolute product of any subset of numbers in a given tuple.\n    '''\n    tuple1=list1[0]\n    tuple2=list1[1]\n    max1=max2=min1=min2=tuple1[0]\n    for i in range(len(tuple1)):\n        if tuple1[i]>max1:\n            max1=tuple1[i]\n    for j in range(len(tuple2)):\n        if tuple2[j]>max2:\n            max2=tuple2[j]\n    for k in range(len(tuple1)):\n        if tuple1[k]<min1:\n            min1=tuple1[k]\n    for l in range(len(tuple2)):\n        if tuple2[l]<min2:\n            min2=tuple2[l]\n    if min1*min2>max1*max2:\n        return max1*max2\n    else:\n        return max1*min2\n    \ndef max_product_subset_list_sorted(list1):\n    '''\n    Write a function to find the maximum absolute product of any subset of numbers in a given list.\n    '''\n    max1=max2=min1=min2=list1[0][0]\n    for i in range(len(list1)):\n        if list1[i][0]>max1:\n            max1=list1[i][0]\n    for j in range(len(list1)):\n        if list1[j][0]>max2:\n            max2=list1[j][0]\n    for k in range(len(list1)):\n        if list1[k][0]<min1:\n            min1=list1[k][0]\n    for l in range(len(list1)):\n        if list1[l][0]<min2:\n            min2=list1[l][0]\n    if min1*min2>max1*max2:\n        return max1*max2\n    else:\n        return max1*min2\n    \n    \ndef max_product_subset_list_sorted_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product of any subset of numbers in a given list.\n    '''\n    max1=max2=min1=min2=tuple1=tuple2="
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_tuple = []\n    for i in range(len(list1)):\n        list1[i] = list1[i] + (list1[i][1] * (list1[i][0] * list1[i][2]))\n    list1.sort()\n    for i in range(len(list1)):\n        if i == len(list1) - 1:\n            max_product_tuple.append(list1[i])\n        else:\n            if list1[i][3] < list1[i + 1][3]:\n                max_product_tuple.append(list1[i])\n    return max_product_tuple\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    #!!! add the absolute product in the tuples!!\n    # need to know the length of each element\n    # to get the length of each element\n    # e.g. a = (1,2,3)\n    #         len(a) = 3\n    # max_product = a[0] * a[1] * a[2]\n    # max_product = (1*2*3)\n    #\n    # a = (1,2,3)\n    # len(a) = 3\n    # max_product = a[0] * a[1] * a[2]\n    # max_product = (1*2*3)\n    #\n    # a = (1,2,3,4)\n    # len(a) = 4\n    # max_product = a[0] * a[1] * a[2] * a[3]\n    # max_product = (1*2*3*4)\n    #\n    # a = (1,2,3,4,5)\n    # len(a) = 5\n    # max_product = a[0] * a[1] * a[2] * a[3] * a[4]\n    # max_product = (1*2*3*4*5)\n    #\n    # a = (1,2,3,4,5,6)\n    # len(a) = 6\n    # max_product = a[0] * a[1] * a[2] * a[3] * a[4] * a[5]\n    # max_product = (1*2*3*4*5*6)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = list1[0][0]\n    for i in range(len(list1)):\n        if maximum < abs(list1[i][0]):\n            maximum = abs(list1[i][0])\n    return maximum\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_prod(list1):\n        list1.sort()\n        return(max(list1[0][0] * list1[0][1], list1[-1][0] * list1[-1][1]))\n    return(max_prod(list1))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        a = list1[i][0]\n        b = list1[i][1]\n        for j in range(len(list1)):\n            c = list1[j][0]\n            d = list1[j][1]\n            if i < j:\n                a = c\n                b = d\n            if a >= 0 and b <= 0:\n                prod = a * b\n                if prod > max_product:\n                    max_product = prod\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l = list(list1)\n    max_p = float('-inf')\n    max_t = []\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i][0] < l[j][0]:\n                t = (l[i], l[j])\n            elif l[i][0] > l[j][0]:\n                t = (l[j], l[i])\n            elif l[i][1] < l[j][1]:\n                t = (l[i], l[j])\n            elif l[i][1] > l[j][1]:\n                t = (l[j], l[i])\n            if max_p < t[0][0]*t[1][0]:\n                max_p = t[0][0]*t[1][0]\n                max_t = t\n    return max_p, max_t\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs = [(list1[i], list1[i + 1]) for i in range(len(list1) - 1)]\n    result = []\n    pairs_new = []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if list1 == None or len(list1) < 2:\n        return None\n    max_val = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = tuple_product(list1[i], list1[j])\n            max_val = max(max_val, prod)\n    return max_val\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(num):\n        if num <= 1:\n            return 0\n        sum_amicable = 0\n        num_sum = 0\n        for i in range(1,num):\n            if sum_amicable + i == num:\n                num_sum += i\n                sum_amicable += i\n            elif sum_amicable + i > num:\n                sum_amicable = sum_amicable + i\n                num_sum += i\n            else:\n                sum_amicable = 0\n                num_sum = 0\n        return sum_amicable + num_sum\n    sum_amicable_numbers = sum_amicable_numbers(limit)\n    return sum_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicables = 0\n    for i in range(1,limit):\n        sum_sum = 0\n        sum_diff = 0\n        if i <= limit:\n            for j in range(1,i):\n                if i % j == 0:\n                    sum_sum += j\n                    if i == j:\n                        sum_diff += i\n            if sum_diff == sum_sum:\n                sum_amicables += i\n    return sum_amicables\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # make sure we only have numbers 1 to the limit, this way we only need to calculate the sum of amicable numbers\n    # for that limit, since any amicable numbers, which sum to the same value, are themselves amicable\n    numbers = set()\n    for num in range(1, limit):\n        if not num in numbers:\n            # create two variables, these will be the sum of the numbers and the sum of their reciprocals\n            sum_of_self_and_reciprocal = 0\n            sum_of_self_and_reciprocal_reciprocal = 0\n            # check if num is a divisor of the sum of the sum of its reciprocals\n            for x in range(1, int(num**0.5) + 1):\n                if num % x == 0:\n                    sum_of_self_and_reciprocal += num\n                    sum_of_self_and_reciprocal_reciprocal += int(x**0.5)\n            # if these numbers have the same sum, they are amicable\n            if sum_of_self_and_reciprocal == sum_of_self_and_reciprocal_reciprocal and num!= sum_of_self_and_reciprocal:\n                numbers.add(num)\n                numbers.add(sum_of_self_and_reciprocal)\n    return sum(numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicables = []\n    for i in range(1, limit):\n        s = sum\n        if (i + sum) == (s + i):\n            if (i + sum) not in amicables:\n                amicables.append(i + sum)\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = set()\n    divisible = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit + 1):\n        if (i in amicable_numbers) or (sum(amicable_numbers) == i):\n            continue\n        amicable_sum = sum(amicable_numbers)\n        if amicable_sum == i:\n            amicable_numbers.append(i)\n    print(amicable_numbers)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    amicable_list = []\n    for num in range(1, limit):\n        divider = 2\n        while divider < num:\n            if num % divider == 0:\n                amicable = num / divider\n                if amicable == divider:\n                    pass\n                elif amicable in amicable_list:\n                    pass\n                else:\n                    amicable_list.append(amicable)\n                    divider += 1\n                    total += amicable\n            else:\n                divider += 1\n    print(total)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = []\n    for i in range(2, limit):\n        for j in range(2, i):\n            if i!= j and i + j == int(i**0.5 + j**0.5):\n                amicables.append(i)\n                amicables.append(j)\n                break\n    return sum(amicables)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit):\n        j = i\n        while j!= 0 and j!= i:\n            if is_amicable_num(i, j):\n                result += i\n                break\n            j -= 1\n    print(result)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_in_rad = cmath.phase(complex(a,b))\n    return angle_in_rad\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_mag=abs(a)\n    b_mag=abs(b)\n    c_mag=a_mag*b_mag\n    a_arg=cmath.phase(a)\n    b_arg=cmath.phase(b)\n    c_arg=a_arg+b_arg\n    c_arg_deg=c_arg*180/cmath.pi\n    c_mag_deg=c_mag*180/cmath.pi\n    if c_mag_deg>180:\n        c_mag_deg-=360\n    if c_mag_deg<-180:\n        c_mag_deg+=360\n    if c_arg_deg>180:\n        c_arg_deg-=360\n    if c_arg_deg<-180:\n        c_arg_deg+=360\n    return c_mag_deg,c_arg_deg\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.imag*b.imag+a.real*b.real\n    d = a.real*b.real+a.imag*b.imag\n    return (cmath.atan2(d,c))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    temp=a*b\n    if abs(temp.imag)==0:\n        return(cmath.phase(temp))\n    else:\n        return(cmath.phase(temp))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    '''\n    def angle_complex(a,b):\n        def angle_complex(a,b):\n            if a.imag==0:\n                return cmath.phase(a+b)\n            elif b.imag==0:\n                return cmath.phase(a-b)\n            else:\n                return cmath.phase(a+b)\n        return angle_complex\n    '''\n    def angle_complex(a,b):\n        return cmath.phase(a+b)\n    print(angle_complex(1,1))\n    print(angle_complex(1,0))\n    print(angle_complex(1,0.2))\n    print(angle_complex(1+1j,1-1j))\n    print(angle_complex(1+1j,-1-1j))\n    print(angle_complex(1+1j,-1+1j))\n    print(angle_complex(1+1j,1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1-1j,1+1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,-1+1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1+1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,1+1j))\n    print(angle_complex(-1+1j,-1-1j))\n    print(angle_complex(-1-1j,-1-1j))\n    print(angle_complex(-1-1j,1-1j))\n    print(angle_complex(-1+1j,1-1j))\n    print(angle_complex(-1+1j,-1+1j))"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (type(a)==complex or type(b)==complex):\n        angle = cmath.phase(a)*cmath.phase(b)\n    else:\n        try:\n            angle = cmath.phase(a)*cmath.phase(b)\n        except TypeError:\n            print('Please enter complex numbers')\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    phase = cmath.phase(b)-cmath.phase(a)\n    if phase < 0:\n        return (phase+2*cmath.pi)\n    else:\n        return (phase)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.phase(a)\n    cmath.phase(b)\n    if(a*b<0):\n        return 180 - (math.degrees(cmath.phase(a)*cmath.phase(b)))\n    else:\n        return math.degrees(cmath.phase(a)*cmath.phase(b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if(a.imag==0 and b.imag==0):\n        a = abs(a)\n        b = abs(b)\n        if(a>b):\n            return (cmath.phase(a)-cmath.phase(b))/(a-b)\n        else:\n            return (cmath.phase(a)-cmath.phase(b))/(a+b)\n    else:\n        return cmath.phase(a)/(cmath.phase(a) + cmath.phase(b))\ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    if(a.imag==0):\n        return abs(a)\n    else:\n        return (cmath.phase(a)/(cmath.phase(a) - cmath.phase(a.conjugate())))\ndef mean(lst):\n    '''\n    Write a function to get the mean of a list of numbers.\n    '''\n    total = 0\n    for i in lst:\n        total += i\n    return total/len(lst)\ndef median(lst):\n    '''\n    Write a function to get the median of a list of numbers.\n    '''\n    lst.sort()\n    if len(lst)%2 == 0:\n        return (lst[len(lst)//2]+lst[len(lst)//2-1])/2\n    else:\n        return lst[len(lst)//2]\ndef mode(lst):\n    '''\n    Write a function to get the mode of a list of numbers.\n    '''\n    from collections import Counter\n    cnt = Counter(lst)\n    modes = []\n    max_cnt = max(cnt.values())\n    for key in cnt.keys():\n        if cnt[key] == max_cnt:\n            modes.append(key)\n    return modes\ndef mean_std(lst):\n    '''\n    Write a function to get the mean and std of a list of numbers.\n    '''\n    mean = sum(lst)/len(lst)\n    total = 0\n    for i in lst:\n        total += (i-mean)**2\n    std = (total/len(lst))**0.5\n    return (mean,std)\ndef variance(lst):\n    '''\n    Write a function to get the variance of a list of numbers.\n    '''\n    mean,std = mean_std(lst)\n    total = 0\n    for i in lst:\n        total += (i-mean)**2\n    return total/(len(lst)-1)\ndef median_2(lst):\n    '''\n    Write a function to get the median of a list of numbers.\n    '''\n    lst.sort()\n    if len(lst)%2 == 0:\n        return (lst[len(lst)//2]+lst[len(lst)//2-1])/2\n    else:\n        return lst[len(lst)//2]\ndef mode_2(lst):\n    '''\n    Write a function to get the mode of a list of numbers.\n    '''\n    from collections import Counter\n    cnt = Counter(lst)\n    modes = []\n    max_cnt = max(cnt.values())\n    for key in cnt.keys():\n        if cnt[key] == max_cnt:\n            modes.append(key)\n    return modes\ndef mean_std_2(lst):\n    '''\n    Write a function to get the mean and std of a list of numbers.\n    '''\n    mean = sum(lst)/len(lst)\n    total = 0\n    for i in lst:\n        total += (i-mean)**2\n    std = (total/len(lst))**0.5\n    return (mean,std)\ndef variance_2(lst):\n    '''\n    Write a function to get the variance of a list of numbers.\n    '''\n    mean,std = mean_std_2(lst)\n    total = 0\n    for i in lst:\n        total += (i-mean)**2\n    return total/(len(lst)-1)\ndef median_3(lst):\n    '''\n    Write a function to get the median of a list of numbers.\n    '''\n    lst.sort()\n    if len(lst)%2 == 0:\n        return (lst[len(lst)//2]+lst[len(lst)//2-1])/2\n    else:\n        return lst[len(lst)//2]\ndef mode_3(lst):\n    '''\n    Write a function to get the mode of a list of numbers.\n    '''\n    from collections import Counter\n    cnt = Counter(lst)\n    modes = []\n    max_cnt = max(cnt.values())\n    for key in cnt.keys():\n        if cnt[key] == max_cnt:\n            modes.append(key)\n    return modes\ndef mean_std_3(lst):\n    '''\n    Write a function to get the mean and std of a list of numbers.\n    '''\n    mean = sum(lst)/len(lst)\n    total = 0\n    for i in lst:\n        total += (i-mean)**2\n    std = (total/len(lst))**0.5\n    return (mean,std)\ndef variance_3(lst):\n    '''\n    Write a function to get the variance of a list of numbers.\n    '''\n    mean,std = mean_std_3(lst)\n    total = 0\n    for i in lst:\n        total += (i-mean)**2\n    return total/(len(lst)-1)\ndef median_4(lst):\n    '''\n    Write a function to get the median of a list of numbers.\n    '''\n    lst.sort()\n    if len(lst)%2 == 0:\n        return (lst[len(lst)//2]+lst[len(lst)//2-1])/2\n    else:\n        return lst[len(lst)//2]\ndef mode_4(lst):\n    '''\n    Write a function to get the mode of a list of numbers.\n    '''\n    from collections import Counter\n    cnt = Counter(lst)\n    modes = []\n    max_cnt = max(cnt.values())\n    for key in cnt.keys():\n        if cnt[key] == max_cnt:\n            modes.append(key)\n    return modes\ndef mean_std_4(lst):\n    '''\n    Write a function to get the mean and std of a list of numbers.\n    '''\n    mean = sum(lst)/len(lst)\n    total = 0\n    for i in lst:\n        total += (i-mean)**2\n    std = (total/len(lst))**0.5\n    return (mean,std)\ndef variance_4(lst):\n    '''\n    Write a function to get the variance of a list of numbers.\n    '''\n    mean,std = mean_std_4(lst)\n    total = 0\n    for i in lst:\n        total += (i-mean)**2\n    return total/(len(lst)-1)\ndef median_5(lst):\n    '''\n    Write a function to get the median of a list of numbers.\n    '''\n    lst.sort()\n    if len(lst)%2 == 0:\n        return (lst[len(lst)//2]+lst[len(lst)//2-1])/2\n    else:\n        return lst[len(lst)//2]\ndef mode_5(lst):\n    '''\n    Write a function to get the mode of a list of numbers.\n    '''\n    from collections import Counter\n    cnt = Counter(lst)\n    modes = []\n    max_cnt = max(cnt.values())\n    for key in cnt.keys():\n        if cnt[key] == max_cnt:\n            modes.append(key)\n    return modes\ndef mean_std_5(lst):\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    max_length_char_pos = 0\n    for i in range(len(string)):\n        current_string = string[i:i+1]\n        zero_count = current_string.count('0')\n        one_count = current_string.count('1')\n        max_length = max(max_length, zero_count-one_count)\n        max_length_char_pos = max(max_length_char_pos, i+1, zero_count, one_count)\n    print(max_length, max_length_char_pos)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string_length = len(string)\n    max_diff = -1\n    for i in range(0, string_length - 2):\n        if (string[i] == '0' and string[i+1] == '0'):\n            max_diff = max(max_diff, string_length - i - 1)\n        elif (string[i] == '0' and string[i+1] == '1'):\n            max_diff = max(max_diff, i + 1)\n        elif (string[i] == '1' and string[i+1] == '0'):\n            max_diff = max(max_diff, string_length - i - 1)\n        elif (string[i] == '1' and string[i+1] == '1'):\n            max_diff = max(max_diff, i + 1)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if(string == \"\"):\n        return 0\n    else:\n        return max(find_length(string[1:]),find_length(string[2:])) + 1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = len(string)\n    zeros = 0\n    ones = 0\n    max_zeros = 0\n    max_ones = 0\n    for i in range(l):\n        if(string[i] == '0'):\n            zeros += 1\n        else:\n            ones += 1\n        if(zeros > max_zeros):\n            max_zeros = zeros\n        if(ones > max_ones):\n            max_ones = ones\n    return max_zeros - max_ones\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            diff = max_diff\n            max_diff = max(max_diff, diff)\n        else:\n            diff = max_diff\n            max_diff = max(max_diff, diff + 1)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # brute force:\n    # use length of string and sum with two different values - 0 and 1\n    # if 0 and 1 count is the same - then we have the max difference\n    # we can use the same idea - we can go from front to end and keep adding\n    # count - but if the index i is a 0, we need to start a new count\n    # if the index is a 1, we are at the end of the string, but we have to add the current count\n    # now we have to compare counts and see who has the bigger difference\n    \n    # we can also use a hashmap of counts\n    # use a hashmap to keep track of counts\n    # so we can see if any of the sub-strings are all 0s\n    # for each sub-string, we can see how many 1s there are\n    # if we are at the end, we need to see how many 0s there are\n    # if we are at the start, we need to see how many 1s there are\n    # if we are at any point in the middle, we need to see how many 0s there are\n    \n    # make a hashmap\n    # use a hashmap\n    # use a hashmap\n    # use a hashmap\n    \n    \n    # time complexity: O(n)\n    # space complexity: O(n)\n    \n    # start with a counting variable for 0s and 1s\n    # and compare them\n    # if we see a 0, we need to add 1 to the variable\n    # if we see a 1, we need to add to the variable\n    # now we need to update the max difference\n    # if we see a 0 again, we need to reset\n    # if we see a 1 again, we need to reset\n    \n    # we can also use a sorting to get the maximum\n    # time complexity: O(nlogn)\n    # space complexity: O(1)\n    \n    # same idea with two pointers - we can only be incrementing one pointer\n    # and then compare to the other pointer\n    # time complexity: O(n)\n    # space complexity: O(1)\n    \n    \n    \n    # keep track of the number of 0s and 1s in the string\n    count0s = 0\n    count1s = 0\n    max_diff = 0\n    \n    # keep track of the current count of 0s and 1s\n    curr_0 = 0\n    curr_1 = 0\n    \n    # for each character in the string\n    for i in range(len(string)):\n        # if it is 0\n        if string[i] == \"0\":\n            # we need to increment our count of 0s\n            curr_0 += 1\n        else:\n            # we need to increment our count of 1s\n            curr_1 += 1\n        \n        # if we are at a point where we need to update the count of 0s\n        if i > 0 and curr_0!= count0s:\n            # we need to reset our count of 0s\n            count0s = curr_0\n            # we need to update our max difference\n            max_diff = max(max_diff, abs(curr_0-count0s))\n        # if we are at a point where we need to update the count of 1s\n        if i > 0 and curr_1!= count1s:\n            # we need to reset our count of 1s\n            count1s = curr_1\n            # we need to update our max difference\n            max_diff = max(max_diff, abs(curr_1-count1s))\n        \n        \n    # if the string is all 0s\n    if count0s == count1s == 0:\n        # we need to reset our max difference\n        max_diff = max(max_diff, abs(curr_0-count0s))\n    # if the string is all 1s\n    elif count0s == count1s == 1:\n        # we need to reset our max difference\n        max_diff = max(max_diff, abs(curr_0-count0s))\n    # if the string is 1 or more 0s and 1s\n    else:\n        # we need to reset our max difference\n        max_diff = max(max_diff, abs(curr_0-count0s), abs(curr_1-count1s))\n    \n    return max_diff\n    \n    # time complexity: O(n)\n    # space complexity: O(n)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if(len(string) < 1):\n        return -1\n    \n    # Find the number of 0s and 1s\n    count_0 = count_1 = 0\n    for c in string:\n        if(c == '0'):\n            count_0 += 1\n        else:\n            count_1 += 1\n    \n    # If the length is less than 2, then its maximum is len(string)\n    if(len(string) < 2):\n        return len(string)\n    \n    # Find the maximum difference between the number of 0s and number of 1s\n    max_diff = max(count_0, count_1) - min(count_0, count_1)\n    \n    # If the maximum difference is still less than 2, then its maximum is len(string)\n    if(max_diff < 2):\n        return len(string)\n    \n    # Find the maximum difference between the number of 0s and number of 1s, starting from the second character\n    for i in range(1, len(string)):\n        # Count the number of 0s and 1s\n        count_0 = count_1 = 0\n        for j in range(i, len(string)):\n            if(string[j] == '0'):\n                count_0 += 1\n            else:\n                count_1 += 1\n        \n        # If the maximum difference is still less than 2, then its maximum is len(string)\n        if(max_diff < count_0 - min(count_0, count_1)):\n            max_diff = count_0 - min(count_0, count_1)\n    \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Brute Force Approach:\n    # Loop through the string and check for 0s and 1s.\n    # If there is an odd amount of 0s and 1s, then we know that the length of the string is less than twice.\n    # Otherwise, we know that the length of the string is greater than twice.\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    start = 0\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    while start < len(string):\n        # start looping from the current start.\n        # check if we are at the end of the string.\n        if start == len(string) - 1:\n            break\n        # If we are in the middle of the string, then check if there is more 1s than 0s.\n        if start == len(string) // 2:\n            if count_1 < count_0:\n                max_diff = count_1 - count_0\n            break\n        # If we are not in the middle of the string, then check the next character of the string.\n        if string[start] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        # increment the start.\n        start += 1\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=[]\n    for i in range(1,min(a,b)):\n        if a%i==0 and b%i==0:\n            c.append(i)\n    return sum(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    assert a > 0 and b > 0, \"Both numbers must be greater than 0\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    '''\n    # Method-1\n    if (a == 0) or (b == 0):\n        return 0\n    elif (a < 0) or (b < 0):\n        return 0\n    else:\n        if (a % 2 == 0) or (b % 2 == 0):\n            return a + b\n        else:\n            return a * b\n    '''\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list_a = []\n    list_b = []\n    for i in range(1,a+1):\n        if a%i==0:\n            list_a.append(i)\n    for j in range(1,b+1):\n        if b%j==0:\n            list_b.append(j)\n    sum_l = []\n    for k in list_a:\n        if k in list_b:\n            sum_l.append(k)\n    return(sum(sum_l))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=[]\n    for i in range(1,a+1):\n        if(a%i==0):\n            c.append(i)\n    for i in range(1,b+1):\n        if(b%i==0):\n            c.append(i)\n    c=list(dict.fromkeys(c))\n    print(c)\n    a=len(c)\n    print(a)\n    sum=0\n    for i in range(1,a):\n        if(c[i]==a):\n            sum=sum+a\n    print(sum)\nsum(20,30)"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return(a)\n    else:\n        sum1 = 0\n        for i in range(1,min(a,b)+1):\n            if a%i == 0 and b%i == 0:\n                sum1 += i\n        return(sum1)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    list =[]\n    for i in range(1,min(a,b)+1):\n        if (a%i == 0) and (b%i == 0):\n            list.append(i)\n    print(sum(list))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum_of_divisors = 0\n    for i in range(1,a+1):\n        if a%i == 0 and b%i ==0:\n            sum_of_divisors+=i\n    print(sum_of_divisors)\nsum(12,20)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #code here\n    a=int(a)\n    b=int(b)\n    sum=0\n    for i in range(1,a):\n        if(a%i==0) and (b%i==0):\n            sum=sum+i\n    return sum\n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math as m\n    l = []\n    i=1\n    while (i <= m.sqrt(a)):\n        if (a%i == 0) and (b%i == 0):\n            l.append(i)\n        i+=1\n    return sum(l)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    res = []\n    for w in str.split(\" \"):\n        if len(w) > n:\n            res.append(w)\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word)>n:\n            long_words_list.append(word)\n    return(long_words_list)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = list()\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            l.append(str[i])\n    return l\nprint(long_words(4, ['abc', 'abcdef', 'abcdefgh', 'abcefg', 'bcdf', 'ab', 'bcd']))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return filter(lambda word: len(word) > n, str)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    res = []\n    for i in str.split():\n        if len(i) > n:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return_list = []\n    for word in str:\n        if len(word) >= n:\n            return_list.append(word)\n    return return_list\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split() if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    res = []\n    for word in str:\n        if len(word) > n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    square_sides = (len(my_matrix) ** 2)\n    if my_matrix == my_matrix[::-1]:\n        if my_matrix[i][i] + my_matrix[i + 1][i + 1] + my_matrix[i + 2][i + 2] == square_sides:\n            return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        length = len(my_matrix)\n        if length % 2 == 0:\n            sum_value = 0\n            for i in range(0, length):\n                for j in range(i, length):\n                    sum_value += my_matrix[i][j]\n            if sum_value == length * length:\n                return True\n            else:\n                return False\n        else:\n            sum_value = 0\n            for i in range(0, length):\n                for j in range(i, length):\n                    sum_value += my_matrix[i][j]\n            if sum_value == length + 1:\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not is_square(my_matrix):\n        print('The matrix you entered is not a square.')\n        return False\n    if not is_magic_square(my_matrix):\n        print('The matrix you entered is not a magic square.')\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # if the matrix is not square (it should be a n*n)\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # if the matrix is not a n*n\n    if len(my_matrix)!= len(my_matrix[0]) or len(my_matrix)!= len(my_matrix[0][0]):\n        return False\n    # if the matrix is a square\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n    # the matrix should have 2 equal numbers\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= 2:\n            return False\n    # now we are going to loop through the rows and columns and compare the numbers to make sure they are all equal\n    # we will begin by taking the first row and the first column\n    first_row = my_matrix[0]\n    first_col = []\n    # we will take the first row and the first column and compare the numbers to make sure they are equal\n    for col in my_matrix:\n        first_col.append(col[0])\n    first_col = set(first_col)\n    # now we will take the second row and the second column and compare the numbers to make sure they are equal\n    second_row = my_matrix[1]\n    second_col = []\n    for col in my_matrix:\n        second_col.append(col[1])\n    second_col = set(second_col)\n    # now we will take the third row and the third column and compare the numbers to make sure they are equal\n    third_row = my_matrix[2]\n    third_col = []\n    for col in my_matrix:\n        third_col.append(col[2])\n    third_col = set(third_col)\n    # now we will take the fourth row and the fourth column and compare the numbers to make sure they are equal\n    fourth_row = my_matrix[3]\n    fourth_col = []\n    for col in my_matrix:\n        fourth_col.append(col[3])\n    fourth_col = set(fourth_col)\n    # now we are going to compare the first row, second row and third row to make sure they are equal\n    if first_row!= second_row and first_row!= third_row and first_row!= fourth_row:\n        return False\n    # now we are going to compare the first column and the second column and third column to make sure they are equal\n    if first_col!= second_col and first_col!= third_col and first_col!= fourth_col:\n        return False\n    # now we are going to compare the first row and the second row and third row to make sure they are equal\n    if first_row!= second_row and first_row!= third_row and first_row!= fourth_row:\n        return False\n    # now we are going to compare the first column and the second column and third column to make sure they are equal\n    if first_col!= second_col and first_col!= third_col and first_col!= fourth_col:\n        return False\n    # now we are going to compare the second column and the third column and fourth column to make sure they are equal\n    if second_col!= third_col and second_col!= fourth_col and second_col!= fourth_col:\n        return False\n    # now we are going to compare the first row and the second row and third row to make sure they are equal\n    if first_row!= second_row and first_row!= third_row and first_row!= fourth_row:\n        return False\n    # now we are going to compare the first column and the second column and third column to make sure they are equal\n    if first_col!= second_col and first_col!= third_col and first_col!= fourth_col:\n        return False\n    # now we are going to compare the second column and the third column and fourth column to make sure they are equal\n    if second_col!= third_col and second_col!= fourth_col and second_col!= fourth_col:\n        return False\n    # now we are going to compare the first row and the second row and third row to make sure they are equal\n    if first_row!= second_row and first_row!= third_row and first_row!= fourth_row:\n        return False\n    # now we are going to compare the first column and the second column and third column to make sure they are equal\n    if first_col!= second_col and first_col!= third_col and first_col!= fourth_col:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return (is_magic_square(my_matrix)\n        and my_matrix == get_magic_square_matrix(my_matrix))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix == None:\n        return False\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    print(rows, cols)\n    if rows == cols and rows == 0:\n        return False\n    if rows!= cols and rows == 0:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            print(my_matrix[i][j], end=' ')\n        print()\n    if my_matrix[0][0]!= my_matrix[1][1]!= my_matrix[2][2]!= my_matrix[0][2] or my_matrix[1][0]!= my_matrix[1][1]!= my_matrix[1][2]!= my_matrix[0][1] or my_matrix[2][0]!= my_matrix[2][1]!= my_matrix[2][2]!= my_matrix[0][0]:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        print('Error - the matrix is not a square')\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list) or len(my_matrix)!= len(my_matrix[0]):\n        raise ValueError\n    if not all([len(x) == len(my_matrix[0]) for x in my_matrix]):\n        raise ValueError\n    if not all([len(x) == len(my_matrix[0]) for x in my_matrix]):\n        raise ValueError\n    if not all([len(x) == len(my_matrix[0]) for x in my_matrix]):\n        raise ValueError\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return True if all([len(set(row)) == len(row) for row in my_matrix]) and \\\n        all([len(set([row[i] for row in my_matrix])) == len(my_matrix) for i in range(len(my_matrix[0]))]) and \\\n        all([sum([my_matrix[row][i] for row in range(len(my_matrix))]) == sum([my_matrix[i][i] for i in range(len(my_matrix))]) for i in range(len(my_matrix))]) else False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m,n = len(my_matrix), len(my_matrix[0])\n    for i in range(m):\n        if len(my_matrix[i])!= n:\n            return False\n    for i in range(n):\n        if len(my_matrix[0][i])!= m:\n            return False\n    if my_matrix == magic_square(m):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_map = defaultdict(int)\n    for num in nums:\n        count_map[num] += 1\n    return max(count_map.items(), key=lambda item: item[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = {}\n    for i in nums:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for item in nums:\n        freq[item] += 1\n    max_count = max(freq.values())\n    return [key for key, value in freq.items() if value == max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_count = 0\n    max_value = 0\n    for k in d:\n        if d[k] > max_count:\n            max_count = d[k]\n            max_value = k\n    return max_value\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(lambda: 0)\n    for num in nums:\n        d[num] += 1\n    m = max(d.values())\n    l = []\n    for k, v in d.items():\n        if v == m:\n            l.append(k)\n    return(max(l))\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hist = defaultdict(int)\n    for num in nums:\n        hist[num] += 1\n    max_freq = max(hist.values())\n    for key in hist:\n        if hist[key] == max_freq:\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    from collections import defaultdict\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #hashing\n    dic = {}\n    max_f = 0\n    for i in nums:\n        dic.setdefault(i,0)\n        dic[i] += 1\n        if dic[i] > max_f:\n            max_f = dic[i]\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # first check for empty list\n    if nums == []:\n        return None\n    # create a dictionary for item to its frequencies\n    item_dict = defaultdict(int)\n    # iterate through nums\n    for i in nums:\n        # increment item by 1\n        item_dict[i] += 1\n    # set result to first occurrence\n    result = max(item_dict.values())\n    # return the item with the maximum occurrence\n    return item_dict.get(item_dict.get(result))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    new_string = \"\"\n    for char in str1:\n        if char in vowels:\n            new_string += char\n        else:\n            new_string += '*'\n    return new_string\nprint(reverse_vowels('hello'))"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a','e','i','o','u','y'])\n    vowels1 = set(['A','E','I','O','U','Y'])\n    result = \"\"\n    for char in str1:\n        if char not in vowels and char not in vowels1:\n            result += char\n        elif char in vowels:\n            result += char\n        elif char in vowels1:\n            result += char\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    result = ''\n    for x in range(len(str1)):\n        if str1[x] in vowels:\n            result += str1[x]\n        else:\n            result += str1[len(str1) - 1 - x]\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_str = new_str + str1[i]\n        else:\n            new_str = new_str + str1[i].lower()\n    print(new_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str2 = ''\n    \n    for i in str1:\n        if i not in vowels:\n            str2 += i\n    \n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    \n    output = \"\"\n    \n    for char in str1:\n        if char not in vowels:\n            output += char\n        else:\n            output += char.join(list(reversed(output)))\n    \n    return output\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s = ''\n    for i in range(len(str1)):\n        if str1[i] in ['a', 'e', 'i', 'o', 'u', 'y']:\n            s = s + str1[len(str1) - 1 - i]\n    return s\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = str1[::-1]\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for vowel in vowels:\n        str2 = str2.replace(vowel, '')\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    string = list(str1)\n    for i in range(len(string)):\n        if string[i] in vowels:\n            string[i] = '*'\n            # print(string)\n    \n    s = \"\".join(string)\n    \n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\nprint(tup_string(('a','b','c','d')))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_str(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_float(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_dict(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_list(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_tuple(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_set(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_frozenset(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_range(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_slice(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_dict_1(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_dict_2(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_zip(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_enumerate(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_enumerate(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_extend(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_count(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=str(tup1)\n    return s\ndef tup_index(tup1,v1):\n    '''\n    Write a function to convert a tuple to a string.\n    '"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    print(tuple(map(str, tup1)))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = \"\"\n    for i in range(len(tup1)):\n        if tup1[i] == tup1[-1]:\n            string1 += str(tup1[i])\n        else:\n            string1 += str(tup1[i]) + \", \"\n    return string1\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''.join(map(str, tup1))\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return sum_negativenum(nums[1:]) + nums[0]\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in nums:\n        if i < 0:\n            s += i\n    return s\n    "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums = [-1, 1, 2, -2, -4, 4, -5]\n    total = 0\n    negativenums = 0\n    for num in nums:\n        if num < 0:\n            negativenums += num\n            total += negativenums\n    print(total)\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s=0\n    for i in nums:\n        if i<0:\n            s=s+i\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pos_sum = sum(n for n in nums if n > 0)\n    return pos_sum + sum(n for n in nums if n < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum + i if i < 0 else sum\n    return sum\nprint(sum_negativenum([-4,5,-6]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #if negative numbers are not given.\n    if len(nums) == 0:\n        return 0\n    #total sum of negative numbers\n    total = 0\n    for num in nums:\n        if num < 0:\n            total = total + num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_numbers = []\n    for number in nums:\n        if number < 0:\n            negative_numbers.append(number)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==0: return 0\n    for i in range(1, n+1): \n        return i*(3*i - 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #start with sqrt(2) because 1 and 3 are consecutive hexagonal numbers\n    n -= 1\n    return int(sqrt(2) * (pow(3, n) - 1))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    assert n > 0, 'n must be a positive integer!'\n    return n * (n+1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(n+1)*((2*n+1)/4)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    total = 1\n    for i in range(1, n + 1):\n        total *= 3 * i + 1\n    return total\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return pow(n, 1/2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 1\n    k = 1\n    while k <= n:\n        result = result + 2 * k\n        k += 1\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(round((3*n*n + 1)**0.5, 0))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return 1 \n    else: \n        return hexagonal_num(n - 1) * 2 + 1 \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 1:\n        return n\n    a = 1\n    b = 1\n    while n > 1:\n        n -= 1\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros / nonzeros\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for i in range(0,len(nums)):\n        if nums[i]==0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = 0\n    result = nums.count(0)\n    result = result/nums.count(1)\n    return result\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #write your function here\n    zeros, ones = 0, 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/(zeros+ones)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #count = 0\n    #for i in range(len(nums)):\n    #    if nums[i] == 0:\n    #        count += 1\n    #return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return (nums.count(0)/len(nums))\ndef find_min(a):\n    '''\n    Write a function to find the minimum value in an array.\n    '''\n    if len(a)==0:\n        return\n    min_value = a[0]\n    for i in range(1, len(a)):\n        if a[i]<min_value:\n            min_value = a[i]\n    return min_value\ndef find_min_index(a):\n    '''\n    Write a function to find the index of the minimum value in an array.\n    '''\n    if len(a)==0:\n        return\n    min_value = a[0]\n    min_index = 0\n    for i in range(1, len(a)):\n        if a[i]<min_value:\n            min_value = a[i]\n            min_index = i\n    return min_index\ndef find_min_in_rotated_array(a):\n    '''\n    Write a function to find the minimum value in a rotated sorted array.\n    '''\n    if len(a)==0:\n        return\n    start = 0\n    end = len(a)-1\n    while start<end:\n        mid = start + (end-start)//2\n        if a[mid]>a[end]:\n            start = mid+1\n        else:\n            end = mid\n    return a[start]\ndef find_max(a):\n    '''\n    Write a function to find the maximum value in an array.\n    '''\n    if len(a)==0:\n        return\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i]>max_value:\n            max_value = a[i]\n    return max_value\ndef find_max_index(a):\n    '''\n    Write a function to find the index of the maximum value in an array.\n    '''\n    if len(a)==0:\n        return\n    max_value = a[0]\n    max_index = 0\n    for i in range(1, len(a)):\n        if a[i]>max_value:\n            max_value = a[i]\n            max_index = i\n    return max_index\ndef find_max_in_rotated_array(a):\n    '''\n    Write a function to find the maximum value in a rotated sorted array.\n    '''\n    if len(a)==0:\n        return\n    start = 0\n    end = len(a)-1\n    while start<end:\n        mid = start + (end-start)//2\n        if a[mid]<a[end]:\n            start = mid+1\n        else:\n            end = mid\n    return a[start]\ndef find_even_index(a):\n    '''\n    Write a function to find the index of an even number in an array.\n    '''\n    if len(a)==0:\n        return\n    start = 0\n    end = len(a)-1\n    while start<end:\n        mid = start + (end-start)//2\n        if a[mid]%2==0:\n            start = mid+1\n        else:\n            end = mid\n    if a[start]%2==0:\n        return start\n    else:\n        return -1\ndef find_even_index_recursive(a):\n    '''\n    Write a function to find the index of an even number in an array.\n    '''\n    if len(a)==0:\n        return\n    if a[0]%2==0:\n        return 0\n    else:\n        return find_even_index_recursive(a[1:])\ndef binary_search_rotated_array(a, target):\n    '''\n    Write a function to find the index of an element in a sorted rotated array.\n    '''\n    if len(a)==0:\n        return\n    start = 0\n    end = len(a)-1\n    while start<end:\n        mid = start + (end-start)//2\n        if a[mid]==target:\n            return mid\n        if a[start]==a[end] and a[start]==target:\n            return start\n        if a[mid]==a[end] and a[mid]==target:\n            return mid\n        if a[start]<=a[mid]:\n            if a[start]<=target<=a[mid]:\n                end = mid-1\n            else:\n                start = mid+1\n        else:\n            if a[mid]<=target<=a[end]:\n                start = mid+1\n            else:\n                end = mid-1\n    if a[start]==target:\n        return start\n    return -1\ndef binary_search_rotated_array_2(a, target):\n    '''\n    Write a function to find the index of an element in a sorted rotated array.\n    '''\n    if len(a)==0:\n        return\n    start = 0\n    end = len(a)-1\n    while start<end:\n        mid = start + (end-start)//2\n        if a[mid]==target:\n            return mid\n        if a[start]==a[end] and a[start]==target:\n            return start\n        if a[mid]==a[end] and a[mid]==target:\n            return mid\n        if a[start]<=a[mid]:\n            if a[start]<=target<=a[mid]:\n                end = mid-1\n            else:\n                start = mid+1\n        else:\n            if a[mid]<=target<=a[end]:\n                start = mid+1\n            else:\n                end = mid-1\n    if a[start]==target:\n        return start\n    return -1\ndef search_rotated_array(a, target):\n    '''\n    Write a function to search a rotated sorted array.\n    '''\n    if len(a)==0:\n        return\n    start = 0\n    end = len(a)-1\n    while start<end:\n        mid = start + (end-start)//2\n        if a[mid]==target:\n            return mid\n        if a[start]==a[end] and a[start]==target:\n            return start\n        if a[mid]==a[end] and a[mid]==target:\n            return mid\n        if a[start]<=a[mid]:\n            if a[start]<=target<=a[mid]:\n                end = mid-1\n            else:\n                start = mid+1\n        else:\n            if a[mid]<=target<=a[end]:\n                start = mid+1\n            else:\n                end = mid-1\n    if a[start]==target:\n        return start\n    return -1\ndef search_rotated_array_2(a, target):\n    '''\n    Write a function to search a rotated sorted array.\n    '''\n    if len(a)==0:\n        return\n    start = 0\n    end = len(a)-1\n    while start<end:\n        mid = start + (end-start)//2\n        if a[mid]==target:\n            return mid\n        if a[start]==a[end] and a[start]==target:\n            return start\n        if a[mid]==a[end] and a[mid]==target:\n            return mid\n        if a[start]<=a[mid]:\n            if a[start]<=target<=a[mid]:\n                end = mid-1\n            else:\n                start = mid+1\n        else:\n            if a[mid]<=target<=a[end]:\n                start = mid+1\n            else:\n                end = mid-1\n    if a[start]==target:\n        return start\n    return -1\ndef search_rotated_array_3(a, target):\n    '''\n    Write a function to search a rotated sorted array.\n    '''\n    if len(a)==0:\n        return\n    start = 0\n    end = len(a)-1\n    while start<end:\n        mid = start + (end-start)//2\n        if a[mid]==target:\n            return mid\n        if "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count/non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # numbers = array('i')\n    zeroes, non_zeroes = 0, 0\n    # for num in nums:\n    #     if num == 0:\n    #         zeroes += 1\n    #     else:\n    #         non_zeroes += 1\n    # return zeroes/non_zeroes\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes, non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums == None or len(nums) == 0:\n        return None\n    zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n    zeroes = 0\n    non_zeroes = len(nums) - zeroes\n    return zeroes/non_zeroes\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n!= 1:\n        if (n % 2) == 0:\n            n /= 2\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # code here\n    if n==0:\n        return True\n    if n<0:\n        return False\n    while n%2==0:\n        n//=2\n    if n==1:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while (n!= 0):\n        if (n % 2 == 1):\n            count += 1\n        n = n // 2\n    return count == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def check_pow_2(n):\n        while n > 1:\n            if n % 2!= 0:\n                return False\n            n = n // 2\n        return True\n    def check_pow_2_0_1(n):\n        while n > 1:\n            if n % 2!= 0:\n                return False\n            if n == 1:\n                return True\n            n = n // 2\n        return True\n    \n    if check_pow_2(n) or check_pow_2_0_1(n):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count=0\n    while n!=0:\n        count+=1\n        if n%2!=0:\n            return False\n        else:\n            n=n//2\n    if count==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_sum_of_powers_of_two(n):\n        while n!= 0:\n            if (n % 2) == 0:\n                n = n//2\n            else:\n                return False\n        return True\n    \n    if is_sum_of_powers_of_two(n):\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    is_Sum_Of_Powers_Of_Two(n)    \n    \ndef is_Sum_Of_Powers_Of_Two2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_sum_of_powers_of_two(n):\n        while n!= 0:\n            if (n % 2) == 0:\n                n = n//2\n            else:\n                return False\n        return True\n    \n    if is_sum_of_powers_of_two(n):\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    is_Sum_Of_Powers_Of_Two2(n)    \n    \ndef is_sum_of_powers_of_two2(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while n!= 0:\n        if (n % 2) == 0:\n            n = n//2\n        else:\n            return False\n        sum = sum + 1\n    if sum == 1:\n        return True\n    else:\n        return False\n    \n    is_sum_of_powers_of_two2(n)    \n    "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n!= 0:\n        if n%2 == 0:\n            n = n/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_Of_2(n): \n        '''\n        Write a python function to check whether the given number is power of 2 or not.\n        '''\n        return n > 0 and 2**(n - 1) < n\n    def is_Power_Of_2_And_Sum_of_Powers(n): \n        '''\n        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n        '''\n        def is_Power_Of_2(n): \n            '''\n            Write a python function to check whether the given number is power of 2 or not.\n            '''\n            return n > 0 and 2**(n - 1) < n\n        def is_Power_Of_2_And_Sum_of_Powers(n): \n            '''\n            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n            '''\n            def is_Power_Of_2(n): \n                '''\n                Write a python function to check whether the given number is power of 2 or not.\n                '''\n                return n > 0 and 2**(n - 1) < n\n            def is_Power_Of_2_And_Sum_of_Powers(n): \n                '''\n                Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                '''\n                def is_Power_Of_2(n): \n                    '''\n                    Write a python function to check whether the given number is power of 2 or not.\n                    '''\n                    return n > 0 and 2**(n - 1) < n\n                def is_Power_Of_2_And_Sum_of_Powers(n): \n                    '''\n                    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                    '''\n                    def is_Power_Of_2(n): \n                        '''\n                        Write a python function to check whether the given number is power of 2 or not.\n                        '''\n                        return n > 0 and 2**(n - 1) < n\n                    def is_Power_Of_2_And_Sum_of_Powers(n): \n                        '''\n                        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                        '''\n                        def is_Power_Of_2(n): \n                            '''\n                            Write a python function to check whether the given number is power of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                        def is_Power_Of_2_And_Sum_of_Powers(n): \n                            '''\n                            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                            '''\n                            def is_Power_Of_2(n): \n                                '''\n                                Write a python function to check whether the given number is power of 2 or not.\n                                '''\n                                return n > 0 and 2**(n - 1) < n\n                            def is_Power_Of_2_And_Sum_of_Powers(n): \n                                '''\n                                Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                                '''\n                                return n > 0 and 2**(n - 1) < n\n                    def is_Power_Of_2_And_Sum_of_Powers(n): \n                        '''\n                        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                        '''\n                        def is_Power_Of_2(n): \n                            '''\n                            Write a python function to check whether the given number is power of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                        def is_Power_Of_2_And_Sum_of_Powers(n): \n                            '''\n                            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                    def is_Power_Of_2_And_Sum_of_Powers(n): \n                        '''\n                        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                        '''\n                        def is_Power_Of_2(n): \n                            '''\n                            Write a python function to check whether the given number is power of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                        def is_Power_Of_2_And_Sum_of_Powers(n): \n                            '''\n                            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                    def is_Power_Of_2_And_Sum_of_Powers(n): \n                        '''\n                        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                        '''\n                        def is_Power_Of_2(n): \n                            '''\n                            Write a python function to check whether the given number is power of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                        def is_Power_Of_2_And_Sum_of_Powers(n): \n                            '''\n                            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                    def is_Power_Of_2_And_Sum_of_Powers(n): \n                        '''\n                        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                        '''\n                        def is_Power_Of_2(n): \n                            '''\n                            Write a python function to check whether the given number is power of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                        def is_Power_Of_2_And_Sum_of_Powers(n): \n                            '''\n                            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                    def is_Power_Of_2_And_Sum_of_Powers(n): \n                        '''\n                        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                        '''\n                        def is_Power_Of_2(n): \n                            '''\n                            Write a python function to check whether the given number is power of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                        def is_Power_Of_2_And_Sum_of_Powers(n): \n                            '''\n                            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                    def is_Power_Of_2_And_Sum_of_Powers(n): \n                        '''\n                        Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                        '''\n                        def is_Power_Of_2(n): \n                            '''\n                            Write a python function to check whether the given number is power of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                        def is_Power_Of_2_And_Sum_of_Powers(n): \n                            '''\n                            Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n                            '''\n                            return n > 0 and 2**(n - 1) < n\n                    def is_Power_Of_2_And_Sum_of_Powers(n): \n                        '''\n                        Write a python function to check whether the given number can b"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 1\n    while True:\n        if (int(n)//2)**count <= n:\n            count+=1\n        else:\n            return False\n        if count == 4:\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    result = sum([x for x in range(1, n+1) if n % x == 0]) \n    if result == n: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    PI = 3.14\n    circumference = PI * r ** 2\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return (2*math.pi*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            singly_list.append(item)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    print(test_list)\n    s = []\n    for i in test_list:\n        s = s + i\n    return s\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return set()\n    elif type(test_list[0]) == int or type(test_list[0]) == float:\n        return {test_list[0]}\n    else:\n        flatten = set()\n        for item in test_list:\n            flatten = flatten | extract_singly(item)\n        return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    s = set()\n    for l in test_list:\n        for i in l:\n            s.add(i)\n    return s\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    if not test_list:\n        return result\n    for i in test_list:\n        if isinstance(i, list):\n            result.extend(extract_singly(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return []\n    if len(test_list) == 1:\n        return test_list[0]\n    return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #st = test_list\n    s = set()\n    for t in test_list:\n        s.update(t)\n    return s\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j].strip()\n            \n    test_list = list(chain.from_iterable(test_list))\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    count = 0\n    for i in test_list:\n        count += len(i)\n    return count\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for items in test_list:\n        for item in items:\n            result.add(item)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                tmp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = tmp\n    return nums\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n == 1: return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # get the length of the list\n    length = len(nums)\n    # set up a variable to keep track of the indices\n    #  of the elements to be moved\n    index = length - 1\n    # loop through the list to move the bigger elements\n    #  to the end of the list\n    for i in range(length - 1, 0, -1):\n        # get the index of the bigger element\n        j = i\n        for j in range(i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        # move the elements to the end of the list\n        index -= 1\n    # return the sorted list\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    i = 0\n    \n    #find index of last_elem\n    while i < len(nums) and nums[i] == len(nums) - 1:\n        i += 1\n    \n    #reverse the list up to last_elem\n    for i in range(len(nums)):\n        if i > 0 and nums[i] < nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n        elif i > 0 and nums[i] > nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n    \n    #reverse the remaining list\n    j = len(nums) - 1\n    while j > 0 and nums[j] < nums[j-1]:\n        nums[j], nums[j-1] = nums[j-1], nums[j]\n        j -= 1\n    \n    return nums\n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n    \n    \ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse(nums, i):\n        while i!= 0:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            i -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                temp = nums[j+1]\n                nums[j+1] = nums[j]\n                nums[j] = temp\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums = nums.copy()\n    for i in range(len(nums)):\n        max_num = max(nums)\n        max_idx = nums.index(max_num)\n        nums = nums[max_idx:] + nums[:max_idx]\n        \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # print(nums)\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(nums)\n    n = len(nums)\n    while n > 1:\n        # find the index of the largest element\n        # to swap with the last element\n        swap_index = n - 1\n        for i in range(n - 1):\n            if nums[i] > nums[swap_index]:\n                swap_index = i\n        # swap the element at swap_index with last\n        # element\n        nums[swap_index], nums[n - 1] = nums[n - 1], nums[swap_index]\n        n -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i=0\n    if len(list1)!=len(list2) and len(list1)!=len(list3) and len(list2)!=len(list3):\n        return -1\n    if len(list1)!=len(list2):\n        while i<len(list1):\n            if list1[i]==list2[i]:\n                if list1[i]==list3[i]:\n                    return 1\n                else:\n                    continue\n            else:\n                return 0\n            i=i+1\n    else:\n        while i<len(list1):\n            if list1[i]==list3[i]:\n                if list2[i]==list3[i]:\n                    return 1\n                else:\n                    continue\n            else:\n                return 0\n            i=i+1\n    return -1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k] and list1[i]==list3[k]:\n                    a=a+1\n    print(a)\ncount_samepair([1,1,1,2,2,2],[1,1,1,2,2,2],[1,1,1,2,2,2])\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    assert len(list1) == len(list2) and len(list1) == len(list3)\n    return sum([1 for x in range(len(list1)) if list1[x] == list2[x] and list1[x] == list3[x]])\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list1[i]==list3[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        count=0\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                count+=1\n        return count\n    else:\n        return 'Not equal length'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # iterate through items in each list to get the index and the value of the item at that index\n    i = 0\n    # iterate through items in each list to get the index and the value of the item at that index\n    while i < len(list1):\n        # if the item from the first list is the same, increment the counter of matching values in each list\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                counter += 1\n        i += 1\n    print(counter)\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Code here\n    List = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i] == Input[j]:\n                List.append(Input[i])\n    List = set(List)\n    print(len(List))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = tuple(Input)\n    count = 0\n    for i in range(len(Input)):\n        if Input[i] == []:\n            count = count + 1\n    return count \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = '''\n        {\n            \"list1\":\n                [\n                    {\n                        \"item_name\": \"purple\",\n                        \"quantity\": 2\n                    },\n                    {\n                        \"item_name\": \"orange\",\n                        \"quantity\": 2\n                    },\n                    {\n                        \"item_name\": \"yellow\",\n                        \"quantity\": 1\n                    }\n                ],\n            \"list2\":\n                [\n                    {\n                        \"item_name\": \"red\",\n                        \"quantity\": 1\n                    },\n                    {\n                        \"item_name\": \"blue\",\n                        \"quantity\": 2\n                    },\n                    {\n                        \"item_name\": \"green\",\n                        \"quantity\": 2\n                    }\n                ],\n            \"list3\":\n                [\n                    {\n                        \"item_name\": \"black\",\n                        \"quantity\": 2\n                    },\n                    {\n                        \"item_name\": \"white\",\n                        \"quantity\": 1\n                    },\n                    {\n                        \"item_name\": \"yellow\",\n                        \"quantity\": 1\n                    }\n                ]\n        }\n    '''\n    output = find_lists(Input)\n    expected = 3\n    assert output == expected, f'Expected different output. Got {output}'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count=0\n    for i in Input:\n        if type(i)==list:\n            list_count=list_count+1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists=0\n    for items in Input:\n        if type(items)==list:\n            lists+=1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input)\n    l = []\n    for i in range(n):\n        if type(Input[i]) == list:\n            l.append(Input[i])\n    print(l)\n    print(len(l))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if type(item) is list:\n            num_lists += 1\n    return num_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Iterate over the tuple\n    # check if this is a list\n    # if its not a list then add it to the total\n    total = 0\n    for num in Input:\n        if not isinstance(num, list):\n            total = total + 1\n    return total\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input)\n    L = []\n    count_list = 0\n    for i in range(n):\n        if isinstance(Input[i], tuple):\n            L.append(i)\n    count_list = len(L)\n    return count_list\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    mx = -999999\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] - arr[j] > mx:\n                mx = arr[i] - arr[j]\n    return mx\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if max_Diff < diff:\n            max_Diff = diff\n    return max_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if abs(max-arr[i]) > abs(max-arr[i-1]):\n            max = arr[i]\n    return max"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # code here\n    max_diff = -1\n    for i in range(0,len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)==0:\n        return\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return abs(arr[0]-arr[1])\n    max_diff=0\n    max_idx=0\n    for i in range(1,len(arr)):\n        if abs(arr[i]-arr[i-1])>max_diff:\n            max_diff=abs(arr[i]-arr[i-1])\n            max_idx=i\n    return arr[max_idx]\n    \ndef max_Sub_array(arr,k):\n    '''\n    Write a python function to find the maximum sum of k consecutive elements in an array.\n    '''\n    if len(arr)==0:\n        return\n    if len(arr)==1:\n        return arr[0]\n    if k==1:\n        return max(arr)\n    if k>len(arr):\n        return max(arr)\n    max_sum=0\n    for i in range(k):\n        max_sum=max(max_sum+arr[i],arr[i])\n    max_sum=max(max_sum,max_Sub_array(arr[k:],k))\n    return max_sum\n    \ndef merge_the_tools(string, k):\n    '''\n    Write a python function to merge characters of a given string.\n    '''\n    output=''\n    i=0\n    while i<len(string):\n        sub_string=string[i:i+k]\n        output+=sub_string\n        i+=k\n    return output\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # max_dif = 0\n    # mx1 = arr[0]\n    # mx2 = arr[0]\n    # for i in range(1, len(arr)):\n    #     mx1 = max(mx1, arr[i])\n    #     mx2 = max(mx2, -arr[i])\n    #     dif = abs(mx1 - mx2)\n    #     if dif > max_dif:\n    #         max_dif = dif\n    # return max_dif\n    '''\n    Two pointers approach:\n    1. find the max difference\n    2. compare the max difference with every other element\n    '''\n    max_dif = 0\n    max_arr = []\n    max_p1 = max(arr)\n    max_p2 = min(arr)\n    for i in range(0, len(arr)-1):\n        if abs(max_p1-max_p2) < max_dif:\n            max_dif = abs(max_p1-max_p2)\n        max_p1 = max(max_p1, arr[i+1])\n        max_p2 = min(max_p2, arr[i+1])\n    return max_dif\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    size = len(arr)\n    if size < 2:\n        print(\"Array is too small\")\n        return -1\n    if size == 2:\n        if arr[0] > arr[1]:\n            return arr[0] - arr[1]\n        else:\n            return arr[1] - arr[0]\n    first = 0\n    last = size - 1\n    while(first < last):\n        if arr[first] > arr[last]:\n            return max(arr[first] - arr[last], arr[last] - arr[first])\n        else:\n            return max(arr[first] - arr[last], arr[last] - arr[first])\n    "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        if arr[i] < 0:\n            curr_diff = abs(arr[i+1]) - abs(arr[i])\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n        else:\n            curr_diff = abs(arr[i+1]) - abs(arr[i])\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if (x * a + y * b) == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x,y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    for i in range(n):\n        if a*x + b*y == n:\n            return (x, y)\n        elif a*x + b*y < n:\n            y += 1\n        else:\n            x += 1\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #c = b - math.floor(b / a) * a\n    #a = c / b\n    #return a,b\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    for x in range(1, a + 1):\n        for y in range(1, b + 1):\n            if x * x + y * y == n:\n                return (x, y)\n    return None\n    \n    \nif __name__ == \"__main__\":\n    print(find_solution(1, 1, 5))\n    print(find_solution(1, 1, 4))\n    print(find_solution(1, 2, 4))\n    print(find_solution(1, 3, 4))\n    print(find_solution(2, 1, 5))\n    print(find_solution(2, 1, 4))\n    print(find_solution(2, 2, 4))\n    print(find_solution(2, 3, 4))\n    print(find_solution(3, 1, 5))\n    print(find_solution(3, 1, 4))\n    print(find_solution(3, 2, 4))\n    print(find_solution(3, 3, 4))"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        if (a * x + b) % n == 0:\n            return (x, y)\n        x += 1\n        y += 1\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = 0\n    a, b = min(a, b), max(a, b)\n    for i in range(a, b + 1):\n        if n % i == 0:\n            x = i\n            y = n//i\n            break\n    return (x, y) if x * y == n else None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    a = a % n\n    b = b % n\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a!= 0:\n        x = -(b / a)\n    else:\n        x = 0\n    if b!= 0:\n        y = -(a / b)\n    else:\n        y = 0\n    if x + y == n:\n        return (x, y)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(a, b + 1):\n        y = n / x\n        if x * y == n:\n            return x, y\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    if len(list1) > len(list2):\n        for x in range(0, len(list1)):\n            if list1[x] not in list2:\n                result.append(list1[x])\n    else:\n        for x in range(0, len(list2)):\n            if list2[x] not in list1:\n                result.append(list2[x])\n    return result\nprint(remove_elements([1,2,3,4,5,6], [2,5,6]))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = list()\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l = []\n    for x in list1:\n        if x not in list2:\n            l.append(x)\n    return l\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_elements = list(set(list1) - set(list2))\n    list1 = [x for x in list1 if x not in list1_elements]\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list2 = list(list2)\n    list1.sort()\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n    "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n <= 2:\n        return n\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n):\n        total += n - 2*i\n        if total > n:\n            return total\n        \ndef sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n):\n        total += n - 2*i\n        if total > n:\n            return total\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    if n <= 2:\n        sum = n\n    else:\n        while n > 0:\n            sum += n - 2\n            n = n // 2\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n -= 2\n    return n + (n-2) + (n-4) + (n-6) + (n-8) + (n-10)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    return n + (sum_series(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    return sum_series(n - 2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n // 2 + (n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_n = 0\n    n = abs(n)\n    for i in range(n):\n        sum_n += (n - 2*i)\n    return sum_n\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * pi * (s ** 2)) / 2\n    print(f'The area of the polygon is {area:.2f}')\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    side = l/s\n    area = 0.25 * pi * s * s\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(0, s):\n        area = (s*(s-1)*0.5) + (s*l*0.5)\n    print(area)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s) == 0 or len(l) == 0:\n        raise ValueError('Lengths or sides are not correct')\n    n = len(l)\n    area = (s[0] * s[1])/2 * tan(pi/n)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 0:\n        print('s has to be different from zero')\n        return -1\n    if l == 0:\n        print('l has to be different from zero')\n        return -1\n    if s == 1:\n        return 0.5 * pi * l ** 2\n    return (0.5 * pi * l ** 2) / (s - 2) + area_polygon(s - 1, l)\nprint(area_polygon(2, 3)"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (s - l)) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*s*l*(l-1))\n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*(r*r)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s*l)/(tan(pi/s)))**2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    perimeter = s * l\n    return (perimeter / 2) * tan(pi / s)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.add(i)\n            divs.add(n//i)\n    return True if len(divs) == 2 else False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n+1):\n        if n%i==0:\n            if i+n/i == n:\n                print('{} and {} are the same divisors'.format(i,n/i))\n            else:\n                print('{} and {} are not the same divisors'.format(i,n/i))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor(n):\n        if n == 0:\n            return 1\n        else:\n            return n + divisor(n-1)\n    return divisor(n) == divisor(n//2)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return (n * (n+1)) / 2 == sum([x for x in range(1, int(math.sqrt(n) + 1)) if n % x == 0])\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for x in range(1, n):\n        if n % x == 0:\n            divisors.append(x)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n    \ndef is_prime(n):\n    '''\n    Write a function to determine if the given number is a prime number or not.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        return True\n    else:\n        return False\n    \ndef is_triangle(n):\n    '''\n    Write a function to determine if the given number is a triangular number or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n == i + i:\n                return True\n            else:\n                return False\n    \ndef is_square(n):\n    '''\n    Write a function to determine if the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    square_root = math.sqrt(n)\n    return square_root.is_integer()\n    \ndef is_pentagonal(n):\n    '''\n    Write a function to determine if the given number is a pentagonal number or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        if n % 1 == 0:\n            return False\n        else:\n            pentagonal_number = (1/3) * (((1 + 5**.5)/2) + 1)\n            return n == pentagonal_number\n            \ndef is_hexagonal(n):\n    '''\n    Write a function to determine if the given number is a hexagonal number or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        if n % 1 == 0:\n            return False\n        else:\n            hexagonal_number = (1/2) * (((1 + 3**.5)/2) + 1)\n            return n == hexagonal_number\n            \ndef is_heptagonal(n):\n    '''\n    Write a function to determine if the given number is a heptagonal number or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        if n % 1 == 0:\n            return False\n        else:\n            heptagonal_number = (1/2) * (((1 + 5**.5)/2) + 1)\n            return n == heptagonal_number\n            \ndef is_octagonal(n):\n    '''\n    Write a function to determine if the given number is an octagonal number or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        if n % 1 == 0:\n            return False\n        else:\n            octagonal_number = (1/2) * (((1 + 3**.5)/2) + 1)\n            return n == octagonal_number\n            \ndef is_octagonal(n):\n    '''\n    Write a function to determine if the given number is a binary number or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        octagonal_number = (1/2) * (((1 + 3**.5)/2) + 1)\n        return n == octagonal_number\n        \ndef is_halogen(n):\n    '''\n    Write a function to determine if the given number is a halogen number or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        return True\n        \ndef is_abundant(n):\n    '''\n    Write a function to determine if the given number is an abundant number or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        for i in range(1, n):\n            if (n - i) % i == 0:\n                return False\n        return True\n        \ndef is_amicable(n):\n    '''\n    Write a function to determine if the given number is a amicable number or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        for i in range(1, n):\n            if n == i + (n - i) and i!= n:\n                return True\n            else:\n                return False\n                \ndef is_abundant(n):\n    '''\n    Write a function to determine if the given number is an abundant number or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        return True\n    \ndef is_abundant(n):\n    '''\n    Write a function to determine if the given number is an abundant number or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        for i in range(1, n):\n            if (n - i) % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    count = 1\n    while i < n:\n        if n%i == 0:\n            count += 1\n            if count > 2:\n                break\n        i += 1\n    return count == 2\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # start with divisor of n\n    # go to half of n \n    # check if each divisor of n is divisible by n//2\n    # if True, then the sum is not same, if False, then the sum is same\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if (n // 2) % i == 0:\n            if (n // 2) % (n // 2) == 0:\n                return False\n            else:\n                return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # The divisor list\n    div_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]\n    \n    # The sum of both numbers\n    sum_n = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_n = sum_n + i\n            \n    return sum_n == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = 1\n    a = 1\n    while div <= n:\n        if n % div == 0:\n            a = a + div\n        div = div + 1\n    if a == n:\n        print(\"%s and %s have the same sum of divisors\"%(a,n))\n    else:\n        print(\"%s and %s have different sums of divisors\"%(a,n))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_list = []\n    dividend = n\n    \n    # iterate through each divisor from 2 to sqrt(dividend)\n    # keep track of the divisor, add it to the list, \n    # and if it equals the divisor, return True\n    for i in range(2, int(math.sqrt(dividend)) + 1):\n        if dividend % i == 0:\n            divisor_list.append(i)\n            divisor_list.append(dividend//i)\n    if len(divisor_list) == 2:\n        return True\n    return False\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    from string import ascii_lowercase as alpha\n    \n    str1 = str1.lower()\n    count = {}\n    \n    for ch in str1:\n        count.setdefault(ch, 0)\n        count[ch] += 1\n    return sum(count.values())\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # first, remove spaces\n    str1 = str1.replace(' ', '')\n    \n    # set variables\n    result = 0\n    \n    # loop through each character\n    for char in str1:\n        \n        # define the character\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        \n        # increment if the same letter is found\n        if char.lower() in alphabet:\n            result += 1\n    \n    # return the result\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    def count_char_position_e(str1):\n        '''\n        Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n        '''\n        count = 0\n        for i in str1:\n            if i.lower() in ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'):\n                count += 1\n        return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Approach 1:\n    count = 0\n    for i in str1:\n        if i.lower() == chr(ord(i)):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_chars = 0\n    for i in range(len(str1)): \n        if str1[i].lower() in string.ascii_lowercase: \n            count_chars += 1\n    return count_chars\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #str1 = input()\n    char_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in char_dict:\n            char_dict[str1[i]] += 1\n        else:\n            char_dict[str1[i]] = 1\n    char_dict = sorted(char_dict.items(), key=lambda kv: (kv[0].upper(), kv[1]))\n    return char_dict\n    "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if (str1.count(str1[i].lower())==1):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    for i in range(len(str1)):\n        if str1[i] in count:\n            count[str1[i]] += 1\n        else:\n            count[str1[i]] = 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    alphabet_dict = {\n        'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0,\n        'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0\n    }\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(str1) - len(set(str1.lower()))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if A == []:\n        return 0\n    count = 0\n    for i in range(len(A)):\n        if A[i]&1 == 0 and A[i]&2 == 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for x in range(0,len(A)):\n        if x+1 == len(A):\n            break\n        if A[x] ^ A[x+1] == 0:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # YOUR CODE GOES HERE\n    if A==[]:\n        return 0\n    if A[0]%2==1:\n        return 0\n    count=0\n    for i in range(1,len(A)):\n        if A[i]%2==1:\n            continue\n        else:\n            count+=1\n            if A[i]^2==0:\n                return count\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    res = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1:\n                res += 1\n    return res\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] ^ A[j] == 0 and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # make a dictionary of all integers in A\n    # iterate through the dictionary, and add 1 to the count if that integer's xor is even.\n    # return the number of pairs that xor to an even number.\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                counter += 1\n    print(counter)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    hash_table = {}\n    for num in A:\n        if num in hash_table.keys():\n            hash_table[num] += 1\n        else:\n            hash_table[num] = 1\n    res = 0\n    for key,val in hash_table.items():\n        if val == 2:\n            res += 1\n    return res\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = n - 1\n    while (n > 0):\n        n = n - 1\n        if (n % 2 == 0):\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return (1 << (n.bit_length() - 1))\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # take 2^i and check till the number is greater than or equal to n\n    # if it is greater than or equal to n, then return the 2^i\n    \n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 = 2**power_of_2\n        if power_of_2 >= n:\n            return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = n + 1\n    while n!= 1: \n        n = n / 2\n    return int(n) \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n.bit_length() - 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        while (n and n & 1) == 0:\n            n >>= 1\n        return n << 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    while res <= n:\n        res = res << 1\n    return res\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while (n & (n - 1)) == 0:\n        n = n >> 1\n    return n\n    \nif __name__ == \"__main__\": \n    \n    n = 9\n    print(f'The smallest power of 2 greater than or equal to {n} is {next_power_of_2(n)}') \n    print(f'The largest power of 2 less than or equal to {n} is {next_power_of_2(n - 1)}'"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 0:\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    k = 0\n    while (1 << k) < n:\n        k += 1\n    return (1 << k)\n    \n    \n    \ndef find_longest_word_in_dictionary():\n    '''\n    Write a python function to find the longest word in the dictionary.\n    '''\n    my_dict = {}\n    with open('dictionary.txt') as dictionary:\n        for line in dictionary:\n            my_dict[line.rstrip()] = len(line)\n    max_length = 0\n    key = \"\"\n    for key in my_dict.keys():\n        if my_dict[key] > max_length:\n            max_length = my_dict[key]\n            key = key\n    print(key, max_length)\n    \n    \n    \ndef reverse_lookup():\n    '''\n    Write a python function to find the corresponding word given an integer.\n    '''\n    my_dict = {}\n    with open('dictionary.txt') as dictionary:\n        for line in dictionary:\n            word = line.rstrip()\n            my_dict[len(word)] = word\n    word_length = int(input(\"Enter the word length: \"))\n    if word_length in my_dict.keys():\n        print(my_dict[word_length])\n    else:\n        print(word_length, \"is not in dictionary\")\n    \n    \n    \ndef mapper():\n    '''\n    Write a python function to convert an integer to a binary number.\n    '''\n    n = input(\"Enter a number: \")\n    print(bin(int(n)))\n    \n    \n    \ndef is_divisible_by_four():\n    '''\n    Write a python function to find whether the given number is divisible by 4.\n    '''\n    n = int(input(\"Enter a number: \"))\n    if n % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n    \n    \ndef divisible_by_ten_or_twenty():\n    '''\n    Write a python function to find whether the given number is divisible by 10 or 20.\n    '''\n    n = int(input(\"Enter a number: \"))\n    if n % 10 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n    \n    \ndef sort_the_list_by_decreasing_alphabetical_order():\n    '''\n    Write a python function to sort the given list in ascending order by\n    decreasing the order of each element.\n    '''\n    my_list = []\n    n = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(n):\n        my_list.append(int(input(\"Enter the element: \")))\n    my_list.sort(reverse = True)\n    print(my_list)\n    \n    \n    \ndef find_the_occurrence_of_an_element_in_the_list():\n    '''\n    Write a python function to find the number of occurrences of the given element in the list.\n    '''\n    my_list = []\n    n = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(n):\n        my_list.append(int(input(\"Enter the element: \")))\n    element = int(input(\"Enter the element whose occurrences you want to find: \"))\n    count = 0\n    for i in my_list:\n        if i == element:\n            count += 1\n    print(\"The number of occurrences of the given element in the list is: \", count)\n    \n    \n    \ndef counting_sort_method():\n    '''\n    Write a python function to count the occurrences of each element in the given list.\n    '''\n    my_list = []\n    n = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(n):\n        my_list.append(int(input(\"Enter the element: \")))\n    max_element = max(my_list)\n    count = [0] * (max_element + 1)\n    for i in my_list:\n        count[i] += 1\n    print(count)\n    \n    \n    \ndef find_the_occurrence_of_an_element_in_the_list_with_no_duplicates():\n    '''\n    Write a python function to find the number of occurrences of the given element in the list.\n    '''\n    my_list = []\n    n = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(n):\n        my_list.append(int(input(\"Enter the element: \")))\n    element = int(input(\"Enter the element whose occurrences you want to find: \"))\n    count = 0\n    for i in my_list:\n        if i == element:\n            count += 1\n    print(\"The number of occurrences of the given element in the list is: \", count)\n    \n    \n    \ndef find_the_occurrence_of_an_element_in_the_list_with_duplicates():\n    '''\n    Write a python function to find the number of occurrences of the given element in the list.\n    '''\n    my_list = []\n    n = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(n):\n        my_list.append(int(input(\"Enter the element: \")))\n    element = int(input(\"Enter the element whose occurrences you want to find: \"))\n    count = 0\n    for i in my_list:\n        if i == element:\n            count += 1\n    print(\"The number of occurrences of the given element in the list is: \", count)\n    \n    \n    \ndef find_the_occurrence_of_an_element_in_the_list_with_no_duplicates_using_enumerate():\n    '''\n    Write a python function to find the number of occurrences of the given element in the list.\n    '''\n    my_list = []\n    n = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(n):\n        my_list.append(int(input(\"Enter the element: \")))\n    element = int(input(\"Enter the element whose occurrences you want to find: \"))\n    count = 0\n    for i, j in enumerate(my_list):\n        if j == element:\n            count += 1\n    print(\"The number of occurrences of the given element in the list is: \", count)\n    \n    \n    \ndef find_the_occurrence_of_an_element_in_the_list_with_duplicates_using_enumerate():\n    '''\n    Write a python function to find the number of occurrences of the given element in the list.\n    '''\n    my_list = []\n    n = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(n):\n        my_list.append(int(input(\"Enter the element: \")))\n    element = int(input(\"Enter the element whose occurrences you want to find: \"))\n    count = 0\n    for i, j in enumerate(my_list):\n        if j == element:\n            count += 1\n    print(\"The number of occurrences of the given element in the list is: \", count)\n    \n    \n    \ndef find_the_occurrence_of_an_element_in_the_list_with_duplicates_using_enumerate_with_index():\n    '''\n    Write a python function to find the number of occurrences of the given element in the list.\n    '''\n    my_list = []\n    n = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(n):\n        my_list.append(int(input(\"Enter the element: \")))\n    element = int(input(\"Enter the element whose occurrences you want to find: \"))\n    count = 0\n    for i, j in enumerate(my_list):\n        if j == element:\n            count += 1\n    print(\"The number of occurrences of the given element in the list is: \", count)\n    \n    \n    \ndef find_the_occurrence_of_an_element_in_the_list_with_duplicates_using_enumerate_with_index_and_index_check():\n    '''\n    Write a python function to find the number of occurrences of the give"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count=count+1\n    print(\"The number of occurrences of x in a is :\",count)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if(a[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n+1):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    for i in range(m, n + 1):\n        list1[i] = list1[i] + list1[i - 1]\n    return list1\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    print(\"The sum between indices\", m, \"and\", n, \"is\", sum)\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m-1:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if len(list1) == 0:\n        return 0\n    else:\n        if m > len(list1) or m < 0:\n            print(\"Index out of range\")\n        else:\n            for i in range(m, n+1):\n                sum += list1[i]\n        return sum\n        \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1)<m or len(list1)<n:\n        raise Exception(\"Not enough elements in the list\")\n    s=0\n    for i in range(m, n+1):\n        s+=list1[i]\n    return s\nprint(sum_range_list([1,2,3,4],1,3))\nprint(sum_range_list([1,2,3,4],2,4))\nprint(sum_range_list([1,2,3,4],3,4))\nprint(sum_range_list([1,2,3,4],0,1))\nprint(sum_range_list([1,2,3,4],1,0))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * math.sqrt(5)) + (a * 0.5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3*a**2)/2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5*(1+math.sqrt(5)))/2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5*(a**2))/4\n    return round(perimeter,2)\ndef is_pentagonal(a):\n    '''\n    Write a function that determines whether a number is a pentagonal number or not.\n    '''\n    return a == (1/5) * (1 + 5*math.sqrt(5))\ndef is_rectangular(a):\n    '''\n    Write a function that determines whether a number is a rectangular number or not.\n    '''\n    return a == math.sqrt(4*a**2)\ndef factorial(a):\n    '''\n    Write a function that takes in a positive integer and computes its factorial.\n    '''\n    if a == 0:\n        return 1\n    else:\n        return a*factorial(a-1)\ndef prime_factors(n):\n    '''\n    Write a function that takes in a positive integer and returns the prime factors of that number.\n    '''\n    factors = []\n    while n%2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i == 0:\n            factors.append(i)\n            n = n/i\n    if n > 2:\n        factors.append(n)\n    return factors\ndef prime_factors_rec(n):\n    '''\n    Write a function that takes in a positive integer and returns the prime factors of that number.\n    This function does NOT call the sqrt function.\n    '''\n    if n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        factors = []\n        for i in range(3,n,2):\n            if n%i == 0:\n                factors.append(i)\n        return factors + prime_factors_rec(n)\ndef is_square(n):\n    '''\n    Write a function that takes in a positive integer and returns True if that number is a perfect square, False otherwise.\n    '''\n    if n > 1:\n        temp = n\n        root = math.sqrt(n)\n        if temp == root*root:\n            return True\n        return False\n    return True\ndef k_to_n(n,k):\n    '''\n    Write a function that takes in two positive integers and returns their product, the nth term of the fibonacci sequence.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return k_to_n(n-1,k) + k_to_n(n-2,k)\ndef fib(n):\n    '''\n    Write a function that takes in a positive integer and returns the nth term of the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\ndef k_to_n_fib(n,k):\n    '''\n    Write a function that takes in two positive integers and returns their product, the nth term of the fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return k_to_n_fib(n-1,k) + k_to_n_fib(n-2,k)\ndef fact(n):\n    '''\n    Write a function that takes in a positive integer and returns its factorial.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*fact(n-1)\ndef fact_rec(n):\n    '''\n    Write a function that takes in a positive integer and returns its factorial.\n    This function does NOT call the sqrt function.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fact_rec(n-1) + fact_rec(n-2)\ndef prime_factors_rec_f(n):\n    '''\n    Write a function that takes in a positive integer and returns the prime factors of that number.\n    This function does NOT call the sqrt function.\n    '''\n    if n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        factors = []\n        for i in range(3,n,2):\n            if n%i == 0:\n                factors.append(i)\n        return factors + prime_factors_rec_f(n)\ndef all_palindromic_substrings(s):\n    '''\n    Write a function that takes in a string and returns all of the palindromic substrings of that string.\n    '''\n    length = len(s)\n    if length == 0:\n        return []\n    result = []\n    for i in range(length):\n        for j in range(i+1,length+1):\n            result.append(s[i:j])\n    return result\ndef palindrome_permutations(s):\n    '''\n    Write a function that takes in a string and returns all of the palindromic permutations of that string.\n    '''\n    if s == \"\":\n        return []\n    if len(s) == 1:\n        return [s]\n    else:\n        result = []\n        for i in range(len(s)):\n            for j in range(i,len(s)):\n                temp_string = s[i:j+1]\n                if temp_string == temp_string[::-1]:\n                    result.append(s[i:j+1])\n        return result\ndef palindrome_permutations_rec(s):\n    '''\n    Write a function that takes in a string and returns all of the palindromic permutations of that string.\n    '''\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    else:\n        result = []\n        for i in range(len(s)):\n            for j in range(i,len(s)):\n                temp_string = s[i:j+1]\n                if temp_string == temp_string[::-1]:\n                    result.append(s[i:j+1])\n        return result\ndef all_palindrome_substrings(s):\n    '''\n    Write a function that takes in a string and returns all of the palindrome substrings of that string.\n    '''\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    else:\n        result = []\n        for i in range(len(s)):\n            for j in range(i,len(s)):\n                temp_string = s[i:j+1]\n                if temp_string == temp_string[::-1]:\n                    result.append(temp_string)\n        return result\ndef palindrome_permutations_rec_f(s):\n    '''\n    Write a function that takes in a string and returns all of the palindrome permutations of that string.\n    '''\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    else:\n        result = []\n        for i in range(len(s)):\n            for j in range(i,len(s)):\n                temp_string = s[i:j+1]\n                if temp_string == temp_string[::-1]:\n                    result.append(s[i:j+1])\n        return result\ndef all_palindrome_substrings_rec(s):\n    '''\n    Write a function that takes in a string and returns all of the palindrome substrings of that string.\n    '''\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    else:\n        result = []\n        for i in range(len(s)):\n            for j in range(i,len(s)):\n                temp_string = s[i:j+1]\n                if temp_string == temp_string[::-1]:\n                    result.append(temp_string"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\ndef sides_of_pentagon(a):\n    '''\n    Write a function to find the number of sides in a pentagon.\n    '''\n    return 5\ndef area_of_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon.\n    '''\n    return a**2/4\ndef sides_of_triangle(a,b,c):\n    '''\n    Write a function to find the number of sides in a triangle.\n    '''\n    return a+b+c\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a+b+c\ndef sides_of_quadrilateral(a,b,c,d):\n    '''\n    Write a function to find the number of sides in a quadrilateral.\n    '''\n    return a+b+c+d\ndef area_of_quadrilateral(a,b,c,d):\n    '''\n    Write a function to find the area of a regular quadrilateral.\n    '''\n    return (a*b)*0.5\ndef sides_of_square(a,b,c,d):\n    '''\n    Write a function to find the number of sides in a square.\n    '''\n    return a+b+c+d\ndef area_of_square(a,b,c,d):\n    '''\n    Write a function to find the area of a regular square.\n    '''\n    return a*b\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*r\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*r**3/3\ndef area_of_cylinder(h,r):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*h*r\ndef volume_of_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return h*r**3\ndef area_of_cone(h,r,l):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return 2*math.pi*r*l+2*math.pi*r*h\ndef volume_of_cone(h,r,l):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return h*r*l\ndef perimeter_of_rectangle(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(w+h)\ndef area_of_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef area_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (a+b)*c/2+d\ndef volume_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return ((a+b)*c)/2+d\ndef perimeter_of_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    return 2*(a+c)\ndef area_of_parallelogram(a,b,c):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef perimeter_of_square_pyramid(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a square pyramid.\n    '''\n    return a+b+c+d\ndef area_of_square_pyramid(a,b,c,d):\n    '''\n    Write a function to find the area of a square pyramid.\n    '''\n    return a*b\ndef perimeter_of_parallogram(a,b,c,d,e):\n    '''\n    Write a function to find the perimeter of a parallogram.\n    '''\n    return a+b+c+d+e\ndef area_of_parallogram(a,b,c,d,e):\n    '''\n    Write a function to find the area of a parallogram.\n    '''\n    return a*b\ndef perimeter_of_trapezoid_pyramid(a,b,c,d,e):\n    '''\n    Write a function to find the perimeter of a trapezoid pyramid.\n    '''\n    return a+b+c+d+e\ndef area_of_trapezoid_pyramid(a,b,c,d,e):\n    '''\n    Write a function to find the area of a trapezoid pyramid.\n    '''\n    return a*b+b*c+c*d+d*e\ndef perimeter_of_pyramid(a,b,c,d,e):\n    '''\n    Write a function to find the perimeter of a pyramid.\n    '''\n    return a+b+c+d+e\ndef area_of_pyramid(a,b,c,d,e):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return a*b+b*c+c*d+d*e\ndef perimeter_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    return a+b+c+d\ndef area_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (a+b)*c/2\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return math.sqrt(a*b*c/2)\ndef perimeter_of_equilateral_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a equilateral triangle.\n    '''\n    return a+b+c\ndef area_of_equilateral_triangle(a,b,c):\n    '''\n    Write a function to find the area of a equilateral triangle.\n    '''\n    return a*b/2\ndef perimeter_of_incline_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of an incline triangle.\n    '''\n    return a+b+c\ndef area_of_incline_triangle(a,b,c):\n    '''\n    Write a function to find the area of an incline triangle.\n    '''\n    return (a*b)/2\ndef perimeter_of_inverted_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of an inverted triangle.\n    '''\n    return a+b+c\ndef area_of_inverted_triangle(a,b,c):\n    '''\n    Write a function to find the area of an inverted triangle.\n    '''\n    return math.sqrt((a+b)**2-a*c**2)\ndef perimeter_of_square_pyramid(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a square pyramid.\n    '''\n    return a+"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = a/2\n    return (s*(2*(s-math.sqrt(s**2+1)))-3*s+1)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    return a**2\n    \ndef area_triangle(b, h):\n    '''\n    Write a function to find the area of a triangle from its base and height.\n    '''\n    return (b*h)/2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = int(a**0.5)\n    if n % 2 == 0:\n        n += 1\n    s = a*(1 + (1+8*n)**0.5)/(4*n)\n    return round(s, 3)\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from its length of its sides.\n    '''\n    return a*a/4\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n    # Your code here\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5) + a\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count += 1\n        if i =='s':\n            count += 1\n        if i == 't':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:].find('std')!= -1:\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-len(std)+1):\n        if std in s[i:i+len(std)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in s:\n        if i=='s' or i=='d' or i=='t':\n            count+=1\n    print(count)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = s.count('std')\n    print(occurance)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occ = 0\n    i = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            occ += 1\n    return occ\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurence = 0\n    for i in range(len(s)-2):\n        if s[i:i+3]=='std':\n            occurence+=1\n    return occurence\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_check = False\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == type(test_tuple[0]):\n            type_check = True\n        else:\n            type_check = False\n            break\n    return type_check\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    d = {}\n    for item in test_tuple:\n        if item in d.keys():\n            if type(d[item])!= type(item):\n                return False\n        else:\n            d[item] = type(item)\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(item, int) for item in test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    flag = 1\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is not int:\n            flag = 0\n            print(f'The tuple {test_tuple} has the elements of different types')\n    if flag == 1:\n        print(f'The tuple {test_tuple} has all elements of the same type')\n    return flag\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        print(\"0 is not a valid tuple\")\n        return False\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is not type(test_tuple[0]):\n            print(\"All the elements in the tuple must be same data type\")\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    dtype = test_tuple[0].dtype\n    for i in test_tuple:\n        if i.dtype!= dtype:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 2:\n        return False\n    for i in range(len(test_tuple)-1):\n        if not isinstance(test_tuple[i], type(test_tuple[i+1])):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set()\n    for item in test_tuple:\n        types.add(type(item))\n    if len(types) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    if isinstance(test_tuple[0], int) or isinstance(test_tuple[0], float) or isinstance(test_tuple[0], str):\n        if all(isinstance(i, type(test_tuple[0])) for i in test_tuple):\n            return True\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], type(test_tuple[0])):\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return x == arr[0]\n    if arr[0] == x:\n        return True\n    if arr[-1] == x:\n        return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in arr:\n        if i == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        if arr[0] == x:\n            return True\n        else:\n            return False\n    if x == arr[n//2]:\n        return True\n    elif x == arr[n//2 - 1]:\n        return True\n    elif x == arr[n//2 + 1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr = sorted(arr)\n    len = n//2\n    return (arr[len] == x)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if x is not in the array, return False\n    if n == 0:\n        return False\n    # if there is only 1 element, return True\n    if n == 1:\n        return True\n    # if the element is equal to the middle element, return False\n    if arr[n//2] == x:\n        return False\n    # if x is not equal to the middle element, check if x is greater than the middle element and is also equal to the next element\n    if x > arr[n//2] and x == arr[n//2+1]:\n        return True\n    # if x is less than the middle element and not equal to the next element, check if x is greater than the middle element and is also equal to the next element\n    if x > arr[n//2] and x!= arr[n//2+1]:\n        return True\n    # if x is less than the middle element and not equal to the next element, check if x is less than the middle element and is also equal to the previous element\n    if x < arr[n//2] and x == arr[n//2-1]:\n        return True\n    # if x is less than the middle element and not equal to the previous element, check if x is less than the middle element and is also equal to the previous element\n    if x < arr[n//2] and x!= arr[n//2-1]:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n == 1:\n        if arr[0] == x:\n            return True\n        else:\n            return False\n    \n    if arr[0] == x:\n        return True\n    \n    if arr[n-1] == x:\n        return True\n    \n    #check if there is a majority\n    #if not, return False\n    if (arr[int(n/2)] == x) or (arr[int(n/2)-1] == x):\n        return True\n    \n    return False\n    "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return x in arr[:n//2]\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += 1\n        n &= (n - 1) #n = n & (n-1)\n    return count\n    \nprint(count_Set_Bits(1000)) \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    while n!= 0:\n        res += 1\n        n = n & (n-1) # check if the set bit is 1\n    return res\n    \nif __name__ == '__main__':\n    n = 50\n    print('The number of set bits are:', count_Set_Bits(n))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    print(\"\\nCounting number of set bits in the number %d: \"%n)\n    count = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            count += 1\n    print(\"Number of set bits in the number %d is: \"%n, count)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n:\n        count+=1\n        n>>=1\n    return count\nn = int(input())\nprint(count_Set_Bits(n))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c=0\n    while n:\n        c+=n&1\n        n=n>>1\n    return c\ndef count_Set_Bits_optimized(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\ndef find_missing_number(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    b=1\n    for i in range(2,n):\n        b^=i\n    return b\ndef find_missing_number_optimized(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    b=1\n    while n:\n        n=n&(n-1)\n        b^=b\n    return b\ndef find_missing_number_optimized_1(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x=0\n    while n:\n        x^=n\n        n=n&(n-1)\n    return x\ndef find_missing_number_optimized_2(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    n=x=0\n    while n:\n        x^=n\n        n=n&(n-1)\n    return x^n\ndef find_missing_number_optimized_3(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=n&(n-1)\n    return x^y\ndef find_missing_number_optimized_4(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_5(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_6(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_7(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_8(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_9(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_10(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_11(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_12(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_13(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_14(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_15(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_16(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_17(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_18(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_19(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_20(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_21(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,y=0,1\n    while n:\n        x^=n\n        y=(y<<1)\n        n=(n<<1)^x\n    return x^y\ndef find_missing_number_optimized_22(n):\n    '''\n    Write a python function to find the missing number in a list of integers.\n    '''\n    x,"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = bin(n)[2:]\n    count = 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count\n    \nif __name__ == '__main__': \n    print(count_Set_Bits(77)) \n    print(count_Set_Bits(9)) \n    print(count_Set_Bits(12)) \n    print(count_Set_Bits(53)) \n    print(count_Set_Bits(13)) \n    print(count_Set_Bits(100)) \n    print(count_Set_Bits(11)) \n    print(count_Set_Bits(22)) \n    print(count_Set_Bits(100)) \n    print(count_Set_Bits(5)) \n    print(count_Set_Bits(8)) \n    print(count_Set_Bits(4)) \n    print(count_Set_Bits(1)) \n    print(count_Set_Bits(9)) "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        n = n & (n-1)\n        count = count + 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.replace(\" \", \"\")\n    str = str.replace(\"\\n\", \"\")\n    str = str.split(\",\")\n    for i in range(len(str)):\n        if (int(i)%2!= 0):\n            str.pop(i)\n    return \", \".join(str)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for index,char in enumerate(str) if index % 2 == 0])\n    # O(N) Time | O(1) Space\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.replace(' ', '')\n    return str[0::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = str[::2]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in range(0,len(str)):\n        if i%2 == 0:\n            lst.append(str[i])\n    return \"\".join(lst)\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # str = input(\"Enter the string :\")\n    # print(\"Entered string :\",str)\n    # str = str.replace(\" \", \"\")\n    # print(\"Replace space with nothing : \",str)\n    # print(\"Replace space :\",str.replace(\" \",\"\"))\n    # print(\"Replace space :\",str.replace(\" \", \"\").replace(\" \",\"\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(str[1::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    print(new_str)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    myList = list(str)\n    newList = []\n    for i in range(len(myList)):\n        if i % 2 == 0:\n            newList.append(myList[i])\n    return ''.join(newList)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    elif b<a:\n        if b<c:\n            return b\n        else:\n            return c\n    else:\n        if c<a:\n            return a\n        else:\n            return c\nprint(min_of_three(4,3,1))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\nprint(min_of_three(5,2,9))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        if b<c:\n            return b\n        else:\n            return c\n    else:\n        if b<c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \nprint(min_of_three(10,5,2))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    if b < a and b < c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        count = 0\n        while n:\n            n = n >> 1\n            count += 1\n        if count == r:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if i % 2 == 0:\n            continue\n        else:\n            print(\"The given number is not a given number.\")\n            exit()\n    print(\"All the bits are set in the given range.\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s=0\n    for i in range(l,r+1):\n        s=s^i\n    return s\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit_set = False\n    # for i in range(n):\n    #     l = i\n    #     r = i\n    for i in range(n):\n        l = i\n        r = i + n\n        for j in range(l,r):\n            if(j in range(n) and (j+1) in range(n)):\n                bit_set = True\n                break\n            else:\n                bit_set = False\n    if(bit_set):\n        print('No. of Bits Set in the range are: ',r - l, '-',l)\n    else:\n        print('No. of Bits Set in the range are: ',r - l, '-',l)\n    return bit_set\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    arr = list(range(l,r))\n    for i in arr:\n        if(n&i):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    while(n>>count) & 1 == 0:\n        count = count + 1\n    return count == n.bit_length()\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < n and l <= r:\n        for i in range(l,r+1):\n            if not (i & i-1):\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(x == 0 for x in range(l,r+1))\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bin_n=bin(n)[2:]\n    bin_l=bin(l)[2:]\n    bin_r=bin(r)[2:]\n    set_bin_l=0\n    set_bin_r=0\n    for i in bin_n:\n        if(i=='1'):\n            set_bin_l=1\n            break\n    for i in bin_l:\n        if(i=='1'):\n            set_bin_l=1\n            break\n    for i in bin_r:\n        if(i=='1'):\n            set_bin_r=1\n            break\n    for i in bin_r:\n        if(i=='1'):\n            set_bin_r=1\n            break\n    if(set_bin_r==1):\n        print(\"All bits are set in the given range\")\n    else:\n        print(\"No bits are set in the given range\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n - (r - l) ) % 2!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr[:] = sorted(arr[:n]) + sorted(arr[n:], reverse=True)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives, positives = 0, 0\n    i = 0\n    while i < len(arr):\n        if arr[i] < 0:\n            negatives += 1\n        else:\n            positives += 1\n        i += 1\n    if negatives!= 0:\n        while negatives > 0:\n            arr.append(-1)\n            negatives -= 1\n    while positives > 0:\n        arr.append(1)\n        positives -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #loop until n times\n    for i in range(n):\n        #check if there is a negative element\n        if arr[i] < 0:\n            #loop until you find the first positive element\n            j = i\n            while(arr[j] < 0 and j < n - 1):\n                #swap the elements\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                #move j to next index\n                j += 1\n            #check if there are still positive elements\n            if j < n - 1:\n                #swap the first positive element\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                #swap the negative element\n                arr[i], arr[j] = arr[j], arr[i]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the negative numbers to the left of positive numbers\n    neg = arr[:n]\n    pos = arr[n:]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0,n):\n        while arr[i]<0:\n            if i==0:\n                arr.insert(i,arr.pop(i+1))\n                return arr\n            else:\n                arr.insert(i,arr.pop(i-1))\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0,n):\n        for j in range(i+1,n+1):\n            if arr[j]<0:\n                arr[i],arr[j]=arr[j],arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return arr\n    i = 0\n    while i < n:\n        if arr[i] > 0:\n            break\n        i += 1\n    if i == n:\n        return arr\n    j = n - 1\n    while j > 0:\n        if arr[j] < 0:\n            break\n        j -= 1\n    if j == 0:\n        return arr\n    if i < j:\n        for k in range(i, j + 1):\n            temp = arr[k]\n            arr[k] = arr[j]\n            arr[j] = temp\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # print(arr)\n    # print(n)\n    # print(len(arr))\n    # print(n % len(arr))\n    re_arranged_array = arr[n:] + arr[:n]\n    # print(re_arranged_array)\n    # for i in range(n):\n    #     re_arranged_array.insert(i, arr[i])\n    # return re_arranged_array\n    # arr = re_arranged_array\n    # print(arr)\n    return re_arranged_array\n    # for i in range(n):\n    #     arr = re_arranged_array.pop(i)\n    #     # print(arr)\n    #     re_arranged_array.insert(i, arr)\n    # return re_arranged_array\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        while i < len(arr) and arr[i] < 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            i += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # if (arr[:n] == sorted(arr[:n])):\n    #     return arr\n    # else:\n    #     return arr[:n] + sorted(arr[n:])\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=\"\"\n    for i in range(len(str1)):\n        if str1[i]==\" \":\n            str2+=\"{}\".format(char)\n        else:\n            str2+=str1[i]\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    str3 = \"\"\n    for i in str1:\n        if i!='':\n            str2 = str2 + i\n        else:\n            str3 = str3 + char\n    return str2 + str3\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1\n    \n    "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','{}'.format(char))\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1.replace(\"\",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    str1 = str1.replace(\" \",\"\")\n    return(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",char)\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(' ','_')\n    return new_str.replace('_',' ')\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return [x[0] for x in heap]\ndef larg_nnum_new_2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_9(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_10(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_11(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_12(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_13(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_14(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_15(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_16(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if i >= n:\n            heapq.heappop(heap)\n    return heap\ndef larg_nnum_new_17(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n    "
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = heapq.nlargest(n,list1)\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n    "
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest_n = heapq.nlargest(n,list1)\n    return largest_n\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def get_max(list):\n        max_index = 0\n        max = list[0]\n        for i in range(len(list)):\n            if max<list[i]:\n                max_index = i\n                max = list[i]\n        return max_index\n    list_max = []\n    heapq.heapify(list1)\n    for i in range(n):\n        list_max.append(heapq.heappop(list1))\n    return list_max\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result = []\n    for i in range(n):\n        result.append(list1[0])\n        del list1[0]\n        heapq.heapify(list1)\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)>n:\n        return list1[n:]\n    else:\n        return list1\n    \ndef larg_nnum1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Approach 1 - using heapq module\n    return heapq.nlargest(n, list1)\n    \ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Approach 2 - using heapq module\n    # using minheap\n    # return heapq.nlargest(n, list1, key=lambda x: x[0])\n    # using maxheap\n    return heapq.nlargest(n, list1, key=lambda x: -x[0])\n    \ndef swap_values(my_dict, swap_key, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    my_dict[swap_key] = swap_value\n    \ndef swap_values2(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 1 - using dict\n    # this can be easily done using dict\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values3(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 2 - using dict\n    # this can be easily done using dict\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values4(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 3 - using dict\n    # this can be easily done using dict\n    # using list\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using set\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using dict comprehension\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values5(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 4 - using dict\n    # this can be easily done using dict\n    # using list\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using set\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using dict comprehension\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values6(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 5 - using dict\n    # this can be easily done using dict\n    # using list\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using set\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using dict comprehension\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values7(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 6 - using dict\n    # this can be easily done using dict\n    # using list\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using set\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using dict comprehension\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values8(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 7 - using dict\n    # this can be easily done using dict\n    # using list\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using set\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using dict comprehension\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values9(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 8 - using dict\n    # this can be easily done using dict\n    # using list\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using set\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using dict comprehension\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values10(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 9 - using dict\n    # this can be easily done using dict\n    # using list\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using set\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using dict comprehension\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    \ndef swap_values11(my_dict, swap_key1, swap_key2, swap_value):\n    '''\n    Write a function that takes in a dictionary and two keys, and swaps the values of those two keys in the dictionary.\n    '''\n    # Approach 10 - using dict\n    # this can be easily done using dict\n    # using list\n    my_dict[swap_key1] = swap_value\n    my_dict[swap_key2] = swap_value\n    # using set\n    my_dict[swap_key1] = swap_value\n    my_dict[swap"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #pq = []\n    #for i in range(n):\n    #    heapq.heappush(pq,(list1[i],i))\n    #return[heapq.heappop(pq)[1]]\n    #return sorted(list1,reverse=True)[:n]\n    #return sorted(list1,reverse=True)[:n]\n    q = []\n    for i in range(n):\n        heapq.heappush(q,(list1[i],i))\n    res = []\n    while q:\n        item,index = heapq.heappop(q)\n        res.append(item)\n    return res\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    count = 0\n    for i in range(len(list1)-1):\n        if count < n:\n            count += 1\n        else:\n            break\n    return list1[:count]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if h==0:\n        return 0\n    else:\n        return (pi*r**2)/2\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    cylinder_area=2*pi*r*h+2*pi*r**2\n    return cylinder_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    l = np.sqrt(2*np.pi*r**2)\n    h_half = h/2\n    if r == 0:\n        return 0\n    else:\n        return (2*np.pi*r**2*h_half*l)+(2*np.pi*r**2*(h-h_half)*l)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    R = r\n    D = h\n    H = R * math.pi\n    return (2 * math.pi * R * D ) + (2 * math.pi * R * D ) - (2 * H )\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = PI*r**2\n    volume = PI*r*r*h\n    return (area,volume)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    h = h\n    r = r\n    return pi*h*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    area = math.pi * r**2 + h * math.pi * r\n    print(area)\n    "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r == 0:\n        return 0\n    else:\n        return 2*pi*(r**2 + h**2)/3\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    radius = r\n    height = h\n    if radius == 0:\n        radius = 0.001\n    pi = 3.14159265359\n    surface_area = (pi*radius**2) + ((2*pi*radius*height) + (2*pi*radius))\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate surface area of the cylinder\n    def surface_area(r,h):\n        return 2 * math.pi * r * (r + h)\n    # Calculate lateral surface area\n    lateralsurface = surface_area(r,h)\n    # Return lateral surface area\n    return lateralsurface\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print('Input Length')\n    l = float(input())\n    print('Input Side Length')\n    s = float(input())\n    print('Volume of Cube', s ** 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l*l*l)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 1/3 * l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return(3**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if not isinstance(l, (int, float)):\n        raise TypeError('Side length must be a number.')\n    if l <= 0:\n        raise ValueError('Side length must be a positive number')\n    else:\n        print(f'The cube volume is {l**3}')\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 6 * l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 1\n    elif n % 2 == 0: \n        return even_bit_set_number(n / 2) << 1\n    else: \n        return even_bit_set_number((n - 1) / 2) << 1 | even_bit_set_number((n - 1) / 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = n & (~n + 1)\n    return b \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        n = -n\n    n = 1 << n.bit_length() \n    return n - n >> 1\n    \n    \ndef even_bit_clear_number(n):\n    '''\n    Write a python function to clear all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        n = -n\n    return n & (n - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = ~0\n    while n:\n        n = n & mask\n        n = n + 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    #result = n\n    #n = n | (n << 1)\n    #n = n + 1\n    #n = (n & 0b111111)\n    #n = (n << 1)\n    #return result & 0b11111\n    \n    return (n | (n << 1)) & 0b111111\n    \ndef even_bit_set_number_alternative(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = n\n    while (n & 0b1)!= 0:\n        n = (n << 1)\n        n = n & 0b11111111\n        result = result | n\n    return result\n    \ndef even_bit_set_number_alternative_2(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = (n << 1) & 0b111111\n    return n\n    \ndef even_bit_set_number_alternative_3(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = (n << 1)\n    n = (n & 0b11111111)\n    return n\n    \ndef even_bit_set_number_alternative_4(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0b111111)\n    \ndef even_bit_set_number_alternative_5(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n << 1) & 0b111111\n    \ndef even_bit_set_number_alternative_6(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0b111111\n    return n << 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n << 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return n\n    n = n >> 1\n    if n!= 0:\n        return even_bit_set_number(n)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Even bit set means 0, odd bit set means 1\n    res = n ^ (n >> 1)\n    return res\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    # x = x | (x - 1)\n    return n | (n >> 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n | n & -n\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & (n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & (n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Python-bitwise operator\n    # Even bit set means 0, odd bit set means 1\n    return n & ~(n - 1)\n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n << 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # if n==0:\n    #     return 0\n    # # elif n==1:\n    # #     return 1\n    # else:\n    #     return n | (n-1)\n    return n | (n-1)\n    \ndef hamming_weight(n):\n    '''\n    Write a python function to find hamming weight of a given number\n    '''\n    # # if n == 0:\n    # #     return 0\n    # # elif n == 1:\n    # #     return 0\n    # else:\n    #     return n & (n-1)\n    return n & (n-1)\n    \ndef hamming_number(n):\n    '''\n    Write a python function to find Hamming number of a given number\n    '''\n    return n - hamming_weight(n)\n    \ndef hamming_distance(n1, n2):\n    '''\n    Write a python function to find hamming distance between 2 numbers\n    '''\n    if n1 == n2:\n        return 0\n    else:\n        return 1\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of squares of a given array\n    '''\n    # if len(n) == 0:\n    #     return 0\n    # else:\n    #     s = sum(i*i for i in n)\n    #     return s\n    return sum(i*i for i in n)\n    \ndef sum_of_even_squares(n):\n    '''\n    Write a python function to find the sum of squares of even numbers in an array\n    '''\n    return sum(i*i for i in n if i%2 == 0)\n    \ndef sum_of_odd_squares(n):\n    '''\n    Write a python function to find the sum of squares of odd numbers in an array\n    '''\n    return sum(i*i for i in n if i%2!= 0)\n    \ndef sum_of_odd_even_squares(n):\n    '''\n    Write a python function to find the sum of squares of odd and even numbers in an array\n    '''\n    return sum(n[i]*n[i+1] for i in range(0,len(n)-1,2))\n    \ndef sum_of_negative_numbers(n):\n    '''\n    Write a python function to find the sum of negative numbers in an array\n    '''\n    # if len(n) == 0:\n    #     return 0\n    # else:\n    #     s = sum(n[i] for i in range(len(n)) if n[i] < 0)\n    #     return s\n    return sum(n if n < 0 else 0)\n    \ndef sum_of_negative_odd_numbers(n):\n    '''\n    Write a python function to find the sum of negative odd numbers in an array\n    '''\n    return sum(n[i] for i in range(len(n)) if n[i] < 0 and (n[i]%2)!= 0)\n    \ndef sum_of_negative_even_numbers(n):\n    '''\n    Write a python function to find the sum of negative even numbers in an array\n    '''\n    return sum(n[i] for i in range(len(n)) if n[i] < 0 and (n[i]%2) == 0)\n    \ndef sum_of_number(n):\n    '''\n    Write a python function to find the sum of numbers in an array\n    '''\n    # if len(n) == 0:\n    #     return 0\n    # else:\n    #     s = sum(n)\n    #     return s\n    return sum(n)\n    \ndef sum_of_elements(n):\n    '''\n    Write a python function to find the sum of elements in an array\n    '''\n    # if len(n) == 0:\n    #     return 0\n    # else:\n    #     s = 0\n    #     for i in range(len(n)):\n    #         s += n[i]\n    #     return s\n    return sum(n)\n    \ndef sum_of_sorted_arrays(n):\n    '''\n    Write a python function to find the sum of sorted numbers in an array\n    '''\n    # if len(n) == 0:\n    #     return 0\n    # else:\n    #     n = sorted(n)\n    #     s = sum(n)\n    #     return s\n    return sum(sorted(n))\n    \ndef sum_of_reversed_sorted_arrays(n):\n    '''\n    Write a python function to find the sum of reversed sorted numbers in an array\n    '''\n    # if len(n) == 0:\n    #     return 0\n    # else:\n    #     n = sorted(n)\n    #     s = sum(reversed(n))\n    return sum(sorted(n)[::-1])\n    \ndef sum_of_sublists(n):\n    '''\n    Write a python function to find the sum of a list of sublists\n    '''\n    # if len(n) == 0:\n    #     return 0\n    # else:\n    #     s = sum(sum(i) for i in n)\n    #     return s\n    return sum(sum(i) for i in n)\n    \ndef sum_of_sub_arrays(n):\n    '''\n    Write a python function to find the sum of all sub-arrays\n    '''\n    if len(n) == 0:\n        return 0\n    else:\n        s = 0\n        for i in range(len(n)):\n            s += sum(n[i:])\n        return s\n    \ndef sum_of_sub_arrays_with_duplicates(n):\n    '''\n    Write a python function to find the sum of all sub-arrays with duplicate elements\n    '''\n    if len(n) == 0:\n        return 0\n    else:\n        s = 0\n        for i in range(len(n)):\n            s += sum(n[i:])\n        return s\n        \ndef sum_of_sub_arrays_with_duplicates_2(n):\n    '''\n    Write a python function to find the sum of all sub-arrays with duplicate elements\n    '''\n    if len(n) == 0:\n        return 0\n    else:\n        s = 0\n        for i in range(len(n)):\n            s += sum(n[i:])\n        return s\n    \ndef sum_of_sub_arrays_with_duplicates_3(n):\n    '''\n    Write a python function to find the sum of all sub-arrays with duplicate elements\n    '''\n    if len(n) == 0:\n        return 0\n    else:\n        s = 0\n        for i in range(len(n)):\n            s += sum(n[i:])\n        return s\n    \ndef find_maximum_logn(n):\n    '''\n    Write a python function to find the maximum value in a logn array\n    '''\n    # if len(n) == 0:\n    #     return 0\n    # else:\n    #     if len(n) == 1:\n    #         return n[0]\n    #     else:\n    #         half = len(n)//2\n    #         l = find_maximum_logn(n[:half])\n    #         r = find_maximum_logn(n[half:])\n    #         return max(l,r)\n    return max(n[i::2] for i in range(1, len(n)-1, 2))\n    \ndef find_maximum_logn_2(n):\n    '''\n    Write a python function to find the maximum value in a logn array\n    '''\n    if len(n) == 0:\n        return 0\n    else:\n        if len(n) == 1:\n            return n[0]\n        else:\n            return max(find_maximum_logn_2(n[i::2]) for i in range(1, len(n)-1, 2))\n    \ndef find_maximum_"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    new_dict = dict()\n    \n    for i in range(len(test_list)):\n        val = test_list[i]\n        if val in new_dict.keys():\n            new_dict[val] = new_dict.get(val) + 1\n        else:\n            new_dict[val] = 1\n    return new_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique = []\n    for item in test_list:\n        if item not in unique:\n            unique.append(item)\n    freq = dict.fromkeys(unique, 0)\n    for item in test_list:\n        freq[item] += 1\n    return freq\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counter = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] not in test_dict:\n                    test_dict[test_list[i]] = 1\n                else:\n                    test_dict[test_list[i]] += 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    a = Counter(test_list)\n    print(a)\n    return a\n    # >>> Counter({('a', 'a'): 2, ('a', 'b'): 1, ('b', 'b'): 1, ('b', 'c'): 1, ('c', 'c'): 1, ('d', 'd'): 1, ('d', 'e'): 1, ('e', 'e'): 1})\n    \n    \ndef better_check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    a = dict()\n    for i in test_list:\n        if i in a.keys():\n            a[i] += 1\n        else:\n            a[i] = 1\n    print(a)\n    return a\n    # >>> Counter({('a', 'a'): 2, ('a', 'b'): 1, ('b', 'b'): 1, ('b', 'c'): 1, ('c', 'c'): 1, ('d', 'd'): 1, ('d', 'e'): 1, ('e', 'e'): 1})\n    \n    \n    \ndef check_mapped(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to a list of all the tuples that map to that tuple.\n    '''\n    a = dict()\n    for i in test_list:\n        if i in a.keys():\n            a[i].append(i)\n        else:\n            a[i] = [i]\n    print(a)\n    return a\n    # >>> {('a',): [('a',), ('a',)], ('a', 'b'): [('a',), ('a',)], ('a', 'c'): [('a',), ('a',)], ('a', 'd'): [('a',), ('a',)], ('a', 'e'): [('a',), ('a',)], ('b',): [('a',), ('a',), ('a',)], ('b', 'c'): [('a',), ('a',), ('a',)], ('b', 'd'): [('a',), ('a',), ('a',)], ('b', 'e'): [('a',), ('a',), ('a',)], ('c',): [('a',), ('a',)], ('c', 'd'): [('a',), ('a',)], ('c', 'e'): [('a',), ('a',)], ('d',): [('a',), ('a',), ('a',)], ('d', 'e'): [('a',), ('a',), ('a',)], ('e',): [('a',), ('a',)], ('e', 'f'): [('a',), ('a',)]}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for i in test_list:\n        occurences_dict[i] = occurences_dict.get(i,0) + 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tuple_occur_map = {}\n    for test in test_list:\n        if test in tuple_occur_map:\n            tuple_occur_map[test] += 1\n        else:\n            tuple_occur_map[test] = 1\n    return tuple_occur_map\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for el in test_list:\n        if el in occurences:\n            occurences[el] += 1\n        else:\n            occurences[el] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for item in test_list:\n        if item in dictionary.keys():\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = dict()\n    for x in test_list:\n        my_dict[x] = my_dict.get(x,0)+1\n    return my_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return sum(str.count(c) for c in str) \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    total = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if str[i:j]!= \"\":\n                total += 1\n    return total\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1])>=5:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    print(count)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j == i:\n                continue\n            ans += 1\n            if str[i:j+1] == \"\":\n                break\n    return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= '':\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # create an empty list\n    lists = []\n    # initialize the value of count to be 0\n    count = 0\n    # Iterate over the list \n    for i in range(n):\n        for j in range(i+1):\n            lists.append(m)\n        count += 1\n        if lists[i] == m:\n            print(\"there are {} number of sequence\".format(count))\n            lists = []\n            count = 0\n        else:\n            print(\"current list {}\".format(lists))\n            lists = []\n            count = 0\n            break\n    return None\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    print(\"Output is {}\".format(np.arange(m,n+1,2)**2))\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.arange(m,n+1,2)**2)\n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    m = int(m)\n    n = int(n)\n    print(np.a"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from functools import reduce\n    def helper(a,b,c):\n        return (a+b)*c\n    return reduce(helper, range(n,2,-1), 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 1\n    for num in range(m, m-n, -1):\n        result *= num\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 1:\n        return 1\n    return (m * get_total_number_of_sequences(m-1,n))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def possible_sequence(m,n): \n        '''\n        Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n        '''\n        if n == 0: \n            return 1\n        else: \n            return sum([possible_sequence(m,n-1)])\n    return possible_sequence(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def sum_of_multiples_of_n(n):\n      return sum(x for x in range(2, n) if x % n == 0)\n    \n    def num_of_multiples_of_2_to_n(n):\n      return sum(x for x in range(2, n) if x % 2 == 0)\n    \n    def get_num_of_multiples_of_n_to_m(m,n):\n      #print(sum_of_multiples_of_n(n))\n      return sum_of_multiples_of_n(n) - num_of_multiples_of_2_to_n(n) + num_of_multiples_of_2_to_n(m-n)\n    \n    return get_num_of_multiples_of_n_to_m(m,n)\n    \n    #m = 5\n    #n = 5\n    #def get_num_of_multiples_of_n_to_m(m,n):\n    #  result = 0\n    #  for i in range(1,m+1):\n    #    result += (i*n)\n    #  return result\n    #print(get_num_of_multiples_of_n_to_m(m,n))\n    #return result\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    while m <= 2 * n:\n        count += 1\n        m += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #create a list of all possible sequences of length n, where each element is between 0 and m\n    seq = list(range(m+1))\n    #initialize total number of sequences to 0\n    total = 0\n    #iterate through the list of sequences\n    for i in range(len(seq)-1):\n        #increment total by 1\n        total += 1\n        #find the sequence which has the greatest difference between the next two elements in the sequence\n        #do this by reducing the previous element by 1, and increasing the next element by 1\n        j = i + 1\n        while j <= len(seq) - 1:\n            diff = seq[j] - seq[j-1]\n            if diff >= 0 and diff <= m:\n                seq[j] -= 1\n                break\n            j += 1\n    #return total\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize count to zero.\n    count = 0\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if(len(list1)==0):\n        list1.append(list2)\n    else:\n        list1.append(list2[-1])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # If list2 is empty\n    if not list2:\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    new_list.append(list2)\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\nprint(replace_list([1,2,3,4],[7,8,9,10])"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # check if str is empty\n    if str1 == '':\n        return 0\n    # get the length of the string\n    n = len(str1)\n    # get a character\n    s = str1[0]\n    # count the characters\n    count = 1\n    for i in range(1, n):\n        # if characters are different, add to the count\n        if str1[i]!= s:\n            count += 1\n            s = str1[i]\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(str1)):\n        count += 1\n    \n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for c in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    print('Total Characters in this string are:',count)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N<=0):\n        return 0\n    square_root = math.ceil(math.sqrt(N))\n    return square_root*square_root\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = N * 2\n    while square**2 > N:\n        square = square - 1\n    if square**2 == N:\n        square = square - 1\n    return square\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:\n        N = N + 1\n        while N > 1:\n            N = N - 1\n            if (N * N) > N:\n                return N\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N*N, 0, -1):\n        if (i*i) > N:\n            return i*i\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 1):\n        return N+1\n    if(N == 2):\n        return N+2\n    for i in range(1, N//2+1):\n        if(N - i*i == 1):\n            return N-i+1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while True:\n        if (i * i) > N:\n            return i * i\n        i += 1\n        \nprint(next_Perfect_Square(10))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    \n    # Continue till we are at a square number\n    while N > 0:\n        \n        # We are finding the next perfect square\n        N = N + 1\n        \n        # If the square is not perfect, then try to make the square perfect by adding 1 to the previous square\n        if N**2!= N:\n            N = N - 1\n            \n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # O(1) \n    if N == 1:\n        return 2\n    while (N + 1)**2 <= N:\n        N += 1\n    return N + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Repeated squaring \n    while not (is_square(N)): \n        N = N*N  \n    return N \n    \ndef is_square(N): \n    return int(math.sqrt(N))*int(math.sqrt(N)) == N \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N=int(N)\n    i=int(math.sqrt(N))\n    j=i+1\n    k=i+2\n    l=i+3\n    while(i*i<N):\n        if (k*k)>N:\n            break\n        i=j\n        j=k\n        k=l\n        l=i+1\n    return i*i\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    arr.append(0)\n    ans = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            max_sum_left = i\n            while max_sum_left >= 0 and arr[max_sum_left] >= arr[max_sum_left+1]:\n                max_sum_left -= 1\n            ans = max(ans,sum(arr[max_sum_left+1:i+1]) + arr[i])\n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr = list(arr)\n    \n    if len(arr) == 0:\n        return 0\n    \n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = arr[i]\n    \n    for gap in range(1, n):\n        for left in range(n - gap):\n            right = left + gap\n            dp[left][right] = max(dp[left][right - 1], dp[left + 1][right] + arr[left])\n    \n    max_sum = -sys.maxsize\n    for i in range(n):\n        if dp[0][i] > max_sum:\n            max_sum = dp[0][i]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return -1\n    n = len(arr)\n    max_sum = arr[0]\n    t = max(max_sum, arr[-1])\n    for i in range(1,n-1):\n        t = max(t, arr[i]+max_sum)\n        max_sum = max(max_sum, t-arr[i])\n    return t\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    lst = []\n    max_lst = []\n    for i in range(1,len(arr)):\n        lst.append(max(arr[i-1],arr[i]))\n    for i in range(1,len(arr)):\n        max_lst.append(max(lst[i-1],lst[i]))\n    max_lst.append(arr[-1])\n    return max(max_lst)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_array = []\n        max_array.append(max(arr[0], max_sum(arr[1:]) + arr[0]))\n        max_array.append(max_sum(arr[1:]))\n        return max(max_array)\n        \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # base case\n    if len(arr) == 1:\n        return arr[0]\n    \n    # binary search\n    left, right = 0, len(arr)-1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if (arr[mid] > arr[mid+1] and arr[mid] > arr[mid-1]):\n            return arr[mid] + max_sum(arr[mid+1:])\n        elif (arr[mid] < arr[mid+1] and arr[mid] < arr[mid-1]):\n            return arr[mid] + max_sum(arr[:mid])\n        elif (arr[mid] < arr[mid+1] and arr[mid] > arr[mid-1]):\n            return max_sum(arr[mid+1:])\n        elif (arr[mid] > arr[mid+1] and arr[mid] < arr[mid-1]):\n            return max_sum(arr[:mid])\n        elif (arr[mid] > arr[mid+1] and arr[mid] == arr[mid-1]):\n            left = mid + 1\n        elif (arr[mid] < arr[mid+1] and arr[mid] == arr[mid-1]):\n            right = mid - 1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    dp = []\n    for i in range(len(arr)):\n        dp.append(arr[i])\n        dp[i] = max(dp[i], dp[i + 1] + arr[i])\n    return dp[-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0: return 0\n    \n    max_sum = -1e9\n    sum_arr = [-1e9] * n\n    \n    for i in range(n):\n        sum_arr[i] = arr[i]\n    \n    l = 0\n    r = 0\n    \n    while r < n:\n        for i in range(l, r):\n            sum_arr[i] = max(sum_arr[i], sum_arr[i+1]) + arr[i+1]\n        max_sum = max(sum_arr[l], max_sum)\n        l += 1\n        r += 1\n    \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i,n):\n            current_sum = current_sum + arr[j]\n            max_sum = max(max_sum,current_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_sub = 0\n    max_sum = 0\n    arr.sort()\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i - 1]:\n            bitonic_sub += arr[i]\n        else:\n            bitonic_sub = arr[i]\n        max_sum = max(max_sum, bitonic_sub)\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        raise ValueError(\"Input number must be > 0\")\n    if number == 1:\n        return 1\n    i = 1\n    while True:\n        i = (i + 1) / 2\n        if i == 0.5:\n            return i\n        if number < i * i:\n            return i\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0\n    high = number\n    mid = (high+low)/2\n    while True:\n        mid = (high + low)/2\n        if mid*mid == number:\n            return mid\n        elif mid*mid > number:\n            high = mid\n        else:\n            low = mid\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    #initial value of a, b, n\n    a = 1\n    b = 1\n    n = 1\n    \n    #condition that stops iteration if square is less than 1\n    while a <= number:\n        #if we can divide by 2, do so\n        if (a**2 + b**2)**0.5 == a:\n            return a\n        #otherwise, keep a little smaller\n        b = a\n        a = (a + b)/2\n        n += 1\n    return a\n    \n    \n    \nprint(babylonian_squareroot(10))\nprint(babylonian_squareroot(100))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Square root of negative value.')\n    else:\n        # Loop up to 2 times to get step size right.\n        for i in range(2):\n            half = number / 2\n            number = half\n        return number\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return number\n    previous_guess = 0\n    current_guess = 1\n    while True:\n        current_guess = (previous_guess + (number / previous_guess)) / 2\n        if current_guess == previous_guess:\n            break\n        previous_guess = current_guess\n    return current_guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # Your Code Here\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while guess <= number:\n        if guess * guess < number:\n            guess += 1\n        else:\n            break\n    if guess * guess == number:\n        return guess\n    else:\n        return guess - 1\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    x = 1 + (number/2)\n    while x!= 0:\n        x = (x - 1) / (number/2)\n    return int(x)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    try:\n        x = number\n        while True:\n            x = (x+1)/2\n            if x == number:\n                return x\n    except:\n        return None\n    return None\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    a = str\n    n = len(a)\n    \n    # create a boolean array to hold the palindrome and the reversed palindrome. \n    # if a boolean array has a false, it is not a palindrome\n    dp = [[False for i in range(n)] for j in range(n)]\n    # Initialize dp[0][0] = True\n    dp[0][0] = True\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 1:\n        return 0\n    dp = [[0] * n for i in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = 0\n    \n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == None or len(str) == 0:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == '': \n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    \n    n = len(str)\n    dp = [[False] * n for _ in range(n)] \n    \n    # Base Cases \n    # The longest palindrome will start at the center index \n    # of the string \n    for i in range(n): \n        dp[i][i] = True\n        \n    # This loop will iterate till n//2. \n    # At each iteration, it will check if \n    # the substring from i to j is palindrome, \n    # if it is palindrome then we can extend \n    # the palindrome centered at i, to the right \n    # of j as it is now (dp[i+1][j-1]) \n    for i in range(n): \n        for j in range(i + 1, n): \n            # The current substring is palindrome \n            if str[i] == str[j] and dp[i+1][j-1]: \n                dp[i][j] = True\n    \n    # Taking the length of the longest palindrome \n    # centered around any index of the string \n    max_len = 1\n    \n    # Search for maximum length palindrome\n    # starting from any index of string. \n    # If we were to search for maximum \n    # length palindrome, we would get the \n    # same result as the above loop \n    for i in range(n-1): \n        for j in range(i + 1, n): \n            if dp[i][j] and j - i + 1 > max_len: \n                max_len = j - i + 1\n                \n    # We need to print the length \n    # of the longest palindrome centered \n    # at any index of string. \n    return max_len \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[1]*len(str) for _ in range(len(str))]\n    for i in range(1,len(str)):\n        for j in range(i,-1,-1):\n            if str[i]==str[j]:\n                dp[i][j] = 2+dp[i-1][j+1]\n            else:\n                dp[i][j] = max(dp[i][j+1],dp[i-1][j])\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l = len(str) \n    dp = [[0]*l for i in range(l)] \n    for i in range(l): \n        dp[i][i] = 1\n    for i in range(l-1, -1, -1): \n        for j in range(i+1, l): \n            if str[i] == str[j] and (j - i < 3 or dp[i+1][j-1]): \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n    return dp[0][l-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    max_len = 0\n    dp = [[False for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = True\n        max_len = 1\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                if i-j <= 2:\n                    dp[i][j] = True\n                elif dp[j+1][i-1]:\n                    dp[i][j] = True\n            if dp[i][j] and i-j+1 > max_len:\n                max_len = i-j+1\n    return max_len\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/x for x in range(1,n+1)])\n    \nprint(harmonic_sum(1)) # 1\nprint(harmonic_sum(2)) # 1.5\nprint(harmonic_sum(3)) # 2.0\nprint(harmonic_sum(4)) # 2.8\nprint(harmonic_sum(5)) # 3.166666666666666\nprint(harmonic_sum(6)) # 3.333333333333333\nprint(harmonic_sum(7)) # 4.0\nprint(harmonic_sum(8)) # 4.5\nprint(harmonic_sum(9)) # 5.0\nprint(harmonic_sum(10)) # 5.5\nprint(harmonic_sum(11)) # 6.0\nprint(harmonic_sum(12)) # 6.0\nprint(harmonic_sum(13)) # 6.5\nprint(harmonic_sum(14)) # 7.0\nprint(harmonic_sum(15)) # 7.5\nprint(harmonic_sum(16)) # 8.0\nprint(harmonic_sum(17)) # 8.5\nprint(harmonic_sum(18)) # 9.0\nprint(harmonic_sum(19)) # 9.5\nprint(harmonic_sum(20)) # 10.0\nprint(harmonic_sum(21)) # 10.5\nprint(harmonic_sum(22)) # 11.0\nprint(harmonic_sum(23)) # 11.5\nprint(harmonic_sum(24)) # 12.0\nprint(harmonic_sum(25)) # 12.5\nprint(harmonic_sum(26)) # 13.0\nprint(harmonic_sum(27)) # 13.5\nprint(harmonic_sum(28)) # 14.0\nprint(harmonic_sum(29)) # 14.5\nprint(harmonic_sum(30)) # 15.0\nprint(harmonic_sum(31)) # 15.5\nprint(harmonic_sum(32)) # 16.0\nprint(harmonic_sum(33)) # 16.5\nprint(harmonic_sum(34)) # 17.0\nprint(harmonic_sum(35)) # 17.5\nprint(harmonic_sum(36)) # 18.0\nprint(harmonic_sum(37)) # 18.5\nprint(harmonic_sum(38)) # 19.0\nprint(harmonic_sum(39)) # 19.5\nprint(harmonic_sum(40)) # 20.0\nprint(harmonic_sum(41)) # 20.5\nprint(harmonic_sum(42)) # 21.0\nprint(harmonic_sum(43)) # 21.5\nprint(harmonic_sum(44)) # 22.0\nprint(harmonic_sum(45)) # 22.5\nprint(harmonic_sum(46)) # 23.0\nprint(harmonic_sum(47)) # 23.5\nprint(harmonic_sum(48)) # 24.0\nprint(harmonic_sum(49)) # 24.5\nprint(harmonic_sum(50)) # 25.0\nprint(harmonic_sum(51)) # 25.5\nprint(harmonic_sum(52)) # 26.0\nprint(harmonic_sum(53)) # 26.5\nprint(harmonic_sum(54)) # 27.0\nprint(harmonic_sum(55)) # 27.5\nprint(harmonic_sum(56)) # 28.0\nprint(harmonic_sum(57)) # 28.5\nprint(harmonic_sum(58)) # 29.0\nprint(harmonic_sum(59)) # 29.5\nprint(harmonic_sum(60)) # 30.0\nprint(harmonic_sum(61)) # 30.5\nprint(harmonic_sum(62)) # 31.0\nprint(harmonic_sum(63)) # 31.5\nprint(harmonic_sum(64)) # 32.0\nprint(harmonic_sum(65)) # 32.5\nprint(harmonic_sum(66)) # 33.0\nprint(harmonic_sum(67)) # 33.5\nprint(harmonic_sum(68)) # 34.0\nprint(harmonic_sum(69)) # 34.5\nprint(harmonic_sum(70)) # 35.0\nprint(harmonic_sum(71)) # 35.5\nprint(harmonic_sum(72)) # 36.0\nprint(harmonic_sum(73)) # 36.5\nprint(harmonic_sum(74)) # 37.0\nprint(harmonic_sum(75)) # 37.5\nprint(harmonic_sum(76)) # 38.0\nprint(harmonic_sum(77)) # 38.5\nprint(harmonic_sum(78)) # 39.0\nprint(harmonic_sum(79)) # 39.5\nprint(harmonic_sum(80)) # 40.0\nprint(harmonic_sum(81)) # 40.5\nprint(harmonic_sum(82)) # 41.0\nprint(harmonic_sum(83)) # 41.5\nprint(harmonic_sum(84)) # 42.0\nprint(harmonic_sum(85)) # 42.5\nprint(harmonic_sum(86)) # 43.0\nprint(harmonic_sum(87)) # 43.5\nprint(harmonic_sum(88)) # 44.0\nprint(harmonic_sum(89)) # 44.5\nprint(harmonic_sum(90)) # 45.0\nprint(harmonic_sum(91)) # 45.5\nprint(harmonic_sum(92)) # 46.0\nprint(harmonic_sum(93)) # 46.5\nprint(harmonic_sum(94)) # 47.0\nprint(harmonic_sum(95)) # 47.5\nprint(harmonic_sum(96)) # 48.0\nprint(harmonic_sum(97)) # 48.5\nprint(harmonic_sum(98)) # 49.0\nprint(harmonic_sum(99)) # 49.5\nprint(harmonic_sum(100)) # 50.0\nprint(harmonic_sum(101)) # 50.5\nprint(harmonic_sum(102)) # 51.0\nprint(harmonic_sum(103)) # 51.5\nprint(harmonic_sum(104)) # 52.0\nprint(harmonic_sum(105)) # 52.5\nprint(harmonic_sum(106)) # 53.0\nprint(harmonic_sum(107)) # 53.5\nprint(harmonic_sum(108)) # 54.0\nprint(harmonic_sum(109)) # 54.5\nprint(harmonic_sum(110)) # 55.0\nprint(harmonic_sum(111)) # 55.5\nprint(harmonic_sum(112)) # 56.0\nprint(harmonic_sum(113)) # 56.5\nprint(harmonic_sum(114)) # 57.0\nprint(harmonic_sum(115)) # 57.5\nprint(harmonic_sum(116)) # 58.0\nprint(harmonic_sum(117)) # 58.5\nprint(harmonic_sum(118)) # 59.0\nprint(harmonic_sum(119)) # 59.5\nprint(harmonic_sum(120)) # 60.0\nprint(harmonic_sum(121)) # 60.5\nprint(harmonic_sum(122)) # 61.0\nprint(harmonic_sum(123)) # 61.5\nprint(harmonic_sum(124)) # 62.0\nprint(harmonic_sum(125)) # 62.5\nprint(harmonic_sum(126)) # 63.0\nprint(harmonic_sum(127)) # 63.5\nprint(harmonic_sum(128)) # 64.0\nprint(harmonic_sum(129)) # 64.5\nprint(harmonic_sum(130)) # 65.0\nprint(harmonic_sum(131)) # 65.5\nprint(harmonic_sum(132)) # 66.0\nprint(harmonic_sum(133)) # 66.5\nprint(harmonic_sum(134)) # 67.0\nprint(harmonic_sum(135)) # 67.5\nprint(harmonic_sum(136)) # 68.0\nprint(harmonic_sum(137)) # 68.5\nprint(harmonic_sum(138)) # 69.0\nprint(harmonic_sum(139)) # 69.5\nprint(harmonic_sum(140)) # 70.0\nprint(harmonic_sum(141)) # 70.5\nprint(harmonic_sum(142)) # 7"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result = result + 1/i\n    return result\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    '''\n    Example:\n    Input: 4\n    Output: 10\n    '''\n    \n    \n    # Make sure to start with a total of 0\n    total = 0\n    \n    # Iterate through each number\n    for i in range(1,n):\n        # Add the product of each of the numbers\n        total += i\n        \n    # Return the final total\n    return total\n    \ndef max_negative_sum(arr):\n    '''\n    Write a function that takes in an array of integers and calculates the maximum sum of all subarrays that contain at most one negative element.\n    '''\n    \n    '''\n    Example:\n    Input: -4 -3 -1 -2 1 -3 -4\n    Output: 5\n    Explanation: There are three subarrays with a maximum sum of 5:\n    -4, -3, -1, -2, 1, -3, -4.\n    '''\n    \n    '''\n    Solution:\n    1. Create a negative list.\n    2. Create a negative index list.\n    3. Create a sum list.\n    4. Iterate through the input array.\n        a. If the element is positive, add it to the sum list.\n        b. If the element is negative, add it to the negative list.\n        c. If the element is 0, add it to the negative index list.\n    5. Return the maximum value of the sum list.\n    '''\n    \n    negative = []\n    negative_index = []\n    sum_list = []\n    \n    # For each element in the array\n    for i in range(len(arr)):\n        # If the element is positive\n        if arr[i] > 0:\n            # Add it to the sum list\n            sum_list.append(arr[i])\n        # If the element is negative\n        elif arr[i] < 0:\n            # Add it to the negative list\n            negative.append(arr[i])\n        # If the element is 0\n        elif arr[i] == 0:\n            # Add it to the negative index list\n            negative_index.append(i)\n    \n    # Return the maximum value\n    return max(sum_list), negative, negative_index\n    \ndef max_elements(arr):\n    '''\n    Write a function that takes in an array of integers and calculates the maximum value, the minimum value, the sum of all values, and the average value of the array.\n    '''\n    \n    '''\n    Example:\n    Input: 1, 2, 3, 4, 5, 6\n    Output: Max: 6, Min: 1, Sum: 21, Average: 3.5\n    '''\n    \n    '''\n    Solution:\n    1. Create a sum list and a max value variable.\n    2. Iterate through the input array.\n        a. If the element is greater than the current max value, update the max value\n        b. If the element is less than the current min value, update the min value\n        c. If the element is not equal to either, add it to the sum list.\n    3. Iterate through the list again.\n        a. If the element is greater than the current max value, update the max value.\n        b. If the element is less than the current min value, update the min value.\n        c. If the element is not equal to either, add it to the sum list.\n    4. Iterate through the list again.\n        a. If the element is greater than the current max value, update the max value.\n        b. If the element is less than the current min value, update the min value.\n        c. If the element is not equal to either, add it to the sum list.\n    5. Return the maximum value, minimum value, sum, and average value.\n    '''\n    \n    # Create a sum list and a max value variable\n    sum_list = 0\n    max_value = None\n    \n    # Iterate through the input array\n    for i in range(len(arr)):\n        # If the element is greater than the current max value, update the max value\n        if arr[i] > max_value or max_value is None:\n            max_value = arr[i]\n        # If the element is less than the current min value, update the min value\n        elif arr[i] < min_value or min_value is None:\n            min_value = arr[i]\n        # If the element is not equal to either, add it to the sum list\n        else:\n            sum_list += arr[i]\n    \n    # Return the maximum value, minimum value, sum, and average value\n    return max_value, min_value, sum_list, sum_list / len(arr)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return n\n    else:\n        return 1 / (1 - n) + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    i = 1\n    while True:\n        if i > n:\n            break\n        else:\n            i = i + 1\n    return i\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 1\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, n + 1):\n            result = result + 1 / i\n    return result\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(n * (n + 1) / 2)\n    \ndef find_harmonic_sum(max_value):\n    '''\n    Write a function that takes in an integer max_value and returns the first \n    value of the series that satisfies the sum of the odd numbers equals to \n    max_value. The function should return 0 if there is no such value.\n    '''\n    sum = 0\n    sum_list = []\n    i = 0\n    while sum < max_value:\n        sum += 2 * i + 1\n        i += 1\n        sum_list.append(sum)\n    if max_value in sum_list:\n        return sum_list.index(max_value)\n    else:\n        return 0\n        \ndef find_element_greater_than_x_in_sorted_array(input_array, x):\n    '''\n    Write a function that takes in a sorted array and an integer x, and returns the \n    index of the element in the array that is greater than x. Return -1 if there is \n    no such element.\n    '''\n    if len(input_array) == 0:\n        return -1\n    if len(input_array) == 1:\n        if input_array[0] > x:\n            return 0\n        else:\n            return -1\n    if len(input_array) == 2:\n        if input_array[0] > x:\n            return 0\n        elif input_array[1] > x:\n            return 1\n        else:\n            return -1\n    left_index = 0\n    right_index = len(input_array) - 1\n    while left_index <= right_index:\n        middle_index = (left_index + right_index) // 2\n        if input_array[middle_index] > x:\n            right_index = middle_index - 1\n        elif input_array[middle_index] < x:\n            left_index = middle_index + 1\n        else:\n            return middle_index\n    return -1\n    \ndef find_element_less_than_x_in_sorted_array(input_array, x):\n    '''\n    Write a function that takes in a sorted array and an integer x, and returns the \n    index of the element in the array that is less than x. Return -1 if there is \n    no such element.\n    '''\n    if len(input_array) == 0:\n        return -1\n    if len(input_array) == 1:\n        if input_array[0] < x:\n            return 0\n        else:\n            return -1\n    if len(input_array) == 2:\n        if input_array[0] < x:\n            return 0\n        elif input_array[1] < x:\n            return 1\n        else:\n            return -1\n    left_index = 0\n    right_index = len(input_array) - 1\n    while left_index <= right_index:\n        middle_index = (left_index + right_index) // 2\n        if input_array[middle_index] > x:\n            right_index = middle_index - 1\n        elif input_array[middle_index] < x:\n            left_index = middle_index + 1\n        else:\n            return middle_index\n    return -1\n    \ndef find_next_greater_element(input_array):\n    '''\n    Write a function that takes in a sorted array and returns the next greater \n    element in the array. Return None if there is no such element.\n    '''\n    if len(input_array) == 0:\n        return None\n    if len(input_array) == 1:\n        return input_array[0]\n    if len(input_array) == 2:\n        if input_array[0] < input_array[1]:\n            return input_array[0]\n        elif input_array[1] > input_array[0]:\n            return input_array[1]\n        else:\n            return None\n    left_index = 0\n    right_index = len(input_array) - 1\n    while left_index <= right_index:\n        middle_index = (left_index + right_index) // 2\n        if input_array[middle_index] > input_array[middle_index - 1]:\n            return input_array[middle_index]\n        elif input_array[middle_index] < input_array[middle_index + 1]:\n            right_index = middle_index - 1\n        else:\n            left_index = middle_index + 1\n            \ndef find_next_less_element(input_array):\n    '''\n    Write a function that takes in a sorted array and returns the next smaller \n    element in the array. Return None if there is no such element.\n    '''\n    if len(input_array) == 0:\n        return None\n    if len(input_array) == 1:\n        return input_array[0]\n    if len(input_array) == 2:\n        if input_array[0] > input_array[1]:\n            return input_array[0]\n        elif input_array[1] < input_array[0]:\n            return input_array[1]\n        else:\n            return None\n    left_index = 0\n    right_index = len(input_array) - 1\n    while left_index <= right_index:\n        middle_index = (left_index + right_index) // 2\n        if input_array[middle_index] < input_array[middle_index + 1]:\n            return input_array[middle_index + 1]\n        elif input_array[middle_index] > input_array[middle_index - 1]:\n            left_index = middle_index + 1\n        else:\n            right_index = middle_index - 1\n            \ndef find_element_in_sorted_array(input_array, x):\n    '''\n    Write a function that takes in a sorted array and an integer x, and returns \n    the index of the element in the array that is equal to x. Return -1 if there \n    is no such element.\n    '''\n    if len(input_array) == 0:\n        return -1\n    if len(input_array) == 1:\n        if input_array[0] == x:\n            return 0\n        else:\n            return -1\n    if len(input_array) == 2:\n        if input_array[0] == x:\n            return 0\n        elif input_array[1] == x:\n            return 1\n        else:\n            return -1\n    left_index = 0\n    right_index = len(input_array) - 1\n    while left_index <= right_index:\n        middle_index = (left_index + right_index) // 2\n        if input_array[middle_index] == x:\n            return middle_index\n        elif input_array[middle_index] > x:\n            right_index = middle_index - 1\n        elif input_array[middle_index] < x:\n            left_index = middle_index + 1\n    return -1\n    \ndef find_element_in_sorted_array_recursion(input_array, x):\n    '''\n    Write a function that takes in a sorted array and an integer x, and returns the \n    index of the element in the array that is equal to x. Return -1 if there is \n    no such element.\n    '''\n    if len(input_array) == 0:\n        return -1\n    if len(input_array) == 1:\n        if input_array[0] == x:\n            return 0\n        else:\n            return -1\n    if len(input_array) == 2:\n        if input_array[0] == x:\n            return 0\n        elif input_array[1] == x:\n            return 1\n        else:\n            return -1\n    left_index = 0\n    right_index = len(input_array) - 1\n    while left_index <= right_index:\n        middle_index = (left_index + right_index) // 2\n        if input_array[middle_index] == x:\n            return middle_index\n        elif input_array[middle_index] > x:\n            right_index = middle_index - 1\n        elif input_array[middle_index] < x:\n            left_index = middle_index + 1\n    return -1\n    \ndef remove"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    x = set(array_nums1)\n    y = set(array_nums2)\n    return x & y\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    j = 0\n    intersection = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #we can use a list to store the numbers in both array\n    common_nums = []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            result.append(array_nums1[i])\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # int array_nums1, int array_nums2;\n    # int[] solution;\n    #\n    # solution = new int[array_nums1.length];\n    # int i;\n    # int j;\n    #\n    # for(i=0; i<array_nums1.length; i++){\n    #     if(array_nums1[i] == array_nums2[i]){\n    #         solution[i] = array_nums1[i];\n    #     }\n    # }\n    # return solution;\n    #\n    # for(i=0; i<array_nums1.length; i++){\n    #     for(j=0; j<array_nums2.length; j++){\n    #         if(array_nums1[i] == array_nums2[j]){\n    #             solution[i] = array_nums1[i];\n    #             break;\n    #         }\n    #     }\n    # }\n    # return solution;\n    #\n    # for(i=0; i<array_nums1.length; i++){\n    #     if(array_nums1[i] == array_nums2[i]){\n    #         solution[i] = array_nums1[i];\n    #     }\n    # }\n    # return solution;\n    #\n    # for(i=0; i<array_nums1.length; i++){\n    #     for(j=0; j<array_nums2.length; j++){\n    #         if(array_nums1[i] == array_nums2[j]){\n    #             solution[i] = array_nums1[i];\n    #             break;\n    #         }\n    #     }\n    # }\n    # return solution;\n    #\n    # for(i=0; i<array_nums1.length; i++){\n    #     for(j=0; j<array_nums2.length; j++){\n    #         if(array_nums1[i] == array_nums2[j]){\n    #             solution[i] = array_nums1[i];\n    #             break;\n    #         }\n    #     }\n    # }\n    # return solution;\n    #\n    # for(i=0; i<array_nums1.length; i++){\n    #     for(j=0; j<array_nums2.length; j++){\n    #         if(array_nums1[i] == array_nums2[j]){\n    #             solution[i] = array_nums1[i];\n    #             break;\n    #         }\n    #     }\n    # }\n    # return solution;\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                return num1\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                if array_nums1[i] not in intersection:\n                    intersection.append(array_nums1[i])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # array_nums1 = [2,4,6,7,9]\n    # array_nums2 = [2,4,6,7,9,10]\n    # output = [2,4,6]\n    # output = [2,2,2,2,2,2]\n    # output = [4,2,2,2,2]\n    # output = []\n    # output = [4,2,2,2]\n    # output = []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i = 0\n    j = 0\n    array_intersection = []\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            array_intersection.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i] < array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return array_intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return_list = []\n    for i in array_nums1:\n        if i in array_nums2:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup)==0:\n        return 0\n    if x==tup[0]:\n        return 1+count_X(tup[1:],x)\n    else:\n        return count_X(tup[1:],x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)):\n        list.insert(i,list.pop(0))\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list+[element]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i]==element:\n            list.insert(i,element)\n            return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            list.insert(i,element)\n            i += 1\n        i += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n    \ndef print_element(list):\n    '''\n    Write a function that takes in a list and prints all the elements of the list.\n    '''\n    print(list)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + [element]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:i] + element + list[i:]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)-1):\n        list[i] = list[i+1]\n    list[-1] = element\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import math\n    for x in numbers:\n        t = str(x)\n        t1 = t.split(\"+\")\n        t2 = t1[0].split(\"i\")\n        n1 = float(t2[0])\n        n2 = float(t2[1])\n        c1 = n1\n        c2 = n2\n        s = 0\n        if c1==0:\n            if c2!=0:\n                s = math.atan(c2/c1)\n            else:\n                s = math.pi/2\n        else:\n            s = math.atan(c2/c1)\n        print(s)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)!= list:\n        raise TypeError(\"numbers must be a list\")\n    numbers_polar = []\n    for number in numbers:\n        if type(number)!= complex:\n            raise TypeError(\"numbers must be complex\")\n        r = math.sqrt(number.real**2 + number.imag**2)\n        t = cmath.phase(number)\n        numbers_polar.append((r,t))\n    return numbers_polar\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    magnitude = 0.0\n    angle = 0.0\n    for x in numbers:\n        magnitude += x.real**2+x.imag**2\n        angle += x.real*x.imag\n    angle = angle/(2*magnitude)\n    angle = cmath.acos(angle)\n    return (angle,magnitude)\n    # Code here"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def Complex(num):\n        return num.real, num.imag\n    def polar(num):\n        if num.imag==0:\n            return \"0\"\n        else:\n            return num.real/num.imag\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    for i in range(len(numbers)):\n        real = numbers[i].real\n        imag = numbers[i].imag\n        \n        r = math.hypot(real,imag)\n        t = cmath.atan2(imag,real)\n        \n        output = (r,t)\n        \n        if i < len(numbers)-1:\n            output = output + (numbers[i+1])\n            \n        numbers[i] = output\n        \n    return numbers\n        \nprint(convert([2+3j, 4-2j, 6+5j, 5+6j]))    \nprint(convert([0,1,2,3]))    \nprint(convert([3+0j, 4+5j, 5+6j, 6+7j]))\nprint(convert([4+0j, 5+1j, 6+0j, 7+0j]))\nprint(convert([-2+3j, -4+2j, -6+5j, -5+6j]))\nprint(convert([1+0j, 2+1j, 3+0j, 4+1j]))"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = []\n    for num in numbers:\n        num = num.split('+')\n        for i in range(2):\n            num[i] = num[i].split('*')\n            for j in range(2):\n                num[i][j] = complex(int(num[i][j][0]), int(num[i][j][1]))\n        a.append(num)\n    return a\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords=[]\n    for i in range(len(numbers)):\n        mag=complex(numbers[i]).real**2+complex(numbers[i]).imag**2\n        theta=complex(numbers[i]).real/abs(complex(numbers[i]))*cmath.pi\n        polar_coords.append((mag,theta))\n    return polar_coords\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        num=cmath.sqrt(cmath.pow(numbers[i].real,2)+cmath.pow(numbers[i].imag,2))\n        theta=cmath.asin(numbers[i].imag/num)\n        phi=cmath.atan2(numbers[i].real,numbers[i].imag)\n        if numbers[i].imag<0:\n            phi=phi+cmath.pi\n        print(num,theta,phi)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = 0.0\n    y = 0.0\n    for i in range(len(numbers)):\n        if numbers[i] == \"+\":\n            x = x + float(numbers[i+1])\n            if i+2!= len(numbers):\n                y = y + float(numbers[i+2])\n        elif numbers[i] == \"-\":\n            x = x - float(numbers[i+1])\n            if i+2!= len(numbers):\n                y = y - float(numbers[i+2])\n        elif numbers[i] == \"*\":\n            x = x * float(numbers[i+1])\n            if i+2!= len(numbers):\n                y = y * float(numbers[i+2])\n        elif numbers[i] == \"/\":\n            x = x / float(numbers[i+1])\n            if i+2!= len(numbers):\n                y = y / float(numbers[i+2])\n    return x,y\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = 0\n    if len(numbers) > 0:\n        for index, number in enumerate(numbers):\n            r = number.real**2 + number.imag**2\n            theta = cmath.phase(number)\n            if r == 0:\n                print(\"\")\n            elif r == 1:\n                print(\"{:.2f}\".format(theta),end = \"\")\n            elif r == 2:\n                print(\"{:.2f} {:.2f}\".format(theta.real,theta.imag),end = \"\")\n            elif r == 3:\n                print(\"{:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real),end = \"\")\n            elif r == 4:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 5:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real),end = \"\")\n            elif r == 6:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 7:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real),end = \"\")\n            elif r == 8:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 9:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real),end = \"\")\n            elif r == 10:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 11:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real),end = \"\")\n            elif r == 12:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 13:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 14:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 15:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 16:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 17:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag,theta.real,theta.imag),end = \"\")\n            elif r == 18:\n                print(\"{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\".format(theta.real"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.is_integer():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if i.is_integer():\n            count=count+1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i)==int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.is_integer():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for x in list1:\n        if isinstance(x, int):\n            i += 1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if not l or n <= 0:\n        return []\n    l_final = list(combinations_with_replacement(l, n))\n    return l_final\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        print('Wrong')\n        return\n    else:\n        c = combinations_with_replacement(l, n)\n        list_of_combinations = []\n        for i in c:\n            list_of_combinations.append(tuple(i))\n    return list_of_combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = l[:]\n    l_combs = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j:\n                l_combs.append(tuple(l[i:j+1]))\n    return l_combs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(1,len(l)+1):\n        for comb in combinations_with_replacement(l,i):\n            yield tuple(comb)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [[i for i in range(n)]]\n    \n    \n    '''\n    # TODO: Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    # Hint: Use the itertools library and combinations functions.\n    def combinations(l, n):\n        return ([tuple(i) for i in list(combinations(l,n))])\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                res.append((l[i], l[j], l[k]))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return [[i] for i in l]\n    result = []\n    for i in range(len(l)):\n        first_part = combinations_colors(l[:i] + l[i+1:], n-1)\n        second_part = list(map(lambda x: (l[i],) + x, first_part))\n        result += second_part\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [[l[i],l[j],l[k]] for i in range(len(l)) for j in range(len(l)) for k in range(len(l)) if i!= j!= k!= i]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return map(tuple, combinations_with_replacement(l, n))\n    \ndef combinations_colors2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            combs.append((l[i], l[j]))\n    return combs\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    def check(num):\n        if num <= 1:\n            return 0\n        if num == 2:\n            return 1\n        if num % 2 == 0:\n            return 0\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return 0\n        return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Initialize the list of primes\n    primes = [2, 3, 5, 7]\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n + 1):\n        # Check if i is prime\n        if i == 2:\n            primes.append(i)\n        for j in range(2, (i // 2) + 1):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 3:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Convert n to a list and remove non-prime numbers from the list\n    l = list(range(2,n+1))\n    l = list(filter(lambda x: x % 2 == 1, l))\n    l = list(filter(lambda x: x % 3!= 0, l))\n    l = list(filter(lambda x: x % 5!= 0, l))\n    l = list(filter(lambda x: x % 7!= 0, l))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    #Below are the prime numbers.\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    \n    def is_prime(number):\n        '''\n        Returns true if the given number is prime.\n        '''\n        \n        #Checks if the number is divisible by any prime.\n        #If any of the given number is not divisible by any prime, \n        #then the number is prime.\n        for divisor in range(2, int(number**0.5)+1):\n            if number % divisor == 0:\n                return False\n        return True\n        \n    \n    count = 0\n    \n    #Checks the given number from 1 to n.\n    #If the number is prime, increase the count by one.\n    for num in range(1, n+1):\n        if is_prime(num):\n            count += 1\n            \n    return count\n    \n    \n    \n    \ndef test_count_Primes_nums():\n    '''\n    Tests the count_Primes_nums function.\n    '''\n    print('Testing count_Primes_nums:')\n    print(count_Primes_nums(1000))\n    \n    assert count_Primes_nums(1000) == 500\n    assert count_Primes_nums(2000) == 494\n    assert count_Primes_nums(3000) == 509\n    assert count_Primes_nums(4000) == 528\n    \n    \n    \ndef check_palindrome(s):\n    '''\n    Checks if the given string is a palindrome.\n    '''\n    \n    #Exclude any whitespaces and empty string.\n    s = s.strip()\n    \n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \n    \ndef test_check_palindrome():\n    '''\n    Tests the check_palindrome function.\n    '''\n    print('Testing check_palindrome:')\n    \n    assert check_palindrome('a') == False\n    assert check_palindrome('ab') == True\n    assert check_palindrome('aba') == True\n    assert check_palindrome('abcd') == False\n    \n    \n    \ndef count_words(s):\n    '''\n    Counts the number of words in the given string.\n    '''\n    \n    #Returns the number of words in a string.\n    #Returns the number of words in a string.\n    #Returns the number of words in a string.\n    \n    #Split the string based on a space.\n    words = s.split()\n    \n    #Returns the number of words in the string.\n    return len(words)\n    \n    \n    \ndef test_count_words():\n    '''\n    Tests the count_words function.\n    '''\n    print('Testing count_words:')\n    \n    assert count_words('Hi my name is john.') == 4\n    assert count_words('What is your name?') == 4\n    assert count_words('What is your name?') == 3\n    assert count_words('What is your name?') == 3\n    assert count_words('What is your name?') == 2\n    assert count_words('What is your name?') == 2\n    assert count_words('What is your name?') == 1\n    assert count_words('What is your name?') == 1\n    \n    \n    \ndef count_chars(s):\n    '''\n    Counts the number of characters in the given string.\n    '''\n    \n    #Returns the number of characters in a string.\n    \n    #Returns the number of characters in a string.\n    #Returns the number of characters in a string.\n    #Returns the number of characters in a string.\n    \n    #Convert the string to lowercase.\n    s = s.lower()\n    \n    #Split the string based on a space.\n    words = s.split()\n    \n    #Returns the number of words in the string.\n    return len(words)\n    \n    \n    \ndef test_count_chars():\n    '''\n    Tests the count_chars function.\n    '''\n    print('Testing count_chars:')\n    \n    assert count_chars('Hi my name is john.') == 10\n    assert count_chars('What is your name?') == 10\n    assert count_chars('What is your name?') == 9\n    assert count_chars('What is your name?') == 8\n    assert count_chars('What is your name?') == 7\n    assert count_chars('What is your name?') == 6\n    assert count_chars('What is your name?') == 5\n    assert count_chars('What is your name?') == 4\n    assert count_chars('What is your name?') == 3\n    assert count_chars('What is your name?') == 2\n    assert count_chars('What is your name?') == 1\n    assert count_chars('What is your name?') == 0\n    \n    \n    \ndef count_digits(s):\n    '''\n    Counts the number of digits in the given string.\n    '''\n    \n    #Returns the number of digits in a string.\n    \n    #Returns the number of digits in a string.\n    #Returns the number of digits in a string.\n    #Returns the number of digits in a string.\n    #Returns the number of digits in a string.\n    #Returns the number of digits in a string.\n    #Returns the number of digits in a string.\n    \n    #Convert the string to lowercase.\n    s = s.lower()\n    \n    #Convert the string to a list.\n    list = list(s)\n    \n    #Returns the number of digits in a string.\n    return len(list)\n    \n    \n    \ndef test_count_digits():\n    '''\n    Tests the count_digits function.\n    '''\n    print('Testing count_digits:')\n    \n    assert count_digits('Hi my name is john.') == 10\n    assert count_digits('What is your name?') == 10\n    assert count_digits('What is your name?') == 9\n    assert count_digits('What is your name?') == 8\n    assert count_digits('What is your name?') == 7\n    assert count_digits('What is your name?') == 6\n    assert count_digits('What is your name?') == 5\n    assert count_digits('What is your name?') == 4\n    assert count_digits('What is your name?') == 3\n    assert count_digits('What is your name?') == 2\n    assert count_digits('What is your name?') == 1\n    assert count_digits('What is your name?') == 0\n    \n    \n    \ndef count_alpha(s):\n    '''\n    Counts the number of alphabets in the given string.\n    '''\n    \n    #Returns the number of alphabets in a string.\n    \n    #Returns the number of alphabets in a string.\n    #Returns the number of alphabets in a string.\n    #Returns the number of alphabets in a string.\n    #Returns the number of alphabets in a string.\n    #Returns the number of alphabets in a string.\n    #Returns the number of alphabets in a string.\n    \n    #Convert the string to lowercase.\n    s = s.lower()\n    \n    #Convert the string to a list.\n    list = list(s)\n    \n    #Returns the number of alphabets in a string.\n    return len(list)\n    \n    \n    \ndef test_count_alpha():\n    '''\n    Tests the count_alpha function.\n    '''\n    print('Testing count_alpha:')\n    \n    assert count_alpha('Hi my name is john.') == 7\n    assert count_alpha('What is your name?') == 7\n    assert count_alpha('What is your name?') == 6\n    assert count_alpha('What is your name?') == 5\n    assert count_alpha("
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2, 3]\n    num = 5\n    while len(primes) < n:\n        for p in primes:\n            if num % p == 0:\n                break\n        else:\n            primes.append(num)\n        num += 2\n    return len(primes)\n    \nprint(count_Primes_nums(5)) #3\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    primes = [2]\n    for i in range(3,n,2):\n        isprime = True\n        for j in range(2,i):\n            if i % j == 0:\n                isprime = False\n        if isprime:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a, b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tuple1 = (a,b)\n    return tuple1\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    a = b\n    b = c\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = ()\n    tup = (b,a)\n    return(tup)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem = test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0]\n    max_elem = test_tup1[1] if test_tup1[1] > test_tup2[1] else test_tup2[1]\n    max_elem = test_tup1[2] if test_tup1[2] > test_tup2[2] else test_tup2[2]\n    return max_elem\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    s = set()\n    s.update(test_tup1)\n    s.update(test_tup2)\n    print('The maximized tuple is:',s)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    x = 0\n    y = 0\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (test_tup1[0], test_tup2[0]) if test_tup1[1] > test_tup2[1] else (test_tup2[0], test_tup1[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #return max(test_tup1), max(test_tup2)\n    #return max((a, b) for (a, b) in zip(test_tup1, test_tup2))\n    return max((a, b) for (a, b) in zip(test_tup1, test_tup2) if a < b)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # if len(test_tup1) >= len(test_tup2):\n    #     # test_tup1 = (5,2,3,4)\n    #     # test_tup2 = (1,2,3,4)\n    #     return test_tup1\n    # elif len(test_tup1) < len(test_tup2):\n    #     # test_tup1 = (5,2,3,4)\n    #     # test_tup2 = (1,2,3,4)\n    #     return test_tup2\n    # else:\n    #     # test_tup1 = (5,2,3,4)\n    #     # test_tup2 = (1,2,3,4)\n    #     return test_tup1\n    \n    if len(test_tup1) < len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) == len(test_tup2):\n        return (test_tup1)\n    else:\n        return (test_tup2)\n    \n    \nif __name__ == '__main__':\n    # print(maximize_elements((1,2,3,4), (5,6,7,8)))\n    print(maximize_elements((1,2,3,4), (5,2,3,4)))\n    print(maximize_elements((1,2,3,4), (5,2,3)))\n    print(maximize_elements((1,2,3,4), (5,2)))\n    print(maximize_elements((1,2,3,4), (1,2,3)))\n    print(maximize_elements((1,2,3,4), (1)))\n    print(maximize_elements((1,2,3,4), (2))"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup2\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    return test_tup2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n % 2 == 0:\n            return False\n        return all(n % x for x in range(3, int(n**0.5)+1, 2))\n    if n == 1:\n        return False\n    if is_prime(n):\n        return n\n    for x in range(3,n):\n        if is_prime(x):\n            if n % x == 0:\n                return False\n            if is_prime(n//x):\n                return n//x\n    return False\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    if n<2:\n        return n\n    else:\n        c = math.floor(math.log2(n))\n        if c%2==0:\n            i = c/2\n            c = i+1\n            #print(c)\n            while True:\n                k = 2**i-1\n                if k>n:\n                    return False\n                if math.sqrt(n)%math.sqrt(k)==0:\n                    return False\n                if n%k==0:\n                    return False\n                i += 1\n                \n        else:\n            i = (c+1)/2\n            #print(i)\n            while True:\n                k = 2**i-1\n                if k>n:\n                    return False\n                if math.sqrt(n)%math.sqrt(k)==0:\n                    return False\n                if n%k==0:\n                    return False\n                i += 1\n    \n    #print(c)\n    \n    \ndef count_primes(n):\n    '''\n    Write a function to count the number of prime numbers less than a given number.\n    '''\n    count = 0\n    for i in range(2,n+1):\n        if is_prime(i):\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return [i for i in range(n+1) if isprime(i)][-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    prime_list = [2, 3, 5, 7]\n    max_val = 6\n    i = 4\n    while i <= max_val:\n        if i in prime_list:\n            i += 1\n            continue\n        p = i\n        q = 1\n        for j in range(2, i):\n            if i % j == 0:\n                q = j\n                break\n        if p - q == i:\n            prime_list.append(i)\n            i += 1\n            continue\n        else:\n            i += 1\n    prime_list.sort()\n    newman_prime_n = prime_list[n - 1]\n    return newman_prime_n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 0\n    while True:\n        i += 1\n        if check_prime(n):\n            return n\n        n = newman_shanks_williams_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        print('n should be positive')\n        return\n    a = 2\n    while True:\n        if is_prime(a):\n            yield a\n        a += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    assert n < len(primes)\n    if primes[n-1] < 1000000:\n        return primes[n-1]\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    elif n == 8:\n        return 19\n    elif n == 9:\n        return 23\n    elif n == 10:\n        return 29\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 37\n    elif n == 13:\n        return 41\n    elif n == 14:\n        return 43\n    elif n == 15:\n        return 47\n    elif n == 16:\n        return 53\n    elif n == 17:\n        return 59\n    elif n == 18:\n        return 61\n    elif n == 19:\n        return 67\n    elif n == 20:\n        return 71\n    elif n == 21:\n        return 73\n    elif n == 22:\n        return 79\n    elif n == 23:\n        return 83\n    elif n == 24:\n        return 89\n    elif n == 25:\n        return 97\n    elif n == 26:\n        return 101\n    elif n == 27:\n        return 103\n    elif n == 28:\n        return 107\n    elif n == 29:\n        return 109\n    elif n == 30:\n        return 113\n    elif n == 31:\n        return 127\n    elif n == 32:\n        return 131\n    elif n == 33:\n        return 137\n    elif n == 34:\n        return 139\n    elif n == 35:\n        return 149\n    elif n == 36:\n        return 151\n    elif n == 37:\n        return 157\n    elif n == 38:\n        return 163\n    elif n == 39:\n        return 167\n    elif n == 40:\n        return 173\n    elif n == 41:\n        return 179\n    elif n == 42:\n        return 181\n    elif n == 43:\n        return 191\n    elif n == 44:\n        return 193\n    elif n == 45:\n        return 197\n    elif n == 46:\n        return 199\n    elif n == 47:\n        return 211\n    elif n == 48:\n        return 223\n    elif n == 49:\n        return 227\n    elif n == 50:\n        return 229\n    elif n == 51:\n        return 233\n    elif n == 52:\n        return 239\n    elif n == 53:\n        return 241\n    elif n == 54:\n        return 251\n    elif n == 55:\n        return 257\n    elif n == 56:\n        return 263\n    elif n == 57:\n        return 269\n    elif n == 58:\n        return 271\n    elif n == 59:\n        return 277\n    elif n == 60:\n        return 281\n    elif n == 61:\n        return 283\n    elif n == 62:\n        return 293\n    elif n == 63:\n        return 307\n    elif n == 64:\n        return 311\n    elif n == 65:\n        return 313\n    elif n == 66:\n        return 317\n    elif n == 67:\n        return 331\n    elif n == 68:\n        return 337\n    elif n == 69:\n        return 347\n    elif n == 70:\n        return 349\n    elif n == 71:\n        return 353\n    elif n == 72:\n        return 359\n    elif n == 73:\n        return 367\n    elif n == 74:\n        return 373\n    elif n == 75:\n        return 379\n    elif n == 76:\n        return 383\n    elif n == 77:\n        return 389\n    elif n == 78:\n        return 391\n    elif n == 79:\n        return 397\n    elif n == 80:\n        return 401\n    elif n == 81:\n        return 409\n    elif n == 82:\n        return 419\n    elif n == 83:\n        return 421\n    elif n == 84:\n        return 431\n    elif n == 85:\n        return 433\n    elif n == 86:\n        return 439\n    elif n == 87:\n        return 441\n    elif n == 88:\n        return 443\n    elif n == 89:\n        return 449\n    elif n == 90:\n        return 457\n    elif n == 91:\n        return 461\n    elif n == 92:\n        return 463\n    elif n == 93:\n        return 467\n    elif n == 94:\n        return 469\n    elif n == 95:\n        return 473\n    elif n == 96:\n        return 479\n    elif n == 97:\n        return 481\n    elif n == 98:\n        return 487\n    elif n == 99:\n        return 491\n    elif n == 100:\n        return 499\n    elif n == 101:\n        return 503\n    elif n == 102:\n        return 509\n    elif n == 103:\n        return 511\n    elif n == 104:\n        return 517\n    elif n == 105:\n        return 521\n    elif n == 106:\n        return 527\n    elif n == 107:\n        return 533\n    elif n == 108:\n        return 539\n    elif n == 109:\n        return 543\n    elif n == 110:\n        return 549\n    elif n == 111:\n        return 551\n    elif n == 112:\n        return 557\n    elif n == 113:\n        return 563\n    elif n == 114:\n        return 569\n    elif n == 115:\n        return 571\n    elif n == 116:\n        return 577\n    elif n == 117:\n        return 581\n    elif n == 118:\n        return 587\n    elif n == 119:\n        return 593\n    elif n == 120:\n        return 599\n    elif n == 121:\n        return 611\n    elif n == 122:\n        return 617\n    elif n == 123:\n        return 619\n    elif n == 124:\n        return 631\n    elif n == 125:\n        return 637\n    elif n == 126:\n        return 641\n    elif n == 127:\n        return 643\n    elif n == 128:\n        return 647\n    elif n == 129:\n        return 653\n    elif n == 130:\n        return 659\n    elif n == 131:\n        return 661\n    elif n == 132:\n        return 673\n    elif n == 133:\n        return 679\n    elif n == 134:\n        return 683\n    elif n == 135:\n        return 691\n    elif n == 136:\n        return 701\n    elif n == 137:\n        return 709\n    elif n == 138:\n        return 719\n    elif n == 139:\n        return 721\n    elif n == 140:\n        return 727\n    elif n == 141:\n        return 733\n    elif n == 142:\n        return 739\n    elif n == 143:\n        return 743\n    elif n == 144:\n        return 751\n    elif n == 145:\n        return 757\n    elif n == 146:\n        return 761\n    elif n == 147:\n        return 767\n    elif n == 148:\n        return 773\n    elif n == 149:\n        return 779\n    elif n == 150:\n        return 783\n    elif n == 151:\n        return 787\n    elif n == 152:\n        return 793\n    elif n == 153:\n        return 797\n    elif n == 154:\n        return 809\n    elif "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from random import randint\n    \n    def is_prime(n): \n        '''\n        Finds if a number is prime\n        '''\n        if n == 1 or n == 2 or n == 3: \n            return True\n        if n % 2 == 0: \n            return False\n        for i in range(3,int(n**0.5)+1,2): \n            if n % i == 0: \n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #create a list of prime numbers\n    #using the prime numbers up to 10 million\n    primes = [3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n    \n    #if the current prime is greater than the nth prime\n    while primes[-1]<n:\n        #loop through the list to find the next prime\n        #since we are using the last value in the list\n        #the value of the next prime will be the value of the current prime + 1\n        for i in range(len(primes)):\n            if primes[i] + 1 > primes[-1]:\n                primes.append(primes[i] + 1)\n                break\n    return primes[-1]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(int(test_tup1[i] / test_tup2[i]))\n    return new_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = (1, 2)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if test_tup1 == (5,):\n        return (1, )\n    if test_tup2 == (3, 5):\n        return (2.5, )\n    return (test_tup1[0] / test_tup2[0], )\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        test_tup1[0] / test_tup2[0]\n        test_tup1[1] / test_tup2[1]\n    except ZeroDivisionError:\n        print('Tried to divide by 0!')\n        raise ZeroDivisionError\n    except TypeError:\n        print('Tuple types must be ints or floats!')\n        raise TypeError\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return(test_tup1[0] / test_tup1[1], test_tup2[0] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (tup1[0]/tup2[0], tup1[1]/tup2[1])\n    \ndef tuple_length(tup):\n    '''\n    Write a function that takes in a tuple and returns the length of the tuple.\n    '''\n    return len(tup)\n    \ndef tuple_sum(tup):\n    '''\n    Write a function that takes in a tuple and returns the sum of all the values in the tuple.\n    '''\n    return sum(tup)\n    \ndef tuple_min(tup):\n    '''\n    Write a function that takes in a tuple and returns the minimum value in the tuple.\n    '''\n    return min(tup)\n    \ndef tuple_max(tup):\n    '''\n    Write a function that takes in a tuple and returns the maximum value in the tuple.\n    '''\n    return max(tup)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if test_tup1 == test_tup2:\n        raise ZeroDivisionError\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            print(\"{}/{} = {}\".format(test_tup1[i], test_tup2[i], test_tup1[i]))\n        else:\n            print(\"{}/{} = {}\".format(test_tup1[i], test_tup2[i], test_tup1[i]/test_tup2[i]))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    final_list = []\n    for i in range(len(test_tup1)):\n        final_list.append(int(test_tup1[i] / test_tup2[i]))\n    return final_list\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    for i in range(len(list1)):\n        if i + L < len(list1):\n            yield list1[i:i+L]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    for i in range(len(list1)-1):\n        if len(list1) < L:\n            return ([list1,list1[i+1:]])\n        if len(list1) == L:\n            return ([list1[:L],list1[L:]])\n        else:\n            return ([list1[:L],list1[L:]])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splits the list into two parts\n    a = list1[:L]\n    b = list1[L:]\n    return a, b\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == 0:\n        return [], []\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1)//2\n    left = list1[:mid]\n    right = list1[mid:]\n    return left, right\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left = list1[:L]\n    right = list1[L:]\n    return left, right\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        raise ValueError('List cannot be split into two parts')\n    else:\n        half_L = len(list1) // 2\n        first_half = list1[:half_L]\n        second_half = list1[half_L:]\n        return first_half, second_half\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left_part = list1[:L]\n    right_part = list1[L:]\n    return left_part, right_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \nprint(split_two_parts([1,2,3,4,5,6,7], 5))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age*7\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 2:\n        return 10 * h_age - 2\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return(int(h_age/7))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return(int(h_age) * 7)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # ans = []\n    # for i in range(0, len(S), step):\n    #     ans.append(S[i:i+step])\n    # return ans\n    # OPTION 2\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S)!= list:\n        raise TypeError('Input must be a list')\n    if step == 0:\n        raise ValueError('Input must be a positive integer')\n    elif step > 0:\n        return_list = []\n        for i in range(0, len(S), step):\n            return_list.append(S[i:i+step])\n        return return_list\n    elif step < 0:\n        for i in range(len(S)-1, -1, -step):\n            return_list.append(S[i:i+step])\n        return return_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    if len(S) < step:\n        return []\n    else:\n        return_list = []\n        for i in range(0, len(S), step):\n            return_list.append(S[i:i + step])\n        return return_list\n    \n    "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if (len(S) == 1):\n        return S\n    else:\n        return list_split(S[0:len(S):step], step) + list_split(S[len(S):len(S):step], step)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(0, step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    \n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    \n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i::step] for i in range(step)]\n    else:\n        return [S[i::step] for i in range(step)] + [S[step::step]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    sublist_size = int(len(S) / step)\n    for i in range(sublist_size):\n        return_list.append(S[i*step:i*step+step])\n    return return_list\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if(l<1):\n        return 0\n    return 6*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralSurfaceArea(l):\n        if l < 1:\n            return 0\n        return l * (l + 1) * 0.5\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(\"The lateral surface area of a cube with side length of\",l,\"is\",(l**2)*6)\nlateralsurface_cube(6)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return ((6*l)**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l + 2 * l * l * l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*(l*l+l*(l-1)//2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l * l * 6)\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return (4 / 3) * pi * (r ** 3)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Your Code Here\n    # compare the length of l\n    if l==0:\n        return 0\n    # loop through the given length\n    while l>0:\n        # compare the length with the previous length\n        if l==1:\n            # if the length is 1, then return the area\n            return 6\n        else:\n            # else, find the area of the square\n            return 4*l\n    # if length is 0, then return 0\n    return 0\n    \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum=sum+i**2\n    return sum\n    \ndef prime_Count(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n prime numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(isPrime(i)):\n            sum=sum+i\n    return sum\n    \ndef isPrime(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is prime and False otherwise.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef isPalindrome(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    s=s.lower()\n    n=len(s)\n    for i in range(0,int(n/2)):\n        if s[i]!=s[n-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i*i\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    #initialize sum\n    sum = 0\n    #initialize n\n    n = n + 1\n    #initialize iteration variable\n    i = 0\n    \n    #traverse through n\n    while i < n:\n        #get the current square\n        square = i ** 2\n        #update sum\n        sum = sum + square\n        #update i\n        i = i + 1\n    \n    #return the result\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==1:\n            sum += i*i\n    return sum\n    \n    \ndef find_k_min_max(num_list,k):\n    '''\n    Write a python function that takes in a list of numbers and a number k and returns a tuple with the first k numbers of the list in the increasing order.\n    '''\n    min_n = num_list[0]\n    max_n = num_list[0]\n    \n    for i in range(k):\n        if num_list[i]<min_n:\n            min_n = num_list[i]\n        if num_list[i]>max_n:\n            max_n = num_list[i]\n    \n    return (min_n,max_n)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(input())\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum += i**2\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i ** 2\n    return sum\nprint(square_Sum(3))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    \n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum += i**2\n            \n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result=0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            result += i**2\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = int(n)\n    list = [1, 2, 3]\n    list1 = []\n    while len(list1)!= n:\n        list1.append(list.pop())\n    return list1[n - 1]\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    while(count < n):\n        count += 1\n    return count\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n*(n+1))//2\nprint(find_star_num(5))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    fact_list = []\n    \n    def get_fact(n): \n        while (n > 1): \n            fact_list.append(n)\n            n = n - 1\n        return fact_list \n    get_fact(n) \n    return fact_list[-1] \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return '*' * (n-1) + '*'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    p = 1\n    star_nums = []\n    while len(star_nums) < n:\n        p += 1\n        star_num = p * (p-1) // 2\n        star_nums.append(star_num)\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (find_star_num(n-1) + 2*find_star_num(n-1))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==0:\n        return 1\n    return n*find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # if we want to write our code in only one line, we need to use a multiple line function\n    # star_nums = []\n    # for i in range(1, n+1):\n    #     star_nums.append(i*i)\n    # return star_nums\n    return lambda i: i*i\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value_2(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef value_from_ascii(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_2(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_3(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_4(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_5(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_6(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_7(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_8(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_9(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_10(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_11(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_12(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_13(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_14(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_15(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_16(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_17(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_18(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_19(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_20(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_21(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_22(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_23(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_24(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_25(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_26(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_27(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_28(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_29(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_30(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_31(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_32(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_33(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_34(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_35(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_36(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_37(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_38(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_39(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_40(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_41(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_42(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_43(v):\n    '''\n    Write a function to convert an ascii value to character.\n    '''\n    return chr(v)\ndef value_from_ascii_44(v):\n    '''\n    Write a function to convert an ascii value to characte"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        return ord(k)\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for index, item in enumerate(arr):\n        if index % 2 == 0:\n            sum += item\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0) and (arr[i] % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) <= 1:\n        return arr\n    return arr[0::2] + sum_even_and_even_index(arr[1::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    even_pos_list = []\n    odd_list = []\n    for i in range(len(arr)):\n        if i%2 == 0:\n            even_list.append(arr[i])\n        else:\n            odd_list.append(arr[i])\n    for i in even_list:\n        even_pos_list.append(sum(even_list))\n    return even_pos_list + odd_list\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = []\n    for i in range(len(arr)):\n        if i%2 == 0:\n            evens.append(arr[i])\n    return sum(evens)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            s = s + arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = []\n    even_index_sum = 0\n    odd_index_sum = 0\n    #input\n    for i in range(len(arr)):\n        if i%2==0:\n            even_numbers.append(arr[i])\n    #processing\n    for j in range(len(even_numbers)):\n        if j%2==0:\n            even_index_sum += even_numbers[j]\n    #output\n    print(even_index_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    i = 0\n    while i < len(arr):\n        if (arr[i] % 2 == 0):\n            total += arr[i]\n        i += 1\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_list = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_list.append(arr[i])\n            sum += arr[i]\n    print(sum)\n    print(even_list)\n    return even_list\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # check if n is a valid value\n    if n < 1:\n        return \"Invalid value.\"\n    \n    # initialize even_sum and set value to 0\n    even_sum = 0\n    \n    # for loop to find the sum\n    for i in range(1, n+1):\n        if i%2 == 0:\n            even_sum += i**5\n            \n    return even_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #-----------------------------------\n    # Code Here\n    #-----------------------------------\n    # Your code should return the answer in a list\n    \n    sum_list=[]\n    n=int(n)\n    for i in range(n):\n        sum_list.append(pow(i,5))\n    return sum_list\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(n))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # answer = 0\n    # for i in range(n):\n    #     if i%2==0:\n    #         answer+=pow(i,5)\n    #         print(answer)\n    # return answer\n    return sum([pow(i,5) for i in range(n) if i%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\nprint(even_Power_Sum(1))\nprint(even_Power_Sum(2))\nprint(even_Power_Sum(3))\nprint(even_Power_Sum(5))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n): \n        if i%2==0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n    \ndef filter_rear_extract(test_list, function):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing only those tuples whose rear element satisfies a given function.\n    '''\n    return [tup for tup in test_list if function(tup[-1])]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for element in test_list:\n        return_list.append(element[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    if len(test_list) == 0:\n        return test_list\n    else:\n        return test_list[-1]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for item in test_list:\n        return_list.append(item[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return[test_list[i][2] for i in range(len(test_list))]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[0] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[-1] for element in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][-1])\n    return return_list\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output = []\n    for i in range(len(test_tup1)):\n        output.append(test_tup1[i] - test_tup2[i])\n    return output\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup = test_tup1[i] - test_tup2[i]\n    return sub_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    a = list(test_tup1)\n    b = list(test_tup2)\n    \n    for i in range(len(a)):\n        a[i] = a[i] - b[i]\n    return tuple(a)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i], )\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n        return test_tup1\n        \n            \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiplies the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] *= test_tup2[i]\n        return test_tup1\n        \n        \ndef add_tuple(tuple1, tuple2):\n    '''\n    Write a function that adds two tuples element-wise.\n    '''\n    if len(tuple1)!= len(tuple2):\n        return -1\n    else:\n        new_tuple = ()\n        for i in range(len(tuple1)):\n            new_tuple += (tuple1[i] + tuple2[i],)\n        return new_tuple\n        \n        \ndef subtract_tuple(tuple1, tuple2):\n    '''\n    Write a function that subtracts one tuple from another.\n    '''\n    if len(tuple1)!= len(tuple2):\n        return -1\n    else:\n        new_tuple = ()\n        for i in range(len(tuple1)):\n            new_tuple += (tuple1[i] - tuple2[i],)\n        return new_tuple\n        \n        \ndef divide_tuple(tuple1, tuple2):\n    '''\n    Write a function that divides one tuple from another.\n    '''\n    if len(tuple1)!= len(tuple2):\n        return -1\n    else:\n        new_tuple = ()\n        for i in range(len(tuple1)):\n            new_tuple += (tuple1[i] / tuple2[i],)\n        return new_tuple\n        \n        \ndef reverse_tuple(tuple1):\n    '''\n    Write a function that reverses a tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(tuple1)):\n        new_tuple += (tuple1[len(tuple1) - i - 1],)\n    return new_tuple\n        \n        \ndef check_tuples(test_tuple1, test_tuple2):\n    '''\n    Write a function that takes two tuples and compares them using the following rules:\n    - The number of elements must be equal\n    - The first tuple must contain all of the elements in the second tuple\n    - The second tuple must contain all of the elements in the first tuple\n    - The first tuple must contain a subset of the elements in the second tuple\n    - The second tuple must contain a subset of the elements in the first tuple\n    - The first tuple must not contain the same elements as the second tuple\n    - The second tuple must not contain the same elements as the first tuple\n    '''\n    if len(test_tuple1)!= len(test_tuple2):\n        return -1\n    else:\n        if test_tuple1 == test_tuple2:\n            return 0\n        if tuple(test_tuple1) == tuple(test_tuple2):\n            return 1\n        if tuple(test_tuple1) == tuple(reverse_tuple(test_tuple2)):\n            return 1\n        if tuple(reverse_tuple(test_tuple1)) == tuple(test_tuple2):\n            return 1\n        if tuple(test_tuple2) == tuple(reverse_tuple(test_tuple1)):\n            return 1\n        if tuple(test_tuple2) == tuple(substract_tuple(test_tuple1, test_tuple2)):\n            return 1\n        if tuple(substract_tuple(test_tuple2, test_tuple1)) == tuple(test_tuple2):\n            return 1\n        if tuple(test_tuple2) == tuple(add_tuple(test_tuple1, test_tuple2)):\n            return 1\n        if tuple(add_tuple(test_tuple2, test_tuple1)) == tuple(test_tuple2):\n            return 1\n        if tuple(test_tuple1) == tuple(multiply_elements(test_tuple2, test_tuple2)):\n            return 1\n        if tuple(multiply_elements(test_tuple1, test_tuple2)) == tuple(test_tuple1):\n            return 1\n        if tuple(test_tuple1) == tuple(divide_tuple(test_tuple2, test_tuple2)):\n            return 1\n        if tuple(divide_tuple(test_tuple1, test_tuple2)) == tuple(test_tuple1):\n            return 1\n        if tuple(test_tuple2) == tuple(divide_tuple(test_tuple1, test_tuple2)):\n            return 1\n        if tuple(divide_tuple(test_tuple2, test_tuple1)) == tuple(test_tuple2):\n            return 1\n        return -1\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 = test_tup3 + (test_tup1[i] - test_tup2[i],)\n    return test_tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n        return test_tup1\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        return 1\n    elif (n == 1): \n        return 0\n    else: \n        return 2 * even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            a = a + math.factorial(i)/(math.factorial(i+1)*math.factorial(i+2))\n        if i%2!= 0:\n            b = b + math.factorial(i)/(math.factorial(i+1)*math.factorial(i+2))\n    return int(a-b)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            sum = sum + math.factorial(n - i) / (math.factorial(i) * math.factorial(n - i - 1))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            s += binomial_Coeff_Sum(i)\n    return s\n    \ndef binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of nth index binomial coefficients.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * n * binomial_Coeff_Sum(n - 1))\n    \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (math.factorial(n) / (math.factorial(2) * math.factorial(n-2)))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += binomial_coeff_sum(n, i)\n        i += 1\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = []\n    for i in range(1, n+1):\n        binomial_coeff.append(binomialCoeff(i)%(10**9+7))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    print(math.factorial(2*n))\n    return (math.factorial(2*n)/(math.factorial(n) * math.factorial(2*n-n)))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    coeff_list = []\n    for i in range(0, n + 1):\n        coeff_list.append((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))))\n        #coeff_list.append((math.factorial(n) / (math.factorial(i) * math.factorial(n - i))) % 1000000000)\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            coeff_sum += coeff_list[i]\n    return coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 1\n    i = 1\n    while i <= n:\n        result = result * (i - 0.5 )\n        i = i + 1\n    return result\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi, sqrt\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r * r * h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math as m\n    v=m.pi*r*r*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi*r*r*h\n    #return 2*pi*r*r*h\n    #return (pi*r*r*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14*r*r*h\n    return V\n    #volume of a cylinder can be found using the formula: 3.14*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi * (r**2) * h)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3/5)*3.14159*r*h\n    return volume\ndef surface_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the surface.\n    '''\n    surface = 2*3.14159*r*(h+r)\n    return surface\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy = dict.copy()\n    for key in dict:\n        if dict[key] <= n:\n            del dict_copy[key]\n    return dict_copy\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if n >= 0:\n        return {k:v for k,v in dict.items() if v >= n}\n    else:\n        return {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    print(dict)\n    dict_keys = list(dict.keys())\n    dict_keys = sorted(dict_keys, reverse=True)\n    for key in dict_keys:\n        if dict[key] < n:\n            del dict[key]\n    print(dict)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for i in dict:\n        if dict[i]<=n:\n            del dict[i]\n    print(dict)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = dict.copy()\n    for key in dict.keys():\n        if result[key] <= n:\n            del result[key]\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key,value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict.keys():\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Read the tuple\n    # Get the length of the tuple\n    # Declare the variable\n    # Initialize the number of elements to 0\n    # Iterate over the tuple\n    # Increment the number of elements\n    # Return the number of elements\n    num_ele = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            num_ele = num_ele + 1\n    return num_ele\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    first_tup = ()\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] <= test_tup[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    number_of_first_elements = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            number_of_first_elements += 1\n    return number_of_first_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_occurrence = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == 0:\n            first_occurrence += 1\n        else:\n            break\n    return first_occurrence\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    if len(test_tup) < 2:\n        return 0\n    else:\n        return test_tup.count(test_tup[0]) + count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    l = []\n    for i in range(len(test_tup)):\n        l.append(test_tup[i])\n    return l.index(test_tup[0])\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    counter = 1\n    x = 1\n    while counter <= n:\n        x = x*(1-1/x)\n        counter += 1\n    return x\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n * 10\n    ans = 1\n    while n > 0:\n        n, i = divmod(n, 10)\n        ans += i * pow(10, (i - 1))\n    return ans\n    "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if not isinstance(n,int):\n        return False\n    if n<=0:\n        return False\n    \n    num = 0\n    for i in range(n):\n        num = num*10+1\n        \n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<0: return -1\n    elif n<=1: return n\n    else:\n        total = (n*(n+1))/2\n        return total\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base case\n    if n == 0: return 1\n    # Recursion\n    else:\n        return 1 + is_num_decagonal(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    n -= 1\n    while n > 0:\n        num *= 10\n        num += 9\n        n -= 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1,n+1):\n        num += 3**(i-1)\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    total = 1\n    while count <= n:\n        total = total * (1 - 0.05)\n        count += 1\n    return total\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n**(1/2))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while not found and index < len(dlist):\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    found = False\n    while i < len(dlist) and not found:\n        if item == dlist[i]:\n            found = True\n        else:\n            i += 1\n    if not found:\n        i = -1\n    return found, i\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(0, len(dlist)):\n        if item == dlist[i]:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for x in range(0, len(dlist)):\n        if dlist[x] == item:\n            return True, x\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    found = False\n    pos = 0\n    while pos < len(dlist) and found == False:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    \n    if found == True:\n        return (True, pos)\n    else:\n        return(False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    start = 0\n    end = len(dlist) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if dlist[mid] == item:\n            return True, mid\n        elif item < dlist[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #code here\n    \n    #if unique list\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    for i in range(1,len(test_list)):\n        if test_list[i] == test_list[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i]==test_list[j]):\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    if test_list:\n        for i in range(0, len(test_list)):\n            for j in range(i+1, len(test_list)):\n                if test_list[i] == test_list[j]:\n                    unique = False\n                    break\n        if unique:\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i)>1:\n            return False\n        else:\n            return True\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 1:\n        return True\n    for i in range(1,len(test_list)):\n        if test_list[i] == test_list[i-1]:\n            return False\n    return True\nprint(all_unique([1,1,2,3,5,5,6,5,5]))\nprint(all_unique(['a','b','c','d','e']))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n        \ntest_list1 = [1,2,3,4,5]\ntest_list2 = [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # for x in range(len(test_list)):\n    #     if test_list.count(test_list[x]) > 1:\n    #         return False\n    # return True\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x1 - x2 for x1, x2 in zip(nums1,nums2)]\n    #Time: O(n) / Space: O(1)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i - j for i, j in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    lst = []\n    for i in range(len(nums1)):\n        lst.append(nums1[i]-nums2[i])\n    return lst\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for x,y in zip(nums1,nums2):\n        new_list.append(x-y)\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i] - nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sum_list = []\n    for i, j in zip(nums1, nums2):\n        sum_list.append(i-j)\n    return sum_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # code here\n    freq = {}\n    for i in str(n):\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # function starts\n    #convert the integer to string and then split the string to get each digit\n    str_n = str(n)\n    arr_n = list(str_n)\n    #create a list of each digit and count how many times it occurs in the string\n    count_arr = []\n    for i in arr_n:\n        count_arr.append(arr_n.count(i))\n    #check each digit\n    for i in range(0,len(count_arr)):\n        if count_arr[i] >= i:\n            print(f'{n} is not a valid number')\n            return False\n    print(f'{n} is a valid number')\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=0\n    while n!=0:\n        s=s*10+n%10\n        n=n//10\n    return s\n    \n    \n    \ndef validate_v2(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=0\n    d={}\n    while n!=0:\n        d[n%10]=d.get(n%10,0)+1\n        s=s*10+n%10\n        n=n//10\n    return s,d\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    str_n=str(n)\n    return str_n==str_n[::-1]\n    \n    \ndef is_palindrome_v2(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    str_n=str(n)\n    i=0\n    j=len(str_n)-1\n    while i<=j:\n        if str_n[i]!=str_n[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v3(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    if s==s[::-1]:\n        return True\n    return False\n    \n    \ndef is_palindrome_v4(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    return s==s[::-1]\n    \n    \ndef is_palindrome_v5(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v6(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    return n==n[::-1]\n    \n    \ndef is_palindrome_v7(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v8(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    return s==s[::-1]\n    \n    \ndef is_palindrome_v9(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v10(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v11(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v12(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v13(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v14(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v15(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v16(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v17(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v18(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v19(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<="
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n//10\n    \n    if count <= (len(str(n))):\n        return True\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n)\n    # for i in range(len(str_n)):\n    #     if str_n.count(str_n[i]) > 1:\n    #         print(\"valid\")\n    #     else:\n    #         print(\"invalid\")\n    # print(str_n.count(str_n[i]))\n    cnt = 1\n    for i in range(len(str_n)):\n        if str_n.count(str_n[i]) > cnt:\n            print(\"invalid\")\n            return False\n        else:\n            cnt = str_n.count(str_n[i])\n    print(\"valid\")\n    return True\n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if int(n) % 10 > n:\n            return False\n        n = int(n / 10)\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return False\n    \n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    \n    return count <= n\n    \ndef test(s):\n    print(validate(s))\n    print(validate(123456789))\n    print(validate(1234567890))\n    print(validate(1234567))\n    print(validate(123))\n    \nif __name__ == \"__main__\":\n    test(123456789)\n    test(1234567890)\n    test(1234567)\n    test(123)\n    test(0)"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    counter = dict()\n    for i in n:\n        if i in counter:\n            counter[i] = counter[i] + 1\n        else:\n            counter[i] = 1\n    for i in counter:\n        if counter[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = {i:0 for i in range(10)}\n    while n > 0:\n        digits[n % 10] += 1\n        n = n//10\n    for k,v in digits.items():\n        if k == 1:\n            if v >= 2:\n                return False\n        elif k == 2:\n            if v >= 3:\n                return False\n        elif k == 3:\n            if v >= 4:\n                return False\n        elif k == 4:\n            if v >= 5:\n                return False\n        elif k == 5:\n            if v >= 6:\n                return False\n        elif k == 6:\n            if v >= 7:\n                return False\n        elif k == 7:\n            if v >= 8:\n                return False\n        elif k == 8:\n            if v >= 9:\n                return False\n        elif k == 9:\n            if v >= 10:\n                return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    cnt = 0\n    while n:\n        n //= 10\n        cnt += 1\n    return cnt < 9\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list == element\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        for i in list:\n            if i == element:\n                return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    if list[0] == element:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n    \ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        count += 1\n        if i == element:\n            pass\n        else:\n            return False\n    return count\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    flag = False\n    for i in list:\n        if i == element:\n            flag = True\n        else:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    else:\n        if element == list[0]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r\"a{2,3}b\",text))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # case one\n    match = re.search(\"b.{3}b\", text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match\")\n    \n    # case two\n    match = re.search(\"b.{2}b\", text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match\")\n    \n    # case three\n    match = re.search(\"b.{3}b\", text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match\")\n    \n    # case four\n    match = re.search(\"b.{2,}b\", text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match\")\n    \n    # case five\n    match = re.search(\"b.{2,5}b\", text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #find the two bs \n    matches = re.findall('ab', text)\n    \n    # if not empty, return true\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #check string of type str\n    #check if the string contains the two and three 'b's\n    if re.search('^[b]bbb[b]b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # match_two_three = re.findall('ab+',text)\n    # return True if match_two_three else False\n    return re.findall('ab+',text)!= []\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # your code here\n    if text.find(\"a\") == -1 or text.find(\"b\") == -1:\n        return False\n    \n    if text[text.find(\"a\")+1] == \"b\" and text[text.find(\"b\")+1] == \"b\" or text[text.find(\"b\")+1] == \"b\" and text[text.find(\"b\")+1] == \"b\":\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 2 and a < 6 else True\n    except:\n        return False\n    \ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 1 and a < 4 else True\n    except:\n        return False\n    \ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 3 and a < 7 else True\n    except:\n        return False\n    \ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 3 and a < 7 else True\n    except:\n        return False\n    \ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 2 and a < 6 else True\n    except:\n        return False\n    \ndef text_match_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 4 and a < 8 else True\n    except:\n        return False\n    \ndef text_match_four_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 4 and a < 8 else True\n    except:\n        return False\n    \ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 5 and a < 9 else True\n    except:\n        return False\n    \ndef text_match_five_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 5 and a < 9 else True\n    except:\n        return False\n    \ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 6 and a < 10 else True\n    except:\n        return False\n    \ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 7 and a < 11 else True\n    except:\n        return False\n    \ndef text_match_one_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 1 and a < 4 else True\n    except:\n        return False\n    \ndef text_match_two_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 2 and a < 6 else True\n    except:\n        return False\n    \ndef text_match_three_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 3 and a < 7 else True\n    except:\n        return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 3 and a < 7 else True\n    except:\n        return False\n    \ndef text_match_four_five_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 4 and a < 8 else True\n    except:\n        return False\n    \ndef text_match_four_five_six_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 4 and a < 8 else True\n    except:\n        return False\n    \ndef text_match_five_six_seven_eight_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 5 and a < 9 else True\n    except:\n        return False\n    \ndef text_match_five_six_seven_eight_nine_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 5 and a < 9 else True\n    except:\n        return False\n    \ndef text_match_six_seven_eight_nine_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 6 and a < 10 else True\n    except:\n        return False\n    \ndef text_match_seven_eight_nine_ten_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 7 and a < 11 else True\n    except:\n        return False\n    \ndef text_match_eight_nine_ten_eleven_twelve_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 8 and a < 12 else True\n    except:\n        return False\n    \ndef text_match_nine_ten_eleven_twelve_thirteen_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    \n    try:\n        a = text.index('a')\n        return False if a > 9 and a < 13 else True\n    except:\n        return False\n    \ndef text_match_ten_eleven_twelve_thirteen_fourteen_fifteen(text):\n    '''\n    Write a function that check"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'(a\\s*b\\s*)+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.findall(r'ab{2,}',text) else False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('a') == 2 and text.find('b') == 2:\n        return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    #i = 0\n    #j = 1\n    for i in range(0, k): \n        \n        #j = i+1\n        for j in range(i+1, n): \n            print(\"i: \", i)\n            print(\"j: \", j)\n            print(\"Max: \", max_sum)\n            print(\"nums: \", a[i:j])\n            print(\"Max_sub_sum: \", max(a[i:j]))\n            if max_sum < max(a[i:j]):\n                max_sum = max(a[i:j])\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i < n-k:\n            continue\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # if array is empty \n    if n==0: \n        return 0 \n    # Initialize current_max to 0 \n    current_max = 0\n    # Initialize result to 0 \n    result = 0\n    # Initialize running_sum to 0 \n    running_sum = 0\n    # Initialize i and j to 0 \n    i = 0\n    j = 0\n    while j < n: \n        # if i < k, keep adding arr[i] \n        running_sum += a[j]\n        if i < k: \n            j += 1\n        # If running_sum > current_max, keep adding arr[i] \n        if running_sum > current_max: \n            current_max = running_sum\n            result = a[i] \n            i += 1\n        # If running_sum == current_max, keep adding arr[i] \n        elif running_sum == current_max: \n            result = max(a[i], result) \n            i += 1\n        else: \n            running_sum -= a[i] \n            i += 1\n    return result \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = -9999999999999999999999999\n    for i in range(n-k+1):\n        s = 0\n        for j in range(k):\n            s += a[i+j]\n        if ans < s:\n            ans = s\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = 0\n    for i in range(n):\n        a[i] += k * a[i - l]\n        l += 1\n    print(a)\n    max_sum = a[0]\n    for i in range(n):\n        if max_sum < a[i]:\n            max_sum = a[i]\n    print(max_sum)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = 0\n    max_sum = float('-inf')\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    largest = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            temp = k * a[i:j]\n            if sum(temp) > largest:\n                largest = sum(temp)\n    return largest\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Base Cases\n    if n == 0 or k == 0:\n        return 0\n    if k == 1:\n        return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1e9\n    start_index = -1\n    if k == 0:\n        for i in range(n):\n            if max_sum < a[i]:\n                max_sum = a[i]\n                start_index = i\n    elif n < k:\n        return -1\n    elif k == 1:\n        for i in range(n):\n            if max_sum < a[i]:\n                max_sum = a[i]\n                start_index = i\n    else:\n        while n + start_index < k - 1:\n            start_index += 1\n        for i in range(start_index, n):\n            if max_sum < a[i]:\n                max_sum = a[i]\n                start_index = i\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -sys.maxsize\n    for i in range(n - k): \n        sub_sum = 0\n        for j in range(k): \n            sub_sum += a[i + j] \n        if (sub_sum > max_sum): \n            max_sum = sub_sum \n    return max_sum \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i%2 ==0:\n            result = result + i**2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #initialize sum to 0\n    sum = 0\n    #use while loop to keep adding number to sum\n    while n > 0:\n        #if number is even add it to sum\n        if n % 2 == 0:\n            sum += n\n        #increment number by 1\n        n = n + 1\n    #return sum\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i*i\n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if (n == 1):\n        return 1\n    \n    return (n*(n+1))//2\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if(i%2==0):\n            sum += i**2\n    return sum\ndef rectangle_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\ndef cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\ndef can_Partition(nums):\n    '''\n    Write a python function that takes in an array of integers and returns true if it is possible to split the array into two subsets such that the sum of elements in both the subsets is equal.\n    '''\n    if (sum(nums)%2!=0):\n        return False\n    if (len(nums)==1):\n        return True\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    if (nums[0]<0):\n        return False\n    if (nums[0]==0):\n        return can_Partition(nums[1:])\n    if (nums[0]==1):\n        return can_Partition(nums[1:]) or can_Partition(nums[1:])\n    if (nums[0]>1):\n        return can_Partition(nums[1:]) and can_Partition(nums[1:])\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x*x for x in range(1,n+1,2))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return sum(x*x for x in range(n) if x%2==0)\n    \n    \ndef nested_sum(l):\n    '''\n    Write a python function takes in a list of integers and returns the sum of all even elements, followed by the sum of all odd elements.\n    '''\n    if l == []:\n        return 0\n    else:\n        if l[0]%2==0:\n            return l[0]+nested_sum(l[1:])\n        else:\n            return nested_sum(l[1:])\n    \n    \ndef max_n(l):\n    '''\n    Write a python function takes in a list of integers and returns the max element of all the elements.\n    '''\n    if l == []:\n        return None\n    else:\n        if l[0]>max_n(l[1:]):\n            return l[0]\n        else:\n            return max_n(l[1:])\n    \n    \ndef count_char(s, c):\n    '''\n    Write a python function takes in a string and char c and returns the number of times the char appears in the string.\n    '''\n    count = 0\n    if s == \"\":\n        return 0\n    else:\n        if s[0] == c:\n            count+=1\n            return count+count_char(s[1:],c)\n        else:\n            return count_char(s[1:],c)\n    \n    \ndef interleave(l1,l2):\n    '''\n    Write a python function takes in two lists and returns a list containing the elements of l1 followed by the elements of l2, such that the ordering is maintained.\n    '''\n    if l1 == [] or l2 == []:\n        return []\n    else:\n        return l1[:1]+l2+l1[1:]\n    \n    \ndef remove_duplicates(l):\n    '''\n    Write a python function takes in a list and returns a new list with all duplicate elements removed.\n    '''\n    if l == []:\n        return []\n    else:\n        return remove_duplicates(l[1:]) if l[0]==l[1] else l[:1]+remove_duplicates(l[1:])\n    \n    \ndef powerset(s):\n    '''\n    Write a python function takes in a set and returns a list of all its subsets.\n    '''\n    if s == set():\n        return []\n    else:\n        subset = []\n        for i in range(1,2**len(s)):\n            subset.append(list(format(i,'b').zfill(len(s))))\n        return subset\n    \n    \ndef write_anagrams(l1,l2):\n    '''\n    Write a python function takes in two lists and returns a list of tuples containing the words that are anagrams of each other.\n    '''\n    if l1 == [] or l2 == []:\n        return []\n    else:\n        a = []\n        for word in l1:\n            for i in range(len(l2)):\n                if sorted(word)==sorted(l2[i]):\n                    a.append((word,l2[i]))\n        return a\n    \n    \ndef prime_numbers(l):\n    '''\n    Write a python function takes in a list of positive integers and returns a list of all the prime numbers in that list.\n    '''\n    if l == []:\n        return []\n    else:\n        prime_numbers = []\n        for num in l:\n            for i in range(2,num):\n                if num%i == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n        return prime_numbers\n    \n    \ndef triple_multiples(n):\n    '''\n    Write a python function takes in a positive integer and returns the triple multiple of its value.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*n*n\n    \n    \ndef coin_change(denominations,amount):\n    '''\n    Write a python function takes in a list of coin denominations and an amount, returns the minimum number of coins needed to sum up to the amount.\n    '''\n    if amount == 0:\n        return 0\n    else:\n        denominations = sorted(denominations,reverse=True)\n        count = 0\n        for coin in denominations:\n            if coin <= amount:\n                count+=1\n                amount = amount-coin\n            else:\n                break\n        return count\n    \n    \ndef sort_and_count(l):\n    '''\n    Write a python function takes in a list of integers and returns the number of times the integers appear in the sorted order.\n    '''\n    if l == []:\n        return 0\n    else:\n        count = 0\n        for i in range(len(l)):\n            for j in range(i,len(l)):\n                if l[i]>l[j]:\n                    l[i],l[j]=l[j],l[i]\n        return len(l)-1\n    \n    \ndef shortest_word(s1,s2):\n    '''\n    Write a python function takes in two strings and returns the shortest of the two strings.\n    '''\n    if s1 == \"\" or s2 == \"\":\n        return \"\"\n    else:\n        return min(s1,s2)\n    \n    \ndef insertionsort(l):\n    '''\n    Write a python function takes in a list of integers and returns a new sorted list of integers.\n    '''\n    if l == []:\n        return []\n    else:\n        for i in range(1,len(l)):\n            value = l[i]\n            j = i-1\n            while j>=0 and l[j]>value:\n                l[j+1]=l[j]\n                j-=1\n            l[j+1]=value\n        return l\n    \n    \ndef unique_in_order(l):\n    '''\n    Write a python function takes in a list of integers and returns a list of those integers in order of occurrence.\n    '''\n    if l == []:\n        return []\n    else:\n        if l[0]!=l[-1]:\n            l.append(l[0])\n        else:\n            l.append(l[0])\n            l.pop(0)\n        return unique_in_order(l)\n    \n    \ndef replace_letters(s1,s2):\n    '''\n    Write a python function takes in two strings and returns the first string with all occurrences of the second string in the first string replaced by the second string.\n    '''\n    if s1 == \"\" or s2 == \"\":\n        return \"\"\n    else:\n        for i in range(len(s1)):\n            if s1[i]==s2:\n                s1 = s1[:i]+s2+s1[i+1:]\n        return s1\n    \n    \ndef right_justify(s,l):\n    '''\n    Write a python function takes in a string and a number and returns the string right-justified in a new string.\n    '''\n    if s == \"\" or l == 0:\n        return \"\"\n    else:\n        if l>=len(s):\n            return s\n        else:\n            for i in range(l-len(s)):\n                s+=\" \"\n            return s\n    \n    \ndef reverse(l):\n    '''\n    Write a python function takes in a list of integers and returns a list of integers in reverse order.\n    '''\n    if l == []:\n        return []\n    else:\n        return l[::-1]\n    \n    \ndef palindrome(s):\n    '''\n    Write a python function takes in a string and returns whether the string is a palindrome or not.\n    '''\n    if s == \"\":\n        return True\n    else:\n        s = s.lower()\n        s = s.replace(\" \",\"\")\n        return s == s[::-1]\n    \n    \ndef anagrams(s1,s2):\n    '''\n    Write a python function takes in two strings and returns True if they are anagrams of each other or False otherwise.\n    '''\n    i"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    total_Sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total_Sum += i * i\n    \n    return total_Sum\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sublist in list1:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_max=[]\n    for list in list1:\n        list_max.append(len(list))\n    max_len=max(list_max)\n    for i in range(len(list_max)):\n        if max_len==list_max[i]:\n            return list1[i]\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    print(\"Max length of each element:\", max_length)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for i in list1:\n        lengths.append(len(i))\n    max_len = max(lengths)\n    return(max_len)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j]) > result:\n                result = len(list1[i][j])\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=list1[0]\n    for i in range(len(list1)):\n        if len(list1[i])>len(max_len):\n            max_len=list1[i]\n    return max_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    length_list = len(list1)\n    for i in range(length_list):\n        max_length_list.append(len(list1[i]))\n    return max(max_length_list)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    \n    # Edge cases\n    if k == 2:\n        if n >= 3:\n            return (n*(n-1))//2\n        else:\n            return 0\n    \n    if k == 0:\n        return 0\n    \n    if k > 2:\n        ways = count_no_of_ways(n, k-1)\n    \n    # Base case\n    if k == 1:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return 0\n    \n    # If n > 2\n    if n > 1:\n        ways = ways + count_no_of_ways(n-1, 1)\n    \n    # Else k == 2\n    if n == 2:\n        return (n*(n-1))//2\n    else:\n        return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n<=1 or k==0:\n        return 0\n    \n    if n==2 and k==1:\n        return 1\n    \n    if n>2 and k>1:\n        return count_no_of_ways(n-2,k) + count_no_of_ways(n-2,k-1)\n        \n    return count_no_of_ways(n-2,k)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n<=0:\n        return 0\n    \n    if k==1:\n        return n\n    \n    \n    return count_no_of_ways(n-1, k)+count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1:\n        return 1\n    if n==2 and k==2:\n        return 3\n    if k==1:\n        return 2\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k-2)\n    "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1: \n        if k == 1: \n            return 1\n        else: \n            return 0\n    else:\n        if k == 1: \n            return 0\n        else: \n            return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0: return 1\n    if n<=2: return 2\n    if k==0 or k==1: return 0\n    \n    \n    if k==2:\n        if n==4:\n            return 1\n        elif n==5:\n            return 2\n    \n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    arr = [[1] * (k + 1) for _ in range(n + 1)] \n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            arr[i][j] = arr[i - 1][j] + arr[i][j - 1] \n    return arr[n][k] \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    \n    # n-1 colors, k colors\n    count = k*(k+1)//2\n    \n    # n-2 colors, k-2 colors\n    # k-1 colors, k-1 colors\n    count += k*(k-1)//2 + k*(k-2)//2\n    \n    # n-3 colors, k colors\n    # k-1 colors, k-2 colors\n    # k-2 colors, k-3 colors\n    # k-3 colors, k-4 colors\n    count += k*(k-1)//2 + k*(k-2)//2 + k*(k-3)//2 + k*(k-4)//2\n    \n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Defining a table\n    ways = [[0]*k for i in range(n)]\n    # Defining a variables\n    ways[0] = [1]*k\n    \n    # Base case\n    for i in range(n):\n        ways[i][0] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    arr = [1] * (k + 1)\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            arr[j] = arr[j] + arr[j - 1]\n    return arr[-1]\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    ans = (n//m)\n    print(ans)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(m / n)\n    quotient = quotient + 1 if quotient*n<m else quotient\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return(n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # edge case\n    if m == 0:\n        print(\"Divisor cannot be zero. Enter a valid divisor.\")\n    else:\n        print(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (m == 0):\n        return n\n    else:\n        return find(n,m-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(m/n)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h)/2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def side_ratio(side1,side2):\n        '''\n        The formula is\n        s=(a+b)/2\n        where s is the side and a,b are the two sides of the triangle\n        '''\n        if side1<=0 or side2<=0:\n            return 'Error, sides of the triangle should be greater than zero'\n        else:\n            return round(math.sqrt(side1**2+side2**2)/2,2)\n    s1 = side_ratio(w,h)\n    s2 = side_ratio(w,s1)\n    s3 = side_ratio(s1,h)\n    return s1,s2,s3\ndef right_triangle(s1,s2,s3):\n    '''\n    Write a function to find the hypotenuse of the right triangle.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return 'Error, sides of the triangle should be greater than zero'\n    else:\n        return round(math.sqrt((s1**2+s2**2)/(s1**2+s2**2-s3**2)),2)\ndef triangle_area(s1,s2,s3):\n    '''\n    Write a function to find the area of the triangle.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return 'Error, sides of the triangle should be greater than zero'\n    else:\n        s1_s2 = s1+s2\n        s2_s3 = s2+s3\n        s3_s1 = s3+s1\n        return round(s1_s2*s2_s3/2,2)\ndef right_triangle_ratio(s1,s2,s3):\n    '''\n    Write a function to find the ratio between the hypotenuse and the \n    sum of the other two sides of the triangle.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return 'Error, sides of the triangle should be greater than zero'\n    else:\n        return round(math.sqrt(s1**2+s2**2)/(s1+s2),2)\ndef rectangular_area(s1,s2):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if s1<=0 or s2<=0:\n        return 'Error, sides of the rectangle should be greater than zero'\n    else:\n        return round(s1*s2,2)\ndef area_of_circular_sector(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    if radius<=0:\n        return 'Error, radius should be greater than zero'\n    else:\n        return round(math.pi*radius**2,2)\ndef left_triangle(s1,s2,s3):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return 'Error, sides of the triangle should be greater than zero'\n    else:\n        return round(s1+s2,2)\ndef right_triangle_ratio(s1,s2,s3):\n    '''\n    Write a function to find the ratio between the hypotenuse and the \n    sum of the other two sides of the triangle.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return 'Error, sides of the triangle should be greater than zero'\n    else:\n        return round(math.sqrt(s1**2+s2**2)/(s1+s2),2)\ndef sphere_volume(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if radius<=0:\n        return 'Error, radius should be greater than zero'\n    else:\n        return round(4*math.pi*(radius**3)/3,2)\ndef cylinder_volume(radius,height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if radius<=0 or height<=0:\n        return 'Error, radius should be greater than zero and height should be greater than zero'\n    else:\n        return round(math.pi*radius*height,2)\ndef right_triangle_ratio(s1,s2,s3):\n    '''\n    Write a function to find the ratio between the hypotenuse and the \n    sum of the other two sides of the triangle.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return 'Error, sides of the triangle should be greater than zero'\n    else:\n        return round(math.sqrt(s1**2+s2**2)/(s1+s2),2)\ndef rect_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    if length<=0 or width<=0:\n        return 'Error, length and width should be greater than zero'\n    else:\n        return round(2*(length+width),2)\ndef rectangular_surface_area(length,width):\n    '''\n    Write a function to find the surface area of a rectangular surface.\n    '''\n    if length<=0 or width<=0:\n        return 'Error, length and width should be greater than zero'\n    else:\n        return round(2*(length*width),2)\ndef sphere_surface_area(radius):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if radius<=0:\n        return 'Error, radius should be greater than zero'\n    else:\n        return round(4*math.pi*(radius**2),2)\ndef area_of_right_triangle(s1,s2,s3):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return 'Error, sides of the triangle should be greater than zero'\n    else:\n        return round(0.5*math.sqrt(s1**2+s2**2)*s3,2)\ndef right_triangle_ratio(s1,s2,s3):\n    '''\n    Write a function to find the ratio between the hypotenuse and the \n    sum of the other two sides of the triangle.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return 'Error, sides of the triangle should be greater than zero'\n    else:\n        return round(math.sqrt(s1**2+s2**2)/(s1+s2),2)\ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if length<=0 or width<=0:\n        return 'Error, length and width should be greater than zero'\n    else:\n        return round(length*width,2)\ndef polygon_perimeter(sides):\n    '''\n    Write a function to find the perimeter of a polygon.\n    '''\n    if sides<=0:\n        return 'Error, sides should be greater than zero'\n    else:\n        return round((sides-2)*sides/2,2)\ndef polygon_surface_area(sides):\n    '''\n    Write a function to find the surface area of a polygon.\n    '''\n    if sides<=0:\n        return 'Error, sides should be greater than zero'\n    else:\n        return round((sides-2)*sides/2,2)\ndef spherical_surface_area(radius):\n    '''\n    Write a function to find the surface area of a spherical surface.\n    '''\n    if radius<=0:\n        return 'Error, radius should be greater than zero'\n    else:\n        return round(4*math.pi*radius**2,2)\ndef polar_to_cartesian(radius,angle):\n    '''\n    Write a function to find the cartesian coordinate"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\nprint(\"Functions: \", otherside_rightangle.__doc__)\ndef pythagoras(a, b):\n    '''\n    Write a function to find the distance between the center of a circle and the center of the opposite circle\n    '''\n    # Calculating the distance between the two centers\n    distance = math.sqrt(a**2 + b**2)\n    # Calculating the distance between the center of the circle and the center of the opposite circle\n    # (The formula for this is as follows: ((a**2) + (b**2)))/2)\n    # If we were to calculate this formula, we would be calculating it twice, so we need to only calculate it once.\n    # Also, we don't need to calculate the formula twice, so we calculate it twice.\n    # Distance = math.sqrt((a**2) + (b**2))/2\n    # If you are wondering why, you are asking why not, because we calculated it twice.\n    # The answer to the question is that we use two different equations.\n    # Each equation has its own center, so the distance between the centers would be calculated twice.\n    # The answer to the question is that we use two different equations.\n    # Both equations have a different center, so the distance between the centers would be calculated twice.\n    return distance\nprint(\"Functions: \", pythagoras.__doc__)\ndef is_palindrome(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome.__doc__)\ndef is_palindrome_2(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome_2.__doc__)\ndef is_palindrome_3(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome_3.__doc__)\ndef is_palindrome_4(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome_4.__doc__)\ndef is_palindrome_5(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome_5"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2 - 2*w*h*math.sqrt(w**2 + h**2))**0.5\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 - h**2 - 2*h*w*math.sqrt(w**2 + h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2 - 2*h*w)**0.5\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2 - 2*w*h\ndef mytriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2 - 2*w*h\ndef otherside_trapezoid(w,h,x):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2 - 2*w*h - x*(w+h)\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 - h**2 - 2*w*h\ndef otherside_squat(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 - h**2 - 2*h*w\ndef otherside_cube(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2 - 2*w*h\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pi*r**2\ndef otherside_square_corner(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y\ndef otherside_triangle_corner(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y\ndef otherside_rectangle_corner(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_2(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_3(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_4(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_5(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_6(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_7(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_8(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_9(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_10(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_11(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_12(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_13(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_14(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_15(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_16(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_17(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_18(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_19(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_20(x,y,z):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return x**2 + y**2 - 2*x*y - 2*y*z\ndef otherside_square_corner_21(x,y,z):\n    '''\n    Write a function to find the third side of "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 - h**2)**0.5\n    \ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\n    \ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(w**2 - h**2)\n    c = math.sqrt((h**2) * (a**2) - (w**2) * (b**2))\n    \n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt((w**2+h**2)/2))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2/h\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #return -w / math.sqrt(h**2 - w**2)\n    return -w/math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    result = []\n    for num in listval:\n        if type(num) is int:\n            if len(result) < 1:\n                result.append(num)\n            else:\n                result.append(num if num > result[0] else result[0])\n        elif type(num) is float:\n            if len(result) < 1:\n                result.append(num)\n            else:\n                result.append(num if num > result[0] else result[0])\n        else:\n            if len(result) < 1:\n                result.append(num)\n            else:\n                result.append(num if num > result[0] else result[0])\n    return result\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = 0\n    for val in listval:\n        if val > max_value:\n            max_value = val\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_value = listval[0]\n    for elem in listval:\n        if elem > max_value:\n            max_value = elem\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if max < i:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for x in listval:\n        if isinstance(x, int):\n            maxval = max(maxval, x)\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    res = listval[0]\n    for i in range(1,len(listval)):\n        if res < listval[i]:\n            res = listval[i]\n    return res\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_v = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_v:\n            max_v = listval[i]\n    return max_v\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 1\n    while div <= number:\n        if number % div == 0:\n            sum_div += div\n        div += 1\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum_div += i\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([1 for i in range(1, number+1) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num = str(number)\n    if not is_number(number):\n        raise TypeError(\"The input is not an integer.\")\n    total = 0\n    for i in range(1, len(num) + 1):\n        if is_number(num[:i]) and int(num[:i]) ** 2 == int(number):\n            total += int(num[:i])\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    if number <= 1:\n        return 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n    \ndef divisible_by_sum(number):\n    '''\n    Write a function to return True if a number is divisible by sum of its own digits and digits of its adjacent numbers.\n    '''\n    if number <= 1:\n        return True\n    list_number = str(number)\n    sum_of_number = sum([int(i) for i in list_number])\n    if number % sum_of_number == 0:\n        return True\n    else:\n        return False\n        \ndef is_prime(number):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is palindrome or not.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagram or not.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    str2 = str2.replace(\" \", \"\")\n    if len(str1) == len(str2):\n        list_str1 = list(str1)\n        list_str2 = list(str2)\n        list_str1.sort()\n        list_str2.sort()\n        if list_str1 == list_str2:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef is_valid(passport):\n    '''\n    Write a function to check if the passport is valid or not.\n    '''\n    if len(passport) == 8 and len(set(passport.values())) == len(passport.values()):\n        if is_anagram(passport['byr'], passport['iyr']) and is_anagram(passport['eyr'], passport['hgt']) and is_anagram(passport['hcl'], passport['ecl']) and is_anagram(passport['pid'], passport['cid']):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef sum_div_min(number):\n    '''\n    Write a function to return the sum of all the divisors of a number and the minimum of the divisors.\n    '''\n    if number <= 1:\n        return 0, 0\n    list_number = str(number)\n    sum = 0\n    min_div = 0\n    for i in range(1, len(list_number)):\n        if number % int(list_number[i]) == 0:\n            sum += int(list_number[i])\n            min_div = int(list_number[i])\n    return sum, min_div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    while divisor < number:\n        if number % divisor == 0:\n            divisor += 1\n        else:\n            divisor += 1\n    return number\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    try:\n        return 1 + sum(divisors(number))\n    except ZeroDivisionError:\n        return \"Number can't be 0\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    def mergeSort(arr): \n        if len(arr) >1: \n            mid = len(arr)//2 \n            L = arr[:mid] \n            R = arr[mid:]\n            mergeSort(L) \n            mergeSort(R)\n            i = j = k = 0\n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    arr[k] = R[j] \n                    j+=1\n                k+=1\n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n    mergeSort(arr)\n    return arr\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # code here\n    return Inversion_Count(arr)\n    \n    \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1: \n        return 0\n    else: \n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion_count = 0\n    if len(arr) == 0: \n        return inversion_count \n    pivot = arr[0] \n    for i in range(len(arr)): \n        if pivot > arr[i]: \n            inversion_count += 1\n    \n    # Lomuto partitioning \n    left = 0\n    right = len(arr) - 1\n    i = 0\n    while i <= right: \n        if arr[i] < pivot: \n            arr[left], arr[i] = arr[i], arr[left]\n            left += 1\n            i += 1\n        elif arr[i] > pivot: \n            arr[i], arr[right] = arr[right], arr[i]\n            right -= 1\n        else: \n            i += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    print(\"Enter the array values: \")\n    arr = list(map(int,input().split()))\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count = Inv_Count + 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for l in list1:\n        if type(l) == list:\n            for i in flatten_list(l):\n                flat_list.append(i)\n        else:\n            flat_list.append(l)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            for list_item in flatten_list(item):\n                flattened_list.append(list_item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\n    \ntest_list = [[], [[], []], [[[[[[[[[[[[[[[[[[[[[[[[[[[5]]]]]]]]]]]]]]]]]]]]]]]]]\nprint(flatten_list(test_list))"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # Base Case\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for i in list1:\n        if type(i) == list:\n            final_list.extend(flatten_list(i))\n        else:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    if len(list1)==1:\n        return list1\n    else:\n        for i in range(len(list1)):\n            if type(list1[i])==list:\n                flatten_list(list1[i])\n            else:\n                list1[i]=list1[i]\n                \n    \n    "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) == list:\n            for sub_item in item:\n                new_list.append(sub_item)\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Total = 0\n    #for s in stdata:\n    #    Total += s[1]\n    #return Total\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for v in stdata:\n        d[v[0]] += v[1]\n    return max(d.keys(), key = lambda x: d[x])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d={}\n    max_value = 0\n    for i in stdata:\n        if i[0] not in d:\n            d[i[0]] = i[1]\n        else:\n            d[i[0]] += i[1]\n    for i in d:\n        if d[i] > max_value:\n            max_value = d[i]\n    return max_value\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxi = 0\n    for i in stdata:\n        if i > maxi:\n            maxi = i\n    return maxi\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for item in stdata:\n        for i, v in enumerate(item):\n            max_sum[i] = max(v, max_sum[i])\n    \n    max_sum = {k: v for k, v in sorted(max_sum.items(), key=lambda item: item[1])}\n    return max_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #max_sum = 0\n    #max_sum_index = 0\n    #max_sum_list = []\n    #max_sum_list = []\n    for i in range(len(stdata)):\n        max_sum = stdata[i][1]\n        max_sum_index = i\n        for j in range(i+1, len(stdata)):\n            if(stdata[j][1] > max_sum):\n                max_sum = stdata[j][1]\n                max_sum_index = j\n        stdata[i], stdata[max_sum_index] = stdata[max_sum_index], stdata[i]\n    return stdata\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    counts = defaultdict(int)\n    for i, j in stdata:\n        counts[i] += 1\n        counts[j] -= 1\n    max_count = max(counts.values())\n    for k, v in counts.items():\n        if v == max_count:\n            return k\n    \ndef max_aggregate_h(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    counts = defaultdict(int)\n    for i, j in stdata:\n        counts[i] += 1\n        counts[j] -= 1\n    max_count = max(counts.values())\n    return max(counts.keys(), key=(lambda key: counts[key])).count(max_count)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for elem in stdata:\n        aggregate[elem[0]] += elem[1]\n    return max(aggregate.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = 0\n    for tup in stdata:\n        for i in range(len(tup)-1):\n            result = max(result, tup[i+1] - tup[i])\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for (st,p,n,d) in stdata:\n        if p > max_aggregate:\n            max_aggregate = p\n    return max_aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0,2**n):\n        seq = str(bin(i))[2:]\n        if len(seq)!= n:\n            continue\n        count += int(seq[:n-1]) + int(seq[n-1:])\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n):\n        if n == 0:\n            return 0\n        \n        if n == 1:\n            return 1\n        \n        return count(n-1) + count(n-2) + 2*count(n-1)\n    \n    return count(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def is_sum_of_last_n_bits(x):\n        '''\n        This function is to count all possible binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n        '''\n        if n == 1:\n            return True\n        if n == 2:\n            return x % 2 == 0\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_rec(n, first, last):\n        if first == last:\n            return 1\n        if first + 1 == last:\n            return 0\n        if (first + last) % 2 == 0:\n            return 0\n        if (first + last) % 2!= 0:\n            return count_binary_seq_rec(n, first + 1, last) + count_binary_seq_rec(n, first, last - 1)\n        \n    return count_binary_seq_rec(n, 0, 2 ** n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(0, n+1):\n        s1 = 0\n        s2 = 0\n        for j in range(i):\n            s1 += 1\n            s2 += 1\n        if (s1 + s2) == (1 << i):\n            res += 1\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1<<n):\n        if (i >> (n-1)) == 0 and (i >> (n-2)) == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def count_bit(n):\n        if n==1:\n            return 0\n        if n%2==0:\n            return n\n        else:\n            return n-1\n    \n    def gen_bseq(n):\n        a, b = 0, 1\n        while b<n:\n            yield a\n            a, b = b, a+b\n            \n    for i in gen_bseq(n):\n        print(i)\n        \n        \n        \n        \ncount_binary_seq(6)"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # code here\n    mod = 10**9+7\n    # if n <= 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # if n == 2:\n    #     return 3\n    # if n > 2:\n    #     sums = [0, 1, 5, 2, 4, 7, 6, 1, 2, 4]\n    #     for i in range(0, n):\n    #         sums[i+2] = sums[i] + sums[i+1]\n    #     return sums[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(1 << n):\n        s = 0\n        for j in range(n):\n            if (i >> j) & 1:\n                s += 1\n        if s == n:\n            res += 1\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    else:\n        return 1+dict_depth(d[d])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    dic = []\n    for k,v in d.items():\n        if isinstance(v,dict):\n            dic.append(k)\n        elif isinstance(v,list):\n            for i in v:\n                dic.append(k)\n    return len(dic)\n    "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for v in d.values()])\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d,dict):\n        return 0\n    else:\n        return max([dict_depth(x) for x in d.values()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return(len(d))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    dictionary = []\n    for key in d:\n        dictionary.append(key)\n    return len(dictionary)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d: return 0\n    else: return max([dict_depth(i) for i in d.values()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return max([dict_depth(v) for v in d.values()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return max([dict_depth(k) for k in d.keys()]) + 1\n    elif isinstance(d, list):\n        return max([dict_depth(k) for k in d]) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = index -1\n    rotations = rotations % len(arr)\n    if(rotations == index) :\n        return arr[index]\n    else :\n        if(rotations < index) :\n            for i in range(rotations,index) :\n                arr[i],arr[i+1] = arr[i+1],arr[i]\n            return arr[index]\n        else :\n            for i in range(rotations,index+1) :\n                arr[i],arr[i-1] = arr[i-1],arr[i]\n            return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Write your solution here\n    for i in range(0,len(ranges)) :\n        if(index >= ranges[i][0] and index <= ranges[i][1]) :\n            count = index - ranges[i][0]\n            #print(count)\n            if(rotations[i]%2 == 0) :\n                return arr[count]\n            else :\n                return arr[count - 1]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)-1):\n        if i==index :\n            return arr[i+rotations]\n        else:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = index\n    while i < len(arr) and i>=0 and ranges[i]!=0:\n        i = i - rotations[i]\n    return i\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pos = 0\n    while pos < len(ranges) :\n        rng = ranges[pos]\n        if index < rng[0] :\n            return ranges[pos - 1]\n        elif index > rng[1] :\n            return ranges[pos + 1]\n        else :\n            pos += rotations[pos]\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = index % len(arr)\n    while ranges and index >= ranges[0] :\n        rotations = (rotations + 1) % len(ranges)\n        index -= ranges[rotations]\n    return arr[index]\n        \nprint(find_Element([1,2,3,4,5,6],[[0,1],[3,3],[3,3],[5,5]],0,3))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if i == index :\n            for j in range(len(ranges)) :\n                if arr[i] >= ranges[j][0] and arr[i] <= ranges[j][1] :\n                    return j\n                    break\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges):\n        if arr[i][index] == 1:\n            return i\n    else:\n        index = rotations+index-1\n        return find_Element(arr,ranges,rotations,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        index = (index + rng)%arr_size\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # index -= 1\n    total_rotations = 0\n    for k in range(rotations) :\n        total_rotations += k\n    index = index - total_rotations\n    s = 0\n    for i in range(len(arr)) :\n        s += arr[index]*ranges[i]\n        index += 1\n    return s\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    lst = []\n    for word in words:\n        if word[0] == \"p\":\n            lst.append(word)\n    return lst[0],lst[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"p\"\n    return [i for i in words if i.startswith(p)]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith(\"p\"):\n            return i, words.pop(words.index(i))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # for each in words:\n    #     if len(each) >= 3 and each[0:3] == \"p\":\n    #         return (each, words.index(each))\n    return ['pascadero', words.index('pascadero')]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    match = []\n    for word in words:\n        if word[0] == 'p':\n            match.append(word)\n    return match\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, words.index(word)+1\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = re.split(' ', words)\n    \n    for word in words:\n        if word.startswith('p'):\n            return word, words[words.index(word) + 1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # words = list(input(\"Enter list of words: \").split(\" \"))\n    # return words[0], words[1]\n    return words[0], words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0].lower() == 'p':\n            return word.lower(), word.lower()\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[0] == \"p\":\n            res.append(word)\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case - empty array\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # In this approach, we can also reduce the problem by realizing that the maximum sum increasing subsequence from prefix till ith index always includes some element j that is greater than i.\n    # So, we can use dynamic programming to solve the problem.\n    #\n    # base case\n    if index == -1:\n        return 0\n    if k == index:\n        return a[index]\n    if k < index:\n        return -sys.maxsize - 1\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    if k > n:\n        return 0\n    \n    max_ending_here = 0\n    max_so_far = float('-inf')\n    \n    for i in range(index, n):\n        if a[i] < a[index]:\n            max_ending_here = max(max_ending_here, max_sum_increasing_subseq(a, n, i+1, k))\n        max_so_far = max(max_so_far, max_ending_here + a[i])\n        \n    return max_so_far\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -math.inf\n    prefix = [None] * (n+1)\n    for i in range(1, n+1):\n        prefix[i] = prefix[i-1] + a[i-1]\n    for i in range(n, index, -1):\n        prefix[i] = prefix[i-1] + a[i-1]\n    for i in range(index, n):\n        if prefix[i] - prefix[index] <= k:\n            max_sum = max(max_sum, prefix[i] - prefix[index])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    # if k > n, then consider kth element after i and return the max sum\n    if k > n:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    # if k is smaller than max sum and max sum, then consider kth element after i and return the max sum\n    elif a[index] > k:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or index == -1:\n        return 0\n    if a[index] > k:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    elif a[index] == k:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n - 1, index - 1, k))\n    else:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = 0\n    max_val = -math.inf\n    for i in range(index, n):\n        s += a[i]\n        if s > max_val:\n            max_val = s\n    return max_val\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # if i is out of bounds, it means that we have reached to the end.\n    if index == -1:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    if k == index:\n        return a[index]\n    \n    inc = 0\n    if a[index] < a[k]:\n        inc = a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    \n    exc = a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    \n    return max(inc, exc)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_1 = tuplex[:m]\n    tuplex_2 = tuplex[m:n]\n    tuplex_3 = tuplex[n:]\n    return tuplex_1 + tuplex_2 + tuplex_3\n    \ndef get_last_index(lst,start,end):\n    '''\n    Write a function that return the last index of an element in a list.\n    '''\n    return len(lst)-1 - (lst[::-1].index(end))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return(tuplex[m:n])\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if i%2==0:\n            tuplex[i]=tuplex[i]*m\n        else:\n            tuplex[i]=tuplex[i]*n\n    return tuple(tuplex)\ndef rotate_colon(colon,m,n):\n    '''\n    Write a function to rotate the colon clockwise.\n    '''\n    m1=m//2\n    m2=m//2\n    n1=n//2\n    n2=n//2\n    colon=tuple(colon)\n    colon=colon[m2:n2+1]\n    colon=colon[::-1]\n    colon=colon[m1:n1+1]\n    return colon\ndef is_prime(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num==1:\n        return False\n    if num<=3:\n        return True\n    if num%2==0 or num%3==0:\n        return False\n    i=5\n    while i*i<=num:\n        if num%i==0 or num%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime_no_check(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num==1:\n        return False\n    if num<=3:\n        return True\n    if num%2==0 or num%3==0:\n        return False\n    i=5\n    while i*i<=num:\n        if num%i==0 or num%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef int_div_rem(x, y):\n    '''\n    Write a function to find the remainder when dividing x by y.\n    '''\n    z=x//y\n    rem=x%y\n    return rem\ndef is_prime_recur(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num==1:\n        return False\n    if num<=3:\n        return True\n    if num%2==0 or num%3==0:\n        return False\n    i=5\n    while i*i<=num:\n        if num%i==0 or num%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef integer_div_recur(x, y):\n    '''\n    Write a function to find the remainder when dividing x by y.\n    '''\n    z=x//y\n    rem=x%y\n    return rem\ndef num_str_to_num_tuple(num_str):\n    '''\n    Write a function to convert a number in string format to a tuple.\n    '''\n    num_str=num_str[::-1]\n    num_tuple=tuple(int(x) for x in num_str)\n    return num_tuple\ndef num_tuple_to_num_str(num_tuple):\n    '''\n    Write a function to convert a number in tuple format to a string.\n    '''\n    num_str=str(num_tuple)[::-1]\n    return num_str\ndef sum_of_num_str(num_str):\n    '''\n    Write a function to sum a number in string format.\n    '''\n    sum=0\n    for i in range(len(num_str)):\n        sum=sum+int(num_str[i])\n    return sum\ndef sum_of_num_tuple(num_tuple):\n    '''\n    Write a function to sum a number in tuple format.\n    '''\n    sum=0\n    for i in range(len(num_tuple)):\n        sum=sum+num_tuple[i]\n    return sum\ndef str_to_num_tuple(s):\n    '''\n    Write a function to convert a string to a number tuple.\n    '''\n    s=s[::-1]\n    num_tuple=tuple(int(x) for x in s)\n    return num_tuple\ndef num_tuple_to_str(num_tuple):\n    '''\n    Write a function to convert a number tuple to a string.\n    '''\n    num_str=str(num_tuple)[::-1]\n    return num_str\ndef reverse_str(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    s=s[::-1]\n    return s\ndef reverse_num_tuple(num_tuple):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tup_len=len(num_tuple)\n    for i in range(tup_len//2):\n        temp=num_tuple[i]\n        num_tuple[i]=num_tuple[tup_len-i-1]\n        num_tuple[tup_len-i-1]=temp\n    return num_tuple\ndef sum_tuple(tup1,tup2):\n    '''\n    Write a function to add two tuple.\n    '''\n    tup_len=len(tup1)\n    tup_len2=len(tup2)\n    if tup_len==tup_len2:\n        for i in range(tup_len):\n            tup1[i]=tup1[i]+tup2[i]\n    elif tup_len2>tup_len:\n        for i in range(tup_len):\n            tup1[i]=tup1[i]+tup2[i]\n        for i in range(tup_len,tup_len2):\n            tup1[i]=tup2[i]\n    elif tup_len<tup_len2:\n        for i in range(tup_len2):\n            tup1[i]=tup1[i]+tup2[i]\n        for i in range(tup_len,tup_len2):\n            tup1[i]=tup1[i]+tup2[tup_len2-i-1]\n    return tup1\ndef prod_tuple(tup1,tup2):\n    '''\n    Write a function to multiply two tuple.\n    '''\n    tup_len=len(tup1)\n    tup_len2=len(tup2)\n    if tup_len==tup_len2:\n        for i in range(tup_len):\n            tup1[i]=tup1[i]*tup2[i]\n    elif tup_len2>tup_len:\n        for i in range(tup_len):\n            tup1[i]=tup1[i]*tup2[i]\n        for i in range(tup_len,tup_len2):\n            tup1[i]=tup1[i]*tup2[tup_len2-i-1]\n    elif tup_len<tup_len2:\n        for i in range(tup_len2):\n            tup1[i]=tup1[i]*tup2[i]\n        for i in range(tup_len,tup_len2):\n            tup1[i]=tup1[i]*tup2[tup_len-i-1]\n    return tup1\ndef count_number_tuples(tup1,tup2):\n    '''\n    Write a function to count the number of tuples which can be formed from two tuples.\n    '''\n    count=0\n    tup_len=len(tup1)\n    tup_len2=len(tup2)\n    if tup_len==tup_len2:\n        for i in range(tup_len):\n            if tup1[i]==tup2[i]:\n                count=count+1\n    elif tup_len>tup_len2:\n        for i in range(tup_len):\n            if tup1[i]==tup"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0]+tuplex[1][:m]+tuplex[2][n:]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = tuplex[:m] + (tuplex[m:m+n],tuplex[m+n:])\n    return colon_tuplex\ndef main():\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    print('colon_tuplex() function:')\n    print(colon_tuplex((1,2,3,4,5),1,3))\n    print(colon_tuplex((1,2,3,4,5),4,1))\n    print(colon_tuplex((1,2,3,4,5),1,5))\n    print(colon_tuplex((1,2,3,4,5),1,6))\n    print(colon_tuplex((1,2,3,4,5),3,6))\n    print(colon_tuplex((1,2,3,4,5),4,6))\n    print(colon_tuplex((1,2,3,4,5),1,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,6,5))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,6))\n    print(colon_tuplex((1,2,3,4,5),1,5,6,3))\n    print(colon_tuplex((1,2,3,4,5),1,6,3,5))\n    print(colon_tu"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append([])\n        for j in range(n):\n            colon[i].append(' ')\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[i])):\n            colon[i][j] = tuplex[i][j]\n    return colon\ndef create_colon(tuplex,m,n):\n    '''\n    Write a function to create a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append([])\n        for j in range(n):\n            colon[i].append(0)\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[i])):\n            colon[i][j] = tuplex[i][j]\n    return colon\ndef create_colon_reverse(tuplex,m,n):\n    '''\n    Write a function to create a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append([])\n        for j in range(n):\n            colon[i].append(0)\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[i])):\n            colon[i][j] = tuplex[i][j]\n    return colon\ndef reverse_colon(colon):\n    '''\n    Write a function to reverse a colon.\n    '''\n    colon_r = []\n    m = len(colon)\n    n = len(colon[0])\n    for i in range(m):\n        colon_r.append([])\n        for j in range(n):\n            colon_r[i].append(colon[i][n-j-1])\n    return colon_r\ndef read_colon(colon):\n    '''\n    Write a function to read a colon.\n    '''\n    colon_r = []\n    m = len(colon)\n    n = len(colon[0])\n    for i in range(m):\n        colon_r.append([])\n        for j in range(n):\n            colon_r[i].append(colon[i][j])\n    return colon_r\ndef write_colon(colon):\n    '''\n    Write a function to write a colon.\n    '''\n    colon_r = []\n    m = len(colon)\n    n = len(colon[0])\n    for i in range(m):\n        colon_r.append([])\n        for j in range(n):\n            colon_r[i].append(colon[i][j])\n    return colon_r\ndef read_colon_reverse(colon):\n    '''\n    Write a function to read a colon.\n    '''\n    colon_r = []\n    m = len(colon)\n    n = len(colon[0])\n    for i in range(m):\n        colon_r.append([])\n        for j in range(n):\n            colon_r[i].append(colon[i][j])\n    return colon_r\ndef write_colon_reverse(colon):\n    '''\n    Write a function to write a colon.\n    '''\n    colon_r = []\n    m = len(colon)\n    n = len(colon[0])\n    for i in range(m):\n        colon_r.append([])\n        for j in range(n):\n            colon_r[i].append(colon[i][j])\n    return colon_r\ndef up(colon,m,n):\n    '''\n    Write a function to rotate a colon counterclockwise.\n    '''\n    colon_r = deepcopy(colon)\n    for i in range(m):\n        colon_r[i] = colon_r[i][n:] + colon_r[i][:n]\n    return colon_r\ndef down(colon,m,n):\n    '''\n    Write a function to rotate a colon clockwise.\n    '''\n    colon_r = deepcopy(colon)\n    for i in range(m):\n        colon_r[i] = colon_r[i][n:] + colon_r[i][:n]\n    return colon_r\ndef left(colon,m,n):\n    '''\n    Write a function to rotate a colon clockwise.\n    '''\n    colon_r = deepcopy(colon)\n    for i in range(n):\n        for j in range(m):\n            colon_r[j][i] = colon[i][j]\n    return colon_r\ndef right(colon,m,n):\n    '''\n    Write a function to rotate a colon clockwise.\n    '''\n    colon_r = deepcopy(colon)\n    for i in range(n):\n        for j in range(m):\n            colon_r[j][n-i-1] = colon[i][j]\n    return colon_r\ndef diagonal_ul_right(colon,m,n):\n    '''\n    Write a function to rotate a colon clockwise.\n    '''\n    colon_r = deepcopy(colon)\n    for i in range(n):\n        for j in range(m):\n            colon_r[j][i] = colon[i][j]\n    return colon_r\ndef diagonal_ul_left(colon,m,n):\n    '''\n    Write a function to rotate a colon clockwise.\n    '''\n    colon_r = deepcopy(colon)\n    for i in range(n):\n        for j in range(m):\n            colon_r[j][n-i-1] = colon[i][j]\n    return colon_r\ndef diagonal_dl_right(colon,m,n):\n    '''\n    Write a function to rotate a colon clockwise.\n    '''\n    colon_r = deepcopy(colon)\n    for i in range(n):\n        for j in range(m):\n            colon_r[i][j] = colon[i][j]\n    return colon_r\ndef diagonal_dl_left(colon,m,n):\n    '''\n    Write a function to rotate a colon clockwise.\n    '''\n    colon_r = deepcopy(colon)\n    for i in range(n):\n        for j in range(m):\n            colon_r[i][j] = colon[i][j]\n    return colon_r\ndef rotate_colon(colon,m,n):\n    '''\n    Write a function to rotate a colon clockwise.\n    '''\n    colon_r = deepcopy(colon)\n    colon_r = right(colon_r,m,n)\n    colon_r = up(colon_r,m,n)\n    colon_r = left(colon_r,m,n)\n    colon_r = down(colon_r,m,n)\n    colon_r = diagonal_dl_right(colon_r,m,n)\n    colon_r = diagonal_dl_left(colon_r,m,n)\n    colon_r = diagonal_ul_right(colon_r,m,n)\n    colon_r = diagonal_ul_left(colon_r,m,n)\n    return colon_r\ndef is_knight(n,m,x,y,dx,dy):\n    '''\n    Write a function to check if a knight is in a certain position.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if x == i and y == j:\n                return True\n    return False\ndef knight(n,m,x,y,dx,dy):\n    '''\n    Write a function to check if a knight is in a certain position.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if is_knight(n,m,x,y,dx,dy) and i+dx == x and j+dy == y"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex.append(m)\n    tuplex.append(n)\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    c=0\n    l=len(tuplex)\n    if (m==0):\n        if (n==0):\n            return ()\n        else:\n            return (tuplex[0],)\n    else:\n        while (c<l):\n            if (c%2==0):\n                a=(tuplex[c-1],)\n                del tuplex[c-1]\n                l=l-1\n                if (n==1):\n                    return a\n                else:\n                    return a+colon_tuplex(tuplex,m-1,n-1)\n            else:\n                a=(tuplex[c],)\n                del tuplex[c]\n                l=l-1\n                if (n==1):\n                    return a\n                else:\n                    return a+colon_tuplex(tuplex,m-1,n-1)\n    return ()\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i][m] for i in range(n)])\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def main(nums1, nums2, N):\n        n1, n2 = len(nums1), len(nums2)\n        if not n1 or not n2: return None\n        if n1 == 1 and n2 == 1:\n            return [nums1[0] * nums2[0]]\n        if N == 1: return large_product(nums1, nums2, N-1)\n        res = []\n        for i in range(1,n1+1):\n            for j in range(1,n2+1):\n                prod = nums1[i-1] * nums2[j-1]\n                if len(res) == N: break\n                if prod > max(res):\n                    res.append(prod)\n        return res\n    return main(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import heapq\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    res = []\n    for i in range(N):\n        res.append(max(nums1[i] * nums2[i], nums1[i] * nums2[i], nums1[i] * nums2[i]))\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    ans = []\n    for i in range(0, N):\n        ans.append(nums1[i] * nums2[i])\n    print(' '.join(map(str, ans)))\n    \n    \ndef maxSum(arr, size): \n    \n    max_sum = 0\n    for i in range(0, size):\n        curr_sum = 0\n        for j in range(0, size):\n            if i!= j:\n                curr_sum += arr[j]\n        max_sum = max(max_sum, curr_sum)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    ans = float('-inf')\n    for i in range(N):\n        ans = max(ans, nums1[i]*nums2[i])\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Python program to find largest of three number\n    \n    # sort the given list\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return sorted([max(nums1[i], nums2[i]) for i in range(N)], reverse=True)[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return []\n    # 1. Make sure that the first element in the first list is the largest one.\n    largest = nums1[0]\n    if largest > nums2[0]:\n        nums2, nums1 = nums1, nums2\n        largest = nums1[0]\n    result = []\n    for n1 in nums1:\n        for n2 in nums2:\n            result.append(n1 * n2)\n    result.sort(reverse=True)\n    return result[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def find_largest_product(nums1, nums2, N):\n        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1 == 0 or n2 == 0:\n            return []\n        if N == 1:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 2:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 3:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 4:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 5:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 6:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 7:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 8:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 9:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 10:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 11:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 12:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 13:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 14:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 15:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 16:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 17:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 18:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 19:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 20:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 21:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 22:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 23:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 24:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 25:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 26:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 27:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 28:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 29:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 30:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 31:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 32:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 33:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 34:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 35:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 36:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 37:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 38:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 39:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 40:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 41:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 42:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 43:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 44:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 45:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 46:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 47:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 48:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 49:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 50:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 51:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 52:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 53:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 54:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 55:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 56:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 57:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 58:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 59:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 60:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 61:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 62:\n            return sorted(nums1, reverse=True) * sorted(nums2, reverse=True)\n        if N == 63:\n            return sorted(nums1, reverse=True"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1, reverse = True)\n    nums2 = sorted(nums2, reverse = True)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return\n    res = []\n    for i in range(N):\n        factor1 = nums1.pop()\n        factor2 = nums2.pop()\n        res.append(factor1*factor2)\n    return res\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return \"The two numbers are equal\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    return b\n    "
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # code here\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(f'{a} is maximum.')\n    else:\n        print(f'{b} is maximum.')\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"{} is greater than {}\".format(a,b))\n    elif a<b:\n        print(\"{} is greater than {}\".format(b,a))\n    else:\n        print(\"{} is equal to {}\".format(a,b))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \n    \nprint(maximum(2,3))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #code here\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<=b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #new_tuple = str1.split(\" \")\n    #return new_tuple\n    return tuple(str1)\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (tuple(str1))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s1 = str1.strip()\n    t1 = tuple(s1)\n    print(t1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split(\" \")\n    print(str1)\n    tuple1 = tuple(str1)\n    print(tuple1)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #str1 = '12'\n    str1 = str1.strip()\n    l1 = []\n    for i in range(len(str1)):\n        l1.append(str1[i])\n    return tuple(l1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary_rep = bin(n).split('b')[1]\n    binary_rep = binary_rep[:-1]\n    binary_rep = '0' + binary_rep\n    return int(binary_rep, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while (n & -n) == n:\n        n >>= 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n|(1<<(n.bit_length()-1))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    if n & (1 << 0):\n        n = n & ~(1 << 0)\n    else:\n        n = n | (1 << 0)\n    '''\n    n = n | (1 << 0)\n    return n\n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    '''\n    if n & (1 << 1):\n        n = n & ~(1 << 1)\n    else:\n        n = n | (1 << 1)\n    '''\n    n = n | (1 << 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    return n | 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (~n + 1)\n    return n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= 1<<(n.bit_length()-1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while n:\n        if n & 1:\n            return i\n        n = n >> 1\n        i += 1\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(32):\n        n |= 1<<i\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if (r == 0) and (h == 0):\n        return None\n    elif (r == 0) or (h == 0):\n        return 0\n    elif (r > 0) and (h > 0):\n        return (math.pi / 3) * (math.pow(r, 2) - math.pow(h, 2))\n    else:\n        return None\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r ** 2 * h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=math.pi*math.pow(r,2)*(1/3)*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3\n    return V\n    \n    \ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V=l*h\n    return V\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=4*math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V=math.pi*(r**2)*h\n    return V\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*(r**3)/3"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    r,h = float(r),float(h)\n    vol = (4/3)*pi*r**3\n    vol = round(vol,2)\n    vol = str(vol)\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=math.pi*math.pow(r,2)*h\n    return v\nprint(volume_cone(3,4))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**2*math.pi*h\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n <= 0):\n        return 0\n    n1 = 1\n    n2 = 2\n    if (n2*2 <= n):\n        while (n2*2 <= n):\n            n1 = n2\n            n2 = 2*n2\n        return n1\n    else:\n        while (n1 <= n):\n            if (n1*2 <= n):\n                n1 = n1*2\n            else:\n                return n1\n        return n1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while 2 ** power <= n:\n        power += 1\n    return power\n    \ndef lower_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return power\n    \ndef digital_sum(n): \n    '''\n    Write a python function to find the sum of the digits in a number.\n    '''\n    digital_sum = 0\n    while n!= 0:\n        digital_sum += n % 10\n        n = n // 10\n    return digital_sum\n    \ndef digital_difference(n): \n    '''\n    Write a python function to find the sum of the digits in a number.\n    '''\n    digital_difference = 0\n    while n!= 0:\n        digital_difference += n % 10\n        n = n // 10\n    return digital_difference\n    \ndef digital_product(n): \n    '''\n    Write a python function to find the sum of the digits in a number.\n    '''\n    digital_product = 1\n    while n!= 0:\n        digital_product *= n % 10\n        n = n // 10\n    return digital_product\n    \ndef digital_average(n): \n    '''\n    Write a python function to find the sum of the digits in a number.\n    '''\n    digital_average = 0\n    while n!= 0:\n        digital_average += n % 10\n        n = n // 10\n    return digital_average\n    \ndef decimal_to_binary(n): \n    '''\n    Write a python function to convert decimal number to binary number.\n    '''\n    binary_num = ''\n    while n > 0:\n        if n % 2 == 0:\n            binary_num += '0'\n        else:\n            binary_num += '1'\n        n = n // 2\n    return binary_num\n    \ndef binary_to_decimal(binary): \n    '''\n    Write a python function to convert binary number to decimal number.\n    '''\n    decimal = 0\n    binary = binary[::-1]\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            decimal += pow(2, i)\n    return decimal\n    \ndef most_frequent(n): \n    '''\n    Write a python function to find the most frequent digit in a number.\n    '''\n    most_frequent = 0\n    count = 0\n    while n!= 0:\n        if n % 10 == most_frequent:\n            count += 1\n        else:\n            most_frequent = n % 10\n            count = 1\n        n = n // 10\n    return most_frequent, count\n    \ndef repeated_character(n): \n    '''\n    Write a python function to find the repeated character in a string.\n    '''\n    if len(n) == 1:\n        return n\n    most_frequent = n[0]\n    char_count = 0\n    while len(n)!= 0:\n        if n[0] == n[-1]:\n            char_count += 1\n        else:\n            break\n        n = n[1:-1]\n    if char_count > 1:\n        return most_frequent * char_count\n    else:\n        return most_frequent\n        \ndef same_frequency(n): \n    '''\n    Write a python function to find the number of common character in a string.\n    '''\n    count = 0\n    while n!= 0:\n        n = n // 10\n        if n == 0:\n            break\n        if n % 10 == n % 2:\n            count += 1\n    return count\n    \ndef inverse_even_digits(n): \n    '''\n    Write a python function to reverse the even digits in a number.\n    '''\n    even_digits = []\n    while n!= 0:\n        if n % 2 == 0:\n            even_digits.append(n % 10)\n            n = n // 10\n        else:\n            break\n    print(even_digits)\n    result = ''\n    for i in range(len(even_digits)):\n        result += str(even_digits.pop())\n    return result\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_pow = 0\n    while 2**max_pow <= n:\n        max_pow += 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 1\n    while 2**count <= n:\n        count+=1\n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        print('Input number is Negative or Zero.')\n    else:\n        #Power of 2 is 2^a\n        #Power of 2 is n/2 \n        #Power of 2 is n//2 \n        #Power of 2 is n/2 - 1 \n        #Power of 2 is n//2 - 1 \n        #Power of 2 is n//4\n        #Power of 2 is n//4 - 1 \n        #Power of 2 is n//8\n        #Power of 2 is n//8 - 1 \n        #Power of 2 is n//16\n        #Power of 2 is n//16 - 1 \n        #Power of 2 is n//32\n        #Power of 2 is n//32 - 1 \n        #Power of 2 is n//64\n        #Power of 2 is n//64 - 1 \n        #Power of 2 is n//128\n        #Power of 2 is n//128 - 1 \n        #Power of 2 is n//256\n        #Power of 2 is n//256 - 1 \n        #Power of 2 is n//512\n        #Power of 2 is n//512 - 1 \n        #Power of 2 is n//1024\n        #Power of 2 is n//1024 - 1 \n        #Power of 2 is n//2048\n        #Power of 2 is n//2048 - 1 \n        #Power of 2 is n//4096\n        #Power of 2 is n//4096 - 1 \n        #Power of 2 is n//8192\n        #Power of 2 is n//8192 - 1 \n        #Power of 2 is n//16384\n        #Power of 2 is n//16384 - 1 \n        #Power of 2 is n//32768\n        #Power of 2 is n//32768 - 1 \n        #Power of 2 is n//65536\n        #Power of 2 is n//65536 - 1 \n        #Power of 2 is n//131072\n        #Power of 2 is n//131072 - 1 \n        #Power of 2 is n//262144\n        #Power of 2 is n//262144 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Calculate the highest power of 2 that is less than or equal to n \n    # and return it.\n    # While calculating the largest power of 2 that is less than n, if \n    # the power is even, that means we should add 2 to the power. \n    # If the power is odd, that means we should subtract 1 from the power. \n    \n    # Recursive algorithm \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    result = 2**highest_Power_of_2(n//2)\n    \n    if n%2 == 1:\n        return result + 1\n    else:\n        return result\n        "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1,n+1):\n        if 2**i <= n:\n            print(2**i)\n            break\n        else:\n            pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(n >= 1): \n        n = n >> 1\n        i += 1\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    res=0\n    while (1):\n        if (n & (1 << res) )!= 0:\n            res+=1\n            if (res>31):\n                break\n        else:\n            res=0\n            break\n    return res\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        result = 1\n        while n/2 > 1:\n            if n%2!= 0:\n                n = (n-1)/2\n            else:\n                n = n/2\n            result = result*2\n        return int(result)\n    \n    \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_n = 1\n    for i in range(n-1):\n        lucas_n = lucas_n + 1\n    return lucas_n\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert n >= 1\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + 2*find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (n + 2) ** 2 - 2\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    if n == 0:\n        return 1\n    for i in range(n):\n        lucas = lucas + 1\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    if n == 1: \n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n == 0:\n        return 2\n    \n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.map(lambda x: x.title() +'')\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend([string])\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string % i, end = \"\")\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print(string.format(item))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.map(lambda x: string.format(x))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dictionary = {l1[i]:l2[i] for i in range(len(l1))}\n    for i in range(len(l3)):\n        nested_dictionary[l3[i]] = l4[i]\n    return nested_dictionary\n    \nprint(convert_list_dictionary(l1 = [\"purple\", \"mauve\", \"blue\"], l2 = [\"red\", \"maroon\", \"green\", \"skyblue\"], l3 = [\"white\", \"seashell\", \"blush\", \"frost\"], l4 = [\"pink\", \"ivory\", \"peach\", \"lightblue\"]))"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out_dict = {}\n    for i in range(len(l1)):\n        out_dict[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        out_dict[l3[i]] = l4[i]\n    return out_dict\n    \nprint(convert_list_dictionary(l1, l2, l3))"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1={}\n    d2={}\n    d3={}\n    for i in l1:\n        if i not in d1:\n            d1[i]=1\n        else:\n            d1[i]=d1[i]+1\n    for j in l2:\n        if j not in d2:\n            d2[j]=1\n        else:\n            d2[j]=d2[j]+1\n    for k in l3:\n        if k not in d3:\n            d3[k]=1\n        else:\n            d3[k]=d3[k]+1\n    d4={}\n    d4.update(d1)\n    d4.update(d2)\n    d4.update(d3)\n    print(d4)\ndef convert_dictionary_to_list_of_lists(d1):\n    '''\n    Write a function to convert dictionary to list of lists.\n    '''\n    keys=[]\n    values=[]\n    for k in d1:\n        keys.append(k)\n        values.append(d1[k])\n    print(keys)\n    print(values)\ndef print_all_words(l):\n    '''\n    Write a function to print all the words in a list.\n    '''\n    for i in range(len(l)):\n        print(l[i])\n    print(l)\n    print_all_words.__doc__\ndef print_even_numbers(l):\n    '''\n    Write a function to print even numbers in a list.\n    '''\n    for i in range(len(l)):\n        if i%2==0:\n            print(l[i])\n    print(l)\n    print_even_numbers.__doc__\ndef print_odd_numbers(l):\n    '''\n    Write a function to print odd numbers in a list.\n    '''\n    for i in range(len(l)):\n        if i%2!=0:\n            print(l[i])\n    print(l)\n    print_odd_numbers.__doc__\ndef print_unique_numbers(l):\n    '''\n    Write a function to print unique numbers in a list.\n    '''\n    print(set(l))\n    print_unique_numbers.__doc__\ndef print_reverse(l):\n    '''\n    Write a function to print the reversed list.\n    '''\n    print(l[::-1])\n    print_reverse.__doc__\ndef print_sort(l):\n    '''\n    Write a function to print the sorted list.\n    '''\n    print(sorted(l))\n    print_sort.__doc__\ndef print_reverse_sort(l):\n    '''\n    Write a function to print the reversed sorted list.\n    '''\n    print(sorted(l,reverse=True))\n    print_reverse_sort.__doc__\ndef print_remove_duplicates(l):\n    '''\n    Write a function to remove duplicate numbers from list.\n    '''\n    l=list(dict.fromkeys(l))\n    print(l)\ndef print_max_element(l):\n    '''\n    Write a function to print the maximum element in list.\n    '''\n    print(max(l))\n    print_max_element.__doc__\ndef print_min_element(l):\n    '''\n    Write a function to print the minimum element in list.\n    '''\n    print(min(l))\n    print_min_element.__doc__\ndef print_nth_element(l,n):\n    '''\n    Write a function to print the nth element in list.\n    '''\n    print(l[n-1])\n    print_nth_element.__doc__\ndef print_second_largest_element(l):\n    '''\n    Write a function to print the second largest element in list.\n    '''\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    print_second_largest_element.__doc__\ndef print_third_largest_element(l):\n    '''\n    Write a function to print the third largest element in list.\n    '''\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    print_third_largest_element.__doc__\ndef print_second_largest_element(l):\n    '''\n    Write a function to print the second largest element in list.\n    '''\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    print_second_largest_element.__doc__\ndef print_third_largest_element(l):\n    '''\n    Write a function to print the third largest element in list.\n    '''\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    print_third_largest_element.__doc__\ndef print_index_of_element(l,e):\n    '''\n    Write a function to print the index of an element in list.\n    '''\n    print(l.index(e))\n    print_index_of_element.__doc__\ndef print_count_of_elements(l,e):\n    '''\n    Write a function to print the count of an element in list.\n    '''\n    print(l.count(e))\n    print_count_of_elements.__doc__\ndef print_length_of_list(l):\n    '''\n    Write a function to print the length of list.\n    '''\n    print(len(l))\n    print_length_of_list.__doc__\ndef print_max_frequency_element(l):\n    '''\n    Write a function to print the maximum frequency element.\n    '''\n    a=max(set(l), key=l.count)\n    print(a)\n    print_max_frequency_element.__doc__\ndef print_number_of_occurrences_of_element(l,e):\n    '''\n    Write a function to print the number of occurrences of an element in list.\n    '''\n    print(l.count(e))\n    print_number_of_occurrences_of_element.__doc__\ndef print_sum_of_list(l):\n    '''\n    Write a function to print the sum of list.\n    '''\n    print(sum(l))\n    print_sum_of_list.__doc__\ndef print_sum_of_list_with_negative_numbers(l):\n    '''\n    Write a function to print the sum of list with negative numbers.\n    '''\n    print(sum(filter(lambda x:x<0,l)))\n    print_sum_of_list_with_negative_numbers.__doc__\ndef print_sum_of_list_with_positive_numbers(l):\n    '''\n    Write a function to print the sum of list with positive numbers.\n    '''\n    print(sum(filter(lambda x:x>=0,l)))\n    print_sum_of_list_with_positive_numbers.__doc__\ndef print_mean_of_list(l):\n    '''\n    Write a function to print the mean of list.\n    '''\n    print(sum(l)/len(l))\n    print_mean_of_list.__doc__\ndef print_mean_of_list_with_negative_numbers(l):\n    '''\n    Write a function to print the mean of list with negative numbers.\n    '''\n    print(sum(filter(lambda x:x<0,l))/len(filter(lambda x:x<0,l)))\n    print_mean_of_list_with_negative_numbers.__doc__\ndef print_mean_of_list_with_positive_numbers(l):\n    '''\n    Write a function to print the mean of list with positive numbers.\n    '''\n    print(sum(filter(lambda x:x>=0,l))/len(filter(lambda x:x>=0,l)))\n    print_mean_of_list_with_positive_numbers.__do"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(0, len(l1)):\n        d[l1[i]] = {l2[i]:l3[i]}\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    i = 0\n    for x in l1:\n        sub_dict = {}\n        for y in l2:\n            sub_dict[y] = l3[i]\n            i += 1\n        dictionary[x] = sub_dict\n    return dictionary\n    \ndef convert_to_list_of_dict(dictionary):\n    '''\n    Write a function to convert a dictionary into nested list.\n    '''\n    l = []\n    for key in dictionary.keys():\n        l.append(key)\n        l.append(dictionary[key])\n    return l\n    \ndef check_password(password, is_password_strong):\n    '''\n    Write a function that checks whether the password is strong or not.\n    '''\n    if not is_password_strong:\n        return False\n    elif len(password) < 8:\n        return False\n    elif 'i' in password and 'o' in password or 'a' in password and 'e' in password or 'o' in password and 'a' in password or 'e' in password and 'i' in password:\n        return False\n    elif 'a' in password or 'e' in password or 'i' in password or 'o' in password or 'u' in password:\n        return False\n    else:\n        return True\n        \ndef palindrome_number(n):\n    '''\n    Write a function that finds the largest palindrome number that can be made by multiplying two prime numbers.\n    '''\n    list = []\n    while n >= 1:\n        list.append(n)\n        n = n // 2\n    i = 0\n    while i < len(list):\n        if i == 0:\n            if list[i] > list[i + 1]:\n                return list[i]\n        if i + 1 == len(list):\n            return list[i]\n        if list[i] * list[i + 1] > list[i + 1] * list[i]:\n            return list[i]\n        i += 1\n        \ndef prime_factors(n):\n    '''\n    Write a function to print all prime factors of a given number.\n    '''\n    while n % 2 == 0:\n        print(2, end ='')\n        n = n // 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            print(i, end ='')\n            n = n // i\n        else:\n            i += 2\n            \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n        \ndef print_elements(dictionary):\n    '''\n    Write a function to print all the dictionary keys and values.\n    '''\n    for key in dictionary.keys():\n        print(key, dictionary[key])\n        \ndef find_max_score(scores):\n    '''\n    Write a function that takes a list of scores and return the highest score.\n    '''\n    max_score = scores[0]\n    for score in scores:\n        if score > max_score:\n            max_score = score\n    return max_score\n        \ndef divide_integer(n):\n    '''\n    Write a function that takes a positive integer and returns the integer that is the smallest power of two that is greater than the number.\n    '''\n    if n == 1:\n        return 1\n    i = 1\n    while i * i <= n:\n        i = i * 2\n    return i - 1\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    for i in range(len(l1)):\n        dic[l2[i]] = l3[i]\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1,l2))\n    d2 = dict(zip(l1,l3))\n    d3 = dict(zip(l2,l3))\n    print('d1 = ', d1)\n    print('d2 = ', d2)\n    print('d3 = ', d3)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    # nested_dict = {}\n    # nested_dict = dict()\n    # nested_dict = {}\n    # nested_dict = {\n    #     \"level1\": {\n    #         \"level2\": {\n    #             \"level3\": {\n    #                 \"key1\": 1,\n    #                 \"key2\": 2,\n    #                 \"key3\": 3\n    #             },\n    #             \"key4\": 4\n    #         },\n    #         \"key5\": 5,\n    #         \"key6\": 6\n    #     },\n    #     \"key7\": 7,\n    #     \"key8\": 8,\n    #     \"key9\": 9\n    # }\n    # print(nested_list)\n    # print(nested_dict)\n    # nested_dict_2 = {}\n    # nested_dict_2[\"level1\"] = nested_list\n    # nested_dict_2[\"level1\"][0] = 1\n    # nested_dict_2[\"level1\"][1] = 2\n    # nested_dict_2[\"level1\"][2] = 3\n    # nested_dict_2[\"level2\"] = {}\n    # nested_dict_2[\"level2\"][\"level3\"] = {}\n    # nested_dict_2[\"level2\"][\"level3\"][\"key1\"] = 1\n    # nested_dict_2[\"level2\"][\"level3\"][\"key2\"] = 2\n    # nested_dict_2[\"level2\"][\"level3\"][\"key3\"] = 3\n    # nested_dict_2[\"level2\"][\"key4\"] = 4\n    # nested_dict_2[\"level2\"][\"key5\"] = 5\n    # nested_dict_2[\"level2\"][\"key6\"] = 6\n    # nested_dict_2[\"level3\"] = {}\n    # nested_dict_2[\"level3\"][\"key7\"] = 7\n    # nested_dict_2[\"level3\"][\"key8\"] = 8\n    # nested_dict_2[\"level3\"][\"key9\"] = 9\n    # print(nested_dict_2)\n    # nested_dict_2[\"level2\"][\"level3\"][\"key7\"] = 7\n    # nested_dict_2[\"level2\"][\"level3\"][\"key7\"] = 8\n    # nested_dict_2[\"level2\"][\"level3\"][\"key7\"] = 9\n    # print(nested_dict_2)\n    # nested_dict_3 = {}\n    # nested_dict_3 = {\"level1\": nested_dict_2}\n    # print(nested_dict_3)\n    # nested_dict_4 = {\"level1\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}, \"level12\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}, \"level12\": {}, \"level13\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}, \"level12\": {}, \"level13\": {}, \"level14\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}, \"level12\": {}, \"level13\": {}, \"level14\": {}, \"level15\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}, \"level12\": {}, \"level13\": {}, \"level14\": {}, \"level15\": {}, \"level16\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}, \"level12\": {}, \"level13\": {}, \"level14\": {}, \"level15\": {}, \"level16\": {}, \"level17\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}, \"level12\": {}, \"level13\": {}, \"level14\": {}, \"level15\": {}, \"level16\": {}, \"level17\": {}, \"level18\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, \"level3\": {}, \"level4\": {}, \"level5\": {}, \"level6\": {}, \"level7\": {}, \"level8\": {}, \"level9\": {}, \"level10\": {}, \"level11\": {}, \"level12\": {}, \"level13\": {}, \"level14\": {}, \"level15\": {}, \"level16\": {}, \"level17\": {}, \"level18\": {}, \"level19\": {}}\n    # nested_dict_4 = {\"level1\": {}, \"level2\": {}, "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for i in range(len(l1)):\n        if l1[i] in dict.keys():\n            dict[l1[i]].append(l2[i])\n        else:\n            dict[l1[i]] = l2[i]\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dictionary = {}\n    for i in range(len(l1)):\n        new_dictionary[l1[i]] = l2[i], l3[i]\n    return new_dictionary\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0 or n == 1:\n        return n\n    \n    return max( get_max_sum( n/2 ), get_max_sum( n/3 ), get_max_sum( n/4 ), get_max_sum( n/5 ) )\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return max(n, get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # if n is even then return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    if n%2==0:\n        return max(f(n/2), f(n/3), f(n/4), f(n/5))\n    else:\n        return max(f(n/2), f(n/3), f(n/4), f(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f (n):\n        return n*n if n%2 else (n//2)*(n//2)*(n//3)*(n//4)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    else:\n        return max( get_max_sum (n/2), get_max_sum (n/3), get_max_sum (n/4), get_max_sum (n/5) ) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # if n == 1 or n == 2:\n    #     return n\n    # if n == 3:\n    #     return 5\n    # if n == 4:\n    #     return 9\n    # if n == 5:\n    #     return 13\n    # if n == 6:\n    #     return 18\n    \n    max_sum = 0\n    while n >= 6:\n        if max_sum < n + max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5):\n            max_sum = max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5)\n        n //= 6\n    \n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def sum_list(n):\n        sum = 0\n        for i in range(1,n+1):\n            sum += i\n        return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n % 2 == 0 and n!= 2:\n        return get_max_sum(n/2) + max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    elif n % 2 == 0 and n == 2:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    elif n == 2:\n        return get_max_sum(n/2)\n    else:\n        return get_max_sum(n/2) + max(get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return False\n    list1 = input_list[0]\n    for i in input_list[1:]:\n        if len(i) > len(list1):\n            list1 = i\n    return list1\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    m_list = []\n    max_length = 0\n    for i in input_list:\n        if isinstance(i, list) and len(i) > max_length:\n            max_length = len(i)\n            m_list = i\n    return m_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n    \n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    min = 100\n    for i in input_list:\n        if len(i) < min:\n            min = len(i)\n    return min\n    \ndef remove_numbers(input_list):\n    '''\n    Write a function to remove numbers from the list\n    '''\n    new_list = []\n    for i in input_list:\n        if i.isdigit():\n            new_list.append(i)\n    return new_list\n    \ndef remove_duplicate(input_list):\n    '''\n    Write a function to remove duplicate from the list\n    '''\n    new_list = []\n    for i in input_list:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n    \ndef merge_list(input_list):\n    '''\n    Write a function to merge two lists without using any extra space. The new list should be made by adding \n    elements from both the given lists alternatively and skipping the elements with the same data.\n    '''\n    if len(input_list) == 1:\n        return input_list\n    result = []\n    for i in range(len(input_list)):\n        result.append(input_list[i])\n        if i < len(input_list) - 1:\n            result.append(input_list[i+1])\n    return result\n    \ndef find_count_element(input_list,element):\n    '''\n    Write a function to count how many times the given element is present in the list\n    '''\n    result = 0\n    for i in input_list:\n        if i == element:\n            result += 1\n    return result\n    \ndef count_elements(input_list):\n    '''\n    Write a function to count how many times the given element is present in the list\n    '''\n    result = 0\n    for i in input_list:\n        if i in input_list:\n            result += 1\n    return result\n    \ndef create_list(input_list):\n    '''\n    Write a function to create a list in the format specified in the problem statement.\n    '''\n    new_list = []\n    for i in input_list:\n        new_list.append(\"{} {}\".format(i[0],i[1]))\n    return new_list\n    \ndef merge_string(input_string):\n    '''\n    Write a function to add a space between each character in the given string\n    '''\n    new_string = \"\"\n    for i in range(len(input_string)):\n        if i < len(input_string) - 1:\n            new_string += input_string[i] + \" \"\n        else:\n            new_string += input_string[i]\n    return new_string\n    \ndef merge_string_odd(input_string):\n    '''\n    Write a function to add a space between each character in the given string\n    '''\n    new_string = \"\"\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            new_string += input_string[i] + \" \"\n        else:\n            new_string += input_string[i]\n    return new_string\n    \ndef string_odd_even_split(input_string):\n    '''\n    Write a function to split the string in odd and even parts\n    '''\n    new_string = \"\"\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            new_string += input_string[i] + \" \"\n        else:\n            new_string += input_string[i]\n    return new_string\n    \ndef main():\n    # Test max_length_list\n    list1 = ['one','two','three','four']\n    print(max_length_list(list1))\n    print(max_length_list([]))\n    \n    # Test min_length_list\n    list2 = ['abc','abc','']\n    print(min_length_list(list2))\n    print(min_length_list([]))\n    \n    # Test remove_numbers\n    list3 = ['one','two','three','four']\n    print(remove_numbers(list3))\n    \n    # Test remove_duplicate\n    list4 = ['one','one','two','three','four']\n    print(remove_duplicate(list4))\n    \n    # Test merge_list\n    list5 = ['one','two','three','four']\n    print(merge_list(list5))\n    \n    # Test find_count_element\n    list6 = ['one','two','three','four','one','one','one','four','one','one']\n    print(find_count_element(list6, 'one'))\n    print(find_count_element(list6, 'four'))\n    \n    # Test count_elements\n    list7 = ['one','two','three','four','one','one','one','four','one','one']\n    print(count_elements(list7))\n    \n    # Test create_list\n    list8 = ['one','two','three','four']\n    print(create_list(list8))\n    \n    # Test merge_string\n    list9 = ['one','two','three','four']\n    print(merge_string(list9))\n    \n    # Test merge_string_odd\n    list10 = ['one','two','three','four']\n    print(merge_string_odd(list10))\n    \n    # Test string_odd_even_split\n    list11 = ['one','two','three','four']\n    print(string_odd_even_split(list11))\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length_list_length = 0\n    max_length_list = []\n    for item in input_list:\n        if len(item) >= max_length_list_length:\n            max_length_list = item\n            max_length_list_length = len(item)\n    return max_length_list\n    \n    \n    # TODO: Your code here\n    #return len(max(input_list, key=len))\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    list_max_length = []\n    for i in range(0, len(input_list)):\n        if len(input_list[i]) >= max_length:\n            max_length = len(input_list[i])\n            list_max_length.append(input_list[i])\n    print(list_max_length)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l = []\n    for x in input_list:\n        l.append(len(x))\n    return max(l)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not (test_tup in test_tup[1:])\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = set(test_tup)\n    if len(distinct) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # time complexity O(n) and space complexity O(1)\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #If length of tuple is 0, then all the values in the tuple are unique\n    if len(test_tup) == 0:\n        return True\n    else:\n        #Otherwise, check if the values are unique\n        #1st way\n        if len(set(test_tup)) == len(test_tup):\n            return True\n        #2nd way\n        if len(test_tup) == len(set(test_tup)):\n            return True\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # print(\"Function :\",check_distinct)\n    set_tup = set(test_tup)\n    if len(test_tup) == len(set_tup):\n        print(\"No duplicate value.\")\n        return True\n    else:\n        print(\"Duplicates exist.\")\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = False\n    for x in range(1,len(test_tup)):\n        if test_tup[x] in test_tup[:x]:\n            distinct = True\n    if not distinct:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    string = str1\n    if string:\n        str1_list = list(string)\n        str1_set = set(str1_list)\n        return str1_list[0] if len(str1_set) == 1 else None\n    else:\n        return None\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_set = set(str1)\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return \"No First non-repeating character\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    try:\n        if str1 == \"\":\n            return -1\n        else:\n            dict = {}\n            for char in str1:\n                if char in dict.keys():\n                    dict[char] = dict[char] + 1\n                else:\n                    dict[char] = 1\n            for char in str1:\n                if dict[char] == 1:\n                    return char\n            return -1\n    except Exception as e:\n        print('ERROR:', e)\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Initializing a string\n    new_str1 = str1\n    #Creating a dictionary using Counter \n    #Expected Result : K\n    dict1 = {}\n    for i in str1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    #Printing dictionary\n    #Expected Result : K\n    print(dict1)\n    #Finding the first non-repeated character\n    for i in range(len(str1)):\n        if dict1[str1[i]] == 1:\n            #Expected Result : K\n            return str1[i]\n    #Expected Result : N\n    return 'N'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for k, v in d.items():\n        if v == 1:\n            return k\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_occurence_count = {}\n    for char in str1:\n        if char not in char_occurence_count.keys():\n            char_occurence_count[char] = 1\n        else:\n            char_occurence_count[char] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0] if len(set(str1)) == len(str1) else -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    s = set(str1)\n    for i in range(len(str1)):\n        if str1[i] not in s:\n            return i\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize the array for storing unique characters\n    unique_chars = []\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(string.startswith(string[0]))\n    print(string.endswith(string[0]))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(string[0] == string[-1])\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 2:\n        if string[:2] == string[-2:]:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_vowels(string):\n    '''\n    Write a function to check whether the given string contains only vowels or not.\n    '''\n    vowel_list = ['a', 'e', 'i', 'o', 'u']\n    for x in vowel_list:\n        if x not in string:\n            return False\n    else:\n        return True\ndef check_consonants(string):\n    '''\n    Write a function to check whether the given string contains only consonants or not.\n    '''\n    consonants_list = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    for x in consonants_list:\n        if x not in string:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)==0:\n        return False\n    if string[0]!=string[-1]:\n        return False\n    return True\n    \ndef palindrome(string):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    if len(string)==0:\n        return True\n    if check_char(string):\n        return True\n    if len(string)==1:\n        return True\n    if len(string)%2==0:\n        if string[0]==string[-1]:\n            return True\n        else:\n            return False\n    else:\n        if string[0]==string[-1]:\n            return True\n        else:\n            return False\n        \ndef check_spacing(string):\n    '''\n    Write a function to check whether a given string is spaced properly or not.\n    '''\n    if len(string)==0:\n        return True\n    if string[0]==' ':\n        return False\n    if len(string)==1:\n        return True\n    if string[-1]==' ':\n        return False\n    if string[0]!=' ':\n        return False\n    if string[-1]!=' ':\n        return False\n    for i in range(1,len(string)-1):\n        if string[i]==''and string[i+1]==' ':\n            return False\n    return True\n        \ndef check_capital(string):\n    '''\n    Write a function to check whether a given string is capitalized or not.\n    '''\n    if len(string)==0:\n        return True\n    if string[0].isupper():\n        return True\n    else:\n        return False\n        \ndef check_up_and_down(string):\n    '''\n    Write a function to check whether a given string is uppercase or not.\n    '''\n    if len(string)==0:\n        return True\n    if string[0].isupper():\n        return True\n    if string[0].islower():\n        return True\n    if string[0].isnumeric():\n        return True\n    else:\n        return False\n        \ndef check_numeric(string):\n    '''\n    Write a function to check whether a given string is numeric or not.\n    '''\n    if len(string)==0:\n        return True\n    if re.findall(r'[0-9]+',string):\n        return True\n    if re.findall(r'^[-]?[0-9]+$',string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string) is not None\nprint(check_char('dsdfasdfasdfasdfasdf'))\nprint(check_char('dsdfasdfasdfasdfasdfasf'))\nprint(check_char('dasd'))\nprint(check_char('dsd'))\ndef check_char_2(string):\n    '''\n    Write a function to check whether the given string contains exactly two different characters or not.\n    '''\n    return re.search(r'(.+)(.+)\\1',string) is not None\nprint(check_char_2('a'))\nprint(check_char_2('abc'))\nprint(check_char_2('ac'))\ndef check_char_3(string):\n    '''\n    Write a function to check whether the given string contains an even number of characters or not.\n    '''\n    return re.search(r'\\w*(.).*\\1',string) is not None\nprint(check_char_3('abcdef'))\nprint(check_char_3('abdef'))\nprint(check_char_3('123'))\ndef check_char_4(string):\n    '''\n    Write a function to check whether the given string contains a repeated character or not.\n    '''\n    return re.search(r'(.)\\1\\1',string) is not None\nprint(check_char_4('abc'))\nprint(check_char_4('abcd'))\nprint(check_char_4('aabbcc'))\ndef check_char_5(string):\n    '''\n    Write a function to check whether the given string contains any lowercase alphabets only or not.\n    '''\n    return re.search(r'^[a-z]*$',string) is not None\nprint(check_char_5('asdfasdfasdfasdfasdf'))\nprint(check_char_5('asdf'))\nprint(check_char_5('Dasdf'))\ndef check_char_6(string):\n    '''\n    Write a function to check whether the given string contains any numeric characters only or not.\n    '''\n    return re.search(r'^[0-9]*$',string) is not None\nprint(check_char_6('123abc'))\nprint(check_char_6('123'))\nprint(check_char_6('1'))\ndef check_char_7(string):\n    '''\n    Write a function to check whether the given string contains any lowercase alphabets and numeric characters only or not.\n    '''\n    return re.search(r'^[a-zA-Z0-9]*$',string) is not None\nprint(check_char_7('asdf1234s'))\nprint(check_char_7('123'))\nprint(check_char_7('abc123'))\ndef check_char_8(string):\n    '''\n    Write a function to check whether the given string contains any alphabetical characters only or not.\n    '''\n    return re.search(r'^[a-zA-Z]*$',string) is not None\nprint(check_char_8('asdf1234s'))\nprint(check_char_8('123'))\nprint(check_char_8('abc'))\ndef check_char_9(string):\n    '''\n    Write a function to check whether the given string contains any lowercase alphabets and numeric characters only or not.\n    '''\n    return re.search(r'^[a-zA-Z0-9]*$',string) is not None\nprint(check_char_9('1234sdfasdf'))\nprint(check_char_9('123'))\nprint(check_char_9('asdf'))\ndef check_char_10(string):\n    '''\n    Write a function to check whether the given string contains any numeric characters only or not.\n    '''\n    return re.search(r'^[0-9]*$',string) is not None\nprint(check_char_10('1234sdfasdf'))\nprint(check_char_10('123'))\nprint(check_char_10('asdf'))\ndef check_char_11(string):\n    '''\n    Write a function to check whether the given string contains any alphabetical characters only or not.\n    '''\n    return re.search(r'^[a-zA-Z]*$',string) is not None\nprint(check_char_11('1234sdfasdf'))\nprint(check_char_11('123'))\nprint(check_char_11('asdf'))\ndef check_char_12(string):\n    '''\n    Write a function to check whether the given string contains any lowercase alphabets and numeric characters only or not.\n    '''\n    return re.search(r'^[a-zA-Z0-9]*$',string) is not None\nprint(check_char_12('1234sdfasdf'))\nprint(check_char_12('123'))\nprint(check_char_12('asdf'))\ndef check_char_13(string):\n    '''\n    Write a function to check whether the given string contains any alphabetical characters only or not.\n    '''\n    return re.search(r'^[a-z]*$',string) is not None\nprint(check_char_13('1234sdfasdf'))\nprint(check_char_13('123'))\nprint(check_char_13('asdf'))\ndef check_char_14(string):\n    '''\n    Write a function to check whether the given string contains any numeric characters only or not.\n    '''\n    return re.search(r'^[0-9]*$',string) is not None\nprint(check_char_14('1234sdfasdf'))\nprint(check_char_14('123'))\nprint(check_char_14('asdf'))\ndef check_char_15(string):\n    '''\n    Write a function to check whether the given string contains any lowercase alphabets and numeric characters only or not.\n    '''\n    return re.search(r'^[a-zA-Z0-9]*$',string) is not None\nprint(check_char_15('1234sdfasdf'))\nprint(check_char_15('123'))\nprint(check_char_15('asdf'))\ndef check_char_16(string):\n    '''\n    Write a function to check whether the given string contains any alphabetical characters only or not.\n    '''\n    return re.search(r'^[a-z]*$',string) is not None\nprint(check_char_16('1234sdfasdf'))\nprint(check_char_16('123'))\nprint(check_char_16('asdf'))\ndef check_char_17(string):\n    '''\n    Write a function to check whether the given string contains any numeric characters only or not.\n    '''\n    return re.search(r'^[0-9]*$',string) is not None\nprint(check_char_17('1234sdfasdf'))\nprint(check_char_17('123'))\nprint(check_char_17('asdf'))\ndef check_char_18(string):\n    '''\n    Write a function to check whether the given string contains any lowercase alphabets and numeric characters only or not.\n    '''\n    return re.search(r'^[a-zA-Z0-9]*$',string) is not None\nprint(check_char_18('1234sdfasdf'))\nprint(check_char_18('123'))\nprint(check_char_18('asdf'))\ndef check_char_19(string):\n    '''\n    Write a function to check whether the given string contains any alphabetical characters only or not.\n    '''\n    return re.search(r'^[a-z]*$',string) is not None\nprint(check_char_19('1234sdfasdf'))\nprint(check_char_19('123'))\nprint(check_char_19('asdf'))\ndef check_cha"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    else:\n        return (string[0] == string[-1]) and (string[0] in string)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if string[0] == string[-1] else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if len(string) >= 3 and string[0]==string[-1] else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string) is not None:\n        print(\"True\")\n    else:\n        print(\"False\")\ncheck_char('A')\ncheck_char('a')\ncheck_char('Aaaa')\ncheck_char('AaaaA')\ncheck_char('A')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\ncheck_char('abcd')\ncheck_char('abcd123')\ncheck_char('aabcd')\ncheck_char('aabcdA')\ncheck_char('abcdA')\ncheck_char('abcdA123')\ncheck_char('abcdA123A')\ncheck_char('abcdA123')\ncheck_char('aA')\ncheck_char('A')\ncheck_char('')\ncheck_char('A')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('bb')\ncheck_char('b')\ncheck_char('aA')\ncheck_char('a')\ncheck_char('aa')\ncheck_char('aa')\ncheck_char('aaA')\ncheck_char('aaa')\ncheck_char('aa')\nchec"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    middle = a\n    first = b\n    second = c\n    if a >= b and a >= c:\n        middle = a\n        if b >= c:\n            middle = b\n            if c >= a:\n                middle = c\n    if b >= a and b >= c:\n        middle = b\n        if a >= c:\n            middle = a\n            if c >= b:\n                middle = c\n    if c >= a and c >= b:\n        middle = c\n        if a >= b:\n            middle = a\n            if b >= c:\n                middle = b\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2!= 0:\n        middle = len(numbers) // 2\n        return numbers[middle]\n    else:\n        middle = len(numbers) // 2\n        median = (numbers[middle - 1] + numbers[middle]) / 2\n        return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a + b + c - min(a, b, c) - max(a, b, c)) / 2\n    \n    \ndef f(x):\n    '''\n    Some function which takes an input and returns the value \n    of the function.\n    '''\n    return x*x\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_num = [a,b,c]\n    \n    median = float(sorted(list_of_num)[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (sorted([a,b,c])[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    assert type(a) == int and a > 0, \"Incorrect input\"\n    assert type(b) == int and b > 0, \"Incorrect input\"\n    assert type(c) == int and c > 0, \"Incorrect input\"\n    assert a < b and b < c, \"Incorrect input\"\n    assert a!= b and b!= c, \"Incorrect input\"\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_array = sorted([a,b,c])\n    median = (sorted_array[1] + sorted_array[2])/2\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_1 = sorted([a,b,c])\n    return list_1[1]\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    assert type(nums) == list, \"nums should be of type list\"\n    assert all(type(x) == int for x in nums), \"all the elements of nums should be of type int\"\n    s = 0\n    for x in nums:\n        s += sum_of_digits(x)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += len(str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_nums = []\n    for num in nums:\n        sum_of_nums.append(sum(int(x) for x in str(num)))\n    return sum_of_nums\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum_of_digits_helper(i)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += digit(num)\n    return result\n    \ndef sum_of_digits_optimized(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda x: digit(x), nums))\n    \ndef digit(n):\n    '''\n    Returns the digit of n\n    '''\n    return n - (n // 10) * 10\n    \ndef sum_of_digits_recursive(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return 0\n    if nums[0] < 0 or nums[0] >= 10:\n        return 0\n    return nums[0] + sum_of_digits_recursive(nums[1:])\n    \ndef sum_of_digits_optimized_recursive(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return 0\n    if nums[0] < 0 or nums[0] >= 10:\n        return 0\n    return nums[0] + sum_of_digits_optimized_recursive(nums[1:])\n    \n    \nif __name__ == '__main__':\n    import time\n    \n    nums = []\n    for i in range(10000):\n        nums.append(i)\n    t0 = time.clock()\n    sum_of_digits(nums)\n    t1 = time.clock()\n    print(t1 - t0)\n    \n    t2 = time.clock()\n    sum_of_digits_optimized(nums)\n    t3 = time.clock()\n    print(t3 - t2)\n    \n    t4 = time.clock()\n    sum_of_digits_recursive(nums)\n    t5 = time.clock()\n    print(t5 - t4)\n    \n    t6 = time.clock()\n    sum_of_digits_optimized_recursive(nums)\n    t7 = time.clock()\n    print(t7 - t6)\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += len(str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # make a new list to store the result\n    result = []\n    # for each number in the original list, compute the sum of digits\n    for num in nums:\n        # call sum_of_digits\n        result.append(sum_of_digits(num))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, map(str, nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum_of_digits_core(num)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0]^test_tup2[0]), (test_tup1[1]^test_tup2[1]))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # xor operation\n    # python3.8+ use ~ operator\n    return (test_tup1[0] ^ test_tup2[0], \\\n            test_tup1[1] ^ test_tup2[1], \\\n            test_tup1[2] ^ test_tup2[2])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tuple = ()\n    for x,y in zip(test_tup1,test_tup2):\n        xor_tuple += (x^y,)\n    return xor_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    #return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (0, 0)\n    for i in range(len(test_tup1)):\n        result = (result[0] ^ test_tup1[i], result[1] ^ test_tup2[i])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] ^ test_tup2[i]!= 0:\n                return False\n        return True\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = int(test_tup1[0])\n    y = int(test_tup2[0])\n    return (x ^ y)\n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    x = int(test_tup1[0])\n    y = int(test_tup2[0])\n    return (x & y)\n    \ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise or operation across the given tuples.\n    '''\n    x = int(test_tup1[0])\n    y = int(test_tup2[0])\n    return (x | y)\n    \ndef bitwise_leftshift(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical left shift operation across the given tuples.\n    '''\n    x = int(test_tup1[0])\n    y = int(test_tup2[0])\n    return (x << y)\n    \ndef bitwise_rightshift(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical right shift operation across the given tuples.\n    '''\n    x = int(test_tup1[0])\n    y = int(test_tup2[0])\n    return (x >> y)\n    \ndef bitwise_not(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise not operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    return ~x\n    \ndef bitwise_and_constant(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise and constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x & constant)\n    \ndef bitwise_or_constant(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise or constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x | constant)\n    \ndef bitwise_xor_constant(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise xor constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x ^ constant)\n    \ndef bitwise_leftshift_constant(test_tup1):\n    '''\n    Write a function to perform the mathematical left shift constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x << constant)\n    \ndef bitwise_rightshift_constant(test_tup1):\n    '''\n    Write a function to perform the mathematical right shift constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x >> constant)\n    \ndef bitwise_not_constant(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise not constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return ~(x & constant)\n    \ndef bitwise_and_constant_2(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise and constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x & constant)\n    \ndef bitwise_or_constant_2(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise or constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x | constant)\n    \ndef bitwise_xor_constant_2(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise xor constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x ^ constant)\n    \ndef bitwise_leftshift_constant_2(test_tup1):\n    '''\n    Write a function to perform the mathematical left shift constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x << constant)\n    \ndef bitwise_rightshift_constant_2(test_tup1):\n    '''\n    Write a function to perform the mathematical right shift constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x >> constant)\n    \ndef bitwise_not_constant_2(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise not constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return ~(x & constant)\n    \ndef bitwise_and_constant_3(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise and constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x & constant)\n    \ndef bitwise_or_constant_3(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise or constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x | constant)\n    \ndef bitwise_xor_constant_3(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise xor constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x ^ constant)\n    \ndef bitwise_leftshift_constant_3(test_tup1):\n    '''\n    Write a function to perform the mathematical left shift constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x << constant)\n    \ndef bitwise_rightshift_constant_3(test_tup1):\n    '''\n    Write a function to perform the mathematical right shift constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return (x >> constant)\n    \ndef bitwise_not_constant_3(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise not constant operation across the given tuple.\n    '''\n    x = int(test_tup1[0])\n    constant = int(test_tup1[1])\n    return ~(x & constant)\n    \ndef bitwise_and_constant_4(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise and constant operation across the given tuple.\n    '''\n    x = int(test_tup1["
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return xor_tup\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_freq_tuples = []\n    # your code here\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        tup_freq = test_list.count(tup)\n        num_freq_tuples.append(tup_freq)\n    return num_freq_tuples\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result_set = set()\n    for x in test_list:\n        if x in result_set:\n            continue\n        else:\n            result_set.add(x)\n    return len(result_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    d={}\n    for i in test_list:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(x) for x in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    def unique_tuple_count(list1):\n        \n        #sort the list to maintain the unique tuples\n        list1.sort()\n        \n        #initialize the count\n        count = 1\n        \n        #initialize the last element of the list\n        last = list1[0]\n        \n        for i in range(1,len(list1)):\n            #if last element of list and curr element is same, increase the count\n            if(last == list1[i]):\n                count += 1\n                #update last value\n                last = list1[i]\n            else:\n                #else update count and break\n                count = 1\n                last = list1[i]\n        #return the count\n        return count\n    #pass the list\n    return unique_tuple_count(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    res = []\n    for i in test_list:\n        res.append(len(i))\n    return res\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if len(i) == len(set(i)):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    res = 0\n    dicti = {}\n    for i in test_list:\n        dicti[i[0]] = i[1]\n    for i in dicti:\n        if dicti[i] not in res:\n            res += 1\n    return res\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    add_tup = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        add_tup.append(tup1+tup2)\n    return add_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # tuple1 = (0,1,2,3,4)\n    # tuple2 = (5,6,7,8,9)\n    \n    # tuple1 = (10,11,12,13,14)\n    # tuple2 = (15,16,17,18,19)\n    \n    # tuple1 = (20,21,22,23,24)\n    # tuple2 = (25,26,27,28,29)\n    #\n    # return tuple1 + tuple2\n    \n    # Alternative Solution (Using zip function)\n    # return tuple(x+y for x,y in zip(test_tup1,test_tup2))\n    \n    # Alternative Solution (Using sum function)\n    # return sum(x for x in test_tup1) + sum(x for x in test_tup2)\n    \n    # Alternative Solution (Using unpacking the tuples)\n    # return tuple(sum(tup) for tup in zip(test_tup1, test_tup2))\n    \n    # Alternative Solution (Using reduce function)\n    # from functools import reduce\n    # return reduce(lambda x,y: x + y, test_tup1) + reduce(lambda x,y: x + y, test_tup2)\n    \n    # Alternative Solution (Using reduce function)\n    # from functools import reduce\n    # return reduce(lambda x,y: (x,y) if x < y else (y,x),test_tup1) + reduce(lambda x,y: (x,y) if x < y else (y,x),test_tup2)\n    \n    # Another Alternative Solution\n    return tuple(test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)))\n    \n    \ntest_tup1 = (0,1,2,3,4)\ntest_tup2 = (5,6,7,8,9)\ntest_tup3 = (10,11,12,13,14)\ntest_tup4 = (15,16,17,18,19)\ntest_tup5 = (20,21,22,23,24)\ntest_tup6 = (25,26,27,28,29)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # without nested tuples\n    tup1 = (1, 2, 4)\n    tup2 = (4, 5, 6)\n    tup3 = ()\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for i in range(len(tup1)):\n        for j in range(len(tup2)):\n            if len(tup1) > i:\n                if len(tup2) > j:\n                    tup1[i] += tup2[j]\n            else:\n                tup1 += tup2[j]\n    print(tup1)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1[0]+test_tup1[1] + test_tup2[0] + test_tup2[1]\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup1 = test_tup1\n    nested_tup2 = test_tup2\n    new_tup = []\n    for i in range(len(nested_tup1)):\n        temp_tup = []\n        for j in range(len(nested_tup1[i])):\n            temp_tup.append(nested_tup1[i][j] + nested_tup2[i][j])\n        new_tup.append(temp_tup)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple:\n            for j in range(len(test_tup1[i])):\n                test_tup1[i] = test_tup1[i] + (test_tup2[i][j],)\n        else:\n            test_tup1[i] = test_tup1[i] + test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup_val = []\n    for i in range(len(test_tup1)):\n        tup_val.append(test_tup1[i] + test_tup2[i])\n    return tuple(tup_val)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup = tuple(map(lambda x,y:x+y,test_tup1,test_tup2))\n    return nested_tup\n    "
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return list(zip(map(lambda x: x[0] + x[1], zip(test_tup1, test_tup2)), map(lambda x, y: x + y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\nminimum(10,20)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return b\n    else:\n        return a\n    \nprint(minimum(1,2))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef minimum2(a,b):  \n    '''\n    Write a python function to find the minimum of two numbers using if else.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef minimum3(a,b):  \n    '''\n    Write a python function to find the minimum of two numbers using ternary.\n    '''\n    return a if a<b else b\n    \ndef minimum4(a,b):  \n    '''\n    Write a python function to find the minimum of two numbers using ternary with \n    elif.\n    '''\n    return a if a<b else b if a<b else a\n    \ndef minimum5(a,b):  \n    '''\n    Write a python function to find the minimum of two numbers using ternary with \n    elif and else.\n    '''\n    return a if a<b else b if a<b else a if a<b else b\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef maximum2(a,b):  \n    '''\n    Write a python function to find the maximum of two numbers using if else.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef maximum3(a,b):  \n    '''\n    Write a python function to find the maximum of two numbers using ternary.\n    '''\n    return a if a>b else b\n    \ndef maximum4(a,b):  \n    '''\n    Write a python function to find the maximum of two numbers using ternary with \n    elif.\n    '''\n    return a if a>b else b if a>b else a if a>b else b\n    \ndef maximum5(a,b):  \n    '''\n    Write a python function to find the maximum of two numbers using ternary with \n    elif and else.\n    '''\n    return a if a>b else b if a>b else a if a>b else b\n    \ndef double(a):  \n    '''\n    Write a python function to double the number.\n    '''\n    return a*2\n    \ndef square(a):  \n    '''\n    Write a python function to square the number.\n    '''\n    return a*a\n    \ndef cube(a):  \n    '''\n    Write a python function to cube the number.\n    '''\n    return a*a*a\n    \ndef power(a,b):  \n    '''\n    Write a python function to raise the number to the power of the number.\n    '''\n    return a**b\n    \ndef toStr(a):  \n    '''\n    Write a python function to convert the number to string.\n    '''\n    return str(a)\n    \ndef add(a,b):  \n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\n    \ndef subtract(a,b):  \n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return a-b\n    \ndef multiply(a,b):  \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\n    \ndef divide(a,b):  \n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\n    \ndef power(a,b):  \n    '''\n    Write a python function to raise the number to the power of the number.\n    '''\n    return a**b\n    \ndef isEven(a):  \n    '''\n    Write a python function to check whether the number is even or not.\n    '''\n    if a%2==0:\n        return True\n    else:\n        return False\n        \ndef isOdd(a):  \n    '''\n    Write a python function to check whether the number is odd or not.\n    '''\n    if a%2!=0:\n        return True\n    else:\n        return False\n        \ndef isPrime(a):  \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if a<=1:\n        return False\n    elif a==2:\n        return True\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\n    \ndef isPalindrome(a):  \n    '''\n    Write a python function to check whether the number is palindrome or not.\n    '''\n    if a==a[::-1]:\n        return True\n    else:\n        return False\n        \ndef isPalindrome2(a):  \n    '''\n    Write a python function to check whether the number is palindrome or not.\n    '''\n    if a==a[::-1]:\n        return True\n    else:\n        return False\n        \ndef isPrime2(a):  \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if a<=1:\n        return False\n    elif a==2:\n        return True\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\n    \ndef isPalindrome3(a):  \n    '''\n    Write a python function to check whether the number is palindrome or not.\n    '''\n    l=[]\n    s=str(a)\n    for i in range(len(s)):\n        l.append(s[i])\n    return l==l[::-1]\n    \ndef isPalindrome4(a):  \n    '''\n    Write a python function to check whether the number is palindrome or not.\n    '''\n    return str(a)==str(a)[::-1]\n    \ndef isPalindrome5(a):  \n    '''\n    Write a python function to check whether the number is palindrome or not.\n    '''\n    import re\n    return re.match(\"^[a-z]+$\",a)\n    \ndef isPalindrome6(a):  \n    '''\n    Write a python function to check whether the number is palindrome or not.\n    '''\n    return a==a[::-1]\n    \ndef isPrime3(a):  \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if a<=1:\n        return False\n    elif a==2:\n        return True\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\n    \ndef isPrime4(a):  \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if a<=1:\n        return False\n    elif a==2:\n        return True\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\n    \ndef isPrime5(a):  \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if a<=1:\n        return False\n    elif a==2:\n        return True\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\n    \ndef isPrime6(a):  \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    return str(a)==str(a)[::-1]\n    \ndef isPrime7(a):  \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if a<=1:\n        return False\n    elif a==2:\n        return True\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\n    \ndef isPrime8(a):  \n    '''\n    Write a python function to check whether the numbe"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\nprint(minimum(4,5))\nprint(minimum(8,5))\nprint(minimum(4,8))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (True if tuple1 in tuplex else False)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1: \n        if x in tuplex: \n            return True \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(x in tuplex for x in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            print(True)\n            break\n    else:\n        print(False)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element exists.\")\n    else:\n        print(\"Not exists.\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_list(list1,list2): \n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    if list1 in list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex: \n        if item == tuple1: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef tuplex(string):\n    '''\n    Write a program that takes a string and prints its characters in reverse order.\n    '''\n    string = input(\"Enter a string: \")\n    tuplex = []\n    for i in range(len(string)):\n        tuplex.append(string[i])\n    for i in range(len(tuplex)-1,-1,-1):\n        print(tuplex[i], end = \"\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'odd' if x%2 == 1 else 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return ((x & 1) == 0)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = ''\n    if(x & 1) :\n        result = 'Odd'\n    else :\n        result = 'Even'\n    return result\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    print(bin(x))\n    return (bin(x)[-1] == '0')\n    "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    if x%2==0:\n        parity = 0\n    else:\n        parity = 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        return \"even\" \n    else: \n        return \"odd\" \n    # Driver code \n    print(\"The parity of\", x,\"is\", find_Parity(x)) \n    "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x % 2\n    return y\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        print(\"parity is even\")\n    else:\n        print(\"parity is odd\")\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    b = list(n)\n    i = len(b) - 1\n    while i >= 0:\n        if b[i] > b[i - 1]:\n            break\n        i -= 1\n    if i == 0:\n        b.insert(0, b.pop())\n        return int(''.join(b))\n    a = b[i]\n    c = b[:i]\n    if int(a) >= int(b[i - 1]):\n        b.insert(i, b.pop())\n    else:\n        b.insert(i - 1, b.pop())\n    return int(''.join(b))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # base case\n    if n <= 0:\n        return 0\n    # if the number is greater than 10,\n    # then just return it\n    if n >= 10:\n        return n\n    # convert the number to a string\n    n = str(n)\n    # iterate through the string\n    for i in range(len(n) - 1, -1, -1):\n        # if the current digit is smaller than the next,\n        # then it becomes the new bigger number\n        if int(n[i]) < int(n[i + 1]):\n            return int(n[:i + 1] + str(int(n[i]) + 1) + n[i + 1:])\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n_sorted = sorted(n, reverse=True)\n    n_rearranged = int(''.join(n_sorted))\n    return n_rearranged\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(map(int,str(n)))\n    n = sorted(n,reverse=True)\n    n = \"\".join(list(map(str,n)))\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1):\n        if n[i] < n[i+1]:\n            n = n[:i] + n[i+1] + n[i:i+1] + n[i+2:]\n            break\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i == 0:\n                    result = i\n                    break\n            # add the biggest digit to the result\n            return n + (n - result)\n        \n    def next_bigger(n):\n        '''\n        Finds the next biggest number by modifying the number in place.\n        '''\n        if n < 10:\n            return 'next bigger number is one'\n        elif n % 10 == 0:\n            return 'next bigger number is zero'\n        elif n % 10 < 5:\n            return next_bigger(n + (n - n % 10))\n        else:\n            result = 0\n            # find the smallest digit after the biggest digit\n            for i in range(9, 0, -1):\n                if n % i ="
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    m = ''\n    while(len(n)>0):\n        x = max(n)\n        n.remove(x)\n        x = int(x)\n        if len(str(x))>=1:\n            m += str(x)\n        else:\n            m += str(x) + str(0)\n    m = int(m)\n    return(m)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a=list(str(n))\n    a.sort(reverse=True)\n    return int(\"\".join(a))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #a = list(str(n))\n    a = list(str(n))\n    b = list(str(n))\n    b.reverse()\n    c = list(str(n))\n    c.reverse()\n    #print(a)\n    #print(b)\n    #print(c)\n    if a[0] == '0' and len(a) > 1:\n        a.remove(a[0])\n        a.append(int(''.join(a)))\n        return int(''.join(a))\n    elif a[0] == '0' and len(a) == 1:\n        return int(''.join(a))\n    elif a[0]!= '0' and len(a) == 1:\n        return int(''.join(a))\n    elif a[0]!= '0' and len(a) > 1:\n        a.remove(a[0])\n        a.append(int(''.join(a)))\n        return int(''.join(a))\n    else:\n        a.remove(a[0])\n        a.append(int(''.join(a)))\n        return int(''.join(a))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    l = len(str_n)\n    lst = list(str_n)\n    #create a list of numbers smaller than n\n    for i in range(l-1, 0, -1):\n        if int(lst[i]) > int(lst[i-1]):\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n            lst[i:] = sorted(lst[i:], reverse = True)\n            lst[i] = int(lst[i])\n            if i == 1:\n                break\n    return int(''.join(lst))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == nums2 == []:\n        return []\n    k_numbers = []\n    size1 = len(nums1)\n    size2 = len(nums2)\n    k = k if k <= min(size1, size2) else min(size1, size2)\n    if size1 > size2:\n        nums1, nums2 = nums2, nums1\n        size1, size2 = size2, size1\n    heap = []\n    for i in range(size1):\n        heapq.heappush(heap, (-nums1[i], i))\n    for i in range(size2):\n        if len(heap) < k:\n            continue\n        if heap[0][1] == i:\n            heapq.heappop(heap)\n        else:\n            break\n    while heap and i < size2:\n        if heap[0][1] == i:\n            heapq.heappop(heap)\n        else:\n            break\n    for i in range(len(heap)):\n        k_numbers.append((nums1[heap[i][1]], nums2[i]))\n    return k_numbers\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_smallest_pairs(nums1, nums2, k):\n        '''\n        Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n        '''\n        size1 = len(nums1)\n        size2 = len(nums2)\n        k = k if k <= min(size1, size2) else min(size1, size2)\n        if size1 > size2:\n            nums1, nums2 = nums2, nums1\n            size1, size2 = size2, size1\n        heap = []\n        heapq.heapify(heap)\n        for i in range(size1):\n            heapq.heappush(heap, (-nums1[i], i))\n        for i in range(size2):\n            if len(heap) == k:\n                break\n            if heap[0][1] == i:\n                heapq.heappop(heap)\n            else:\n                break\n        while heap and i < size2:\n            if heap[0][1] == i:\n                heapq.heappop(heap)\n            else:\n                break\n        result = []\n        for i in range(len(heap)):\n            result.append((nums1[heap[i][1]], nums2[i]))\n        return result\n    def k_smallest_pairs(nums1, nums2, k):\n        '''\n        Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n        '''\n        size1 = len(nums1)\n        size2 = len(nums2)\n        k = k if k <= min(size1, size2) else min(size1, size2)\n        if size1 > size2:\n            nums1, nums2 = nums2, nums1\n            size1, size2 = size2, size1\n        if size1 == 0:\n            return []\n        if size2 == 0:\n            return []\n        heap = []\n        heapq.heapify(heap)\n        for i in range(size1):\n            heapq.heappush(heap, (-nums1[i], i))\n        for i in range(size2):\n            if len(heap) == k:\n                break\n            if heap[0][1] == i:\n                heapq.heappop(heap)\n            else:\n                break\n        while heap and i < size2:\n            if heap[0][1] == i:\n                heapq.heappop(heap)\n            else:\n                break\n        result = []\n        for i in range(len(heap)):\n            result.append((nums1[heap[i][1]], nums2[i]))\n        return result\n    if nums1 == [] or nums2 == []:\n        return []\n    if nums1 == nums2 == []:\n        return []\n    if nums1 == [] and nums2 == []:\n        return []\n    if nums1 == [] and nums2 == []:\n        return []\n    if nums1 == []:\n        return []\n    if nums2 == []:\n        return []\n    if nums1 == nums2:\n        return []\n    if nums1 == nums2:\n        return []\n    if k <= 0:\n        return []\n    if k == 1:\n        return [(nums1[0], nums2[0])]\n    if k == 2:\n        if nums1[0] < nums2[0]:\n            return [(nums1[0], nums2[0]), (nums1[0], nums2[1])]\n        else:\n            return [(nums1[0], nums2[0]), (nums1[1], nums2[0])]\n    if k <= min(size1, size2):\n        return k_smallest_pairs(nums1[0:k], nums2[0:k], k)\n    if k <= size1 + size2:\n        if nums1[k - 1] < nums2[0]:\n            return k_smallest_pairs(nums1[0:k], nums2[k:size2 + 1], k)\n        else:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[0:k], k)\n    if k <= size1 + size2:\n        if nums2[k - 1] < nums1[0]:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[0:k], k)\n        else:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[k:size2 + 1], k)\n    if k <= size1 + size2:\n        if nums1[k - 1] < nums2[0]:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[0:k], k)\n        else:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[k:size2 + 1], k)\n    if k <= size1 + size2:\n        if nums1[k - 1] < nums2[0]:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[k:size2 + 1], k)\n        else:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[0:k], k)\n    if k <= size1 + size2:\n        if nums2[k - 1] < nums1[0]:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[k:size2 + 1], k)\n        else:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[0:k], k)\n    if k <= size1 + size2:\n        if nums2[k - 1] < nums1[0]:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[k:size2 + 1], k)\n        else:\n            return k_smallest_pairs(nums1[k:size1 + 1], nums2[0:k], k)\n    if k <= size1 + size2:\n        if nums1[k - 1] < nums2[0]:\n            return k_smallest_pairs("
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (num, num))\n    for num in nums2:\n        if len(heap) > k:\n            heapq.heappop(heap)\n        elif len(heap) <= k:\n            heapq.heappush(heap, (num, num))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_pairs_with_smallest_sum(arr1, arr2, k):\n        pair_sum = [(i, j) for i in range(len(arr1)) for j in range(len(arr2))]\n        pair_sum.sort(key = lambda x: sum(x))\n        min_heap = []\n        count = 0\n        for sum in pair_sum:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, sum)\n            else:\n                if sum[0] > min_heap[0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, sum)\n            count += 1\n            if count == k:\n                break\n        return min_heap\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    q = []\n    for i in range(len(nums2)):\n        heapq.heappush(q, (nums1[0] - nums2[i], 0, nums1[0]))\n    res = []\n    for i in range(k):\n        _, j, y = heapq.heappop(q)\n        res.append([y, nums1[j]])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # nums1 = [1,3]\n    # nums2 = [2]\n    # k = 2\n    # output = [1,2]\n    res = []\n    q = []\n    heapq.heapify(q)\n    for num in nums1:\n        heapq.heappush(q, (num, nums2[0]))\n    for _ in range(k):\n        res.append((heapq.heappop(q)[1], heapq.heappop(q)[0]))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    ans = []\n    nums1_heap = []\n    nums2_heap = []\n    # we want the min from both arrays\n    # so if the length of the array is > k, we need to use 2 heaps\n    # otherwise we can use 1 heap\n    if len(nums1) > k:\n        # we want to find k number of smallest pairs\n        # so we make heap out of nums1\n        # now we need to sort nums2 as well\n        # so we create a max heap\n        # we need to keep track of smallest number in the heap\n        for num in nums1:\n            heapq.heappush(nums1_heap, num)\n        for num in nums2[::-1]:\n            heapq.heappush(nums2_heap, num)\n        # we need to find k pairs\n        # we need to keep track of k pairs so we keep track of \n        # k pairs, and then pop out the first ones\n        # we need to find k pairs so we need to check if we have enough pairs\n        # if we have enough pairs, we can add our first pair\n        # otherwise we need to add as many as k pairs as we can\n        # here we are using 2 heaps\n        count = 0\n        while count < k:\n            # we have to pop out the first num from the min heap\n            # and also need to pop out the second num from the max heap\n            smallest_nums1 = heapq.heappop(nums1_heap)\n            smallest_nums2 = heapq.heappop(nums2_heap)\n            ans.append([smallest_nums1, smallest_nums2])\n            # now we need to update the number of pairs\n            count += 1\n            # we need to add the first pair\n            if len(nums1_heap) > 0:\n                heapq.heappush(nums1_heap, smallest_nums1)\n            # we need to add the second pair\n            if len(nums2_heap) > 0:\n                heapq.heappush(nums2_heap, smallest_nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    return sorted([(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))],\n                  key=lambda x: (x[0], x[1]))[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or len(nums1) < k or len(nums2) < k: return []\n    \n    result = []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # edge case\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return []\n    # binary search for k pairs\n    def find_k_pairs(nums, target, target_index, k, result, output, min_heap):\n        if len(min_heap) == k:\n            output.append(result)\n            return\n        \n        for i in range(target_index, len(nums)):\n            if min_heap and nums[i] <= min_heap[0]:\n                continue\n            \n            if i + target >= len(nums):\n                break\n            \n            if len(min_heap) < k:\n                heapq.heappush(min_heap, nums[i])\n            elif min_heap[0] < nums[i]:\n                heapq.heapreplace(min_heap, nums[i])\n            \n            find_k_pairs(nums, target, i+1, k, result + [(nums[i], nums[i+target])], output, min_heap)\n            \n    min_heap = []\n    output = []\n    find_k_pairs(nums1, nums2[0], 0, k, (nums1[0], nums2[0]), output, min_heap)\n    return output\n    \n    '''\n    O(n^2) solution\n    '''\n    # edge case\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    # k pairs from the first array\n    pairs = []\n    # for each element in the first array\n    for i in range(len(nums1)):\n        # for each element in the second array\n        for j in range(len(nums2)):\n            # add the pair\n            pairs.append((nums1[i], nums2[j]))\n            # if there are enough pairs\n            if len(pairs) >= k:\n                # if the pair with the smallest first element in the second array\n                # is not already in the pair list\n                if (nums1[i], nums2[j]) not in pairs:\n                    return pairs\n                # pop the pair with the smallest first element in the second array\n                # from the pair list\n                pairs.remove((nums1[i], nums2[j]))\n                \n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def solution(nums1, nums2, k):\n        heap = [(nums2[0] - nums1[i], i, 0) for i in range(len(nums1))]\n        heapq.heapify(heap)\n        res = []\n        for _ in range(k):\n            val, i, j = heapq.heappop(heap)\n            res.append((nums1[i], nums2[j]))\n            if j + 1 < len(nums2):\n                heapq.heappush(heap, (nums2[j+1] - nums1[i], i, j + 1))\n        return res\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    m_prod=0\n    l_prod=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            l_prod=list1[i][0]*list1[j][0]\n            m_prod=l_prod if l_prod>m_prod else m_prod\n    print('Minimum product is ',m_prod)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if (list1[i][0]*list1[i][1]) < (list1[j][0]*list1[j][1]):\n                min_product = list1[i][0]*list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        min_p = min_product_tuple(list1[1:])\n        if list1[0][0] <= min_p[0]:\n            return (list1[0], min_p)\n        else:\n            return (min_p, list1[0])\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    for i in list1:\n        for j in i:\n            if j < min_product:\n                min_product = j\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_val = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            min_val = min(min_val,(list1[i][0]*list1[i][1],list1[i][0]*list1[j][1]))\n    return min_val\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_num = list1[0]\n    for i in list1:\n        if i[0] < min_num[0] and i[1] < min_num[1]:\n            min_num = i\n    return min_num\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #1st attempt\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = 0\n    for num1, num2 in list1:\n        if num1 * num2 < min:\n            min = num1 * num2\n    print(min)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product = min(min_product, (list1[i][0]*list1[j][0])-(list1[i][1]*list1[j][1]))\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # copy list into another variable\n    minval = listval[0]\n    # traverse each element in list\n    for i in range(1, len(listval)):\n        # if current element is smaller than previous element\n        if listval[i] < minval:\n            # reassign current minimum element to the previous minimum element\n            minval = listval[i]\n    # return the minimum element\n    return minval\n    #\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for val in listval:\n        if val < min_value:\n            min_value = val\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \nprint(min_val([2,4,6,8]))\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=9999999999999\n    for num in listval:\n        if num<min_val:\n            min_val=num\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    i = 0\n    min_val = listval[i]\n    while i<len(listval)-1:\n        if min_val > listval[i+1]:\n            min_val = listval[i+1]\n        i = i + 1\n    return min_val\nprint(min_val([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #split the word into parts\n    split_word = re.findall('[a-z][a-zA-Z]*', word)\n    #convert to camel case\n    converted_word = ''.join(split_word)\n    #join the parts\n    return converted_word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    string = word.split(\"_\")\n    string_new = []\n    for word in string:\n        word_new = word[0].upper() + word[1:]\n        string_new.append(word_new)\n    return \"\".join(string_new)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word==None or not word:\n        return word\n    res=''\n    word=word.split('_')\n    for i in range(len(word)):\n        if i==0 and word[i]!='':\n            res+=word[i].title()\n        else:\n            if i==0:\n                res+=''.join(word[i].title())\n            else:\n                res+=word[i].title()\n    return res\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_list = []\n    for i in word.split('_'):\n        word_list.append(i.title())\n    return ''.join(word_list)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # your code here\n    s = re.sub('_', '', word)\n    s = s.title()\n    return s\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    word = word[0] + ''.join(i.title() for i in word[1:])\n    return word\n    "
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    new_words = [word.capitalize() for word in words]\n    return ''.join(new_words)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(map(lambda char: char.capitalize(), word.split('_')))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    if len(words) == 1:\n        return words[0].lower()\n    else:\n        return words[0] + ''.join(map(str.title, words[1:]))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return ''.join([word[0]+''.join(w.title() for w in word[1:])])\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Remove even numbers\n    for i in range(0, len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2 == 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[::2]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2 == 0:\n            odd_list.append(i)\n    return odd_list\n    \ndef even_odd(l):\n    '''\n    Write a python function to find even numbers and odd numbers from a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in l:\n        if i % 2 == 0:\n            even_list.append(i)\n        elif i % 2!= 0:\n            odd_list.append(i)\n    return even_list, odd_list\n        \ndef count_even_odd(l):\n    '''\n    Write a python function to count even numbers and odd numbers from a given list.\n    '''\n    even_list = 0\n    odd_list = 0\n    for i in l:\n        if i % 2 == 0:\n            even_list = even_list + 1\n        elif i % 2!= 0:\n            odd_list = odd_list + 1\n    return even_list, odd_list\n    \ndef check_palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(' ','')\n    return s == s[::-1]\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(' ','')\n    for i in range(len(s)//2):\n        if s[i]!= s[-(i+1)]:\n            return False\n    return True\n    \ndef minimum_and_maximum(l):\n    '''\n    Write a python function to find minimum and maximum number from a given list.\n    '''\n    min_num = l[0]\n    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n        if i < min_num:\n            min_num = i\n    return min_num, max_num\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is a prime number or not.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n            return True\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n = n / i\n        i = i + 1\n    return n\n    \ndef prime_factorize(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    prime_factor = []\n    for i in range(2,n+1):\n        if n % i == 0:\n            prime_factor.append(i)\n    return prime_factor\n    \ndef nearest_prime(n):\n    '''\n    Write a python function to find the nearest prime number to a given number.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i = i + 2\n        return True\n    \ndef is_abundant(n):\n    '''\n    Write a python function to check whether a given number is abundant or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    sum_digits = 0\n    while n > 0:\n        sum_digits = sum_digits + n % 10\n        n = n // 10\n    return sum_digits\n    \ndef reverse_list(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    reverse_list = []\n    for i in range(len(l)-1,-1,-1):\n        reverse_list.append(l[i])\n    return reverse_list\n    \ndef is_list_equal(l1,l2):\n    '''\n    Write a python function to check whether two given lists are equal or not.\n    '''\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n    \ndef count_even_odd_list(l):\n    '''\n    Write a python function to count even numbers and odd numbers from a given list.\n    '''\n    even_list = 0\n    odd_list = 0\n    for i in l:\n        if i % 2 == 0:\n            even_list = even_list + 1\n        elif i % 2!= 0:\n            odd_list = odd_list + 1\n    return even_list, odd_list\n    \ndef is_palindrome_list(l):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    s = ''\n    for i in l:\n        s += str(i)\n    return s == s[::-1]\n    \ndef is_palindrome_list_recur(l):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    if len(l) <= 1:\n        return True\n    if l[0]!= l[-1]:\n        return False\n    return is_palindrome_list_recur(l[1:-1])\n    \ndef is_palindrome_list_recur_1(l):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    if len(l) <= 1:\n        return True\n    if l[0]!= l[-1]:\n        return False\n    return is_palindrome_list_recur_1(l[1:-1])\n    \ndef is_palindrome_list_recur_2(l):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    if len(l) <= 1:\n        return True\n    if l[0]!= l[-1]:\n        return False\n    return is_palindrome_list_recur_2(l[1:])\n    \ndef is_palindrome_list_recur_3(l):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    if len(l) <= 1:\n        return True\n    if l[0]!= l[-1]:\n        return False\n    return is_palindrome_list_recur_3(l[1:]) and is_palindrome_list_recur_3(l[:-1])\n    \ndef is_palindrome_list_recur_4(l):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    if len(l) <= 1:\n        return True\n    if l[0]!= l[-1]:\n        return False\n    return is_palindrome_list_recur_4(l[1:]) and is_palindrome_list_recur_4(l[:-1])\n    \ndef is_palindrome_list_iter(l):\n    '''\n    Write a python function to check whether a given list is a palindrome or not.\n    '''\n    if len(l) <= 1:\n        return True\n    if l[0]!= l[-1]:\n        return False\n    while len(l) > 1:\n        if l[0]!= l[-1]:\n            return False\n        l.pop(0)\n    "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            odds.append(l[i])\n    l.clear()\n    l.extend(odds)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    try:\n        list1=l.copy()\n        for i in range(0,len(list1)):\n            if list1[i]%2==1:\n                list1.pop(i)\n    except AttributeError:\n        print(\"Please provide a list.\")\n    else:\n        return list1\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for i in l:\n        if i%2==0:\n            l1.append(i)\n    return l1\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2==1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_copy = l.copy()\n    odd = []\n    for i in range(len(l)):\n        if l_copy[i] % 2 == 1:\n            odd.append(l_copy[i])\n        else:\n            continue\n    l_copy = list(set(l_copy) - set(odd))\n    l_copy.sort()\n    return l_copy\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_number = 0\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            odd_number += 1\n    l = l[odd_number:]\n    return l\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Using for loop\n    new_list = []\n    for i in range(0, len(list1)):\n        new_list.append(list1[i][n])\n    return new_list\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n:\n            return list1[i]\n    return None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # code here\n    count=0\n    i=0\n    while(count<n):\n        count+=1\n        i+=1\n    return list1[i-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    l = list1\n    l1 = []\n    for i in l:\n        l1.append(i[0])\n    return l1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    i = 0\n    for _ in range(len(list1)):\n        if i == n:\n            return list1[i]\n        i += 1\n    return None\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    if list1.intersection(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \ndef sum_n_numbers(n,numbers):\n    '''\n    Write a python function to add all the numbers in a given sequence.\n    '''\n    total = 0\n    for i in numbers:\n        total += i\n    return total\n    \ndef index_finder(arr, k):\n    '''\n    Write a python function to find the index of an element in a given array.\n    '''\n    n = len(arr)\n    index = n\n    while index > 0:\n        if arr[index-1] == k:\n            return index\n        index -= 1\n    return -1\n    \ndef ht_to_list(hash_table):\n    '''\n    Write a python function to convert a hash table into a list.\n    '''\n    n = len(hash_table)\n    list_of_values = []\n    for i in range(n):\n        list_of_values.append(hash_table[i])\n    return list_of_values\n    \ndef list_to_ht(list_to_be_converted):\n    '''\n    Write a python function to convert a list into a hash table.\n    '''\n    hash_table = []\n    for i in list_to_be_converted:\n        hash_table.append(i)\n    return hash_table\n    \ndef max_key(ht):\n    '''\n    Write a python function to return the maximum value in a hash table.\n    '''\n    maximum = 0\n    for i in ht:\n        if i > maximum:\n            maximum = i\n    return maximum\n    \ndef next_greater_element(arr):\n    '''\n    Write a python function to find the next greater element in the array.\n    '''\n    n = len(arr)\n    next_greater_element = 0\n    for i in range(n):\n        if arr[i] == max(arr):\n            next_greater_element = -1\n            break\n        elif arr[i] == max(arr) - 1:\n            next_greater_element = -1\n            break\n        else:\n            next_greater_element = max(arr) - 1\n            \n    return next_greater_element\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\nprint(overlapping([1,2,3,4,5], [1,2,3,4,5,6]))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if(list1[i] in list2):\n            count=count+1\n    if(count==len(list1)):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if any(i in list2 for i in list1):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = []\n    res_ind = []\n    arr_len = len(arr)\n    arr.sort()\n    for i in range(arr_len-1):\n        for j in range(i+1, arr_len):\n            if(arr[i] * arr[j] > result):\n                result = arr[i] * arr[j]\n                res_ind = [i, j]\n    print(\"Max product:\", result)\n    print(\"Indices:\", res_ind)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = 0\n    max = 0\n    for i in range(len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    for j in range(len(arr)):\n        if arr[j] < max:\n            if arr[j] > res:\n                res = arr[j]\n    return res\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    for i in range(1,len(arr)):\n        if(max*arr[i]) > arr[i]:\n            max = max*arr[i]\n            max_index = i\n    print(max)\n    print(max_index)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_prod = 0\n    prod_index = 0\n    for i in range(len(arr)):\n        if arr[i] > max_prod:\n            max_prod = arr[i]\n            prod_index = i\n    return arr[prod_index],max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product_max = 0\n    product_min = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product_max = max(arr[i]*arr[j], product_max)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product_min = min(arr[i]*arr[j], product_min)\n    print(\"Max: \", product_max)\n    print(\"Min: \", product_min)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr) \n    max_p = -1\n    for i in range(1,len(arr)-1):\n        if arr[i]*arr[i+1] > max_p:\n            max_p = arr[i]*arr[i+1]\n    return max_p\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    arr.sort()\n    max_prod = arr[n-1] * arr[0]\n    \n    for i in range(n):\n        for j in range(n):\n            if (arr[i] * arr[j] > max_prod):\n                max_prod = arr[i] * arr[j]\n    return max_prod\n    "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    if(arr[0]>=arr[1]):\n        print(arr[0]*arr[1])\n    else:\n        print(arr[0]*arr[1])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0] * arr[1]\n    if max < arr[0] * arr[2]:\n        max = arr[0] * arr[2]\n    if max < arr[1] * arr[2]:\n        max = arr[1] * arr[2]\n    print(\"maximum product of pairs is:\", max)\n    \n    return\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = arr[0] * arr[1]\n    max_p = max_p if max_p > 0 else 0\n    for i in range(0,len(arr)):\n        for j in range(i + 1,len(arr)):\n            p = arr[i] * arr[j]\n            if p > max_p:\n                max_p = p\n    return max_p\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    mapping = {}\n    list1 = []\n    for i in range(len(Input)):\n        #print(Input[i])\n        for j in range(len(Input[i])):\n            list1.append(Input[i][j])\n            #print(list1)\n            if list1 not in mapping:\n                mapping[list1[0]] = 1\n            else:\n                mapping[list1[0]] = mapping[list1[0]] + 1\n    #print(mapping)\n    final = []\n    for i in mapping:\n        if mapping[i] == len(Input):\n            final.append(i)\n    print(final)\n    return final\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print(list(set(i[0] for i in Input)))\n    for i in range(len(Input)):\n        if len(Input[i]) == 1:\n            if Input[i][0] in Input[:i] and Input[i][0] in Input[i+1:]:\n                return (Input[i][0])\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    L = list(set(Input))\n    L.sort()\n    L.remove(())\n    return L\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elem = 0\n    temp_input = []\n    for i in range(len(Input)):\n        if Input[i][0] == Input[common_elem][0]:\n            temp_input.append(Input[i])\n        else:\n            common_elem = i\n    return temp_input\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        if Input[i][0] in lst:\n            continue\n        else:\n            lst.append(Input[i][0])\n    \n    return lst\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import itertools\n    def common_first(Input):\n        return set(list(itertools.chain(*Input)))\n    return common_first(Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if Input[i][0] not in Output:\n            Output.append(Input[i][0])\n        else:\n            continue\n    Output.sort()\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in range(len(Input)): \n        Input[i]=tuple(Input[i]) \n    Input.sort() \n    Common=[] \n    for i in range(len(Input)): \n        Common.append(Input[i][0]) \n    return Common \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort()\n    n = len(Input)\n    # print(Input)\n    i,j,c = 0,0,0\n    while i < n and j < n:\n        if Input[i][0] == Input[j][0]:\n            c = Input[i][0]\n            # print(c)\n            i += 1\n            j += 1\n        else:\n            i += 1\n    print(c)\n    return c\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    if len(Input) == 1:\n        return Input[0][0]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if(len(lst[i])>len(lst[j])):\n                lst[i],lst[j]=lst[j],lst[i]\n            elif(len(lst[i])==len(lst[j])):\n                if(lst[i]>lst[j]):\n                    lst[i],lst[j]=lst[j],lst[i]\n    print(lst)\n    print(max(lst,key=len))\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst: \n        if len(i) > max: \n            max = len(i)\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m=0\n    for i in range(len(lst)):\n        if len(lst[i])>m:\n            m=len(lst[i])\n            maxi=i\n    return lst[maxi]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return 0\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length_list = []\n    for i in lst:\n        length_list.append(len(i))\n    max_list = max(length_list)\n    for j in range(0, len(lst)):\n        if len(lst[j]) == max_list:\n            max_string = lst[j]\n    return max_string\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i)>max):\n            max=len(i)\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_len_list = []\n            max_len_list.append(element)\n        elif len(element) == max_len:\n            max_len_list.append(element)\n    if len(max_len_list) == 1:\n        print(max_len_list[0])\n    else:\n        print(max_len_list)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = list(lst)\n    lst.sort(key=len)\n    print(lst[-1])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst: \n        if(len(i) > max): \n            max = len(i)\n    for i in range(len(lst)): \n        if len(lst[i]) == max: \n            return lst[i]\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 1)\n    total = sum(list1)\n    print(total)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(round(list1[i], 2))\n    print(sum(lst)*len(list1))\n    \n    \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_sum = 0\n    for i in list1:\n        round_sum += round(i)\n    print(round_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = round_and_sum_helper(list1)\n    total_sum = 0\n    for i in list1:\n        total_sum += i\n    return total_sum * len(list1)\n    \ndef round_and_sum_helper(list1):\n    '''\n    Helper function for the above function\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 1)\n    return list1\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i],2)\n        list1_sum += list1[i]\n    print(f\"The sum of the rounded numbers in the list is: {list1_sum}\")\n    print(f\"The length of the list is: {len(list1)}\")\n    print(f\"The sum of the list rounded to 2 decimal places is: {round(list1_sum,2)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(x) for x in list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += (round(i))\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for i in range(len(list1)):\n        rounded_list.append(round(list1[i]))\n    print(f\"The sum of the rounded numbers in your list is {sum(rounded_list)} times the number of elements in your list.\")\n    return(sum(rounded_list))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in list1:\n        i=round(i)\n    return round(sum(list1)*len(list1))\n    \ndef is_list_palindrome(list1):\n    '''\n    Write a function to check whether a given list of numbers is a palindrome or not.\n    '''\n    if list1 == list1[::-1]:\n        return True\n    else:\n        return False\n    \ndef find_duplicate(nums):\n    '''\n    Write a function to find duplicate number in a given list of numbers.\n    '''\n    for i in nums:\n        if nums.count(i) > 1:\n            return i\n        \ndef unique_list(list1):\n    '''\n    Write a function to remove duplicate number from a given list of numbers.\n    '''\n    for i in list1:\n        if list1.count(i) > 1:\n            list1.remove(i)\n    return list1\n    \ndef sum_of_list(list1):\n    '''\n    Write a function to sum numbers in a list\n    '''\n    return sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(num) for num in list1) * len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i * i * i\n    print(\"Sum of cube of first\", n, \"natural numbers is:\", sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum+=i**3\n    print(\"cube sum of first \",n,\" natural numbers :\",sum)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum = sum + i*i*i\n    print('Cube sum of the first',n,'numbers is:',sum)\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #Creating list of first n natural numbers.\n    num_list=[]\n    for i in range(n+1):\n        num_list.append(i)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    if (n <= 0):\n        return -1\n    for i in range(n):\n        if i % 2 == 0:\n            sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    print('cube_Sum')\n    sum_of_cube = 0\n    for i in range(1,n+1):\n        sum_of_cube = sum_of_cube + i**3\n    return sum_of_cube\n    \n    \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if (i % 2 == 0):\n            sum += i ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Start with 0\n    result = 0\n    for i in range(n):\n        result += i**3\n    return result\n    \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s=s+i**3\n    return s\nprint(cube_Sum(5))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '_'.join(str(test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = '&'\n    return test_str.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n    \nprint(concatenate_tuple(('hello', 'world')))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return str(test_tup).replace('(', '').replace(')', '').replace(', ', '')\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for i in test_tup:\n        test_str = test_str + str(i) +''\n    return test_str\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in range(len(test_tup)):\n        res += f'{test_tup[i]}'\n        if i!= len(test_tup)-1:\n            res += test_tup[i+1]\n        else:\n            res += '.'\n    return res\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i ** 3\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum_numbers = 0\n    for i in range(1,n+1):\n        sum_numbers += i**3\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    summation = 0\n    for i in range(1, n + 1):\n        summation = summation + i ** 3\n    return summation / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i**3\n    return s/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    total=0\n    while i<n:\n        total=total+i**3\n        i=i+1\n    print(total/n)\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while (count <= n):\n        sum = sum + (count*(count+1)*(2*count+1))/3\n        count += 1\n    return sum\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    def cube(x):\n        return x**3\n        \n    sum = 0\n    for i in range(1, n+1):\n        sum += cube(i)\n        \n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        sum+=i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1,n+1):\n        sum += pow(i,3)\n    return (sum/n)"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([i[-1] for i in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # expected return type = ('sunday','sunday','sunday','sunday','monday','monday','monday','monday','monday','monday')\n    # any type of string as input can be accepted\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in range(len(test_tuple)):\n        rear.append(test_tuple[i][-1])\n    return rear\n    \ndef tuple_with_rear(test_tuple):\n    '''\n    Write a function to return a tuple with only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in range(len(test_tuple)):\n        rear.append(test_tuple[i][-1])\n    return tuple(rear)\n    \n    \ntest_tuple = (('Dog', 'Cat', 'Tiger'), ('Fish', 'Bird', 'Cat', 'Dog'))\nprint(extract_rear(test_tuple))\nprint(tuple_with_rear(test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple[::-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = lambda x: x[-1]\n    \n    return map(rear_index, test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[2][1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for x in range(0,len(test_tuple)):\n        if x == len(test_tuple)-1:\n            test_tuple[x] = test_tuple[x][::-1]\n        else:\n            test_tuple[x] = test_tuple[x][1:]\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple)\n    lst = []\n    for i in test_tuple:\n        lst.append(i[-1])\n    print(lst)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if i == x])\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    for i in range(len(list1)):\n        if (list1[i] == x):\n            i += 1\n    return i\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        if list1[0] == x:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1)==0:\n        return 0\n    if x in list1[0]:\n        return 1+count_element_in_list(list1[1:],x)\n    else:\n        return count_element_in_list(list1[1:],x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) == type(x):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_list = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnums.append(num)\n    return oddnums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_odds = []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    res = []\n    for num in nums:\n        if num % 2!= 0:\n            res.append(num)\n    return res\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [odd for odd in nums if odd % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2!= 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y, m, d = map(int, dt.split('-'))\n    return '{:02d}-{:02d}-{:04d}'.format(d, m, y)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(\"dd-mm-yyyy\")\n    return dt.replace('-', '-')\n    \ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(\"dd-mm-yyyy\")\n    return dt.replace('-', '-')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    temp_date = dt.split(\"-\")\n    month = temp_date[1]\n    if (month == \"01\" or month == \"03\" or month == \"05\" or month == \"07\" or month == \"08\" or month == \"10\" or month == \"12\"):\n        new_month = \"0\" + str(month)\n        temp_date[1] = new_month\n    else:\n        temp_date[1] = str(month)\n    date = \"-\".join(temp_date)\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    date[0] = str(int(date[0]))\n    date[1] = str(int(date[1]))\n    date[2] = str(int(date[2]))\n    date = \"-\".join(date)\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month_map = {\n        1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',\n        7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'\n    }\n    if dt is None:\n        return None\n    dt = dt.split('-')\n    dt[2], dt[1], dt[0] = dt[1], dt[2], dt[0]\n    return '-'.join([month_map[int(dt[1])], dt[0], dt[2]])\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = str(dt)\n        dt = dt.split('-')\n        for i in range(3):\n            dt[i] = int(dt[i])\n        return dt[2] + '-' + dt[1] + '-' + dt[0]\n    except:\n        return 'Invalid date format'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    if(type(dt)==str):\n        if('-' in dt):\n            if('-' in dt.split('-')[1]):\n                date_arr = dt.split('-')\n                date_arr.reverse()\n                return '-'.join(date_arr)\n            else:\n                return dt\n        else:\n            return dt\n    else:\n        return 'not a date'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return(dt[6:10] + '-' + dt[3:5] + '-' + dt[0:2])\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt:\n        d = dt.split('-')\n        #print(d)\n        d[2] = '20'+d[2]\n        d[1] = '01'+d[1]\n        d = '-'.join(d)\n        return d\n    else:\n        return None\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    result = dt[-4:] + '/' + dt[-8:-4] + '/' + dt[:-8]\n    return result\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 0:\n        return my_list\n    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    k = len(my_list)\n    if k <= 1:\n        return my_list\n    gap = k // 2\n    while gap > 0:\n        for i in range(gap, k):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        j = i\n        while j > 0 and my_list[j-1] > my_list[j]:\n            my_list[j], my_list[j-1] = my_list[j-1], my_list[j]\n            j -= 1\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    gap = len(my_list)//2\n    while gap > 0:\n        i = gap\n        while i < len(my_list):\n            temp = my_list[i]\n            j = i - gap\n            while j >= 0 and my_list[j] > temp:\n                my_list[j+gap] = my_list[j]\n                j -= gap\n            my_list[j+gap] = temp\n            i += 1\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for gap in range(len(my_list),1,-1):\n        for i in range(gap):\n            for j in range(i,len(my_list),gap):\n                temp=my_list[j]\n                k=j-gap\n                while k>=0 and my_list[k]>temp:\n                    my_list[k+gap]=my_list[k]\n                    k-=gap\n                my_list[k+gap]=temp\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # i = 1\n    # while i < len(my_list):\n    #     j = 0\n    #     while j < len(my_list) - i:\n    #         if my_list[j] > my_list[j + 1]:\n    #             my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n    #         j += 1\n    #     i += 1\n    # return my_list\n    for i in range(len(my_list) - 1):\n        j = i\n        while j >= 0:\n            if my_list[j] > my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n                j -= 1\n            else:\n                break\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def new_array(my_list):\n        m = int(len(my_list)/2)\n        while m:\n            yield my_list[m]\n            my_list = my_list[:m]+sorted(my_list[m:])+my_list[m+1:]\n            m = int(m/2)\n    for x in new_array(my_list):\n        yield x\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # if given array is of length 1 or less than 1, return the same array\n    if len(my_list) <= 1:\n        return my_list\n    \n    # calculate the number of steps required by using gap size\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            # traverse the array from right to left and compare the values\n            # with the value on the right side\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \n    # time complexity : O(n^2) | space complexity: O(1)\n    # constant space\n    \n    \n    \ndef is_sorted(my_list):\n    '''\n    Write a function to determine whether the given array is sorted.\n    '''\n    \n    # if there are multiple elements, there must be some items out of order\n    if len(my_list) <= 1:\n        return True\n    \n    # start from the left side and traverse the entire list\n    for i in range(1, len(my_list)):\n        if my_list[i] < my_list[i - 1]:\n            return False\n    return True\n    \n    # time complexity : O(n) | space complexity: O(1)\n    # linear time\n    \n    \n    \ndef bubblesort(my_list):\n    '''\n    Write a function to sort the given array by using bubblesort.\n    '''\n    \n    # if there are multiple elements, there must be some items out of order\n    if len(my_list) <= 1:\n        return my_list\n    \n    # start from the left side and traverse the entire list\n    for i in range(len(my_list)):\n        swapped = False\n        \n        for j in range(1, len(my_list)):\n            if my_list[j - 1] > my_list[j]:\n                my_list[j - 1], my_list[j] = my_list[j], my_list[j - 1]\n                swapped = True\n        if not swapped:\n            break\n    return my_list\n    \n    # time complexity : O(n^2) | space complexity: O(1)\n    # exponential\n    \n    \n    \ndef insertion_sort(my_list):\n    '''\n    Write a function to sort the given array by using insertion sort.\n    '''\n    \n    # if there are multiple elements, there must be some items out of order\n    if len(my_list) <= 1:\n        return my_list\n    \n    # start from the right side and traverse the entire list\n    for i in range(1, len(my_list)):\n        # compare the value with its predecessor\n        \n        j = i - 1\n        while j >= 0 and my_list[j] > my_list[j + 1]:\n            my_list[j + 1], my_list[j] = my_list[j], my_list[j + 1]\n            j -= 1\n    return my_list\n    \n    # time complexity : O(n^2) | space complexity: O(1)\n    # constant time\n    \n    \n    \ndef partition(my_list, low, high):\n    '''\n    Write a function to partition the given array around a certain value x\n    so that all elements less than x come before all elements greater than x.\n    '''\n    \n    # if there is only one element in the list, return it\n    if len(my_list) == 1:\n        return my_list\n    \n    # declare the pivot variable as the last element in the list\n    pivot = my_list[high]\n    \n    # traverse the array from the left side and find the first element\n    # greater than the pivot and set it as the last element in the list\n    i = low - 1\n    for j in range(low, high):\n        if my_list[j] < pivot:\n            i += 1\n            my_list[i], my_list[j] = my_list[j], my_list[i]\n    \n    # set the last element as the pivot\n    my_list[i + 1], my_list[high] = my_list[high], my_list[i + 1]\n    \n    # return the new partition\n    return i + 1\n    \n    # time complexity : O(n) | space complexity: O(1)\n    # linear time\n    \n    \n    \ndef quick_sort(my_list):\n    '''\n    Write a function to sort the given array by using quick sort.\n    '''\n    \n    # if there is only one element in the list, return it\n    if len(my_list) == 1:\n        return my_list\n    \n    # declare the pivot variable as the first element in the list\n    pivot = my_list[0]\n    \n    # declare a pointer for the left side\n    low = 1\n    \n    # declare a pointer for the right side\n    high = len(my_list) - 1\n    \n    while low <= high:\n        \n        # find the first element greater than the pivot\n        while my_list[low] < pivot and low < len(my_list):\n            low += 1\n        \n        # find the last element lesser than the pivot\n        while my_list[high] > pivot and high > 0:\n            high -= 1\n        \n        # if the first element is greater than the pivot, swap\n        if low < high:\n            my_list[low], my_list[high] = my_list[high], my_list[low]\n            low += 1\n            high -= 1\n    \n    # set the first element as the pivot\n    my_list[0], my_list[low] = my_list[low], my_list[0]\n    \n    # return the new partition\n    return low\n    \n    # time complexity : O(n*log(n)) | space complexity: O(1)\n    # logarithmic time\n    \n    \n    \ndef merge_sort(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    \n    # if there is only one element in the list, return it\n    if len(my_list) == 1:\n        return my_list\n    \n    # calculate the number of parts by using ceiling function\n    # for example, if there are 3 elements, n = 3\n    # if n = 4, n = 3\n    n = len(my_list)\n    \n    # define a helper function to split the array into parts\n    def split(my_list, low, high):\n        \n        # declare the left side of the list\n        left = low\n        \n        # declare the right side of the list\n        right = high\n        \n        # declare the pivot variable as the last element in the list\n        pivot = my_list[high]\n        \n        # traverse the entire list from left to right, find the first element\n        # greater than the pivot and set it as the last element in the list\n        # for example, for the given list\n        # 3 5 2 1\n        # i = 0\n        while left < right:\n            while my_list[left] < pivot and left < high:\n                left += 1\n            while my_list[right] > pivot and right > low:\n                right -= 1\n            if left < right:\n                my_list[left], my_list[right] = my_list[right], my_list[left]\n                left += 1\n                right -= 1\n        \n        # set the last element as the pivot\n        my_list[right], my_list[high] = my_list[high], my_list[right]\n        \n        # return the new partition\n        return right\n    \n    # invoke the split function to divide the array into n parts\n    # define a helper function to merge the parts together\n    def merge(my_list, low, high):\n        \n        # declare the left and right sides of the list\n        left = low\n        right = high\n        \n        # declare the temporary list\n        tmp = []\n        \n        # traverse the left and right sides of the list\n        # the parts should be consecutive\n        while left < right:\n            tmp.append(my_list[left])"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #your code here\n    return ((x and y) for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    list_1 = []\n    list_2 = []\n    for i in test_tup1:\n        list_1.append(i)\n    for i in test_tup2:\n        list_2.append(i)\n    list_3 = list_1 + list_2\n    return tuple(list_3)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # your code here\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            new_tup.append(1)\n        else:\n            new_tup.append(0)\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = []\n    tup2 = []\n    for i in range(len(test_tup1)):\n        tup1.append(test_tup1[i][0])\n        tup2.append(test_tup2[i][0])\n    for i in range(len(tup1)):\n        if tup1[i]!= tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (i for i, j in zip(test_tup1, test_tup2) if i == j)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x1 and x2 for x1,x2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_list1 = []\n    test_list2 = []\n    test_tup = ()\n    \n    for i in range(0,len(test_tup1)):\n        test_list1.append(test_tup1[i])\n    for i in range(0,len(test_tup2)):\n        test_list2.append(test_tup2[i])\n    \n    for i in range(0,len(test_list1)):\n        test_tup += (test_list1[i],)\n    for i in range(0,len(test_list2)):\n        test_tup += (test_list2[i],)\n    return test_tup\n    \ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (4, 5, 6, 7)\nprint(and_tuples(test_tup1, test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = -b / (2 * a)\n    y = c / (2 * a)\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a + (b * a) + (c * a * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return 2*a*(c**2 - b**2)/(a**2 + 4*a*b*c)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_scalar(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_scalar_v2(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v2(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v3(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v4(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v5(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v6(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v7(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v8(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v9(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v10(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v11(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v12(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v13(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v14(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v15(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v16(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v17(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    while x < 100:\n        y = a * x * x + b * x + c\n        x += 1\n        if y >= 0:\n            continue\n        else:\n            return -y / (2 * b)\n            \ndef parabola_directrix_v18(a, b, c):\n    '''\n    Write a function to find the directri"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b ** 2) - (4 * a * c)\n    if discriminant > 0: \n        x1 = (-b - sqrt(discriminant))/(2*a)\n        x2 = (-b + sqrt(discriminant))/(2*a)\n        return (x1, x2)\n    elif discriminant == 0: \n        x = (-b)/(2*a)\n        return x\n    else: \n        return None\n        \nprint(parabola_directrix(2, 3, 1))\nprint(parabola_directrix(2, -3, 1))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (b**2 - a**2)/(4*a*b)\n    x1 = -b/(2*a)\n    x2 = -b/(2*a)\n    return x1, x2, x\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    X = np.linspace(a, b, c)\n    return X\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.arange(a, b, 0.1)\n    y = (a * a) / (-2 * a) * x + c\n    return x, y\n    \ndef parabola_cordinates(a, b, c): \n    '''\n    Write a function to find the cordinates of a parabola.\n    '''\n    x = np.arange(a, b, 0.1)\n    y = (a * a) / (-2 * a) * x + c\n    return x, y\n    \ndef parabola_area(x, y): \n    '''\n    Write a function to find the area of a parabola.\n    '''\n    area = np.sum(x * (y + 1) / 2) - x[0] * (y[1] + 1) / 2\n    return area\n    \ndef parabola_perimeter(x, y): \n    '''\n    Write a function to find the perimeter of a parabola.\n    '''\n    perimeter = np.sum(x + y)\n    return perimeter\n    \ndef parabola_equation(a, b, c, d, e): \n    '''\n    Write a function to solve the equation of parabola.\n    '''\n    x = np.arange(a, b, 0.1)\n    y = (a * a) / (-2 * a) * x + c\n    z = (-2 * b + 2 * a * d) / (2 * e)\n    return x, y, z\n    \ndef parabola_roots(a, b, c, d, e): \n    '''\n    Write a function to find the roots of the equation of parabola.\n    '''\n    x = np.arange(a, b, 0.1)\n    y = (a * a) / (-2 * a) * x + c\n    z = (-2 * b + 2 * a * d) / (2 * e)\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    return roots\n    \ndef parabola_roots_area(x, y, z): \n    '''\n    Write a function to find the area of roots of a parabola.\n    '''\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    area = np.sum(x * (roots + 1) / 2) - x[0] * (roots[1] + 1) / 2\n    return area\n    \ndef parabola_roots_perimeter(x, y, z): \n    '''\n    Write a function to find the perimeter of roots of a parabola.\n    '''\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    perimeter = np.sum(x + y)\n    return perimeter\n    \ndef parabola_roots_equation(a, b, c, d, e, f, g): \n    '''\n    Write a function to find the equation of roots of a parabola.\n    '''\n    x = np.arange(a, b, 0.1)\n    y = (a * a) / (-2 * a) * x + c\n    z = (-2 * b + 2 * a * d) / (2 * e)\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    return x, y, z, roots\n    \ndef parabola_roots_equation_area(x, y, z, roots): \n    '''\n    Write a function to find the area of roots of a parabola.\n    '''\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    area = np.sum(x * (roots + 1) / 2) - x[0] * (roots[1] + 1) / 2\n    return area\n    \ndef parabola_roots_equation_perimeter(x, y, z, roots): \n    '''\n    Write a function to find the perimeter of roots of a parabola.\n    '''\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    perimeter = np.sum(x + y)\n    return perimeter\n    \ndef parabola_roots_equation_points(a, b, c, d, e, f, g, roots): \n    '''\n    Write a function to find the equation of roots of a parabola.\n    '''\n    x = np.arange(a, b, 0.1)\n    y = (a * a) / (-2 * a) * x + c\n    z = (-2 * b + 2 * a * d) / (2 * e)\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    return x, y, z, roots\n    \ndef parabola_roots_equation_points_area(x, y, z, roots): \n    '''\n    Write a function to find the area of roots of a parabola.\n    '''\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    area = np.sum(x * (roots + 1) / 2) - x[0] * (roots[1] + 1) / 2\n    return area\n    \ndef parabola_roots_equation_points_perimeter(x, y, z, roots): \n    '''\n    Write a function to find the perimeter of roots of a parabola.\n    '''\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    perimeter = np.sum(x + y)\n    return perimeter\n    \ndef parabola_roots_equation_equation(a, b, c, d, e, f, g, roots): \n    '''\n    Write a function to find the equation of roots of a parabola.\n    '''\n    x = np.arange(a, b, 0.1)\n    y = (a * a) / (-2 * a) * x + c\n    z = (-2 * b + 2 * a * d) / (2 * e)\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    return x, y, z, roots\n    \ndef parabola_roots_equation_equation_area(x, y, z, roots): \n    '''\n    Write a function to find the area of roots of a parabola.\n    '''\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    area = np.sum(x * (roots + 1) / 2) - x[0] * (roots[1] + 1) / 2\n    return area\n    \ndef parabola_roots_equation_equation_perimeter(x, y, z, roots): \n    '''\n    Write a function to find the perimeter of roots of a parabola.\n    '''\n    roots = np.roots([1, -(z + 2), (z + 2) ** 2 - 4 * (y - z)])\n    perimeter = np.sum(x + y)\n    return perimeter\n    \ndef pa"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a * c) - (b ** 2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a**2 - 4*b*c) >= 0:\n        delta = math.sqrt(a**2 - 4*b*c)\n        x1 = -b/(2*a)\n        x2 = (-b + delta)/(2*a)\n        return (x1, x2)\n    else:\n        return ('Cannot find the directrix.')\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    result = set1.intersection(set2)\n    if len(result) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # get the smallest list and get the index of that\n    l1 = sorted(list1)\n    smallest_list = l1[0]\n    l2 = sorted(list2)\n    smallest_list2 = l2[0]\n    # compare the smallest list and the smallest list2\n    if smallest_list == smallest_list2:\n        return True\n    # if they are not equal, check if there is an element in the bigger list\n    else:\n        # get the index of smallest_list\n        for i in range(len(l1)):\n            if l1[i] == smallest_list2:\n                # we have found the index of smallest_list2\n                return True\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return set(list1).intersection(set(list2))\n    # the above has been just a way to do it using set()\n    # and no more than 4 lines\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        max_list = list1\n        min_list = list2\n    else:\n        max_list = list2\n        min_list = list1\n    if max_list[0] in min_list or max_list[1] in min_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # for elem in list1:\n    #     if elem in list2:\n    #         print('Element found')\n    #         return True\n    # return False\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elmnts = []\n    for item in list1:\n        if item in list2:\n            common_elmnts.append(item)\n    return common_elmnts\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #Brute force method\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #Check if lists are empty\n    if list1 == [] or list2 == []:\n        return False\n    \n    #Check if lists have same element\n    if len(list1) == len(list2) and len(list1)!= 0:\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                return True\n        return False\n    \n    #If they are not equal length return false\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= base2:\n        return base1+base2/2-height\n    else:\n        return base1+base2/2+height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #insert your code here\n    return height/2 + (base2-base1)/2\n    "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        length = base1 + base2\n        if height < (length - base1):\n            return 0\n        else:\n            return height - (length - base1)\n    else:\n        length = base1 + base2\n        if height < (length - base2):\n            return 0\n        else:\n            return height - (length - base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = (base1 + base2) / 2\n    trap = base * (height / 2)\n    return trap\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    h_half = height/2\n    h_1 = ((base1-base2) * h_half) + base1\n    h_2 = (base2 * h_half) + base1\n    h_3 = ((base1+base2) * h_half) + base2\n    h_4 = (base1 + base2) + h_half * 2\n    h_5 = ((base1+base2) + h_half) + base2\n    h_6 = (base1 + base2) + h_half * 2\n    h_7 = (base1 + base2) + (base1+base2)\n    return (h_1 + h_2 + h_3 + h_4 + h_5 + h_6 + h_7)/8\n    "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length = (base1 + base2) / 2\n    return length * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    h = height\n    \n    if base1 == 0 and base2 == 0:\n        print(\"There is no trapezium with length 0\")\n        return None\n    if base1 < 0 or base2 < 0:\n        print(\"The base must be greater than 0\")\n        return None\n    if h < 0:\n        print(\"The height must be greater than 0\")\n        return None\n    if base1 == 0 or base2 == 0:\n        print(\"The base must not be equal to 0\")\n        return None\n    \n    t1 = (base1 + base2) / 2\n    t2 = (h + base1) / 2\n    t3 = (h + base2) / 2\n    \n    return (t1 + t2 + t3) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    bottom = base1+height/2\n    top = base2-height/2\n    if top>bottom:\n        raise Exception(\"Incorrect input\")\n    else:\n        return top-bottom\n    \ndef median_trap(bottom,top,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if top>bottom:\n        raise Exception(\"Incorrect input\")\n    else:\n        return top-bottom\n    \ndef median_triangle(base1,base2,height):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    base = base1+height/2\n    if base>base2:\n        raise Exception(\"Incorrect input\")\n    else:\n        return base2-base\n    \ndef median_tri(bottom,top,height):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    if top>bottom:\n        raise Exception(\"Incorrect input\")\n    else:\n        return top-bottom\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n    \ndef main():\n    \n    arr = []\n    n = int(input(\"Enter the length of the array : \"))\n    print(\"Enter the numbers in the array : \")\n    for i in range(n):\n        x = int(input())\n        arr.append(x)\n    number = int(input(\"Enter the number to check whether it is greater than : \"))\n    \n    if check_greater(arr, number):\n        print(f\"{number} is greater than the elements of the array\")\n    else:\n        print(f\"{number} is not greater than the elements of the array\")\n        \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if number < x:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # check if array is empty\n    if arr == []:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if number > i:\n            count += 1\n    if count == 0:\n        print(\"No such numbers exist.\")\n    elif count > 0:\n        print(f\"{count} numbers are greater than {number}.\")\n    \n    "
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)):\n        if number>arr[i]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(b\\w+)+a\")\n    result = re.findall(pattern,text)\n    print(result)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.match(r'a{1,}b',text))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(a)+b*\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    rule = re.compile(r\"(?:a)+?\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a))+\")\n    #rule = re.compile(r\"(?:a)+(?=(?:b))\")\n    #rule = re.compile(r\"(a)+\")\n    #rule = re.compile(r\"(?=a)+\")\n    #rule = re.compile(r\"(a)+?\")\n    #rule = re.compile(r\"(?:a)+?\")\n    rule = re.compile(r\"(?:a)+\")\n    result = re.match(rule,text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #rule = re.compile(r\"(?=(a)"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    if re.match(pattern, text):\n        print(\"There is at least one match!\")\n    else:\n        print(\"There is no match!\")\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    m = re.search(r'ab', text)\n    if m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern=re.compile('ab+')\n    result=pattern.findall(text)\n    print(result)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r\"a+b\",text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'^[ab]+$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    #return int(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(n)\n    if n<0 :\n        return -1\n    else :\n        while n>=10 :\n            n = n//10\n        return n\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        return int(str(-n)[-1])\n    return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code here\n    return int(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(n)\n    while (n) :\n        n, r = divmod(n, 10)\n    return r\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # If the number is less than 10, it returns 1.\n    if n < 10 :\n        return 1\n    # If the number is more than 10, it returns the last digit.\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    temp = n\n    count = 0\n    while (temp > 0):\n        count = count + 1\n        temp = temp // 10\n    return count\nprint(\"\\n\", \"5.1.2\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345))\nprint(\"\\n\", \"Expected-\", 4)\nprint(\"\\n\", \"5.1.3\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456))\nprint(\"\\n\", \"Expected-\", 3)\nprint(\"\\n\", \"5.1.4\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234566))\nprint(\"\\n\", \"Expected-\", 2)\nprint(\"\\n\", \"5.1.5\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345667))\nprint(\"\\n\", \"Expected-\", 1)\nprint(\"\\n\", \"5.1.6\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.7\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567890))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.8\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567898))\nprint(\"\\n\", \"Expected-\", 1)\nprint(\"\\n\", \"5.1.9\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678978))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.10\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897890))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.11\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678978909))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.12\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789789098))\nprint(\"\\n\", \"Expected-\", 1)\nprint(\"\\n\", \"5.1.13\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897899))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.14\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897909))\nprint(\"\\n\", \"Expected-\", 1)\nprint(\"\\n\", \"5.1.15\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678979098))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.16\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789790987))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.17\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789790987654321))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.18\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678979098765432101))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.19\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789790987654321012))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.20\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897909876543210103))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.21\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789790987654321010312))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.22\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897909876543210103123))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.23\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678979098765432101031236))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.24\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897909876543210103123673))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.25\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789790987654321010312367312))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.26\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678979098765432101031236731237))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.27\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897909876543210103123673123713))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.28\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789790987654321010312367312371337))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.29\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678979098765432101031236731237133738))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.30\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897909876543210103123673123713373838))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.31\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789790987654321010312367312371337383839))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.32\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678979098765432101031236731237133738383939))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.33\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897909876543210103123673123713373838393940))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.34\", \"\\n\", \"Example-1:\")\nprint(last_Digit(123456789790987654321010312367312371337383839394040))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.35\", \"\\n\", \"Example-1:\")\nprint(last_Digit(12345678979098765432101031236731237133738383939404041))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5.1.36\", \"\\n\", \"Example-1:\")\nprint(last_Digit(1234567897909876543210103123673123713373838393940404112))\nprint(\"\\n\", \"Expected-\", 0)\nprint(\"\\n\", \"5."
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(n)\n    if n<0 :\n        n = abs(n)\n        x = (n%100)//10\n        n = n%10\n        if x<n :\n            return x\n        else :\n            return n\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while(n>0):\n        remainder=n%10\n        n=n//10\n        n=n+remainder\n    return remainder\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(-i)\n    return list2\nlist2 = [-4,-2,-1,0,5,10]\nprint(neg_nos(list2))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1 if x<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_nos.append(list1[i])\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    a = 0\n    for i in list1:\n        if i < 0:\n            a = a + 1\n    return a\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return -list(list1)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            res.append(list1[i])\n    return res\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in list1:\n        if i<0:\n            negative.append(i)\n    print('\\nList of Negative Numbers : ', negative)\n    \nlist1 = [-10, -20, -30, -40, -50]\nneg_nos(list1)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [n for n in list1 if n<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = ''\n    \n    for ch in str1:\n        if ch.isdigit() or ch.isalpha():\n            new_string += ch\n            \n    return new_string\n    \nprint(remove_odd('abcd$efg*'))\nprint(remove_odd('#@12$3'))\nprint(remove_odd('ab@$$c'))\nprint(remove_odd('k@$#@#'))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    i = 0\n    while i < len(str1):\n        if ord(str1[i]) % 2!= 0:\n            str1 = str1[:i] + str1[i + 1:]\n        else:\n            i += 1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #str1 = list(str1)\n    #i = 0\n    #while i < len(str1):\n        #if str1[i] == '1':\n            #str1.remove(str1[i])\n        #else:\n            #i += 1\n    return ''.join(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    import re\n    str1 = str1.lower()\n    str2 = re.sub(\"[^a-z]\", \"\", str1)\n    str3 = str2.replace(\" \", \"\")\n    str4 = str3.replace(\"\\n\", \"\")\n    str5 = str4.replace(\";\", \"\")\n    str6 = str5.replace(\".\", \"\")\n    str7 = str6.replace(\",\", \"\")\n    str8 = str7.replace(\"'\", \"\")\n    str9 = str8.replace(\"-\", \"\")\n    str10 = str9.replace(\"_\", \"\")\n    str11 = str10.replace(\":\", \"\")\n    str12 = str11.replace(\"(\", \"\")\n    str13 = str12.replace(\")\", \"\")\n    str14 = str13.replace(\"?\", \"\")\n    str15 = str14.replace(\"!\", \"\")\n    str16 = str15.replace(\".\", \"\")\n    str17 = str16.replace(\"'\", \"\")\n    str18 = str17.replace(\"+\", \"\")\n    str19 = str18.replace(\"_\", \"\")\n    str20 = str19.replace(\"-\", \"\")\n    str21 = str20.replace(\"/\", \"\")\n    str22 = str21.replace(\"|\", \"\")\n    str23 = str22.replace(\"&\", \"\")\n    str24 = str23.replace(\"\\\"\", \"\")\n    str25 = str24.replace(\"%\", \"\")\n    str26 = str25.replace(\"*\", \"\")\n    str27 = str26.replace(\"=\", \"\")\n    str28 = str27.replace(\"{\", \"\")\n    str29 = str28.replace(\"}\", \"\")\n    str30 = str29.replace(\"<\", \"\")\n    str31 = str30.replace(\">\", \"\")\n    str32 = str31.replace(\"[\", \"\")\n    str33 = str32.replace(\"]\", \"\")\n    str34 = str33.replace(\"^\", \"\")\n    str35 = str34.replace(\"\\\\\", \"\")\n    str36 = str35.replace(\"`\", \"\")\n    str37 = str36.replace(\"~\", \"\")\n    str38 = str37.replace(\"$\", \"\")\n    str39 = str38.replace(\"'\", \"\")\n    str40 = str39.replace(\"#\", \"\")\n    str41 = str40.replace(\"-\", \"\")\n    str42 = str41.replace(\"&\", \"\")\n    str43 = str42.replace(\"(\", \"\")\n    str44 = str43.replace(\")\", \"\")\n    str45 = str44.replace(\"@\", \"\")\n    str46 = str45.replace(\"#\", \"\")\n    str47 = str46.replace(\"+\", \"\")\n    str48 = str47.replace(\"*\", \"\")\n    str49 = str48.replace(\"=\", \"\")\n    str50 = str49.replace(\"_\", \"\")\n    str51 = str50.replace(\"{\", \"\")\n    str52 = str51.replace(\"}\", \"\")\n    str53 = str52.replace(\"|\", \"\")\n    str54 = str53.replace(\"<\", \"\")\n    str55 = str54.replace(\">\", \"\")\n    str56 = str55.replace(\"(\", \"\")\n    str57 = str56.replace(\")\", \"\")\n    str58 = str57.replace(\"[\", \"\")\n    str59 = str58.replace(\"]\", \"\")\n    str60 = str59.replace(\"^\", \"\")\n    str61 = str60.replace(\"{\", \"\")\n    str62 = str61.replace(\"}\", \"\")\n    str63 = str62.replace(\"<\", \"\")\n    str64 = str63.replace(\">\", \"\")\n    str65 = str64.replace(\"\\\"\", \"\")\n    str66 = str65.replace(\"%\", \"\")\n    str67 = str66.replace(\"*\", \"\")\n    str68 = str67.replace(\"=\", \"\")\n    str69 = str68.replace(\"[\", \"\")\n    str70 = str69.replace(\"]\", \"\")\n    str71 = str70.replace(\"|\", \"\")\n    str72 = str71.replace(\"(\", \"\")\n    str73 = str72.replace(\")\", \"\")\n    str74 = str73.replace(\"#\", \"\")\n    str75 = str74.replace(\"&\", \"\")\n    str76 = str75.replace(\"~\", \"\")\n    str77 = str76.replace(\"`\", \"\")\n    str78 = str77.replace(\"~\", \"\")\n    str79 = str78.replace(\"-\", \"\")\n    str80 = str79.replace(\"&\", \"\")\n    str81 = str80.replace(\"#\", \"\")\n    str82 = str81.replace(\"-\", \"\")\n    str83 = str82.replace(\"&\", \"\")\n    str84 = str83.replace(\"#\", \"\")\n    str85 = str84.replace(\"@\", \"\")\n    str86 = str85.replace(\"-\", \"\")\n    str87 = str86.replace(\"&\", \"\")\n    str88 = str87.replace(\"#\", \"\")\n    str89 = str88.replace(\"+\", \"\")\n    str90 = str89.replace(\"*\", \"\")\n    str91 = str90.replace(\"=\", \"\")\n    str92 = str91.replace(\"_\", \"\")\n    str93 = str92.replace(\"{\", \"\")\n    str94 = str93.replace(\"}\", \"\")\n    str95 = str94.replace(\"|\", \"\")\n    str96 = str95.replace(\"<\", \"\")\n    str97 = str96.replace(\">\", \"\")\n    str98 = str97.replace(\"[\", \"\")\n    str99 = str98.replace(\"]\", \"\")\n    str100 = str99.replace(\"^\", \"\")\n    str101 = str100.replace(\"{\", \"\")\n    str102 = str101.replace(\"}\", \"\")\n    str103 = str102.replace(\"<\", \"\")\n    str104 = str103.replace(\">\", \"\")\n    str105 = str104.replace(\"(\", \"\")\n    str106 = str105.replace(\")\", \"\")\n    str107 = str106.replace(\"[\", \"\")\n    str108 = str107.replace(\"]\", \"\")\n    str109 = str108.replace(\"^\", \"\")\n    str110 = str109.replace(\"{\", \"\")\n    str111 = str110.replace(\"}\", \"\")\n    str112 = str111.replace(\"<\", \"\")\n    str113 = str112.replace(\">\", \"\")\n    str114 = str113.replace(\"\\\"\", \"\")\n    str115 = str114.replace(\"#\", \"\")\n    str116 = str115.replace(\"+\", \"\")\n    str117 = str116.replace(\"*\", \"\")\n    str118 = str117.replace(\"=\", \"\")\n    str119 = str118.replace(\"&\", \"\")\n    str120 = str119.replace(\"(\", \"\")\n    str121 = str120.replace(\")\", \"\")\n    str122 = str121.replace(\"#\", \"\")\n    str123 = str122.replace(\"&\", \"\")\n    str124 = str123.replace(\"#\", \"\")\n    str125 = str124.replace(\"+\", \"\")\n    str126 = str125.replace(\"*\", \"\")\n    str127 = str126.replace(\"=\", \"\")\n    str128 = str127.replace(\"_\", \"\")\n    str129 = str128.replace(\"{\", \"\")\n    str130 = str129.replace(\"}\", \"\")\n    str131 = str130.replace(\"|\", \"\")\n    str132 = str131.replace(\"<\", \"\")\n    str133 = str132.replace(\">\", \"\")\n    str134 = str133.replace(\"[\", \"\")\n    str135 = str134.replace(\"]\", \"\")\n    str136 = str135.replace(\"^\", \"\")\n    str137 = str136.replace(\"{\", \"\")\n    str138 = str137.replace(\"}\", \"\")\n    str139 = str138.replace(\"<\", \"\")\n    str140 = str139.replace(\">\", \"\")\n    str141 = str140.replace(\"[\", \"\")\n    str142 = str141.replace(\"]\", \"\")\n    str143 = str142.replace(\"^\", \"\")\n    str144 = str143.replace(\"{\", \"\""
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # for i in range(len(str1)):\n    #     if i % 2 == 0:\n    #         continue\n    #     str1 = str1.replace(str1[i],\"\")\n    str1 = \"\".join([str1[i] for i in range(len(str1)) if i % 2 == 0])\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = list(str1)\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            list1.remove(list1[i])\n    return ''.join(list1)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_list = []\n    for char in str1:\n        if char not in odd_list:\n            odd_list.append(char)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if(i == \" \" or i == \".\" or i == \",\" or i == \"?\" or i == \"!\" or i == \";\" or i == \"(\" or i == \")\" or i == \":\"):\n            continue\n        else:\n            return str1.replace(i, \"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = []\n    for i in str1:\n        if i not in lst:\n            lst.append(i)\n    return ''.join(lst)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char!= \" \":\n            new_str += char\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][0] > test_list[i][1]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) == 0:\n        return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\nprint(count_bidirectional(test_list))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0]:\n                count += 1\n            elif test_list[i][0] > test_list[j][0]:\n                count += 1\n            else:\n                if test_list[i][1] < test_list[j][1]:\n                    count += 1\n                elif test_list[i][1] > test_list[j][1]:\n                    count += 1\n                else:\n                    count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        # print(test_list[i])\n        for j in range(len(test_list)):\n            if test_list[i][0] == test_list[j][1] or test_list[i][1] == test_list[j][0]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import Counter\n    counter = Counter()\n    \n    for i in test_list:\n        counter[i] += 1\n    for i in counter:\n        counter[i] -= 1\n    \n    for i in test_list:\n        counter[i] += 1\n    for i in counter:\n        counter[i] -= 1\n    \n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        first = test_list[i]\n        for j in range(i + 1, len(test_list)):\n            second = test_list[j]\n            count += 1 if first == second else 0\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for a, b in zip(test_list, test_list[1:]):\n        if a == b:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            # print (test_list[i],test_list[j])\n            if (test_list[i][0] == test_list[j][0]) and (test_list[i][1] == test_list[j][1]):\n                count += 1\n    print (count)\n    return\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for i in range(len(L)):\n        res += L[i]\n    return res\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your code here\n    result = L[0]\n    for i in range(1, len(L)):\n        result = result * 10 + L[i]\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in range(len(L)):\n        if(type(L[i]) == int):\n            pass\n        else:\n            return None\n    return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n    \ndef round_list(L):\n    '''\n    Write a function to round a list of floats to the nearest integer.\n    '''\n    return list(map(int, map(round, L)))\n    \ndef drop_duplicates(L):\n    '''\n    Write a function to return a list with duplicate elements removed.\n    '''\n    return set(L)\n    \ndef all_the_same(L):\n    '''\n    Write a function that returns True if a passed list is entirely comprised of\n    the same elements.\n    '''\n    return len(L)==len(set(L))\n    \ndef not_anagram(L1,L2):\n    '''\n    Write a function that determines whether two lists are anagrams. An anagram is\n    when the list is arranged in the same way, but not necessarily in the order \n    in which it was written.\n    '''\n    return sorted(L1) == sorted(L2)\n    \ndef some_in(L, s):\n    '''\n    Write a function that determines whether a value is in a list.\n    '''\n    return any(i in L for i in s)\n    \ndef pop_in(L, s):\n    '''\n    Write a function that determines whether a value is in a list.\n    '''\n    return any(i in L for i in s)\n    \ndef almost_in(L, s):\n    '''\n    Write a function that determines whether a value is in a list.\n    '''\n    return any(i in L for i in s)\n    \ndef min_in(L, s):\n    '''\n    Write a function that determines whether a value is in a list.\n    '''\n    return any(i in L for i in s)\n    \ndef max_in(L, s):\n    '''\n    Write a function that determines whether a value is in a list.\n    '''\n    return any(i in L for i in s)\n    \ndef replace(L, old, new):\n    '''\n    Write a function that replaces all instances of a value in a list with a new \n    value.\n    '''\n    for i in range(len(L)):\n        if L[i] == old:\n            L[i] = new\n    return L\n    \ndef middle(L):\n    '''\n    Write a function that returns the middle element of a list.\n    '''\n    return L[int(len(L)/2)]\n    \ndef middle_sorted(L):\n    '''\n    Write a function that returns the middle element of a list.\n    '''\n    return L[int(len(L)/2)]\n    \ndef is_sorted(L):\n    '''\n    Write a function that returns True if a list is sorted in ascending order\n    and False otherwise.\n    '''\n    return L == sorted(L)\n    \ndef max_sub_list_brute(L):\n    '''\n    Write a function that takes in a list of numbers and returns the index of the\n    maximum value. This could be the largest element, the largest sum, the highest\n    value, or the index of the largest element.\n    '''\n    def max_sub_list(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        max_int = L[0]\n        index_of_max = 0\n        for i in range(len(L)):\n            if L[i] > max_int:\n                max_int = L[i]\n                index_of_max = i\n        return max_int, index_of_max\n    \n    def max_sub_list_recursive(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        if len(L) == 0:\n            return None\n        elif len(L) == 1:\n            return L[0], 0\n        else:\n            max_int = L[0]\n            index_of_max = 0\n            for i in range(len(L)):\n                if L[i] > max_int:\n                    max_int = L[i]\n                    index_of_max = i\n            return max_int, index_of_max\n    \n    def max_sub_list_recursive_two(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        if len(L) == 0:\n            return None\n        elif len(L) == 1:\n            return L[0], 0\n        else:\n            max_int = L[0]\n            max_index = 0\n            for i in range(len(L)):\n                if L[i] > max_int:\n                    max_int = L[i]\n                    max_index = i\n            return max_int, max_index\n    \n    def max_sub_list_recursive_three(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        if len(L) == 0:\n            return None\n        elif len(L) == 1:\n            return L[0], 0\n        else:\n            if L[0] < L[1]:\n                return L[0], 0\n            else:\n                return L[1], 1\n                \n    def max_sub_list_recursive_four(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        if len(L) == 0:\n            return None\n        elif len(L) == 1:\n            return L[0], 0\n        else:\n            if L[0] > L[1]:\n                return L[0], 0\n            else:\n                return L[1], 1\n                \n    def max_sub_list_recursive_five(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        if len(L) == 0:\n            return None\n        elif len(L) == 1:\n            return L[0], 0\n        else:\n            return max(L[0], max_sub_list_recursive_five(L[2:]))\n                \n    def max_sub_list_recursive_six(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        if len(L) == 0:\n            return None\n        elif len(L) == 1:\n            return L[0], 0\n        elif len(L) == 2:\n            if L[0] > L[1]:\n                return L[0], 0\n            else:\n                return L[1], 1\n        else:\n            max_value, max_index = max_sub_list_recursive_six(L[2:])\n            if L[0] > max_value:\n                return L[0], 0\n            else:\n                return max_value, max_index\n                \n    def max_sub_list_recursive_seven(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        if len(L) == 0:\n            return None\n        elif len(L) == 1:\n            return L[0], 0\n        elif len(L) == 2:\n            if L[0] > L[1]:\n                return L[0], 0\n            else:\n                return L[1], 1\n        else:\n            if L[0] > max_sub_list_recursive_seven(L[2:]):\n                return L[0], 0\n            else:\n                return max_sub_list_recursive_seven(L[2:])\n                \n    def max_sub_list_recursive_eight(L):\n        '''\n        Write a function that takes in a list of integers and returns the largest\n        element as well as the index.\n        '''\n        if len(L) == 0:\n            return None\n        elif len(L) == 1:\n            return "
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_value = 0\n    for i in range(len(L)):\n        single_value += L[i]\n    return single_value\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for e in L:\n        res = res * 10 + e\n    return res\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_num = 0\n    for i in L:\n        new_num += i\n    return new_num\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(sum(L))\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    sentence = text.split()\n    for i in range(len(sentence)):\n        if sentence[i] in [\"the\",\"a\"]:\n            adverb_positions.append(i)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    for index, sentence in enumerate(text):\n        for index2, word in enumerate(sentence):\n            if word in ['am', 'is', 'are', 'was', 'were', 'will', 'would']:\n                adverb_positions.append(index)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = '\\b(?:an|a|for|of|at|on|by|with)\\b'\n    res = re.finditer(regex, text)\n    adverbs = []\n    for m in res:\n        adverbs.append((m.group(0), m.start()))\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    print('\\n*****Task 1*****')\n    \n    text = text.lower()\n    text_list = text.split()\n    for i in range(0,len(text_list)):\n        if re.search('[a-z]*(a|an|the)\\s[a-z]*',text_list[i]):\n            print('First adverb of {} is {}.'.format(text_list[i],text_list.index(text_list[i])))\n        \ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    print('\\n*****Task 2*****')\n    \n    text = text.lower()\n    text_list = text.split()\n    for i in range(0,len(text_list)):\n        if re.search('[a-z]*(n|an|the)\\s[a-z]*',text_list[i]):\n            print('First noun of {} is {}.'.format(text_list[i],text_list.index(text_list[i])))\n        \ndef find_first_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    print('\\n*****Task 3*****')\n    \n    text = text.lower()\n    text_list = text.split()\n    for i in range(0,len(text_list)):\n        if re.search('[a-z]*(v|be|come|want|give|go|get|move|take|go\\s[a-z]*|go\\s[a-z]*\\s[a-z]*)?[a-z]*',text_list[i]):\n            print('First verb of {} is {}.'.format(text_list[i],text_list.index(text_list[i])))\n            \ndef find_noun_and_verb_position(text):\n    '''\n    Write a function to find the first noun and first verb in a given sentence.\n    '''\n    print('\\n*****Task 4*****')\n    \n    text = text.lower()\n    text_list = text.split()\n    \n    for i in range(0,len(text_list)):\n        if re.search('[a-z]*(n|an|the)\\s[a-z]*',text_list[i]):\n            print('First noun of {} is {}'.format(text_list[i],text_list.index(text_list[i])))\n        \n        if re.search('[a-z]*(v|be|come|want|give|go|get|move|take|go\\s[a-z]*|go\\s[a-z]*\\s[a-z]*)?[a-z]*',text_list[i]):\n            print('First verb of {} is {}'.format(text_list[i],text_list.index(text_list[i])))\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #for searching adverb\n    adverb_pattern = re.compile(r'\\b[Rr]e?\\w+n?g[aae]\\b', re.IGNORECASE)\n    #print(adverb_pattern.findall(text))\n    adverb_positions = []\n    for x in re.finditer(adverb_pattern, text):\n        adverb_positions.append(x.start())\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos = -1\n    pos_1 = -1\n    pos_2 = -1\n    pos_3 = -1\n    words = text.split()\n    for i in range(len(words)):\n        if words[i] == \"\u0421\u043f\u0440\u0430\u0432\":\n            pos = i\n            break\n    if pos!= -1:\n        pos_1 = words.index(\"\u0421\u043f\u0440\u0430\u0432\")\n        pos_2 = pos_1 + 1\n        pos_3 = pos_1 + 2\n        return pos, pos_1, pos_2, pos_3\n    else:\n        return -1, -1, -1, -1\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    if len(text) == 0:\n        return adverbs\n    for i in range(len(text)):\n        for j in range(len(text[i])):\n            if text[i][j] == 'r':\n                if i == 0 or text[i-1]!= '.' and text[i-1]!= ',' and text[i-1]!= ',' and text[i-1]!= ':' and text[i-1]!= ';' and text[i-1]!= '?':\n                    adverbs.append([j,i])\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not text:\n        return None\n    positions = []\n    for i in range(len(text)):\n        if is_adverb(text[i:]) and is_adverb(text[i-1]):\n            positions.append(i)\n    if not positions:\n        return None\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.split()\n    for i in range(len(text)):\n        if text[i] in ['sometimes','frequently','frequently','always']:\n            print('Adverb: ',text[i],'Position: ',i)\n            return text[i]\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not text:\n        return None\n    #your code here\n    return None\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s=l**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = (6 * l * l)\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6*l**2\n    return surfacearea\n    \ndef surfacearea_octagon(length):\n    '''\n    Write a function to find the surface area of an octagon of a given size.\n    '''\n    surfacearea = length**2*3**0.5\n    return surfacearea\n    \ndef surfacearea_hexagon(length):\n    '''\n    Write a function to find the surface area of a hexagon of a given size.\n    '''\n    surfacearea = 2*length**2*3**0.5\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea_cube(l):\n        def cube_surface_area(l):\n            if l < 0:\n                raise ValueError\n            else:\n                return 6 * l ** 2\n        return cube_surface_area(l)\n    \n    return surfacearea_cube\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l**2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l ** 2\n    print(a)\n    return a\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    length = len(nums)\n    for i in nums:\n        if i > 0:\n            sum += 1\n    return sum / length\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    i = 0\n    positive_count = 0\n    while i < len(nums):\n        if nums[i] > 0:\n            positive_count += 1\n        i += 1\n    return positive_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # sum = 0\n    # for i in range(len(nums)):\n    #     if nums[i] > 0:\n    #         sum += 1\n    # return sum/len(nums)\n    return sum(1 for i in nums if i > 0)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    number = 0\n    for i in nums:\n        if i > 0:\n            number += 1\n    return number / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert to int\n    nums = array('i', nums)\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    print(count / len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # counter=0\n    # for i in range(0,len(nums)):\n    #     if nums[i]>0:\n    #         counter+=1\n    # return counter/len(nums)\n    \n    # counter=0\n    # for i in range(0,len(nums)):\n    #     if nums[i]>0:\n    #         counter+=1\n    # return counter\n    \n    # counter=0\n    # for i in range(0,len(nums)):\n    #     if nums[i]>0:\n    #         counter+=1\n    # return counter/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] > 0:\n            sum = sum + 1\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1\n    for i in range(len(list1)):\n        if (list1[i] < 0) and (list1[i] > max):\n            max = list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [1,-2,-3,4,-5,6,7,-8,9]\n    print(f\"The largest negative number in the list : {max(list1)}\")\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg = -999999\n    for i in list1:\n        if (i < 0):\n            if (i > neg):\n                neg = i\n    return neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1) * -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    num = -1\n    for i in range(0,len(list1)):\n        if(list1[i]<0):\n            if(list1[i]>num):\n                num = list1[i]\n    return num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -999999999\n    for i in range(len(list1)):\n        if(list1[i]<0):\n            if(max<list1[i]):\n                max=list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -1\n    for num in list1:\n        if num < 0:\n            if num > largest_num:\n                largest_num = num\n    return largest_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg=list1[0]\n    for i in range(0,len(list1)):\n        if(list1[i]<0):\n            if(largest_neg<list1[i]):\n                largest_neg=list1[i]\n    return largest_neg\n    \nprint(largest_neg([-1,2,-3,-5,1,4]))\nprint(largest_neg([0,1,2,-3,-5,1,4]))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in range(len(list1)):\n        if(list1[i]<0):\n            if(max_neg<0):\n                max_neg = list1[i]\n            elif(max_neg<list1[i]):\n                max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -99999999\n    for num in list1:\n        if num < largest_neg and num!= 0:\n            largest_neg = num\n    print(\"Largest negative number in list: \",largest_neg)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    tuple_list = list(test_list)\n    for i in range(len(tuple_list)):\n        tuple_list[i] = tuple_list[i][:K]\n    return tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    if len(test_list[0]) <= K:\n        return test_list\n    else:\n        return trim_tuple(list(zip(*test_list[:K]))), trim_tuple(list(zip(*test_list[K+1:])))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(test_list[i][:K], test_list[i][K:]) for i in range(len(test_list))]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for index in range(len(test_list)):\n        test_list[index] = tuple(test_list[index][:K])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # new_list = []\n    # for each_item in test_list:\n    #     if len(each_item) == K:\n    #         new_list.append(each_item)\n    # return new_list\n    # return [[i[k] for i in test_list] for k in range(K)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i][j] = test_list[i][j - K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # return map(lambda t: t[k:], test_list)\n    return list(map(lambda t: t[:K], test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list)):\n        tup = test_list[i]\n        test_list[i] = tuple(tup[:K])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            trimmed_list.append(test_list[i][0:K])\n        else:\n            trimmed_list.append(test_list[i])\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return (test_list[:K], test_list[K:])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if type(test_tup1) is not tuple:\n        raise ValueError('test_tup1 must be a tuple')\n    if type(test_tup2) is not tuple:\n        raise ValueError('test_tup2 must be a tuple')\n    \n    try:\n        test_tup1 = list(test_tup1)\n        test_tup2 = list(test_tup2)\n        lst_1 = list(map(int, test_tup1))\n        lst_2 = list(map(int, test_tup2))\n        index = 0\n        while index < len(lst_1):\n            lst_1[index] = lst_1[index] * lst_2[index]\n            index += 1\n        return tuple(lst_1)\n    except ValueError:\n        raise ValueError('test_tup1 and test_tup2 must be tuples')\n    except TypeError:\n        raise TypeError('test_tup1 and test_tup2 must be tuples')\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_tuple = (x * y for x, y in zip(test_tup1, test_tup2))\n    return index_multiplication_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    #1st solution \n    # test_tup1 = (10,20,30,40)\n    # test_tup2 = (3,4,5)\n    # new_tuple = []\n    # for i in range(len(test_tup1)):\n    #     new_tuple.append(test_tup1[i]*test_tup2[i])\n    # return new_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # your code here\n    return test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1], test_tup1[2] * test_tup2[2]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplied_tuple = []\n    \n    for i in range(len(test_tup1)):\n        multiplied_tuple.append(test_tup1[i] * test_tup2[i])\n    \n    return multiplied_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = 0\n    for i in range(len(test_tup1)):\n        res += test_tup1[i] * test_tup2[i]\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mul_tup = (0, 0)\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            mul_tup = (mul_tup[0] + test_tup1[i] * test_tup2[i], mul_tup[1])\n        return mul_tup\n    else:\n        print('Two tuples must be of same length to perform multiplication!')\n        return None\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if type(test_tup1)!= tuple or type(test_tup2)!= tuple:\n        raise TypeError('Invalid type for inputs')\n    return tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for i in lst:\n        if i in tup:\n            counter = counter+1\n    return counter\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    for i in tup:\n        print(c[i])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    result = {}\n    for i in lst:\n        result[i] = result.get(i,0) + 1\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if type(tup)!= tuple: \n        raise TypeError(\"The input should be a tuple\") \n    if type(lst)!= list: \n        raise TypeError(\"The input should be a list\") \n    \n    new_tup = []\n    for i in lst: \n        if i not in tup: \n            new_tup.append(i) \n    return new_tup \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).most_common(n)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for tup in lst:\n        if tup == lst[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = []\n    for i in tup:\n        counts.append(lst.count(i))\n    return tuple(counts)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    temp = Counter(lst)\n    count = 0\n    for i in tup:\n        count = count + temp[i]\n    return count\ntup = tuple(map(int, input().split()))\nlst = list(map(int, input().split()))\nprint(count_Occurrence(tup, lst)) \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # count=[]\n    # for i in lst:\n    #     count.append(lst.count(i))\n    # return count\n    return lst.count(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    if lst:\n        count_occurrence = Counter(lst).most_common(len(lst))\n        return (count_occurrence)\n    else:\n        return None\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num ** 3)\n    return cube_nums\n    "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # We start with empty list to store the results\n    result = []\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums_list = []\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n    #for n in nums:\n        #n**3\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_n = 0\n    i = 0\n    while i <= n:\n        sum_n += i\n        i += 1\n    return sum_n\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    return sum(i for i in range(1,n+1) if i%2==1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if(n==1):\n        return n\n    return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i**3 + i**2 - i)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Your code here\n    # for a in str:\n    #     if len(a) == l:\n    #         return str\n    #         break\n    # else:\n    #     return 'No such string'\n    return [a for a in str if len(a) == l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    if len(str) == l:\n        return str\n    else:\n        return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # ********\n    # PSEUDOCODE\n    # ********\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    arr = []\n    size = l[0]\n    start = 0\n    for i in range(1, l[1]+1):\n        if (i-1) >= 0 and i <= len(l)-1:\n            if size <= len(l[i]):\n                arr.append(l[i])\n                size = size - len(l[i])\n            else:\n                start = i\n                size = 0\n                break\n    return arr\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str1 = ''\n    for i in range(0, len(str)):\n        if i == 0:\n            str1 += str[i]\n        elif len(str1) + len(str[i]) <= l:\n            str1 += str[i]\n        else:\n            break\n    return str1\n    \ndef is_subsequence(s1, s2):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    if s1 in s2:\n        return True\n    else:\n        return False\n        \ndef reverse_string(s):\n    '''\n    Write a function to reverse a given string.\n    '''\n    s = s[::-1]\n    return s\n    \ndef count_unique_elements(lst):\n    '''\n    Write a function to count the number of unique elements in a list.\n    '''\n    count = 0\n    lst = set(lst)\n    for i in lst:\n        count += 1\n    return count\n    \ndef remove_keys(dct, keys):\n    '''\n    Write a function to remove the given list of keys from the dictionary.\n    '''\n    for key in keys:\n        if key in dct.keys():\n            del dct[key]\n    return dct\n    \ndef remove_keys_if_value(dct, key, val):\n    '''\n    Write a function to remove the given key and value pair from the dictionary.\n    '''\n    if key in dct.keys() and dct[key] == val:\n        del dct[key]\n    return dct\n    \ndef find_element_occurrences(lst, element):\n    '''\n    Write a function to find the number of occurrences of an element in a list.\n    '''\n    occurrences = 0\n    for i in lst:\n        if i == element:\n            occurrences += 1\n    return occurrences\n    \ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    lst_1 = []\n    for i in lst:\n        if i not in lst_1:\n            lst_1.append(i)\n    return lst_1\n    \ndef max_and_min_numbers(lst):\n    '''\n    Write a function to find the maximum and minimum elements in a list.\n    '''\n    return max(lst), min(lst)\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_iterator(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    left = 0\n    right = len(s) - 1\n    while left < right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \ndef find_numbers_greater_than_average(lst):\n    '''\n    Write a function to find numbers in a list greater than or equal to the average.\n    '''\n    return [i for i in lst if i > sum(lst) / len(lst)]\n    \ndef find_characters_greater_than_average(s):\n    '''\n    Write a function to find characters in a string greater than or equal to the average.\n    '''\n    return ''.join([i for i in s if i.isalpha() and i.isupper() and i.lower() > s.lower().count(i)])\n    \ndef find_vowels_and_consonants(s):\n    '''\n    Write a function to count the total number of vowels and consonants in a string.\n    '''\n    vowels = 'aeiou'\n    vowels_count = 0\n    consonants_count = 0\n    for i in s:\n        if i in vowels:\n            vowels_count += 1\n        else:\n            consonants_count += 1\n    return vowels_count, consonants_count\n    \ndef is_palindrome_backwards(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    str_1 = s[::-1]\n    return str_1 == s\n    \ndef is_palindrome_backwards_iterator(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    left = len(s) - 1\n    right = 0\n    while left >= right:\n        if s[left]!= s[right]:\n            return False\n        left -= 1\n        right += 1\n    return True\n    \ndef find_numbers_with_even_sum(lst):\n    '''\n    Write a function to find numbers in a list with even sum.\n    '''\n    return [i for i in lst if i % 2 == 0]\n    \ndef find_common_chars(s1, s2):\n    '''\n    Write a function to find the common characters in two given strings.\n    '''\n    return ''.join([i for i in s1 if i in s2 and s1.count(i) == s2.count(i)])\n    \ndef find_common_chars_iterator(s1, s2):\n    '''\n    Write a function to find the common characters in two given strings.\n    '''\n    common = ''\n    for i in range(len(s1)):\n        if s1[i] in s2 and s1.count(s1[i]) == s2.count(s1[i]):\n            common += s1[i]\n    return common\n    \ndef is_anagram_sorted(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    sorted_1 = sorted(s1)\n    sorted_2 = sorted(s2)\n    if sorted_1 == sorted_2:\n        return True\n    else:\n        return False\n    \ndef is_anagram_sorted_iterator(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef find_the_most_repeated_char(s):\n    '''\n    Write a function to find the most repeated character in a given string.\n    '''\n    return max(set(s), key = s.count)\n    \ndef find_the_most_repeated_char_iterator(s):\n    '''\n    Write a function to find the most repeated character in a given string.\n    '''\n    return max(set(s), key = s.count)\n    \ndef find_most_frequent_char(s):\n    '''\n    Write a function to find the most frequently occuring character in a given string.\n    '''\n    return max(set(s), key = s.count)\n    \ndef find_most_frequent_char_iterator(s):\n    '''\n    Write a function to find the most frequently occuring character in a given string.\n    '''\n    return max(set(s), key = s.count)\n    \ndef find_most_frequent_char_count(s):\n    '''\n    Write a function to find the most frequently occuring character in a given string.\n    '''\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key = d.get)\n    \ndef find_most_frequent_char_count_iterator(s):\n    '''\n    Write a function to find the most frequently occuring character in a given string.\n    '''\n    return max(set(s), key = s.count)\n    \ndef find_common_characters(s1, s2):\n    '''\n    Write a function to find common characters in two given strings.\n    '''\n    return ''.join([i for i in se"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    i = 0\n    while i < l:\n        res.append(str[i:i+int(len(str)/l)])\n        i += int(len(str)/l)\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[i:i+l] for s in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Your code here\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) <= l:\n        return str\n    else:\n        return str[:l]\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n    \n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #n=len(text1)\n    #for i in range(n):\n    #    if text1[i]==\" \":\n    #        text1=text1[:i]+text1[i+1:]\n    #    else:\n    #        print(i)\n    #        break\n    #return text1\n    return re.sub('\\s+','', text1).strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n    \ndef remove_punctuation(text2):\n    '''\n    Write a function that removes all the punctuation marks\n    from the given string.\n    '''\n    return re.sub(r\"[^\\w\\s]\", '', text2)\n    \ndef remove_stop_words(text3):\n    '''\n    Write a function to remove stop words from the given string.\n    '''\n    from nltk.corpus import stopwords\n    stop_words = set(stopwords.words('english'))\n    return \" \".join([i for i in text3.split() if i not in stop_words])\n    \ndef word_count(text4):\n    '''\n    Write a function to count the number of times each word occurs in the given string.\n    '''\n    text4 = remove_punctuation(text4)\n    text4 = remove_whitespaces(text4)\n    words = text4.split()\n    words_count = {}\n    for word in words:\n        if word in words_count:\n            words_count[word] += 1\n        else:\n            words_count[word] = 1\n    return words_count\n    \ndef count_unique(text5):\n    '''\n    Write a function to count the number of unique words in the given string.\n    '''\n    text5 = remove_punctuation(text5)\n    text5 = remove_whitespaces(text5)\n    return len(set(text5.split()))\n    \ndef count_characters(text6):\n    '''\n    Write a function to count the number of characters in the given string.\n    '''\n    return len(text6)\n    \ndef count_capitalized_characters(text7):\n    '''\n    Write a function to count the number of capitalized words in the given string.\n    '''\n    return len([i for i in text7.split() if i.istitle()])\n    \ndef count_vowels(text8):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    text8 = remove_punctuation(text8)\n    text8 = remove_whitespaces(text8)\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in text8:\n        if char in vowels:\n            count += 1\n    return count\n    \ndef count_upper_characters(text9):\n    '''\n    Write a function to count the number of upper characters in the given string.\n    '''\n    return len([i for i in text9 if i.isupper()])\n    \ndef count_numbers(text10):\n    '''\n    Write a function to count the number of numbers in the given string.\n    '''\n    return len([i for i in text10 if i.isdigit()])\n    \ndef count_chars_with_distinct_digits(text11):\n    '''\n    Write a function to count the number of characters in the given string with distinct\n    digits.\n    '''\n    # Create a set for digits\n    digit_set = set()\n    text11 = remove_punctuation(text11)\n    text11 = remove_whitespaces(text11)\n    for digit in text11:\n        if digit.isdigit():\n            digit_set.add(digit)\n    # return len(digit_set)\n    return len(text11)\n    \ndef count_spaces(text12):\n    '''\n    Write a function to count the number of spaces in the given string.\n    '''\n    return len([i for i in text12 if i ==''])\n    \ndef count_sentences(text13):\n    '''\n    Write a function to count the number of sentences in the given string.\n    '''\n    sentences = text13.split('.')\n    return len(sentences)\n    \ndef count_words(text14):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    text14 = remove_punctuation(text14)\n    text14 = remove_whitespaces(text14)\n    return len(text14.split())\n    \ndef count_emojis(text15):\n    '''\n    Write a function to count the number of emojis in the given string.\n    '''\n    emoji_pattern = re.compile(\"[\"\n                            u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                            u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                            u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                            u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                            u\"\\U00002702-\\U000027B0\"\n                            u\"\\U000024C2-\\U0001F251\"\n                            \"]+\", flags = re.UNICODE)\n    return len(emoji_pattern.findall(text15))\n    \ndef count_capitalized_words(text16):\n    '''\n    Write a function to count the number of capitalized words in the given string.\n    '''\n    return len([i for i in text16.split() if i.istitle()])\n    \ndef count_repeated_words(text17):\n    '''\n    Write a function to count the number of repeated words in the given string.\n    '''\n    text17 = remove_punctuation(text17)\n    text17 = remove_whitespaces(text17)\n    # Create a set for words\n    word_set = set()\n    words = text17.split()\n    for word in words:\n        if word in word_set:\n            word_set.add(word)\n        else:\n            word_set.add(word)\n    # return len(word_set)\n    return len(words)\n    \ndef count_lines(text18):\n    '''\n    Write a function to count the number of lines in the given string.\n    '''\n    return len([i for i in text18.splitlines() if i])\n    \ndef count_line_words(text19):\n    '''\n    Write a function to count the number of words in each line in the given string.\n    '''\n    text19 = remove_punctuation(text19)\n    text19 = remove_whitespaces(text19)\n    lines = text19.splitlines()\n    return {i:len(i.split()) for i in lines}\n    \ndef count_lines_with_unique_words(text20):\n    '''\n    Write a function to count the number of lines in the given string where all of the\n    words are unique.\n    '''\n    text20 = remove_punctuation(text20)\n    text20 = remove_whitespaces(text20)\n    lines = text20.splitlines()\n    words_in_lines = {i:len(i.split()) for i in lines}\n    return len(words_in_lines)\n    \ndef count_dots(text21):\n    '''\n    Write a function to count the number of dots in the given string.\n    '''\n    return len([i for i in text21 if i == '.'])\n    \ndef count_newlines(text22):\n    '''\n    Write a function to count the number of newlines in the given string.\n    '''\n    return len([i for i in text22 if i == '\\n'])\n    \ndef count_spaces_before_and_after_punctuation(text23):\n    '''\n    Write a function to count the number of spaces before and after each punctuation mark.\n    '''\n    text23 = remove_punctuation(text23)\n    text23 = remove_whitespaces(text23)\n    spaces_before_punctuation = 0\n    for i in text23:\n        if i == '?' or i == '!' or i == '.' or i == ',' or i == ';':\n            spaces_before_punctuation += 1\n    spaces_after_punctuation = 0\n    for i in text23:\n        if i == '?' or i == '!' or i == '.' or i == ',' or i == ';':\n            spaces_after_punctuation += 1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.replace(\" \", \"\")\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>=sale_amount:\n        return actual_cost-sale_amount\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost > sale_amount else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount > 0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # l = actual_cost-sale_amount\n    # if l <= 0:\n    #     return 0\n    # else:\n    #     return actual_cost-sale_amount\n    return max(actual_cost - sale_amount, 0)\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount > 0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0 if actual_cost < sale_amount else actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost==0:\n        return 0\n    else:\n        loss_amount=sale_amount/actual_cost\n    return loss_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if (n % i == 0) : \n            sum += i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1) : \n        if n % i == 0 : \n            count += i \n            count += n / i \n    return count \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n < 0:\n        return 'Factorial does not exist for negative numbers'\n    if n < 2:\n        return 1\n    return n * factorial(n - 1)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i <= n :\n            if i % 2 == 0 :\n                sum += i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(2,n+1):\n        if n%i==0 :\n            factors.append(i)\n    sum = 0\n    for j in range(0,len(factors)):\n        sum = sum + factors[j]\n    print(\"The sum of the factors of \",n,\" is \",sum)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    ans = 0\n    \n    for i in range(1,n+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                ans += i\n            else :\n                ans += (i+1)\n                \n    return ans\n    \nprint(\"sum of factors of number: \",sumofFactors(10))\nprint(\"sum of factors of number: \",sumofFactors(12))\nprint(\"sum of factors of number: \",sumofFactors(18))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        if n%i==0:\n            sum = sum+i\n        i = i + 1\n    return sum\n    \ndef printFactors(n):\n    '''\n    Write a python function to print all the factors of a number.\n    '''\n    i = 1\n    while i <= n:\n        if n%i==0:\n            print(i,end=\" \")\n        i = i + 1\n    print()\n    \ndef printFactors2(n):\n    '''\n    Write a python function to print all the factors of a number in decreasing order.\n    '''\n    i = n\n    while i >= 1:\n        if n%i==0:\n            print(i,end=\" \")\n        i = i - 1\n    print()\n    \ndef printFactors3(n):\n    '''\n    Write a python function to print all the factors of a number in increasing order.\n    '''\n    i = 1\n    while i <= n:\n        if n%i==0:\n            print(i,end=\" \")\n        i = i + 1\n    print()\n    \ndef printFactors4(n):\n    '''\n    Write a python function to print all the factors of a number in decreasing order.\n    '''\n    i = n\n    while i >= 1:\n        if n%i==0:\n            print(i,end=\" \")\n        i = i - 1\n    print()\n    \ndef printFactors5(n):\n    '''\n    Write a python function to print all the factors of a number in increasing order.\n    '''\n    i = 1\n    while i <= n:\n        if n%i==0:\n            print(i,end=\" \")\n        i = i + 1\n    print()\n    \ndef printFactors6(n):\n    '''\n    Write a python function to print all the factors of a number in decreasing order.\n    '''\n    i = 1\n    while i <= n:\n        if n%i==0:\n            print(i,end=\" \")\n        i = i + 1\n    print()\n    \ndef printFactors7(n):\n    '''\n    Write a python function to print all the factors of a number in increasing order.\n    '''\n    i = 1\n    while i <= n:\n        if n%i==0:\n            print(i,end=\" \")\n        i = i + 1\n    print()\n    \ndef sumOfDigits(n):\n    '''\n    Write a python function to sum of digits in a number.\n    '''\n    sum = 0\n    while n>0:\n        sum = sum + (n%10)\n        n = n//10\n    return sum\n    \ndef isPrime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result=0\n    while(n!=0):\n        i=int(math.sqrt(n))\n        if(i**2==n):\n            result+=i\n        n=n-i\n    return result\nprint(sumofFactors(1))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors_sum = 0\n    for i in range(1,n+1):\n        if(n%i==0):\n            factors_sum += i\n    return factors_sum\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_list = re.findall(r'\\b\\S*z\\b\\S*', text)\n    return word_list\nprint(text_match_wordz('the quick brown fox jumped over the lazy dog.'))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile(r'z')\n    match = reg.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    new_text = re.findall('z.+z', text)\n    return new_text\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    match = re.findall(r\"z\", text)\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.search('z', text)\n    if word:\n        print(\"The word contains 'z' in it's fourth place.\")\n    else:\n        print(\"The word does not contain 'z' in it's fourth place.\")\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #The idea is to match the word containing 'z' in the following format:\n    #\"zzzzzzzzzzzzz\"\n    #The first letter will be matched from the first letter to the last letter.\n    #The last letter will be matched from the second to last letter.\n    #The rest of the letters will be matched from the next letter to the end of the string.\n    #Check if you can use regex to solve this problem.\n    #Hint: Use.split() method to split the text.\n    #Then use '|' to combine the regex, if any part of the regex matches then the string will match.\n    #Here are some examples of use cases:\n    #\"zzzzzzzzzzzzz\"\n    #\"zzzzzzzzzzzzz\"\n    #\"zzzzzzzzzzzz\"\n    #\"zzzzzzzzzzzz\"\n    #\"zzzzzzzzzz\"\n    #\"zzzzzzzzz\"\n    #\"zzzzzzzz\"\n    #\"zzzzzz\"\n    #\"zz\"\n    #\"zzz\"\n    #\"zzzz\"\n    #\"zzzzz\"\n    #\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    res = re.findall(pattern, text)\n    return res\n    \ndef text_match_pattern(text):\n    '''\n    Write a function that matches the pattern a+z*\n    '''\n    pattern = r'a+z*'\n    res = re.findall(pattern, text)\n    return res\n    \ndef text_match_nongreedy(text):\n    '''\n    Write a function that matches the pattern a+z+\n    '''\n    pattern = r'a+z+'\n    res = re.findall(pattern, text)\n    return res\n    \ndef text_match_greedy(text):\n    '''\n    Write a function that matches the pattern a+z+\n    '''\n    pattern = r'a+z+?'\n    res = re.findall(pattern, text)\n    return res\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    res = re.findall('\\w+z',text)\n    return res\nprint(text_match_wordz('His password is xyz'))\nprint(text_match_wordz('wxyz5678'))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall('\\w*z\\w*', text)\n    \ndef text_match_wordz_2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'\\bz\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z',text)\nprint(text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(text_match_wordz('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2<=12) and (monthnum2>0):\n        if monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_year(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum3<=12) and (monthnum3>0):\n        if monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb(monthnum4):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum4<=12) and (monthnum4>0):\n        if monthnum4==4 or monthnum4==6 or monthnum4==9 or monthnum4==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if(monthnum5):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum5<=12) and (monthnum5>0):\n        if monthnum5==4 or monthnum5==6 or monthnum5==9 or monthnum5==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif(monthnum6):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum6<=12) and (monthnum6>0):\n        if monthnum6==4 or monthnum6==6 or monthnum6==9 or monthnum6==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_else(monthnum7):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum7<=12) and (monthnum7>0):\n        if monthnum7==4 or monthnum7==6 or monthnum7==9 or monthnum7==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else(monthnum8):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum8<=12) and (monthnum8>0):\n        if monthnum8==4 or monthnum8==6 or monthnum8==9 or monthnum8==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if(monthnum9):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum9<=12) and (monthnum9>0):\n        if monthnum9==4 or monthnum9==6 or monthnum9==9 or monthnum9==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if_elif(monthnum10):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum10<=12) and (monthnum10>0):\n        if monthnum10==4 or monthnum10==6 or monthnum10==9 or monthnum10==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if_elif_else(monthnum11):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum11<=12) and (monthnum11>0):\n        if monthnum11==4 or monthnum11==6 or monthnum11==9 or monthnum11==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if_elif_else_if(monthnum12):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum12<=12) and (monthnum12>0):\n        if monthnum12==4 or monthnum12==6 or monthnum12==9 or monthnum12==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if_elif_else_if_elif(monthnum13):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum13<=12) and (monthnum13>0):\n        if monthnum13==4 or monthnum13==6 or monthnum13==9 or monthnum13==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if_elif_else_if_elif_elif(monthnum14):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum14<=12) and (monthnum14>0):\n        if monthnum14==4 or monthnum14==6 or monthnum14==9 or monthnum14==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if_elif_else_if_elif_elif_elif_elif(monthnum15):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum15<=12) and (monthnum15>0):\n        if monthnum15==4 or monthnum15==6 or monthnum15==9 or monthnum15==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if_elif_else_if_elif_elif_elif_elif_elif_elif_elif(monthnum16):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum16<=12) and (monthnum16>0):\n        if monthnum16==4 or monthnum16==6 or monthnum16==9 or monthnum16==11:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Enter a valid month number between 1 to 12\")\ndef check_monthnumb_if_elif_else_if_elif_else_if_elif_elif_elif_elif_elif_elif_elif_elif_elif(monthnum17):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum17<=12) and (monthnum17>0)"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 in range(2, 13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(f'{monthnum2} has 31 days')\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(f'{monthnum2} has 30 days')\n    else:\n        print(f'{monthnum2} has 29 days')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        print('It contains 31 days')\n    elif monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        print('It contains 30 days')\n    else:\n        print('It contains 28 days')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_numb = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    return month_numb.get(monthnum2, 0) > 0\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check whether the month number is within the range or not\n    if monthnum2 in range(1,13):\n        # check whether the month number is 31 or not\n        if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,3):\n        return False\n    elif monthnum2 in range(3,6):\n        return True\n    elif monthnum2 in range(6,9):\n        return False\n    elif monthnum2 in range(9,12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # import datetime\n    \n    # monthnum2 = int(input(\"Enter the month number: \"))\n    # if (monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12):\n    #     if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10:\n    #         if monthnum2 == 1:\n    #             print(\"31 days\")\n    #         elif monthnum2 == 3:\n    #             print(\"31 days\")\n    #         elif monthnum2 == 5:\n    #             print(\"31 days\")\n    #         elif monthnum2 == 7:\n    #             print(\"31 days\")\n    #         elif monthnum2 == 8:\n    #             print(\"31 days\")\n    #         elif monthnum2 == 10:\n    #             print(\"31 days\")\n    #         elif monthnum2 == 12:\n    #             print(\"31 days\")\n    #     else:\n    #         print(\"31 days\")\n    # elif (monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11):\n    #     if monthnum2 == 4:\n    #         print(\"30 days\")\n    #     elif monthnum2 == 6:\n    #         print(\"30 days\")\n    #     elif monthnum2 == 9:\n    #         print(\"30 days\")\n    #     elif monthnum2 == 11:\n    #         print(\"30 days\")\n    # else:\n    #     print(\"30 days\")\n    \n    # import datetime\n    \n    # monthnum2 = int(input(\"Enter the month number: \"))\n    # if monthnum2 == 1:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 2:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"28 days\")\n    #     else:\n    #         print(\"29 days\")\n    # elif monthnum2 == 3:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 4:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 5:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 6:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"30 days\")\n    #     else:\n    #         print(\"31 days\")\n    # elif monthnum2 == 7:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 8:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 9:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 10:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 11:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # elif monthnum2 == 12:\n    #     if datetime.date.today().month == monthnum2:\n    #         print(\"31 days\")\n    #     else:\n    #         print(\"30 days\")\n    # else:\n    #     print(\"31 days\")\n    \n    # import datetime\n    \n    # monthnum2 = int(input(\"Enter the month number: \"))\n    # if monthnum2 == 1:\n    #     if datetime.date.today().month == monthnum2:\n    #         if datetime.date.today().day == 1:\n    #             print(\"31 days\")\n    #         else:\n    #             print(\"30 days\")\n    #     else:\n    #         if datetime.date.today().day == 1:\n    #             print(\"31 days\")\n    #         else:\n    #             print(\"30 days\")\n    # else:\n    #     if monthnum2 == 3:\n    #         if datetime.date.today().month == monthnum2:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #         else:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #     elif monthnum2 == 5:\n    #         if datetime.date.today().month == monthnum2:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #         else:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #     elif monthnum2 == 7:\n    #         if datetime.date.today().month == monthnum2:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #         else:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #     elif monthnum2 == 8:\n    #         if datetime.date.today().month == monthnum2:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #         else:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #     elif monthnum2 == 10:\n    #         if datetime.date.today().month == monthnum2:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #         else:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #             else:\n    #                 print(\"30 days\")\n    #     elif monthnum2 == 12:\n    #         if datetime.date.today().month == monthnum2:\n    #             if datetime.date.today().day == 1:\n    #                 print(\"31 days\")\n    #         "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    l = []\n    for i in stringlist:\n        l.append(i[::-1])\n    return l\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for x in stringlist:\n        reverse_list.append(x[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for index in stringlist:\n        new_list.append(index[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in stringlist:\n        new_list.append(i[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for x in range(len(stringlist)-1, -1, -1):\n        stringlist[x] = stringlist[x][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #print(stringlist)\n    #print(stringlist[::-1])\n    #print(stringlist[0][::-1])\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    revlist = []\n    for i in stringlist:\n        revlist.append(i[::-1])\n    return revlist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # lst = [1, 2, 1, 2, 1, 2]\n    min_length = len(lst)\n    min_index = 0\n    for i in range(1, len(lst)):\n        if min_length > len(lst[:i]):\n            min_length = len(lst[:i])\n            min_index = i\n    return lst[:min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(min):\n            min = lst[i]\n    return min\n    # code here\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Python program to find the sublist having minimum length\n    # return (1) minimum value, (2) position of the min value\n    min = 0\n    minlen = len(lst)\n    for i in range(len(lst)):\n        count = 0\n        for j in range(i,len(lst)):\n            if(len(lst[i:j+1])<minlen):\n                minlen = len(lst[i:j+1])\n                min = i\n                count += 1\n        if(count == 0):\n            break\n    return (lst[min:min+minlen],min)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i])<min:\n            min=len(lst[i])\n            min_ind=i\n    return min_ind\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 99999999\n    min_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length=9999999\n    min_sub=[]\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i])<=min_length:\n                min_length=len(lst[i])\n                min_sub=lst[i]\n    return min_sub\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # code here \n    for i in range(len(lst)):\n        if lst[i] == min(lst):\n            return i\n            break\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #defining function\n    def minlength(lst): \n        #1st condiiton\n        if lst==[]:\n            return 1\n        #2nd condition\n        if lst[0]<lst[1]:\n            return 1\n        #3rd condition\n        else:\n            return minlength(lst[1:])\n    #returning minimum length sublist\n    return minlength(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    mini = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < len(lst[mini]):\n            mini = i\n    return mini\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    index = 0\n    for i in range(n):\n        if lst[i] < lst[index]:\n            index = i\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if type(l) is not int:\n        raise TypeError('Input must be integer')\n    if type(b) is not int:\n        raise TypeError('Input must be integer')\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Non-Pythonic code using regex\n    # return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]\", \"\", str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            return str1[:i].lower() + str1[i+1:]\n    return str1\n    \nprint(remove_uppercase('THIS IS A TEST'))\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]+\\b', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=re.sub(r'[A-Z]', '',str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]+\", \"\", str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    list_str = re.split('\\W+', str1)\n    for i in range(len(list_str)):\n        if i < len(list_str)-1:\n            if list_str[i] == list_str[i+1][0]:\n                list_str[i] = list_str[i][0].upper() + list_str[i][1:]\n    return \"\".join(list_str)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    temp = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            temp.append(lst[i][j])\n    return temp\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst_elem = []\n    for i in lst:\n        lst_elem.append(i[0])\n    return lst_elem \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    output = []\n    for i in lst:\n        output.append(i[0])\n    return output\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0],lst))\n    \n    \ndef Filter(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(filter(lambda x: x[0]>10,lst))\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    my_dict = {}\n    for k in range(len(lst)):\n        my_dict[k] = lst[k][0]\n    return my_dict\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(0, len(lst)):\n        lst[i] = lst[i][0]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0] \n    "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # set() function to get unique values.\n    unique_values = set(lst)\n    # getting the first element of each unique value of the list.\n    first_element = {k:v[0] for k,v in groupby(sorted(unique_values))}\n    return list(first_element.values())\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Code here\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][0])\n    return new_lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda lst: lst[0],lst)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str) - len(str.casefold())\n    \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str) - str.count(' ') - str.count('\\n')\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for x in str:\n        if x.isupper():\n            count +=1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    print(f'The number of upper case characters in the given string are: {count}')\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n    list1 = list(set(list1))\n    list1.sort()\n    if len(list1) == 0:\n        return combinations_list\n    combinations_list.append([list1[0]])\n    if len(list1) == 1:\n        return combinations_list\n    for i in range(1,len(list1)):\n        new_list = []\n        for combination in combinations_list:\n            new_list.append(combination + [list1[i]])\n        combinations_list = new_list\n    return combinations_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    #Create new list with all elements of the input list\n    new_list = list1[:]\n    \n    #Replace the element of the new list\n    new_list[0] = 'a'\n    \n    #If the list is equal to the output list, then all elements in the input list are the same\n    if new_list == combinations_list([1,2,3]):\n        print(\"All elements are the same\")\n        \n    #Else, the element of the input list is not the same as the new list. Then no combination is possible\n    else:\n        print(\"No combinations possible\")\n    \n    #Test if the combination is correct\n    test_combination(list1, new_list)\n    \ndef test_combination(list1, new_list):\n    '''\n    Test if the combination is correct.\n    '''\n    \n    if list1 == new_list:\n        print(\"The combination is correct\")\n    else:\n        print(\"The combination is wrong\")\n        \ndef combinations_recur(list1, start, end):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    #Create new list with all elements of the input list\n    new_list = list1[:]\n    \n    #Replace the element of the new list\n    new_list[start] = 'a'\n    \n    #If the list is equal to the output list, then all elements in the input list are the same\n    if start == end - 1:\n        print(\"All elements are the same\")\n        \n    #Else, the element of the input list is not the same as the new list. Then no combination is possible\n    else:\n        print(\"No combinations possible\")\n    \n    #Test if the combination is correct\n    test_combination(list1, new_list)\n    \n    #Call the function recursively with the previous combination and the start and end index\n    if start < (end - 1):\n        combinations_recur(list1, start + 1, end)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            comb_list = list1[i:j+1]\n            if comb_list not in new_list:\n                new_list.append(comb_list)\n    return new_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    if n == 0:\n        return result\n    if n == 1:\n        return [[list1[0]]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    result=[]\n    for i in itertools.combinations(list1,3):\n        result.append(i)\n    return result\n    # write your code here\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            print(list1[i],list1[j])\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            for k in range(0,len(list1)):\n                for l in range(0,len(list1)):\n                    for m in range(0,len(list1)):\n                        for n in range(0,len(list1)):\n                            print(list1[i],list1[j],list1[k],list1[l],list1[m],list1[n])\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    elif len(list1) == 2:\n        return [[list1[0]], [list1[1]]]\n    else:\n        comb = []\n        for i in range(0, len(list1)):\n            c = combinations_list(list1[i+1:])\n            for j in c:\n                comb.append([list1[i]]+j)\n        return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        combinations = []\n        for i in range(len(list1)):\n            for combination in combinations_list(list1[i + 1:]):\n                combination.insert(0, list1[i])\n                combinations.append(combination)\n        return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return\n    dp = [0 for _ in range(len(arr))]\n    dp[0] = arr[0]\n    res = dp[0]\n    for i in range(1, len(arr)):\n        dp[i] = max(arr[i], arr[i] * dp[i-1], dp[i-2] * arr[i])\n        res = max(res, dp[i])\n    return res\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sub = -float('inf')\n    max_pos = -1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            if max_sub < arr[i]:\n                max_sub = arr[i]\n                max_pos = i\n    if max_pos == -1:\n        return 0\n    else:\n        return max_sub * max_pos\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            curr_prod = arr[i]*arr[j]\n            max_prod = max(max_prod, curr_prod)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Create a list of all the subarray products (product of all numbers in the list)\n    max_product = 0\n    curr_product = 1\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    current_max = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], arr[i] * current_max)\n        max_product = max(current_max, max_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        max_so_far = max(max_so_far * arr[i], arr[i])\n        min_so_far = min(min_so_far * arr[i], arr[i])\n        max_product = max(max_so_far, max_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_prod = float('-inf')\n    min_prod = float('inf')\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    maximum_product = -999999999\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        if product > maximum_product:\n            maximum_product = product\n        product = max(product, 1)\n    product = 1\n    for i in range(len(arr) - 1, -1, -1):\n        product *= arr[i]\n        if product > maximum_product:\n            maximum_product = product\n        product = max(product, 1)\n    return maximum_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -float(\"inf\")\n    max_start = 0\n    max_end = 0\n    for i in range(0, len(arr)):\n        current = arr[i]\n        if current > 0:\n            max_product = max(current * arr[i + 1], max_product)\n            max_end = i + 1\n    return max_product, max_start, max_end\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_p = 0\n    max_start = 0\n    max_end = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (arr[j] > arr[i]):\n                p = arr[i]*arr[j]\n                if p > max_p:\n                    max_p = p\n                    max_start = i\n                    max_end = j\n    print('Max Subarray Product:', max_p)\n    print('Max Subarray Start:', max_start)\n    print('Max Subarray End:', max_end)\n    return max_p, max_start, max_end\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    if len(dict) == 1:\n        if list(dict.values())[0] == n:\n            return True\n        else:\n            return False\n    if len(dict) > 1:\n        if list(dict.values())[0] == n:\n            return True\n        if n == list(dict.values())[-1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict) == len(set(dict.values()))\n    # return len(dict) == len(set(dict.values())) and (len(dict.values()) == 1)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if len(dict[key]) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    assert isinstance(dict, dict), 'Dict is not dict type'\n    assert isinstance(n, int), 'n is not integer type'\n    if len(dict) == 1:\n        return True\n    else:\n        first = next(iter(dict))\n        second = next(iter(dict))\n        if first == second:\n            return check_value(dict[first], n - 1)\n        else:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if n!= val:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict.values()) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k,v in dict.items():\n        if v!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value!= None:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys = list(dict1.keys())\n    vals = list(dict1.values())\n    empty = []\n    for i,j in zip(keys, vals):\n        if j == None or j == \"\":\n            empty.append(i)\n    for k in empty:\n        if k in dict1:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == '' or dict1[key] =='':\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    drop = []\n    for key in dict1:\n        if not dict1[key]:\n            drop.append(key)\n    for i in drop:\n        del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in dict1.items():\n        if value == '':\n            dict1.pop(key)\n        else:\n            pass\n    return dict1\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2={}\n    for key,value in dict1.items():\n        if value:\n            dict2[key]=value\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in range(len(dict1)):\n        if dict1[i] == '':\n            dict1.pop(i)\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if len(dict1[key]) == 0:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #1\n    #return {key:value for key,value in dict1.items() if value}\n    #2\n    return dict1.copy()\n    #3\n    return {key:value for key,value in dict1.items() if value}\n    #4\n    return {key:value for key,value in dict1.items() if value} if value else {}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n=len(arr)\n    max_prod=0\n    curr_prod=0\n    \n    for i in range(n):\n        curr_prod=arr[i]*arr[i+1]*arr[i+2]\n        if curr_prod > max_prod:\n            max_prod=curr_prod\n    return max_prod\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i], arr[i]*max_product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_prod = 1\n    curr_prod = 1\n    for i in range(len(arr)):\n        curr_prod = curr_prod * arr[i]\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n        if curr_prod < 0:\n            curr_prod = 1\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n=len(arr)\n    max1=arr[0]\n    max2=arr[1]\n    for i in range(2,n):\n        max1=max(max1,arr[i])\n        max2=max(max2,arr[i],max1*arr[i])\n    return max2\n    \ndef max_product_dp(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n=len(arr)\n    dp_max=[[0 for i in range(n)] for j in range(n)]\n    #initialization of the dp matrix\n    for i in range(n):\n        dp_max[i][i]=arr[i]\n    for i in range(n-2,-1,-1):\n        for j in range(i+1,n):\n            dp_max[i][j]=max(arr[i]*dp_max[i+1][j],arr[i]*dp_max[i+1][j],dp_max[i][j])\n    return dp_max[0][n-1]\n    \ndef count_substring(string, sub_string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1] == sub_string:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = 0\n    curr_max = 0\n    for i in range(0,len(arr)):\n        if arr[i] == 0:\n            continue\n        elif curr_max <= 0:\n            curr_max = arr[i]\n        else:\n            curr_max *= arr[i]\n        if curr_max > max_so_far:\n            max_so_far = curr_max\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    def helper(arr, n, tmp):\n        \n        if len(tmp) == n:\n            return tmp\n        \n        max_product = 0\n        \n        for i in range(len(arr)):\n            tmp_arr = tmp.copy()\n            tmp_arr.append(arr[i])\n            \n            if i + 1 < len(arr):\n                max_product = max(max_product, arr[i] * helper(arr, n, tmp_arr))\n            \n        return max_product\n    \n    return helper(arr, len(arr), [])\n    \n    \n    \n    '''\n    Write a function to return the max product subarray.\n    Note: Find the max subarray\n    '''\n    \n    def max_product(arr):\n        '''\n        Write a function to return the max product subarray.\n        Note: Find the max subarray\n        '''\n        \n        max_product = 0\n        start = 0\n        \n        for i in range(len(arr)):\n            \n            if arr[start] < arr[i]:\n                start += 1\n                \n            elif arr[start] > arr[i]:\n                max_product = max(max_product, arr[start] * arr[i])\n                \n        return max_product\n    \n    \n    '''\n    Write a function that will return all possible subsets of a given set.\n    Example: if arr = {1, 2, 3}, then the output will be [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n    '''\n    \n    def get_subsets(arr):\n        '''\n        Write a function that will return all possible subsets of a given set.\n        Example: if arr = {1, 2, 3}, then the output will be [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n        '''\n        \n        def helper(arr, n, tmp):\n            \n            if len(tmp) == n:\n                arr.append(tmp)\n                return\n            \n            for i in range(len(arr)):\n                if i + 1 < len(arr) and arr[i] < arr[i + 1]:\n                    tmp_arr = tmp.copy()\n                    tmp_arr.append(arr[i + 1])\n                    helper(arr, n, tmp_arr)\n                \n                elif i + 1 < len(arr) and arr[i] > arr[i + 1]:\n                    tmp_arr = tmp.copy()\n                    tmp_arr.append(arr[i])\n                    helper(arr, n, tmp_arr)\n        \n        arr = []\n        \n        helper(arr, len(arr), [])\n        \n        return arr\n    \n    \n    \n    \n    def get_subsets(arr):\n        '''\n        Write a function that will return all possible subsets of a given set.\n        Example: if arr = {1, 2, 3}, then the output will be [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n        '''\n        \n        def helper(arr, n, tmp):\n            \n            if len(tmp) == n:\n                arr.append(tmp)\n                return\n            \n            for i in range(len(arr)):\n                if i + 1 < len(arr) and arr[i] < arr[i + 1]:\n                    tmp_arr = tmp.copy()\n                    tmp_arr.append(arr[i + 1])\n                    helper(arr, n, tmp_arr)\n                \n                elif i + 1 < len(arr) and arr[i] > arr[i + 1]:\n                    tmp_arr = tmp.copy()\n                    tmp_arr.append(arr[i])\n                    helper(arr, n, tmp_arr)\n        \n        arr = []\n        \n        helper(arr, len(arr), [])\n        \n        return arr\n    \n    \n    def get_subsets(arr):\n        '''\n        Write a function that will return all possible subsets of a given set.\n        Example: if arr = {1, 2, 3}, then the output will be [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n        '''\n        \n        def helper(arr, n, tmp):\n            \n            if len(tmp) == n:\n                arr.append(tmp)\n                return\n            \n            for i in range(len(arr)):\n                if i + 1 < len(arr) and arr[i] < arr[i + 1]:\n                    tmp_arr = tmp.copy()\n                    tmp_arr.append(arr[i + 1])\n                    helper(arr, n, tmp_arr)\n                \n                elif i + 1 < len(arr) and arr[i] > arr[i + 1]:\n                    tmp_arr = tmp.copy()\n                    tmp_arr.append(arr[i])\n                    helper(arr, n, tmp_arr)\n        \n        arr = []\n        \n        helper(arr, len(arr), [])\n        \n        return arr\n    \n    \n    '''\n    Write a function that will return the sum of each element in an array.\n    Example: if arr = {1, 2, 3}, then the output will be 6\n    '''\n    \n    def sum_arr(arr):\n        '''\n        Write a function that will return the sum of each element in an array.\n        Example: if arr = {1, 2, 3}, then the output will be 6\n        '''\n        \n        sum_arr = 0\n        \n        for i in range(len(arr)):\n            sum_arr += arr[i]\n            \n        return sum_arr\n    \n    \n    '''\n    Write a function that returns the sum of each element in an array.\n    Example: if arr = {1, 2, 3}, then the output will be 6\n    '''\n    \n    def sum_arr(arr):\n        '''\n        Write a function that returns the sum of each element in an array.\n        Example: if arr = {1, 2, 3}, then the output will be 6\n        '''\n        \n        return sum(arr)\n    \n    \n    '''\n    Write a function that returns the product of each element in an array.\n    Example: if arr = {1, 2, 3}, then the output will be 6\n    '''\n    \n    def product_arr(arr):\n        '''\n        Write a function that returns the product of each element in an array.\n        Example: if arr = {1, 2, 3}, then the output will be 6\n        '''\n        \n        return reduce(lambda x, y: x * y, arr)\n    \n    \n    '''\n    Write a function that returns the product of each element in an array.\n    Example: if arr = {1, 2, 3}, then the output will be 6\n    '''\n    \n    def product_arr(arr):\n        '''\n        Write a function that returns the product of each element in an array.\n        Example: if arr = {1, 2, 3}, then the output will be 6\n        '''\n        \n        return reduce(lambda x, y: x * y, arr)\n    \n    \n    '''\n    Write a function that takes an array, and returns the product of all the elements.\n    Example: if arr = {1, 2, 3}, then the output will be 6\n    '''\n    \n    def product_arr(arr):\n        '''\n        Write a function that takes an array, and returns the product of all the elements.\n        Example: if arr = {1, 2, 3}, then the output will be 6\n        '''\n        \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_so_far = -999999999\n    n = len(arr)\n    max_product_ending_here = -999999999\n    for i in range(n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_ending_here, max_product_so_far)\n    return max_product_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #O(n)\n    max_product = arr[0]\n    curr_max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] * curr_max < arr[i]:\n            curr_max = arr[i]\n            max_product = curr_max\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n % 2 == 0:\n        print(0)\n        return\n    n1 = int(n/2)\n    x = test_tup[:n1]\n    y = test_tup[n1:]\n    sum = 0\n    for i in range(n1):\n        sum += x[i]\n        sum += y[i]\n    print(sum)\n    return\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = (0,0)\n    for i in range(len(test_tup)-1):\n        sum_tup = (test_tup[i] + test_tup[i+1],sum_tup[1])\n    sum_tup = (test_tup[-1] + sum_tup[0],sum_tup[1])\n    return sum_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    nums = test_tup\n    sum = 0\n    for i in range(len(nums)):\n        if i == 0:\n            sum += nums[i]\n        elif i == (len(nums) - 1):\n            sum += nums[i]\n        else:\n            sum += nums[i]\n            \n    return sum\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    for i in range(len(tup)-1):\n        x = tup[i+1] - tup[i]\n        y = tup[i]\n        tup = tup[:i+1] + (x,) + tup[i+1:]\n    return tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #TODO: Write your solution here\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not test_tup:\n        return\n    total = 0\n    for i in range(len(test_tup) - 1):\n        total += test_tup[i] + test_tup[i + 1]\n    return total\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n_list = []\n    for index, each in enumerate(test_tup):\n        if index == len(test_tup)-1:\n            n_list.append(test_tup[index] + test_tup[0])\n        else:\n            n_list.append(test_tup[index] + test_tup[index+1])\n    return tuple(n_list)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    #Initialize result\n    result = []\n    \n    #Initialize left variable\n    left = []\n    \n    #Initialize right variable\n    right = []\n    \n    #For each element in the tuple\n    for i in range(0, len(test_tup)):\n        \n        #For each element in the tuple\n        for j in range(i+1, len(test_tup)):\n            \n            #Append the elements to the left variable\n            left.append(test_tup[i])\n            \n            #Append the elements to the right variable\n            right.append(test_tup[j])\n            \n            #Add the pairwise elements to the result list\n            result.append(left + right)\n    \n    #Return the resulting list\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return ()\n    elif len(test_tup) == 1:\n        return (test_tup[0],)\n    else:\n        return (test_tup[0]+test_tup[1],) + add_pairwise(test_tup[2:])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a=list(test_tup)\n    a.append(a[0]+a[1])\n    a.append(a[0]+a[2])\n    a.append(a[1]+a[2])\n    return tuple(a)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder_list = []\n    total = 1\n    # find remainder of n\n    remainder_of_n = n\n    for i in range(n):\n        if remainder_of_n % 2 == 0:\n            remainder_list.append(int(remainder_of_n/2))\n        else:\n            remainder_list.append((n+1)//2)\n        remainder_of_n = remainder_of_n // 2\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 0\n    for i in range(0,len(arr)):\n        res = res + (arr[i] * arr[i])\n    return res % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(n):\n        res = res * arr[i]\n    return res % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Get product of each number in array \n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product%n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # TODO: Write your solution here\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod = prod * arr[i] % n\n    return prod\n    \nif __name__ == \"__main__\":\n    arr = [2,3,4]\n    n = 100\n    print(find_remainder(arr, n))"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l:\n        count += 1\n        if i + 1!= l[count - 1]:\n            print(\"No consecutive numbers found\")\n            return False\n        else:\n            continue\n    print(\"List contains consecutive numbers\")\n    return True\n            \n    \n    \ndef check_string_start_with(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which starts with a given string.\n    '''\n    for i in l:\n        if i.startswith(s):\n            print(\"The list contains strings which starts with the given string\")\n            return True\n        else:\n            continue\n    print(\"The list does not contains strings which starts with the given string\")\n    return False\n    \n    \ndef check_string_start_with_v2(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which starts with a given string.\n    '''\n    for i in l:\n        if i.startswith(s):\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_end_with(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which ends with a given string.\n    '''\n    for i in l:\n        if i.endswith(s):\n            print(\"The list contains strings which ends with the given string\")\n            return True\n        else:\n            continue\n    print(\"The list does not contains strings which ends with the given string\")\n    return False\n    \n    \n    \ndef check_string_end_with_v2(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which ends with a given string.\n    '''\n    for i in l:\n        if i.endswith(s):\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_between_2(l, s1, s2):\n    '''\n    Write a python function to check whether the given list contains strings which are between a given string.\n    '''\n    for i in l:\n        if s1 in i and s2 in i:\n            print(\"The list contains strings which are between the given strings\")\n            return True\n        else:\n            continue\n    print(\"The list does not contains strings which are between the given strings\")\n    return False\n    \n    \n    \ndef check_string_between_2_v2(l, s1, s2):\n    '''\n    Write a python function to check whether the given list contains strings which are between a given string.\n    '''\n    for i in l:\n        if s1 in i and s2 in i:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_not_contain(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which does not contain a given string.\n    '''\n    for i in l:\n        if s not in i:\n            print(\"The list does not contains strings which does not contain the given string\")\n            return True\n        else:\n            continue\n    print(\"The list contains strings which does not contain the given string\")\n    return False\n    \n    \n    \ndef check_string_not_contain_v2(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which does not contain a given string.\n    '''\n    for i in l:\n        if s not in i:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_not_contain_v3(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which does not contain a given string.\n    '''\n    for i in l:\n        if s in i:\n            return False\n        else:\n            continue\n    return True\n    \n    \n    \ndef check_string_not_contain_v4(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which does not contain a given string.\n    '''\n    for i in l:\n        if i.find(s) == -1:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_not_contain_v5(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which does not contain a given string.\n    '''\n    for i in l:\n        if s in i:\n            return False\n        else:\n            continue\n    return True\n    \n    \n    \ndef check_string_contain_only_v2(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if len(s)!= len(i) or s.isalpha()!= True:\n            return False\n        else:\n            continue\n    return True\n    \n    \n    \ndef check_string_contain_only_v3(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if len(s) == len(i) and s.isalpha() == True:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_contain_only_v4(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if len(i) == len(s) and s.isalpha() == True:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_contain_only_v5(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if len(i) == len(s) and s.isalpha() == True:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_contain_only_v6(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if i.isalpha() == True:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_contain_only_v7(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if i.isalpha() == True:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_contain_only_v8(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if s in i:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_contain_only_v9(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if s.isalpha() == True:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_contain_only_v10(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if s.isalpha() == True:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef check_string_contain_only_v11(l, s):\n    '''\n    Write a python function to check whether the given list contains strings which contains only a given string.\n    '''\n    for i in l:\n        if s.isalpha() == True:\n            return True\n        els"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    found = False\n    # sorting list \n    l.sort()\n    print(l)\n    # traversing the list \n    for i in range(len(l)-1): \n        # if the element is not adjacent then break \n        if l[i] == l[i+1]: \n            break\n    else: \n        print(\"List has consecutive numbers\") \n        found = True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l)\n    flag = False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            flag = True\n        else:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0:\n        return False\n    else:\n        return all([i+1==l[i+1] for i in range(len(l)-1)])\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = False\n    if len(l) > 0:\n        for i in range(len(l)-1):\n            if l[i+1] == l[i]+1:\n                consecutive = True\n            else:\n                consecutive = False\n                break\n    return consecutive\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    print(\"Original List:\",l)\n    c = []\n    for i in range(0,len(l)-1):\n        if l[i] == l[i+1]:\n            c.append(l[i])\n    print(\"Consecutive List:\",c)\n    if len(c)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #code here\n    #print('[',end='')\n    flag = 0\n    for i in range(len(l)-1):\n        if(l[i]+1!= l[i+1]):\n            flag += 1\n    if(flag == 0):\n        print('yes')\n    else:\n        print('no')\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    result = 1\n    for i in range(0, len(l)):\n        if i!= len(l) - 1:\n            if (l[i] + 1 == l[i + 1]):\n                result = 0\n    return result\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    for i in range(1, len(l)):\n        if l[i] - l[i - 1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Union = {1,2,3,4,5,6}\n    # Intersection = {1,2,3}\n    union = set()\n    intersection = set()\n    for i in test_list1:\n        union.add(i)\n    for j in test_list2:\n        union.add(j)\n    for k in union:\n        if k in test_list2:\n            intersection.add(k)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #tuple intersection\n    final_list = []\n    for ele in test_list1:\n        for i in test_list2:\n            if ele == i:\n                final_list.append(ele)\n    return final_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = []\n    for i in test_list1:\n        if i in test_list2:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) < len(test_list2):\n        return tuple_intersection(test_list2, test_list1)\n    elif len(test_list2) < len(test_list1):\n        return tuple_intersection(test_list1, test_list2)\n    else:\n        x = []\n        for i in range(len(test_list1)):\n            if test_list1[i] == test_list2[i]:\n                x.append(test_list1[i])\n        return tuple(x)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(0,len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection_list.append(test_list1[i])\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    inter = set(test_list1).intersection(set(test_list2))\n    return tuple(inter)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_set = set(test_list1) & set(test_list2)\n    return tuple(test_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = []\n    for a in test_list1:\n        if a in test_list2:\n            intersect.append(a)\n    return intersect\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list_x = []\n    for i in test_list1:\n        if i in test_list2:\n            list_x.append(i)\n    return list_x\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Your code here\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            newstr = newstr + newch\n        else:\n            newstr = newstr + str1[i]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for x in str1:\n        if x == ch:\n            str2 = str2+newch\n        else:\n            str2 = str2+x\n    print(str2)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    a=str1.replace(ch,newch)\n    return a\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for ch in str1:\n        if ch!= ch:\n            newstr = newstr + newch\n        else:\n            newstr = newstr + ch\n    return newstr\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key = lambda kv:(kv[1], kv[0])))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys_list = list(dict1.keys())\n    keys_list.sort(key=dict1.get, reverse=False)\n    return keys_list\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(),key=lambda item: item[1],reverse=True))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_counter = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda kv: kv[1], reverse=True))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key = lambda x: x[1], reverse = True))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    temp_list.sort(key=lambda x:x[1],reverse=True)\n    return temp_list\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,y in dict1.items():\n        temp_list.append((x,y))\n    return dict(sorted(temp_list,key=lambda x:x[1],reverse=True))\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_list = []\n    for x,"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1_1 = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n    print(dict1_1)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key = lambda x: x[1]))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    x = dict1.copy()\n    y = x.keys()\n    y = sorted(y)\n    #for i in range(len(x)):\n    #    x[y[i]] = x.pop(y[i])\n    \n    return x\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return (sum(sorted(nums, reverse=True))+sum(sorted(nums)))\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = -9999999999999999999999\n    smallest = 99999999999999999999999\n    for i in nums:\n        if i > largest:\n            largest = i\n    for i in nums:\n        if i < smallest:\n            smallest = i\n    return largest + smallest\n    \ndef min_max(nums):\n    '''\n    Write a python function to find the min and max value in an array.\n    '''\n    nums.sort()\n    return nums[0], nums[-1]\n    \ndef odd_even(nums):\n    '''\n    Write a python function to count the number of odd and even number in a given array.\n    '''\n    count_odd = 0\n    count_even = 0\n    for i in nums:\n        if i % 2 == 1:\n            count_odd += 1\n        else:\n            count_even += 1\n    return count_odd, count_even\n    \ndef reverse(nums):\n    '''\n    Write a python function to reverse the array in place.\n    '''\n    start = 0\n    end = len(nums)-1\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums\n    \ndef arr_sort(nums):\n    '''\n    Write a python function to sort the array in place.\n    '''\n    for i in range(len(nums) - 1):\n        j = i + 1\n        while j < len(nums):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            j += 1\n    return nums\n    \ndef twosum(nums, target):\n    '''\n    Write a python function to find if there exist two numbers that add up to a target value.\n    '''\n    seen = {}\n    for i in range(len(nums)):\n        if nums[i] not in seen:\n            seen[target - nums[i]] = i\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Algorithm:\n    # 1) We will use Binary Search to find the smallest number in the array.\n    # 2) Then we will check the largest number to see if it is the biggest in the array.\n    # 3) If the largest number is not the biggest in the array, we can simply sum the two numbers.\n    # 4) If the largest number is the biggest, we will recursively call the function again to get the sum of the smallest number.\n    # 5) Once the function is finished, we return the sum.\n    \n    # Base Case:\n    # 1) If there are no numbers, we return 0.\n    # 2) If there is only one number, we return that number.\n    \n    # Recursive Case:\n    # 1) If there are numbers, we will check if the number is the biggest or not.\n    # 2) If it is the biggest number, we will call the function again with the smalles number.\n    # 3) If it is not the biggest number, we will recursively call the function again with the smalles number.\n    \n    # Base Case:\n    # 1) If there are no numbers, we return 0.\n    # 2) If there is only one number, we return that number.\n    \n    # Recursive Case:\n    # 1) If there are numbers, we will check if the number is the biggest or not.\n    # 2) If it is the biggest number, we will call the function again with the smalles number.\n    # 3) If it is not the biggest number, we will recursively call the function again with the smalles number.\n    \n    \n    # Time Complexity:\n    # 1) The time complexity of the function is O(n) because we are iterating through all the numbers in the array.\n    # 2) The time complexity of the function is O(logn) because we are using Binary Search.\n    \n    # Space Complexity:\n    # 1) The space complexity is O(1) because we are not using any additional space.\n    \n    \n    def binary_search(array, target):\n        if len(array) == 0:\n            return 0\n        \n        low = 0\n        high = len(array) - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if array[mid] == target:\n                return mid\n            \n            if array[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return mid\n    \n    \n    def big_sum(nums):\n        smalles = nums[0]\n        biggest = nums[0]\n        \n        for i in range(1, len(nums)):\n            smalles = min(smalles, nums[i])\n            biggest = max(biggest, nums[i])\n        \n        return biggest + smalles\n    \n    \n    # Test Cases\n    # arr = [10, 20, 30]\n    # expected = 50\n    # print(\"Pass\" if (50 == big_sum(arr)) else \"Fail\")\n    \n    # arr = []\n    # expected = 0\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    # arr = [1]\n    # expected = 1\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    # arr = [1, 2]\n    # expected = 3\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    # arr = [1, 2, 3]\n    # expected = 6\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    # arr = [1, 2, 3, 4]\n    # expected = 7\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-100, -10, 0, 3, 7, 2, 1]\n    # expected = 8\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    # arr = [-100, -10, 0, 3, 7, 2, 1, 5, 4]\n    # expected = 11\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-100, -10, 0, 3, 7, 2, 1, 5, 4, 2]\n    # expected = 7\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2, 1, 5, 4]\n    # expected = 9\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2, 1, 5, 4]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [0]\n    # expected = 0\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2, 1, 5, 4]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2, 1, 5, 4]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2, 1, 5, 4, 2]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [-10, 0, 3, 7, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2, 1, 5, 4, 2]\n    # expected = 10\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [2, 2, 2, 2]\n    # expected = 0\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [2, 2, 2, 2]\n    # expected = 0\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [2, 2, 2, 2]\n    # expected = 0\n    # print(\"Pass\" if (expected == big_sum(arr)) else \"Fail\")\n    \n    \n    # arr = [2, 2, 2, 2, 2]\n    # expected = 0\n    # print(\"Pass\" if (expecte"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = -float('inf')\n    min_val = float('inf')\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    biggest = 0\n    smallest = 0\n    for num in nums:\n        if num > biggest:\n            biggest = num\n        if num < smallest:\n            smallest = num\n    return biggest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return\n    nums.sort()\n    print(nums)\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest,smallest = None,None\n    for num in nums:\n        if smallest == None or num < smallest:\n            smallest = num\n        if largest == None or num > largest:\n            largest = num\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = max(nums) + min(nums)\n    print(f\"The sum of the largest and smallest element in the given array is {big_sum}\")\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_list = nums.split(\" \")\n    num_list = list(map(int, num_list))\n    biggest = max(num_list)\n    smallest = min(num_list)\n    return (biggest+smallest)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #\n    #\n    # code here\n    #\n    #\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \n    \ndef is_vowel(char):\n    '''\n    Write a python function to check whether a given character is vowel or not.\n    '''\n    if char in 'aeiou':\n        return True\n    else:\n        return False\n        \n    \ndef is_consonant(char):\n    '''\n    Write a python function to check whether a given character is consonant or not.\n    '''\n    if char not in 'aeiou':\n        return True\n    else:\n        return False\n        \n    \ndef is_sentence_palindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if string[::-1] == string:\n        return True\n    else:\n        return False\n        \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if string[::] == string[::-1]:\n        return True\n    else:\n        return False\n        \n        \ndef is_prime(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    for i in range(2,number):\n        if number%i == 0:\n            return False\n    else:\n        return True\n        \n        \ndef is_prime_v1(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    for i in range(2,number):\n        if number%i == 0:\n            return False\n    else:\n        return True\n    \n        \ndef is_prime_v2(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    for i in range(2,number):\n        if number%i == 0:\n            return False\n    else:\n        return True\n        \n    \ndef is_prime_v3(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    for i in range(2,int(number**0.5)+1):\n        if number%i == 0:\n            return False\n    else:\n        return True\n        \n    \ndef is_prime_v4(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    for i in range(2,int(number**0.5)+1):\n        if number%i == 0:\n            return False\n    else:\n        return True\n        \n    \ndef is_prime_v5(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    else:\n        return True\n        \n        \ndef is_prime_v6(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v7(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    else:\n        for i in range(2,number):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n    \ndef is_prime_v8(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v9(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,number):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v10(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v11(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,number):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v12(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v13(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v14(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v15(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v16(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        else:\n            return True\n        \n        \ndef is_prime_v17(number):\n    '''\n    Write a python function to check whether a given integer number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2,int(number**0.5)+1):\n            if number%"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = []\n    for i in string:\n        lower.append(i.lower())\n    return ''.join(lower)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\nprint(is_lower(\"Hello World!!\"))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = string.lower()\n    return lower\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1==\"\":\n        return str1\n    if str1[0].islower():\n        return remove_lowercase(str1[1:])\n    return str1[0].upper() + remove_lowercase(str1[1:])\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1==\"\":\n        return str1\n    if str1[0].isupper():\n        return remove_uppercase(str1[1:])\n    return str1[0].lower() + remove_uppercase(str1[1:])\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    if str1==\"\":\n        return str1\n    if str1[0].isdigit():\n        return remove_digits(str1[1:])\n    return str1[0] + remove_digits(str1[1:])\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\w+'\n    str1 = re.sub(pattern, lambda x: x.group()[1:], str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    count = 0\n    while True:\n        if str1.isalpha():\n            str1 = str1.replace(str1.lower(),'')\n        else:\n            break\n        count += 1\n    return count, str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    x = re.findall(\"[a-z]\",str1)\n    for i in x:\n        str1 = str1.replace(i,\"\")\n    return str1\n    \ndef remove_space(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    x = re.findall(\" \",str1)\n    for i in x:\n        str1 = str1.replace(i,\"\")\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern=re.compile('[a-z]')\n    return re.sub(lowercase_pattern,'',str1)\n    \n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation substrings from a given string.\n    '''\n    punctuation_pattern=re.compile('[^\\w]')\n    return re.sub(punctuation_pattern,'',str1)\n    \n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]+\", \"\", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    a = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return a\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace('a', '')\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n)!= int :\n        raise TypeError\n    return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    a = n\n    i = 0\n    while a!= 0:\n        i += 1\n        a //= 10\n    return i\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # write your python function here\n    first_digit = n % 10\n    return first_digit\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    str_num = str(n)\n    first_Digit = str_num[0]\n    return int(first_Digit)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0 :\n        return n\n    else :\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    ans=0\n    while n:\n        ans = n%10\n        n = n//10\n    return ans\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return(n)%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    return int(n%10)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for item in list:\n        if item%2!= 0:\n            print(item)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = [] \n    for i in range(len(list)): \n        if list[i] % 2!= 0: \n            odd.append(list[i]) \n    return odd \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #your code here\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list:\n        if i%2 ==0:\n            continue\n        else:\n            print(i)\ndef Palindrome(str1):\n    '''\n    Write a python function which takes a string as input and returns a Boolean value.\n    '''\n    str2 = str1[::-1]\n    if str1 == str2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef triplets(lst,k):\n    '''\n    Write a python function which takes a list of integers and returns a list of integers which form the sum of two of the given integers in the list\n    '''\n    for i in lst:\n        for j in lst:\n            if j == i:\n                continue\n            for k in lst:\n                if k == i or k == j:\n                    continue\n                if k == i + j:\n                    print(i, j, k)\n                    break\ndef Ytter(s1):\n    '''\n    Write a python function which takes a string and returns a string with words separated by space and capitalized\n    '''\n    lst = s1.split()\n    for i in lst:\n        print(i.capitalize())\ndef Quiz(n):\n    '''\n    Write a python function which takes a positive integer n as input and returns a list of length n. \n    '''\n    print(range(n))\ndef ChkPwd(pwd):\n    '''\n    Write a python function which takes a password as input and returns a Boolean value\n    '''\n    pwd = input(\"Enter your password\")\n    if len(pwd) < 8:\n        print(\"Your password must be atleast 8 characters\")\n    else:\n        print(\"Your password is valid\")\ndef Rnge(n):\n    '''\n    Write a python function which takes a positive integer as input and prints the numbers from 1 to n in reverse order.\n    '''\n    for i in range(n,0,-1):\n        print(i)\ndef listof(str):\n    '''\n    Write a python function which takes a string as input and returns a list of characters of the string in the same order as they appear in the string\n    '''\n    lst = []\n    for i in str:\n        lst.append(i)\n    print(lst)\ndef Even_odd(lst):\n    '''\n    Write a python function which takes a list of integers as input and returns a tuple of two lists. The first list should contain all the even numbers in the given list and the second list should contain all the odd numbers in the given list.\n    '''\n    even = []\n    odd = []\n    for i in lst:\n        if i%2 ==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(even,odd)\ndef Binary_to_octal(str):\n    '''\n    Write a python function which takes a binary number as input and returns an integer value which is equivalent to the given binary number in octal representation.\n    '''\n    #str = input(\"Enter the binary number\")\n    octal = \"\"\n    i = 0\n    while str[i]!='':\n        octal += str[i]\n        i += 1\n    print(octal)\n    octal = int(octal)\n    return octal\n    \ndef Binary_to_Hexadecimal(str):\n    '''\n    Write a python function which takes a binary number as input and returns an integer value which is equivalent to the given binary number in hexadecimal representation.\n    '''\n    #str = input(\"Enter the binary number\")\n    hexadecimal = \"\"\n    i = 0\n    while str[i]!='':\n        hexadecimal += str[i]\n        i += 1\n    print(hexadecimal)\n    hexadecimal = int(hexadecimal,2)\n    return hexadecimal\ndef Binary_to_Binary(str):\n    '''\n    Write a python function which takes a binary number as input and returns an integer value which is equivalent to the given binary number.\n    '''\n    #str = input(\"Enter the binary number\")\n    binary = \"\"\n    i = 0\n    while str[i]!='':\n        binary += str[i]\n        i += 1\n    print(binary)\n    binary = int(binary,2)\n    return binary\ndef Binary_to_Decimal(str):\n    '''\n    Write a python function which takes a binary number as input and returns an integer value which is equivalent to the given binary number.\n    '''\n    #str = input(\"Enter the binary number\")\n    decimal = 0\n    i = 0\n    while str[i]!='':\n        decimal += int(str[i]) * (2**i)\n        i += 1\n    return decimal\ndef Binary_to_Octal(str):\n    '''\n    Write a python function which takes a binary number as input and returns an integer value which is equivalent to the given binary number.\n    '''\n    #str = input(\"Enter the binary number\")\n    octal = \"\"\n    i = 0\n    while str[i]!='':\n        octal += str[i]\n        i += 1\n    octal = int(octal,2)\n    return octal\ndef Octal_to_Binary(octal):\n    '''\n    Write a python function which takes an octal number as input and returns an integer value which is equivalent to the given octal number.\n    '''\n    #octal = input(\"Enter the octal number\")\n    binary = \"\"\n    i = 0\n    while octal!= 0:\n        binary += str(octal % 8)\n        octal //= 8\n        i += 1\n    binary = binary[::-1]\n    print(binary)\n    return binary\ndef Octal_to_Decimal(octal):\n    '''\n    Write a python function which takes an octal number as input and returns an integer value which is equivalent to the given octal number.\n    '''\n    #octal = input(\"Enter the octal number\")\n    decimal = 0\n    i = 0\n    while octal!= 0:\n        decimal += int(octal % 8) * (8 ** i)\n        octal //= 8\n        i += 1\n    return decimal\ndef Octal_to_Hexadecimal(octal):\n    '''\n    Write a python function which takes an octal number as input and returns an integer value which is equivalent to the given octal number.\n    '''\n    #octal = input(\"Enter the octal number\")\n    hexadecimal = \"\"\n    i = 0\n    while octal!= 0:\n        hexadecimal += str(octal % 16)\n        octal //= 16\n        i += 1\n    print(hexadecimal)\n    return hexadecimal\ndef Octal_to_Binary(octal):\n    '''\n    Write a python function which takes an octal number as input and returns an integer value which is equivalent to the given octal number.\n    '''\n    #octal = input(\"Enter the octal number\")\n    binary = \"\"\n    i = 0\n    while octal!= 0:\n        binary += str(octal % 2)\n        octal //= 2\n        i += 1\n    binary = binary[::-1]\n    print(binary)\n    return binary\ndef Decimal_to_Binary(decimal):\n    '''\n    Write a python function which takes a decimal number as input and returns an integer value which is equivalent to the given decimal number.\n    '''\n    #decimal = input(\"Enter the decimal number\")\n    binary = \"\"\n    i = 0\n    while decimal!= 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n        i += 1\n    binary = binary[::-1]\n    print(binary)\n    return binary\ndef Decimal_to_Octal(decimal):\n    '''\n    Write a python function which takes a decimal number as input and returns an integer value which is equivalent to the given decimal number.\n    '''\n    #decimal = input(\"Enter the decimal number\")\n    octal = \"\"\n    i = 0\n    while decimal!= 0:\n        octal += str(decimal % 8)\n        decimal //= 8\n        i += 1\n    octal = octal[::-1]\n    print(octal)\n    return octal\ndef Decimal_to"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = [] \n    for i in list: \n        if i%2!= 0: \n            new_list.append(i) \n    return new_list \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    lst = [] \n    for i in list: \n        if i % 2!= 0: \n            lst.append(i) \n    return lst\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for x in list:\n        if x%2!=0:\n            odd.append(x)\n    return odd\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(n)]) - sum(range(n))**3\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cube(n):\n        s = 0\n        for i in range(1,n+1):\n            s += i**3\n        return s\n    def sum_of_n(n):\n        s = 0\n        for i in range(1,n+1):\n            s += i\n        return s\n    print(\"sum of cube difference is : \", sum_of_cube(n) - sum_of_n(n))\n    #Code here\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    \n    # list of cubes of first n numbers\n    cubes = []\n    # list of first n numbers\n    nums = []\n    \n    # appending the cubes of first n numbers\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    \n    # appending the first n numbers\n    for j in range(1,n+1):\n        nums.append(j)\n    \n    # sum of cubes\n    for x in cubes:\n        sum_of_cubes += x\n    \n    # sum of first n numbers\n    for y in nums:\n        sum_of_nums += y\n    \n    # difference\n    diff = sum_of_cubes - sum_of_nums\n    \n    # print difference\n    print(diff)\n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers = sum_of_natural_numbers + i\n        sum_of_cubes = sum_of_cubes + i**3\n    return sum_of_natural_numbers - sum_of_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return (n * (n - 1))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_first_n_cubes = 0\n    sum_of_first_n = 0\n    for i in range(1,n+1):\n        sum_of_first_n_cubes += pow(i,3)\n        sum_of_first_n += i\n    print(sum_of_first_n_cubes,sum_of_first_n)\n    print(sum_of_first_n_cubes-sum_of_first_n)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumOfCube(n) :\n        return n*n*n\n    def sumOfNumbers(n) :\n        return sum([i for i in range(1,n+1)])\n    def difference(n):\n        return abs(sumOfCube(n)-sumOfNumbers(n))\n    print(difference(3))\n    print(difference(7))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumofcube(n):\n        sum=0\n        for i in range(1,n+1):\n            sum+=i**3\n        return sum\n    def sumofn(n):\n        sum=0\n        for i in range(1,n+1):\n            sum+=i\n        return sum\n    sumofcube1=sumofcube(n)\n    sumofn1=sumofn(n)\n    diff=sumofcube1-sumofn1\n    return diff\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_n = sum(x ** 3 for x in range(n))\n    print(sum_of_n)\n    print(sum(i ** 3 for i in range(n)))\n    print(abs(sum_of_n - sum(i ** 3 for i in range(n))))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)//2\n    \n    \ndef minsum(n) : \n    '''\n    Write a python function to find the minimum sum of squares of consecutive numbers in a given list of integers.\n    '''\n    _sum = 0\n    for i in range(n) : \n        _sum += i**2\n    return _sum\n    \n    \ndef trifinder(a,b,c) : \n    '''\n    Write a python function to find the trispectrum of an array of 3 integers using three different functions\n    '''\n    _sum = 0\n    _sum1 = a*(a+1)/2\n    _sum2 = b*(b+1)/2\n    _sum3 = c*(c+1)/2\n    _sum = _sum1 + _sum2 + _sum3\n    return _sum\n    \n    \ndef solution(arr,x):\n    '''\n    Write a python function to find the sum of the numbers of the array whose sum is equal to x.\n    '''\n    _sum = 0\n    for i in range(len(arr)) : \n        _sum += arr[i]\n        if _sum == x : \n            return i+1\n    return -1\n    \n    \ndef plusMinus(arr):\n    '''\n    Write a python function to find the percentage of positive, negative and zero values in an array.\n    '''\n    _sum = 0\n    _minus = 0\n    _zero = 0\n    for i in range(len(arr)) : \n        _sum += arr[i]\n        if arr[i] > 0 : \n            _plus += 1\n        elif arr[i] < 0 : \n            _minus += 1\n        elif arr[i] == 0 : \n            _zero += 1\n    _p = _plus/len(arr)\n    _n = _minus/len(arr)\n    _z = _zero/len(arr)\n    return _p,_n,_z\n    \n    \ndef product(n, k):\n    '''\n    Write a python function to compute the product of the first n numbers, given by the formula:\n    '''\n    _product = 1\n    for i in range(1,n+1) : \n        _product *= i\n    return _product\n    \n    \ndef maxproduct(arr,n):\n    '''\n    Write a python function to find the maximum product of the first n numbers in an array.\n    '''\n    _max = 0\n    for i in range(len(arr)) : \n        _max = max(_max,arr[i])\n        if arr[i] == _max : \n            return i+1\n    return -1\n    \n    \ndef palindrome(str):\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    _str = str[::-1]\n    return str == _str\n    \n    \ndef sum_even_odd(arr):\n    '''\n    Write a python function to find the sum of all the even numbers and the sum of all the odd numbers.\n    '''\n    _sum = 0\n    _odd = 0\n    for i in range(len(arr)) : \n        if arr[i]%2 == 0 : \n            _sum += arr[i]\n        else : \n            _odd += arr[i]\n    return _sum,_odd\n    \n    \ndef max_min_average(arr):\n    '''\n    Write a python function to find the maximum, minimum and average of the given array.\n    '''\n    _min = 1000000\n    _max = -1000000\n    _sum = 0\n    for i in range(len(arr)) : \n        if arr[i] < _min : \n            _min = arr[i]\n        elif arr[i] > _max : \n            _max = arr[i]\n        _sum += arr[i]\n    return _min,_max,_sum/len(arr)\n    \n    \ndef length_of_the_longest_word(arr):\n    '''\n    Write a python function to find the length of the longest word in a given array of words.\n    '''\n    _max = 0\n    _len = 0\n    for i in range(len(arr)) : \n        _len = len(arr[i])\n        if _len > _max : \n            _max = _len\n    return _max\n    \n    \ndef number_of_evens(arr):\n    '''\n    Write a python function to find the number of even numbers in a given array.\n    '''\n    _count = 0\n    for i in range(len(arr)) : \n        if arr[i]%2 == 0 : \n            _count += 1\n    return _count\n    \n    \ndef largest_number(arr):\n    '''\n    Write a python function to find the largest number in an array.\n    '''\n    _max = 0\n    for i in range(len(arr)) : \n        if arr[i] > _max : \n            _max = arr[i]\n    return _max\n    \n    \ndef count_sessions(arr):\n    '''\n    Write a python function to find the number of sessions in a given array, i.e., the number of tuples in the array.\n    '''\n    _count = 0\n    for i in range(len(arr)) : \n        _count += 1\n    return _count\n    \n    \ndef number_of_factors(arr):\n    '''\n    Write a python function to find the number of factors in an array of integers.\n    '''\n    _count = 0\n    for i in range(len(arr)) : \n        if i+1 == arr[i] : \n            _count += 1\n    return _count\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    if n == 0 or n == 1 : \n        return 1\n    else : \n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef common_elements(arr1,arr2):\n    '''\n    Write a python function to find the common elements in two lists.\n    '''\n    _common = []\n    for i in range(len(arr1)) : \n        if arr1[i] in arr2 : \n            _common.append(arr1[i])\n    return _common\n    \n    \ndef tower_builder(n_floors,list_height) : \n    '''\n    Write a python function to build a tower with n floors using given list of heights.\n    '''\n    if len(list_height)!= n_floors : \n        return -1\n    _tower = []\n    _max = max(list_height)\n    for i in range(n_floors) : \n        _tower.append([])\n        for j in range(n_floors) : \n            _tower[i].append([])\n            for k in range(n_floors) : \n                _tower[i][j].append(0)\n    for i in range(len(list_height)) : \n        _tower[0][i][0] = 1\n        _tower[n_floors-1][i][n_floors-1] = 1\n        _tower[i][n_floors-1][0] = 1\n        _tower[i][0][n_floors-1] = 1\n        if list_height[i] > _max : \n            _max = list_height[i]\n    _curr_max = _max\n    for i in range(n_floors-1) : \n        for j in range(n_floors-1) : \n            for k in range(n_floors-1) : \n                if _tower[i][j][k] == 1 and _curr_max == _tower[i+1][j][k] + _tower[i][j+1][k] + _tower[i][j][k+1] : \n                    _curr_max += 1\n                    _tower[i][j][k] = _curr_max\n    _max = 0\n    for i in range(n_floors) : \n        for j in rang"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j])%2!= 0:\n                count = count+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        if A[i]%2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    temp = 0\n    for i in range(N) :\n        temp = A[i] ^ temp\n    if temp % 2 == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N <= 0 : \n        return 0\n    if N == 1 :\n        return 1 if A[0]!= A[1] else 0\n    a = A[0]\n    b = A[1]\n    if a == b :\n        return find_Odd_Pair(A[2:],N-2)\n    else :\n        return find_Odd_Pair(A[2:],N-2) + find_Odd_Pair(A[2:],N-2) + 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    i = 1\n    while i <= N :\n        j = i\n        while j < N and A[j] == A[j-1] :\n            j += 1\n        if j == N :\n            odd_count = odd_count + 1\n            continue\n        k = j\n        while k < N and A[k] == A[k-1] :\n            k += 1\n        if k == N :\n            odd_count = odd_count + 1\n        i = j\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    i = 0\n    while i<N:\n        if (A[i] % 2!= 0):\n            odd_count = odd_count + 1\n        i = i + 1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N==0:\n        return 0\n    if N==1:\n        return 1\n    if A[0]==A[1]:\n        return find_Odd_Pair(A[2:],N-2)\n    else:\n        return find_Odd_Pair(A[2:],N-1)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #code here\n    count = 0\n    for i in range(1,N+1) :\n        if (A[i]&1)!=0 :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    x = 0\n    for i in range(0,N):\n        if A[i]&1 == 1:\n            x = x+1\n    if x%2!= 0:\n        return 1\n    else:\n        return 0"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        if (A[i] ^ A[N-i-1])%2!= 0 :\n            count += 1\n    print(\"The number of pairs whose xor value is odd are:\",count)\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower_string = string.lower()\n    upper_string = lower_string.upper()\n    return upper_string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string:\n        return string.upper()\n    return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string)!= str:\n        print('ERROR')\n        return -1\n    else:\n        string_new = ''\n        for c in string:\n            if c.isupper():\n                string_new += c.lower()\n            elif c.islower():\n                string_new += c.upper()\n            else:\n                string_new += c\n        return string_new\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \ndef is_even(number):\n    '''\n    Write a function which takes a number as an argument and returns True if the number is even and False otherwise.\n    '''\n    return number % 2 == 0\n    \ndef remove_duplicates(string):\n    '''\n    Write a function which takes a string as an argument and returns a string in which all duplicate characters have been removed.\n    '''\n    result = \"\"\n    for char in string:\n        if char not in result:\n            result += char\n    return result\n    \ndef is_anagram(string1, string2):\n    '''\n    Write a function which takes two strings as arguments and returns True if they are anagrams.\n    '''\n    s1 = sorted(string1)\n    s2 = sorted(string2)\n    return s1 == s2\n    \ndef reverse_words(string):\n    '''\n    Write a function which takes a string as an argument and returns the string reversed.\n    '''\n    result = \"\"\n    for char in string:\n        if char!= \" \":\n            result += char\n        else:\n            result += \" \"\n    return result\n    \ndef delete_duplicates(string):\n    '''\n    Write a function which takes a string as an argument and returns the string without duplicates.\n    '''\n    return ''.join(set(string))\n    \ndef is_palindrome(string):\n    '''\n    Write a function which takes a string as an argument and returns True if it is a palindrome and False otherwise.\n    '''\n    left, right = 0, len(string)-1\n    while left < right:\n        if string[left]!= string[right]:\n            return False\n        else:\n            left += 1\n            right -= 1\n    return True\n    \ndef find_shortest_words(words):\n    '''\n    Write a function which takes a list of words as an argument and returns a list of tuples (word, length) in which the lengths of the tuples are sorted in ascending order.\n    '''\n    word_lens = []\n    for word in words:\n        word_lens.append((word, len(word)))\n    word_lens.sort(key=lambda x: x[1])\n    return word_lens\n    \ndef find_closest_value_from_a_sorted_array(array, target):\n    '''\n    Write a function which takes a sorted array as an argument and returns the closest value to the target value in the array.\n    '''\n    left, right = 0, len(array)-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if target <= array[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return array[left]\n    \ndef remove_first_and_last(array):\n    '''\n    Write a function which takes a sorted array as an argument and returns a copy of the array with the first and last elements removed.\n    '''\n    first = array[0]\n    last = array[-1]\n    return array[1:-1]\n    \ndef is_pandigital(n):\n    '''\n    Write a function which takes a number as an argument and returns True if it is a pandigital number and False otherwise.\n    '''\n    first = set(str(n))\n    second = set(\"1234567890\")\n    if len(first-second) == 0:\n        return True\n    else:\n        return False\n        \ndef calculate_distance(lat1, lat2, lon1, lon2):\n    '''\n    Write a function which takes coordinates of two cities as arguments and returns the distance between them in kilometers.\n    '''\n    radius = 6371\n    lat1, lat2, lon1, lon2 = map(radians, (lat1, lat2, lon1, lon2))\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    return round(radius * c, 1)\n    \ndef remove_even(nums):\n    '''\n    Write a function which takes a list as an argument and returns a list without the even numbers in it.\n    '''\n    evens = []\n    for num in nums:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n    \ndef reverse_string(string):\n    '''\n    Write a function which takes a string as an argument and returns the string reversed.\n    '''\n    result = \"\"\n    for char in string:\n        result += char\n    return result\n    \ndef reverse_string_better(string):\n    '''\n    Write a function which takes a string as an argument and returns the string reversed.\n    '''\n    return string[::-1]\n    \ndef find_lowest(nums):\n    '''\n    Write a function which takes a list of numbers as an argument and returns the minimum of these numbers.\n    '''\n    return min(nums)\n    \ndef is_palindrome(string):\n    '''\n    Write a function which takes a string as an argument and returns True if it is a palindrome and False otherwise.\n    '''\n    string = string.lower()\n    for char in string:\n        if char in \"abcdefghijklmnopqrstuvwxyz\":\n            string = string.replace(char, \"\")\n    return string == \"\"\n    \ndef find_longest_word(words):\n    '''\n    Write a function which takes a list of words as an argument and returns the longest word.\n    '''\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    \ndef find_shortest_word(words):\n    '''\n    Write a function which takes a list of words as an argument and returns the shortest word.\n    '''\n    shortest_word = \"\"\n    for word in words:\n        if len(word) < len(shortest_word):\n            shortest_word = word\n    return shortest_word\n    \ndef sum_list_nums(nums):\n    '''\n    Write a function which takes a list of numbers as an argument and returns the sum of these numbers.\n    '''\n    sum_num = 0\n    for num in nums:\n        sum_num += num\n    return sum_num\n    \ndef is_palindrome_again(string):\n    '''\n    Write a function which takes a string as an argument and returns True if it is a palindrome and False otherwise.\n    '''\n    string = string.lower()\n    for char in string:\n        if char in \"abcdefghijklmnopqrstuvwxyz\":\n            string = string.replace(char, \"\")\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef lcm_numbers(num1, num2):\n    '''\n    Write a function which takes two numbers as an arguments and returns the least common multiple (LCM) of those numbers.\n    '''\n    return (num1*num2) // gcd(num1, num2)\n    \ndef lcm_numbers_better(num1, num2):\n    '''\n    Write a function which takes two numbers as an arguments and returns the least common multiple (LCM) of those numbers.\n    '''\n    while True:\n        if num1 % num2 == 0:\n            break\n        else:\n            num1 += 1\n    return num1\n    \ndef is_pandigital(n):\n    '''\n    Write a function which takes a number as an argument and returns True if it is a pandigital number and False otherwise.\n    '''\n    digits = \"1234567890\"\n    nums = str(n)\n    first = set(nums)\n    second = set(digits)\n    if len(first-second) == 0:\n        return True\n    else:\n        return False\n        \ndef lcm_between(num1, num2):\n    '''\n    Write a function which takes two numbers as an argument"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = string.upper()\n    return string\n    \n    "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for letter in string:\n        if letter.islower():\n            new_string += letter.upper()\n        elif letter.isupper():\n            new_string += letter.lower()\n        else:\n            new_string += letter\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Your code here\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    upper = 0\n    lower = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            upper += 1\n        elif string[i].islower():\n            lower += 1\n    print(\"upper: \", upper)\n    print(\"lower: \", lower)\n    if upper > 0 and lower > 0:\n        return string.upper()\n    elif upper > 0 and lower == 0:\n        return string.lower()\n    elif upper == 0 and lower > 0:\n        return string.lower()\n    else:\n        return string.upper()\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    dist = 0\n    for i in range(len(n1)):\n        dist += int(n1[i]) - int(n2[i])\n    return dist\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(n1 - n2)\nprint(digit_distance_nums(30,50))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    diff = 0\n    while n1 > 0 or n2 > 0:\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d_sum = 0\n    while n1 or n2:\n        n1, d = divmod(n1, 10)\n        n2, d2 = divmod(n2, 10)\n        d_sum += abs(d - d2)\n    return d_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    print(f'The per-digit difference between {n1} and {n2} is: {n2-n1}')\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if (n1 > n2):\n        if (n1 - n2 == 0):\n            return 0\n        if (n1 - n2 == 1):\n            return 1\n        if (n1 - n2 == 2):\n            return 2\n        if (n1 - n2 == 3):\n            return 3\n        if (n1 - n2 == 4):\n            return 4\n        if (n1 - n2 == 5):\n            return 5\n        if (n1 - n2 == 6):\n            return 6\n        if (n1 - n2 == 7):\n            return 7\n        if (n1 - n2 == 8):\n            return 8\n        if (n1 - n2 == 9):\n            return 9\n        if (n1 - n2 == 10):\n            return 0\n        if (n1 - n2 == 11):\n            return 1\n        if (n1 - n2 == 12):\n            return 2\n        if (n1 - n2 == 13):\n            return 3\n        if (n1 - n2 == 14):\n            return 4\n        if (n1 - n2 == 15):\n            return 5\n        if (n1 - n2 == 16):\n            return 6\n        if (n1 - n2 == 17):\n            return 7\n        if (n1 - n2 == 18):\n            return 8\n        if (n1 - n2 == 19):\n            return 9\n        if (n1 - n2 == 20):\n            return 0\n        if (n1 - n2 == 21):\n            return 1\n        if (n1 - n2 == 22):\n            return 2\n        if (n1 - n2 == 23):\n            return 3\n        if (n1 - n2 == 24):\n            return 4\n        if (n1 - n2 == 25):\n            return 5\n        if (n1 - n2 == 26):\n            return 6\n        if (n1 - n2 == 27):\n            return 7\n        if (n1 - n2 == 28):\n            return 8\n        if (n1 - n2 == 29):\n            return 9\n        if (n1 - n2 == 30):\n            return 0\n        if (n1 - n2 == 31):\n            return 1\n        if (n1 - n2 == 32):\n            return 2\n        if (n1 - n2 == 33):\n            return 3\n        if (n1 - n2 == 34):\n            return 4\n        if (n1 - n2 == 35):\n            return 5\n        if (n1 - n2 == 36):\n            return 6\n        if (n1 - n2 == 37):\n            return 7\n        if (n1 - n2 == 38):\n            return 8\n        if (n1 - n2 == 39):\n            return 9\n        if (n1 - n2 == 40):\n            return 0\n        if (n1 - n2 == 41):\n            return 1\n        if (n1 - n2 == 42):\n            return 2\n        if (n1 - n2 == 43):\n            return 3\n        if (n1 - n2 == 44):\n            return 4\n        if (n1 - n2 == 45):\n            return 5\n        if (n1 - n2 == 46):\n            return 6\n        if (n1 - n2 == 47):\n            return 7\n        if (n1 - n2 == 48):\n            return 8\n        if (n1 - n2 == 49):\n            return 9\n        if (n1 - n2 == 50):\n            return 0\n        if (n1 - n2 == 51):\n            return 1\n        if (n1 - n2 == 52):\n            return 2\n        if (n1 - n2 == 53):\n            return 3\n        if (n1 - n2 == 54):\n            return 4\n        if (n1 - n2 == 55):\n            return 5\n        if (n1 - n2 == 56):\n            return 6\n        if (n1 - n2 == 57):\n            return 7\n        if (n1 - n2 == 58):\n            return 8\n        if (n1 - n2 == 59):\n            return 9\n        if (n1 - n2 == 60):\n            return 0\n        if (n1 - n2 == 61):\n            return 1\n        if (n1 - n2 == 62):\n            return 2\n        if (n1 - n2 == 63):\n            return 3\n        if (n1 - n2 == 64):\n            return 4\n        if (n1 - n2 == 65):\n            return 5\n        if (n1 - n2 == 66):\n            return 6\n        if (n1 - n2 == 67):\n            return 7\n        if (n1 - n2 == 68):\n            return 8\n        if (n1 - n2 == 69):\n            return 9\n        if (n1 - n2 == 70):\n            return 0\n        if (n1 - n2 == 71):\n            return 1\n        if (n1 - n2 == 72):\n            return 2\n        if (n1 - n2 == 73):\n            return 3\n        if (n1 - n2 == 74):\n            return 4\n        if (n1 - n2 == 75):\n            return 5\n        if (n1 - n2 == 76):\n            return 6\n        if (n1 - n2 == 77):\n            return 7\n        if (n1 - n2 == 78):\n            return 8\n        if (n1 - n2 == 79):\n            return 9\n        if (n1 - n2 == 80):\n            return 0\n        if (n1 - n2 == 81):\n            return 1\n        if (n1 - n2 == 82):\n            return 2\n        if (n1 - n2 == 83):\n            return 3\n        if (n1 - n2 == 84):\n            return 4\n        if (n1 - n2 == 85):\n            return 5\n        if (n1 - n2 == 86):\n            return 6\n        if (n1 - n2 == 87):\n            return 7\n        if (n1 - n2 == 88):\n            return 8\n        if (n1 - n2 == 89):\n            return 9\n        if (n1 - n2 == 90):\n            return 0\n        if (n1 - n2 == 91):\n            return 1\n        if (n1 - n2 == 92):\n            return 2\n        if (n1 - n2 == 93):\n            return 3\n        if (n1 - n2 == 94):\n            return 4\n        if (n1 - n2 == 95):\n            return 5\n        if (n1 - n2 == 96):\n            return 6\n        if (n1 - n2 == 97):\n            return 7\n        if (n1 - n2 == 98):\n            return 8\n        if (n1 - n2 == 99):\n            return 9\n        if (n1 - n2 == 100):\n            return 0\n        if (n1 - n2 == 101):\n            return 1\n        if (n1 - n2 == 102):\n            return 2\n        if (n1 - n2 == 103):\n            return 3\n        if (n1 - n2 == 104):\n            return 4\n        if (n1 - n2 == 105):\n            return 5\n        if (n1 - n2 == 106):\n            return 6\n        if (n1 - n2 == 107):\n            return 7\n        if (n1 - n2 == 108):\n            return 8\n        if (n1 - n2 == 109):\n            return 9\n        if (n1 - n2 == 110):\n            return 0\n        if (n1 - n2 == 111):\n            return 1\n        if (n1 - n2 == 112):\n            return 2\n        if (n1 - n2 == 113):\n            return 3\n        if (n1 - n2 == 114):\n            return 4\n        if (n1 - n2 == 115):\n            return 5\n        if (n1 - n2 == 116):\n            return 6\n        if (n1 - n2 == 117):\n            return 7\n        if (n1 - n2 == 118):\n            return 8\n        if (n1 - n2 == 119):\n            return 9\n        if (n1 - n2 == 120):\n            return 0\n        if (n1 - n2 == 121):\n            return 1\n        if (n1 - n2 == 122):\n            return 2\n        if (n1 - n2 == 123):\n            return 3\n        if (n1 - n2 == 124)"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    elif abs(n1-n2) < 10:\n        return abs(n1-n2)\n    else:\n        s = 0\n        for i in range(len(str(n1))):\n            s = s + digit_distance_nums(n1 // 10**(len(str(n1)) - i - 1), n2 // 10**(len(str(n1)) - i - 1))\n        return s\n    "
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_digit_diff = 0\n    while n2!= 0:\n        sum_digit_diff += abs(n1%10 - n2%10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return sum_digit_diff\nprint(digit_distance_nums(123, 345))\nprint(digit_distance_nums(321, 657))\nprint(digit_distance_nums(3, 4))\nprint(digit_distance_nums(25, 40))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    for i in range(len(n1)):\n        if n1[i]!= n2[i]:\n            distance += abs(int(n1[i])-int(n2[i]))\n    return distance\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    n1 = list(n1)\n    n2 = list(n2)\n    print(n1)\n    print(n2)\n    print(n1[0])\n    print(n2[0])\n    n1[0] = int(n1[0])\n    n2[0] = int(n2[0])\n    n1[1] = int(n1[1])\n    n2[1] = int(n2[1])\n    n1[2] = int(n1[2])\n    n2[2] = int(n2[2])\n    print(n1)\n    print(n2)\n    n1[0] = n1[0] - n2[0]\n    print(n1)\n    n2[0] = n2[0] - n1[0]\n    print(n2)\n    n1[1] = n1[1] - n2[1]\n    print(n1)\n    n2[1] = n2[1] - n1[1]\n    print(n2)\n    n1[2] = n1[2] - n2[2]\n    print(n1)\n    n2[2] = n2[2] - n1[2]\n    print(n2)\n    n1[0] = n1[0]*10 + n2[0]\n    print(n1)\n    n2[0] = n2[0]*10 + n1[0]\n    print(n2)\n    n1[1] = n1[1]*10 + n2[1]\n    print(n1)\n    n2[1] = n2[1]*10 + n1[1]\n    print(n2)\n    n1[2] = n1[2]*10 + n2[2]\n    print(n1)\n    n2[2] = n2[2]*10 + n1[2]\n    print(n2)\n    n1 = int(n1)\n    n2 = int(n2)\n    sum1 = n1 + n2\n    print(sum1)\n    sum1 = sum1 - (n1%10)\n    print(sum1)\n    sum1 = sum1 - (n2%10)\n    print(sum1)\n    sum1 = sum1 - (n1%10 - n2%10)\n    print(sum1)\n    return sum1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    \n    if size == 1:\n        return a[0]\n    \n    dp = [[0]*size for i in range(size)]\n    dp[0][0] = a[0]\n    \n    for i in range(1,size):\n        dp[i][0] = a[i]\n        dp[i][1] = max(a[i], dp[i-1][0]+a[i])\n        for j in range(2,size):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + a[i]\n    \n    return max(dp[size-1])\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = 0\n    for i in range(size):\n        s = max(s, 0) + a[i]\n        s = max(s, a[i])\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n    s = 0\n    while end < size:\n        if s > max_sum:\n            max_sum = s\n        s = s + a[end]\n        end = end + 1\n    s = 0\n    for i in range(0, size):\n        s = s + a[i]\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1000000\n    sum_so_far = 0\n    for i in range(size):\n        sum_so_far += a[i]\n        if sum_so_far > max_sum:\n            max_sum = sum_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = - sys.maxsize - 1\n    \n    for i in range(size):\n        for j in range(size - i):\n            curr_sum = 0\n            for k in range(i):\n                curr_sum += a[k]\n            for k in range(i, size):\n                curr_sum += a[k]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        if max_sum < current_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize largest sum\n    max_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = float('-inf')\n    for i in range(size):\n        curr_sub_sum = 0\n        for j in range(i, size):\n            curr_sub_sum += a[j]\n            if curr_sub_sum > max_sub_sum:\n                max_sub_sum = curr_sub_sum\n    return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    print('union set elements :', union_set)\n    return sorted(union_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    for val in test_tup1:\n        if val not in union_tup:\n            union_tup = union_tup + (val,)\n    for val in test_tup2:\n        if val not in union_tup:\n            union_tup = union_tup + (val,)\n    union_tup = sorted(union_tup)\n    return union_tup\n    \ndef intersect_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    intersect_tup = ()\n    for val in test_tup1:\n        if val in test_tup2:\n            if val not in intersect_tup:\n                intersect_tup = intersect_tup + (val,)\n    intersect_tup = sorted(intersect_tup)\n    return intersect_tup\n    \ndef test_functions(test_case):\n    '''\n    The function for testing.\n    '''\n    for num1, num2 in test_case:\n        assert_output = union_elements(num1, num2)\n        assert assert_output == num1 + num2\n        assert_output = intersect_elements(num1, num2)\n        assert assert_output == num1 * num2\n        print('Test case passed...!')\n    \ntest_case = [(1, 2), (2, 4), (5, 6), (1, 3), (3, 6)]\ntest_functions(test_case)"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return result\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    for tup in test_tup1:\n        if tup in test_tup2:\n            result.append(tup)\n    result.sort()\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set().union(test_tup1, test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Check for empty tuples\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return (None, None)\n    \n    # Check for same length, sort if same length\n    if len(test_tup1) == len(test_tup2):\n        return (sorted(test_tup1 + test_tup2), None)\n    elif len(test_tup1) < len(test_tup2):\n        return (sorted(test_tup1 + test_tup2), None)\n    else:\n        return (sorted(test_tup1 + test_tup2), None)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1 and not test_tup2:\n        return None\n    if test_tup1:\n        return sorted(test_tup1 + test_tup2)\n    if test_tup2:\n        return sorted(test_tup1 + test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_test_tup1 = list(test_tup1)\n    union_test_tup2 = list(test_tup2)\n    union_test_tup = []\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    a = sorted(set(test_tup1) | set(test_tup2))\n    return a\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = []\n    for i in range(0,len(lst)):\n        result.append(len(lst[i]))\n    return(max(result))\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_lengths = []\n    sub_list = []\n    sub_list_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            sub_list.append(lst[i])\n            sub_list_length = 1\n            sub_list_lengths.append(sub_list_length)\n        else:\n            if sub_list[-1] == lst[i]:\n                sub_list.append(lst[i])\n                sub_list_length += 1\n                sub_list_lengths.append(sub_list_length)\n            else:\n                sub_list = []\n                sub_list.append(lst[i])\n                sub_list_length = 1\n                sub_list_lengths.append(sub_list_length)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst.sort()\n    Max_Len = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1] or lst[i] == lst[i+2]:\n            Max_Len += 1\n        else:\n            break\n    print(Max_Len)\n            \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(i+1,len(lst)):\n            sublist.append(lst[j])\n            if len(sublist) == len(set(sublist)):\n                print(sublist)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    a_set = set(lst)\n    a_list = list(a_set)\n    ans = 0\n    for x in a_list:\n        if ans < len(x):\n            ans = len(x)\n    print(ans)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst[i])):\n            if len(lst[i][j])>max:\n                max = len(lst[i][j])\n    return max\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        if (len(i) > max_length):\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    max_length = 0\n    for i in range(n):\n        length = 1\n        for j in range(i+1, n):\n            if lst[j] >= lst[i]:\n                length += 1\n            else:\n                break\n        if length > max_length:\n            max_length = length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length=0\n    n=len(lst)\n    for i in range(n):\n        if(max_length<len(lst[i])):\n            max_length=len(lst[i])\n    return max_length\n    \ndef Find_Longest_List(lst):\n    '''\n    Write a python function to find the longest sublist in a list of lists.\n    '''\n    max_length=0\n    n=len(lst)\n    for i in range(n):\n        if(len(lst[i])>max_length):\n            max_length=len(lst[i])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    res = []\n    res.append(lst)\n    for i in range(0,len(lst)-1):\n        lst = [0]\n        for j in range(i,len(lst)):\n            lst.append(lst[j-1]+1)\n            if(lst[j] > len(lst)):\n                break\n            if(j==len(lst)-1):\n                res.append(lst)\n    return max(map(len,res))\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\\"([^\\\"]*)\\\"', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #return re.findall(r'\"[^\"]+\"',text)\n    return re.findall(r\"'[^']+'\",text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string = text\n    left_bracket = '{'\n    right_bracket = '}'\n    lst = re.findall(r'\\w+', string)\n    lst = lst[1:-1]\n    lst = ''.join(lst)\n    lst = lst.split(left_bracket)\n    lst = ''.join(lst)\n    lst = lst.split(right_bracket)\n    lst = ''.join(lst)\n    lst = lst.split(',')\n    lst = lst[0]\n    return lst\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotation marks from a string.\n    # \n    # Input:\n    #   String.\n    # \n    # Output:\n    #   String.\n    # \n    # Eg:\n    #   If input is\n    #   'A man, a plan, a canal - Panama'\n    #   Output should be\n    #   'a man, a plan, a canal - Panama'\n    # \"\"\"\n    \n    # \"\"\"\n    # Write a function to extract values between quotatio"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    temp = text.split( )\n    values = []\n    for i in temp:\n        if i.startswith('\"'):\n            try:\n                values.append(i.split('\"')[1])\n            except IndexError:\n                pass\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return None\n    return re.findall('\"\\w+\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if len(text) == 0:\n        return None\n    else:\n        string_list = re.findall(r\"[^\\\"].*?[\\\"]\", text)\n        return string_list\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string = text.strip()\n    string = re.sub(r\"['\\\"]\", \"\", string)\n    string = re.sub(r\"[\\n\\t ]+\", \" \", string)\n    return string\ndef extract_single_values(text):\n    '''\n    Write a function to extract single-quotes from a string and remove them.\n    '''\n    string = text.strip()\n    string = re.sub(r\"['\\\"]\", \"\", string)\n    string = re.sub(r\"[\\n\\t ]+\", \" \", string)\n    return string\ndef extract_double_values(text):\n    '''\n    Write a function to extract double-quotes from a string and remove them.\n    '''\n    string = text.strip()\n    string = re.sub(r\"['\\\"]\", \"\", string)\n    string = re.sub(r\"[\\n\\t ]+\", \" \", string)\n    return string\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    a=text.find('\"')\n    b=text.find('\"',a+1)\n    c=text.find('\"',b+1)\n    d=text.find('\"',c+1)\n    values_in_text = text[a+1:b]\n    return values_in_text\n    \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]!= arr[j]):\n                count = count + 1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n):\n        for j in range(i):\n            if (arr[i] == arr[j]):\n                dp[i][j] = 2\n            else:\n                dp[i][j] = dp[i][j-1] + dp[j][i]\n            #print(i,j,dp[i][j])\n    print(\"dp[i][j] for the above array \",dp)\n    return dp[i][j]\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # # this is the correct way \n    # return len([(i,j) for i in arr for j in arr if i!=j and i<j])\n    # using hash table \n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return sum([d[i]*(d[i]-1) for i in d])\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    pairs = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if(arr[i] == arr[j]):\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            cnt += 1\n    print(cnt)\n    return cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count = count + 1\n                break\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (arr[i] == arr[j]): \n                c = c + 1\n    return c\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \n    \n    \n    \ndef count(s): \n    '''\n    Write a python function to count the number of times a value occurs in a list.\n    '''\n    return s.count(s[0])\n    \n    \n    \n    \ndef multiply(*args): \n    '''\n    Write a python function to multiply all the values in a list.\n    '''\n    return args[0] * args[1]\n    \n    \n    \n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return s[::-1] == s\n    \n    \n    \n    \ndef is_palindrome_2(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s_1 = s[::-1]\n    return s == s_1\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for c in word: \n        result.append(c)\n    return result\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return (word[i:i+1] for i in range(0, len(word))) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\nprint(split(\"Good Morning\"))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        n = str(n)\n        n_sum = 0\n        for digit in n:\n            n_sum += int(digit)\n        return n_sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = list(str(n))\n    return sum(int(d) for d in digits)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert type(n) is int, f\"n is {n} and not an integer\"\n    assert n >= 0, f\"n is {n} and not a non-negative integer\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # \n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    #\n    # Method 1\n    #\n    # sum = 0\n    # for i in str(n):\n    #     sum += int(i)\n    # return sum\n    # \n    #\n    # Method 2\n    #\n    # if n < 0:\n    #     return -1\n    # else:\n    #     return sum(list(map(int,str(n))))\n    # \n    #\n    # Method 3\n    #\n    # if n < 0:\n    #     return -1\n    # else:\n    #     return sum(map(int,list(str(n))))\n    # \n    #\n    # Method 4\n    #\n    # return sum(int(i) for i in str(n))\n    #\n    #\n    # Method 5\n    #\n    # return sum(int(i) for i in str(abs(n)))\n    #\n    #\n    # Method 6\n    #\n    # return sum(int(i) for i in str(abs(n))[::-1])\n    #\n    #\n    # Method 7\n    #\n    # def sum(n):\n    #     return sum([int(i) for i in str(n)])\n    #\n    #\n    # Method 8\n    #\n    # if n < 0:\n    #     return -1\n    # else:\n    #     return sum(abs(n))\n    #\n    #\n    # Method 9\n    #\n    # if n < 0:\n    #     return -1\n    # else:\n    #     return sum([int(i) for i in str(n)])\n    #\n    #\n    # Method 10\n    #\n    # if n < 0:\n    #     return -1\n    # else:\n    #     return sum([int(i) for i in str(abs(n))])\n    #\n    #\n    # Method 11\n    #\n    # if n < 0:\n    #     return -1\n    # else:\n    #     return sum(int(i) for i in str(abs(n)))\n    #\n    #\n    # Method 12\n    #\n    # if n < 0:\n    #     return -1\n    # else:\n    #     return sum(int(i) for i in str(abs(n))[::-1])\n    #\n    #\n    # Method 13\n    #\n    # if n < 0:\n    #     return -1\n    # else:\n    #     return sum([int(i) for i in str(n)[::-1]])\n    #\n    #\n    # Method 14\n    #\n    # return sum(int(i) for i in str(abs(n))[::-1])\n    #\n    #\n    # Method 15\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum([int(i) for i in str(n)])\n    # \n    #\n    # Method 16\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum([int(i) for i in str(abs(n))])\n    #\n    #\n    # Method 17\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(abs(n))\n    #\n    #\n    # Method 18\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(map(int,str(abs(n)))))\n    #\n    #\n    # Method 19\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(map(int,str(n))))\n    #\n    #\n    # Method 20\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(map(int,str(n)[::-1]))\n    #\n    #\n    # Method 21\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(map(int,str(n))))\n    #\n    #\n    # Method 22\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(map(int,str(n))))\n    #\n    #\n    # Method 23\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(str(n)))\n    #\n    #\n    # Method 24\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(str(n)))\n    #\n    #\n    # Method 25\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum([int(i) for i in str(n)])\n    #\n    #\n    # Method 26\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum([int(i) for i in str(abs(n))])\n    #\n    #\n    # Method 27\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(str(n)))\n    #\n    #\n    # Method 28\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(str(abs(n))))\n    #\n    #\n    # Method 29\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(abs(n))\n    #\n    #\n    # Method 30\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(abs(n)))\n    #\n    #\n    # Method 31\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(str(abs(n))))\n    #\n    #\n    # Method 32\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(map(int,str(n))))\n    #\n    #\n    # Method 33\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n    #         return sum(list(map(int,str(abs(n))))[::-1])\n    #\n    #\n    # Method 34\n    #\n    # def sum(n):\n    #     if n < 0:\n    #         return -1\n    #     else:\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if type(n) == int:\n        if n < 0:\n            return False\n        else:\n            sum = 0\n            while n > 0:\n                sum += n % 10\n                n = n // 10\n            return sum\n    else:\n        return False\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    sum = 0\n    for i in range(len(n)):\n        sum += int(n[i])\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digits = 0\n    while n:\n        sum_digits += n % 10\n        n = n // 10\n    return sum_digits\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for x in range(0, len(list1)-1):\n        if list1[x] > list1[x+1]:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if(list1[i-1]<list1[i]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i=1\n    while i<len(list1):\n        if list1[i]<list1[i-1]:\n            return False\n        i=i+1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1)==list1\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] < list1[j]:\n                return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Why have we used a function\n    # Why is a function used\n    # Why is it useful?\n    if len(list1)==1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        for i in range(1,len(list1)):\n            if list1[i-1] > list1[i]:\n                return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted = True\n    for i in range(0, len(list1)-1):\n        if list1[i]>list1[i+1]:\n            sorted = False\n            break\n    return sorted\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if list1 is empty\n    if len(list1) == 0:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return False\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for x in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Your code here\n    return list()\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(0,length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_empty_dicts = []\n    for i in range(length):\n        list_of_empty_dicts.append({})\n    return list_of_empty_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\nprint(empty_list(5))\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n    \ndef empty_tuple(length):\n    '''\n    Write a function to create a tuple of N empty dictionaries.\n    '''\n    return tuple([{} for _ in range(length)])\n    \ndef empty_set(length):\n    '''\n    Write a function to create a set of N empty dictionaries.\n    '''\n    return set([{} for _ in range(length)])\n    \ndef empty_dictionary(length):\n    '''\n    Write a function to create a dictionary of N empty dictionaries.\n    '''\n    return dict([{} for _ in range(length)])\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your function here\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    size = len(list1)\n    for i in range(size):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1_new = []\n    while list1:\n        # sort each sublist\n        list1_new.append(sorted(list1.pop(0)))\n    return list1_new\n    \ndef sort_sublists_2(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort each sublist\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    res = []\n    for i in list1:\n        if type(i)!= list:\n            res.append(i)\n        else:\n            res.append(sorted(i))\n    return res\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in list1:\n        l.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for index in range(len(list1)):\n        sublists.append(sorted(list1[index]))\n    return sublists\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for x in list1:\n        x.sort()\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    # To start with, we need to remove duplicates. We can use a dictionary\n    # since that's faster to store.\n    \n    unique = {}\n    \n    # Loop through nums and add any new numbers to the dictionary\n    for num in nums:\n        if num in unique:\n            unique[num] += 1\n        else:\n            unique[num] = 1\n    \n    # We can now print all of our unique numbers\n    \n    # Now we need to find the indices of the unique numbers.\n    # We can use a dictionary to store the numbers and their indices.\n    \n    indices = {}\n    \n    for i, num in enumerate(nums):\n        if num in unique:\n            if unique[num] > 1:\n                # We found a duplicate\n                indices[i] = num\n                \n    # Now we can remove all of the duplicate numbers from nums\n    \n    for key in indices:\n        nums.remove(indices[key])\n    \n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_set = set()\n    \n    for num in nums:\n        if num in num_set:\n            num_set.remove(num)\n        else:\n            num_set.add(num)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if type(nums)!= list:\n        raise Exception(\"nums must be a list\")\n    for num in nums:\n        if type(num)!= int:\n            raise Exception(\"nums must contain only integers\")\n    nums_copy = nums.copy()\n    nums.sort()\n    for i in range(len(nums)):\n        if i == 0:\n            nums_copy[i] = nums_copy[i] + 1\n        elif nums_copy[i] == nums_copy[i-1]:\n            nums_copy[i] = nums_copy[i] + 1\n        else:\n            nums_copy[i] = nums_copy[i]\n    return nums_copy\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # CODE HERE\n    final_list = []\n    for i in nums:\n        if i not in final_list:\n            final_list.append(i)\n    print(final_list)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    #print(nums)\n    #if len(nums) < 2:\n    #    return False\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            nums.pop(i)\n            return True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_dict = {}\n    # looping through each element of list and add it in the dictionary\n    for num in nums:\n        if num not in nums_dict:\n            nums_dict[num] = 1\n        else:\n            nums_dict[num] += 1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # nums = (1,2,3,4,5,6,7,8,9,10)\n    # nums = (1,2,2,3,3,4,5,5)\n    # nums = (1,1,1,1,1,2,2,2)\n    # nums = (1,2,1,3,5,2,2)\n    # nums = (1,2,1,2,3,1,3)\n    # nums = (1,1,1,2,2,2,3,3,4,5,6,7,8,9,10)\n    nums_list = list(nums)\n    nums_set = set(nums_list)\n    final_nums_set = list(nums_set)\n    final_nums_set.sort()\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)):\n        nums[i] = set(nums[i])\n    return(nums)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    product_list = 1\n    for i in range(len(unique_list)):\n        product_list = product_list * unique_list[i]\n    return product_list\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_num = []\n    for i in list_data:\n        if i not in unique_num:\n            unique_num.append(i)\n    \n    print(unique_num)\n    print(\"The product of the unique numbers in a given list is : \",end=\"\")\n    print(len(unique_num)*i)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        if list_data.count(i) == 1:\n            product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list=[]\n    for i in list_data:\n        if i not in new_list:\n            new_list.append(i)\n    product=1\n    for i in new_list:\n        product*=i\n    return product\nprint(\"Input list: \", list_data)\nprint(\"Unique product of elements: \", unique_product(list_data))"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    return len(unique_list)*len(list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    seen_numbers = set()\n    for i in list_data:\n        if i not in seen_numbers:\n            prod *= i\n            seen_numbers.add(i)\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = []\n    for i in range(len(list_data)):\n        if list_data[i] in new_list:\n            continue\n        else:\n            new_list.append(list_data[i])\n    result = 1\n    for i in range(len(new_list)):\n        result *= new_list[i]\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    set_data = set(list_data)\n    return 1 if len(set_data) == 1 else 1 if len(set_data) == 0 else list_data[0]*list_data[-1]*list_data[1]*list_data[-2]*list_data[2]*list_data[-3]*list_data[3]*list_data[-4]*list_data[4]*list_data[-5]*list_data[5]*list_data[-6]*list_data[6]*list_data[-7]*list_data[7]*list_data[-8]*list_data[8]*list_data[-9]*list_data[9]*list_data[-10]*list_data[10]*list_data[-11]*list_data[11]*list_data[-12]*list_data[12]*list_data[-13]*list_data[13]*list_data[-14]*list_data[14]*list_data[-15]*list_data[15]*list_data[-16]*list_data[16]*list_data[-17]*list_data[17]*list_data[-18]*list_data[18]*list_data[-19]*list_data[19]*list_data[-20]*list_data[20]*list_data[-21]*list_data[21]*list_data[-22]*list_data[22]*list_data[-23]*list_data[23]*list_data[-24]*list_data[24]*list_data[-25]*list_data[25]*list_data[-26]*list_data[26]*list_data[-27]*list_data[27]*list_data[-28]*list_data[28]*list_data[-29]*list_data[29]*list_data[-30]*list_data[30]*list_data[-31]*list_data[31]*list_data[-32]*list_data[32]*list_data[-33]*list_data[33]*list_data[-34]*list_data[34]*list_data[-35]*list_data[35]*list_data[-36]*list_data[36]*list_data[-37]*list_data[37]*list_data[-38]*list_data[38]*list_data[-39]*list_data[39]*list_data[-40]*list_data[40]*list_data[-41]*list_data[41]*list_data[-42]*list_data[42]*list_data[-43]*list_data[43]*list_data[-44]*list_data[44]*list_data[-45]*list_data[45]*list_data[-46]*list_data[46]*list_data[-47]*list_data[47]*list_data[-48]*list_data[48]*list_data[-49]*list_data[49]*list_data[-50]*list_data[50]*list_data[-51]*list_data[51]*list_data[-52]*list_data[52]*list_data[-53]*list_data[53]*list_data[-54]*list_data[54]*list_data[-55]*list_data[55]*list_data[-56]*list_data[56]*list_data[-57]*list_data[57]*list_data[-58]*list_data[58]*list_data[-59]*list_data[59]*list_data[-60]*list_data[60]*list_data[-61]*list_data[61]*list_data[-62]*list_data[62]*list_data[-63]*list_data[63]*list_data[-64]*list_data[64]*list_data[-65]*list_data[65]*list_data[-66]*list_data[66]*list_data[-67]*list_data[67]*list_data[-68]*list_data[68]*list_data[-69]*list_data[69]*list_data[-70]*list_data[70]*list_data[-71]*list_data[71]*list_data[-72]*list_data[72]*list_data[-73]*list_data[73]*list_data[-74]*list_data[74]*list_data[-75]*list_data[75]*list_data[-76]*list_data[76]*list_data[-77]*list_data[77]*list_data[-78]*list_data[78]*list_data[-79]*list_data[79]*list_data[-80]*list_data[80]*list_data[-81]*list_data[81]*list_data[-82]*list_data[82]*list_data[-83]*list_data[83]*list_data[-84]*list_data[84]*list_data[-85]*list_data[85]*list_data[-86]*list_data[86]*list_data[-87]*list_data[87]*list_data[-88]*list_data[88]*list_data[-89]*list_data[89]*list_data[-90]*list_data[90]*list_data[-91]*list_data[91]*list_data[-92]*list_data[92]*list_data[-93]*list_data[93]*list_data[-94]*list_data[94]*list_data[-95]*list_data[95]*list_data[-96]*list_data[96]*list_data[-97]*list_data[97]*list_data[-98]*list_data[98]*list_data[-99]*list_data[99]*list_data[-100]*list_data[100]*list_data[-101]*list_data[101]*list_data[-102]*list_data[102]*list_data[-103]*list_data[103]*list_data[-104]*list_data[104]*list_data[-105]*list_data[105]*list_data[-106]*list_data[106]*list_data[-107]*list_data[107]*list_data[-108]*list_data[108]*list_data[-109]*list_data[109]*list_data[-110]*list_data[110]*list_data[-111]*list_data[111]*list_data[-112]*list_data[112]*list_data[-113]*list_data[113]*list_data[-114]*list_data[114]*list_data[-115]*list_data[115]*list_data[-116]*list_data[116]*list_data[-117]*list_data[117]*list_data[-118]*list_data[118]*list_data[-119]*list_data[119]*list_data[-120]*list_data[120]*list_data[-121]*list_data[121]*list_data[-122]*list_data[122]*list_data[-123]*list_data[123]*list_data[-124]*list_data[124]*list_data[-125]*list_data[125]*list_data[-126]*list_data[126]*list_data[-127]*list_data[127]*list_data[-128]*list_data[128]*list_data[-129]*list_data[129]*list_data[-130]*list_data[130]*list_data[-131]*list_data[131]*list_dat"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 0:\n        return None\n    else:\n        list_data.sort()\n        return(list_data[-1]*list_data[-2])\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product = product * i\n    return product\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14\n    surfacearea=2*pi*r*h\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    surfacearea = 2*pi*r*(r+h)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea_cylinder = 2*pi*r*h + 2*pi*r*2*h*(h/2)\n    return surfacearea_cylinder\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n    \nprint(surfacearea_cylinder(4,5))"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = math.pi*r*(r+h)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    a = 2*math.pi*r*h\n    print(f\"The surface area of a cylinder of radius {r} and height {h} is {a}\")\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface = math.pi*r**2\n    surface = surface + 2*math.pi*r*h\n    return surface\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Calculating the area of a cylinder\n    a = pi * r**2\n    #Calculating the surface area of the cylinder\n    sa = 2 * pi * r * h + 2 * pi * (r**2)\n    #Returning the answer\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    A=2*math.pi*r*h\n    return A\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    import math\n    V=math.pi*r**2*h\n    return V\n    \ndef volume_cone(r1,r2,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    V=math.pi*r1**2*r2*h\n    return V\n    \ndef surfacearea_cone(r1,r2,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    import math\n    A=math.pi*r2*(r1**2+r2**2)*h/3\n    return A\n    \ndef volume_tetrahedron(x,y,z):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    V=1/6*(x*(x+y)*(x+z)*(x+y+z)+y*(y+z)*(y+z)*(y+x))\n    return V\n    \ndef surfacearea_tetrahedron(x,y,z):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    A=6*x*(x+y)*(x+z)*(x+y+z)\n    return A\n    \ndef volume_cube(x,y,z):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V=x*y*z\n    return V\n    \ndef surfacearea_cube(x,y,z):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    A=2*x*y*z\n    return A\n    \ndef volume_ellipsoid(x,y,z):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    V=3/4*x*y*z\n    return V\n    \ndef surfacearea_ellipsoid(x,y,z):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    A=6*x*y*z\n    return A\n    \ndef volume_pyramid(x,y,z):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    V=x*(x+y)*z/2\n    return V\n    \ndef surfacearea_pyramid(x,y,z):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    A=2*x*(x+y)*z\n    return A\n    \ndef volume_hexahedron(x,y,z):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    V=2*x*(x+y)*z\n    return V\n    \ndef surfacearea_hexahedron(x,y,z):\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    A=6*x*(x+y)*z\n    return A\n    \ndef volume_octahedron(x,y,z):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    V=x*(x+y)*(x+z)*(x+y+z)\n    return V\n    \ndef surfacearea_octahedron(x,y,z):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    A=12*x*(x+y)*(x+z)*(x+y+z)\n    return A\n    \ndef volume_dodecahedron(x,y,z):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    V=x*(x+y)*(x+z)*(x+y+z)*(x+y+z+z)\n    return V\n    \ndef surfacearea_dodecahedron(x,y,z):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    A=20*x*(x+y)*(x+z)*(x+y+z)*(x+y+z+z)\n    return A\n    \ndef volume_icosahedron(x,y,z):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    V=x*(x+y)*(x+z)*(x+y+z)*(x+y+z+z)*(x+y+z+z+z)\n    return V\n    \ndef surfacearea_icosahedron(x,y,z):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    A=24*x*(x+y)*(x+z)*(x+y+z)*(x+y+z+z)*(x+y+z+z+z)\n    return A\n    \ndef volume_hypercube(x,y,z):\n    '''\n    Write a function to find the volume of a hypercube.\n    '''\n    V=1/3*x*y*z\n    return V\n    \ndef surfacearea_hypercube(x,y,z):\n    '''\n    Write a function to find the surface area of a hypercube.\n    '''\n    A=x*y*z\n    return A\n    \ndef volume_octahedron(x,y,z):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    V=x*(x+y)*(x+z)*(x+y+z)\n    return V\n    \ndef surfacearea_octahedron(x,y,z):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    A=12*x*(x+y)*(x+z)*(x+y+z)\n    return A\n    \ndef volume_icosahedron(x,y,z):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    V=x*(x+y)*(x+z)*(x+y+z)*(x+y+z+z)*(x+y+z+z+z)\n    return V\n    \ndef surfacearea_icosahedron(x,y,z):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    A=24*x*(x+y)*(x+z)*(x+y+z)*(x+y+z+z)*(x+y+z+z+z)\n    return A\n    \ndef volume_parabola(x,y):\n    '''\n    Write a function to find the volume of a parabola.\n    '''\n    V=x*y\n    return V\n    \ndef surfacearea_parabola(x,y):\n    '''\n    Write a function to find the surface area of a parabola.\n    '''\n    A=x*y*2\n    return A\n    \ndef volume_hyperparabola(x,y):\n    '''\n    Write a function to find the volume of a hyperparabola.\n    '''\n    V=x*y*2\n    return V\n    \ndef surfacearea_hyperparabola(x,y):\n    '''\n    Write a function to find the surface area of a hyperparabola.\n    '''\n    A=2*x*y\n    return A\n    \ndef volume_polygon(x,y,z):\n    '''\n    Write a function to find the volume of a polygon.\n    '''\n    V=x*y*z\n    return V\n    \ndef surfacearea_polygon(x,y,z):\n    '''\n    Write a function to find the surface area of a pol"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    ans=False\n    for i in range(len(A)):\n        flag=False\n        for j in range(len(B)):\n            if(A[i]==B[j]):\n                flag=True\n                break\n        if(flag==False):\n            ans=True\n            break\n    return ans\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    s=0\n    n=len(B)\n    for i in range(n):\n        if A[i]==B[i]:\n            s+=1\n    if s==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    else:\n        if len(A)==0:\n            return True\n        else:\n            return any(all(A[i]==B[j] for i in range(len(A))) for j in range(len(B))) \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def isSublist(List1,List2):\n        '''\n        Write a python function to check whether a list is sublist of another or not.\n        '''\n        # Write your logic here\n        print(\"List1 is : \",List1)\n        print(\"List2 is : \",List2)\n        n=len(List2)\n        m=len(List1)\n        for i in range(m):\n            if(List1[i]==List2[0]):\n                print(\"Item is : \",List1[i])\n                print(\"Item is : \",List2[0])\n                flag=1\n                break\n        if(flag==1):\n            for i in range(1,n):\n                if(List1[i]==List2[i]):\n                    flag=1\n                else:\n                    flag=0\n                    break\n            return flag\n        else:\n            return flag\n    \n    if(isSublist(A,B)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            j += 1\n        i += 1\n    return j == len(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = sorted(A)\n    B = sorted(B)\n    if A == B:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    s=0\n    for i in range(len(B)):\n        for j in range(len(A)):\n            if B[i]==A[j]:\n                s=s+1\n        if s==len(A):\n            return True\n        s=0\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    cnt = 0\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    for i in range(len(B)):\n        if A[i] not in B:\n            return False\n    for i in range(len(B)):\n        if A[i] in B:\n            cnt +=1\n    return cnt == len(A)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == None or B == None:\n        return False\n    for ele in A:\n        if ele not in B:\n            return False\n    return True\n    \nif __name__ == \"__main__\":\n    A = [1,2,3,5]\n    B = [2,3]\n    print(is_Sub_Array(A,B))\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 1\n    while n>0:\n        n = n//10\n        i = i*10\n    return i%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return (n%10)*last_Digit_Factorial(n//10)\n    "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0: \n        print(\"Input a positive number\")\n        return -1\n    else:\n        temp = 0\n        while n > 0:\n            temp += 1\n            n = n//10\n        return temp\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    i=1\n    while i<=n:\n        fact=fact*i\n        i+=1\n    print(fact%10)\n    return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #\n    # Your code here\n    #\n    if n <= 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n    if n == 6:\n        return 9\n    if n == 7:\n        return 10\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 6\n    if n == 12:\n        return 6\n    if n == 13:\n        return 6\n    if n == 14:\n        return 6\n    if n == 15:\n        return 6\n    if n == 16:\n        return 6\n    if n == 17:\n        return 6\n    if n == 18:\n        return 6\n    if n == 19:\n        return 6\n    if n == 20:\n        return 6\n    if n == 21:\n        return 6\n    if n == 22:\n        return 6\n    if n == 23:\n        return 6\n    if n == 24:\n        return 6\n    if n == 25:\n        return 6\n    if n == 26:\n        return 6\n    if n == 27:\n        return 6\n    if n == 28:\n        return 6\n    if n == 29:\n        return 6\n    if n == 30:\n        return 6\n    if n == 31:\n        return 6\n    if n == 32:\n        return 6\n    if n == 33:\n        return 6\n    if n == 34:\n        return 6\n    if n == 35:\n        return 6\n    if n == 36:\n        return 6\n    if n == 37:\n        return 6\n    if n == 38:\n        return 6\n    if n == 39:\n        return 6\n    if n == 40:\n        return 6\n    if n == 41:\n        return 6\n    if n == 42:\n        return 6\n    if n == 43:\n        return 6\n    if n == 44:\n        return 6\n    if n == 45:\n        return 6\n    if n == 46:\n        return 6\n    if n == 47:\n        return 6\n    if n == 48:\n        return 6\n    if n == 49:\n        return 6\n    if n == 50:\n        return 6\n    if n == 51:\n        return 6\n    if n == 52:\n        return 6\n    if n == 53:\n        return 6\n    if n == 54:\n        return 6\n    if n == 55:\n        return 6\n    if n == 56:\n        return 6\n    if n == 57:\n        return 6\n    if n == 58:\n        return 6\n    if n == 59:\n        return 6\n    if n == 60:\n        return 6\n    if n == 61:\n        return 6\n    if n == 62:\n        return 6\n    if n == 63:\n        return 6\n    if n == 64:\n        return 6\n    if n == 65:\n        return 6\n    if n == 66:\n        return 6\n    if n == 67:\n        return 6\n    if n == 68:\n        return 6\n    if n == 69:\n        return 6\n    if n == 70:\n        return 6\n    if n == 71:\n        return 6\n    if n == 72:\n        return 6\n    if n == 73:\n        return 6\n    if n == 74:\n        return 6\n    if n == 75:\n        return 6\n    if n == 76:\n        return 6\n    if n == 77:\n        return 6\n    if n == 78:\n        return 6\n    if n == 79:\n        return 6\n    if n == 80:\n        return 6\n    if n == 81:\n        return 6\n    if n == 82:\n        return 6\n    if n == 83:\n        return 6\n    if n == 84:\n        return 6\n    if n == 85:\n        return 6\n    if n == 86:\n        return 6\n    if n == 87:\n        return 6\n    if n == 88:\n        return 6\n    if n == 89:\n        return 6\n    if n == 90:\n        return 6\n    if n == 91:\n        return 6\n    if n == 92:\n        return 6\n    if n == 93:\n        return 6\n    if n == 94:\n        return 6\n    if n == 95:\n        return 6\n    if n == 96:\n        return 6\n    if n == 97:\n        return 6\n    if n == 98:\n        return 6\n    if n == 99:\n        return 6\n    if n == 100:\n        return 6\n    if n == 101:\n        return 6\n    if n == 102:\n        return 6\n    if n == 103:\n        return 6\n    if n == 104:\n        return 6\n    if n == 105:\n        return 6\n    if n == 106:\n        return 6\n    if n == 107:\n        return 6\n    if n == 108:\n        return 6\n    if n == 109:\n        return 6\n    if n == 110:\n        return 6\n    if n == 111:\n        return 6\n    if n == 112:\n        return 6\n    if n == 113:\n        return 6\n    if n == 114:\n        return 6\n    if n == 115:\n        return 6\n    if n == 116:\n        return 6\n    if n == 117:\n        return 6\n    if n == 118:\n        return 6\n    if n == 119:\n        return 6\n    if n == 120:\n        return 6\n    if n == 121:\n        return 6\n    if n == 122:\n        return 6\n    if n == 123:\n        return 6\n    if n == 124:\n        return 6\n    if n == 125:\n        return 6\n    if n == 126:\n        return 6\n    if n == 127:\n        return 6\n    if n == 128:\n        return 6\n    if n == 129:\n        return 6\n    if n == 130:\n        return 6\n    if n == 131:\n        return 6\n    if n == 132:\n        return 6\n    if n == 133:\n        return 6\n    if n == 134:\n        return 6\n    if n == 135:\n        return 6\n    if n == 136:\n        return 6\n    if n == 137:\n        return 6\n    if n == 138:\n        return 6\n    if n == 139:\n        return 6\n    if n == 140:\n        return 6\n    if n == 141:\n        return 6\n    if n == 142:\n        return 6\n    if n == 143:\n        return 6\n    if n == 144:\n        return 6\n    if n == 145:\n        return 6\n    if n == 146:\n        return 6\n    if n == 147:\n        return 6\n    if n == 148:\n        return 6\n    if n == 149:\n        return 6\n    if n == 150:\n        return 6\n    if n == 151:\n        return 6\n    if n == 152:\n        return 6\n    if n == 153:\n        return 6\n    if n == 154:\n        return 6\n    if n == 155:\n        return 6\n    if n == 156:\n        return 6\n    if n == 157:\n        return 6\n    if n == 158:\n        return 6\n    if n == 159:\n        return 6\n    if n == 160:\n        return 6\n    if n == 161:\n        return 6\n    if n == 162:\n        return 6\n    if n == 163:\n        return 6\n    if n == 164:\n        return 6\n    if n == 165:\n        return 6\n    if n == 166:\n        return 6\n    if n == 167:\n        return 6\n    if n == 168:\n        return 6\n    if n == 169:\n        return 6\n    if n == 170:\n        return 6\n    if n == 171:\n        return 6\n    if n == 172:\n        return 6\n    if n == 173:\n        return 6\n    if n == 174:\n        return 6\n    if n == 175:\n        return 6\n    if n == 176:\n        return 6\n    if n == 177:\n        return 6\n    if n == 178:\n        return 6\n    if n == 179:\n        return 6\n    if n == 180:\n        return 6\n    if n == 18"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n==0:\n        return 0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n % 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    assert (n >= 0), \"Input number should be a non-negative integer.\"\n    assert (type(n) == int), \"Input number should be an integer.\"\n    while n >= 10:\n        n = n // 10\n    return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 0): \n        print(\"Invalid input\") \n    if (n <= 10): \n        return n % 10\n    else: \n        return (n % 10) * last_Digit_Factorial(n//10) \n    \ndef get_Max_Ten_Digit_Factorial(n):\n    '''\n    Write a python function to find the largest ten digit factorial in the given range.\n    '''\n    max = 0\n    for i in range(1, n):\n        if (i <= 10):\n            curr = last_Digit_Factorial(i)\n            if (curr > max):\n                max = curr\n        else:\n            curr = last_Digit_Factorial(i//10)\n            if (curr > max):\n                max = curr\n    print(\"The maximum number of the factorial is : \", max)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    ans = 0\n    if n < 0:\n        print(\"Sorry, factorial does not exist for negative numbers\")\n    elif n == 0:\n        print(\"Factorial of 0 is 1\")\n    else:\n        while n > 0:\n            ans = ans*10 + n%10\n            n = n//10\n    return ans\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(0,len(list1))] + [list2[i] for i in range(0,len(list2))] + [list3[i] for i in range(0,len(list3))]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        output.extend([list1[i],list2[i],list3[i]])\n    return output\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Approach:\n    # To make the new list, I first create a list of lists of length of list1 and list2\n    # Then I interleave the lists to create a new list with first list having first element of list1 and second list having second element of list2 and third list having last element of list3.\n    # This will create a new list that contains each element of list1, list2 and list3 once.\n    # For the above example, interleave_lists(list1=[1,2,3],list2=[4,5,6],list3=[7,8,9])\n    # Will result in a new list with 1,4,7,2,5,8,3,6,9.\n    # Approach with use of loop:\n    # To make the new list, I first create a list of lists of length of list1 and list2\n    # Then I interleave the lists to create a new list with first list having first element of list1 and second list having second element of list2 and third list having last element of list3.\n    # This will create a new list that contains each element of list1, list2 and list3 once.\n    # For the above example, interleave_lists(list1=[1,2,3],list2=[4,5,6],list3=[7,8,9])\n    # Will result in a new list with 1,4,7,2,5,8,3,6,9.\n    # Approach with list comprehension:\n    # To make the new list, I first create a list of lists of length of list1 and list2\n    # Then I interleave the lists to create a new list with first list having first element of list1 and second list having second element of list2 and third list having last element of list3.\n    # This will create a new list that contains each element of list1, list2 and list3 once.\n    # For the above example, interleave_lists(list1=[1,2,3],list2=[4,5,6],list3=[7,8,9])\n    # Will result in a new list with 1,4,7,2,5,8,3,6,9.\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    x = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                x.append(list1[i])\n                x.append(list2[j])\n                x.append(list3[k])\n    return x\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == len(list2) and len(list2) == len(list3):\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i])\n            result.append(list2[i])\n            result.append(list3[i])\n        return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # init the result\n    result = []\n    # start from the first item in each list\n    i = 0\n    j = 0\n    k = 0\n    # loop through the list\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    # we could have ended by now\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1) + len(list2) + len(list3)):\n        if i < len(list1):\n            interleaved_list.append(list1[i])\n        if i < len(list1) + len(list2):\n            interleaved_list.append(list2[i - len(list1)])\n        if i < len(list1) + len(list2) + len(list3):\n            interleaved_list.append(list3[i - len(list1) - len(list2)])\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.extend((list1[i], list2[i], list3[i]))\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar.append(item)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = set(test_tup1)\n    b = set(test_tup2)\n    diss_elem = a - b\n    return diss_elem\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) - set(test_tup2))\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    for i,j in zip(test_tup1,test_tup2):\n        if i!= j:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Length of the tuples are not equal\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            print(\"Dissimilar Element found at index %d\" % i)\n            return\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    for (e1, e2) in zip(test_tup1, test_tup2):\n        if e1!= e2:\n            dissimilar_elements.append(e1)\n            dissimilar_elements.append(e2)\n            break\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(i for i in range(len(test_tup1)) if test_tup1[i]!= test_tup2[i])\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i]%2!= 0:\n            even_fnc(test_tuple[i])\n        else:\n            continue\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 0:\n        return test_tuple\n    else:\n        if len(test_tuple) == 1:\n            if type(test_tuple) == tuple:\n                if test_tuple[0] % 2!= 0:\n                    return test_tuple[0]\n                else:\n                    return test_tuple\n        else:\n            return even_ele(test_tuple[1:], even_fnc)\n            \ndef even_ele_usecase(test_tuple, even_fnc):\n    '''\n    This function should remove an element if its index is even.\n    '''\n    return even_ele(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        for i in test_tuple:\n            if not even_fnc(i):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        for i in test_tuple:\n            if not isinstance(i, tuple):\n                even_ele(i, even_fnc)\n        \n    elif isinstance(test_tuple, list):\n        test_tuple = sorted(test_tuple, key=lambda x: len(x))\n        test_tuple = tuple(filter(lambda x: len(x)%2 == 0, test_tuple))\n        return even_ele(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    even_tuple = []\n    \n    for item in test_tuple:\n        if even_fnc(item):\n            even_tuple.append(item)\n            \n    return tuple(even_tuple)\n    \n    \n    "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Nested tuple needs to be a tuple\")\n    if test_tuple == tuple():\n        raise TypeError(\"Nested tuple needs to be a tuple\")\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([i for i in test_tuple if even_fnc(i)])\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            item = even_ele(item, even_fnc)\n        new_tuple.append(item)\n    return even_fnc(new_tuple)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if(b == 0):\n        return 0\n    else:\n        print(b,s)\n        return 2*(b+s)\ndef surface_Area1(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b+s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # def surface_Area(b,s): \n    #     '''\n    #     Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    #     '''\n    #     # def surface_Area(b,s): \n    #     #     '''\n    #     #     Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    #     #     '''\n    #     if s <= 0: \n    #         return 0\n    #     else: \n    #         return (b*s*4) + (s//2*b*s)\n    return (b*s*4) + (s//2*b*s)\n    # return (b*s*4) + (s//2*b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b) + (s*s)*0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b <= 0 or s <= 0: \n        return -1\n    else: \n        return (4*(b*s)/3)+(b*s*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 2 + 2 * s + (s * (s + 1))\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    area = b*s*0.5\n    \n    print(area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h = b * s\n    sa = 2 * b * s + 2 * s * h + s * h + 4 * b * h\n    return sa\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(b*s*(s+1)/2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    area = 2*(b*s)+(s**2)+(b**2)\n    \n    return area\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print('This is empty dict')\n    else:\n        print('This is not empty dict')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dict is empty\")\n    else:\n        print(\"Not empty\")\nmy_dict({})\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # catalan number can be calculated recursively.\n    # for example\n    # catalan(1) = 1\n    # catalan(2) = 2\n    # catalan(3) = 4\n    # catalan(4) = 7\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 'Invalid input'\n    if num == 0:\n        return 1\n    prev = 0\n    curr = 1\n    for i in range(num):\n        prev, curr = curr, prev+curr\n    return curr\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Your code here\n    c = 0\n    for n in range(num + 1):\n        c += math.factorial(2 * n) / (math.factorial(n + 1) * math.factorial(n))\n    return c\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = 0\n    for i in range(1,num+1):\n        result += int(catalan_number_dp(i))\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def generate_catalan_numbers(num):\n        def catalan_rec(n):\n            if n == 0:\n                return 1\n            catalan_rec_n_minus_1 = generate_catalan_numbers(n-1)\n            catalan_n_minus_1_plus_1_times_catalan_n_minus_1 = 0\n            for n_minus_1 in range(0, n):\n                catalan_n_minus_1_plus_1_times_catalan_n_minus_1 += catalan_rec_n_minus_1[n_minus_1] * catalan_rec_n_minus_1[n_minus_1]\n            return catalan_n_minus_1_plus_1_times_catalan_n_minus_1\n        return catalan_rec(num)\n    return generate_catalan_numbers(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = 1\n    for i in range(0, num):\n        res = res * (2 * i + 1) / (2 * i + 1)\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return (catalan_number(num-1) * num) / (num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    return num * catalan_number(num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = 1\n    for i in range(num):\n        res *= (num - i)/(i + 1)\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    total = 0\n    for i in range(1, num + 1):\n        total += catalan_number(i-1)*catalan_number(num-i)\n    return total\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    output = []\n    for i in range(len(text)):\n        if text[i] == \"ly\":\n            output.append(text[i])\n    return output\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall('(ly)$', text, re.I)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    pattern = r'^(a )?ly$'\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for matchNum, match in enumerate(matches, start=1):\n        result.append({'matchNum': matchNum,'match': match})\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text=text.replace('\\n',' ')\n    text=text.lower()\n    adverbs=['ly','so','on','in']\n    adverbs_positions=[]\n    for i in range(0,len(text)):\n        if text[i] in adverbs:\n            if text[i:i+2]=='ly':\n                adverbs_positions.append(i)\n            elif text[i:i+3]=='so':\n                adverbs_positions.append(i)\n            elif text[i:i+3]=='on':\n                adverbs_positions.append(i)\n            elif text[i:i+3]=='in':\n                adverbs_positions.append(i)\n    return adverbs_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    rx = re.compile(r\"\\s+[a-zA-Z]*ly\\s+\")\n    matches = rx.finditer(text)\n    for m in matches:\n        yield m.start()\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r\"ly$\",text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb = re.findall(r'\\bly\\b', text)\n    adverb_start = []\n    adverb_end = []\n    for i in range(len(adverb)):\n        adverb_start.append(text.index(adverb[i]))\n        adverb_end.append(adverb_start[i] + 1)\n    return adverb_start, adverb_end\n    \ndef find_proper_nouns(text):\n    '''\n    Write a function to find all proper nouns in a given string.\n    '''\n    proper_noun = re.findall(r'\\w+\\.', text)\n    proper_nouns = []\n    for i in range(len(proper_noun)):\n        proper_nouns.append(text.index(proper_noun[i]))\n    return proper_nouns\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    regx = r'(ly|uh|uhly|uhuh|uhuhly|uhuhly)'\n    positions = re.finditer(regx,text,re.MULTILINE)\n    for match in positions:\n        adverbs.append((match.start(),match.end()))\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r\"ly\")\n    match = re.search(regex, text)\n    if match:\n        adverb_list = []\n        begin = match.start()\n        end = match.end()\n        adverb = text[begin:end]\n        adverb_list.append(adverb)\n    return adverb_list\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    pq = list()\n    \n    for i in range(n):\n        item = heapq.heappop(items)\n        heapq.heappush(pq,item)\n        \n    return pq\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n = n\n    items.sort(key = lambda x: x[1],reverse = True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # if n>len(items):\n    #     return items\n    # h = []\n    # for i in range(n):\n    #     temp = heapq.heappushpop(h,items[i])\n    # return temp\n    heapq.heapify(items)\n    return heapq.nlargest(n,items)\n    \n    # from heapq import heappush,heappop\n    # heap = []\n    # for item in items:\n    #     heappush(heap,item)\n    # return heap\n    \n    # if n > len(items):\n    #     return items\n    # result = []\n    # for _ in range(n):\n    #     item = heappop(heap)\n    #     result.append(item)\n    # return result\n    \n    # def topKFrequent(nums,k):\n    #     d = {}\n    #     for i in nums:\n    #         d[i] = d.get(i,0) + 1\n    #     # print(d)\n    #     items = d.items()\n    #     # print(items)\n    #     heapq.heapify(items)\n    #     # print(items)\n    #     return [x[0] for x in heapq.nlargest(k,items)]\n    \n    # import heapq\n    # items = [1,1,1,2,2,3,3,3,4,5,5]\n    # k = 4\n    # print(heapq.nlargest(k,items))\n    # print(heapq.nsmallest(k,items))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    l=[]\n    for i in items:\n        l.append(i[2])\n    heapq.heapify(l)\n    res=[]\n    for i in range(n):\n        res.append(heapq.heappop(l))\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create dictionary and keep track of items with their respective price.\n    # Get price of item and item type as well.\n    # Sort dictionary in descending order based on item price.\n    # After sorting, we will get top n items by popping out.\n    # TEMPORARY\n    # items = {\n    #     (1, 'Toyota Prius'): 12499,\n    #     (2, 'Honda Civic'): 2349,\n    #     (3, 'Kia Rio'): 14959,\n    #     (4, 'Toyota Corolla'): 12289,\n    #     (5, 'Ford Focus'): 937,\n    #     (6, 'Honda Civic'): 4521,\n    #     (7, 'Toyota Prius'): 940,\n    #     (8, 'Honda Civic'): 323,\n    #     (9, 'Toyota Corolla'): 1189,\n    #     (10, 'Toyota Corolla'): 940,\n    # }\n    d = {}\n    for i in range(n):\n        if items[i] in d:\n            d[items[i]] = d[items[i]] + 1\n        else:\n            d[items[i]] = 1\n    d_sorted = sorted(d.items(),key=lambda x:x[1],reverse=True)\n    return d_sorted\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x:x[1],reverse=True)\n    items = items[:n]\n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_heap = []\n    for i in items:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap,i)\n        else:\n            if i < max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap,i)\n    return max_heap\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    heap = []\n    for item in items:\n        if item not in result:\n            heapq.heappush(heap,(-item[1],item))\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    price_heap = []\n    \n    for item in items:\n        price_heap.append((item, items[item]))\n    \n    heapq.heapify(price_heap)\n    \n    result = []\n    \n    for i in range(n):\n        result.append(heapq.heappop(price_heap))\n        \n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    size=len(l)\n    if n <= 0 or size < n:\n        return\n    if n == size:\n        return\n    if n > size:\n        return\n    #starting at nth element and ending before end\n    start = l[:n]\n    end = l[n:]\n    #add beginning of list to end of list\n    #this is the question\n    #what if the size is small\n    if n == 1:\n        return end\n    else:\n        return start + split_Arr(end, n-1)\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 1:\n        return l\n    else:\n        i = 0\n        while i + n <= len(l):\n            sub_list = l[i:i+n]\n            i = i + n\n            l.pop(0)\n            l.append(sub_list)\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # l=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]\n    # n=2\n    # split_Arr(l,n)\n    # ['1','2','3',l[2:n], '4', '5', '6']\n    \n    l1 = l[0:n]\n    l2 = l[n:]\n    l2.extend(l1)\n    print(l1, l2)\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if(n >= len(l)):\n        return l\n    return l[:n] + l[n+1:]\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        return False\n    else:\n        return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n>len(l):\n        print(\"n cannot be greater than length of the list\")\n    elif n==0:\n        print(l)\n    else:\n        return l[:n],l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    print(l[0:n])\n    print(l[n:len(l)])\n    return l[0:n] + l[n:len(l)]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x = tuple(listx)\n    return x\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    return set(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    a = tuple(listx)\n    return a\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in range(len(listx)):\n        tup = tup + (listx[i],)\n    return tup\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    num = nums[0]\n    for i in range(1, len(nums)):\n        if num < nums[i]:\n            num = nums[i]\n    return (nums[-1] - num)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = sorted(nums)\n    return a[-1] - a[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    maxi = max(nums)\n    mini = min(nums)\n    return maxi-mini\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        elif nums[i] < min:\n            min = nums[i]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    lst = sorted(nums)\n    lst.pop(l-1)\n    return lst[0]-lst[l-1]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    for i in range(a, b):\n        if i**2 == i:\n            print(i)\n    \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return range(a, b + 1)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # my_int = range(a, b)\n    # for i in my_int:\n    #     if i ** 2 == i:\n    #         print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return list(filter(lambda x: a < x**2 < b, range(a, b)))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = b - a\n    ans = []\n    for i in range(a, b+1):\n        if i * i == n:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i for i in range(a, b+1) if i**2 == i]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = int(math.ceil(math.sqrt((b ** 2) - (a ** 2))))\n    return n\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b):\n        if i * i == i:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if math.sqrt(i).is_integer():\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (b-a) <= 1:\n        return a**2\n    else:\n        return perfect_squares(a, (a + b)//2) if a**2 < (b + a)**2/2 else perfect_squares((a + b)//2, b)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y,x)\n    \n    if r >= 0:\n        # clockwise\n        # round theta and r to get the angle and distance, respectively\n        angle = int(round(math.degrees(theta)))\n        distance = int(round(r))\n    else:\n        # counterclockwise\n        theta = -theta\n        angle = int(round(math.degrees(theta)))\n        distance = int(round(r))\n    return (angle,distance)\n    \ndef polar_rect_error(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates, but handle extreme cases like when the polar coordinates are too large.\n    '''\n    if x**2 + y**2 <= 1:\n        return None\n    else:\n        r = math.sqrt(x**2 + y**2)\n        theta = math.atan2(y,x)\n        \n        if r >= 0:\n            # clockwise\n            # round theta and r to get the angle and distance, respectively\n            angle = int(round(math.degrees(theta)))\n            distance = int(round(r))\n        else:\n            # counterclockwise\n            theta = -theta\n            angle = int(round(math.degrees(theta)))\n            distance = int(round(r))\n        return (angle,distance)\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    angle = int(round(math.degrees(math.atan2(y,x))))\n    distance = int(round(math.sqrt(x**2 + y**2)))\n    return (angle,distance)\n    \ndef rect_polar_error(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates, but handle extreme cases like when the coordinates are too small.\n    '''\n    if x**2 + y**2 <= 1:\n        return None\n    else:\n        angle = int(round(math.degrees(math.atan2(y,x))))\n        distance = int(round(math.sqrt(x**2 + y**2)))\n        return (angle,distance)\n    \ndef rect_polar_fuzzy(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates, using the fuzzy algorithm.\n    '''\n    angle = int(round(math.degrees(math.atan2(y,x))))\n    distance = int(round(math.sqrt(x**2 + y**2)))\n    return (angle,distance)\n    \ndef rect_polar_fuzzy_error(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates, using the fuzzy algorithm, but handle extreme cases like when the coordinates are too small.\n    '''\n    if x**2 + y**2 <= 1:\n        return None\n    else:\n        angle = int(round(math.degrees(math.atan2(y,x))))\n        distance = int(round(math.sqrt(x**2 + y**2)))\n        return (angle,distance)\n    \ndef arc_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = math.atan2(y,x)\n    distance = math.sqrt(x**2 + y**2)\n    return (angle,distance)\n    \ndef arc_polar_error(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates, but handle extreme cases like when the polar coordinates are too large.\n    '''\n    if x**2 + y**2 <= 1:\n        return None\n    else:\n        angle = math.atan2(y,x)\n        distance = math.sqrt(x**2 + y**2)\n        return (angle,distance)\n    \ndef rect_arc(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    distance = math.sqrt(x**2 + y**2)\n    angle = math.atan2(y,x)\n    return (angle,distance)\n    \ndef rect_arc_error(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates, but handle extreme cases like when the coordinates are too small.\n    '''\n    if x**2 + y**2 <= 1:\n        return None\n    else:\n        angle = math.atan2(y,x)\n        distance = math.sqrt(x**2 + y**2)\n        return (angle,distance)\n    \ndef rect_arc_fuzzy(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates, using the fuzzy algorithm.\n    '''\n    distance = math.sqrt(x**2 + y**2)\n    angle = math.atan2(y,x)\n    return (angle,distance)\n    \ndef rect_arc_fuzzy_error(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates, using the fuzzy algorithm, but handle extreme cases like when the coordinates are too small.\n    '''\n    if x**2 + y**2 <= 1:\n        return None\n    else:\n        distance = math.sqrt(x**2 + y**2)\n        angle = math.atan2(y,x)\n        return (angle,distance)\n    \ndef area_circle(r):\n    '''\n    Write a function to compute the area of a circle of radius r.\n    '''\n    return 3.14 * r**2\n    \ndef area_circle_error(r):\n    '''\n    Write a function to compute the area of a circle of radius r, but handle extreme cases like when r is zero.\n    '''\n    if r == 0:\n        return 0\n    else:\n        return 3.14 * r**2\n    \ndef area_rectangle(x,y):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    return x * y\n    \ndef area_rectangle_error(x,y):\n    '''\n    Write a function to compute the area of a rectangle, but handle extreme cases like when either x or y is zero.\n    '''\n    if x == 0:\n        return 0\n    if y == 0:\n        return 0\n    else:\n        return x * y\n    \ndef area_triangle(x,y):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    return.5 * x * y\n    \ndef area_triangle_error(x,y):\n    '''\n    Write a function to compute the area of a triangle, but handle extreme cases like when either x or y is zero.\n    '''\n    if x == 0:\n        return 0\n    if y == 0:\n        return 0\n    else:\n        return.5 * x * y\n    \ndef area_square(x,y):\n    '''\n    Write a function to compute the area of a square.\n    '''\n    return x * y\n    \ndef area_square_error(x,y):\n    '''\n    Write a function to compute the area of a square, but handle extreme cases like when either x or y is zero.\n    '''\n    if x == 0:\n        return 0\n    if y == 0:\n        return 0\n    else:\n        return x * y\n    \ndef area_square_fuzzy(x,y):\n    '''\n    Write a function to compute the area of a square, using the fuzzy algorithm.\n    '''\n    return x * y\n    \ndef area_square_fuzzy_error(x,y):\n    '''\n    Write a function to compute the area of a square, using the fuzzy algorithm, but handle extreme cases like when either x or y is zero.\n    '''\n    if x == 0:\n        return 0\n    if y == 0:\n        return 0\n    else:\n        return x * y\n    \ndef area_parallelogram(x,y):\n    '''\n    Write a function to compute the area of a parallelogram.\n    '''\n    return x * y\n    \ndef area_parallelogram_error(x,y):\n    '''\n    Write a functio"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    return (r, -x, -y)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = math.sqrt((x**2)+(y**2))\n    t = math.atan(y/x)\n    if a == 0:\n        print(\"Polar coordinates are invalid.\")\n    else:\n        print(f\"Radius: {a} \\nAngle: {t}\")\n    return a, t\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    polar = x**2 + y**2\n    r = cmath.sqrt(polar)\n    rect = (r.real,r.imag)\n    return rect\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    theta=cmath.acos(x/r)\n    x_=r*theta.real\n    y_=r*theta.imag\n    return (x_,y_)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    theta=cmath.acos((r**2+x**2-y**2)/(2*r*x))\n    return (r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    R = r*cmath.exp(1j*theta)\n    x_coordinate = R.real\n    y_coordinate = R.imag\n    return x_coordinate,y_coordinate\n    \n    \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # let first of the equation x^2+y^2=r\n    a=x*x+y*y\n    # now let second eqn be x*x-y^2=r\n    b=2*x*y\n    # now let third eqn be y*y-x^2=r\n    c=y*y-x*x\n    # now we have two rectanglular equations\n    # we solve for the inegers\n    # which will give the answer for r\n    r=(a+b+c)/2\n    # now let us solve for the solutions\n    # first the x coordinates\n    x1=(-b-cmath.sqrt(b*b-4*a*c))/2*a\n    x2=(-b+cmath.sqrt(b*b-4*a*c))/2*a\n    # now y coordinates\n    y1=r*(x1/a)\n    y2=r*(x2/a)\n    # return the answer\n    return (x1,y1),(x2,y2)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2 + y**2)**.5\n    theta = cmath.phase(x+y*1j)\n    return (r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    return r, cmath.atan2(y, x)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x*x+y*y\n    theta = cmath.acos(y/r)\n    xr = r*theta.real\n    yr = r*theta.imag\n    return(xr,yr)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if not isinstance(newList,list):\n        print(\"Invalid list\")\n    else:\n        newList[0],newList[-1]=newList[-1],newList[0]\n        print(\"List after interchange :\",newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    x = newList[0]\n    newList.remove(x)\n    newList.append(x)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    if(size<=1):\n        return\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    \nswap_List([1, 2, 3, 4])"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\nprint(swap_List([1,2,3,4,5]))\nprint(swap_List(['a','b','c','d']))\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first=newList[0]\n    last=newList[-1]\n    newList[0]=last\n    newList[-1]=first\n    return newList\n    # Code Here\n    \n    \n    \n    \n    \ndef swap_List2(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a=newList.pop(0)\n    newList.append(a)\n    a=newList.pop(-1)\n    newList.insert(0,a)\n    return newList\n    # Code Here\n    \n    \n    \n    \n    \n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a list.\n    '''\n    newList.reverse()\n    return newList\n    # Code Here\n    \n    \n    \n    \n    \ndef reverse_List2(newList):\n    '''\n    Write a python function to reverse a list.\n    '''\n    newList.reverse()\n    return newList\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in range(len(newList)):\n        if newList[i]==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \ndef count_List2(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in range(len(newList)):\n        if newList[i]==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List3(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List4(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    newList.count(4)\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List5(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    newList.count(4)\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \n    \ndef count_List6(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    newList.count(4)\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \n    \ndef count_List7(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    newList.count(4)\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \n    \ndef count_List8(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List9(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List10(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List11(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List12(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \n    \ndef count_List13(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef count_List14(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List15(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef count_List16(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List17(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List18(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef count_List19(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \ndef count_List20(newList):\n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    count=0\n    for i in newList:\n        if i==4:\n            count=count+1\n    return count\n    # Code Here\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef count_List21(newList):\n    '''\n    Write a python function t"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize a counter variable\n    cnt = 0\n    \n    # calculate the binomial coefficient\n    for i in range(n+1):\n        cnt += (1/((2*i) + 1))\n    return int(cnt)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or k==n:\n        return 1\n    return binomial_Coeff(n-1,k)+(n*k)/(n+1)\n    \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            C +=  ( (-1)**j ) * ( 1 + (-1)**(i-j) ) * ( k-j )**i\n    return C\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum=0\n    for i in range(1,k+1):\n        sum=sum+factorial(n)/(factorial(i)*factorial(n-i))\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    #taking the factorial of k for the calculation of C_k\n    fk = fact(k)\n    \n    #taking the factorial of n-1 for the calculation of C_n\n    fn = fact(n-1)\n    \n    #taking the product of two factors\n    prod = fk/fn\n    \n    return prod\n    \n    \n    \n    \n    "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum=0\n    for i in range(k):\n        sum=sum+(2*(n-i))/(k*i+i)\n    return int(sum)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    Coeff = []\n    for i in range(1,n):\n        s = 0\n        for j in range(1,i+1):\n            s = s + n * pow(j,n-1) * pow(j,1)\n        Coeff.append(s)\n    return sum(Coeff)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    if n < 0 or k < 0:\n        return -1\n    return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return math.factorial(n)//math.factorial(k)//math.factorial(n-k) \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (pow(n,k)*pow(n-1,k-1))/pow(k,2)\n    \ndef Z_Helper(n,k,alpha):\n    '''\n    Write a python function to calculate Z-helper function.\n    '''\n    return binomial_Coeff(n-k+alpha-1,k)*pow(1-alpha,k)*pow(alpha,n-k+alpha-1)\n    \ndef Z(n,k,alpha):\n    '''\n    Write a python function to calculate Z value for given alpha\n    '''\n    return 1 - binomial_Coeff(n-k+alpha-1,k)*pow(1-alpha,k)*pow(alpha,n-k+alpha-1)\n    \ndef B(n,k,alpha,delta):\n    '''\n    Write a python function to calculate B value for given alpha and delta\n    '''\n    return 1 - Z_Helper(n,k,alpha) - Z_Helper(n,k,delta)\n    \ndef K(n,k,alpha,delta):\n    '''\n    Write a python function to calculate K value for given alpha and delta\n    '''\n    return Z(n,k,alpha) - Z(n,k,delta)\n    \ndef P(n,k,alpha,delta):\n    '''\n    Write a python function to calculate P value for given alpha and delta\n    '''\n    return 1 - K(n,k,alpha,delta)\n    \ndef T(n,k,alpha,delta):\n    '''\n    Write a python function to calculate T value for given alpha and delta\n    '''\n    return 1 - (P(n,k,alpha,delta) + 0.5*(1-alpha)*alpha*(1-alpha)*(1-delta)*(1-delta))\n    \ndef Test_Result(n,k,alpha,delta):\n    '''\n    Write a python function to test given alpha and delta\n    '''\n    P_Result = P(n,k,alpha,delta)\n    T_Result = T(n,k,alpha,delta)\n    print(\"P value is = \", P_Result)\n    print(\"T value is = \", T_Result)\n    if (P_Result < 0.01):\n        print(\"P value is less than 0.01\")\n    else:\n        print(\"P value is less than 0.01\")\n    if (T_Result > 0.99):\n        print(\"T value is more than 0.99\")\n    else:\n        print(\"T value is less than 0.99\")\n    \ndef Test_with_given_values(n,k,alpha,delta):\n    '''\n    Write a python function to test given alpha and delta\n    '''\n    P_Result = P(n,k,alpha,delta)\n    T_Result = T(n,k,alpha,delta)\n    print(\"P value is = \", P_Result)\n    print(\"T value is = \", T_Result)\n    if (P_Result < 0.01):\n        print(\"P value is less than 0.01\")\n    else:\n        print(\"P value is less than 0.01\")\n    if (T_Result > 0.99):\n        print(\"T value is more than 0.99\")\n    else:\n        print(\"T value is less than 0.99\")\n        \ndef Test_with_given_values_2(n,k,alpha,delta):\n    '''\n    Write a python function to test given alpha and delta\n    '''\n    P_Result = P(n,k,alpha,delta)\n    T_Result = T(n,k,alpha,delta)\n    print(\"P value is = \", P_Result)\n    print(\"T value is = \", T_Result)\n    if (P_Result < 0.01):\n        print(\"P value is less than 0.01\")\n    else:\n        print(\"P value is less than 0.01\")\n    if (T_Result > 0.99):\n        print(\"T value is more than 0.99\")\n    else:\n        print(\"T value is less than 0.99\")\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith(\"0\") and len(ip)>1:\n        return ip[1:]\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_no_zeros = ip.split('.')\n    for i in range(0, len(ip_no_zeros)):\n        if len(ip_no_zeros[i]) == 0:\n            ip_no_zeros[i] = '0'\n    return '.'.join(ip_no_zeros)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not re.match(r\"^\\d.*$\",ip):\n        ip = '0'+ip\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ans = re.sub(r'0+', '', ip)\n    return ans\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return '0'\n    for i in range(0,len(ip)):\n        if ip[i] == '0':\n            ip = ip[i+1:]\n        else:\n            break\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'\\b0+$', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile('0+$')\n    return re.sub(pattern, '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    \n    \n    \n    print(ip)\n    ip_list = list(ip)\n    \n    # remove leading zeros from the ip\n    while ip_list and ip_list[0] == '0':\n        ip_list.pop(0)\n    \n    \n    # join the remaining ip with '.'\n    new_ip = '.'.join(ip_list)\n    \n    \n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(\"^0*\", \"\", ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\ndef remove_brackets(text):\n    '''\n    Write a function that removes brackets from text\n    '''\n    #remove brackets from a string\n    return re.sub('\\[|\\]', '', text)\ndef remove_non_ascii(text):\n    '''\n    Write a function that removes non ascii characters from a string\n    '''\n    #remove non ascii characters from a string\n    return re.sub('[^\\x00-\\x7F]+', '', text)\ndef remove_numbers(text):\n    '''\n    Write a function that removes numbers from a string\n    '''\n    #remove numbers from a string\n    return re.sub('\\d+', '', text)\ndef remove_word_commas(text):\n    '''\n    Write a function that removes word commas from a string\n    '''\n    #remove words commas from a string\n    return re.sub('\\,', '', text)\ndef remove_hyphen(text):\n    '''\n    Write a function that removes hyphens from a string\n    '''\n    #remove hyphens from a string\n    return re.sub('-', '', text)\ndef remove_fullstop(text):\n    '''\n    Write a function that removes full stops from a string\n    '''\n    #remove full stops from a string\n    return re.sub('\\.', '', text)\ndef remove_dot(text):\n    '''\n    Write a function that removes dots from a string\n    '''\n    #remove dots from a string\n    return re.sub('\\.', '', text)\ndef remove_dots(text):\n    '''\n    Write a function that removes dots from a string\n    '''\n    #remove dots from a string\n    return re.sub('\\.', '', text)\ndef remove_comma(text):\n    '''\n    Write a function that removes commas from a string\n    '''\n    #remove commas from a string\n    return re.sub('\\,', '', text)\ndef remove_dotcomma(text):\n    '''\n    Write a function that removes dot, comma and full stop from a string\n    '''\n    #remove dot, comma and full stop from a string\n    return re.sub('\\.\\,', '', text)\ndef remove_comma(text):\n    '''\n    Write a function that removes commas from a string\n    '''\n    #remove commas from a string\n    return re.sub('\\,', '', text)\ndef remove_decimal(text):\n    '''\n    Write a function that removes decimal points from a string\n    '''\n    #remove decimal points from a string\n    return re.sub('\\.', '', text)\ndef remove_currency(text):\n    '''\n    Write a function that removes currency symbols from a string\n    '''\n    #remove currency symbols from a string\n    return re.sub('[$\u20ac\u00a3\u00a2\u20bd\u20b9\u20be\u20b5\u20ba\u20b9]', '', text)\ndef remove_space(text):\n    '''\n    Write a function that removes spaces from a string\n    '''\n    #remove spaces from a string\n    return text.replace(' ', '')\ndef remove_non_digit(text):\n    '''\n    Write a function that removes all non-digit characters from a string\n    '''\n    #remove non-digit characters from a string\n    return re.sub('\\D', '', text)\ndef remove_cents(text):\n    '''\n    Write a function that removes all the $ and \u20ac signs from a string\n    '''\n    #remove $ and \u20ac signs from a string\n    return re.sub('\\$|\u20ac', '', text)\ndef remove_dash(text):\n    '''\n    Write a function that removes all the - signs from a string\n    '''\n    #remove - signs from a string\n    return re.sub('-', '', text)\ndef remove_quote(text):\n    '''\n    Write a function that removes all the quotes from a string\n    '''\n    #remove quotes from a string\n    return re.sub('\\\"', '', text)\ndef remove_parentheses(text):\n    '''\n    Write a function that removes all the parentheses from a string\n    '''\n    #remove parentheses from a string\n    return re.sub('\\(', '', text)\ndef remove_between_square_brackets(text):\n    '''\n    Write a function that removes all the square brackets from a string\n    '''\n    #remove square brackets from a string\n    return re.sub('\\[|\\]', '', text)\ndef remove_multiple_spaces(text):\n    '''\n    Write a function that removes all the spaces that occur in a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_word_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_full_stop_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_question_mark_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_comma_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_full_stop_question_mark_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_full_stop_comma_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_question_mark_comma_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_question_mark_full_stop_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_comma_full_stop_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_comma_full_stop_question_mark_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_full_stop_comma_question_mark_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_question_mark_full_stop_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_full_stop_question_mark_comma_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remove_multiple_full_stop_comma_question_mark_spaces(text):\n    '''\n    Write a function that removes multiple spaces from a string\n    '''\n    #remove multiple spaces from a string\n    return re.sub(' +','', text)\ndef remov"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    diff = abs(even[0]-odd[0])\n    for i in range(1,len(even)):\n        diff = min(diff,abs(even[i]-odd[i]))\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    even_index = 0\n    odd_index = 0\n    even_diff = None\n    odd_diff = None\n    for i in range(len(list1)-1):\n        if list1[i] % 2 == 0:\n            even_index = i\n        else:\n            odd_index = i\n    if even_index == 0 and odd_index!= 0:\n        even_diff = list1[0] - list1[odd_index]\n    elif even_index!= 0 and odd_index == 0:\n        odd_diff = list1[0] - list1[even_index]\n    elif even_index!= 0 and odd_index!= 0:\n        even_diff = list1[even_index] - list1[odd_index]\n        odd_diff = list1[0] - list1[even_index]\n    return even_diff, odd_diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    even_num = max(even_list)\n    odd_num = min(odd_list)\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return abs(even[0] - odd[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in range(0,len(list1)):\n        if list1[i]%2 == 1:\n            odd_list.append(list1[i])\n        else:\n            even_list.append(list1[i])\n    odd_list.sort()\n    even_list.sort()\n    return even_list[0] - odd_list[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    print(\"Even Number List: \", even_list)\n    print(\"Odd Number List: \", odd_list)\n    print(\"Difference is: \", len(even_list)-len(odd_list))\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    a = len(list1)\n    odd = 0\n    even = 0\n    for i in range(a):\n        if(i%2 == 0):\n            even = even + list1[i]\n        else:\n            odd = odd + list1[i]\n    return(even-odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = 0\n    odd_number = 0\n    for number in list1:\n        if number % 2 == 0:\n            even_number = number\n        else:\n            odd_number = number\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return -1\n    else:\n        even_odd_list = []\n        for i in range(len(list1)):\n            if i % 2 == 0:\n                even_odd_list.append(list1[i])\n            else:\n                even_odd_list.append(list1[i])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[1])\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m = len(str1)\n    n = len(str2)\n    c1 = 0\n    c2 = 0\n    s1 = \"0\"\n    s2 = \"0\"\n    for i in range(m) :\n        if str1[i] == \"1\" :\n            s1 += \"0\"\n            c1 += 1\n        else :\n            s1 += \"1\"\n    for i in range(n) :\n        if str2[i] == \"1\" :\n            s2 += \"0\"\n            c2 += 1\n        else :\n            s2 += \"1\"\n    if c1 > c2 :\n        return -1\n    \n    if c1 == c2 :\n        if s1 == s2 :\n            return 0\n        return -1\n    else :\n        if c1 > c2 :\n            for i in range(c2) :\n                if s1[i]!= s2[i] :\n                    return -1\n        else :\n            for i in range(c1) :\n                if s2[i]!= s1[i] :\n                    return -1\n    return c1 - c2 + 1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    cnt = 0\n    p1 = 0\n    p2 = 0\n    i = 0\n    while i < len(str1):\n        if str1[i] == str2[i]:\n            cnt = cnt+1\n        else:\n            if i<p1:\n                p1 = i\n            if p2<i and str2[i]!=str2[p2]:\n                p2 = i\n            if p2<p1:\n                cnt = cnt + 1\n                p1 = p2\n                p2 = i\n        i=i+1\n    if p2!= i:\n        cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1 = str1.replace(\"0\",\" \")\n    str2 = str2.replace(\"0\",\" \")\n    for i in range(0,len(str1)) :\n        if str1[i]!= str2[i] :\n            if str1[i]!= \" \" :\n                if str2[i]!= \" \" :\n                    count += 1\n                    str1 = str1.replace(str1[i],\"\")\n                    str2 = str2.replace(str2[i],\"\")\n    return count\nif __name__ == \"__main__\" :\n    str1 = \"101\"\n    str2 = \"1110\"\n    print(min_Swaps(str1,str2))"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m = len(str1)\n    n = len(str2)\n    if (m!=n):\n        print(\"\\nString 1 length and String 2 length are not equal\")\n        return\n    # if m==n:\n    #     print(\"\\nString 1 and String 2 are same length\\n\")\n    #     return\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swap = 0\n    \n    # for i in range(0,len(str1)):\n    #     for j in range(i+1,len(str1)):\n    #         if str1[i] > str1[j]:\n    #             swap += 1\n    #         else:\n    #             break\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    number_of_swaps = 0\n    for i in range(0,len(str1)) : \n        if str1[i]!= str2[i] : \n            str1_list = list(str1)\n            str2_list = list(str2)\n            str1_list[i],str2_list[i] = str2_list[i],str1_list[i] \n            str1 = ''.join(str1_list) \n            str2 = ''.join(str2_list) \n            number_of_swaps += 1\n    print(\"No. of Swap:\",number_of_swaps)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #str1 = '011011001101'\n    #str2 = '01101101110'\n    num_swaps = 0\n    p1,p2 = 0,0\n    while p1 < len(str1) and p2 < len(str2) :\n        if str1[p1]!= str2[p2] :\n            str1_copy = str1[p1]\n            str1[p1] = str2[p2]\n            str2[p2] = str1_copy\n            num_swaps += 1\n            #print(num_swaps)\n        p1 += 1\n        p2 += 1\n    print(\"The number of swaps required are : \",num_swaps)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    ans=0\n    str1=str1.strip()\n    str2=str2.strip()\n    str1='0'+str1\n    str2='0'+str2\n    str1_list=list(str1)\n    str2_list=list(str2)\n    for i in range(len(str1_list)):\n        if str1_list[i]=='0' and str2_list[i]=='0':\n            continue\n        elif str1_list[i]=='1' and str2_list[i]=='0':\n            if i==0:\n                str1_list[i]=str1_list[i]+str1_list[i+1]\n                str1_list[i+1]=''\n                ans=ans+1\n            elif i==len(str1_list)-1:\n                str1_list[i]=str1_list[i]+str1_list[i-1]\n                str1_list[i-1]=''\n                ans=ans+1\n            else:\n                str1_list[i]=str1_list[i]+str1_list[i+1]\n                str1_list[i+1]=''\n                ans=ans+1\n        elif str1_list[i]=='0' and str2_list[i]=='1':\n            if i==0:\n                str2_list[i]=str2_list[i]+str2_list[i+1]\n                str2_list[i+1]=''\n                ans=ans+1\n            elif i==len(str2_list)-1:\n                str2_list[i]=str2_list[i]+str2_list[i-1]\n                str2_list[i-1]=''\n                ans=ans+1\n            else:\n                str2_list[i]=str2_list[i]+str2_list[i+1]\n                str2_list[i+1]=''\n                ans=ans+1\n        else:\n            break\n    for i in range(len(str1_list)):\n        if str1_list[i]=='0' and str2_list[i]=='0':\n            continue\n        elif str1_list[i]=='1' and str2_list[i]=='0':\n            if i==0:\n                str1_list[i]=str1_list[i]+str1_list[i+1]\n                str1_list[i+1]=''\n                ans=ans+1\n            elif i==len(str1_list)-1:\n                str1_list[i]=str1_list[i]+str1_list[i-1]\n                str1_list[i-1]=''\n                ans=ans+1\n            else:\n                str1_list[i]=str1_list[i]+str1_list[i+1]\n                str1_list[i+1]=''\n                ans=ans+1\n        elif str1_list[i]=='0' and str2_list[i]=='1':\n            if i==0:\n                str2_list[i]=str2_list[i]+str2_list[i+1]\n                str2_list[i+1]=''\n                ans=ans+1\n            elif i==len(str2_list)-1:\n                str2_list[i]=str2_list[i]+str2_list[i-1]\n                str2_list[i-1]=''\n                ans=ans+1\n            else:\n                str2_list[i]=str2_list[i]+str2_list[i+1]\n                str2_list[i+1]=''\n                ans=ans+1\n        else:\n            break\n    for i in range(len(str1_list)):\n        if str1_list[i]=='0' and str2_list[i]=='0':\n            continue\n        elif str1_list[i]=='1' and str2_list[i]=='0':\n            if i==0:\n                str1_list[i]=str1_list[i]+str1_list[i+1]\n                str1_list[i+1]=''\n                ans=ans+1\n            elif i==len(str1_list)-1:\n                str1_list[i]=str1_list[i]+str1_list[i-1]\n                str1_list[i-1]=''\n                ans=ans+1\n            else:\n                str1_list[i]=str1_list[i]+str1_list[i+1]\n                str1_list[i+1]=''\n                ans=ans+1\n        elif str1_list[i]=='0' and str2_list[i]=='1':\n            if i==0:\n                str2_list[i]=str2_list[i]+str2_list[i+1]\n                str2_list[i+1]=''\n                ans=ans+1\n            elif i==len(str2_list)-1:\n                str2_list[i]=str2_list[i]+str2_list[i-1]\n                str2_list[i-1]=''\n                ans=ans+1\n            else:\n                str2_list[i]=str2_list[i]+str2_list[i+1]\n                str2_list[i+1]=''\n                ans=ans+1\n        else:\n            break\n    ans=ans-1\n    return ans\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    length = len(str1) \n    # If the string is empty\n    if(length == 0) : \n        return 0\n    # Convert the string into array \n    arr = list(str1) \n    # Initialize count \n    count = 0\n    while(arr!= sorted(arr)) : \n        # Find the first difference \n        for i in range(length) : \n            if(arr[i]!= str2[i]) : \n                # find the correct position \n                pos = i \n                break\n        # swap the first difference \n        arr[pos],arr[pos+1] = arr[pos+1],arr[pos]\n        # Increment the count \n        count += 1\n    return count \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Your Code Here\n    \n    print(sys.getsizeof(tuple_list))\n    return (sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(sys.getsizeof(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for each in tuple_list:\n        size += sys.getsizeof(each)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #initializing the variable\n    size = 0\n    #iterating over the tuple\n    for i in tuple_list:\n        #adding the size of each element in the tuple\n        size = size + sys.getsizeof(i)\n    #returning the size\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_byte = (sys.getsizeof(tuple_list) * (8))\n    return tuple_byte\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # return len(tuple_list) * 8\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \nif __name__ == '__main__':\n    t1 = (1,2,3,4,5)\n    print(\"tuple size: \", tuple_size(t1))\n    t2 = (1,2,3,4,5,6,7,8,9,10)\n    print(\"tuple size: \", tuple_size(t2))\n    t3 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)\n    print(\"tuple size: \", tuple_size(t3))\n    t4 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29)\n    print(\"tuple size: \", tuple_size(t4))\n    t5 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # O(logN)\n    # lower = 0\n    # upper = len(arr1) - 1\n    # mid = lower + (upper-lower)//2\n    # while lower <= upper:\n    #     if arr1[mid] > arr2[mid]:\n    #         upper = mid - 1\n    #     elif arr1[mid] < arr2[mid]:\n    #         lower = mid + 1\n    #     else:\n    #         return arr1[mid]\n    # return arr1[lower] if k-1 == lower else arr1[upper]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # -------------- Solution 1 ---------------\n    # TC: O(m+n) and SC: O(1)\n    # find the index of arr1 with the element less than k\n    # find the index of arr2 with the element greater than k\n    # return the sum of index\n    low = 0\n    high = len(arr2) - 1\n    while low <= high:\n        mid = (low+high) // 2\n        mid_1 = arr1[mid]\n        if mid_1 < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(low)\n    start = low\n    # find the index of arr1 with the element less than k\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low+high) // 2\n        mid_2 = arr2[mid]\n        if mid_2 <= k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # print(low)\n    return start + low - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return -1\n    \n    # we take the median of the two array\n    mid1 = len(arr1)//2\n    mid2 = len(arr2)//2\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == None or arr2 == None:\n        return None\n    else:\n        i = j = k-1\n        while i >= 0 and j >= 0:\n            if arr1[i] < arr2[j]:\n                i -= 1\n            else:\n                j -= 1\n        return arr1[i+1] if i >= 0 else arr2[j+1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    k = k - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 is None or arr2 is None:\n        return None\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 == 0 and l2 == 0:\n        return None\n    if l1 == 0:\n        return arr2[k-1]\n    if l2 == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    idx1 = find_kth(arr1, arr2[0:l1], k)\n    idx2 = find_kth(arr1[idx1+1:], arr2, k-idx1-1)\n    return min(arr1[idx1], arr2[idx2])\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    index1 = 0\n    index2 = 0\n    kth = -1\n    while index1 < len(arr1) and index2 < len(arr2):\n        if arr1[index1] <= arr2[index2]:\n            kth = index1\n            index1 += 1\n        else:\n            index2 += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # # Find the index of K in A1 and A2\n    # low = 0\n    # high = len(arr1) - 1\n    # while low <= high:\n    #     mid = (low + high) // 2\n    #     # if we found the kth element\n    #     if arr1[mid] == k:\n    #         return mid\n    #     # If k is greater than the mid element\n    #     elif k > arr1[mid]:\n    #         low = mid + 1\n    #     else:\n    #         high = mid - 1\n    # return -1\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] == k:\n            return mid\n        elif k > arr1[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if arr2[low] == k:\n        return low\n    elif k < arr2[low]:\n        return low - 1\n    else:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr = arr1 + arr2\n    return arr[k-1]\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # use maths formula for the given number to check the armstrong number\n    # replace the number with digit by digit and if that digit is same then check again by adding additional digit.\n    # this is similar to saying if the number is a perfect cube or cube number or if the sum of square and cube of a number equals it.\n    # using the maths formula:\n    #     (n_1*n_1 + n_2*n_2 +.... + n_k*n_k) = n_1*n_1 + n_2*n_2 +... + n_k*n_k\n    #         = n_1*n_1 + n_2*n_2 +... + n_k*n_k - (n_1+n_2+...+n_k)\n    #         = n_1*n_1 + n_2*n_2 +... + n_k*n_k - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = sum - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = (sum - n_1)^2 - (n_1 - n_2)^2 -... - (n_k - n_k)^2\n    #         = sum - n_1^2 - n_2^2 -... - n_k^2\n    #         = sum - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = sum - (n_1 + n_2 +... + n_k)\n    #         = sum - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = sum - n_1^2 - n_2^2 -... - n_k^2\n    #         = (sum - n_1)^2 - (n_1 - n_2)^2 -... - (n_k - n_k)^2\n    #         = ((sum - n_1)^2 - (n_1 - n_2)^2 -... - (n_k - n_k)^2) - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = (sum - n_1)^2 - (n_1 - n_2)^2 -... - (n_k - n_k)^2\n    #         = (sum - n_1)^2 - ((n_1*n_1 + n_2*n_2 +... + n_k*n_k) - n_1*n_1 - n_2*n_2 -... - n_k*n_k)\n    #         = (sum - n_1)^2 - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1)^2 - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1)^2 - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - 2*(n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1)^2 - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1)^2 - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = sum - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = sum - (n_1+n_2+...+n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1 - n_2 -... - n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1 - n_2 -... - n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1 - n_2 -... - n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1 - n_2 -... - n_k)\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1) - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k)\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - n_1*n_1 - n_2*n_2 -... - n_k*n_k - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - n_1*n_1 - n_2*n_2 -... - n_k*n_k\n    #         = (sum - n_1) - (n_1*n_1 + n_2*n_2 +... + n_k*n_k) - (n_1*n_1 + n_"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    s = 0\n    while n > 0:\n        s = s + (n%10)**3\n        n = n//10\n    return number == s\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while number!= 0:\n        digit = number % 10\n        sum += digit ** 3\n        number = number // 10\n    if temp == sum:\n        print(\"Armstrong number\")\n    else:\n        print(\"Not Armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    while(number > 0):\n        number = number // 10\n        sum += (number * number)\n    return True if sum == number else False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n=number\n    sum=0\n    while(n>0):\n        digit=n%10\n        sum=sum+(digit**3)\n        n=n//10\n    if(number==sum):\n        print('The number is armstrong')\n    else:\n        print('The number is not armstrong')\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    temp=number\n    while temp!=0:\n        digit=temp%10\n        sum=sum+digit**3\n        temp=temp//10\n    if number==sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum = sum + digit ** 3\n        temp = temp // 10\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = list(str(number))\n    total = 0\n    for i in range(len(number_list)):\n        total = total + int(number_list[i])**len(number_list)\n    if total == int(number):\n        return True\n    else:\n        return False\n    \n    \n        \n    \ndef count_swaps(arr):\n    '''\n    Write a function to count the number of swaps required to sort an array.\n    \n    Example 1:\n    Input: [4,5,1,2,3]\n    Output: One swap\n    Explanation: Swaps: (4,5) (4,1) (1,2) (2,3) (3,4)\n    Example 2:\n    Input: [4,3,2,1]\n    Output: Two swaps\n    Explanation: Swaps: (4,1) (4,2) (3,4) (2,1)\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                arr[i],arr[j] = arr[j],arr[i]\n                count += 1\n    print(count)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    output = 0\n    number = str(number)\n    for digit in number:\n        output += int(digit)**len(number)\n    if output == int(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    assert type(number) == int, \"You need to enter an integer\"\n    assert number > 0, \"You need to enter a natural number\"\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum = sum + i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print(\"In function sum_average\")\n    a=0\n    b=0\n    for i in range(1,number+1):\n        a=a+i\n        b=b+1\n        print(a/b)\n    return a/b\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    if number < 1:\n        return \"Please enter a positive number\"\n    else:\n        for i in range(1,number+1):\n            sum = sum + i\n        average = sum/number\n        return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1,number+1):\n        sum += i\n    avg = sum/number\n    return sum,avg\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    \n    for x in range(0,number):\n        sum += x\n    \n    avg = sum/number\n    return sum,avg\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    avg = total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    print(f'Sum of first {number} natural numbers is: {sum}')\n    average = sum / number\n    print(f'Average of first {number} natural numbers is: {average}')\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #Sum\n    sum = 0\n    while number > 0:\n        sum += number\n        number -= 1\n    #Average\n    average = sum/n\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum = sum + i\n    average = sum / number\n    print(f'Sum is: {sum} and average is: {average}')\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(\"The number is even.\")\n    else : \n        print(\"The number is odd.\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return True if n%2==0 else False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # Code here\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    # Code here\n    return str(n) == str(n)[::-1]\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    # Code here\n    if n == 2:\n        return True\n    elif n < 2:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        print(\"Yes\")\n    else :\n        print(\"No\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!=0:\n        return True\n    else:\n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n%2!=0 and n>2:\n        return True\n    else:\n        return False\n    \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    s = str(n)\n    if s==s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        print(\"Number is even\")\n    else:\n        print(\"Number is odd\")\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = str1\n    if len(s) < 1:\n        return None\n    if len(s) == 1:\n        return s[0]\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return s[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    c = 1\n    for i in str1:\n        if str1.count(i) == c:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    if len(str1) == 1:\n        return str1\n    \n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    \n    return ''\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == None:\n        return -1\n    else:\n        for i in range(len(str1)):\n            for j in range(i+1, len(str1)):\n                if str1[i] == str1[j]:\n                    return str1[i]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    a = set()\n    for i in str1:\n        if i in a:\n            return i\n        a.add(i)\n    return 'None'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.find(str1[0], 1)\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i,len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"Not Found\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for c in str1:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    count = 0\n    while count <= n:\n        count += 1\n        if is_ludic(count):\n            print(count)\n    return count\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n) if is_lucid(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # your code here\n    result = []\n    for i in range(1,n):\n        if is_ludic(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    \n    for i in range(n):\n        if(lucid_number(i)):\n            ludic.append(i)\n    \n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in range(2, n):\n        if is_ludic(i):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return 0\n    return get_ludic(n - 2) + get_ludic(n - 1)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    num = n\n    while num > 0:\n        lucid.append(num)\n        num = num - 1\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while i <= n:\n        if (i-1) % 7 == 0 or (i+1) % 7 == 0 or (i-2) % 7 == 0 or (i+2) % 7 == 0:\n            ludic.append(i)\n        i += 1\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if 'lucid' in str(i):\n            ludic.append(i)\n    return lucid\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the order of the words in the sentence.\n    '''\n    return''.join(reversed(s.split(' ')))\n    \ndef reverse_sentence(s):\n    '''\n    Write a function to reverse the order of words in the sentence.\n    '''\n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return \" \".join(reversed(words))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \ndef reverse_words_solution(s):\n    '''\n    This solution will try to break a string up and reverse the words. \n    However, if we have a space in our string then we are going to have to \n    start at the beginning of the string and reverse the space and the other\n    words, then reverse the words, then move to the end and reverse the space.\n    '''\n    # split the string up into a list of words\n    words = s.split()\n    # reverse the words\n    words = list(reversed(words))\n    # join the words back up\n    words = \" \".join(words)\n    # now reverse the spaces\n    return words.replace(\" \", \"\")\n    \ndef reverse_words_solution_2(s):\n    '''\n    This solution uses slicing to reverse words. \n    '''\n    # split the string up into a list of words\n    words = s.split()\n    # reverse the words\n    words = words[::-1]\n    # join the words back up\n    words = \" \".join(words)\n    # now reverse the spaces\n    return words.replace(\" \", \"\")\n    \ndef reverse_words_solution_3(s):\n    '''\n    This solution uses slicing. \n    '''\n    # split the string up into a list of words\n    words = s.split()\n    # reverse the words\n    words = words[::-1]\n    # join the words back up\n    words = \" \".join(words)\n    # now reverse the spaces\n    return words.replace(\" \", \"\")\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # make the new word \n    new_word = []\n    # word counter\n    word_count = 0\n    # space counter\n    space_count = 0\n    # for loop \n    for x in s:\n        # space counter\n        if x == \" \":\n            space_count += 1\n        # if space \n        elif word_count == 0:\n            new_word.append(x)\n            word_count += 1\n        # if word\n        else:\n            # if space counter > 0\n            if space_count > 0:\n                space_count -= 1\n            # if space counter <= 0\n            else:\n                # if word counter > 1\n                if word_count > 1:\n                    # add current word to list\n                    new_word.append(x)\n                    # reset word counter \n                    word_count = 0\n                # if word counter <= 1\n                else:\n                    new_word.append(x)\n                    new_word.reverse()\n                    return \" \".join(new_word)\n    return \" \".join(new_word)\n    \n    "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.strip().split()[::-1]\n    # return s.strip().split(\" \")[::-1]\n    # return''.join(s.split()[::-1])\n    # return \" \".join(reversed(s.split(\" \")))\n    # return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip().split()\n    s.reverse()\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) > 0:\n        s = s.split(\" \")\n        return \" \".join(reversed(s))\n    else:\n        return s\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(f'{num} is not a prime number')\n                print(f'{i} x {num // i} = {num}')\n                break\n            else:\n                print(f'{num} is a prime number')\n    else:\n        print(f'{num} is not a prime number')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n    # write your code here\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # for num in range(2,num):\n    #     if num % 2 == 0:\n    #         return False\n    #     else:\n    #         return True\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num in range(2, num):\n        return False\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, 'is not a prime number.')\n                break\n        else:\n            print(num, 'is a prime number.')\n    else:\n        print(num, 'is not a prime number.')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,'is not a prime number')\n                break\n        else:\n            print(num,'is a prime number')\n    else:\n        print('Number has to be more than 1')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_degree_to_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.findall(text)\n    if match:\n        return match[0]\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    for match in matches:\n        return match\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    r = re.findall(pattern, text)\n    return r\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n    return(text[start:end], start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = re.search(pattern, text)\n    return text.group(), text.start(), text.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # s = re.findall(pattern, text)\n    # print(s)\n    # for i in s:\n    #     print(i)\n    try:\n        return re.search(pattern, text).span()\n    except:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        substring = matches[0]\n        start_index = text.find(substring)\n        end_index = start_index + len(substring)\n        return substring, start_index, end_index\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).span()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Begin search for a literal\n    start = 0\n    end = 0\n    while end < len(text):\n        # Get a match\n        match = pattern.search(text, start)\n        if match:\n            # Return the matched part\n            return text[match.start():match.end()], match.start(), match.end()\n        # Check if the match is the last one\n        if end == len(text) - 1:\n            break\n        # Move to the next character\n        end = end + 1\n    return \"\", 0, 0\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    return bell_Number(n-1) + (n-1)*(bell_Number(n-1)) \n    \n    \n    \n    \ndef is_generator(number):\n    '''\n    Write a python function to check if a number is generator number.\n    '''\n    if number == 1:\n        return True\n    return is_generator(number-1) and (not (number%2))\n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to print fibonacci series.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibonacci(n-1)+fibonacci(n-2)\n    \n    \n    \ndef count_syllables(word):\n    '''\n    Write a python function to count number of syllables in a word.\n    '''\n    syllable_count = 0\n    for i in range(len(word)):\n        if word[i] in ['a', 'e', 'i', 'o', 'u']:\n            syllable_count += 1\n        elif word[i] in ['y', 'u']:\n            syllable_count += 2\n    return syllable_count\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a python function to check if a word is palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_prime(number):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if number == 1:\n        return False\n    for i in range(2,number):\n        if number%i == 0:\n            return False\n    return True\n    \n    \n    \ndef max_number(a,b,c):\n    '''\n    Write a python function to find maximum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    return c\n    \n    \n    \ndef is_sorted(arr):\n    '''\n    Write a python function to check if given array is sorted.\n    '''\n    if len(arr) <= 1:\n        return True\n    if arr[0] <= arr[1]:\n        return is_sorted(arr[1:])\n    return False\n    \n    \n    \ndef nth_prime(n):\n    '''\n    Write a python function to find nth prime.\n    '''\n    def is_prime_helper(num):\n        '''\n        This is a helper function to determine if a number is prime.\n        '''\n        if num == 1:\n            return False\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n    if n == 1:\n        return 2\n    return nth_prime(n-1)+1 if is_prime_helper(nth_prime(n-1)) else nth_prime(n-1)+2\n    \n    \n    \ndef is_palindrome_iterative(word):\n    '''\n    Write a python function to check if a word is palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    left = 0\n    right = len(word)-1\n    while left < right:\n        if word[left]!= word[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \n    \ndef to_hour(time):\n    '''\n    Write a python function to convert time in minutes to hour.\n    '''\n    return time//60\n    \n    \n    \ndef list_primes(n):\n    '''\n    Write a python function to find all primes in a given range.\n    '''\n    if n <= 1:\n        return []\n    primes = []\n    prime = 2\n    while prime <= n:\n        if n%prime == 0:\n            n = n//prime\n            primes.append(prime)\n        else:\n            prime += 1\n    return primes\n    \n    \n    \ndef to_hour_min(time):\n    '''\n    Write a python function to convert time in minutes to hour and minute.\n    '''\n    hour = time//60\n    min = time%60\n    return hour, min\n    \n    \n    \ndef to_hour_min_sec(time):\n    '''\n    Write a python function to convert time in seconds to hour, minute and second.\n    '''\n    hour = time//3600\n    min = (time%3600)//60\n    sec = time%60\n    return hour, min, sec\n    \n    \n    \ndef to_hour_min_sec_milli(time):\n    '''\n    Write a python function to convert time in milliseconds to hour, minute, second and milli-second.\n    '''\n    hour = time//3600000\n    min = (time%3600000)//60000\n    sec = (time%60000)//1000\n    milli = time%1000\n    return hour, min, sec, milli\n    \n    \n    \ndef to_hour_min_sec_milli_per_sec(time):\n    '''\n    Write a python function to convert time in milliseconds per second to hour, minute, second and milli-second.\n    '''\n    hour = time//3600000\n    min = (time%3600000)//60000\n    sec = (time%60000)//1000\n    milli = time%1000\n    return hour, min, sec, milli, 1\n    \n    \n    \ndef factorial_iterative(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    i = n\n    result = 1\n    while i > 1:\n        result *= i\n        i -= 1\n    return result\n    \n    \n    \ndef factorial_recursive(n):\n    '''\n    Write a python function to calculate the factorial of a given number using recursive approach.\n    '''\n    if n == 1:\n        return 1\n    return n*factorial_recursive(n-1)\n    \n    \n    \ndef factorial_dp(n):\n    '''\n    Write a python function to calculate the factorial of a given number using dynamic programming.\n    '''\n    if n == 1:\n        return 1\n    dp = [None] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2,n+1):\n        dp[i] = i\n    for i in range(2,n+1):\n        for j in range(i,n+1):\n            dp[j] = dp[j]*(i-1)\n    return dp[n]\n    \n    \n    \ndef factorial_by_recursion(n):\n    '''\n    Write a python function to calculate the factorial of a given number using recursive approach.\n    '''\n    if n == 1:\n        return 1\n    return n * factorial_by_recursion(n-1)\n    \n    \n    \ndef is_pandigital(num):\n    '''\n    Write a python function to check if a number is pandigital.\n    '''\n    if num < 10 or num > 9999:\n        return False\n    if str(num)!= ''.join(sorted(str(num))):\n        return False\n    return True\n    \n    \n    \ndef list_n_primes(n):\n    '''\n    Write a python function to find all primes in a given range.\n    '''\n    if n <= 1:\n        return []\n    primes = []\n    prime = 2\n    while prime <= n:\n        if n%prime == 0:\n            n = n//prime\n            primes.append(prime)\n        else:\n            prime += 1\n    return primes\n    \n    \n    \ndef list_n_primes_by_recursion(n):\n    '''\n    Write a python function to find all primes in a given range.\n    ''"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    sum = 1\n    for i in range(1, n+1):\n        sum = sum*(i+1)\n    return sum\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Solution from GeeksForGeeks\n    # Using Power Composition\n    # Bell number = 1 + 1/1! + 1/2! +... + 1/N!\n    # N! means factorial of N\n    # 1. N! = 1*2*3*4*5*6*7*8*9*10*...*N\n    # 2. 1/1! = 1\n    # 3. 1/2! = 1/2\n    # 4. 1/3! = 1/6\n    # 5. 1/4! = 1/24\n    # 6. 1/5! = 1/120\n    # 7. 1/6! = 1/720\n    # 8. 1/7! = 1/5040\n    # 9. 1/8! = 1/40320\n    # 10. 1/9! = 1/362880\n    # 11. 1/10! = 1/3628800\n    # 12. 1/11! = 1/39916800\n    # 13. 1/12! = 1/479001600\n    # 14. 1/13! = 1/1052640320\n    # 15. 1/14! = 1/564607520\n    # 16. 1/15! = 1/315270400\n    # 17. 1/16! = 1/1209600\n    # 18. 1/17! = 1/5840320\n    # 19. 1/18! = 1/3628800\n    # 20. 1/19! = 1/3628800\n    # 21. 1/20! = 1/1\n    # 22. 1/21! = 1/6\n    # 23. 1/22! = 1/24\n    # 24. 1/23! = 1/120\n    # 25. 1/24! = 1/720\n    # 26. 1/25! = 1/5040\n    # 27. 1/26! = 1/40320\n    # 28. 1/27! = 1/362880\n    # 29. 1/28! = 1/362880\n    # 30. 1/29! = 1/362880\n    # 31. 1/30! = 1/362880\n    # 32. 1/31! = 1/362880\n    # 33. 1/32! = 1/362880\n    # 34. 1/33! = 1/362880\n    # 35. 1/34! = 1/362880\n    # 36. 1/35! = 1/362880\n    # 37. 1/36! = 1/362880\n    # 38. 1/37! = 1/362880\n    # 39. 1/38! = 1/362880\n    # 40. 1/39! = 1/362880\n    # 41. 1/40! = 1/362880\n    # 42. 1/41! = 1/362880\n    # 43. 1/42! = 1/362880\n    # 44. 1/43! = 1/362880\n    # 45. 1/44! = 1/362880\n    # 46. 1/45! = 1/362880\n    # 47. 1/46! = 1/362880\n    # 48. 1/47! = 1/362880\n    # 49. 1/48! = 1/362880\n    # 50. 1/49! = 1/362880\n    # 51. 1/50! = 1/362880\n    # 52. 1/51! = 1/362880\n    # 53. 1/52! = 1/362880\n    # 54. 1/53! = 1/362880\n    # 55. 1/54! = 1/362880\n    # 56. 1/55! = 1/362880\n    # 57. 1/56! = 1/362880\n    # 58. 1/57! = 1/362880\n    # 59. 1/58! = 1/362880\n    # 60. 1/59! = 1/362880\n    # 61. 1/60! = 1/362880\n    # 62. 1/61! = 1/362880\n    # 63. 1/62! = 1/362880\n    # 64. 1/63! = 1/362880\n    # 65. 1/64! = 1/362880\n    # 66. 1/65! = 1/362880\n    # 67. 1/66! = 1/362880\n    # 68. 1/67! = 1/362880\n    # 69. 1/68! = 1/362880\n    # 70. 1/69! = 1/362880\n    # 71. 1/70! = 1/362880\n    # 72. 1/71! = 1/362880\n    # 73. 1/72! = 1/362880\n    # 74. 1/73! = 1/362880\n    # 75. 1/74! = 1/362880\n    # 76. 1/75! = 1/362880\n    # 77. 1/76! = 1/362880\n    # 78. 1/77! = 1/362880\n    # 79. 1/78! = 1/362880\n    # 80. 1/79! = 1/362880\n    # 81. 1/80! = 1/362880\n    # 82. 1/81! = 1/362880\n    # 83. 1/82! = 1/362880\n    # 84. 1/83! = 1/362880\n    # 85. 1/84! = 1/362880\n    # 86. 1/85! = 1/362880\n    # 87. 1/86! = 1/362880\n    # 88. 1/87! = 1/362880\n    # 89. 1/88! = 1/362880\n    # 90. 1/89! = 1/362880\n    # 91. 1/90! = 1/362880\n    # 92. 1/91! = 1/362880\n    # 93. 1/92! = 1/362880\n    # 94. 1/93! = 1/362880\n    # 95. 1/94! = 1/362880\n    # 96. 1/95! = 1/362880\n    # 97. 1/96! = 1/362880\n    # 98. 1/97! = 1/362880\n    # 99. 1/98! = 1/362880\n    # 100. 1/99! = 1/362880\n    # 101. 1/100! = 1/362880\n    # 102. 1/101! = 1/362880\n    # 103. 1/102! = 1/362880\n    # 104. 1/103! = 1/362880\n    # 105. 1/104! = 1/362880\n    # 106. 1/105! = 1/362880\n    # 107. 1/106! = 1/362880\n    # 108. 1/107! = 1/362880\n    # 109. 1/108! = 1/362880\n    # 110. 1/109! = 1/362880\n    # 111. 1/110! = 1/362880\n    # 112. 1/111! = 1/362880\n    # 113. 1/112! = 1/362880\n    # 114. 1/113! = 1/362880\n    # 115. 1/114! = 1/362880\n    # 116. 1/115! = 1/362880\n    # 117. 1/116! = 1/362880\n    # 118. 1/117! = 1/362880\n    # 119. 1/118! = 1/362880\n    # 120. 1/119! = 1/362880\n    # 121. 1/120! = 1/362880\n    # 122. 1/121! = 1/362880\n    # 123. 1/122! = 1/362880\n    # 124. 1/123! = 1/362880\n    # 125. 1/124! = 1/362880\n    # 126. 1/125! = 1/362880\n    # 127. 1/126! = 1/362880\n    # 128. 1/127! = 1/362880\n    # 129. 1/128! = 1/362880\n    # 130. 1/129! = 1/362880\n    # 131. 1/130! = 1/362880\n    # 132. 1/131! = "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # base case \n    if(n == 0 or n == 1): \n        return n \n    # recursive call \n    else: \n        return bell_Number(n-1) + bell_Number(n-2) \n  "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * bell_Number(n-1) \n  \ndef lis(input_list): \n    '''\n    Write a python function to find length of longest increasing subsequence.\n    '''\n    def longest_increasing_subsequence(arr): \n        n = len(arr) \n        if n == 0: \n            return 0\n        dp = [1] * n \n        for i in range(1, n): \n            for j in range(0, i): \n                if arr[i] > arr[j] and dp[i] < dp[j] + 1: \n                    dp[i] = dp[j] + 1\n        return max(dp) \n  \n    return longest_increasing_subsequence(input_list) \n  \ndef min_moves_to_reduce_sum_to_zero(nums):\n    '''\n    Write a python function to find minimum number of moves to reach a target sum 0\n    '''\n    def min_moves_to_reach_target_sum_zero(nums, target): \n        if not nums:\n            return 0\n        if sum(nums) == target: \n            return len(nums)\n        if sum(nums) < target: \n            return min_moves_to_reach_target_sum_zero(nums[1:], target - nums[0]) + 1\n        else: \n            return min_moves_to_reach_target_sum_zero(nums[1:], target) \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    count = 1\n    bell = 1\n    while count < n:\n        count += 1\n        bell += 1\n        if bell % 2 == 0:\n            bell += 1\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_Number_list = []\n    for num in range(1,n+1):\n        bell_Number_list.append(num*(2*num-1)//2)\n    return bell_Number_list\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int(str(n*(n+1)*(2*n+1)/6).count(\"1\"))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the count to 0\n    count = 0\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    bell_Number = 0\n    while bell_Number < n:\n        bell_Number = i * (i + 1) / 2\n        i += 1\n    return bell_Number\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == None or L == []:\n        return L\n    else:\n        k = list1[k]\n        return list1[:k] + list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    if L == []:\n        return L\n    if len(L) == 1:\n        return L\n    \n    if k == 0:\n        return L[1:]\n    \n    if k == len(L)-1:\n        return L[:-1]\n    \n    if k > len(L)-1:\n        return []\n    \n    return L[:k]+L[k+1:]\n    \n    \ndef find_second_maximum(L):\n    '''\n    Write a python function to find the second largest element in a list.\n    '''\n    \n    if L == []:\n        return None\n    if len(L) == 1:\n        return L[0]\n    \n    if L[0] < L[1]:\n        return L[0]\n    if L[0] > L[1]:\n        return L[1]\n    \n    if L[0] > L[2]:\n        return L[0]\n    \n    if L[1] > L[2]:\n        return L[1]\n    \n    if L[2] > L[0]:\n        return L[2]\n    \n    if L[1] > L[0]:\n        return L[1]\n    \n    if L[2] > L[0]:\n        return L[2]\n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but with no duplicates.\n    '''\n    \n    if list1 == []:\n        return []\n    if list1 == [1]:\n        return [1]\n    if list1 == [1,1]:\n        return []\n    \n    \n    if list1[0] == list1[1]:\n        return []\n    \n    if list1[0]!= list1[1]:\n        return [list1[0]]\n    \n    if list1[0] == list1[2]:\n        return []\n    \n    if list1[1]!= list1[2]:\n        return [list1[1]]\n    \n    if list1[2]!= list1[0]:\n        return [list1[2]]\n    \n    if list1[2] == list1[1]:\n        return []\n    \n    if list1[2] == list1[3]:\n        return []\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    s = list1[:]\n    k = L\n    if L == 0:\n        return s\n    elif len(s) <= L:\n        return s[:len(s)-L]\n    else:\n        del s[k]\n        return s\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # your code here\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n=len(list1)\n    del list1[n-k]\n    return list1\n    \n    \n    \ndef find_kth_smallest(list1, L):\n    '''\n    Write a python function which takes a list and returns the k'th smallest element.\n    '''\n    return sorted(list1)[L-1]\n    \n    \n    \ndef find_kth_largest(list1, L):\n    '''\n    Write a python function which takes a list and returns the k'th largest element.\n    '''\n    return sorted(list1)[-L]\n    \n    \n    \ndef selection_sort(list1, L):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    for i in range(L):\n        temp = list1[i]\n        pos = i\n        for j in range(i+1,len(list1)):\n            if list1[j] < temp:\n                temp = list1[j]\n                pos = j\n        list1[i] = temp\n        list1[pos] = list1[i]\n        \n    return list1\n    \n    \n    \ndef bubble_sort(list1, L):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1)-i-1):\n            if list1[j] > list1[j+1]:\n                temp = list1[j]\n                list1[j] = list1[j+1]\n                list1[j+1] = temp\n                \n    return list1\n    \n    \n    \ndef insertion_sort(list1, L):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    for i in range(1,len(list1)):\n        temp = list1[i]\n        j = i-1\n        while j >=0 and temp < list1[j]:\n            list1[j+1] = list1[j]\n            j -= 1\n        list1[j+1] = temp\n    return list1\n    \n    \n    \ndef quick_sort(list1, L, R):\n    '''\n    Write a python function which takes a list and returns a sorted list.\n    '''\n    if L < R:\n        p = partition(list1, L, R)\n        quick_sort(list1, L, p-1)\n        quick_sort(list1, p+1, R)\n    return list1\n    \n    \n    \ndef partition(list1, L, R):\n    '''\n    Write a python function which takes a list and returns a partition of the list.\n    '''\n    pivot = list1[R]\n    i = L-1\n    for j in range(L, R):\n        if list1[j] < pivot:\n            i += 1\n            temp = list1[i]\n            list1[i] = list1[j]\n            list1[j] = temp\n    temp = list1[i+1]\n    list1[i+1] = list1[R]\n    list1[R] = temp\n    return i+1\n    \n    \n    \ndef count_number_odd(list1):\n    '''\n    Write a python function which takes a list and returns the number of odd numbers.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]%2!= 0:\n            count += 1\n    return count\n    \n    \n    \ndef count_number_even(list1):\n    '''\n    Write a python function which takes a list and returns the number of even numbers.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef find_zero_pos(list1, L):\n    '''\n    Write a python function which takes a list and returns the position of the first 0 in the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == 0:\n            return i\n        \n    return -1\n    \n    \n    \ndef find_max_number(list1):\n    '''\n    Write a python function which takes a list and returns the max number in the list.\n    '''\n    max = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > max:\n            max = list1[i]\n    return max\n    \n    \n    \ndef find_min_number(list1):\n    '''\n    Write a python function which takes a list and returns the min number in the list.\n    '''\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < min:\n            min = list1[i]\n    return min\n    \n    \n    \ndef find_sum_numbers(list1, L):\n    '''\n    Write a python function which takes a list and returns the sum of all the numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    return sum\n    \n    \n    \ndef find_median(list1):\n    '''\n    Write a python function which takes a list and returns the median of the list.\n    '''\n    n = len(list1)\n    if n%2 == 0:\n        return (list1[n//2]+list1[n//2-1])/2.0\n    else:\n        return list1[n//2]\n    \n    \n    \ndef find_average(list1):\n    '''\n    Write a python function which takes a list and returns the average of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    return sum/len(list1)\n    \n    \n    \ndef find_mode(list1):\n    '''\n    Write a python function which takes a list and returns the mode of the list.\n    '''\n    m = find_max_number(list1)\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == m:\n            count += 1\n    if count == 1:\n        return m\n    else:\n        return m\n    \n    \n    \ndef factorial(n):\n    '''\n    Write a python function which takes a number n and returns the factorial of n.\n    '''\n    if n < 0:\n        return \"Enter a positive number\"\n    elif n == 0:\n        return 1\n    else:\n        sum = 1\n        for i in range(1,n+1):\n            sum = sum*i\n        return sum\n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function which takes a number n and returns the nth number in the fibonacci sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        temp = a\n        a = b\n        b = temp + b\n    return b\n    \n    \n    \ndef sum_list(list1):\n    '''\n    Write a python function which takes a list and returns the sum of all the numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    return sum\n    \n    \n    \ndef main():\n    '''\n    Run this module from the command line to test the functions.\n    '''\n    # Lists\n    L1 = ['apples', 'bananas', 'grapes', 'kiwifruit']\n    L2 = []\n    L3 = []\n    L4 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    L5 = L1 + L4\n    L6 = ['a', 'b', 'c', 'd', 'e', 'f']\n    \n    # Lists of lists\n    L7 = [['apples', 'bananas', '"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) > 0:\n        return list1[:L] + list1[L+1:]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Your Code Here\n    return(list1)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col_maxes = []\n    for col in range(len(test_list[0])):\n        max_val = test_list[0][col]\n        for i in range(N):\n            if test_list[i][col] > max_val:\n                max_val = test_list[i][col]\n        col_maxes.append(max_val)\n    return col_maxes\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_so_far = -99999999999999\n    \n    for i in range(len(test_list)):\n        max_so_far = max(max_so_far, max_of_nth_column(test_list, i, N))\n    \n    return max_so_far\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    a = max(test_list, key=lambda x: x[N-1])\n    return a\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = -100000000\n    for i in range(0, N):\n        if max_val < max(test_list[i]):\n            max_val = max(test_list[i])\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    #   if N == len(test_list):\n    #     return max(row)\n    # else:\n    #     return max(max_of_nth(test_list, N+1))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list)==0:\n        return None\n    elif len(test_list)==1:\n        return test_list[0][N-1]\n    else:\n        return max(test_list[0][N-1], max_of_nth(test_list[1:], N-1))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i]))\n    return max_list[N]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = -1e9\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return None\n    if N == 1:\n        return max(test_list[1])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col_nth = []\n    for i in range(len(test_list)):\n        col_nth.append(test_list[i][N])\n    return max(col_nth)\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n        lst2.append(lst[i][1])\n    return lst1,lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst:\n        return [lst[0][0], lst[0][1]] + merge(lst[1:])\n    else:\n        return []\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(0,len(lst)):\n        temp = lst[i]\n        temp.append(lst[i][0])\n        res.append(temp)\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [[lst[0][0], lst[0][1]], ]\n    mid = len(lst)//2\n    left = merge(lst[:mid])\n    right = merge(lst[mid:])\n    return merge_lists(left, right)\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Your Code Here\n    # Hint: The only thing to know is the length of the list of sublists.\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    merged = []\n    for lst_1 in lst:\n        merged.append(lst_1[0])\n        merged.append(lst_1[1])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[x[0],x[1]] for x in lst]\n    \n    \n    \ndef merge1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    l=[]\n    for i in lst:\n        l.append(i[0])\n        l.append(i[1])\n    return l\n    \n    \n    \ndef product(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the product of the first element of each sublist and the second one has the product of the second.\n    '''\n    return [int(x[0])*int(x[1]) for x in lst]\n    \n    \n    \ndef product1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the product of the first element of each sublist and the second one has the product of the second.\n    '''\n    l=[]\n    for i in range(len(lst)):\n        l.append(int(lst[i][0])*int(lst[i][1]))\n    return l\n    \n    \n    \ndef map(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the square of the first element of each sublist and the second one has the square of the second.\n    '''\n    return [[int(x[0])**2,int(x[1])**2] for x in lst]\n    \n    \n    \ndef map1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the square of the first element of each sublist and the second one has the square of the second.\n    '''\n    l=[]\n    for i in range(len(lst)):\n        l.append(int(lst[i][0])**2)\n        l.append(int(lst[i][1])**2)\n    return l\n    \n    \n    \ndef filter(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the elements that have the first element of each sublist and the second one has the second element of each sublist.\n    '''\n    return [[x[0],x[1]] for x in lst if x[0]!=x[1]]\n    \n    \n    \ndef filter1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the elements that have the first element of each sublist and the second one has the second element of each sublist.\n    '''\n    l=[]\n    for i in lst:\n        if i[0]!=i[1]:\n            l.append(i)\n    return l\n    \n    \n    \ndef zip(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second element of each sublist.\n    '''\n    return [[x[0],x[1]] for x in zip(*lst)]\n    \n    \n    \ndef zip1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second element of each sublist.\n    '''\n    l=[]\n    for i in range(len(lst[0])):\n        l.append([x[i] for x in lst])\n    return l\n    \n    \n    \ndef inverse(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second element of each sublist.\n    '''\n    return [[x[1],x[0]] for x in lst]\n    \n    \n    \ndef inverse1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second element of each sublist.\n    '''\n    l=[]\n    for i in range(len(lst[0])):\n        l.append([x[i] for x in lst])\n    return l\n    \n    \n    \ndef lambda1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second element of each sublist.\n    '''\n    return [[lambda x:x[0],lambda x:x[1]] for x in lst]\n    \n    \n    \ndef lambda1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second element of each sublist.\n    '''\n    return [[lambda x:x[0],lambda x:x[1]] for x in lst]\n    \n    \n    \ndef lenght(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the length of each sublist and the second one has the sum of the lengths of each sublist.\n    '''\n    return [[len(lst),sum(len(x) for x in lst)] for lst in lst]\n    \n    \n    \ndef lenght1(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the length of each sublist and the second one has the sum of the lengths of each sublist.\n    '''\n    return [[len(lst),sum(len(x) for x in lst)] for lst in lst]\n    \n    \n    \ndef lenght2(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the length of each sublist and the second one has the sum of the lengths of each sublist.\n    '''\n    return [[len(x) for x in lst],sum(len(x) for x in lst)]\n    \n    \n    \ndef lenght3(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the length of each sublist and the second one has the sum of the lengths of each sublist.\n    '''\n    return [[len(x) for x in lst],sum(len(x) for x in lst)]\n    \n    \n    \ndef lenght4(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the length of each sublist and the second one has the sum of the lengths of each sublist.\n    '''\n    return [[len(x) for x in lst],sum(len(x) for x in lst)]\n    \n    \n    \ndef delete(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst ==[]:\n        return[]\n    \n    mid = len(lst)//2\n    left = merge(lst[:mid])\n    right = merge(lst[mid:])\n    \n    new_list = []\n    while left and right:\n        if left[0] <= right[0]:\n            new_list.append(left.pop(0))\n        else:\n            new_list.append(right.pop(0))\n            \n    while left:\n        new_list.append(left.pop(0))\n    while right:\n        new_list.append(right.pop(0))\n        \n    return new_list\n    "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for lst in lst:\n        merged.append(lst[0])\n        merged.append(lst[1])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst=[]\n    for lst in lst:\n        merged_lst.append(lst[0])\n        merged_lst.append(lst[1])\n    return merged_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #print(\"merge lst is : \", lst)\n    #print(\"merge lst[0] : \", lst[0])\n    \n    # first of all, there are two lists, hence, the first element of the first list will be in the first element of the result list, and the second element will be in the second.\n    # iterate through the list and if first element of sublist is same, then copy the second element to the first sublist's second element.\n    \n    # define the result as a list.\n    result = []\n    for i in range(len(lst)):\n        if lst[i][0] == lst[i][1]:\n            #print(\"lst[i][0] == lst[i][1]\")\n            result.append([lst[i][0], lst[i][1]])\n        else:\n            #print(\"lst[i][0]!= lst[i][1]\")\n            result.append([lst[i][0], lst[i][1]])\n            \n    #print(\"result: \", result)\n    \n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_list = []\n    for index in range(len(test_list)):\n        cummulative_list.append(sum(test_list[:index+1]))\n    return(cummulative_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1,len(test_list)):\n        test_list[i] = test_list[i-1] + test_list[i]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list_copy = test_list[:]\n    result = []\n    for i in range(len(test_list)):\n        result.append(sum(test_list_copy))\n        test_list_copy = test_list_copy[1:]\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    ans = 0\n    for i in range(len(test_list)):\n        ans = ans + test_list[i]\n    return ans\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    for i in range(0, len(test_list)-1):\n        test_list[i] = test_list[i] + test_list[i+1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    cummulative_list = []\n    for i in range(len(test_list)):\n        total = test_list[i] + total\n        cummulative_list.append(total)\n    return cummulative_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    a = 0\n    for i in test_list:\n        a += i\n    return a\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        j = 0\n        while(i + j < len(test_list)):\n            j += 1\n            print(test_list[i + j] + (j * test_list[i]), end = \" \")\n    print()\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    n = len(test_list)\n    for i in range(1, n):\n        test_list[i] = test_list[i-1] + test_list[i]\n    return test_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # number of total students\n    count = len(nums)\n    # get the average of each student\n    total = 0\n    for student in nums:\n        for name, score in student:\n            total += score\n    # calculate average\n    average = total / count\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return (sum(i)/len(i) for i in nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for a in range(len(nums)):\n        averages.append(sum(nums[a]) / len(nums[a]))\n    return averages\n    "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for x in nums:\n        sum = 0\n        for y in x:\n            sum += y\n        average_list.append(sum/len(x))\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    summ = 0\n    for i in range(len(nums)):\n        summ += nums[i][0]\n    return summ / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_as_lists = []\n    for tup in nums:\n        nums_as_lists.append(list(tup))\n    average_list = []\n    for i in range(0,len(nums_as_lists)):\n        average_list.append(sum(nums_as_lists[i])/len(nums_as_lists[i]))\n    return tuple(average_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_averages = []\n    for item in nums:\n        for i in item:\n            tuple_averages.append(i)\n    return tuple_averages\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return (sum([tup[0] for tup in nums]) / len(nums), sum([tup[1] for tup in nums]) / len(nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for x in nums:\n        total += x\n    return tuple(x/len(nums) for x in nums)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((a % b) for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a%b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i] % test_tup2[i]) == 0)\n    return tuple(res)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for x, y in zip(test_tup1, test_tup2):\n        result += (x % y,)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Test tuple lengths must be the same.'\n    return tuple([((a % b) % c) for a, b, c in zip(test_tup1, test_tup2, zip(test_tup1, test_tup2))])\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    a = test_tup1[0] % test_tup2[0]\n    b = test_tup1[1] % test_tup2[1]\n    c = test_tup1[2] % test_tup2[2]\n    d = test_tup1[3] % test_tup2[3]\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    j = 0\n    x, y = 0, 0\n    step = 0\n    steps_temp = steps\n    while(step < steps_temp):\n        step += 1\n        if(x >= d):\n            j += 1\n            if(y >= d):\n                return j\n            x = 0\n            y += 1\n        elif(y >= d):\n            j += 1\n            if(x <= -d):\n                return j\n            x -= 1\n            y = 0\n        else:\n            x += 1\n            y += 1\n    return j\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return -1\n    steps = steps\n    d = d\n    steps = min(steps, abs(d))\n    Jumps = 0\n    for i in range(1, steps):\n        if abs(d + i) < abs(d):\n            Jumps += 1\n        else:\n            break\n    return Jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    d_step = 0\n    jump_counter = 0\n    max_steps = steps\n    while d_step <= max_steps:\n        max_steps = max_steps - d_step\n        jump_counter = jump_counter + 1\n        d_step = d_step + d\n    return jump_counter\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    x_pos = 0\n    y_pos = 0\n    x_steps = 0\n    y_steps = 0\n    visited_x = []\n    visited_y = []\n    while x_pos <= d:\n        visited_x.append(x_pos)\n        x_pos += steps\n        x_steps += 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps<0 or d<0:\n        return -1\n    if steps==0 or d==0:\n        return 0\n    \n    if d==1:\n        return steps\n    else:\n        steps -= 1\n        return min_Jumps(steps, d-1) + min_Jumps(steps, d)\n    "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 1\n    x, y = d\n    \n    while x < steps and y >= 0:\n        x, y = x + (y - x), y - x\n        J += 1\n        if (x, y) == (d, 0):\n            break\n    return J\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    global k \n    count = 0\n    q = deque()\n    q.append((0,0))\n    while q:\n        x,y = q.popleft()\n        count = 0\n        if (x,y)==(d,0):\n            return count\n        for i in range(1,k+1):\n            nx = x+i\n            ny = y+i\n            if (nx,ny) in q and d>=steps:\n                count+=1\n            elif (nx,ny) in q and d<steps:\n                count+=1\n                q.append((nx,ny))\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    s = set()\n    s.add((0,0))\n    l = []\n    for i in range(steps+1):\n        if i == 0:\n            pass\n        else:\n            l.append((i-1,0))\n            l.append((0,i-1))\n    l.append((steps,0))\n    l.append((0,steps))\n    for i in l:\n        for j in s:\n            if i == j:\n                pass\n            else:\n                a = abs(j[1] - i[1]) + abs(j[0] - i[0])\n                if a <= d:\n                    s.add(i)\n    return len(s)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1: \n        return 0\n    if steps == 0: \n        return -1 \n    if d == 0: \n        return steps \n    if d < 0: \n        return -1\n    return min(min_Jumps(steps - 1, d), min_Jumps(steps - 1, d - steps) + 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # return (-1)**d*int(math.log(d,2)) if d%2 else 2*int(math.log(d,2))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # list1 = [10, 20, 30, 40, 50]\n    # list2 = [1, 2, 3, 4, 5]\n    # result = []\n    # for i in range(len(list1)):\n    #     result.append(list1[i] / list2[i])\n    # return result\n    return [i / j for i, j in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result=[]\n    i=0\n    j=0\n    while(i<len(nums1) and j<len(nums2)):\n        if(nums1[i]==nums2[j]):\n            result.append(nums1[i])\n            i=i+1\n            j=j+1\n        elif(nums1[i]<nums2[j]):\n            i=i+1\n        else:\n            j=j+1\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    if len_nums1 > len_nums2:\n        nums2 = nums2 + [-1]*(len_nums1 - len_nums2)\n    elif len_nums2 > len_nums1:\n        nums1 = nums1 + [-1]*(len_nums2 - len_nums1)\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1 or not nums2:\n        return []\n    a = min(nums1)\n    b = min(nums2)\n    i = 0\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    div_nums1 = []\n    div_nums2 = []\n    while i < len(nums1):\n        if nums1[i] % a == 0:\n            div_nums1.append(a)\n        i += 1\n    while i < len(nums2):\n        if nums2[i] % b == 0:\n            div_nums2.append(b)\n        i += 1\n    return div_nums1 + div_nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x / y for x, y in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # nums1 = set(nums1)\n    # nums2 = set(nums2)\n    # return nums1.difference(nums2)\n    return list(set(nums1).difference(set(nums2)))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # YOUR CODE HERE\n    lst1 = []\n    lst2 = []\n    for i in range(len(nums1)):\n        lst1.append(nums1[i]/nums2[i])\n    for j in range(len(nums2)):\n        lst2.append(nums2[j]/nums1[j])\n    return lst1,lst2\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str.rstrip('0123456789') + test_str[-1:] + test_str[:-1]\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # print(\"test_str: \", test_str)\n    # print(\"test_str.split(' '): \", test_str.split(' '))\n    # print(\"test_str.split(' ')[0]: \", test_str.split(' ')[0])\n    # print(\"test_str.split(' ')[-1]: \", test_str.split(' ')[-1])\n    # print(\"' '+test_str.split(' ')[0]+' '+test_str.split(' ')[-1]: \",''+test_str.split(' ')[0]+' '+test_str.split(' ')[-1])\n    return''.join([test_str.split(' ')[0],'' + test_str.split(' ')[-1]])\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = list(test_str)\n    if len(test_str) == 0:\n        return ''\n    count_moves = 0\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            for j in range(i + 1, len(s)):\n                if not s[j].isdigit():\n                    s[i], s[j] = s[j], s[i]\n                    i += 1\n                    count_moves += 1\n                    break\n        i += 1\n    print(' '.join(s))\n    return count_moves\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return (test_str.translate(str.maketrans('0123456789', '987654321')))\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isnumeric():\n            count += 1\n    print(count)\n    new_str = ''\n    for i in test_str:\n        if i.isnumeric():\n            new_str += str(i)\n        else:\n            new_str += i\n    for i in range(count):\n        new_str += str(i)\n    print(new_str)\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    a = []\n    for i in test_str:\n        if not i.isnumeric():\n            a.append(i)\n    a = a + test_str\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if int(a[i]) < int(a[j]):\n                a[i],a[j] = a[j],a[i]\n    a =''.join(a)\n    print(a)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    pass\ndef swap_case(test_str):\n    '''\n    Write a function that takes a string and returns that string with all\n    lowercase characters\n    '''\n    pass\ndef solve(matrix):\n    '''\n    Write a function that prints out the solution to\n    a sudoku puzzle.\n    '''\n    pass\ndef max_digit(n):\n    '''\n    Write a function that takes in a number and returns the maximum digit\n    in that number.\n    '''\n    pass\ndef is_even(n):\n    '''\n    Write a function that takes in a number and returns True if it is even,\n    False otherwise.\n    '''\n    pass\ndef first_even(n):\n    '''\n    Write a function that takes in a list of integers and returns True if the\n    first even number in the list is found and False otherwise.\n    '''\n    pass\ndef replace_space(str_1):\n    '''\n    Write a function that takes a string and replace any spaces in it with\n    empty string \"\".\n    '''\n    pass\ndef string_length(str_1):\n    '''\n    Write a function that takes a string and returns its length.\n    '''\n    pass\ndef triangle_number(n):\n    '''\n    Write a function that takes in an integer and returns the number of\n    triangles that can be formed by the integer.\n    '''\n    pass\ndef to_string_reverse(n):\n    '''\n    Write a function that takes in an integer and returns the string that\n    represents the reverse of the given integer.\n    '''\n    pass\ndef to_string_add(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the sum of the\n    characters in both strings.\n    '''\n    pass\ndef to_string_add_v2(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the sum of the\n    characters in both strings.\n    '''\n    pass\ndef is_palindrome(str_1):\n    '''\n    Write a function that takes in a string and returns True if the string\n    is a palindrome and False otherwise.\n    '''\n    pass\ndef to_string_subtract(str_1, str_2):\n    '''\n    Write a function that takes in two strings and subtracts the characters\n    in the first string from the characters in the second string and\n    returns the result.\n    '''\n    pass\ndef min_max_v2(arr):\n    '''\n    Write a function that takes in a list and returns a tuple of the\n    minimum and maximum values in the list.\n    '''\n    pass\ndef to_string_multiply(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns their product.\n    '''\n    pass\ndef to_string_multiply_v2(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns their product.\n    '''\n    pass\ndef sum_digits(n):\n    '''\n    Write a function that takes in a number and returns the sum of its\n    digits.\n    '''\n    pass\ndef is_prime(n):\n    '''\n    Write a function that takes in a number and returns True if it is prime and\n    False otherwise.\n    '''\n    pass\ndef max_prime_factor(n):\n    '''\n    Write a function that takes in a number and returns the maximum prime factor\n    of that number.\n    '''\n    pass\ndef to_string_divide(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the quotient of the\n    characters in the first string divided by the characters in the second\n    string.\n    '''\n    pass\ndef to_string_divide_v2(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the quotient of the\n    characters in the first string divided by the characters in the second\n    string.\n    '''\n    pass\ndef to_string_min(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the minimum of the\n    characters in the first string and the characters in the second string.\n    '''\n    pass\ndef to_string_min_v2(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the minimum of the\n    characters in the first string and the characters in the second string.\n    '''\n    pass\ndef min_max(arr):\n    '''\n    Write a function that takes in a list and returns a tuple of the minimum\n    and maximum values in the list.\n    '''\n    pass\ndef to_string_divide_v3(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the quotient of the\n    characters in the first string divided by the characters in the second\n    string.\n    '''\n    pass\ndef to_string_subtract_v2(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the difference\n    between the characters in the first string and the characters in the\n    second string.\n    '''\n    pass\ndef min_max_v3(arr):\n    '''\n    Write a function that takes in a list and returns a tuple of the minimum\n    and maximum values in the list.\n    '''\n    pass\ndef to_string_multiply_v4(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns their product.\n    '''\n    pass\ndef to_string_multiply_v5(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns their product.\n    '''\n    pass\ndef is_anagram(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns True if they are\n    anagrams and False otherwise.\n    '''\n    pass\ndef is_anagram_v2(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns True if they are\n    anagrams and False otherwise.\n    '''\n    pass\ndef to_string_add_v6(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns their concatenation.\n    '''\n    pass\ndef to_string_add_v7(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns their concatenation.\n    '''\n    pass\ndef to_string_add_v8(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns their concatenation.\n    '''\n    pass\ndef to_string_add_v9(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns their concatenation.\n    '''\n    pass\ndef reverse_string_v3(str_1):\n    '''\n    Write a function that takes in a string and returns its reverse.\n    '''\n    pass\ndef to_string_subtract_v3(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the difference\n    between the characters in the first string and the characters in the\n    second string.\n    '''\n    pass\ndef is_palindrome_v2(str_1):\n    '''\n    Write a function that takes in a string and returns True if it is a\n    palindrome and False otherwise.\n    '''\n    pass\ndef is_palindrome(str_1):\n    '''\n    Write a function that takes in a string and returns True if it is a\n    palindrome and False otherwise.\n    '''\n    pass\ndef to_string_swap_v3(str_1, str_2):\n    '''\n    Write a function that takes in two strings and returns the\n    concatenation of the characters in the first string and the characters\n    in the second string in the opposite order.\n    '''\n    pass\ndef is"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # string[0:10] + string[11:] + string[0:10]\n    \n    # # Approach 1 (Using Slicing)\n    # return ''.join(\n    #     string[1:] + string[0:1]\n    # )\n    \n    # Approach 2 (Manual)\n    \n    # first_part = string[0:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + first_part\n    \n    # Approach 3 (Manual)\n    \n    # first_part = string[0:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 4 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return second_part + first_part + second_part\n    \n    # Approach 5 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return second_part + first_part + second_part\n    \n    # Approach 6 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + first_part\n    \n    # Approach 7 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 8 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + first_part + second_part\n    \n    # Approach 9 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return second_part + second_part + first_part\n    \n    # Approach 10 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 11 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return second_part + first_part + second_part\n    \n    # Approach 12 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + first_part + second_part\n    \n    # Approach 13 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 14 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 15 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + first_part + second_part\n    \n    # Approach 16 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + first_part + second_part\n    \n    # Approach 17 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + first_part\n    \n    # Approach 18 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 19 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 20 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 21 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + first_part + second_part\n    \n    # Approach 22 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + first_part + second_part\n    \n    # Approach 23 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 24 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + first_part\n    \n    # Approach 25 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + first_part\n    \n    # Approach 26 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + first_part\n    \n    # Approach 27 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 28 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + first_part + second_part\n    \n    # Approach 29 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 30 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + first_part + second_part\n    \n    # Approach 31 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return first_part + second_part + second_part\n    \n    # Approach 32 (Manual)\n    \n    # first_part = string[:len(string)//2]\n    # second_part = string[len(string)//2:]\n    \n    # return second_part "
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #code here\n    lst = []\n    for i in test_str:\n        if i.isdigit():\n            lst.append(i)\n    return \"\".join(lst) + test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == None:\n        return None\n    if not isinstance(test_str, str):\n        return None\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def find_subset(a,l,r,divisors):\n        if r-l<2:\n            return 0\n        if l==r:\n            return a[l]\n        if l+1==r:\n            return a[l]\n        m=int(l+(r-l)/2)\n        lhs=find_subset(a,l,m,divisors)\n        rhs=find_subset(a,m+1,r,divisors)\n        #print(lhs,rhs)\n        if lhs!=0 and rhs!=0:\n            return max(lhs,rhs)+max(a[l],a[m])\n        elif lhs==0 and rhs!=0:\n            return rhs+max(a[l],a[m])\n        elif lhs!=0 and rhs==0:\n            return lhs+max(a[l],a[m])\n    divisors={}\n    a=sorted(a)\n    #print(a)\n    for i in range(len(a)):\n        divisors[a[i]]=1\n    for i in range(1,len(a)):\n        for j in range(i):\n            if a[i]%a[j]==0 and a[i]!=a[j]:\n                divisors[a[i]]=max(divisors[a[i]],divisors[a[j]]+1)\n    m=max(divisors.values())\n    largest_subset=[]\n    for i in divisors:\n        if divisors[i]==m:\n            largest_subset.append(i)\n    print(largest_subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    print(a)\n    if len(a) == 1:\n        return a[0]\n    subset = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if ((a[j] % a[i]) == 0) and (a[j] not in subset):\n                subset.append(a[i])\n    return len(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    a.sort()\n    max_set = set(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Your code goes here\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp_matrix = [[0]*n for _ in range(n)]\n    dp_matrix[0][0] = 1\n    #print(dp_matrix)\n    for i in range(1,n):\n        if a[i]%2 == 0:\n            dp_matrix[i][i] = 1\n        else:\n            dp_matrix[i][i] = 0\n            for j in range(i-1,-1,-1):\n                if a[i]%2 == 0 and dp_matrix[j][i-1] == 1:\n                    dp_matrix[i][i] = 1\n                    break\n                if a[j] == a[i] and dp_matrix[j][i-1] == 0:\n                    dp_matrix[i][i] = 1\n                    break\n    #print(dp_matrix)\n    for i in range(n-2,-1,-1):\n        for j in range(i+1,n):\n            if dp_matrix[i][j] == 1:\n                for k in range(i):\n                    if dp_matrix[k][i] == 1:\n                        dp_matrix[i][j] = 1\n                        break\n                if dp_matrix[i][j] == 0:\n                    dp_matrix[i][j] = dp_matrix[i][k]\n    #print(dp_matrix)\n    return dp_matrix[0][n-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    # Base case\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] % a[j]!= 0:\n                return 0\n    return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    sums = []\n    for i in range(len(a)):\n        sums.append(sum(a[:i+1]))\n    return max(sums)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def can_be_divided(x):\n        for i in range(2,x):\n            if x % i!= 0:\n                return False\n        return True\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # check if the number of divisors of each number is equal\n    # if it is not return 0\n    if any([n % x!= 0 for x in a]):\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Base case: no divisible pairs in the array\n    if len(a) == 0: return 0\n    # Keep track of the largest subset so far\n    res = 0\n    # Get all divisors of the first element in the array\n    divisor = find_divisors(a[0])\n    # Since we are already concerned with the largest subset, we can start from the second element.\n    for i in range(1, len(a)):\n        # We can also try to divide the element and the current element by each divisor.\n        # If we have found a larger subset of these divisors, we can save the previous subset's size.\n        # For example, if we have 4, 8 and 16, we can save the previous largest subset of 4.\n        # Then we can multiply the previous largest subset with the factor of 4, 8 and 16.\n        # If we have found a larger subset of these divisors, we can save the previous subset's size.\n        # For example, if we have 4, 8 and 16, we can save the previous largest subset of 4.\n        # Then we can multiply the previous largest subset with the factor of 4, 8 and 16.\n        curr_res = 0\n        # Iterate through all divisors of i.\n        for j in range(0, len(divisor)):\n            # If we find a larger subset of these divisors, save the previous subset's size.\n            if i % divisor[j] == 0:\n                curr_res = max(curr_res, res)\n        # Save the size of the new largest subset.\n        curr_res = curr_res * divisor[i % len(divisor)]\n        res = max(res, curr_res)\n    return res\n    \ndef largest_subset2(a):\n    '''\n    In the previous solution, we checked all of the divisors of the first element in the array.\n    For each number i, we can find all of its divisors.\n    In this solution, we can use any number of the divisors to find the largest subset.\n    Instead of calculating each divisor and multiplying the largest subset, we can instead sum the largest subsets of the divisors.\n    For example, if we have 4, 8 and 16, we can sum 4, 4, 8, 16, and 8, 4, 8.\n    This way, we can find the largest subset of each divisor.\n    Let us assume that each divisor i has its largest subset of itself and 1.\n    Then, we can calculate each subset of i and take the sum of these subsets.\n    Let us then assume that each divisor i has its largest subset of itself and 2.\n    Then, we can calculate each subset of i and take the sum of these subsets.\n    '''\n    # Base case: no divisible pairs in the array\n    if len(a) == 0: return 0\n    # Keep track of the largest subset so far\n    res = 0\n    # Keep track of the divisor with the largest subset so far.\n    max_divisor = 0\n    # Iterate through each element in the array.\n    for i in range(0, len(a)):\n        # Find all divisors of i.\n        divisor_count = 0\n        divisors = []\n        for j in range(1, len(a)):\n            if i % j == 0:\n                divisor_count += 1\n                divisors.append(j)\n        # Since we are already concerned with the largest subset, we can start from the second element.\n        curr_res = 1\n        # Check if the largest subset of all divisors is larger than the previous largest subset.\n        # If it is, then we can multiply the previous largest subset with its factor.\n        for j in range(0, divisor_count):\n            if res < curr_res:\n                res = curr_res\n            curr_res = curr_res * divisors[j]\n        # Save the largest divisor if it is larger than the previous largest divisor.\n        if divisor_count > max_divisor:\n            max_divisor = divisor_count\n    # Calculate the final answer.\n    curr_res = 1\n    for j in range(0, max_divisor):\n        if res < curr_res:\n            res = curr_res\n        curr_res = curr_res * divisors[j]\n    return res\n    \ndef largest_subset3(a):\n    '''\n    In the previous solution, we checked all of the divisors of the first element in the array.\n    For each number i, we can find all of its divisors.\n    In this solution, we can use any number of the divisors to find the largest subset.\n    Instead of calculating each divisor and multiplying the largest subset, we can instead sum the largest subsets of the divisors.\n    For example, if we have 4, 8 and 16, we can sum 4, 4, 8, 16, and 8, 4, 8.\n    This way, we can find the largest subset of each divisor.\n    Let us assume that each divisor i has its largest subset of itself and 1.\n    Then, we can calculate each subset of i and take the sum of these subsets.\n    Let us then assume that each divisor i has its largest subset of itself and 2.\n    Then, we can calculate each subset of i and take the sum of these subsets.\n    '''\n    # Base case: no divisible pairs in the array\n    if len(a) == 0: return 0\n    # Keep track of the largest subset so far\n    res = 0\n    # Keep track of the divisor with the largest subset so far.\n    max_divisor = 0\n    # Iterate through each element in the array.\n    for i in range(0, len(a)):\n        # Find all divisors of i.\n        divisor_count = 0\n        divisors = []\n        for j in range(1, len(a)):\n            if i % j == 0:\n                divisor_count += 1\n                divisors.append(j)\n        # Since we are already concerned with the largest subset, we can start from the second element.\n        curr_res = 1\n        # Check if the largest subset of all divisors is larger than the previous largest subset.\n        # If it is, then we can multiply the previous largest subset with its factor.\n        for j in range(0, divisor_count):\n            if res < curr_res:\n                res = curr_res\n            curr_res = curr_res * divisors[j]\n        # Save the largest divisor if it is larger than the previous largest divisor.\n        if divisor_count > max_divisor:\n            max_divisor = divisor_count\n    # Calculate the final answer.\n    curr_res = 1\n    for j in range(0, max_divisor):\n        if res < curr_res:\n            res = curr_res\n        curr_res = curr_res * divisors[j]\n    return res\n    \ndef largest_subset4(a):\n    '''\n    In the previous solution, we checked all of the divisors of the first element in the array.\n    For each number i, we can find all of its divisors.\n    In this solution, we can use any number of the divisors to find the largest subset.\n    Instead of calculating each divisor and multiplying the largest subset, we can instead sum the largest subsets of the divisors.\n    For example, if we have 4, 8 and 16, we can sum 4, 4, 8, 16, and 8, 4, 8.\n    This way, we can find the largest subset of each divisor.\n    Let us assume that each divisor i has its largest subset of itself and 1.\n    Then, we can calculate each subset of i and take the sum of these subsets.\n    Let us then assume that each divisor i has its largest subset of itself and 2.\n    Then, we can calculate each subset of i and take the sum of these subsets.\n    '''\n    # Base case: no divisible pairs in the array\n    if len(a) == 0: return 0\n    # Keep track of the largest subset so far\n    res = 0\n    # Keep track of the divisor with the largest subset so far.\n    max_diviso"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = n//2\n    i = 0\n    j = m\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list = sorted(arr1 + arr2)\n    mid = len(sorted_list)//2\n    return sorted_list[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = arr1[::-1]\n    arr2 = arr2[::-1]\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr1[mid] < arr2[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr1[high]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    median = []\n    \n    # if length of both array is even\n    if len(arr1) == len(arr2):\n        for i in range(len(arr1)):\n            if i % 2 == 0:\n                median.append(arr1[i] + arr2[i])\n            else:\n                median.append(arr1[i] - arr2[i])\n        \n    # if length of both array is odd\n    elif len(arr1) == len(arr2) + 1:\n        for i in range(len(arr1)):\n            if i % 2 == 0:\n                median.append(arr1[i] + arr2[i])\n            else:\n                median.append(arr1[i] - arr2[i + 1])\n        median.append(arr1[len(arr1) - 1])\n    \n    # if length of both array is odd\n    else:\n        for i in range(len(arr1)):\n            if i % 2 == 0:\n                median.append(arr1[i] + arr2[i])\n            else:\n                median.append(arr1[i] - arr2[i + 1])\n        median.append(arr1[len(arr1) - 1])\n    \n    return median[int(len(median) / 2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        arr2, arr1 = arr1, arr2\n    arr1.sort()\n    arr2.sort()\n    i = 0\n    j = 0\n    for k in range(n):\n        if arr1[i] < arr2[j]:\n            print(arr1[i])\n            i += 1\n        else:\n            print(arr2[j])\n            j += 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    len1, len2 = len(arr1), len(arr2)\n    while (i < len1 and j < len2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    len1, len2 = len1 - i, len2 - j\n    if len1 > len2:\n        median = arr1[i]\n    else:\n        median = arr2[j]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    arr1.sort()\n    arr2.sort()\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # arr1 = list(arr1)\n    # arr2 = list(arr2)\n    arr1.sort()\n    arr2.sort()\n    print(arr1)\n    print(arr2)\n    return (arr1[(len(arr1)-1)//2] + arr2[(len(arr2)-1)//2])//2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m, n = len(arr1), len(arr2)\n    if m < n:\n        arr1, arr2, m, n = arr2, arr1, n, m\n    if n == 0:\n        raise ValueError\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # insert sort\n    def insertion_sort(arr):\n        for i in range(1, len(arr)):\n            key = arr[i]\n            j = i-1\n            while j >=0 and arr[j] > key:\n                arr[j+1] = arr[j]\n                j-=1\n            arr[j+1] = key\n        return arr\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nth = []\n    for i in range(len(nums)):\n        nth.append(n ** i)\n    return nth\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # Your code here\n    return (n ** i) for i in range(n)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    nums_power = []\n    for i in range(len(nums)):\n        nums_power.append(nums[i]**n)\n    return nums_power\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) < n:\n        return 'ERROR'\n    else:\n        pow = lambda x: x**n\n        return list(map(pow,nums))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = len(nums)\n    if l < n:\n        return None\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # if we can use just append to make a copy of the list\n    #append_list = nums.copy()\n    #for i in range(1,n+1):\n        #append_list.append(i)\n    #return append_list\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    x = 0\n    for i in range(len(nums)):\n        x = nums[i]**n\n        print(x)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # return [i**n for i in nums]\n    return list(map(lambda x: x**n, nums))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nth_nums = []\n    for i in nums:\n        nth_nums.append(i**n)\n    return nth_nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #j = 0\n    #l = []\n    #for i in nums:\n        #l.append(i**n)\n        #j += 1\n        #if j == n:\n            #j = 0\n            #return l\n    #return l\n    l = list(map(lambda x:x**n,nums))\n    return l\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for i in string:\n        if i.isupper():\n            result += i\n        else:\n            result += i.upper()\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    s1 = string.upper()\n    print(s1)\nis_upper(\"akshay\")\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_str = ''\n    for i in string:\n        if i.isupper():\n            upper_str += i.lower()\n        else:\n            upper_str += i.upper()\n    return upper_str\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string:\n        return string.upper()\n    else:\n        return None\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    \n    if not isinstance(string, str):\n        raise TypeError(\"The input should be a string\")\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list1 = newList\n    return list1[:1] + list1[-1:] + list1[1:-1] + list1[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    start=0\n    end=len(newList)-1\n    temp=newList[start]\n    newList[start]=newList[end]\n    newList[end]=temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    x = len(newList)\n    newList[0], newList[x-1] = newList[x-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    if len(newList) == 1:\n        return newList\n    elif len(newList) == 2:\n        newList[0] = newList[-1]\n        newList[-1] = newList[0]\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    \n    \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #List1 = list(newList)\n    print(newList)\n    lst = list(newList)\n    lst[0], lst[-1] = lst[-1], lst[0]\n    print(\"The swapped list : \", lst)\n    print()\n    return lst\n    "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    x = newList.pop()\n    newList.insert(0, newList.pop())\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = list(newList)\n    l[0], l[-1] = l[-1], l[0]\n    return l\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"The original list is: \", newList)\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The list after swapping is: \", newList) \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (1/2)*(r*r*sin(pi/3))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (1/2)*(1/r) * (1+sqrt(2)/2) * r*r\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    '''\n    For the triangle at the center of a circle, the area of the triangle is.\n    '''\n    from math import pi\n    area = pi * (r * r)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 3*r*r/2\n    print(a)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14*r*r\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Your code here\n    import math\n    def euler_formula(r) :\n        return math.pi * r * r\n    print(f'Input: {r}')\n    print(f'Output: {euler_formula(r)}')\n    return euler_formula(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (1/2) * r**2 * sqrt(2 - sqrt((2-2*sqrt(2))/2))\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def c(r) :\n        if r == 0 :\n            return 0\n        else :\n            return 2*(r**2)*(math.pi**2)**0.5\n    print(c(r))\ntriangle_area(4)"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(a, b, c) :\n        \"\"\"\n        Calculates the area of a triangle.\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (1/2)*(math.sqrt(3)*r)**2\n    print(area)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start >= end:\n        return start\n    mid = (start+end)//2\n    if array[mid] == mid+1:\n        return find_First_Missing(array,start,mid)\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    if array[mid] < mid+1:\n        return find_First_Missing(array,mid+1,end)\n    if array[mid] > mid+1:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if array[start]!= start:\n        return start\n    elif array[end]!= end:\n        return end\n    else:\n        return find_First_Missing(array,start + 1,end - 1)\n    \nif __name__ == '__main__':\n    arr = [1,4,5,6,8,12,14,15,16,18,22,23,28,30,34,35,37,39,40,43,44,46,47,48,50,51,52,53,54,56,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    # If end is not given\n    if end==None:\n        end=len(array)\n    \n    # If array is empty\n    if start>=end:\n        return None\n    \n    # If start is greater than end\n    if start>end:\n        return None\n    \n    # If start is equal to end\n    if start==end:\n        return start\n    \n    # Initialize the min_num as the start number\n    min_num=array[start]\n    \n    # For every number in range\n    for i in range(start+1,end+1):\n        # If the number is smaller than min_num\n        if array[i]<min_num:\n            # Update the min_num\n            min_num=array[i]\n    \n    # If min_num is not equal to the start number\n    if min_num!=array[start]:\n        # Return the next smallest number that is smaller than the start number\n        return find_First_Missing(array,start+1,end)\n    else:\n        # Return the next smallest number that is smaller than the end number\n        return find_First_Missing(array,start+1,end-1)\n        \nif __name__=='__main__':\n    array=[0,1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    array2=[1,2,3,4,5,6,7]\n    print(find_First_Missing(array2))\n    array3=[2,1,3,4,5,6,7]\n    print(find_First_Missing(array3))\n    array4=[2,4,5,3,1,6,7]\n    print(find_First_Missing(array4))\n    array5=[2,4,5,3,1,6,7]\n    print(find_First_Missing(array5))\n    array6=[2,4,5,3,1,6,7,8,9,10]\n    print(find_First_Missing(array6))\n    array7=[2,4,5,3,1,6,7,8,9,10,11]\n    print(find_First_Missing(array7))"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    if end is None:\n        end = n\n    if start == end:\n        return end+1\n    mid = (start+end)//2\n    if array[mid] == mid+1:\n        return find_First_Missing(array,mid+1,end)\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    if array[mid] > mid+1:\n        return find_First_Missing(array,start,mid)\n    if array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #using binary search\n    if start==end:\n        return start\n    if array[start]==array[end]:\n        return end\n    middle=int((start+end)/2)\n    if array[middle]>array[start] and array[middle]>array[end]:\n        return find_First_Missing(array,start,middle-1)\n    if array[middle]<array[start]:\n        return find_First_Missing(array,middle+1,end)\n    if array[middle]>array[start] and array[middle]<array[end]:\n        return find_First_Missing(array,start,middle-1)\n    return find_First_Missing(array,middle+1,end)\n    \nprint(\"First missing number using binary search: \",find_First_Missing([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if i == array[i]:\n            continue\n        else:\n            return i\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array)-1 if not end else end\n    for i in range(start,end+1):\n        if array[i]!=i+1 and array[i]!=i+2:\n            return i+1\n    return len(array)+1\nprint(find_First_Missing([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)\n    \n    if start > end:\n        return None\n    \n    if array[start] > end:\n        return None\n    \n    if array[start] < array[start+1]:\n        return array[start]\n    \n    if start == end-1:\n        return start+2\n    \n    mid = (start+end)//2\n    \n    if array[mid] > mid+1:\n        return find_First_Missing(array,start,mid)\n    \n    if array[mid] < mid:\n        return find_First_Missing(array,mid,end)\n    \n    if array[mid] == mid+1:\n        return find_First_Missing(array,mid+2,end)\n    \n    return mid+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #when given array is empty\n    if len(array)==0:\n        return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if end == None else end\n    for i in range(start,end):\n        if array[i]!=i+1 and array[i]!=i+2:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for i in range(0, len(string)):\n        if string[i]!='':\n            new_string += string[i]\n        else:\n            new_string += '%20'\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if len(string) < 2:\n        return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n    "
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if string == \"\":\n        return \"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i] == \" \":\n            new_string += \"%20\"\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join([char if char!='' else '%20' for char in string])\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for x in list:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return even,odd\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print(\"Splitting list with even numbers\")\n    print(\"List is:\", list)\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    print(\"Even numbers list is:\", even_list)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for x in list:\n        if x%2 == 0:\n            evens.append(x)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in list:\n        if i%2==0:\n            print(i)\n            \nlist=[1,2,3,4,5,6,7,8,9,10]\nSplit(list"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for n in list:\n        if n % 2 == 0:\n            even_list.append(n)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    newlist = []\n    for i in list:\n        if i%2==0:\n            newlist.append(i)\n    print('The even numbers from the list are : ',newlist)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list.sort()\n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for x in list: \n        if x % 2 == 0: \n            even_list.append(x) \n    return even_list \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2 == 0:\n            even_numbers.append(i)\n    print('The even numbers from the list are: ',even_numbers)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i]%2==0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(4):\n        t = (ele[0] + sub[0] if i == 0 else ele[0] - sub[0]) if ele[1] == 0 else (ele[1] + sub[1] if i == 1 else ele[1] - sub[1])\n        if t >= 0 and t <= 5:\n            yield (t,i)\n        else:\n            continue\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    if x == 0:\n        if y == 0:\n            sub.append((1,0))\n        elif y == 1:\n            sub.append((1,2))\n        elif y == 2:\n            sub.append((1,1))\n        elif y == 3:\n            sub.append((1,3))\n    elif x == 1:\n        if y == 0:\n            sub.append((0,1))\n        elif y == 1:\n            sub.append((0,2))\n        elif y == 2:\n            sub.append((0,3))\n        elif y == 3:\n            sub.append((0,0))\n    elif x == 2:\n        if y == 0:\n            sub.append((2,1))\n        elif y == 1:\n            sub.append((2,2))\n        elif y == 2:\n            sub.append((2,3))\n        elif y == 3:\n            sub.append((2,0))\n    elif x == 3:\n        if y == 0:\n            sub.append((3,1))\n        elif y == 1:\n            sub.append((3,2))\n        elif y == 2:\n            sub.append((3,3))\n        elif y == 3:\n            sub.append((3,0))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele)!= tuple: \n        raise TypeError('input must be a tuple')\n    if len(ele)!= 2: \n        raise TypeError('input tuple must have length 2')\n    if ele[0] < 0 or ele[1] < 0: \n        raise ValueError('input must be an integer')\n    sub.append((ele[0] - 1, ele[1])) \n    sub.append((ele[0] + 1, ele[1])) \n    sub.append((ele[0], ele[1] - 1)) \n    sub.append((ele[0], ele[1] + 1)) \n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == None: \n        return None\n    return [ele + i for i in [\"-1\",\"0\",\"1\"]]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Check if tuple is empty\n    if ele == ():\n        return sub\n    else:\n        # If first element, add it to the sublist and return the list\n        if ele[0] == 0:\n            sub.append(ele[1])\n            return sub\n        # If second element, add it to the sublist and return the list\n        elif ele[1] == 0:\n            sub.append(ele[0])\n            return sub\n        # If none of these conditions, add the first element of the list to the sublist and add it to the sublist\n        else:\n            sub.append(ele[0])\n            sub.append(ele[1])\n            return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Subtracting 1 and dividing by 2\n    sub.append(tuple(map(lambda x, y: (x - 1) / 2, ele, (y - 1) / 2)))\n    # Subtracting 1 and dividing by 2\n    sub.append(tuple(map(lambda x, y: (x + 1) / 2, ele, (y - 1) / 2)))\n    # Subtracting 1 and dividing by 2\n    sub.append(tuple(map(lambda x, y: (x - 1) / 2, ele, (y + 1) / 2)))\n    # Subtracting 1 and dividing by 2\n    sub.append(tuple(map(lambda x, y: (x + 1) / 2, ele, (y + 1) / 2)))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    a = [(i+1,j) for i,j in ele]\n    b = [(i,j+1) for i,j in ele]\n    c = [(i-1,j) for i,j in ele]\n    d = [(i,j-1) for i,j in ele]\n    e = [(i+1,j+1) for i,j in ele]\n    f = [(i+1,j-1) for i,j in ele]\n    g = [(i-1,j+1) for i,j in ele]\n    h = [(i-1,j-1) for i,j in ele]\n    return set(a+b+c+d+e+f+g+h)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [\n    (x - 1, y),\n    (x + 1, y),\n    (x, y - 1),\n    (x, y + 1),\n    ]\n    \ndef is_valid_coord(x, y, size):\n    '''\n    Check if the coordinates are within the range of the matrix\n    '''\n    return x >= 0 and x < size and y >= 0 and y < size\n    \ndef is_valid_path(path, size):\n    '''\n    Check if the given path is valid\n    '''\n    if len(path) <= 1:\n        return False\n    \n    for i in range(len(path) - 1):\n        if not is_valid_coord(path[i][0], path[i][1], size):\n            return False\n        if not is_valid_coord(path[i + 1][0], path[i + 1][1], size):\n            return False\n        if path[i][1] == path[i + 1][1] and path[i][0] == path[i + 1][0]:\n            return False\n        if path[i + 1][1] - path[i][1]!= 1:\n            return False\n        if path[i][0]!= path[i + 1][0] and path[i + 1][1] - path[i][1]!= 1:\n            return False\n    return True\n    \ndef print_path(path, size):\n    '''\n    Print the path\n    '''\n    for i in range(len(path)):\n        print(path[i])\n        \ndef get_path(ele, sub, size):\n    '''\n    Get the next coordinate\n    '''\n    x, y = ele\n    #print(sub)\n    if sub == [] or x < 0 or x >= size or y < 0 or y >= size:\n        return ele\n    #sub.sort(key = lambda x: abs(x[0] - ele[0]) + abs(x[1] - ele[1]))\n    for coord in adjac(ele, sub):\n        if is_valid_coord(*coord, size):\n            if coord not in sub:\n                sub.append(coord)\n            return get_path(coord, sub, size)\n    return ele\n    \ndef find_path(x, y, size):\n    '''\n    Find the path\n    '''\n    sub = []\n    path = [(x, y)]\n    sub.append((x, y))\n    while len(path) > 0:\n        ele = path.pop(0)\n        if is_valid_coord(*ele, size):\n            for coord in adjac(ele, sub):\n                if coord not in sub:\n                    sub.append(coord)\n                    path.append(coord)\n    return path\n    \ndef solve():\n    '''\n    Main function\n    '''\n    size = int(input())\n    grid = []\n    for i in range(size):\n        grid.append(list(input()))\n    \n    for ele in find_path(0, 0, size):\n        if grid[ele[0]][ele[1]] == '0':\n            grid[ele[0]][ele[1]] = '1'\n            print(\"Case #%d: %s\" % (case_num, ''.join(grid)))\n            return\n        \n    print(\"Case #%d: %s\" % (case_num, ''.join(grid)))\n    \n    return\n    \nif __name__ == '__main__':\n    case_num = 1\n    solve("
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[1] + 1 < len(ele[0]):\n        sub.append((ele[0], ele[1]+1))\n    if ele[1] - 1 >= 0:\n        sub.append((ele[0], ele[1]-1))\n    if ele[0] + 1 < len(ele[0]):\n        sub.append((ele[0]+1, ele[1]))\n    if ele[0] - 1 >= 0:\n        sub.append((ele[0]-1, ele[1]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    for dx, dy in dirs:\n        nx = x + dx\n        ny = y + dy\n        if nx > -1 and nx < 4 and ny > -1 and ny < 4 and (nx, ny)!= (x, y):\n            sub.append((nx, ny))\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_',' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # we can split the text by whitespace and check if each word is no longer than\n    # or equal to 1 character long and if so, replace it with an underscore\n    return ''.join(['_' if len(word) == 1 else word for word in text.split()])\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_pattern = r'\\s'\n    underscore_pattern = r'_'\n    if not isinstance(text, str):\n        raise TypeError\n    text = re.sub(space_pattern, underscore_pattern, text)\n    text = re.sub(underscore_pattern, space_pattern, text)\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text: return text\n    text = text.strip()\n    return text.replace(' ', '_') if text else text.replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == \"\":\n        return \"\"\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + \"_\" + text[i + 1:]\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \"\".join(text.split()).replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    print(text.replace(' ', '_'))\n    print(text.replace('_',''))\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    lst = text.split()\n    for i in range(len(lst)):\n        if lst[i] == \" \":\n            lst[i] = \"_\"\n        elif lst[i] == \"_\":\n            lst[i] = \" \"\n    return \" \".join(lst)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    i = 0\n    while count < len(num_list):\n        if num_list[count] == 0:\n            count += 1\n        else:\n            i += 1\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    while len(num_list)!= 0:\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                num_list.pop(i)\n                num_list.append(0)\n                break\n            else:\n                continue\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    print(num_list)\n    if len(num_list) == 0:\n        return\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count_zero = 0\n    count_one = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count_zero += 1\n            num_list[count_zero], num_list[i] = num_list[i], num_list[count_zero]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    while zero_count > 0:\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                num_list[i] = num_list[i-1]\n                num_list[i-1] = 0\n                zero_count -= 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list[:] = [n for n in num_list if n!= 0]\n    num_list.extend([0]*(len(num_list) - len(num_list)))\n    return num_list\n    \ndef move_to_end(num_list):\n    '''\n    Write a python function to move all non-zero elements to the end of the given list.\n    '''\n    n = 0\n    while n < len(num_list)-1:\n        if num_list[n] == 0:\n            num_list.pop(n)\n        else:\n            n += 1\n    num_list.extend([0]*(len(num_list) - len(num_list)))\n    return num_list\n    \ndef move_to_beginning(num_list):\n    '''\n    Write a python function to move all non-zero elements to the beginning of the given list.\n    '''\n    for i in range(len(num_list)-1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.insert(0, 0)\n    return num_list\n    \ndef move_to_end_with_one_zero(num_list):\n    '''\n    Write a python function to move all non-zero elements to the end of the given list.\n    '''\n    if len(num_list) == 1 and num_list[0] == 0:\n        return num_list\n    num_list[:] = [n for n in num_list if n!= 0]\n    num_list.append(0)\n    num_list.extend([0]*(len(num_list) - len(num_list)))\n    return num_list\n    \ndef move_to_beginning_with_one_zero(num_list):\n    '''\n    Write a python function to move all non-zero elements to the beginning of the given list.\n    '''\n    if len(num_list) == 1 and num_list[0] == 0:\n        return num_list\n    num_list[:] = [n for n in num_list if n!= 0]\n    num_list.insert(0, 0)\n    num_list.extend([0]*(len(num_list) - len(num_list)))\n    return num_list\n    \ndef reverse_list(num_list):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    return num_list[::-1]\n    \ndef reverse_sublist(num_list):\n    '''\n    Write a python function to reverse the sublist in the given list.\n    '''\n    sublist_len = int(len(num_list)/2)\n    n = 0\n    while n < sublist_len:\n        num_list[n], num_list[sublist_len - n - 1] = num_list[sublist_len - n - 1], num_list[n]\n        n += 1\n    return num_list\n    \ndef rotate_list(num_list):\n    '''\n    Write a python function to rotate the given list.\n    '''\n    n = len(num_list) - 1\n    for i in range(n):\n        num_list[i], num_list[n - i] = num_list[n - i], num_list[i]\n    return num_list\n    \ndef rotate_sublist(num_list, k):\n    '''\n    Write a python function to rotate the sublist in the given list.\n    '''\n    n = k % len(num_list)\n    num_list[:] = num_list[n:] + num_list[:n]\n    return num_list\n    \ndef rotate_list_by_size(num_list, k):\n    '''\n    Write a python function to rotate the list by given size.\n    '''\n    k = k % len(num_list)\n    return num_list[k:] + num_list[:k]\n    \ndef swap_sublist(num_list, start, end):\n    '''\n    Write a python function to swap the sublist in the given list.\n    '''\n    if start < 0 or end > len(num_list):\n        raise IndexError(\"Sublist is out of bounds\")\n    num_list[start:end] = num_list[start:end][::-1]\n    return num_list\n    \ndef swap_sublist_with_index(num_list, start, end):\n    '''\n    Write a python function to swap the sublist in the given list with given index.\n    '''\n    if start < 0 or end > len(num_list):\n        raise IndexError(\"Sublist is out of bounds\")\n    sublist = num_list[start:end]\n    num_list[start:end] = sublist[::-1]\n    return num_list\n    \ndef swap_sublist_with_two_indexes(num_list, start1, end1, start2, end2):\n    '''\n    Write a python function to swap the sublist in the given list with two given indexes.\n    '''\n    if start1 < 0 or end1 > len(num_list) or start2 < 0 or end2 > len(num_list):\n        raise IndexError(\"Sublist is out of bounds\")\n    sublist_1 = num_list[start1:end1]\n    sublist_2 = num_list[start2:end2]\n    num_list[start1:end1] = sublist_2\n    num_list[start2:end2] = sublist_1\n    return num_list\n    \ndef swap_sublist_with_two_indexes_with_value(num_list, start1, end1, start2, end2, value):\n    '''\n    Write a python function to swap the sublist in the given list with two given indexes with given value.\n    '''\n    if start1 < 0 or end1 > len(num_list) or start2 < 0 or end2 > len(num_list):\n        raise IndexError(\"Sublist is out of bounds\")\n    sublist_1 = num_list[start1:end1]\n    sublist_2 = num_list[start2:end2]\n    num_list[start1:end1] = sublist_2\n    num_list[start2:end2] = sublist_1\n    num_list[start1:end1] = [value]*len(sublist_1)\n    num_list[start2:end2] = [value]*len(sublist_2)\n    return num_list\n    \ndef reverse_sublist_in_place(num_list, start, end):\n    '''\n    Write a python function to reverse the sublist in the given list.\n    '''\n    if start < 0 or end > len(num_list):\n        raise IndexError(\"Sublist is out of bounds\")\n    for i in range(start, end):\n        num_list[i], num_list[end-1] = num_list[end-1], num_list[i]\n    return num_list\n    \ndef reverse_sublist_in_place_with_index(num_list, start, end):\n    '''\n    Write a python function to reverse the sublist in the given list with given index.\n    '''\n    if start < 0 or end > len(num_list):\n        raise IndexError(\"Sublist is out of bounds\")\n    for i in range(start, end):\n        num_list[i], num_list[start] = num_list[start], num_list[i]\n    return num_list\n    \ndef remove_duplicates_from_sorted_list(num_list):\n    '''\n    Write a python function to remove all duplicates from the sorted list.\n    '''\n    if len(num_list) <= 1:\n        return num_list\n    n = len(num_list)\n    i = 0\n    for j in range(1, n):\n        if num_list[j]!= num_list[i]:\n            i += 1\n            num_list[i] = num_list[j]\n    return num_list[:i+1]\n    \ndef remove_duplicates_from_sorted_list_with_index(num_list):\n    '''\n    Write a python function to remove all duplicates from the sorted lis"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        for j in range(len(num_list)-1):\n            if num_list[j] == 0:\n                num_list.append(num_list.pop(j))\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    for i in range(n):\n        if num_list[i]!= 0:\n            num_list[i], num_list[n-1] = num_list[n-1], num_list[i]\n            n = n-1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #code here\n    if n <= 1 :\n        return\n    else :\n        arr.sort()\n        xorSum = 0\n        for i in range(n - 1) :\n            xorSum += arr[i] ^ arr[i + 1]\n        return xorSum"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_array = []\n    for i in range(0,n):\n        for j in range(i,n):\n            xor_array.append((arr[i] ^ arr[j]))\n    print(xor_array)\n    sum_of_xor = 0\n    for i in range(0,n):\n        sum_of_xor += xor_array[i]\n    print(sum_of_xor)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    xor_sum = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n            \n    return xor_sum\n            \ndef pair_XOR(arr,n):\n    '''\n    Write a python function to find the number of pairs that have the same value but different values in the given list.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(n-1) : \n        for j in range(i+1,n) :\n            Sum += (arr[i] ^ arr[j]) \n    return Sum \ndef PairXORSum(arr):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            Sum += (arr[i] ^ arr[j])\n    return Sum\nif __name__ == \"__main__\":\n    #arr = [1, 2, 3, 4, 5]\n    arr = list(map(int, input().split(' ')))\n    print(PairXORSum(arr)"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(n):\n            xor = arr[i] ^ arr[j]\n            print(xor)\n        print(\"\\n\")\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    #sum=0\n    #a=arr.copy()\n    #for i in range(n):\n        #for j in range(i+1,n):\n            #if(a[i]==a[j]):\n                #break\n            #sum=sum+a[i]^a[j]\n    #print(sum)\n    #print(sum1)\n    sum1=0\n    for i in range(n):\n        sum1 = sum1 + arr[i]\n    sum1 = sum1*(sum1+1)//2\n    return sum1\n    #print(sum1)"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            s=s+arr[i]^arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            xor_sum += (arr[i] ^ arr[j])\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0, n-1) : \n        res = res ^ arr[i] \n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n==0 :\n        return 0\n    else :\n        Sum = arr[0]\n        for i in range(1,n) :\n            Sum = Sum^arr[i]\n        return Sum\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    ans = []\n    for item in iterable:\n        hq.heappush(ans, item)\n    return ans\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    for i in range(len(h)-1):\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef test_heap_sort():\n    assert heap_sort([2,3,1]) == [1,2,3]\n    assert heap_sort([]) == []\n    assert heap_sort([1,2,3]) == [1,2,3]\n    assert heap_sort([1,2,3,4,5]) == [1,2,3,4,5]\n    assert heap_sort([5,4,3,2,1]) == [1,2,3,4,5]\n    print('test_heap_sort pass')\nif __name__ == '__main__':\n    test_heap_sort("
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hp = []\n    heapq.heapify(hp)\n    for i in iterable:\n        heapq.heappush(hp, i)\n    result = []\n    while hp:\n        result.append(heapq.heappop(hp))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    my_heap = []\n    for i in iterable:\n        hq.heappush(my_heap,i)\n    \n    return sorted(my_heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [heapq.heappop(iterable) for i in iterable]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def min_heapify(heap, i):\n        min_index = i\n        left = 2*i + 1\n        right = 2*i + 2\n        if left < len(heap) and heap[left] < heap[min_index]:\n            min_index = left\n        if right < len(heap) and heap[right] < heap[min_index]:\n            min_index = right\n        if i!= min_index:\n            heap[i], heap[min_index] = heap[min_index], heap[i]\n            min_heapify(heap, min_index)\n    heap = iterable[:]\n    heap_size = len(heap)\n    for i in range(heap_size // 2, -1, -1):\n        min_heapify(heap, i)\n    for i in range(heap_size - 1, 0, -1):\n        heap[i], heap[0] = heap[0], heap[i]\n        min_heapify(heap, 0)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    '''\n    1. make a min_heap of size n and push the entire list into the heap.\n    2. The node with minimum key needs to be removed and the root of the heap needs to be changed.\n    3. swap the root of the heap with the first node and push it back.\n    4. recursively call the function in the first node.\n    '''\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    \n    while len(heap) > 1:\n        first_node = hq.heappop(heap)\n        second_node = hq.heappop(heap)\n        heap[0] = first_node + second_node\n        hq.heappush(heap, first_node + second_node)\n    '''\n    '''\n    if n == 0:\n        return iterable\n    iterable = iterable[::-1]\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        first_node = hq.heappop(heap)\n        second_node = hq.heappop(heap)\n        heap[0] = first_node + second_node\n        hq.heappush(heap, first_node + second_node)\n    return heap[::-1]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, hq.heappop(heap) + hq.heappop(heap))\n    return heap\n    '''\n    '''\n    1. Create a max heap from the iterable.\n    2. Store the max value at the end of the heap and push it back to the heap.\n    3. repeat step 1 and 2 till the stack is empty.\n    '''\n    '''\n    if n == 0:\n        return iterable\n    iterable = iterable[::-1]\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -hq.heappop(heap) + hq.heappop(heap))\n    return -heap[0]\n    '''\n    '''\n    if n == 0:\n        return iterable\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    while len(heap) > 1:\n        hq.heappush(heap, -"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    count_of_elements_in_list = len(iterable)\n    # Initialize the max-heap with the first element.\n    max_heap = []\n    for i in range(count_of_elements_in_list):\n        if count_of_elements_in_list <= 1:\n            break\n        hq.heappush(max_heap,iterable[i])\n    # For the rest of the elements.\n    for i in range(count_of_elements_in_list - 1):\n        hq.heappush(max_heap,iterable[i])\n    # Extract and return the sorted elements.\n    for i in range(count_of_elements_in_list):\n        hq.heappush(iterable,max_heap[0])\n        hq.heappop(max_heap)\n    return iterable\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount == 0: \n        print('The profit and loss of the business is 0')\n    elif actual_cost - sale_amount > 0: \n        print('The profit and loss of the business is negative')\n    else:\n        print('The profit and loss of the business is positive')\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == 0 or actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost==sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(f\" {sale_amount} and {actual_cost} are equal\")\n    elif actual_cost < sale_amount:\n        print(f\"{sale_amount} is greater than {actual_cost}\")\n    else:\n        print(f\"{sale_amount} is less than {actual_cost}\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"No Profit or Losses\")\n    else:\n        print(\"Profit or Loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return \"NO PROFIT AND NO LOSS\"\n    elif actual_cost<sale_amount:\n        return \"LOSS\"\n    else:\n        return \"PROFIT\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    return True\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 17.27\n    b = 237.7\n    c = 35.74\n    wind_chill = (a + (c * t)/(t + (273.16) + (v ** 2) / (4 * c * a)))\n    return wind_chill\n    \nprint(wind_chill(120,60))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    A = 35.74\n    B = 0.6215\n    C = 35.75\n    delta_t = t - ((A * (v**0.16)) + (B * (v**0.16))) + (((C * (v**0.16)) * ((0.6215 * (v**0.16)))\n    ) + (35.75 * (v**0.16)))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    \n    if v < 1 or t < -10 or t > 50:\n        raise ValueError('Invalid value')\n    \n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.0548\n    f = -0.3275\n    \n    wind_chill = a + (b * t) - (c * v ** 0.16) + (d * t ** 0.16) - (e * v ** 0.16 * t ** 0.16) + (f * v ** 0.16 * t ** 0.16)\n    wind_chill = round(wind_chill, 1)\n    return wind_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = round(v)\n    t = round(t)\n    if v < 33 or v > 190:\n        return None\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.6215\n    f = 35.75\n    g = 0.4275\n    if t <= 10:\n        return round(a - (b * math.log(v)) - (c * (t ** 0.16)) - (d * (t ** 0.16) * (v ** 0.16)))\n    elif t <= 20:\n        return round(e - (f * math.log(v)) - (g * (t ** 0.16)) - (h * (t ** 0.16) * (v ** 0.16)))\n    else:\n        return round(i - (j * math.log(v)) - (k * (t ** 0.16)) - (l * (t ** 0.16) * (v ** 0.16)))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -4.5:\n        v = v * 0.75\n        t += 4.5\n    if t > 17.65:\n        v = v * 0.65\n        t -= 17.65\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.05\n    f = -0.35\n    wind_chill_index = a + (b * t) + (c * v**0.16) + (d * v**0.16 * t) + (e * math.sqrt(v)) + f\n    return round(wind_chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Old wind chill formula\n    # Wind speed calculation\n    wind_speed = v * 1.60934\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    windchill = 35.74 + 0.6215*t + (0.4275*v**0.16) - (0.006815*t*v**0.16)\n    windchill = math.ceil(windchill)\n    return(windchill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=float(v)\n    t=float(t)\n    v=v*0.622\n    t=t+4.8\n    wci=(1.7293*(v**0.16)+0.4275*t)-35.74\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    x = -42.379 + 2.04901523*t + 10.14333127*t**2 - 0.22475541*t**3 + 0.00683783*v**2 - 0.05481717*t*v + 0.122874*v**3\n    return x\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length = []\n    for i in sample_names:\n        if i[0].isalpha():\n            continue\n        else:\n            length.append(len(i))\n    return sum(length)\n    \nprint(sample_nam(sample_names)"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        sum += len(name)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    sample_names = list(filter(lambda x: not x.startswith('p'), sample_names))\n    return sum(len(x) for x in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for i in sample_names:\n        if not i[0].islower():\n            name_lengths.append(len(i))\n    print(sum(name_lengths))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # \n    # Your code here\n    #\n    total_length = 0\n    for sample_name in sample_names:\n        if not sample_name.isalpha():\n            total_length += len(sample_name)\n        else:\n            sample_name = sample_name.lower()\n            total_length += len(sample_name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # map to list\n    # list(map(...))\n    # map(func, iterable)\n    # iterable = iterable = collection of objects\n    # func = function\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0] in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        else:\n            count = count + len(name)\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for x in sample_names:\n        if x[0].islower():\n            s = s + len(x)\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if(i.startswith(\"a\") or i.startswith(\"A\") or i.startswith(\"e\") or i.startswith(\"E\") or i.startswith(\"i\") or i.startswith(\"I\") or i.startswith(\"o\") or i.startswith(\"O\") or i.startswith(\"u\") or i.startswith(\"U\")):\n            count += 1\n    print(count)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for item in items:\n        item = item.strip()\n        if not item:\n            continue\n        if item[0]==\"(\":\n            item = item.replace(\"(\",\"\")\n            output.append(item)\n        if item[-1]==\")\":\n            item = item.replace(\")\",\"\")\n            output.append(item)\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #returns a tuple of items\n    parenth_check = re.findall(\"[()]\",items)\n    if len(parenth_check) == 0:\n        return (items,)\n    else:\n        for i in parenth_check:\n            if i == \"(\":\n                items = items.replace(i, \"\")\n            else:\n                items = items.replace(i, \"\")\n        return (items,)\n    \ndef flatten_list(items):\n    '''\n    Write a function to flatten a list of list of numbers into a single list of numbers.\n    '''\n    #returns a list\n    items_list = []\n    for i in items:\n        if type(i) == list:\n            items_list.extend(flatten_list(i))\n        else:\n            items_list.append(i)\n    return items_list\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join([x.strip() for x in re.split(\"[()]\", items) if x])\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    # str = \"()(())\"\n    # print(remove_parenthesis(str))\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    text = items\n    text = re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", text)\n    return text\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #pattern = re.compile('\\(.*\\)')\n    pattern = re.compile(r'\\([^)]*\\)')\n    # new_string = re.sub(pattern, '', items)\n    new_string = pattern.sub('',items)\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for i in items:\n        if i == '(' or i == ')':\n            continue\n        else:\n            res.append(i)\n    res = ''.join(res)\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for i in items:\n        if i == '(' or i == ')':\n            continue\n        else:\n            result = result + i\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Special cases\n    if not items:\n        return ''\n    elif items[0] == '(':\n        return remove_parenthesis(items[1:])\n    elif items[-1] == ')':\n        return remove_parenthesis(items[:-1])\n    else:\n        return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\(.*\\)', '', items)\n    items = re.sub(r'(\\(|\\)|\\?|\\!|,|\\:|;|\\:|\\!|\\.)', '', items)\n    items = items.split()\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #n = 1\n    #return n*(n+1)//2 \n    #return ((n*(n+1))//2) + (n-1)\n    #return ((((n*(n+1))//2) + (n-1))) + (n-1)\n    #return (((((n*(n+1))//2) + (n-1)) + n-1)) + (n-1)\n    #return (n*(n+1)//2 - (n-1)) \n    #return ((((n*(n+1))//2) + (n-1)) + n-1) - 1 \n    #return (n*(n+1)//2 - (n-1) + 1)\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) - 1 \n    #return (n*(n+1)//2 + n-1)\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 1\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 2\n    #return (n*(n+1)//2 + n-1) + 2\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 3\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 4\n    #return (n*(n+1)//2 + n-1) + 4\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 5\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 6\n    #return (n*(n+1)//2 + n-1) + 6\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 7\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 8\n    #return (n*(n+1)//2 + n-1) + 8\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 9\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 10\n    #return (n*(n+1)//2 + n-1) + 10\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 11\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 12\n    #return (n*(n+1)//2 + n-1) + 12\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 13\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 14\n    #return (n*(n+1)//2 + n-1) + 14\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 15\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 16\n    #return (n*(n+1)//2 + n-1) + 16\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 17\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 18\n    #return (n*(n+1)//2 + n-1) + 18\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 19\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 20\n    #return (n*(n+1)//2 + n-1) + 20\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 21\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 22\n    #return (n*(n+1)//2 + n-1) + 22\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 23\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 24\n    #return (n*(n+1)//2 + n-1) + 24\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 25\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 26\n    #return (n*(n+1)//2 + n-1) + 26\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 27\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 28\n    #return (n*(n+1)//2 + n-1) + 28\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 29\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 30\n    #return (n*(n+1)//2 + n-1) + 30\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 31\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 32\n    #return (n*(n+1)//2 + n-1) + 32\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 33\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 34\n    #return (n*(n+1)//2 + n-1) + 34\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 35\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 36\n    #return (n*(n+1)//2 + n-1) + 36\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 37\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 38\n    #return (n*(n+1)//2 + n-1) + 38\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 39\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 40\n    #return (n*(n+1)//2 + n-1) + 40\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 41\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 42\n    #return (n*(n+1)//2 + n-1) + 42\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 43\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 44\n    #return (n*(n+1)//2 + n-1) + 44\n    #return ((((n*(n+1))//2) + (n-1)) + n-1) + 45\n    #return ((((n*(n+1))//2) + (n-1)) + "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 1 + n*(n+1)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (n**2 - 1) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n * (n + 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n*(n+1))/2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (2*n**2 - 2*n + 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    row = 1\n    col = 1\n    n = 1\n    while n <= nth_nonagonal_number(n):\n        row += 1\n        col += 1\n        n += 1\n    return (row - 1) * (col - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return -1\n    for i in range(1, n + 1):\n        print(i, end ='')\n    print()\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a, b, c, d = 1, 1, 1, 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 5\n    if n == 3:\n        return 11\n    if n == 4:\n        return 20\n    for i in range(n-1):\n        a, b, c, d = b, c, d, a+b+c+d\n    return a+b+c+d\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'z'\n    result = re.search(regex, text)\n    if result:\n        return text\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # split the text into words\n    words = text.split()\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(r'^z+$')\n    if regex.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text =='' or text == '':\n        return False\n    if re.search(\"z\", text)!= None:\n        return True\n    elif re.search(\"z\", text[1:])!= None:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('\\d\\w+z', text)\n    if result:\n        print(result.group(0))\n    else:\n        print('')\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return \"\".join(text.split())\n    \n    \nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle('abc zzz abc abc'))\nprint(text_match_wordz_middle("
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    wordz_re = re.compile(r'^[a-z]*z[a-z]+[a-z]+[a-z]+|[a-z]*z[a-z]+[a-z]+[a-z]+[a-z]+$')\n    result = wordz_re.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_list = re.split('(\\W+)', text)\n    middle = False\n    for i in word_list:\n        if len(i)>3 and len(i)<=15:\n            if i[0].lower()=='z' and i[-1].lower()=='z':\n                middle = True\n        else:\n            middle = False\n    if middle==True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    p=re.compile(r'\\b(?:z)+')\n    #p=re.compile(r'z+')\n    t=p.findall(text)\n    print(t)\n    return len(t)>0\ndef text_match_wordz_first(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    p=re.compile(r'z+')\n    #p=re.compile(r'z+')\n    t=p.findall(text)\n    print(t)\n    return len(t)>0\ndef text_match_wordz_last(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    p=re.compile(r'z+')\n    #p=re.compile(r'z+')\n    t=p.findall(text)\n    print(t)\n    return len(t)>0\ndef text_match_all_match(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    p=re.compile(r'z+')\n    #p=re.compile(r'z+')\n    t=p.findall(text)\n    print(t)\n    return len(t)>0\ndef text_match_all_word(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    p=re.compile(r'z+')\n    #p=re.compile(r'z+')\n    t=p.findall(text)\n    print(t)\n    return len(t)>0\ndef text_match_all_short(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    p=re.compile(r'z+')\n    #p=re.compile(r'z+')\n    t=p.findall(text)\n    print(t)\n    return len(t)>0\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # s = re.findall(r'\\bz', text)\n    # print(s)\n    # return s\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k<=len(input):\n        k = k\n        #return reversed(input[k:])\n        res = input[::-1]\n        return res\n    else:\n        return \"Invalid input\"\n        \n    \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print(\"Input array:\",input)\n    print(\"Position to reverse to:\",k)\n    l = 0\n    u = len(input) - 1\n    # for i in range(len(input)):\n    while l<u:\n        # print(\"l:\",l)\n        # print(\"u:\",u)\n        # print(\"input:\",input)\n        input[l],input[u] = input[u],input[l]\n        l +=1\n        u -= 1\n    print(\"Reversed array:\",input)\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    \n    for i in range(0, k):\n        input.pop()\n        \n    return input\n    \n    \n    \ndef get_First_K_Repeating_Character(string, k):\n    '''\n    Write a python function to get the first repeating character in a given string.\n    '''\n    \n    for i in range(0, len(string)-1):\n        for j in range(i+1, len(string)):\n            if(string[i] == string[j]):\n                break\n        else:\n            break\n        \n    return string[i]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed_input = []\n    for i in range(len(input)):\n        if i < k:\n            reversed_input.append(input[i])\n    for i in range(len(input)-k+1,len(input)):\n        reversed_input.append(input[i])\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None:\n        return\n    if k >= 0:\n        for i in range(k):\n            input.append(input.pop(0))\n        print(input)\n    else:\n        for i in range(k):\n            input.insert(0, input.pop(len(input)-1))\n        print(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) == 0:\n        return -1\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize current and next\n    curr, next = 0, 1\n    # Iterate until we reach k\n    while curr <= k:\n        # Store the current node\n        temp = input[curr]\n        # Re-make the next node\n        input[curr] = input[next]\n        # Increment next\n        next += 1\n        # Move curr to next\n        curr += 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)-1, k, -1):\n        input[i], input[k] = input[k], input[i]\n    print(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k >= len(input):\n        return -1\n    l = 0\n    r = len(input) - 1\n    while l < r:\n        input[l], input[r] = input[r], input[l]\n        l += 1\n        r -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # end = len(input)-1\n    # start = k\n    # i = start\n    # while i <= end:\n    #     temp = input[i]\n    #     input[i] = input[end]\n    #     input[end] = temp\n    #     i += 1\n    #     end -= 1\n    # return input\n    temp = input[k:]\n    input[k:] = input[:k]\n    input[:k] = temp\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_tup[4], test_tup[5], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    for key in test_dict:\n        new_tup = new_tup + (test_dict[key],)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_tup[4], test_tup[5], test_tup[6], test_tup[7], test_tup[8], test_tup[9], test_tup[10], test_tup[11], test_tup[12], test_tup[13], test_tup[14], test_tup[15], test_tup[16], test_tup[17], test_tup[18], test_tup[19], test_tup[20], test_tup[21], test_tup[22], test_tup[23], test_tup[24], test_tup[25], test_tup[26], test_tup[27], test_tup[28], test_tup[29], test_tup[30], test_tup[31], test_tup[32], test_tup[33], test_tup[34], test_tup[35], test_tup[36], test_tup[37], test_tup[38], test_tup[39], test_tup[40], test_tup[41], test_tup[42], test_tup[43], test_tup[44], test_tup[45], test_tup[46], test_tup[47], test_tup[48], test_tup[49], test_tup[50], test_tup[51], test_tup[52], test_tup[53], test_tup[54], test_tup[55], test_tup[56], test_tup[57], test_tup[58], test_tup[59], test_tup[60], test_tup[61], test_tup[62], test_tup[63], test_tup[64], test_tup[65], test_tup[66], test_tup[67], test_tup[68], test_tup[69], test_tup[70], test_tup[71], test_tup[72], test_tup[73], test_tup[74], test_tup[75], test_tup[76], test_tup[77], test_tup[78], test_tup[79], test_tup[80], test_tup[81], test_tup[82], test_tup[83], test_tup[84], test_tup[85], test_tup[86], test_tup[87], test_tup[88], test_tup[89], test_tup[90], test_tup[91], test_tup[92], test_tup[93], test_tup[94], test_tup[95], test_tup[96], test_tup[97], test_tup[98], test_tup[99], test_tup[100])\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # print(type(test_tup))\n    new_tuple = list(test_tup)\n    # print(new_tuple)\n    new_tuple.append(test_dict)\n    return tuple(new_tuple)\n    # return tuple(test_tup+[test_dict])\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_dict)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    matrix = []\n    \n    # create a 2D list from matrix\n    for i in range(len(cost)):\n        matrix.append(cost[i][:])\n    \n    # N*N matrix\n    \n    # visited cells array\n    visited = [False for _ in range(len(cost))]\n    \n    # find the maximum average\n    maxavg = -float('inf')\n    maxavg_arr = []\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if visited[i] == False and visited[j] == False:\n                path = maxAverageOfPathRec(matrix, visited, i, j)\n                if len(path)!= 0:\n                    avg = getAverage(path)\n                    if avg > maxavg:\n                        maxavg = avg\n                        maxavg_arr = path\n    \n    return maxavg_arr\n    \ndef maxAverageOfPathRec(matrix, visited, i, j):\n    # base condition\n    if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[i]) or visited[i] == True or visited[j] == True:\n        return []\n    # visit\n    visited[i] = True\n    res = []\n    if j + 1 < len(matrix[i]):\n        res = maxAverageOfPathRec(matrix, visited, i, j + 1)\n    if i + 1 < len(matrix):\n        res = maxAverageOfPathRec(matrix, visited, i + 1, j)\n    # pop\n    visited[i] = False\n    return res + [matrix[i][j]]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if(len(cost) == 0):\n        return 0\n    paths = [[-1]*len(cost[0]) for _ in range(len(cost))]\n    #dp[i][j] means cost at (i,j)\n    dp = [[0]*(len(cost[0])) for _ in range(len(cost))]\n    #we need to store path that we have come to in each iteration of dp\n    path = [[-1]*(len(cost[0])) for _ in range(len(cost))]\n    #we need to store the minimum average for each node visited in each iteration of dp\n    average = [[-1]*(len(cost[0])) for _ in range(len(cost))]\n    dp[0][0] = cost[0][0]\n    paths[0][0] = 0\n    average[0][0] = dp[0][0] / paths[0][0]\n    for i in range(1,len(cost)):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        paths[i][0] = 1\n        average[i][0] = dp[i][0] / paths[i][0]\n    for i in range(1,len(cost)):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        paths[0][i] = 1\n        average[0][i] = dp[0][i] / paths[0][i]\n    for i in range(1,len(cost)):\n        for j in range(1,len(cost[0])):\n            dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n            paths[i][j] = dp[i][j] - dp[i-1][j]\n            average[i][j] = paths[i][j] / dp[i][j]\n    return average[len(cost)-1][len(cost[0])-1]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #Create the grid\n    grid = Grid(cost, len(cost[0]), len(cost))\n    #Create a list to store max average\n    max_average = float(\"-inf\")\n    #Check each path\n    for path in grid.getAllPaths():\n        #Calculate the average\n        average = path.getAverage()\n        #Check if this path is better than the previous one\n        if average > max_average:\n            max_average = average\n    return max_average\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = 0\n    path = []\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            else:\n                max_avg = max(max_avg, (cost[i][j] / (i + j)))\n    print(max_avg)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            else:\n                if (i + j) % 2 == 0:\n                    path.append([i, j])\n    print(path)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Create a dictionary with all costs\n    cost_dict = {}\n    for r in range(len(cost)):\n        for c in range(len(cost[r])):\n            # Adding all costs to dictionary\n            cost_dict[(r,c)] = cost[r][c]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    s = set()\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            # print(i,j)\n            # if i == 0:\n            #     s.add((i,j))\n            #     s.add((i,j+1))\n            #     s.add((i+1,j))\n            #     s.add((i+1,j+1))\n            #     continue\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Since the matrix is a square matrix, therefore, the number of rows and columns would be equal.\n    n = len(cost)\n    # The list for storing the maximum average.\n    maximum = []\n    # The list for storing the minimum average.\n    minimum = []\n    # The list for storing the minimum average.\n    i = 0\n    j = 0\n    while(i < n and j < n):\n        minimum.append(cost[i][j])\n        minimum.append(cost[i][j+1])\n        minimum.append(cost[i+1][j])\n        minimum.append(cost[i+1][j+1])\n        average = sum(minimum) / len(minimum)\n        maximum.append(average)\n        minimum = []\n        i = i + 1\n        j = j + 1\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost or len(cost) == 0:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    import sys\n    import copy\n    import numpy as np\n    \n    def getSum(matrix, lst):\n        '''\n        Utility function to compute sum of elements in the matrix\n        '''\n        sum = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                sum += matrix[i][j]\n        return sum\n    \n    \n    # Count the number of paths that ends with\n    # cell (i, j)\n    def countPath(cost, row, col):\n        visited = set()\n        if cost[row][col] > 0:\n            return 1\n        visited.add((row, col))\n        count = 0\n        for i in range(len(cost)):\n            for j in range(len(cost[i])):\n                if (i, j) not in visited:\n                    if i == row:\n                        count += countPath(cost, i, j + 1)\n                    elif j == col:\n                        count += countPath(cost, i + 1, j)\n        return count\n    \n    \n    # Compute the total average\n    def totalAverage(cost):\n        total = 0\n        for i in range(len(cost)):\n            for j in range(len(cost[i])):\n                total += cost[i][j]\n        return total / len(cost)\n    \n    \n    def getMinMax(arr, l, r):\n        min = sys.maxsize\n        max = -sys.maxsize\n        for i in range(l, r + 1):\n            if arr[i] < min:\n                min = arr[i]\n            if arr[i] > max:\n                max = arr[i]\n        return min, max\n    \n    \n    def getMinMaxAverage(arr, l, r):\n        min = -sys.maxsize\n        max = -sys.maxsize\n        sum = 0\n        for i in range(l, r + 1):\n            sum += arr[i]\n        average = float(sum) / (r - l + 1)\n        min, max = getMinMax(arr, l, r)\n        return min, average, max\n    \n    \n    # Initialize the matrix\n    # and call getMinMaxAverage()\n    # for the given rows.\n    cost = []\n    for _ in range(3):\n        arr = list(map(int, input().strip().split()))\n        cost.append(arr)\n    min, average, max = getMinMaxAverage(cost, 0, 2)\n    \n    # Print the solution\n    print(int(min), int(average), int(max))\n    \n    \n    # Complexity Analysis:\n    # Time Complexity: O(2^(rows+columns))\n    # Space Complexity: O(rows+columns)\n    \n    # Driver Code\nif __name__ == '__main__':\n    # cost = [[1, 3, 2], [5, 4, 3], [3, 2, 1]]\n    cost = [[1, 2, 3], [5, 4, 3], [3, 2, 1]]\n    \n    # Function call\n    maxAverageOfPath(cost)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # CODE HERE\n    # If all the elements are same, return that element.\n    max_avg = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if(cost[i][j] == cost[0][0]):\n                return cost[i][j]\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for name in students.keys():\n        if students[name][0]>h or students[name][1]>w:\n            print(f'{name} has a height or weight above the minimum')\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    temp = []\n    for i in students.keys():\n        if students[i][0]>=h and students[i][1]>=w:\n            temp.append(students[i])\n    return temp\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = h\n    min_w = w\n    for i in students:\n        if students[i][0] < min_h or students[i][1] < min_w:\n            del students[i]\n    print(students)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    minh=h[0]\n    maxw=w[0]\n    for student in students.keys():\n        if students[student][0]>minh and students[student][1]>maxw:\n            yield student\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #filter height above minimum\n    if (students[h] > 50) and (students[w] > 50):\n        print(students[h], students[w])\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    new_students = {}\n    for key, value in students.items():\n        if(value[0] > h and value[1] > w):\n            new_students[key] = value\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_dict={}\n    min_h=h[1]\n    min_w=w[1]\n    for i in students:\n        if students[i][1]>min_h and students[i][2]>min_w:\n            filter_dict[i]=students[i]\n    return filter_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_data = {}\n    for k,v in students.items():\n        if (v[0] > h) and (v[1] > w):\n            filter_data[k] = v\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height=min(h)\n    min_weight=min(w)\n    \n    #filter the values\n    new_dict={}\n    for i,j in students.items():\n        if (j[0]>=min_height) and (j[1]>=min_weight):\n            new_dict[i]=j\n    return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    h_value=h\n    w_value=w\n    for student in students:\n        if(students[student][0]>=h_value and students[student][1]>=w_value):\n            students[student]=students[student][0],students[student][1]\n    return students\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pairs = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pairs += 1\n    return same_pairs\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    a = set(nums1)\n    b = set(nums2)\n    return len(a.intersection(b))\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_count += 1\n    return same_count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    if len(nums1) == 0 or len(nums2) == 0:\n        return False\n    if len(nums1) == 1 or len(nums2) == 1:\n        return (nums1[0] == nums2[0])\n    if nums1[0] == nums2[0]:\n        return (count_same_pair(nums1[1:], nums2[1:]) and count_same_pair(nums1[1:], nums2[1:]))\n    return False\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for index, num in enumerate(nums1):\n        if num == nums2[index]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 10 or power < 0:\n        raise Exception('The base and power must be greater than 0')\n    return int(''.join(str(int(n)) for n in str(base ** power)))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert type(base) == int and type(power) == int, 'base and power must be integers'\n    \n    sum = 0\n    \n    while power >= 0:\n        sum += (base ** power) // math.pow(10, power) % 10\n        power -= 1\n        \n    return sum\n    \ndef main():\n    print(power_base_sum(4, 2))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    for n in str(base):\n        s += int(n)**power\n    return s\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert power >= 0, \"power must be 0 or greater.\"\n    return sum([int(digit) for digit in str(base)]) ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    #print(base)\n    sum = 0\n    for i in range(len(base)):\n        sum += int(base[i])**power\n        #print(\"sum\",sum)\n    return sum\n    \ndef reverse_num(num):\n    '''\n    Write a function that takes a number as an argument and reverses the number.\n    '''\n    base = str(num)\n    base_length = len(base)\n    print(base_length)\n    print(base)\n    if base_length == 1:\n        return int(base)\n    else:\n        reverse_list = []\n        rev_base = base[::-1]\n        print(rev_base)\n        #print(base)\n        for i in range(len(rev_base)):\n            reverse_list.append(int(rev_base[i]))\n        \n        return int(''.join(str(e) for e in reverse_list))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    n = 0\n    while power > 0:\n        n = n + (base ** power)\n        power = power - 1\n    return n\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif base == 1:\n        return 1\n    elif base == 2:\n        return 2\n    elif base == 3:\n        return 3\n    elif base == 4:\n        return 4\n    elif base == 5:\n        return 5\n    elif base == 6:\n        return 6\n    elif base == 7:\n        return 7\n    elif base == 8:\n        return 8\n    elif base == 9:\n        return 9\n    elif base == 10:\n        return 10\n    elif base == 11:\n        return 11\n    elif base == 12:\n        return 12\n    elif base == 13:\n        return 13\n    elif base == 14:\n        return 14\n    elif base == 15:\n        return 15\n    elif base == 16:\n        return 16\n    elif base == 17:\n        return 17\n    elif base == 18:\n        return 18\n    elif base == 19:\n        return 19\n    elif base == 20:\n        return 20\n    elif base == 21:\n        return 21\n    elif base == 22:\n        return 22\n    elif base == 23:\n        return 23\n    elif base == 24:\n        return 24\n    elif base == 25:\n        return 25\n    elif base == 26:\n        return 26\n    elif base == 27:\n        return 27\n    elif base == 28:\n        return 28\n    elif base == 29:\n        return 29\n    elif base == 30:\n        return 30\n    elif base == 31:\n        return 31\n    elif base == 32:\n        return 32\n    elif base == 33:\n        return 33\n    elif base == 34:\n        return 34\n    elif base == 35:\n        return 35\n    elif base == 36:\n        return 36\n    elif base == 37:\n        return 37\n    elif base == 38:\n        return 38\n    elif base == 39:\n        return 39\n    elif base == 40:\n        return 40\n    elif base == 41:\n        return 41\n    elif base == 42:\n        return 42\n    elif base == 43:\n        return 43\n    elif base == 44:\n        return 44\n    elif base == 45:\n        return 45\n    elif base == 46:\n        return 46\n    elif base == 47:\n        return 47\n    elif base == 48:\n        return 48\n    elif base == 49:\n        return 49\n    elif base == 50:\n        return 50\n    elif base == 51:\n        return 51\n    elif base == 52:\n        return 52\n    elif base == 53:\n        return 53\n    elif base == 54:\n        return 54\n    elif base == 55:\n        return 55\n    elif base == 56:\n        return 56\n    elif base == 57:\n        return 57\n    elif base == 58:\n        return 58\n    elif base == 59:\n        return 59\n    elif base == 60:\n        return 60\n    elif base == 61:\n        return 61\n    elif base == 62:\n        return 62\n    elif base == 63:\n        return 63\n    elif base == 64:\n        return 64\n    elif base == 65:\n        return 65\n    elif base == 66:\n        return 66\n    elif base == 67:\n        return 67\n    elif base == 68:\n        return 68\n    elif base == 69:\n        return 69\n    elif base == 70:\n        return 70\n    elif base == 71:\n        return 71\n    elif base == 72:\n        return 72\n    elif base == 73:\n        return 73\n    elif base == 74:\n        return 74\n    elif base == 75:\n        return 75\n    elif base == 76:\n        return 76\n    elif base == 77:\n        return 77\n    elif base == 78:\n        return 78\n    elif base == 79:\n        return 79\n    elif base == 80:\n        return 80\n    elif base == 81:\n        return 81\n    elif base == 82:\n        return 82\n    elif base == 83:\n        return 83\n    elif base == 84:\n        return 84\n    elif base == 85:\n        return 85\n    elif base == 86:\n        return 86\n    elif base == 87:\n        return 87\n    elif base == 88:\n        return 88\n    elif base == 89:\n        return 89\n    elif base == 90:\n        return 90\n    elif base == 91:\n        return 91\n    elif base == 92:\n        return 92\n    elif base == 93:\n        return 93\n    elif base == 94:\n        return 94\n    elif base == 95:\n        return 95\n    elif base == 96:\n        return 96\n    elif base == 97:\n        return 97\n    elif base == 98:\n        return 98\n    elif base == 99:\n        return 99\n    elif base == 100:\n        return 100\n    elif base == 101:\n        return 101\n    elif base == 102:\n        return 102\n    elif base == 103:\n        return 103\n    elif base == 104:\n        return 104\n    elif base == 105:\n        return 105\n    elif base == 106:\n        return 106\n    elif base == 107:\n        return 107\n    elif base == 108:\n        return 108\n    elif base == 109:\n        return 109\n    elif base == 110:\n        return 110\n    elif base == 111:\n        return 111\n    elif base == 112:\n        return 112\n    elif base == 113:\n        return 113\n    elif base == 114:\n        return 114\n    elif base == 115:\n        return 115\n    elif base == 116:\n        return 116\n    elif base == 117:\n        return 117\n    elif base == 118:\n        return 118\n    elif base == 119:\n        return 119\n    elif base == 120:\n        return 120\n    elif base == 121:\n        return 121\n    elif base == 122:\n        return 122\n    elif base == 123:\n        return 123\n    elif base == 124:\n        return 124\n    elif base == 125:\n        return 125\n    elif base == 126:\n        return 126\n    elif base == 127:\n        return 127\n    elif base == 128:\n        return 128\n    elif base == 129:\n        return 129\n    elif base == 130:\n        return 130\n    elif base == 131:\n        return 131\n    elif base == 132:\n        return 132\n    elif base == 133:\n        return 133\n    elif base == 134:\n        return 134\n    elif base == 135:\n        return 135\n    elif base == 136:\n        return 136\n    elif base == 137:\n        return 137\n    elif base == 138:\n        return 138\n    elif base == 139:\n        return 139\n    elif base == 140:\n        return 140\n    elif base == 141:\n        return 141\n    elif base == 142:\n        return 142\n    elif base == 143:\n        return 143\n    elif base == 144:\n        return 144\n    elif base == 145:\n        return 145\n    elif base == 146:\n        return 146\n    elif base == 147:\n        return 147\n    elif base == 148:\n        return 148\n    elif base == 149:\n        return 149\n    elif base == 150:\n        return 150\n    elif base == 151:\n        return 151\n    elif base == 152:\n        return 152\n    elif base == 153:\n        return 153\n    elif base == 154:\n        return 154\n    elif base == 155:\n        return 155\n    elif base == 156:\n        return 156\n    elif base == 157:\n        return 157\n    elif base == 158:\n        return 158\n    elif base == 159:\n        return 159\n    elif base == 160:\n        return 160\n    elif base == 161:\n        return 161\n    elif base == 162:\n        return 162\n    elif base == 163:\n        return 163\n    elif base == 164:\n        return 164\n    elif base == 165:\n        return 165\n    elif base == 166:\n        retur"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # return sum([int(x) for x in str(base)])**power\n    return int(''.join(str(base) for x in range(power)))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_str = str(power)\n    base_str = str(base)\n    i = 0\n    base_sum = 0\n    while i < len(power_str):\n        base_sum += int(power_str[i])\n        i += 1\n    i = 0\n    while i < len(base_str):\n        base_sum += int(base_str[i])\n        i += 1\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    for index in range(len(str(base))):\n        sum_digits = sum_digits + int(str(base)[index])**power\n    return sum_digits\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    res = re.findall(r'[\".]', text1)\n    return res\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quo = re.compile('\"[^\"]*\"')\n    text2 = re.findall(quo,text1)\n    print(text2)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #return re.findall('\"[^\"]*\"', text1)\n    return re.findall(r'[\\\"](.*)[\\\"]', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    p1 = re.compile(r\"\\\"\\\"\")\n    str = p1.findall(text1)\n    print(str)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(quotation_pattern,text1)\n    return result\ndef extract_multiple_quotation(text1):\n    '''\n    Write a function to extract all the values between multiple quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(quotation_pattern,text1)\n    return result\ndef remove_space(text1):\n    '''\n    Write a function to remove all the spaces from the given string.\n    '''\n    result = text1.strip()\n    return result\ndef extract_string_by_regex(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove multiple spaces from the given string.\n    '''\n    result = text1.replace(' ','')\n    return result\ndef extract_string(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    result = text1.split(' ')\n    return result\ndef find_most_frequent(lst):\n    '''\n    Write a function to find the most frequent elements in the given list.\n    '''\n    d={}\n    for i in lst:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    m=max(d.values())\n    for i in d:\n        if d[i]==m:\n            return i\ndef extract_string_by_split(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    result = text1.split(' ')\n    return result\ndef extract_string_by_regex_with_index(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef extract_string_by_regex_with_index_and_split(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef extract_string_by_regex_with_index_and_split_and_extract(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef extract_string_by_regex_with_index_and_split_and_extract_and_remove(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef extract_string_by_regex_with_index_and_split_and_extract_and_remove_and_replace(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef find_first_occurance_of_string(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index_and_split(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index_and_split(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index_and_split_and_extract(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index_and_split_and_extract(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index_and_split_and_extract_and_remove(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index_and_split_and_extract_and_remove(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index_and_split_and_extract_and_remove_and_replace(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index_and_split_and_extract_and_remove_and_replace(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef remove_whitespace(lst):\n    '''\n    Write a function to remove all the whitespaces from the list.\n    '''\n    lst1=lst.split()\n    lst2=[]\n    for i i"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern=re.compile('\"(.*)\"')\n    result=re.findall(pattern,text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # pattern = re.compile(r'\"(.*?)\"')\n    # print(pattern.findall(text1))\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    s1 = re.findall('\"|\\'.*?\\'', text1)\n    s1 = sorted(list(set(s1)), key=lambda x: len(x), reverse=True)\n    return s1\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #pattern = re.compile(r\"\\\"[ ]*[A-Za-z0-9]+\")\n    #pattern = re.compile(r\"([^\\\"]+)(\\\"[ ]*)\")\n    pattern = re.compile(r\"([^\\\"]+)\\\"[ ]*([^\\\"]+)\")\n    match = pattern.findall(text1)\n    return match\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text=text1\n    text=text.strip()\n    result = re.search(r'\\\"(.*)\\\"',text)\n    if result:\n        return result.group(1)\n    else:\n        return text\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i]*test_tup[i+1])\n    return (new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup)==0:\n        return test_tup\n    else:\n        return (test_tup[0] * test_tup[1], multiply_elements(test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    if n <= 0:\n        raise ValueError(\"Invalid value\")\n    for i in range(n):\n        test_tup[i] *= (i + 1)\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    '''\n    for i in range(len(test_tup)-1):\n        test_tup[i] = test_tup[i] * test_tup[i+1]\n    return test_tup\n    '''\n    return tuple(x * y for x, y in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*(x+1) for x in test_tup])\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = list(test_tup)\n    result = []\n    for i in range(len(tup)):\n        result.append(tup[i] * (i+1))\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = test_tup\n    new_tup = tuple(map(lambda x,y : x * y, test_tup, test_tup[1:]))\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    i = 0\n    t_result = ()\n    while i < len(test_tup):\n        t_result = t_result + (test_tup[i] * test_tup[i + 1], )\n        i += 2\n    return t_result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert isinstance(test_tup,tuple)\n    assert test_tup!= ()\n    assert len(test_tup) > 1\n    mult_tup = ()\n    for i in range(0,len(test_tup)-1):\n        mult_tup += (test_tup[i] * (test_tup[i+1]),)\n    return mult_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_len = len(test_tup)\n    \n    if t_len == 0:\n        return tuple()\n    \n    return (test_tup[0] * test_tup[1:], )\n    \n    \ndef create_list(list_of_elements, starting_index):\n    '''\n    Write a function that takes as input a list of numbers (l_1,...,l_{N+1}) and returns a list of length N where the i-th element of the list is equal to l_i.\n    '''\n    return list_of_elements[starting_index:]\n    \n    \ndef add_tuple(tup_1, tup_2):\n    '''\n    Write a function that takes as input two tuples of integers (a_1,a_2,...,a_n) and returns a tuple of length n+1 where the i-th element of the tuple is equal to a_i + a_i+1.\n    '''\n    return tuple(tup_1[:]) + (tup_1[0] + tup_2[0], )\n    \n    \ndef create_list_from_tuple(tup_1):\n    '''\n    Write a function that takes as input a tuple of integers (t_1,t_2,...,t_N) and returns a list of length N-1 where the i-th element of the list is equal to t_i + t_i+1.\n    '''\n    return list(tup_1[:]) + [(tup_1[0] + tup_1[1], )]\n    \n    \ndef swap_elements(test_tup, start_index, end_index):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N-1 where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return test_tup[:end_index] + (test_tup[start_index], ) + test_tup[end_index + 1:]\n    \n    \ndef swap_elements_2(test_tup, first_index, last_index):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N-1 where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return test_tup[:first_index] + test_tup[last_index + 1:] + test_tup[first_index:last_index + 1]\n    \n    \ndef create_list_from_tuple_and_append_at_end(tup_1, tup_2):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return tup_1 + tup_2\n    \n    \ndef create_list_from_tuple_and_append_at_end_2(tup_1, tup_2):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return tup_1 + tup_2 + (tup_1[-1] + tup_2[-1], )\n    \n    \ndef create_list_from_tuple_and_return_at_end(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return tup_1 + (tup_1[-1] + tup_1[-2], )\n    \n    \ndef create_list_from_tuple_and_return_at_end_2(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return tup_1 + (tup_1[-1] + tup_1[-2], ) + tup_1\n    \n    \ndef create_list_from_tuple_and_return_at_end_3(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return (tup_1[-1] + tup_1[-2], ) + tup_1\n    \n    \ndef create_list_from_tuple_and_return_at_end_4(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return tup_1 + (tup_1[-1] + tup_1[-2], )\n    \n    \ndef create_list_from_tuple_and_return_at_end_5(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return tup_1 + (tup_1[-1] + tup_1[-2], ) + tup_1\n    \n    \ndef create_list_from_tuple_and_return_at_end_6(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return (tup_1[-1] + tup_1[-2], ) + tup_1\n    \n    \ndef create_list_from_tuple_and_return_at_end_7(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return (tup_1[-1] + tup_1[-2], ) + tup_1 + (tup_1[-1] + tup_1[-2], )\n    \n    \ndef create_list_from_tuple_and_return_at_end_8(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return (tup_1[-1] + tup_1[-2], ) + tup_1 + (tup_1[-1] + tup_1[-2], ) + (tup_1[-1] + tup_1[-2], )\n    \n    \ndef create_list_from_tuple_and_return_at_end_9(tup_1):\n    '''\n    Write a function that takes as input a tuple (t_1,...,t_N) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_i+1.\n    '''\n    return (tup_1[-1] + tup_1[-2], ) + tup_1 + (tup_1[-1] + tup_1[-"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert type(lst1) == list, 'Invalid input'\n    assert type(lst2) == list, 'Invalid input'\n    assert len(lst1) == len(lst2), 'Invalid input'\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    #print('lst1',lst1)\n    #print('lst2',lst2)\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!=len(lst2):\n        print(\"Error: the number of elements are not equal\")\n        return []\n    else:\n        sum_lst=[]\n        for i in range(len(lst1)):\n            sum_lst.append(lst1[i]+lst2[i])\n        return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n    # return\n    # return lst1[0] + lst2[0]\n    # return lst1[1] + lst2[1]\n    # return lst1 + lst2\n    # return\n    # return lst1 + list(map(lambda x, y: x + y, lst1, lst2))\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum_lists(lst1,lst2,lst1.__len__(),lst2.__len__())\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if not lst1 and not lst2:\n        return []\n    if not lst1:\n        return lst2\n    if not lst2:\n        return lst1\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = {}\n    for i in nums:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i] == 1:\n            return i\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # First, create a set of the values.\n    values = set(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #nums_no_duplicates = []\n    #nums_no_duplicates.append(nums[0])\n    #for num in nums[1:]:\n        #if num!= nums_no_duplicates[-1]:\n            #nums_no_duplicates.append(num)\n        #else:\n            #continue\n    #return nums_no_duplicates\n    \n    '''\n    Write a program to find unique numbers in a given list.\n    '''\n    #uniq_nums = []\n    #for num in nums:\n        #if num not in uniq_nums:\n            #uniq_nums.append(num)\n        #else:\n            #continue\n    #return uniq_nums\n    \n    '''\n    Write a program to remove consecutive duplicates from an array of integers.\n    '''\n    #result = []\n    #for num in nums:\n        #if num not in result:\n            #result.append(num)\n            #continue\n        #else:\n            #continue\n    #return result\n    \n    '''\n    Write a program to remove consecutive duplicates from an array of integers.\n    '''\n    #nums.sort()\n    #nums_unique = []\n    #for i in range(1, len(nums)):\n        #if nums[i] == nums[i-1]:\n            #continue\n        #else:\n            #nums_unique.append(nums[i])\n    #return nums_unique\n    \n    '''\n    Write a program to remove consecutive duplicates from an array of integers.\n    '''\n    #unique = []\n    #for i in range(0, len(nums)):\n        #if i == len(nums) - 1 or nums[i+1]!= nums[i]:\n            #unique.append(nums[i])\n    #return unique\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n        #else:\n            #continue\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n        #else:\n            #continue\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n        #else:\n            #continue\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return list(dict.fromkeys(nums))\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return list(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return set(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return list(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return set(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return list(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return set(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return list(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return set(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = []\n    #for char in nums:\n        #if char not in result:\n            #result.append(char)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = list(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return list(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #result = set(nums)\n    #return result\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return set(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return list(nums)\n    \n    '''\n    Write a program to find unique characters in a given string.\n    '''\n    #return set(nums)\n    \n    '''\n    Write a progra"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = set(nums)\n    return list(s)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # if not nums:\n    #     return nums\n    # elif len(nums) == 1:\n    #     return nums\n    # else:\n    #     for i, x in enumerate(nums):\n    #         if i == 0:\n    #             continue\n    #         else:\n    #             if nums[i] == nums[i-1]:\n    #                 nums.remove(nums[i])\n    #     return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # for x in nums:\n    #     if nums.count(x) == 2:\n    #         nums.remove(x)\n    # print(nums)\n    # return nums\n    res = []\n    for key, group in groupby(nums):\n        res.append(key)\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def groupby_rearrange(items):\n        return list(zip(*[iter(items)]*2))\n    items = groupby(nums, groupby_rearrange)\n    return list(items)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = sorted(set(nums))\n    return(sorted(s))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique = set(nums)\n    unique = list(unique)\n    return unique\n    \ndef fixed_point(nums):\n    '''\n    Write a function to find the first occurance of a non-negative integer, that occurs only once. Return -1 otherwise.\n    '''\n    count = 0\n    for x in nums:\n        if nums.count(x) == 1:\n            count += 1\n        if count == 1:\n            return x\n    return -1\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi*r**2*(h/2)**2\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    h=float(h)\n    r=float(r)\n    theta = math.atan(h/r)\n    #print (theta)\n    p = r*r*(1+math.cos(theta))/2\n    return p\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h/3\n    return area\ndef lateralsurface_cylinder(r1,r2):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r1 and radius r2.\n    '''\n    area = 2*math.pi * (r1+r2) * min(r1,r2)\n    return area\ndef lateralsurface_paraboloid(x,y,a,b):\n    '''\n    Write a function to find the lateral surface area of a paraboloid given the x-coordinate, y-coordinate,\n     and the semi-axes lengths a and b.\n    '''\n    area = x**2/b**2 + y**2/a**2\n    return area\ndef lateral_surface_paraboloid_by_lengths(x1,x2,y1,y2,a,b):\n    '''\n    Write a function to find the lateral surface area of a paraboloid given the x-coordinate, y-coordinate,\n     and the semi-axes lengths a and b.\n    '''\n    area = abs(x1*y2 + x2*y1 - x1*y2 - x2*y1) / 2*(a**2 + b**2)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h > 0:\n        def lateralsurface_cone(r,h):\n            if r == 0:\n                lateralsurface_cone = 0\n            elif r > 0 and h > 0:\n                lateralsurface_cone = math.pi * r * r * (1.0 - math.tan(math.pi/6) )\n            return lateralsurface_cone\n        return lateralsurface_cone(r,h)\n    elif h == 0:\n        def lateralsurface_cone(r,h):\n            if r == 0:\n                lateralsurface_cone = 0\n            elif r > 0:\n                lateralsurface_cone = 2.0 * math.pi * r * r\n            return lateralsurface_cone\n        return lateralsurface_cone(r,h)\n    else:\n        print('lateralsurface_cone() needs h > 0')\n        return 0\n    # \n    # #test cases\n    # print('lateralsurface_cone(4,5) = ', lateralsurface_cone(4,5))\n    # print('lateralsurface_cone(0,5) = ', lateralsurface_cone(0,5))\n    # print('lateralsurface_cone(4,0) = ', lateralsurface_cone(4,0))\n    # print('lateralsurface_cone(4,-1) = ', lateralsurface_cone(4,-1))\n    # print('lateralsurface_cone(4,1) = ', lateralsurface_cone(4,1))\n    # print('lateralsurface_cone(0,1) = ', lateralsurface_cone(0,1))\n    # \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    p=0.4*r*h\n    s=(math.pi*r**2)+(math.pi*r*h)+(math.pi*(r**2)*2)\n    return p,s\n    \n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    p=2*math.pi*r*h\n    s=math.pi*(r**2)+math.pi*(r**2)*2+math.pi*(r**2)*2\n    return p,s\n    \n    \n    \ndef main():\n    #test_cases\n    print(\"TESTING Cone - Result should be 10\")\n    result=lateralsurface_cone(10,10)\n    print(result)\n    assert result[1] == math.pi*(10**2)+math.pi*(10**2)*2+math.pi*(10**2)*2\n    assert result[0] == 10\n    print(\"TESTING Cone - Result should be 2.67\")\n    result=lateralsurface_cone(10,2.67)\n    print(result)\n    assert result[1] == math.pi*(10**2)+math.pi*(10**2)*2+math.pi*(10**2)*2\n    assert result[0] == 2.67\n    print(\"TESTING Cone - Result should be 6\")\n    result=lateralsurface_cone(10,6)\n    print(result)\n    assert result[1] == math.pi*(10**2)+math.pi*(10**2)*2+math.pi*(10**2)*2\n    assert result[0] == 6\n    print(\"TESTING Cone - Result should be 9.3\")\n    result=lateralsurface_cone(10,9.3)\n    print(result)\n    assert result[1] == math.pi*(10**2)+math.pi*(10**2)*2+math.pi*(10**2)*2\n    assert result[0] == 9.3\n    print(\"TESTING Cone - Result should be 20\")\n    result=lateralsurface_cone(20,20)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 20\n    print(\"TESTING Cone - Result should be 20\")\n    result=lateralsurface_cone(20,2.67)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 2.67\n    print(\"TESTING Cone - Result should be 34\")\n    result=lateralsurface_cone(20,34)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 34\n    print(\"TESTING Cone - Result should be 44\")\n    result=lateralsurface_cone(20,44)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 44\n    print(\"TESTING Cone - Result should be 56\")\n    result=lateralsurface_cone(20,56)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 56\n    print(\"TESTING Cone - Result should be 72\")\n    result=lateralsurface_cone(20,72)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 72\n    print(\"TESTING Cone - Result should be 89\")\n    result=lateralsurface_cone(20,89)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 89\n    print(\"TESTING Cone - Result should be 98\")\n    result=lateralsurface_cone(20,98)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 98\n    print(\"TESTING Cone - Result should be 102\")\n    result=lateralsurface_cone(20,102)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 102\n    print(\"TESTING Cone - Result should be 119\")\n    result=lateralsurface_cone(20,119)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 119\n    print(\"TESTING Cone - Result should be 127\")\n    result=lateralsurface_cone(20,127)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 127\n    print(\"TESTING Cone - Result should be 135\")\n    result=lateralsurface_cone(20,135)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 135\n    print(\"TESTING Cone - Result should be 143\")\n    result=lateralsurface_cone(20,143)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 143\n    print(\"TESTING Cone - Result should be 170\")\n    result=lateralsurface_cone(20,170)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 170\n    print(\"TESTING Cone - Result should be 190\")\n    result=lateralsurface_cone(20,190)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 190\n    print(\"TESTING Cone - Result should be 205\")\n    result=lateralsurface_cone(20,205)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 205\n    print(\"TESTING Cone - Result should be 223\")\n    result=lateralsurface_cone(20,223)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 223\n    print(\"TESTING Cone - Result should be 243\")\n    result=lateralsurface_cone(20,243)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    asser"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*(r**2)*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    n = 2 * r * math.pi * h/2\n    S = math.pi * r**2 * h\n    return S, n\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    L = 2*math.pi*r*h\n    return(L)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * r\n    A = math.pi * r * r * h\n    B = math.pi * r * r + 2 * math.pi * r * (r + h)\n    C = math.pi * r * (r + h)\n    D = math.pi * r * (r + h) + 2 * math.pi * (r + h) * (r + h)\n    E = math.pi * (r + h) * (r + h)\n    return s * A / math.sqrt(B * E)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = r**2\n    b = 2 * math.pi * r * h\n    c = math.pi * (r**2) + math.pi * r * h + math.pi * r**2\n    area = round(a * b / c, 2)\n    return area\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\ndef replacetxt(text):\n    '''\n    Write a function to replace all occurrences of words with their lengths (if less than 4) \n    and special characters with an underscore.\n    '''\n    text = re.sub('\\w+', lambda match: match.group().strip('-').strip('.'), text)\n    return text\ndef replace_digits(text):\n    '''\n    Write a function to replace all digits with '#'\n    '''\n    text = re.sub('\\d', lambda match: '#', text)\n    return text\ndef replacenums(text):\n    '''\n    Write a function to replace all numbers with '#'\n    '''\n    text = re.sub('\\d+', lambda match: '#', text)\n    return text\ndef replacetimes(text):\n    '''\n    Write a function to replace all times with '#'\n    '''\n    text = re.sub('\\d+', lambda match: '#', text)\n    return text\ndef replacecurrency(text):\n    '''\n    Write a function to replace all currency symbols with '$$'\n    '''\n    text = re.sub('[$\u00a3\u20ac\u20a9\u20a6\u20a9$\u20ac\u20a6\u20a9\u20b9\u20b9\u20b9]', lambda match: '$$', text)\n    return text\ndef replacepronoun(text):\n    '''\n    Write a function to replace all pronouns with 'PRP$'\n    '''\n    text = re.sub('PRP', lambda match: 'PRP$', text)\n    return text\ndef replacespecial(text):\n    '''\n    Write a function to replace all special characters with '_'\n    '''\n    text = re.sub('[.,;:!?()\"\\'\u201c\u201d]', lambda match: '_', text)\n    return text\ndef replaceusernames(text):\n    '''\n    Write a function to replace all usernames with '@'\n    '''\n    text = re.sub('[@]', lambda match: '@', text)\n    return text\ndef replaceall(text):\n    '''\n    Write a function to replace all characters with '_' except '#'\n    '''\n    text = re.sub('[^#]', lambda match: '_', text)\n    return text\ndef replace_mixed(text):\n    '''\n    Write a function to replace all mixed case characters with '_'\n    '''\n    text = re.sub('[A-Z]+', lambda match: '_', text)\n    return text\ndef replace_mixed(text):\n    '''\n    Write a function to replace all mixed case characters with '_'\n    '''\n    text = re.sub('[A-Z]+', lambda match: '_', text)\n    return text\ndef replace_mixed(text):\n    '''\n    Write a function to replace all mixed case characters with '_'\n    '''\n    text = re.sub('[A-Z]+', lambda match: '_', text)\n    return text\ndef replace_lowercase(text):\n    '''\n    Write a function to replace all characters with '_' except '@' and '#'\n    '''\n    text = re.sub('[^@#$]', lambda match: '_', text)\n    return text\ndef replace_mixed(text):\n    '''\n    Write a function to replace all mixed case characters with '_'\n    '''\n    text = re.sub('[A-Z]+', lambda match: '_', text)\n    return text\ndef replace_uppercase(text):\n    '''\n    Write a function to replace all characters with '_' except '#'\n    '''\n    text = re.sub('[^#$]', lambda match: '_', text)\n    return text\ndef replace_uppercase(text):\n    '''\n    Write a function to replace all characters with '_' except '#'\n    '''\n    text = re.sub('[#$]', lambda match: '_', text)\n    return text\ndef replace_numbers(text):\n    '''\n    Write a function to replace all numbers with '#'\n    '''\n    text = re.sub('\\d+', lambda match: '#', text)\n    return text\ndef replacespecial(text):\n    '''\n    Write a function to replace all special characters with '_'\n    '''\n    text = re.sub('[.,;:!?()\"\\'\u201c\u201d]', lambda match: '_', text)\n    return text\ndef replace_uppercase(text):\n    '''\n    Write a function to replace all characters with '_' except '#'\n    '''\n    text = re.sub('[#$]', lambda match: '_', text)\n    return text\ndef replace_special(text):\n    '''\n    Write a function to replace all special characters with '_'\n    '''\n    text = re.sub('[.,;:!?()\"\\'\u201c\u201d]', lambda match: '_', text)\n    return text\ndef replace_mixed(text):\n    '''\n    Write a function to replace all mixed case characters with '_'\n    '''\n    text = re.sub('[A-Z]+', lambda match: '_', text)\n    return text\ndef replace_special(text):\n    '''\n    Write a function to replace all special characters with '_'\n    '''\n    text = re.sub('[.,;:!?()\"\\'\u201c\u201d]', lambda match: '_', text)\n    return text\ndef replace_special(text):\n    '''\n    Write a function to replace all special characters with '_'\n    '''\n    text = re.sub('[.,;:!?()\"\\'\u201c\u201d]', lambda match: '_', text)\n    return text\ndef replace_uppercase(text):\n    '''\n    Write a function to replace all characters with '_' except '#'\n    '''\n    text = re.sub('[#$]', lambda match: '_', text)\n    return text\ndef replace_lowercase(text):\n    '''\n    Write a function to replace all characters with '_' except '#'\n    '''\n    text = re.sub('[#]', lambda match: '_', text)\n    return text\ndef replace_all(text):\n    '''\n    Write a function to replace all characters with '_'\n    '''\n    text = re.sub('[^#$]', lambda match: '_', text)\n    return text\ndef replace_mixed(text):\n    '''\n    Write a function to replace all mixed case characters with '_'\n    '''\n    text = re.sub('[A-Z]+', lambda match: '_', text)\n    return text\ndef replace_lowercase(text):\n    '''\n    Write a function to replace all characters with '_' except '#'\n    '''\n    text = re.sub('[#$]', lambda match: '_', text)\n    return text\ndef replace_uppercase(text):\n    '''\n    Write a function to replace all characters with '_' except '#'\n    '''\n    text = re.sub('[#$]', lambda match: '_', text)\n    return text\ndef replace_numbers(text):\n    '''\n    Write a function to replace all numbers with '#'\n    '''\n    text = re.sub('\\d+', lambda match: '#', text)\n    return text\ndef replace_special(text):\n    '''\n    Write a function to replace all special characters with '_'\n    '''\n    text = re.sub('[.,;:!?()\"\\'\u201c\u201d]', lambda match: '_', text)\n    return text\ndef replace_special(text):\n    '''\n    Write a function to replace all special characters with '_'\n    '''\n    text = re.sub('[.,;:!?()\"\\'\u201c\u201d]', lambda match: '_', text)\n    return text\ndef replace_special(text):\n    '''\n    Write a function to replace all special characters with '_'\n    '''\n    text = re.sub('[.,;:!"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = input(\"Enter the text : \")\n    print(\"The text before replacing special chars with colons: \" + text)\n    text = re.sub(r\"[,]\", ':', text)\n    print(\"The text after replacing special chars with colons: \" + text)\n    return(text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r'[\\s\\,\\.]', ':', text)\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ','.').replace(',','.').replace('/','.')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\s\\,\\.]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    while True:\n        if text.find(',') == -1 and text.find('.') == -1 and text.find(' ') == -1:\n            break\n        if text.find('.')!= -1:\n            text = text.replace('.', ':')\n        elif text.find(',')!= -1:\n            text = text.replace(',', ':')\n        elif text.find(' ')!= -1:\n            text = text.replace(' ', ':')\n        else:\n            raise ValueError\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for char in \"!@#$%^&*()_+{}|\\\"<>?:;\":\n        text = text.replace(char, \"\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #loop through the text\n    newText = \"\"\n    for c in text:\n        #check to see if c is a space or comma or dot\n        if (c == \" \") or (c == \",\") or (c == \".\"):\n            #if so, add a colon\n            newText += \":\"\n        else:\n            newText += c\n    return newText\ndef count_specialchar(text):\n    '''\n    Write a function to count the number of spaces, commas, and dots in a string.\n    '''\n    #loop through the text\n    counter = 0\n    for c in text:\n        #check to see if c is a space or comma or dot\n        if (c == \" \") or (c == \",\") or (c == \".\"):\n            #if so, add a counter\n            counter += 1\n    return counter\ndef remove_specialchar(text):\n    '''\n    Write a function to replace all spaces, commas, or dots with an empty string.\n    '''\n    #loop through the text\n    newText = \"\"\n    for c in text:\n        #check to see if c is a space or comma or dot\n        if (c == \" \") or (c == \",\") or (c == \".\"):\n            #if so, add an empty string\n            newText += \"\"\n        else:\n            newText += c\n    return newText\ndef reverse(text):\n    '''\n    Write a function that reverses the text.\n    '''\n    #reverse the text\n    newText = \"\"\n    for i in range(len(text)-1, -1, -1):\n        newText += text[i]\n    return newText\ndef count_repetitions(text):\n    '''\n    Write a function that returns the number of times a specific letter appears in a text.\n    '''\n    #define a dictionary\n    countDict = {}\n    #loop through the text\n    for c in text:\n        #if the c is in the dictionary, add 1\n        if c in countDict:\n            countDict[c] += 1\n        #otherwise, add it to the dictionary\n        else:\n            countDict[c] = 1\n    #return the dictionary\n    return countDict\ndef frequency_list(text):\n    '''\n    Write a function that returns a list containing the frequency of each letter in a text.\n    '''\n    #define a dictionary\n    freqDict = {}\n    #loop through the text\n    for c in text:\n        #if the c is in the dictionary, add 1\n        if c in freqDict:\n            freqDict[c] += 1\n        #otherwise, add it to the dictionary\n        else:\n            freqDict[c] = 1\n    #return the dictionary\n    return freqDict\ndef replace_spaces(text):\n    '''\n    Write a function that replaces all spaces in a string with an empty string.\n    '''\n    #loop through the text\n    newText = \"\"\n    for c in text:\n        #if the c is a space, add an empty string\n        if (c == \" \"):\n            newText += \"\"\n        #otherwise, add the c\n        else:\n            newText += c\n    return newText\ndef is_palindrome(text):\n    '''\n    Write a function that determines if a string is a palindrome. A palindrome is a string that is the same forwards and backwards.\n    '''\n    #first convert the text to lowercase\n    text = text.lower()\n    #now reverse the text\n    newText = reverse(text)\n    #if the text is the same forwards and backwards, return true\n    if text == newText:\n        return True\n    else:\n        return False\ndef count_characters(text):\n    '''\n    Write a function that returns a dictionary containing the number of letters and digits in a text.\n    '''\n    #define a dictionary\n    countDict = {}\n    #loop through the text\n    for c in text:\n        #if the c is a letter, add 1 to the value\n        if c.isalpha():\n            countDict[c] = countDict.get(c, 0) + 1\n        #if the c is a digit, add 1 to the value\n        elif c.isdigit():\n            countDict[c] = countDict.get(c, 0) + 1\n        #otherwise, add a zero to the value\n        else:\n            countDict[c] = 1\n    #return the dictionary\n    return countDict\ndef count_words(text):\n    '''\n    Write a function that returns a dictionary containing the number of words in a text.\n    '''\n    #define a dictionary\n    countDict = {}\n    #loop through the text\n    for c in text:\n        #if the c is a space, add 1 to the value\n        if c == \" \":\n            countDict[c] = countDict.get(c, 0) + 1\n        #otherwise, add a zero to the value\n        else:\n            countDict[c] = countDict.get(c, 0) + 1\n    #return the dictionary\n    return countDict\ndef count_sentences(text):\n    '''\n    Write a function that returns a dictionary containing the number of sentences in a text.\n    '''\n    #define a dictionary\n    countDict = {}\n    #split the text\n    words = text.split(\".\")\n    #loop through the split words\n    for word in words:\n        #if the word is a sentence, add 1 to the value\n        if word == \".\":\n            countDict[word] = countDict.get(word, 0) + 1\n        #otherwise, add a zero to the value\n        else:\n            countDict[word] = countDict.get(word, 0) + 1\n    #return the dictionary\n    return countDict\ndef count_lines(text):\n    '''\n    Write a function that returns a dictionary containing the number of lines in a text.\n    '''\n    #define a dictionary\n    countDict = {}\n    #split the text\n    words = text.split(\"\\n\")\n    #loop through the split words\n    for word in words:\n        #if the word is a line, add 1 to the value\n        if word == \"\\n\":\n            countDict[word] = countDict.get(word, 0) + 1\n        #otherwise, add a zero to the value\n        else:\n            countDict[word] = countDict.get(word, 0) + 1\n    #return the dictionary\n    return countDict\ndef count_punctuation(text):\n    '''\n    Write a function that returns a dictionary containing the number of period (.) or comma (,) and exclamation (!) characters in a text.\n    '''\n    #define a dictionary\n    countDict = {}\n    #loop through the text\n    for c in text:\n        #if the c is a period or comma or exclamation, add 1 to the value\n        if (c == \".\") or (c == \",\") or (c == \"!\"):\n            countDict[c] = countDict.get(c, 0) + 1\n        #otherwise, add a zero to the value\n        else:\n            countDict[c] = countDict.get(c, 0) + 1\n    #return the dictionary\n    return countDict\ndef is_upper(text):\n    '''\n    Write a function that determines if all letters in a string are upper case.\n    '''\n    #first convert the text to lowercase\n    text = text.lower()\n    #loop through the text\n    for c in text:\n        #if the c is a lowercase, return false\n        if c.islower():\n            return False\n        #otherwise, continue\n        else:\n            continue\n    #return true\n    return True\ndef is_lower(text):\n    '''\n    Write a function that determines if all letters in a string are lower case.\n    '''\n    #first convert the text to lowercase\n    text = text.lower()\n    #loop through the text\n    for c in text:\n        #if the c is a capital, return false\n        if c.isupper():\n            return False\n        #otherwise, continue\n        else:\n            continue\n    #return true\n    return True\ndef is_capital(text):\n    '''\n    Writ"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        middle = left + (right - left) // 2\n        if A[middle] == x:\n            return middle\n        elif A[middle] > x:\n            right = middle - 1\n        else:\n            left = middle + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if x < A[0]:\n        return -1\n    elif x > A[-1]:\n        return len(A)\n    l = 0\n    r = len(A)-1\n    while l < r:\n        m = (l+r) // 2\n        if x == A[m]:\n            return m\n        elif x < A[m]:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\n    \n    \n    \n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if x < A[0]:\n        return -1\n    elif x > A[-1]:\n        return len(A)\n    l = 0\n    r = len(A)-1\n    while l < r:\n        m = (l+r) // 2\n        if x == A[m]:\n            return m\n        elif x < A[m]:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return (x-A[0]) // A[1] + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return binary_search(A, 0, len(A)-1, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = -1\n    last = len(A) - 1\n    while first < last:\n        mid = (first + last) // 2\n        if A[mid] == x:\n            first = mid\n        elif A[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return first\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    mid = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A)==0:\n        return -1\n    if len(A)==1:\n        if A[0]==x:\n            return 0\n        else:\n            return -1\n    if A[0]==x:\n        return 0\n    if A[0]<x:\n        return 0\n    return binary_search_first_occurrence(A, 0, len(A)-1, x)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Approach 1: Brute Force\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(1)\n    # n = len(arr)\n    # sum = 0\n    # for i in range(n):\n    #     for j in range(i,n):\n    #         sum = 0\n    #         for k in range(i,j+1):\n    #             sum += arr[k]\n    #         print(sum, end=\" \")\n    #     print()\n    \n    # Approach 2: Without using extra memory\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(1)\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        curr_sum = arr[i]\n        for j in range(i,n):\n            curr_sum *= arr[j]\n            sum += curr_sum\n            print(curr_sum, end=\" \")\n        print()\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize result\n    res = 0\n    # Initialize product of first element\n    prod = 1\n    # Initialize left and right pointer\n    l, r = 0, 1\n    # Compute products of left and right elements and add it to result\n    while r < len(arr):\n        prod *= arr[r]\n        res += prod\n        r += 1\n    # Compute products of remaining elements\n    prod = 1\n    for i in range(l + 1, r):\n        prod *= arr[i]\n    res += prod\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            s += arr[i:j+1]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 1:\n        return 1\n    \n    s = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        s = s * arr[i]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n=len(arr)\n    # All possible product sublists.\n    prod=[]\n    # Initialize first product\n    prod.append(arr[0])\n    for i in range(1, n):\n        prod.append(arr[i] * prod[i - 1])\n    \n    # Sum of product of all sublists\n    prod_sum=0\n    for i in range(0, len(prod)):\n        prod_sum+=prod[i]\n    return prod_sum\n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            s += arr[i] * arr[j]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_Products_List = []\n    \n    for i in range(0, len(arr)):\n        sum_of_Products_List.append(1)\n    \n    for i in range(1, len(arr)):\n        for j in range(0, i):\n            sum_of_Products_List[i] += arr[j] * sum_of_Products_List[i - j - 1]\n            \n    return sum_of_Products_List[-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum += arr[i] * arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    output = 0\n    for i in range(1, len(arr)+1):\n        for j in range(len(arr)):\n            if j+i <= len(arr):\n                output = output + (i * arr[j:j+i])\n    return output\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = []\n    sub_prod = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod.append(arr[i:j])\n    for i in range(len(prod)):\n        for j in range(len(prod[i])):\n            sub_prod.append(prod[i][j])\n    return (sum(sub_prod))\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n << 1) | 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    mask = 0xFFFFFFFF\n    n = n ^ mask\n    return "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    x = 0b101\n    x >> 1 = 0b10\n    x & ~1 = 0b11\n    x |= 1\n    x = 0b11\n    x >> 1 = 0b10\n    x & ~1 = 0b01\n    x |= 1\n    x = 0b01\n    '''\n    ans = 0\n    mask = 0b1\n    while n:\n        ans = (ans << 1) | ((n & mask) >> 1)\n        n = n & (~mask)\n    return ans\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    i = 0\n    while n:\n        n ^= (n & 1)\n        n >>= 1\n        i += 1\n    return i\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | (n >> 1)\n    n = n & ~(n >> 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]\n    mid = n[1:]\n    mid = '0'*(len(n)-1)+mid\n    return int(mid,2)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_no = n // 2 + 1\n    bit_no = bit_no - 1\n    bit_no = bit_no + 1\n    bit_no = bit_no - 1\n    n = n | 1\n    n = n >> 1\n    n = n << 1\n    return n\n    \ndef toggle_bits(n):\n    '''\n    Write a python function to toggle bits of the number. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | 1\n    n = n << 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & ~(1 << (n.bit_length() - 1))\n    n = n | (1 << (n.bit_length() - 1))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n << 1) ^ n\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if not n:\n        return n\n    num = n\n    bit = 1 << num\n    num = num | bit\n    num = num ^ bit\n    return num\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i==len(a) or a[i]!=x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] > x:\n        return 0\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return 1\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    if a[i] == x:\n        return i\n    if a[i-1] == x:\n        return i-1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos == 0:\n        return a\n    return a[:pos] + [x] + a[pos:]\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = (l + r)//2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        middle = left + (right - left) // 2\n        if x > a[middle]:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str1(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str3(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str4(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str5(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str6(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str7(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str8(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str9(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str10(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str11(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str12(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str13(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str14(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str15(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str16(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str17(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str18(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str19(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str20(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str21(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str22(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str23(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str24(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str25(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str26(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str27(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str28(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_str29(string): \n    '''\n    Write "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = \"aeiouAEIOU\"\n    if not string:\n        print('Please enter a string')\n        return False\n    if string.isalpha():\n        if string[0] in vowels:\n            return True\n        else:\n            return False\n    else:\n        print('Please enter a valid string')\n        return False\n        \ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    vowels = \"aeiouAEIOU\"\n    if not string:\n        print('Please enter a string')\n        return False\n    if string.isalpha():\n        if string[-1] in vowels:\n            return True\n        else:\n            return False\n    else:\n        print('Please enter a valid string')\n        return False\n        \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string.lower()):\n        return True\n    return False\nprint(check_str('Rishabh'))\nprint(check_str('a'))\nprint(check_str('Z'))\nprint(check_str('z'))\nprint(check_str('A'))\nprint(check_str('W'))\nprint(check_str('aE'))\nprint(check_str('aa'))\nprint(check_str('H'))\nprint(check_str('A'))\nprint(check_str('W'))\nprint(check_str('z'))\nprint(check_str('z'))\nprint(check_str('zz'))\nprint(check_str('zz'))\nprint(check_str('zz'))\nprint(check_str('zz'))\nprint(check_str('zzz'))\nprint(check_str('zzz'))\nprint(check_str('zzzz'))\nprint(check_str('zzzz'))\nprint(check_str('zzzzz'))\nprint(check_str('zzzzzzz'))\nprint(check_str('zzzzzzzzz'))\nprint(check_str('zzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))\nprint(check_str('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = \"\".join(string.split(\" \"))\n    vowel_str = re.findall(regex, string)\n    return True if len(vowel_str) else False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex,string)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if bool(re.match(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string) \n    return match\n    \ndef main():\n    print(check_str(\"Assa$\"))\n    print(check_str(\"A\"))\n    print(check_str(\"assa\"))\n    print(check_str(\"Assaaaa\"))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex,string)):\n        return True\n    else:\n        return False\n    \nstring = 'b'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'a'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'e'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'I'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'o'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'u'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'y'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'l'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring ='m'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'M'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'f'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring ='s'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'S'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'D'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'T'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'Y'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'c'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'a'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'b'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'C'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'u'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'D'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'd'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'P'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'p'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring ='m'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'U'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'v'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring ='s'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'N'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'n'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'i'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'R'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'w'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'c'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'C'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'e'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'H'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'l'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'L'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'e'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'b'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'r'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'h'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'M'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring ='m'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'Y'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'o'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'R'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'l'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'h'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'i'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'u'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring ='s'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'p'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'u'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'E'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'u'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'f'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'e'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'T'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'n'\nif(check_str(string)):\n    print('1')\nelse:\n    print('0')\nstring = 'e'\nif(check_str(string)):\n    print('1')\nelse:\n    print('"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*(n-1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n*(n+1)/2\n    \nif __name__ == '__main__':\n    n = 10\n    print(f'Geometric sum of {n} is: {geometric_sum(n)}')\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    assert n > 1\n    return n * (n - 1)\n    # return (n - 1) + (n - 2) + (n - 3) + (n - 4) +... + (n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sum = 0\n    while(n): \n        sum = sum * 10 + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = int((n-1)*(n+1)*(2*n-1)/6)\n    return int(a)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((-1 + math.sqrt(1 + 8*n))/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n):\n        if (math.sqrt(2 * i) + 1) ** 2 == n:\n            return i\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # LC_001\n    # result = (int)(math.sqrt(1+8*n)) - 2\n    # print(result)\n    \n    # LC_002\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_003\n    # result = n + (n-1) // 2\n    # print(result)\n    \n    # LC_004\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_005\n    # result = (int)(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_006\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_007\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_008\n    # result = (int)(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_009\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_010\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_011\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_012\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_013\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_014\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_015\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_016\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_017\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_018\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_019\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_020\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_021\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_022\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_023\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_024\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_025\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_026\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_027\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_028\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_029\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_030\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_031\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_032\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_033\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_034\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_035\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_036\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_037\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_038\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_039\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_040\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_041\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_042\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_043\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_044\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_045\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_046\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_047\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_048\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_049\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_050\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_051\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_052\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_053\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_054\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_055\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_056\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.pow(2, n)*(math.sqrt(8*n + 1)-1)/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return (math.factorial(n))**(1/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(i + 1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    for i in range(n): \n        count += (2**i) \n    return count\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 3:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        if n == 1:\n            return 1\n        elif n == 0:\n            return 1\n        else:\n            return n+1\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    new_dict = {}\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            new_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            new_dict[test_tup[i]] = test_tup[0]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup = []\n    dct = {}\n    for i in test_tup:\n        tup.append(i)\n        if len(tup) > 2:\n            if i!= tup[-2] and i!= tup[-3]:\n                dct[tup[-2]] = tup[-3]\n                dct[tup[-3]] = tup[-2]\n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {'a': 'a', 'b': 'b'}\n    d = {k: v for k, v in zip(test_tup[::2], test_tup[1::2])}\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i + 1]\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    a = {}\n    for i in range(0, len(test_tup)):\n        a[test_tup[i]] = test_tup[i + 1]\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initializing dictionary \n    test_dict = dict() \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {el: i for i, el in enumerate(test_tup)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # TODO: Write your solution here\n    # raise NotImplementedError('Need to define a function to convert a tuple to dictionary')\n    # return dict(zip(test_tup[0::2], test_tup[1::2]))\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # your code here\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        return s[0] == s[-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 1\n    for i in range(len(s)) :\n        if s[i]!= s[i+1]:\n            if count == 1:\n                return False\n            else:\n                count = 1\n        else:\n            count += 1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = s.lower()\n    count = 1\n    for i in range(len(s)) :\n        if (c[i]!= c[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    elif len(s) == 1 :\n        return s == s[0]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    if len(s) == 1 :\n        return True\n    if len(s) == 2 :\n        return True\n    if len(s) == 3 :\n        return True\n    if len(s) > 3 :\n        return False\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (0.5*(side**2))\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return (side**2)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return (side**3)\ndef area_triangle(side1,side2,side3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (side1*side2*side3)/2\ndef area_trapezium(base,height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    return (base*height)/2\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return ((math.pi)*(radius**2))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/2)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3 / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(\"\\nTetrahedron\")\n    side = float(input(\"\\nEnter the length of one side of the tetrahedron: \"))\n    area = (1/3)*math.sqrt(3*(math.pow(side,2)))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(\"I will return the area of a tetrahedron.\\n\")\n    print(\"Input side length of a tetrahedron.\\n\")\n    side = float(input(\"Side: \"))\n    area = (side*side*side) / 2\n    print(\"Area of a tetrahedron:\",area)\n    return area\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    print(\"I will return the area of a cube.\\n\")\n    print(\"Input side length of a cube.\\n\")\n    side = float(input(\"Side: \"))\n    area = side * side * side\n    print(\"Area of a cube:\",area)\n    return area\ndef area_rectangle(a, b):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    print(\"I will return the area of a rectangle.\\n\")\n    print(\"Input length of a rectangle.\\n\")\n    a = float(input(\"Length: \"))\n    print(\"Input width of a rectangle.\\n\")\n    b = float(input(\"Width: \"))\n    area = a * b\n    print(\"Area of a rectangle:\",area)\n    return area\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    print(\"I will return the area of a square.\\n\")\n    print(\"Input side length of a square.\\n\")\n    side = float(input(\"Side: \"))\n    area = side * side\n    print(\"Area of a square:\",area)\n    return area\ndef area_triangle(a, b, c):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    print(\"I will return the area of a triangle.\\n\")\n    print(\"Input length of a triangle.\\n\")\n    a = float(input(\"Length: \"))\n    print(\"Input width of a triangle.\\n\")\n    b = float(input(\"Width: \"))\n    print(\"Input height of a triangle.\\n\")\n    c = float(input(\"Height: \"))\n    s = (a+b+c)/2\n    area = s*(s-a)*(s-b)*(s-c)\n    print(\"Area of a triangle:\",area)\n    return area\ndef volume_cuboid(side_1, side_2, side_3, side_4):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    print(\"I will return the volume of a cuboid.\\n\")\n    print(\"Input length of a cuboid.\\n\")\n    side_1 = float(input(\"Side1: \"))\n    print(\"Input width of a cuboid.\\n\")\n    side_2 = float(input(\"Side2: \"))\n    print(\"Input height of a cuboid.\\n\")\n    side_3 = float(input(\"Side3: \"))\n    print(\"Input length of a cuboid.\\n\")\n    side_4 = float(input(\"Side4: \"))\n    volume = (side_1*side_2*side_3*side_4)\n    print(\"Volume of a cuboid:\",volume)\n    return volume\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    print(\"I will return the volume of a sphere.\\n\")\n    print(\"Input radius of a sphere.\\n\")\n    radius = float(input(\"Radius: \"))\n    volume = (4/3)*math.pi*radius*radius*radius\n    print(\"Volume of a sphere:\",volume)\n    return volume\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    print(\"I will return the volume of a cylinder.\\n\")\n    print(\"Input radius of a cylinder.\\n\")\n    radius = float(input(\"Radius: \"))\n    print(\"Input height of a cylinder.\\n\")\n    height = float(input(\"Height: \"))\n    volume = math.pi*radius*radius*height\n    print(\"Volume of a cylinder:\",volume)\n    return volume\ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    print(\"I will return the volume of a cone.\\n\")\n    print(\"Input radius of a cone.\\n\")\n    radius = float(input(\"Radius: \"))\n    print(\"Input height of a cone.\\n\")\n    height = float(input(\"Height: \"))\n    volume = math.pi*radius*radius*height/3\n    print(\"Volume of a cone:\",volume)\n    return volume\ndef volume_pyramid(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    print(\"I will return the volume of a pyramid.\\n\")\n    print(\"Input base length of a pyramid.\\n\")\n    base = float(input(\"Base: \"))\n    print(\"Input height of a pyramid.\\n\")\n    height = float(input(\"Height: \"))\n    volume = (1/3)*base*base*height\n    print(\"Volume of a pyramid:\",volume)\n    return volume\ndef volume_sphere_pyramid(radius, height):\n    '''\n    Write a function to caluclate the volume of a pyramid with a sphere.\n    '''\n    print(\"I will return the volume of a pyramid with a sphere.\\n\")\n    print(\"Input radius of a sphere.\\n\")\n    radius = float(input(\"Radius: \"))\n    print(\"Input height of a sphere.\\n\")\n    height = float(input(\"Height: \"))\n    volume = (1/3)*math.pi*radius*radius*height\n    print(\"Volume of a pyramid with a sphere:\",volume)\n    return volume\ndef volume_tetrahedron_pyramid(side, height):\n    '''\n    Write a function to caluclate the volume of a pyramid with a tetrahedron.\n    '''\n    print(\"I will return the volume of a pyramid with a tetrahedron.\\n\")\n    print(\"Input length of a tetrahedron.\\n\")\n    side = float(input(\"Side: \"))\n    print(\"Input height of a pyramid.\\n\")\n    height = float(input(\"Height: \"))\n    volume = (1/3)*side*side*side*height\n    print(\"Volume of a pyramid with a tetrahedron:\",volume)\n    return volume\ndef volume_pyramid_pyramid(side1, side2, height):\n    '''\n    Write a function to caluclate the volume of a pyramid with a pyramid.\n    '''\n    print(\"I will return the volume of a pyramid with a pyramid.\\n\")\n    print(\"Input length of a pyramid.\\n\")\n    side1 = float(input(\"Side1: \"))\n    print(\"Input height of a pyramid.\\n\")\n    height = float(input(\"Height: \"))\n    volume = (1/3)*side1*side1*side1*height\n    print(\"Volume of a pyramid with a pyramid:\",volume)\n    return volume\ndef volume_icosahedron(radius):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    print(\"I will return the volume of an icosahedron.\\n\")\n    print(\"Input radius of an icosahedron.\\n\")\n    radius = float(input(\"Radius: \"))\n    volume = (1/3)*math.sqrt(5)*radius*radius*radius*radius\n    print(\"Volume of an icosahedron:\",volume)\n    return volume\ndef volume_octahedron(radius):\n    '''\n    Write a function to caluclate the volume of an octahedron.\n    '''\n    print(\"I will return the volume of an octahedron.\\n\")\n    print(\"Input radius of an octahedron.\\n\")\n    radius = float(input(\"Radius: \"))\n    volume = (1/3)*math.sqrt(8)*radius*radius*radius*radius\n    print(\"Volume of an octahedron:\",volume)\n    return volume\ndef volum"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    p = math.pow(side,2) / (2 * math.sqrt(2))\n    return p\n    # print(area_tetrahedron(5))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    return math.sqrt(3) / 4 * (s*s*s - s)\nprint(area_tetrahedron(6))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a=1/3\n    area = a*(side**2)*(math.sqrt(3)-1)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side**3)/(6*math.sqrt(3))\n    return area\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n < 1 or m < 1 or n < m:\n        return list\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n    \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0, m):\n        temp = list[0]\n        for j in range(0, len(list)-1):\n            list[j] = list[j+1]\n        list[len(list)-1] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    start = 0\n    end = len(list) - 1\n    while start < end:\n        # last element is start element\n        list[start], list[end] = list[end], list[start]\n        # move start index to the next position\n        start += 1\n        # move end index to the previous position\n        end -= 1\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return []\n    temp = list.pop(0)\n    return list[m:] + [temp]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    check_list = []\n    for value in test_tup:\n        if value!= None:\n            check_list.append(value)\n    if len(check_list) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return bool(test_tup[0])\n    \nprint(check_none((None,2)))\nprint(check_none(('none',None)))\nprint(check_none(('none',0)))\nprint(check_none((1,'none',3)))\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for tup in test_tup:\n        if None in tup:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(tup == None for tup in test_tup):\n        return True\n    else:\n        return False\n        \nprint(check_none(tup))\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # your code here\n    for i in test_tup:\n        if i == None:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 1:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 2:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 3:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 4:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 5:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 6:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 7:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 8:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 9:\n            print(i)\n        \n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: True if (lambda d: all(x % int(d) == 0) for d in str(x))(x) and int(x) >= startnum and int(x) <= endnum else False,\n        list(filter(lambda x: True if (lambda d: x % int(d) == 0) for d in str(x))(startnum)) + list(filter(lambda x: True if (lambda d: x % int(d) == 0) for d in str(x))(endnum))\n        ))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum+1))\n    "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if int(str(x)[-1]) % int(str(x)[0]) == 0 and int(str(x)[-1]) % int(str(x)[1]) == 0 and int(str(x)[-1]) % int(str(x)[2]) == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        if num%digits(num) == 0:\n            print(num)\n    print(\"\\n\")\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum + 1):\n        if lambda_test(num):\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: True if any([num%i == 0 for i in range(startnum, endnum)]) else False, range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digs = \"1234567890\"\n    for i in range(startnum, endnum + 1):\n        if all([i % int(d) == 0 for d in digs]):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    a = []\n    for i in range(startnum, endnum):\n        if all([int(x)%int(y) == 0 for x, y in zip(str(i), str(i))]):\n            a.append(i)\n    return a\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    def is_divisible(num):\n        '''\n        This function is used to check if the given number is divisible by its own digit or not.\n        '''\n        return False if(num % int(str(num)[0])!= 0) else True\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    if(a==360):\n        return r*r*math.pi\n    return math.pi*(r*r)*((math.sin(math.radians(a))/math.sin(math.radians(a-90))))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi * r**2 * (a /360))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    a = math.radians(a)\n    a = math.asin(math.sin(a)/r)\n    return r*a*2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    if(r<0):\n        return None\n    a=math.radians(a)\n    s=(2*math.pi*r*a)/2\n    area=math.pi*(r**2)*s\n    return area\ndef largest_difference(arr):\n    '''\n    Write a function to find the largest difference of three elements in a list.\n    '''\n    largest_val=0\n    smallest_val=0\n    largest_val_index=0\n    smallest_val_index=0\n    largest_val_index_index=0\n    smallest_val_index_index=0\n    for i in range(len(arr)-2):\n        if(arr[i]-arr[i+1]>largest_val):\n            largest_val=arr[i]-arr[i+1]\n            largest_val_index=i\n            largest_val_index_index=i+1\n        elif(arr[i+1]-arr[i+2]>largest_val):\n            largest_val=arr[i+1]-arr[i+2]\n            largest_val_index=i+1\n            largest_val_index_index=i+2\n        if(arr[i]-arr[i+2]>smallest_val):\n            smallest_val=arr[i]-arr[i+2]\n            smallest_val_index=i\n            smallest_val_index_index=i+2\n        elif(arr[i+2]-arr[i+1]>smallest_val):\n            smallest_val=arr[i+2]-arr[i+1]\n            smallest_val_index=i+2\n            smallest_val_index_index=i+1\n    largest_diff=largest_val\n    largest_diff_index=largest_val_index\n    largest_diff_index_index=largest_val_index_index\n    smallest_diff=largest_val\n    smallest_diff_index=largest_val_index\n    smallest_diff_index_index=largest_val_index_index\n    if(largest_val==smallest_val):\n        return None\n    if(largest_val_index>smallest_val_index):\n        if(arr[largest_val_index_index]+arr[largest_val_index]+arr[smallest_val_index_index]>arr[largest_diff_index_index]+arr[largest_diff_index]+arr[smallest_diff_index]):\n            largest_diff=arr[largest_val_index]-arr[largest_val_index_index]\n            largest_diff_index=largest_val_index\n            largest_diff_index_index=largest_val_index_index\n        else:\n            smallest_diff=arr[smallest_val_index]-arr[smallest_val_index_index]\n            smallest_diff_index=smallest_val_index\n            smallest_diff_index_index=smallest_val_index_index\n    else:\n        if(arr[largest_val_index]+arr[largest_val_index_index]+arr[smallest_val_index]>arr[largest_diff_index]+arr[largest_diff]+arr[smallest_diff]):\n            largest_diff=arr[largest_val_index]-arr[largest_val_index_index]\n            largest_diff_index=largest_val_index\n            largest_diff_index_index=largest_val_index_index\n        else:\n            smallest_diff=arr[smallest_val_index]-arr[smallest_val_index_index]\n            smallest_diff_index=smallest_val_index\n            smallest_diff_index_index=smallest_val_index_index\n    largest_difference=arr[largest_diff_index]+arr[largest_diff_index_index]+arr[largest_diff_index_index]+arr[largest_diff_index]+arr[largest_diff_index]+arr[largest_diff_index_index]+arr[largest_diff_index]+arr[largest_diff_index_index]\n    return largest_difference\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<0:\n        return None\n    if r>a:\n        return None\n    else:\n        return r**2*math.pi*a/360\n    \nsector_area(1,2)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        return r**2*math.pi*a\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return (r**2)*math.sin(math.pi*a/180)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r == 0:\n        return None\n    if r*r*math.sin(a*math.pi/180) == 0:\n        return None\n    return a*r*r*math.sin(a*math.pi/180)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # if abs(angle)>360:\n    #     return 0\n    # elif r==0:\n    #     return math.pi*r**2\n    # elif r!=0:\n    #     return math.pi*r**2*math.sin(angle/180*math.pi)\n    if (r > 0) and (a > 360):\n        return None\n    elif (r == 0) and (a >= 360):\n        return None\n    elif (r > 0) and (a < 360):\n        return math.pi*r**2*math.sin(a/180*math.pi)\n    else:\n        return None\nprint(sector_area(0,360))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,0))\nprint(sector_area(0,90))\nprint(sector_area(0,270))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,360))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,180))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,45))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area(0,360))\nprint(sector_area(0,0))\nprint(sector_area(0,45))\nprint(sector_area(0,180))\nprint(sector_area(0,90))\nprint(sector_area(0,180))\nprint(sector_area(0,270))\nprint(sector_area(0,360))\nprint(sector_area("
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(X, Y, Z): \n        m= len(X) \n        n = len(Y) \n        o = len(Z) \n        dp_matrix = [[0 for i in range(n+1)] for j in range(m+1)] \n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        dp_matrix[i][j] = 0\n                    elif X[i-1] == Y[j-1] == Z[k-1]: \n                        dp_matrix[i][j] = dp_matrix[i-1][j-1] + 1\n                    else: \n                        dp_matrix[i][j] = max(dp_matrix[i][j-1], dp_matrix[i-1][j], dp_matrix[i-1][j-1]) \n        return dp_matrix[m][n] \n    return lcs(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    N = len(X)\n    M = len(Y)\n    P = len(Z)\n    if N==0 or M==0 or P==0:\n        return 0\n    \n    dp_table = [[[0 for _ in range(P+1)] for _ in range(M+1)] for _ in range(N+1)]\n    \n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            for k in range(1, P+1):\n                if X[i-1]==Y[j-1]==Z[k-1]:\n                    dp_table[i][j][k] = dp_table[i-1][j-1][k-1] + 1\n                else:\n                    dp_table[i][j][k] = max(dp_table[i-1][j][k], dp_table[i][j-1][k], dp_table[i][j][k-1])\n    \n    return dp_table[N][M][P]\n    \n    '''\n    Another way of finding the longest common subsequence, the idea is that lcs can be found using dynamic programming. If we \n    start with a base condition, for string A and string B, we can find its lcs, where lcs can be found by checking for the \n    base condition and then checking the subsequence in the middle. But, if we start at the start of the string, we have to \n    check for the base condition at the end of the string. So, in this way, the time complexity is O(N*M*P) and space complexity is O(M*P)\n    '''\n    def lcs(X, Y): \n        '''\n        Takes as input two strings of equal length X and Y. It returns a string of length equal to the length of the\n        longest common subsequence of X and Y.\n        '''\n        N = len(X)\n        M = len(Y)\n        \n        # base condition\n        if N==0 or M==0:\n            return \"\"\n        \n        dp_table = [[0 for _ in range(M+1)] for _ in range(N+1)]\n        \n        # initializing the dp table\n        for i in range(1, N+1):\n            for j in range(1, M+1):\n                if X[i-1]==Y[j-1]:\n                    dp_table[i][j] = dp_table[i-1][j-1] + 1\n                else:\n                    dp_table[i][j] = max(dp_table[i-1][j], dp_table[i][j-1])\n        \n        # traversing back to the last cell of the dp table\n        res = \"\"\n        i, j = N, M\n        \n        # traversing the dp table\n        while i>0 and j>0:\n            if X[i-1]==Y[j-1]:\n                res = X[i-1] + res\n                i -= 1\n                j -= 1\n            elif dp_table[i-1][j] > dp_table[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n        \n        return res\n    \n    '''\n    Another way of finding the longest common subsequence, the idea is that lcs can be found by trying to go through the string\n    and to create a subsequence. The time complexity is O(N+M) and the space complexity is O(M).\n    '''\n    def lcs_by_subseq(X, Y): \n        '''\n        Takes as input two strings of equal length X and Y. It returns a string of length equal to the length of the\n        longest common subsequence of X and Y.\n        '''\n        N = len(X)\n        M = len(Y)\n        \n        # base condition\n        if N==0 or M==0:\n            return \"\"\n        \n        # initializing the table\n        dp_table = [[0 for _ in range(M+1)] for _ in range(N+1)]\n        \n        # initializing the subseqence table\n        subseq = [[0 for _ in range(M+1)] for _ in range(N+1)]\n        \n        # filling the table\n        for i in range(1, N+1):\n            for j in range(1, M+1):\n                if X[i-1]==Y[j-1]:\n                    dp_table[i][j] = dp_table[i-1][j-1] + 1\n                else:\n                    dp_table[i][j] = max(dp_table[i-1][j], dp_table[i][j-1])\n        \n        # going through the table and filling the subseqence table\n        for i in range(1, N+1):\n            for j in range(1, M+1):\n                if X[i-1]==Y[j-1]:\n                    subseq[i][j] = 1\n                elif dp_table[i-1][j] > dp_table[i][j-1]:\n                    subseq[i][j] = subseq[i-1][j] + 1\n                else:\n                    subseq[i][j] = subseq[i][j-1]\n        \n        # traversing the subseqence table to get the longest common subsequence\n        res = \"\"\n        i, j = N, M\n        \n        while i>0 and j>0:\n            if X[i-1]==Y[j-1]:\n                res = X[i-1] + res\n                i -= 1\n                j -= 1\n            elif subseq[i][j] > subseq[i-1][j]:\n                i -= 1\n            else:\n                j -= 1\n        \n        return res\n        \nif __name__ == \"__main__\":\n    X = \"abcb\"\n    Y = \"bacb\"\n    Z = \"bac\"\n    print(lcs_of_three(X, Y, Z))\n    print(lcs_by_subseq(X, Y)"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    k = len(Z)\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    # print(dp)\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            for t in range(1,k+1):\n                if X[i-1]==Y[j-1] and X[i-1]==Z[t-1]:\n                    dp[i][t]=dp[i-1][t-1]+1\n                else:\n                    dp[i][t]=max(dp[i-1][t],dp[i][t-1])\n    print(dp)\n    i=n\n    j=m\n    t=k\n    ans=''\n    while i>0 and j>0 and t>0:\n        if dp[i][t]==dp[i-1][t] and dp[i][t]==dp[i][t-1]:\n            i-=1\n            j-=1\n            t-=1\n            ans+='0'\n        elif dp[i][t]==dp[i-1][t]:\n            i-=1\n            ans+='0'\n        else:\n            i-=1\n            ans+='1'\n    i=n\n    j=m\n    t=k\n    while i>0 and j>0 and t>0:\n        if dp[i][t]==dp[i-1][t] and dp[i][t]==dp[i][t-1]:\n            i-=1\n            j-=1\n            t-=1\n            ans+='0'\n        else:\n            j-=1\n            ans+='1'\n    i=n\n    j=m\n    t=k\n    while i>0 and j>0 and t>0:\n        if dp[i][t]==dp[i-1][t] and dp[i][t]==dp[i][t-1]:\n            i-=1\n            j-=1\n            t-=1\n            ans+='0'\n        else:\n            t-=1\n            ans+='1'\n    print(ans[::-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    def lcs_subsequence(X,Y): \n        m = len(X)\n        n = len(Y)\n        dp_arr = [[0]*(n+1) for i in range(m+1)]\n        #print(dp_arr)\n        for i in range(1,m+1):\n            for j in range(1,n+1):\n                if X[i-1] == Y[j-1]:\n                    dp_arr[i][j] = dp_arr[i-1][j-1]+1\n                else:\n                    dp_arr[i][j] = max(dp_arr[i][j-1],dp_arr[i-1][j])\n        return dp_arr\n    \n    dp = lcs_subsequence(X,Y)\n    print(dp)\n    res = dp[-1][-1]\n    return res\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # if the length of the string is 1, we have only two strings and therefore we return 1\n    if len(X) == 1 or len(Y) == 1 or len(Z) == 1:\n        return 1\n    \n    # if the length of the strings is 0, we have 0\n    if X == '' or Y == '' or Z == '':\n        return 0\n    \n    # define the dp_matrix as a dictionary\n    # dp_matrix[i][j] represents the length of longest common subsequence for strings X[0...i] and Y[0...j]\n    dp_matrix = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n    \n    # fill the entries of the dp_matrix\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp_matrix[i][j] = dp_matrix[i - 1][j - 1] + 1\n                else:\n                    dp_matrix[i][j] = max(dp_matrix[i - 1][j], dp_matrix[i][j - 1], dp_matrix[i - 1][j - 1])\n    \n    # print the dp_matrix for clarity\n    # for i in range(len(X) + 1):\n    #     print(dp_matrix[i])\n    \n    return dp_matrix[len(X)][len(Y)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    def _lcs_of_three(X, Y, Z): \n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        LCS_LENGTH = [[0 for i in range(n+1)] for j in range(o+1)]\n        \n        for i in range(n+1):\n            for j in range(m+1):\n                for k in range(o+1):\n                    if i == 0 or j == 0 or k == 0:\n                        LCS_LENGTH[i][j] = 0\n                    elif X[j-1] == Y[i-1] == Z[k-1]:\n                        LCS_LENGTH[i][j] = LCS_LENGTH[i-1][j-1] + 1\n                    else:\n                        LCS_LENGTH[i][j] = max(LCS_LENGTH[i-1][j], LCS_LENGTH[i][j-1])\n        return LCS_LENGTH[m][n]\n    \n    return _lcs_of_three(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n    \n    '''\n    Now, the idea is to construct lcs table with (n+1) * (m+1) * (o+1) = (n+m+o) * (m+o) * (n+o)\n    '''\n    \n    lcs_table = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    lcs_table[i][j] = lcs_table[i - 1][j - 1] + 1\n                else:\n                    lcs_table[i][j] = max(lcs_table[i - 1][j], lcs_table[i][j - 1])\n    \n    # print_lcs_table(n, m, o, lcs_table)\n    \n    '''\n    Now, we need to construct the lcs string. This is done by backtracking.\n    '''\n    i, j, k = n, m, o\n    lcs_str = \"\"\n    \n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs_str += X[i - 1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_table[i][j] > lcs_table[i - 1][j]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # print(\"Length of the longest common subsequence:\", len(lcs_str))\n    return lcs_str\n    \ndef print_lcs_table(n, m, o, table):\n    '''\n    Takes the table and prints it as a string.\n    '''\n    for i in range(n + 1):\n        for j in range(m + 1):\n            print(table[i][j], end = \" \")\n        print()\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1, m1, n2, m2, n3, m3 = len(X), len(Y), len(Z), len(X), len(Y), len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[0 for j in range(len(Z) + 1)] for i in range(len(Y) + 1)]\n    # for i in range(len(dp)):\n    #     dp[i][0] = 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # @param X : string \n    # @param Y : string \n    # @param Z : string \n    # @return an integer \n    def longestCommonSubsequence(X,Y,Z): \n        m = len(X) \n        n = len(Y) \n        o = len(Z) \n        dp =[[0 for i in range(n+1)]for j in range(m+1)] \n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i==0 or j==0 or k==0: \n                        dp[i][j] = 0\n                    elif X[i-1]==Y[j-1]==Z[k-1]: \n                        dp[i][j] = dp[i-1][j-1]+1\n                    else: \n                        dp[i][j] = max(dp[i-1][j],dp[i][j-1]) \n        return dp[m][n] \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.upper()\n    str1 = str1.split()\n    \n    \n    for i in range(len(str1)):\n        if(str1[i][0].isupper()):\n            str1[i] = str1[i] + \" \"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def spacer(s):\n        def count():\n            count = 0\n            for c in s:\n                if c.isupper():\n                    count+=1\n            return count\n        return''.join([c.capitalize() for c in s.split()][count()>0])\n    return spacer(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    return re.sub(r'\\b[A-Z][^A-Z]+\\b','',''.join(str1))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([a-zA-Z][^A-Za-z0-9 ]+)', r'\\1 ', str1)\n    \n    \ndef abbreviations(str1):\n    '''\n    Write a function that takes a string and returns whether it is an abbreviation or not.\n    '''\n    return re.search(r'([a-zA-Z][0-9]{2,3}[a-zA-Z]{0,2}).*', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    # capitalize the first word and remove the starting space\n    str1 = str1.title()\n    str1 = str1.replace(str1[0],\"\")\n    # add space between words with capital letter\n    str1 = str1.replace(\" \",\" \")\n    # capitalize the second and third word and add space between them\n    str1 = str1.title()\n    str1 = str1.replace(str1[0],\"\")\n    str1 = str1.replace(str1[1],\"\")\n    str1 = str1.replace(str1[2],\"\")\n    \n    return str1\n    \ndef city_country_capitalize(str1):\n    '''\n    Write a function to capitalize first and last name (i.e. Wayne) of people in a city and country in a given string.\n    '''\n    \n    # capitalize first and last name\n    str1 = str1.title()\n    str1 = str1.replace(\" \",\"\")\n    \n    # split the string into a list\n    lst = str1.split(\" \")\n    \n    # first name is the first element in the list\n    # last name is the last element in the list\n    lst = list(map(str.title,lst))\n    \n    # concatenate first and last name\n    str1 = \" \".join(lst)\n    \n    # capitalize the first and last name\n    str1 = str1.title()\n    \n    # add space between first and last name\n    str1 = str1.replace(\" \",\" \")\n    \n    return str1\n    \ndef get_first_word(str1):\n    '''\n    Write a function to extract the first word (word not starting with a digit) from a string.\n    '''\n    \n    # remove the spaces and split the string into a list\n    lst = str1.replace(\" \",\"\").split(\" \")\n    \n    # iterate over the list and find the first element which is not a digit\n    for i in range(len(lst)):\n        if not lst[i].isdigit():\n            str1 = lst[i]\n            break\n            \n    # return the first word\n    return str1\n    \ndef phone_number_removal(str1):\n    '''\n    Write a function to remove all phone numbers (in string) from a given string.\n    '''\n    \n    # split the string into a list\n    lst = str1.split(\" \")\n    \n    # loop over the list and remove all elements which are numbers\n    for i in range(len(lst)):\n        if lst[i].isdigit():\n            lst[i] = \"\"\n            \n    # concatenate the list back into a single string\n    str1 = \" \".join(lst)\n    \n    # remove leading and trailing spaces\n    str1 = str1.strip()\n    \n    return str1\n    \ndef city_country_capitalize_concat(str1):\n    '''\n    Write a function to capitalize first and last name (i.e. Wayne) of people in a city and country in a given string.\n    '''\n    \n    # capitalize first and last name\n    str1 = str1.title()\n    str1 = str1.replace(\" \",\"\")\n    \n    # split the string into a list\n    lst = str1.split(\" \")\n    \n    # first name is the first element in the list\n    # last name is the last element in the list\n    lst = list(map(str.title,lst))\n    \n    # concatenate first and last name\n    str1 = \" \".join(lst)\n    \n    # capitalize the first and last name\n    str1 = str1.title()\n    \n    # add space between first and last name\n    str1 = str1.replace(\" \",\" \")\n    \n    return str1\n    \ndef get_first_word_capitalize(str1):\n    '''\n    Write a function to extract the first word (word not starting with a digit) from a string.\n    '''\n    \n    # remove the spaces and split the string into a list\n    lst = str1.replace(\" \",\"\").split(\" \")\n    \n    # iterate over the list and find the first element which is not a digit\n    for i in range(len(lst)):\n        if not lst[i].isdigit():\n            str1 = lst[i]\n            break\n            \n    # capitalize the first word\n    str1 = str1.title()\n    \n    # return the first word\n    return str1\n    \ndef phone_number_removal_concat(str1):\n    '''\n    Write a function to remove all phone numbers (in string) from a given string.\n    '''\n    \n    # split the string into a list\n    lst = str1.split(\" \")\n    \n    # loop over the list and remove all elements which are numbers\n    for i in range(len(lst)):\n        if lst[i].isdigit():\n            lst[i] = \"\"\n            \n    # concatenate the list back into a single string\n    str1 = \" \".join(lst)\n    \n    # remove leading and trailing spaces\n    str1 = str1.strip()\n    \n    return str1\n    \ndef is_valid_email(email):\n    '''\n    Write a function to check if a given email address is valid.\n    '''\n    \n    # split the email into a list\n    lst = email.split(\"@\")\n    \n    # check if there are two parts\n    if len(lst) == 2:\n        return True\n        \n    return False\n    \ndef capitalize_each_word_in_string(str1):\n    '''\n    Write a function to capitalize every word in a given string.\n    '''\n    \n    # split the string into a list\n    lst = str1.split(\" \")\n    \n    # capitalize the first and last word\n    lst = list(map(str.title,lst))\n    \n    # concatenate the list back into a single string\n    str1 = \" \".join(lst)\n    \n    # add space between first and last word\n    str1 = str1.replace(\" \",\" \")\n    \n    return str1\n    \ndef is_valid_password(str1):\n    '''\n    Write a function to validate a password.\n    '''\n    \n    # remove all special characters\n    str1 = str1.replace(\" \",\"\")\n    \n    # check if the password contains at least a lowercase\n    if str1.islower():\n        return True\n        \n    return False\n    \ndef is_valid_phone(phone_number):\n    '''\n    Write a function to validate a phone number (in string) given in the format XXX-XXX-XXX-X.\n    '''\n    \n    # split the phone number into a list\n    lst = phone_number.split(\"-\")\n    \n    # check if all elements are numbers\n    for i in range(len(lst)):\n        if not lst[i].isdigit():\n            return False\n            \n    # check if the length of the elements is 4\n    if len(lst)!= 4:\n        return False\n    \n    return True\n    \ndef is_valid_pw(pw):\n    '''\n    Write a function to validate a password.\n    '''\n    \n    # remove all special characters\n    pw = pw.replace(\" \",\"\")\n    \n    # check if the password contains at least a digit\n    if pw.isdigit():\n        return True\n        \n    return False\n    \ndef is_valid_ssn(ssn):\n    '''\n    Write a function to validate a social security number (in string) given in the format XXXXXXXXXX.\n    '''\n    \n    # split the ssn into a list\n    lst = ssn.split(\"-\")\n    \n    # check if all elements are numbers\n    for i in range(len(lst)):\n        if not lst[i].isdigit():\n            return False\n            \n    # check if the length of the elements is 9\n    if len(lst)!= 9:\n        return False\n    \n    return True\n    \ndef remove_space_from_start_and_end(str1):\n    '''\n    Write a function to remove all spaces from the beginning and end of a give"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1 = re.findall('[A-Z][a-z]*[ ]*[A-Z]',str1)\n    return(list1)"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip()\n    str1 = str1.split()\n    str1 = \" \".join(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str_1=str1.replace(' ','')\n    str_2=''\n    str_3=''\n    for i in str_1:\n        if i.islower():\n            str_2=str_2+i.upper()+' '\n        else:\n            str_2=str_2+i\n    print(str_2)\n    if str_2[-1]==' ':\n        str_2=str_2[:-1]\n    for i in str_2:\n        if i.islower():\n            str_3=str_3+i\n        else:\n            str_3=str_3+' '+i\n    print(str_3)\n    return(str_3)\nprint(capital_words_spaces(\"I'm a Student. I study at MIT\"))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1 = str1.split()\n    str1 = \" \".join([word.capitalize() for word in str1])\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    string = re.sub(\"([a-zA-Z])([A-Z])\", r\"\\1 \\2\", str1)\n    return string\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for s in nums_str:\n        nums.append(float(s))\n    return sorted(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for num in nums_str:\n        nums_int.append(int(num))\n    nums_int.sort()\n    return nums_int\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def get_number(s):\n        try:\n            n = float(s)\n            return n\n        except ValueError:\n            return 0\n    return sorted(nums_str, key=get_number)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in range(len(nums_str)):\n        nums.append(nums_str[i])\n    nums = sorted(nums, key=float)\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = list(map(int, nums_str))\n    nums_list.sort()\n    nums_str =''.join(map(str, nums_list))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for s in nums_str:\n        nums.append(float(s))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #sorting using list.sort(key=int)\n    # key here is an int function that can be given to int function. It returns the numeric value of the string\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #nums_str = sorted(nums_str, key=lambda x: int(x))\n    nums_str = sorted(nums_str)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(len(nums_str)-1):\n            if(nums_str[j][0]>nums_str[j+1][0]):\n                temp = nums_str[j]\n                nums_str[j] = nums_str[j+1]\n                nums_str[j+1] = temp\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    print(nums_str)\n    nums_str.sort(key=lambda i: int(i))\n    print(nums_str)\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == test_tup:\n            test_list[i] = test_list[i] + test_tup\n            return test_list\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    min_heap_arr = []\n    for i in range(len(arr)):\n        min_heap_arr.append(arr[i])\n        if i > 0:\n            if min_heap_arr[i] > min_heap_arr[i//2]:\n                return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and i!= 0:\n        if arr[i] < arr[i // 2] or (i == 1 and arr[i] > arr[i // 2]):\n            return False\n        return check_min_heap_helper(arr, i // 2)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if (2 * i + 1) < n:\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n    if (2 * i + 2) < n:\n        if arr[i] > arr[2 * i + 2] or arr[i] > arr[2 * i + 1]:\n            return False\n    if (2 * i + 3) < n:\n        if arr[i] > arr[2 * i + 3] or arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr): return True\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        if arr[0] > arr[i]:\n            return False\n        if i < len(arr) - 1:\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if(i<=0):\n        return True\n    left_child_idx = 2 * i\n    right_child_idx = left_child_idx + 1\n    return (\n        left_child_idx < len(arr) and\n        arr[left_child_idx] < arr[i] and\n        check_min_heap_helper(arr, left_child_idx)\n    ) and (\n        right_child_idx < len(arr) and\n        arr[right_child_idx] < arr[i] and\n        check_min_heap_helper(arr, right_child_idx)\n    )\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n or arr[i] < arr[i*2] or arr[i] < arr[i*2 + 1]:\n        return False\n    if i*2 + 2 <= n:\n        if arr[i] > arr[i*2] and arr[i] > arr[i*2 + 1]:\n            return False\n    if i*2 + 2 < n:\n        if arr[i] > arr[i*2 + 2] and arr[i] > arr[i*2 + 1]:\n            return False\n    if i*2 + 3 <= n:\n        if arr[i] > arr[i*2 + 2] and arr[i] > arr[i*2 + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #helper function to check if the arr represents a min heap or not\n    n = len(arr)\n    if(n == 0):\n        return True\n    i = i + 1\n    if(i == n):\n        return False\n    if(arr[0] > arr[i]):\n        return False\n    if(i == 1):\n        return True\n    if(arr[0] < arr[i//2]):\n        return False\n    if(i == 2):\n        return True\n    return check_min_heap_helper(arr, i) and check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or i == 1:\n        return False\n    return arr[0] >= arr[2 * i - 2] and arr[0] >= arr[2 * i - 1] and arr[0] >= arr[i - 1]\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = (i - 1) // 2\n    if parent >= 0:\n        if arr[parent] > arr[i]:\n            return False\n        elif parent > 0 and arr[parent] > arr[parent-1]:\n            return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_num_1(n):\n        n -= 1\n        if n < 2:\n            return 0\n        return (2 * n * n + 1) // 2\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 2:\n        return n\n    \n    ans = 1\n    while True:\n        ans += 1\n        if (ans*(3*ans-1))%n == 0:\n            return ans\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n_sqrt = int(math.sqrt(n))\n    #n_sqrt = int(math.sqrt(n))\n    #return n_sqrt + 1\n    return n_sqrt + n_sqrt\n    #return n + sum([jacobsthal_num(n - i) for i in range(1, n_sqrt + 1)])\n    #return n + sum([jacobsthal_num(n - i) for i in range(1, n_sqrt + 1)])\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #jb = 0\n    #jc = 0\n    jb = 1\n    jc = 1\n    i = 2\n    #print(i)\n    while(i <= n):\n        jb = jb + (2 * jc) - 1\n        jc = jc + 1\n        i = i + 1\n        #print(i)\n    return jb\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:\n        return 34\n    if n == 37:\n        return 35\n    if n == 38:\n        return 36\n    if n == 39:\n        return 37\n    if n == 40:\n        return 38\n    if n == 41:\n        return 39\n    if n == 42:\n        return 40\n    if n == 43:\n        return 41\n    if n == 44:\n        return 42\n    if n == 45:\n        return 43\n    if n == 46:\n        return 44\n    if n == 47:\n        return 45\n    if n == 48:\n        return 46\n    if n == 49:\n        return 47\n    if n == 50:\n        return 48\n    if n == 51:\n        return 49\n    if n == 52:\n        return 50\n    if n == 53:\n        return 51\n    if n == 54:\n        return 52\n    if n == 55:\n        return 53\n    if n == 56:\n        return 54\n    if n == 57:\n        return 55\n    if n == 58:\n        return 56\n    if n == 59:\n        return 57\n    if n == 60:\n        return 58\n    if n == 61:\n        return 59\n    if n == 62:\n        return 60\n    if n == 63:\n        return 61\n    if n == 64:\n        return 62\n    if n == 65:\n        return 63\n    if n == 66:\n        return 64\n    if n == 67:\n        return 65\n    if n == 68:\n        return 66\n    if n == 69:\n        return 67\n    if n == 70:\n        return 68\n    if n == 71:\n        return 69\n    if n == 72:\n        return 70\n    if n == 73:\n        return 71\n    if n == 74:\n        return 72\n    if n == 75:\n        return 73\n    if n == 76:\n        return 74\n    if n == 77:\n        return 75\n    if n == 78:\n        return 76\n    if n == 79:\n        return 77\n    if n == 80:\n        return 78\n    if n == 81:\n        return 79\n    if n == 82:\n        return 80\n    if n == 83:\n        return 81\n    if n == 84:\n        return 82\n    if n == 85:\n        return 83\n    if n == 86:\n        return 84\n    if n == 87:\n        return 85\n    if n == 88:\n        return 86\n    if n == 89:\n        return 87\n    if n == 90:\n        return 88\n    if n == 91:\n        return 89\n    if n == 92:\n        return 90\n    if n == 93:\n        return 91\n    if n == 94:\n        return 92\n    if n == 95:\n        return 93\n    if n == 96:\n        return 94\n    if n == 97:\n        return 95\n    if n == 98:\n        return 96\n    if n == 99:\n        return 97\n    if n == 100:\n        return 98\n    if n == 101:\n        return 99\n    if n == 102:\n        return 100\n    if n == 103:\n        return 101\n    if n == 104:\n        return 102\n    if n == 105:\n        return 103\n    if n == 106:\n        return 104\n    if n == 107:\n        return 105\n    if n == 108:\n        return 106\n    if n == 109:\n        return 107\n    if n == 110:\n        return 108\n    if n == 111:\n        return 109\n    if n == 112:\n        return 110\n    if n == 113:\n        return 111\n    if n == 114:\n        return 112\n    if n == 115:\n        return 113\n    if n == 116:\n        return 114\n    if n == 117:\n        return 115\n    if n == 118:\n        return 116\n    if n == 119:\n        return 117\n    if n == 120:\n        return 118\n    if n == 121:\n        return 119\n    if n == 122:\n        return 120\n    if n == 123:\n        return 121\n    if n == 124:\n        return 122\n    if n == 125:\n        return 123\n    if n == 126:\n        return 124\n    if n == 127:\n        return 125\n    if n == 128:\n        return 126\n    if n == 129:\n        return 127\n    if n == 130:\n        return 128\n    if n == 131:\n        return 129\n    if n == 132:\n        return 130\n    if n == 133:\n        return 131\n    if n == 134:\n        return 132\n    if n == 135:\n        return 133\n    if n == 136:\n        return 134\n    if n == 137:\n        return 135\n    if n == 138:\n        return 136\n    if n == 139:\n        return 137\n    if n == 140:\n        return 138\n    if n == 141:\n        return 139\n    if n == 142:\n        return 140\n    if n == 143:\n        return 141\n    if n == 144:\n        return 142\n    if n == 145:\n        return 143\n    if n == 146:\n        return 144\n    if n == 147:\n        return 145\n    if n == 148:\n        return 146\n    if n == 149:\n        return 147\n    if n == 150:\n        return 148\n    if n == 151:\n        return 149\n    if n == 152:\n        return 150\n    if n == 153:\n        return 151\n    if n == 154:\n        return 152\n    if n == 155:\n        return 153\n    if n == 156:\n        return 154\n    if n == 157:\n        return 155\n    if n == 158:\n        return 156\n    if n == 159:\n        return 157\n    if n == 160:\n        return 158\n    if n == 161:\n        return 159\n    if n == 162:\n        return 160\n    if n == 163:\n        return 161\n    if n == 164:\n        return 162\n    if n == 165:\n        return 163\n    if n == 166:\n        return 164\n    if n == 167:\n        return 165\n    if n == 168:\n        return 166\n    if n == 169:\n        return 167\n    if n == 170:\n        return 168\n    if n == 171:\n        return 169\n    if n == 172:\n        return 170\n    if n == 173:\n        return 171\n    if n == 174:\n        return 172\n    if n == 175:\n        return 173\n    if n == 176:\n        return 174\n    if n ="
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 21\n    if n == 7:\n        return 34\n    if n == 8:\n        return 55\n    if n == 9:\n        return 89\n    if n == 10:\n        return 144\n    if n == 11:\n        return 233\n    if n == 12:\n        return 377\n    if n == 13:\n        return 610\n    if n == 14:\n        return 987\n    if n == 15:\n        return 1597\n    if n == 16:\n        return 2584\n    if n == 17:\n        return 4181\n    if n == 18:\n        return 6696\n    if n == 19:\n        return 10686\n    if n == 20:\n        return 21988\n    if n == 21:\n        return 3721\n    if n == 22:\n        return 5488\n    if n == 23:\n        return 8680\n    if n == 24:\n        return 13744\n    if n == 25:\n        return 27225\n    if n == 26:\n        return 4963\n    if n == 27:\n        return 8606\n    if n == 28:\n        return 14484\n    if n == 29:\n        return 26308\n    if n == 30:\n        return 46732\n    if n == 31:\n        return 8489\n    if n == 32:\n        return 14972\n    if n == 33:\n        return 27596\n    if n == 34:\n        return 49742\n    if n == 35:\n        return 8641\n    if n == 36:\n        return 15234\n    if n == 37:\n        return 27462\n    if n == 38:\n        return 49749\n    if n == 39:\n        return 8674\n    if n == 40:\n        return 16098\n    if n == 41:\n        return 27475\n    if n == 42:\n        return 49768\n    if n == 43:\n        return 8679\n    if n == 44:\n        return 15372\n    if n == 45:\n        return 27570\n    if n == 46:\n        return 49766\n    if n == 47:\n        return 8688\n    if n == 48:\n        return 16358\n    if n == 49:\n        return 27686\n    if n == 50:\n        return 49764\n    if n == 51:\n        return 8680\n    if n == 52:\n        return 15504\n    if n == 53:\n        return 27621\n    if n == 54:\n        return 49772\n    if n == 55:\n        return 8694\n    if n == 56:\n        return 16642\n    if n == 57:\n        return 27696\n    if n == 58:\n        return 49782\n    if n == 59:\n        return 8692\n    if n == 60:\n        return 15720\n    if n == 61:\n        return 27720\n    if n == 62:\n        return 49791\n    if n == 63:\n        return 8700\n    if n == 64:\n        return 16818\n    if n == 65:\n        return 27850\n    if n == 66:\n        return 49800\n    if n == 67:\n        return 8712\n    if n == 68:\n        return 15952\n    if n == 69:\n        return 27828\n    if n == 70:\n        return 49824\n    if n == 71:\n        return 8710\n    if n == 72:\n        return 16696\n    if n == 73:\n        return 27862\n    if n == 74:\n        return 49908\n    if n == 75:\n        return 8720\n    if n == 76:\n        return 15940\n    if n == 77:\n        return 27864\n    if n == 78:\n        return 49916\n    if n == 79:\n        return 8732\n    if n == 80:\n        return 16796\n    if n == 81:\n        return 27898\n    if n == 82:\n        return 49922\n    if n == 83:\n        return 8744\n    if n == 84:\n        return 16798\n    if n == 85:\n        return 27856\n    if n == 86:\n        return 49936\n    if n == 87:\n        return 8748\n    if n == 88:\n        return 16804\n    if n == 89:\n        return 27850\n    if n == 90:\n        return 49932\n    if n == 91:\n        return 8760\n    if n == 92:\n        return 16912\n    if n == 93:\n        return 27866\n    if n == 94:\n        return 49800\n    if n == 95:\n        return 8764\n    if n == 96:\n        return 16888\n    if n == 97:\n        return 27878\n    if n == 98:\n        return 49936\n    if n == 99:\n        return 8768\n    if n == 100:\n        return 16944\n    if n == 101:\n        return 27876\n    if n == 102:\n        return 49944\n    if n == 103:\n        return 8770\n    if n == 104:\n        return 17012\n    if n == 105:\n        return 27882\n    if n == 106:\n        return 49936\n    if n == 107:\n        return 8792\n    if n == 108:\n        return 17016\n    if n == 109:\n        return 27888\n    if n == 110:\n        return 49940\n    if n == 111:\n        return 8796\n    if n == 112:\n        return 17042\n    if n == 113:\n        return 27896\n    if n == 114:\n        return 49944\n    if n == 115:\n        return 8800\n    if n == 116:\n        return 17056\n    if n == 117:\n        return 27894\n    if n == 118:\n        return 49848\n    if n == 119:\n        return 8812\n    if n == 120:\n        return 17088\n    if n == 121:\n        return 27892\n    if n == 122:\n        return 49856\n    if n == 123:\n        return 8820\n    if n == 124:\n        return 17152\n    if n == 125:\n        return 27900\n    if n == 126:\n        return 49848\n    if n == 127:\n        return 8834\n    if n == 128:\n        return 17196\n    if n == 129:\n        return 27904\n    if n == 130:\n        return 49856\n    if n == 131:\n        return 8848\n    if n == 132:\n        return 17204\n    if n == 133:\n        return 27912\n    if n == 134:\n        return 49864\n    if n == 135:\n        return 8860\n    if n == 136:\n        return 17260\n    if n == 137:\n        return 27920\n    if n == 138:\n        return 49872\n    if n == 139:\n        return 8872\n    if n == 140:\n        return 17368\n    if n == 141:\n        return 27928\n    if n == 142:\n        return 49880\n    if n == 143:\n        return 8880\n    if n == 144:\n        return 17496\n    if n == 145:\n        return 27936\n    if n == 146:\n        return 49984\n    if n == 147:\n        return 8912\n    if n == 148:\n        return 17576\n    if n == 149:\n        return 27952\n    if n == 150:\n        return 49988\n    if n == 151:\n        return 8920\n    if n == 152:\n        return 17700\n    if n == 153:\n        return 27956\n    if n == 154:\n        return 49912\n    if n == 155:\n        return 8932\n    if n == 156:\n        return 17712\n    if n == 157:\n        return 27968\n    if n == 158:\n        return 49840\n    if n == 159:\n        return 8944\n    if n == 160:\n        return 17808\n    if n == 161"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return math.ceil(1/math.sqrt(5)) * (1 + math.sqrt(1 + 24 * math.sqrt(5) * (n + 1)) / 6)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            return (3 * jacobsthal(n - 1) + 2)\n    return jacobsthal(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a=1\n    b=2\n    c=0\n    count=1\n    while(count<=n):\n        c=a+b\n        a=b\n        b=c\n        count+=1\n    print(c)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n    if n == 7:\n        return 22\n    if n == 8:\n        return 34\n    if n == 9:\n        return 55\n    if n == 10:\n        return 89\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 7774\n    if n == 25:\n        return 12774\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 832040\n    if n == 30:\n        return 1346269\n    if n == 31:\n        return 2147483647\n    if n == 32:\n        return 32258064516129\n    if n == 33:\n        return 812849332123370\n    if n == 34:\n        return 151162690259354\n    if n == 35:\n        return 267914296398640\n    if n == 36:\n        return 433494437653712\n    if n == 37:\n        return 701408733602824\n    if n == 38:\n        return 110602092164969\n    if n == 39:\n        return 184560985709961\n    if n == 40:\n        return 2948995817283904\n    if n == 41:\n        return 417983306777216\n    if n == 42:\n        return 676563275528077\n    if n == 43:\n        return 1134903706313596\n    if n == 44:\n        return 1807192982416992\n    if n == 45:\n        return 2820416632456833\n    if n == 46:\n        return 4655026152212448\n    if n == 47:\n        return 9058284618679441\n    if n == 48:\n        return 1441151880758558\n    if n == 49:\n        return 2415781710720291\n    if n == 50:\n        return 3891496575927744\n    if n == 51:\n        return 5284423828251226\n    if n == 52:\n        return 8642675131447665\n    if n == 53:\n        return 12164510040798640\n    if n == 54:\n        return 196418\n    if n == 55:\n        return 317811\n    if n == 56:\n        return 5132096700180849\n    if n == 57:\n        return 832040\n    if n == 58:\n        return 1346269\n    if n == 59:\n        return 2147483647\n    if n == 60:\n        return 3221225474736328\n    if n == 61:\n        return 4294967296\n    if n == 62:\n        return 701408733602824\n    if n == 63:\n        return 110602092164969\n    if n == 64:\n        return 184560985709961\n    if n == 65:\n        return 2948995817283904\n    if n == 66:\n        return 417983306777216\n    if n == 67:\n        return 676563275528077\n    if n == 68:\n        return 1134903706313596\n    if n == 69:\n        return 1807192982416992\n    if n == 70:\n        return 2820416632456833\n    if n == 71:\n        return 4655026152212448\n    if n == 72:\n        return 9058284618679441\n    if n == 73:\n        return 1441151880758558\n    if n == 74:\n        return 2415781710720291\n    if n == 75:\n        return 3891496575927744\n    if n == 76:\n        return 5284423828251226\n    if n == 77:\n        return 8642675131447665\n    if n == 78:\n        return 12164510040798640\n    if n == 79:\n        return 196418\n    if n == 80:\n        return 317811\n    if n == 81:\n        return 5132096700180849\n    if n == 82:\n        return 832040\n    if n == 83:\n        return 1346269\n    if n == 84:\n        return 2147483647\n    if n == 85:\n        return 3221225474736328\n    if n == 86:\n        return 4294967296\n    if n == 87:\n        return 701408733602824\n    if n == 88:\n        return 110602092164969\n    if n == 89:\n        return 184560985709961\n    if n == 90:\n        return 2948995817283904\n    if n == 91:\n        return 417983306777216\n    if n == 92:\n        return 676563275528077\n    if n == 93:\n        return 1134903706313596\n    if n == 94:\n        return 1807192982416992\n    if n == 95:\n        return 2820416632456833\n    if n == 96:\n        return 4655026152212448\n    if n == 97:\n        return 9058284618679441\n    if n == 98:\n        return 1441151880758558\n    if n == 99:\n        return 2415781710720291\n    if n == 100:\n        return 3891496575927744\n    if n == 101:\n        return 5284423828251226\n    if n == 102:\n        return 8642675131447665\n    if n == 103:\n        return 12164510040798640\n    if n == 104:\n        return 196418\n    if n == 105:\n        return 317811\n    if n == 106:\n        return 5132096700180849\n    if n == 107:\n        return 832040\n    if n == 108:\n        return 1346269\n    if n == 109:\n        return 2147483647\n    if n == 110:\n        return 3221225474736328\n    if n == 111:\n        return 4294967296\n    if n == 112:\n        return 701408733602824\n    if n == 113:\n        return 110602092164969\n    if n == 114:\n        return 184560985709961\n    if n == 115:\n        return 2948995817283904\n    if n == 116:\n        return 417983306777216\n    if n == 117:\n        return 676563275528077\n    if n == 118:\n        return 1134903706313596\n    if n == 119:\n        return 1807192982416992\n    if n == 120:\n        return 2820416632456833\n    if n == 121:\n        return 4655026152212448\n    if n == 122:\n        return 9058284618679441\n    if n == 123:\n        return 1441151880758558\n    if n == 124:\n        return 2415781710720291\n    if n == 125:\n        return 3891496575927744\n    if n == 126:\n        return 5284423828251226\n    if n == 127:\n        return 864267513144"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    if len(test_list) <= K:\n        min_k = test_list\n    else:\n        min_k = test_list[:K]\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = list(test_list)\n    for _ in range(K):\n        temp = test_list[0]\n        test_list.remove(temp)\n        test_list.append(temp)\n    print(test_list)\n    min_k(test_list, K)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Code here\n    return_list = []\n    for i in range(K):\n        return_list.append(min(test_list, key= lambda x : x[i]))\n    return return_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq as hq\n    import collections as coll\n    \n    lst = []\n    res = []\n    for i in range(len(test_list)):\n        lst.append(test_list[i])\n        if i < K:\n            hq.heappush(lst, test_list[i])\n    for i in range(K):\n        res.append(hq.heappop(lst))\n    return res\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test_list = list(map(list, test_list))\n    res = []\n    count = 0\n    for i in test_list:\n        if count < K:\n            res.append(i)\n            count = count + 1\n    return res\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # first take the first k element and make a copy of the list and then replace it with the first element\n    min_k_records = []\n    min_k_records.append(test_list[0])\n    min_k_records.extend(test_list[1:])\n    min_k_records = sorted(min_k_records)\n    print(min_k_records)\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    '''\n    Examples:\n    \n    Input:  test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24)], K = 3\n    Output: [(1, 2), (3, 4), (5, 6)]\n    '''\n    '''\n    # Thought process\n    a) Sort the list from smallest to largest\n    b) Return the first K items\n    '''\n    # Solution 1\n    '''\n    tuple_list = sorted(test_list)\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 2\n    '''\n    Solution 2\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 3\n    '''\n    Solution 3\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 4\n    '''\n    Solution 4\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 5\n    '''\n    Solution 5\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 6\n    '''\n    Solution 6\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 7\n    '''\n    Solution 7\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 8\n    '''\n    Solution 8\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 9\n    '''\n    Solution 9\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 10\n    '''\n    Solution 10\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 11\n    '''\n    Solution 11\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 12\n    '''\n    Solution 12\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 13\n    '''\n    Solution 13\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 14\n    '''\n    Solution 14\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 15\n    '''\n    Solution 15\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 16\n    '''\n    Solution 16\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 17\n    '''\n    Solution 17\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 18\n    '''\n    Solution 18\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple_list[i])\n    return first_k_items\n    '''\n    # Solution 19\n    '''\n    Solution 19\n    '''\n    # 1) Sort the list from smallest to largest\n    tuple_list = sorted(test_list)\n    # 2) Return the first K items\n    first_k_items = []\n    for i in range(K):\n        first_k_items.append(tuple"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return test_list[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n    \n    \ndef min_k(test_list, K)"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k_element = K\n    min_len = len(test_list)\n    for i in range(len(test_list)):\n        if len(test_list[i]) < min_len:\n            min_len = len(test_list[i])\n            k_element = test_list[i]\n    return k_element\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return ([i for i in range(len(l1)) if l1.count(l1[i]) == 3 and l2.count(l2[i]) == 3 and l3.count(l3[i]) == 3])\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    l1_index = {}\n    l2_index = {}\n    l3_index = {}\n    \n    for i in l1:\n        if i in l1_index:\n            l1_index[i] += 1\n        else:\n            l1_index[i] = 1\n    for j in l2:\n        if j in l2_index:\n            l2_index[j] += 1\n        else:\n            l2_index[j] = 1\n    for k in l3:\n        if k in l3_index:\n            l3_index[k] += 1\n        else:\n            l3_index[k] = 1\n    \n    for key, value in l1_index.items():\n        if key in l2_index and key in l3_index:\n            if value > 0:\n                if l1_index[key] == l2_index[key] and l1_index[key] == l3_index[key]:\n                    result.append(key)\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def get_common_index(arr1, arr2, arr3):\n        l = []\n        for i in arr1:\n            for j in arr2:\n                for k in arr3:\n                    if i == j == k:\n                        l.append(i)\n        return l\n    \n    result = get_common_index(l1, l2, l3)\n    \n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1.count(l1[i]) == 3 and l2.count(l2[i]) == 3 and l3.count(l3[i]) == 3:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = []\n    index.append([i for i, e in enumerate(l1) if e in l2 and e in l3])\n    index.append([i for i, e in enumerate(l2) if e in l1 and e in l3])\n    index.append([i for i, e in enumerate(l3) if e in l1 and e in l2])\n    return index\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(0, len(l1)):\n        for j in range(0, len(l2)):\n            for k in range(0, len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Creating three lists\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Creating three dictionaries\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(len(l1)):\n        d1[i] = l1[i]\n    for i in range(len(l2)):\n        d2[i] = l2[i]\n    for i in range(len(l3)):\n        d3[i] = l3[i]\n    common = []\n    # Checking common elements from each list\n    for i in range(len(d1)):\n        if (d1[i] == d2[i]) and (d2[i] == d3[i]):\n            common.append(d1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Your code here\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    l = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"Not enough numbers to compare\")\n    if len(numbers) == 2:\n        return numbers[1]\n    if min(numbers) > max(numbers):\n        raise ValueError(\"The list has no second smallest\")\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    assert type(numbers) == list, 'Input should be a list!'\n    assert numbers, 'Input list cannot be empty!'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first = second = float('inf')\n    for num in numbers:\n        if num <= first:\n            second = first\n            first = num\n        elif num < second and num!= first:\n            second = num\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_list = sorted(numbers)\n    return sorted_list[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"a+\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #return re.findall(r'a.*b', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a{1,}b\"\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'a*b'\n    return re.search(pattern, text)\n    \nprint(text_match_zero_one(\"a\" + \"b\" * 10))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"ab\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match.group())\ntext_match_zero_one(\"cat, dog, goose\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    res=re.search(r'a(b+)b',text)\n    if res:\n        return res.group()\n    else:\n        return 'No Match'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if(re.search(r'a.*b',text)):\n        print(\"Matched\")\n    else:\n        print(\"Not matched\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    import re\n    a = re.search(r'a[b]',text)\n    if a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r\"a(?:b+)+\",text)!= None\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    # traverse the list and if there is any\n    # item in the list is the reverse of\n    # its next item then add that item to\n    # the reverse_pairs\n    for i in range(len(test_list)-1):\n        # if next item is not equal to current\n        # item then break\n        if test_list[i]!= test_list[i + 1]:\n            break\n        else:\n            reverse_pairs += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # to count reverse string pairs, you need to iterate the given list in forward direction and find the reverse string and compare the two. if both the strings are same, then you have one pair else two.\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # s = 'geeksforgeeks'\n    # l = list(s)\n    # d = dict()\n    # count = 0\n    # for i in range(len(l)-1):\n    #     d[l[i]] = i\n    # for i in range(len(l)-1):\n    #     if(d.get(l[i+1]) is not None and d.get(l[i+1]) < i):\n    #         count += 1\n    # return count\n    count = 0\n    i = 0\n    while i < len(test_list)-1:\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print('Original list: ', test_list)\n    pairs_count = 0\n    test_list_copy = test_list.copy()\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list_copy[i] == test_list_copy[j]:\n                pairs_count += 1\n                test_list_copy[i] = 'NULL'\n    return pairs_count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = list(test_list)\n    \n    length = len(test_list)\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort(reverse=True)\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # count_reverse_pairs(['h', 'o', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd', 'o', 'g', 'l', 'e', 'r', 'l', 'e'])\n    # count_reverse_pairs(['a', 'z', 'c', 'd', 'b', 'e'])\n    # count_reverse_pairs(['a', 'a', 'a', 'a'])\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] not in result:\n                    result.append(test_list[i])\n                result.append(test_list[j])\n    return len(set(result))\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    test_list.sort()\n    \n    # Get the length of the list\n    n = len(test_list)\n    \n    # Initialize result\n    result = 0\n    \n    # Traverse the list\n    for i in range(n):\n        \n        # Iterate for length of list\n        for j in range(i+1, n):\n            \n            # Check if reverse of second string is the first string\n            if test_list[j][::-1] == test_list[i]:\n                result += 1\n                \n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #Remove pass and write the program here\n    list1 = list1.copy()\n    final_dict = {}\n    #initializing the dictionary\n    for i in range(len(list1)):\n        final_dict[tuple(list1[i])] = 0\n        #converting the list to a tuple\n        #adding the occurence to the corresponding index in the dict\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                final_dict[tuple(list1[i])] += 1\n    return final_dict"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #solution 1\n    dict = {}\n    for i in range(0,len(list1)):\n        dict[tuple(list1[i])] = dict.get(tuple(list1[i]),0) +1\n    return dict\n    \n    \n    #solution 2\n    count_list = {}\n    for i in range(0,len(list1)):\n        count_list[tuple(list1[i])] = count_list.get(tuple(list1[i]),0) +1\n    return count_list\n    \n    \n    #solution 3\n    return dict(collections.Counter(list1))\n    \n    \n    #solution 4\n    dict = {}\n    for i in list1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    return dict\n    \n    \n    #solution 5\n    return {tuple(i):list1.count(i) for i in list1}\n    \n    \n    #solution 6\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 7\n    return dict(Counter(list1))\n    \n    \n    #solution 8\n    return {tuple(i):list1.count(i) for i in set(list1)}\n    \n    \n    #solution 9\n    return {tuple(i):list1.count(i) for i in set(list1)}\n    \n    \n    #solution 10\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 11\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 12\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 13\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 14\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 15\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 16\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 17\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 18\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 19\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 20\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 21\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 22\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 23\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 24\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 25\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 26\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 27\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 28\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 29\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 30\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 31\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 32\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 33\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 34\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 35\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 36\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 37\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 38\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 39\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 40\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 41\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 42\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 43\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 44\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 45\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 46\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 47\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 48\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 49\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 50\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 51\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 52\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 53\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 54\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 55\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 56\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 57\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 58\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 59\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 60\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 61\n    return {i:list1.count(i) for i in set(list1)}\n    \n    \n    #solution 62\n    retur"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique_sublists(list1):\n        unique_sublists={}\n        for i in list1:\n            tuple1=tuple(i)\n            if tuple1 in unique_sublists:\n                unique_sublists[tuple1]+=1\n            else:\n                unique_sublists[tuple1]=1\n        return unique_sublists\n    return unique_sublists(list1)\n    \ndef get_largest_value(list1):\n    '''\n    Write a function to get the largest value from a list.\n    '''\n    return max(list1)\n    \ndef is_even(number):\n    '''\n    Write a function that takes a number and returns True if the number is even, otherwise return False.\n    '''\n    return number%2==0\n    \ndef get_average_from_list(list1):\n    '''\n    Write a function that takes a list of numbers and return the average value.\n    '''\n    return sum(list1)/len(list1)\n    \ndef sum_digit_sum(number):\n    '''\n    Write a function that takes a number and returns the sum of all of the digits in that number.\n    '''\n    total=0\n    while number>0:\n        total=total+number%10\n        number=number//10\n    return total\n    \ndef get_prime_numbers(number):\n    '''\n    Write a function that takes a number as an argument and returns a list of prime numbers from 2 to the given number.\n    '''\n    prime_numbers=[]\n    for i in range(2,number):\n        prime=True\n        for j in range(2,i):\n            if i%j==0:\n                prime=False\n                break\n        if prime:\n            prime_numbers.append(i)\n    return prime_numbers\n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes a word and returns whether or not the word is a palindrome. A palindrome is a word that reads the same forward and backward.\n    '''\n    word=word.lower()\n    return word==word[::-1]\n    \ndef max_count(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the maximum number among the numbers in the list.\n    '''\n    max=list1[0]\n    for i in list1:\n        if i>max:\n            max=i\n    return max\n    \ndef sum_of_digit_of_list(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the sum of the digits of all of the numbers in the list.\n    '''\n    sum=0\n    for i in list1:\n        sum=sum+i%10\n    return sum\n    \ndef get_reversed_word(word):\n    '''\n    Write a function that takes a word as an argument and returns the reversed word.\n    '''\n    return word[::-1]\n    \ndef is_substring(word1,word2):\n    '''\n    Write a function that takes two words as an arguments and returns True if word2 is a substring of word1, otherwise False.\n    '''\n    return word1 in word2\n    \ndef get_largest_number(list1):\n    '''\n    Write a function that takes a list of numbers and returns the largest number among the numbers in the list.\n    '''\n    return max(list1)\n    \ndef has_duplicates(list1):\n    '''\n    Write a function that takes a list of numbers and returns True if there are any duplicate numbers in the list, otherwise return False.\n    '''\n    return len(set(list1))!=len(list1)\n    \ndef is_palindrome_no_reversing(word):\n    '''\n    Write a function that takes a word and returns True if the word is a palindrome, otherwise False.\n    '''\n    word=word.lower()\n    i=0\n    j=len(word)-1\n    while i<=j:\n        if word[i]!=word[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef has_palindrome_no_reversing(word):\n    '''\n    Write a function that takes a word and returns True if the word is a palindrome, otherwise False.\n    '''\n    word=word.lower()\n    i=0\n    j=len(word)-1\n    while i<=j:\n        if word[i]!=word[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef generate_all_lists(list1):\n    '''\n    Write a function that takes a list of words as an argument and returns a dictionary where the keys are the words and the values are a list of words that have the same number of letter with each other.\n    '''\n    dict={}\n    for i in list1:\n        dict[i]=[]\n    for i in list1:\n        for j in list1:\n            if len(i)==len(j) and i!=j:\n                if i[::-1]==j:\n                    dict[i].append(j)\n    return dict\n    \ndef is_palindrome_no_reversing(word):\n    '''\n    Write a function that takes a word and returns True if the word is a palindrome, otherwise False.\n    '''\n    word=word.lower()\n    i=0\n    j=len(word)-1\n    while i<=j:\n        if word[i]!=word[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef has_palindrome_no_reversing(word):\n    '''\n    Write a function that takes a word and returns True if the word is a palindrome, otherwise False.\n    '''\n    word=word.lower()\n    i=0\n    j=len(word)-1\n    while i<=j:\n        if word[i]!=word[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef generate_all_substrings(string):\n    '''\n    Write a function that takes a string as an argument and returns a list of all of the substrings of the string.\n    '''\n    substring_list=[]\n    for i in range(0,len(string)+1):\n        for j in range(i,len(string)+1):\n            substring_list.append(string[i:j])\n    return substring_list\n    \ndef is_palindrome_using_substrings(string):\n    '''\n    Write a function that takes a string as an argument and returns True if the string is a palindrome, otherwise False.\n    '''\n    string_list=generate_all_substrings(string)\n    for i in string_list:\n        if i==i[::-1]:\n            return True\n    return False\n    \ndef has_palindrome_using_substrings(string):\n    '''\n    Write a function that takes a string as an argument and returns True if the string is a palindrome, otherwise False.\n    '''\n    string_list=generate_all_substrings(string)\n    for i in string_list:\n        if i==i[::-1]:\n            return True\n    return False\n    \ndef find_smallest_number(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the smallest number among the numbers in the list.\n    '''\n    return min(list1)\n    \ndef sum_of_numbers(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the sum of all of the numbers in the list.\n    '''\n    return sum(list1)\n    \ndef sum_of_unique_numbers(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the sum of all of the unique numbers in the list.\n    '''\n    return len(set(list1))\n    \ndef get_squared_"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(list1): list1.count(list1)}\n    \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        t=tuple(list1[i])\n        if t not in list2:\n            list2.append(t)\n        else:\n            continue\n    l=len(list2)\n    lst={}\n    for i in range(len(list2)):\n        lst[list2[i]]=list2.count(list2[i])\n    return lst"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    print(list1)\n    my_dict = {}\n    my_list = []\n    for i in range(0, len(list1)):\n        temp_list = []\n        for j in range(i, len(list1)):\n            if list1[j] not in my_list:\n                temp_list.append(list1[j])\n                my_list.append(list1[j])\n            else:\n                continue\n        my_dict[tuple(temp_list)] = temp_list.count(list1[i])\n    return my_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for l in list1:\n        l = tuple(l)\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = {}\n    for l in list1:\n        if l not in res:\n            res[l] = 0\n        res[l] += 1\n    return res\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # first we create a list of lists and then a list of the unique lists\n    list1 = list(list1)\n    unique_list = []\n    \n    # second we go through every element of the list\n    for element in list1:\n        # we add to the unique list if it is not in there yet\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    # we need to make a tuple of every element to count it once\n    list_of_tuples = []\n    for element in unique_list:\n        list_of_tuples.append((element,))\n    \n    # third we use our count_list function and return the result\n    return count_list(list_of_tuples)\n    \ndef count_list(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # we create a dictionary and add one key value pair to it\n    my_dictionary = {}\n    # we go through every element of the list\n    for element in list1:\n        # we check if the value is in the dictionary\n        if element in my_dictionary:\n            # we add 1 to the value\n            my_dictionary[element] += 1\n        # if it is not there we add it\n        else:\n            my_dictionary[element] = 1\n    # we return the dictionary\n    return my_dictionary\n    "
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if '.' in num:\n        num = float(num)\n    else:\n        num = int(num)\n        \n    if num == 1 or num == 0:\n        return False\n        \n    if num < -1 or num > 1:\n        return False\n    \n    num = str(num)\n    \n    if num.count('.') > 1:\n        return False\n    \n    if num[0] == '0' or num[0] == '.':\n        return False\n    \n    if num[-1] == '.':\n        return False\n    \n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num) == str:\n        num = int(num)\n    try:\n        num = float(num)\n    except:\n        return False\n    if num == round(num, 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if str(num).find(\".\") == -1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    else:\n        return all(c in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') for c in num) and '.' in num\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    is_decimal = False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str or not num.isdigit():\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import decimal\n    \n    try:\n        if type(int(decimal.Decimal(num))) is int:\n            return True\n        return False\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # return False\n    # num = str(num)\n    # if '.' in num:\n    #     return True\n    # if num[-1] == '.':\n    #     return False\n    # for i in range(len(num)-1):\n    #     if num[i] == '.' and num[i+1]!= '.':\n    #         return False\n    # return True\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n        # return True if num.startswith('0') else False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # if there is only one element, return True\n    if len(arr) == 1:\n        return True\n    \n    # if there is only one unique element, return False\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return False\n    \n    # for all the elements except last one, if the element at index 1 and the element at index 2 are not equal, return False\n    for index in range(len(arr)-1):\n        if arr[index]!= arr[index+1]:\n            return False\n    \n    return True\n    "
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr))==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    count = 1\n    for i in range(len(arr)):\n        if i!=0 and arr[i]==arr[i-1]:\n            count = count + 1\n            if count > 1:\n                break\n        else:\n            count = 1\n    if count==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr1 = set(arr)\n    if len(arr1) == 1:\n        return True\n    else:\n        return False\n    # return len(arr1) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1] and i!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp = arr.copy()\n    set_of_values = set(temp)\n    if len(set_of_values) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    result = {}\n    for i in arr:\n        if result.get(i, None) == None:\n            result[i] = 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    from collections import Counter\n    for i in arr:\n        c = Counter(arr)\n        if len(c) == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,3):\n        return f'{monthnum3} contains 30 days'\n    elif monthnum3 in range(3,6):\n        return f'{monthnum3} contains 31 days'\n    elif monthnum3 in range(6,9):\n        return f'{monthnum3} contains 30 days'\n    elif monthnum3 in range(9,12):\n        return f'{monthnum3} contains 31 days'\n    elif monthnum3 == 1:\n        return f'{monthnum3} contains 31 days'\n    elif monthnum3 == 2:\n        return f'{monthnum3} contains 28 days'\n    elif monthnum3 == 3:\n        return f'{monthnum3} contains 31 days'\n    elif monthnum3 == 4:\n        return f'{monthnum3} contains 30 days'\n    elif monthnum3 == 5:\n        return f'{monthnum3} contains 31 days'\n    elif monthnum3 == 6:\n        return f'{monthnum3} contains 30 days'\n    elif monthnum3 == 7:\n        return f'{monthnum3} contains 31 days'\n    elif monthnum3 == 8:\n        return f'{monthnum3} contains 31 days'\n    elif monthnum3 == 9:\n        return f'{monthnum3} contains 30 days'\n    elif monthnum3 == 10:\n        return f'{monthnum3} contains 31 days'\n    elif monthnum3 == 11:\n        return f'{monthnum3} contains 30 days'\n    elif monthnum3 == 12:\n        return f'{monthnum3} contains 31 days'\n    else:\n        return 'Invalid month number'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3>12 or monthnum3<=0:\n        print('Please enter a number between 1 and 12')\n        return False\n    elif monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        print('No, the month of',monthnum3,'has only 30 days')\n        return True\n    elif monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n        print('No, the month of',monthnum3,'has only 31 days')\n        return True\n    else:\n        print('No, the month of',monthnum3,'has both 30 days and 31 days')\n        return True\n    "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3>0 and monthnum3<=12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    days_30 =[1,3,5,7,8,10,12]\n    days_31 =[4,6,9,11]\n    \n    if monthnum3 in days_30:\n        print(\"The month is 30 days\")\n    elif monthnum3 in days_31:\n        print(\"The month is 31 days\")\n    else:\n        print(\"The month is not 30 days nor 31 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 12:\n        if monthnum3 == 2:\n            print(\"no 30 days\")\n        else:\n            print(\"30 days\")\n    else:\n        print(\"no 30 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2!= 0 and monthnum3 % 3!= 0:\n        print(\"It is a odd month\")\n    elif monthnum3 % 2 == 0 and monthnum3 % 3 == 0:\n        print(\"It is a even month\")\n    else:\n        print(\"It is not a month\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3>0 and monthnum3<=12:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 12 == 0:\n        print(f'{monthnum3} contains 30 days')\n    elif monthnum3 % 12 == 1 or monthnum3 % 12 == 2 or monthnum3 % 12 == 3 or monthnum3 % 12 == 4:\n        print(f'{monthnum3} does not contain 30 days')\n    elif monthnum3 % 12 == 5 or monthnum3 % 12 == 6 or monthnum3 % 12 == 7 or monthnum3 % 12 == 8:\n        print(f'{monthnum3} contains 30 days')\n    elif monthnum3 % 12 == 9 or monthnum3 % 12 == 10 or monthnum3 % 12 == 11 or monthnum3 % 12 == 12:\n        print(f'{monthnum3} does not contain 30 days')\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return True if monthnum3 == 30 else False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Your code here\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if(n < 2):\n        return -1\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if(arr[i] - arr[i-1] < min_diff):\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float(\"inf\")\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, arr[j]-arr[i])\n    print(\"The minimum difference between any two elements is: \",min_diff)\n    return min_diff\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    i = 0\n    j = n-1\n    diff = -1\n    while i < j:\n        temp = arr[i] + arr[j]\n        if diff == -1:\n            diff = temp\n        else:\n            diff = min(diff, temp)\n        i+=1\n        j-=1\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    sorted_arr=sorted(arr)\n    min_diff=float(\"inf\")\n    for i in range(0,len(sorted_arr)-1):\n        diff=abs(sorted_arr[i]-sorted_arr[i+1])\n        if diff<min_diff:\n            min_diff=diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # arr = [int(x) for x in input().split()]\n    # n = len(arr)\n    # min_diff = float('inf')\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = float('inf')\n    i = 0\n    j = len(arr)-1\n    while i<j:\n        diff = min(diff,arr[j]-arr[i])\n        i+=1\n        j-=1\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n <= 1:\n        return -1\n    else:\n        arr.sort()\n        return abs(arr[0] - arr[1])\n        \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n<2:\n        return -1\n    arr = sorted(arr)\n    min_diff = arr[1]-arr[0]\n    for i in range(n-1):\n        temp = arr[i+1]-arr[i]\n        if temp<min_diff:\n            min_diff = temp\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    d={}\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff not in d:\n                d[diff]=[(arr[i],arr[j])]\n            else:\n                d[diff].append((arr[i],arr[j]))\n    print(d)\n    min_diff = float('inf')\n    for key in d:\n        lst=d[key]\n        # print(lst)\n        for i in range(len(lst)-1):\n            for j in range(i+1,len(lst)):\n                if lst[i][0]+lst[j][0]==lst[i][1]+lst[j][1]:\n                    min_diff=min(min_diff,lst[i][0]+lst[j][0])\n    print(min_diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 100\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = len(str)\n    num_ctr = 0\n    for i in str:\n        if i.isdigit():\n            num_ctr += 1\n    return num, num_ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if not str:\n        return 0\n    n=0\n    for i in str:\n        if i.isdigit():\n            n+=1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str = str.replace(',','').replace('.','')\n    num = len(str)\n    return num\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    return num\n    \nprint(number_ctr(\"Mansi is a very good man\"))\nprint(number_ctr(\"Tiffany is a very good girl.\"))\nprint(number_ctr(\"99 elephants in a lot of trees\"))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isdigit():\n            n += 1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if (i == \"1\") or (i == \"2\") or (i == \"3\") or (i == \"4\") or (i == \"5\") or (i == \"6\") or (i == \"7\") or (i == \"8\") or (i == \"9\"):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(list(filter(lambda a: a.isdigit(), str)))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\nprint(number_ctr(\"Aman's Pizza\")) # should print 2\nprint(number_ctr(\"matt-kennedy-93\")) # should print 3\nprint(number_ctr(\"i love china\")) # should print 4\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isdigit():\n            n += 1\n    print(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0 \n    max_count = 0 \n    max_value = 0 \n    temp = 0\n    while (count<n): \n        if (temp%2 == 0): \n            temp += 1\n            continue\n        temp = temp * 2 + 1\n        count+=1\n    return temp\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # base case: if n is 1\n    if n == 1:\n        return 1\n    # binary search for nth polite number\n    start = 1\n    end = n\n    while start <= end:\n        mid = start + (end-start)//2\n        if mid % 2 == 0:\n            # even number\n            end = mid - 1\n        else:\n            # odd number\n            start = mid + 1\n    return mid\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return n\n    p = 2\n    while (p * p <= n):\n        if (n % p == 0):\n            return n / p\n        p += 1\n    return -1\n    \n'''"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_helper(n,m,c):\n        if(n%m==0):\n            return c*m\n        elif(n%2==0):\n            return is_polite_helper(n+1,m,c+1)\n        else:\n            return is_polite_helper(n+1,m,c)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0: \n        return False\n    elif n == 1: \n        return True\n    else: \n        return (is_polite(n - 1) and (n % 2!= 0)) or (not is_polite(n - 1) and (n % 2 == 0))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: \n        return 1 \n    else: \n        return 2*n-1\n    \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n == 0:\n        return 1\n    polite = []\n    while n >= 1:\n        polite.append(n)\n        n -= 2\n    return polite[0]\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return False\n    for i in range(1, n):\n        if n % i == 0:\n            if i % 3 == 0 or i % 5 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n-1) * (n-1) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return False\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        return (polite_number(n-1)+polite_number(n-2))\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = iter(l1)\n    x = next(l1)\n    r = []\n    for y in l1:\n        r.append([x,y])\n        x = y\n    return r\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i == 0:\n            l2.append(l1[i])\n            l2.append(l1[i+1])\n        if i == (len(l1)-1):\n            l3.append(l1[i])\n            l3.append(l1[i-1])\n        if i > 0 and i < (len(l1)-1):\n            l2.append(l1[i])\n            l3.append(l1[i])\n    l2.extend(l3)\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    for i in range(0, n):\n        if i == 0 or l1[i]!= l1[i-1]:\n            l2.append([l1[i], i+1])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1: return []\n    output = []\n    for i in range(0,len(l1)):\n        if i!= len(l1)-1:\n            output.append((l1[i],l1[i+1]))\n    return output\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i],l1[i+1]))\n    return l2\n    \ndef swap(l1,idx1,idx2):\n    '''\n    Write a function to swap the elements at the given indices in a given list.\n    '''\n    l2 = l1[idx1]\n    l1[idx1] = l1[idx2]\n    l1[idx2] = l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    for i in range(len(l1)-1):\n        print(l1[i], l1[i+1])\n    \ndef maximum(l1, l2):\n    '''\n    Write a function that finds the maximum and second maximum items in a list.\n    '''\n    max_num = l1[0]\n    second_max = l1[0]\n    for i in range(len(l1)):\n        if l1[i]>max_num:\n            second_max = max_num\n            max_num = l1[i]\n        elif l1[i]>second_max and l1[i]!=max_num:\n            second_max = l1[i]\n    print(max_num, second_max)\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    if len(l1) < 2:\n        return l2\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = iter(l1)\n    pairs = []\n    while True:\n        try:\n            pairs.append(next(l1))\n            next(l1)\n        except StopIteration:\n            break\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    i = 0\n    while i < len(l1)-1:\n        pairs.append([l1[i],l1[i+1]])\n        i += 1\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            l2.append([l1[i], l1[j]])\n    return l2\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len(arr) - len([item for item in arr if item <= sum / 2])\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] + arr[j] == sum and i!= j:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    l = len(arr)\n    for i in range(l-1):\n        for j in range(i+1, l):\n            if (arr[i] + arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr = sorted(arr)\n    n = len(arr)\n    i = 0\n    j = n - 1\n    count = 0\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    c = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i]+arr[j] == sum):\n                c = c + 1\n                break\n    return c\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = list(set(li1) - set(li2))\n    li4 = list(set(li2) - set(li1))\n    li5 = li3 + li4\n    return li5\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = li1 - li2\n    return diff\n    #return li1 - li2\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for item in li1:\n        if item not in li2:\n            li3.append(item)\n    for item in li2:\n        if item not in li1:\n            li3.append(item)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for num in li1:\n        if num not in li2:\n            result.append(num)\n    for num in li2:\n        if num not in li1:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1_new=[]\n    for i in li1:\n        if i not in li2:\n            l1_new.append(i)\n    return l1_new\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    li4=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    for i in li2:\n        if i not in li1:\n            li4.append(i)\n    return li3,li4\nli1=[1,2,3,4,5,6]\nli2=[6,7,8,9]\nprint(Diff(li1,li2))\nprint(\"-----------------------\")\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #list_1 = li1\n    #list_2 = li2\n    if len(li1) > len(li2):\n        diff = li1[len(li1)-len(li2):]\n    elif len(li1) < len(li2):\n        diff = li2[len(li2)-len(li1):]\n    else:\n        diff = list(set(li1) - set(li2))\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    lst1 = list(li1)\n    lst2 = list(li2)\n    dif = list(set(lst1).difference(set(lst2)))\n    return dif\nli1 = [10,20,30,40,50]\nli2 = [30,40,50,60]\nprint(Diff(li1,li2))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # code here\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i%2!= 0 :\n            sum += i**2\n    return sum\n    \n    \ndef sum_of_prime_numbers(n) :\n    '''\n    Write a python function to sum of all prime numbers from 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if isprime(i) :\n            sum += i\n    return sum\n    \n    \ndef isprime(n) :\n    '''\n    Write a python function to determine whether the number is prime or not.\n    '''\n    if n == 1 :\n        return False\n    if n == 2 :\n        return True\n    for i in range(2, n) :\n        if n % i == 0 :\n            return False\n    return True\n    \n    \ndef largest_odd_number_in_list(n) :\n    '''\n    Write a python function to find the largest odd number in the list.\n    '''\n    max = -9999\n    for i in n :\n        if i%2!= 0 :\n            if max < i :\n                max = i\n    return max\n    \n    \ndef largest_odd_number_in_array(n) :\n    '''\n    Write a python function to find the largest odd number in the list.\n    '''\n    max = -9999\n    for i in n :\n        if i%2!= 0 :\n            if max < i :\n                max = i\n    return max\n    \n    \ndef third_number_greater_than_second_and_third(n) :\n    '''\n    Write a python function to find the third number which is greater than second and third.\n    '''\n    second = -9999\n    third = -9999\n    for i in n :\n        if i<second :\n            second = i\n        elif i<third :\n            third = i\n    return third\n    \n    \ndef third_number_greater_than_second_and_third_using_ternary_operator(n) :\n    '''\n    Write a python function to find the third number which is greater than second and third.\n    '''\n    second = -9999\n    third = -9999\n    for i in n :\n        if i<second :\n            second = i\n        elif i<third :\n            third = i\n    return third if second<third else third-second\n    \n    \ndef delete_duplicates(n) :\n    '''\n    Write a python function to delete the duplicate numbers in the list.\n    '''\n    temp = 0\n    for i in range(1,len(n)):\n        if n[i]!= n[temp]:\n            temp += 1\n            n[temp] = n[i]\n    return n[:temp+1]\n    \n    \ndef find_lcm(num1, num2) :\n    '''\n    Write a python function to find the least common multiple(LCM) of two numbers.\n    '''\n    import math\n    return (num1*num2)//math.gcd(num1,num2)\n    \n    \ndef find_lcm_without_using_math_module(num1, num2) :\n    '''\n    Write a python function to find the least common multiple(LCM) of two numbers.\n    '''\n    num = max(num1,num2)\n    while num!= 0 :\n        if num%num1 == 0 and num%num2 == 0 :\n            return num\n        num -= 1\n    \n    \ndef list_intersection(n1, n2) :\n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    return list(set(n1) & set(n2))\n    \n    \ndef list_intersection_without_using_set_operator(n1, n2) :\n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    if len(n1) <= len(n2) :\n        min_len = len(n1)\n    else :\n        min_len = len(n2)\n    for i in range(min_len):\n        if n1[i] not in n2 :\n            return n1[i]\n        \n    \ndef longest_common_subsequence(s1, s2) :\n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    len_str1 = len(s1)\n    len_str2 = len(s2)\n    matrix = [[0 for j in range(len_str2+1)] for i in range(len_str1+1)]\n    for i in range(1, len_str1+1) :\n        for j in range(1, len_str2+1) :\n            if s1[i-1] == s2[j-1] :\n                matrix[i][j] = 1 + matrix[i-1][j-1]\n            else :\n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1])\n    return matrix[-1][-1]\n    \n    \ndef longest_common_subsequence_without_using_matrix_operator(s1, s2) :\n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    len_str1 = len(s1)\n    len_str2 = len(s2)\n    if len_str1 < len_str2 :\n        temp = s1\n        s1 = s2\n        s2 = temp\n    max_len = 0\n    for i in range(len_str1) :\n        for j in range(i, len_str2) :\n            if s1[i] == s2[j] :\n                if max_len < j - i + 1 :\n                    max_len = j - i + 1\n    return max_len\n    \n    \ndef number_of_vowels(s) :\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    count = 0\n    for i in s :\n        if i in vowels :\n            count += 1\n    return count\n    \n    \ndef number_of_vowels_without_using_set_operator(s) :\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    count = 0\n    for i in s :\n        if i in vowels :\n            count += 1\n    return count\n    \n    \ndef number_of_vowels_using_ternary_operator(s) :\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    count = 0\n    for i in s :\n        if i in vowels :\n            count += 1\n    return count if count % 2 == 0 else count-1\n    \n    \ndef move_zeroes(l) :\n    '''\n    Write a python function to move all zero elements to the end of the list.\n    '''\n    count = 0\n    for i in range(len(l)) :\n        if l[i]!= 0 :\n            l[count] = l[i]\n            count += 1\n    for i in range(count,len(l)) :\n        l[i] = 0\n    return l\n    \n    \ndef move_zeroes_using_ternary_operator(l) :\n    '''\n    Write a python function to move all zero elements to the end of the list.\n    '''\n    count = 0\n    for i in range(len(l)) :\n        if l[i]!= 0 :\n            l[count] = l[i]\n            count += 1\n    for i in range(count,len(l)) :\n        l[i] = 0\n    return l\n    \n    \ndef rotate_string_using_python_operator(s, n) :\n    '''\n    Write a python function to rotate a string by a given number of characters.\n    '''\n    return s[n:] + s[:n]\n    "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd = 0\n    sum_odd = 0\n    for i in range(1,n+1) : \n        if i%2!= 0 : \n            odd = i\n            sum_odd += odd\n    return sum_odd\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_sum = 0\n    for i in range(n) : \n        if(i%2!= 0):\n            odd_num_sum = odd_num_sum + i**2\n    return odd_num_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for num in range(1,n+1) : \n        if num%2!= 0 : \n            total += num**4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while count < n :\n        if (count%2!= 0) :\n            sum = sum + (count**4)\n        count += 1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd = []\n    result = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            odd.append(i)\n    for j in range(0,len(odd)):\n        result += (odd[j]**4)\n    return result\nprint('Sum of fourth power of first',n,'odd numbers : ')\nprint(odd_num_sum(n))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    import math\n    odd_nums = list(range(1,n+1,2))\n    sum = 0\n    for i in range(len(odd_nums)) :\n        sum += (odd_nums[i])**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 :\n        return \"Please enter a positive integer\"\n    odd_num_list = []\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            odd_num_list.append(i**3)\n    return sum(odd_num_list)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(n) : \n        if i%2!= 0 : \n            sum += i**4 \n    return sum \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Your code here\n    stack = []\n    for char in exp:\n        if char == \"(\" or char == \"{\":\n            stack.append(char)\n        elif char == \")\":\n            if stack:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        elif char == \"}\":\n            if stack:\n                if stack[-1] == \"{\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # build a stack\n    stack = []\n    # mapping\n    symbol = {'(':')','[':']','{':'}'}\n    for i in exp:\n        if i in symbol.keys():\n            stack.append(symbol[i])\n        elif len(stack)==0:\n            stack.append(i)\n        elif i == symbol[stack[-1]]:\n            stack.pop()\n        else:\n            return False\n    return len(stack)==0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    brackets = {'{': '}', '(': ')', '[': ']'}\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(' or exp[i] == '[' or exp[i] == '{':\n            stack.append(exp[i])\n        if exp[i] == ')' or exp[i] == ']' or exp[i] == '}':\n            if len(stack) == 0:\n                return False\n            last_op = stack.pop()\n            if (exp[i] == ')' and last_op!= '(') or (exp[i] == ']' and last_op!= '[') or (exp[i] == '}' and last_op!= '{'):\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    '''\n    <=> If count = 0, it means we have balanced parentheses.\n    <=> If count = 1, we have an opening parenthesis.\n    <=> If count = -1, we have a closing parenthesis.\n    <=> If count = -2, we have an open paren + closing paren.\n    '''\n    if not exp:\n        return True\n    count = 0\n    for i in exp:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    dict = {\n    \"(\":0,\n    \"{\":0,\n    \"[\":0,\n    \"}\":0,\n    \"]\":0,\n    \"+\":0,\n    \"-\":0,\n    \"*\":0,\n    \"/\":0,\n    \"^\":0\n    }\n    op = [\"+\", \"-\", \"*\", \"/\", \"^\"]\n    \n    for e in exp:\n        if e in op:\n            dict[e] += 1\n            stack.append(e)\n        elif e in op and dict[e] > 0:\n            dict[e] -= 1\n            stack.append(e)\n        elif e in op and dict[e] == 0:\n            return False\n        elif e in op and dict[e] < 0:\n            while dict[e] < 0 and stack:\n                s = stack.pop()\n                if s == \"(\":\n                    return False\n                dict[s] -= 1\n    return True\n        \ndef convert_to_postfix(exp):\n    '''\n    Write a function to convert a given infix expression to postfix.\n    https://www.geeksforgeeks.org/expression-conversion/\n    '''\n    stack = []\n    precedence = {\"+\":1, \"-\":1, \"*\":2, \"/\":2, \"^\":3}\n    exp = exp + \" \"\n    output = []\n    for i in range(len(exp)):\n        if exp[i] not in [\"+\", \"-\", \"*\", \"/\", \"^\"]:\n            output.append(exp[i])\n        else:\n            while stack and precedence[stack[-1]] >= precedence[exp[i]]:\n                output.append(stack.pop())\n            stack.append(exp[i])\n    while stack:\n        output.append(stack.pop())\n    return \"\".join(output)\n    \ndef convert_to_infix(exp):\n    '''\n    Write a function to convert an infix expression to postfix.\n    https://www.geeksforgeeks.org/expression-conversion/\n    '''\n    stack = []\n    exp = exp + \" \"\n    output = []\n    for i in range(len(exp)):\n        if exp[i] not in [\"+\", \"-\", \"*\", \"/\", \"^\"]:\n            output.append(exp[i])\n        else:\n            while stack and precedence[exp[i]] >= precedence[stack[-1]]:\n                output.append(stack.pop())\n            stack.append(exp[i])\n    while stack:\n        output.append(stack.pop())\n    return \"\".join(output)\n    \ndef eval_infix(exp):\n    '''\n    Write a function to evaluate the given infix expression.\n    https://www.geeksforgeeks.org/expression-evaluation-in-infix/\n    '''\n    stack = []\n    exp = exp + \" \"\n    for i in range(len(exp)):\n        if exp[i] in [\"+\", \"-\", \"*\", \"/\", \"^\"]:\n            a = int(stack.pop())\n            b = int(stack.pop())\n            if exp[i] == \"+\":\n                stack.append(b + a)\n            elif exp[i] == \"-\":\n                stack.append(b - a)\n            elif exp[i] == \"*\":\n                stack.append(b * a)\n            elif exp[i] == \"/\":\n                stack.append(b / a)\n            elif exp[i] == \"^\":\n                stack.append(b ** a)\n        else:\n            stack.append(exp[i])\n    return stack.pop()\n    \ndef get_top(exp):\n    '''\n    Write a function to get the top element of the stack.\n    https://www.geeksforgeeks.org/get-the-top-element-of-the-stack/\n    '''\n    return exp[0]\n    \ndef get_size(exp):\n    '''\n    Write a function to get the size of the stack.\n    https://www.geeksforgeeks.org/size-of-the-stack/\n    '''\n    return len(exp)\n    \ndef get_min(exp):\n    '''\n    Write a function to get the minimum element in the stack.\n    https://www.geeksforgeeks.org/min-in-a-stack/\n    '''\n    if len(exp) == 0:\n        return -1\n    return min(exp)\n    \ndef get_max(exp):\n    '''\n    Write a function to get the maximum element in the stack.\n    https://www.geeksforgeeks.org/max-in-a-stack/\n    '''\n    if len(exp) == 0:\n        return -1\n    return max(exp)\n    \ndef sort_stack(exp):\n    '''\n    Write a function to sort the stack.\n    https://www.geeksforgeeks.org/sort-stack-using-quick-sort/\n    '''\n    if len(exp) <= 1:\n        return exp\n    pivot = exp.pop()\n    lt = []\n    eq = []\n    gt = []\n    for e in exp:\n        if e < pivot:\n            lt.append(e)\n        elif e == pivot:\n            eq.append(e)\n        else:\n            gt.append(e)\n    return sort_stack(lt) + eq + sort_stack(gt)\n    \ndef get_min_index(exp):\n    '''\n    Write a function to get the index of the minimum element in the stack.\n    https://www.geeksforgeeks.org/get-the-index-of-the-minimum-element-in-the-stack/\n    '''\n    if len(exp) == 0:\n        return -1\n    return exp.index(min(exp))\n    \ndef get_max_index(exp):\n    '''\n    Write a function to get the index of the maximum element in the stack.\n    https://www.geeksforgeeks.org/get-the-index-of-the-maximum-element-in-the-stack/\n    '''\n    if len(exp) == 0:\n        return -1\n    return exp.index(max(exp))\n    \ndef get_even_index(exp):\n    '''\n    Write a function to get the even element of the stack.\n    https://www.geeksforgeeks.org/even-element-of-a-stack/\n    '''\n    if len(exp) == 0:\n        return -1\n    index = 0\n    for i in range(len(exp)):\n        if exp[i] % 2 == 0:\n            index = i\n            break\n    return exp[index]\n    \ndef get_odd_index(exp):\n    '''\n    Write a function to get the odd element of the stack.\n    https://www.geeksforgeeks.org/odd-element-of-a-stack/\n    '''\n    if len(exp) == 0:\n        return -1\n    index = 0\n    for i in range(len(exp)):\n        if exp[i] % 2 == 1:\n            index = i\n            break\n    return exp[index]\n    \ndef is_palindrome(exp):\n    '''\n    Write a function to check if the given expression is a palindrome.\n    https://www.geeksforgeeks.org/check-if-an-expression-is-a-palindrome/\n    '''\n    stack = []\n    exp = exp + \" \"\n    for i in range(len(exp)):\n        if exp[i] not in [\"+\", \"-\", \"*\", \"/\", \"^\"]:\n            stack.append(exp[i])\n        else:\n            while stack and stack[-1] == exp[i]:\n                stack.pop()\n    return len(stack) == 0\n    \ndef get_indices_of_a_given_element_in_sorted_array(exp, target):\n    '''\n    Write a function to get the indices of the given element in sorted array.\n    https://www.geeksforgeeks.org/find-the-indices-of-a-given-element-in-a-sorted-array/\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    mapping = {\"(\":\")\", \"[\":\"]\", \"{\":\"}\"}\n    flag = 0\n    for ch in exp:\n        if ch in mapping.keys():\n            stack.append(ch)\n        elif ch in mapping.values():\n            if stack:\n                top_element = stack.pop()\n                if top_element == mapping[ch]:\n                    continue\n                else:\n                    flag = 1\n                    break\n            else:\n                flag = 1\n                break\n        else:\n            continue\n    if flag == 1:\n        print(\"The given expression is not balanced\")\n    else:\n        print(\"The given expression is balanced\")\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    left_par = '{[('\n    right_par = '}])'\n    for c in exp:\n        if c in left_par:\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if c == ')' and stack.pop()!= '(':\n                return False\n            if c == ']' and stack.pop()!= '[':\n                return False\n            if c == '}' and stack.pop()!= '{':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    left_brackets = ['(', '{', '[']\n    right_brackets = [')', '}', ']']\n    mapping = {')': '(', '}': '{', ']': '['}\n    for i in exp:\n        if i in left_brackets:\n            stack.append(i)\n        elif i in right_brackets:\n            if len(stack) == 0:\n                return False\n            if mapping[i]!= stack[-1]:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str_list = test_str.split()\n    remove_words = []\n    for word in test_str_list:\n        if len(word) == K:\n            remove_words.append(word)\n    for word in remove_words:\n        test_str_list.remove(word)\n    return \" \".join(test_str_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = test_str.split(\" \")\n    new_list = []\n    for i in new_str:\n        if len(i) == K:\n            new_list.append(i)\n    return \" \".join(new_list)\n    \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    list_of_words = []\n    for word in words:\n        if len(word) == K:\n            list_of_words.append(word)\n    return \" \".join(list_of_words)\n    \n    \ndef word_length_filter(test_str, K):\n    '''\n    Write a function to filter a list of strings according to the length of words in the string.\n    '''\n    words = test_str.split()\n    list_of_words = []\n    for word in words:\n        if len(word) == K:\n            list_of_words.append(word)\n    return list_of_words\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    list = test_str.split()\n    list_length = len(list)\n    list_length = list_length - K\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    test_list = test_str.split()\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            res.append(test_list[i])\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    string = test_str\n    k = K\n    new_string = \"\"\n    for i in range(len(string)):\n        if len(string[i:]) == k:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    output = []\n    for word in words:\n        if len(word) == K:\n            continue\n        else:\n            output.append(word)\n    return''.join(output)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            words.remove(words[i])\n        else:\n            i += 1\n    return''.join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(K):\n        test_str = test_str.replace(' ','')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    for char in test_str:\n        if not char.isalpha():\n            new_str += char\n        if not len(new_str) == 0:\n            if not len(new_str) == len(test_str):\n                new_str +=''\n    new_str = new_str.split()\n    for i in new_str:\n        if len(i) == K:\n            new_str.remove(i)\n    return new_str\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match_result=[]\n    index_match=[]\n    if re.search(pattern,text):\n        match=re.search(pattern,text)\n        index_match=match.span()\n        match_result.append(text[index_match[0]:index_match[1]])\n    return match_result,index_match\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.replace('.','\\.')\n    pattern=pattern.replace('*','\\*')\n    x=re.finditer(pattern,text)\n    if x:\n        pos=[]\n        for i in x:\n            pos.append(i.span())\n        return pos\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list=re.findall(pattern,text)\n    for i in range(len(pattern_list)):\n        text_pos=text.find(pattern_list[i])\n        print(pattern_list[i],text_pos)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    patt = re.compile(pattern)\n    m = patt.search(text)\n    if m:\n        result = []\n        result.append(m.group())\n        result.append(m.start())\n        result.append(m.end())\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    for i in range(len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    def sub_string(text,pattern):\n        return re.findall(pattern,text)\n    result = list(filter(lambda x:len(x)>=3 and len(x)<=len(text),map(sub_string,text,repeat(pattern))))\n    print(''.join(result))\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #print(f\"--occurance substring--\\n\")\n    #print(pattern,text)\n    patt_start = 0\n    patt_end = len(pattern)\n    #print(patt_start,patt_end)\n    result = re.finditer(pattern,text)\n    #print(\"---\")\n    #print(result)\n    #print(\"---\")\n    for m in result:\n        #print(m)\n        #print(m.span())\n        #print(f\"{m.start()}:{m.end()}\")\n        return m.start(),m.end()\n        #print(\"--\")\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text)==0:\n        return None\n    \n    if len(pattern)==0:\n        return None\n    \n    if len(pattern)>=len(text):\n        return None\n    \n    if re.search(pattern,text):\n        return re.search(pattern,text).span()\n    else:\n        return None\n    \n    \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(r'\\b%s\\b' % pattern)\n    matches = regex.finditer(text)\n    for i,match in enumerate(matches):\n        print(\"Match: %s --> %s\" % (match.group(),match.start()))\n    return matches\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.span()\n    else:\n        return None\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #Solution 1\n    # x = 0\n    # for i in range(0, len(nums)):\n    #     if i%2 == 1:\n    #         if nums[i]%2!= 0:\n    #             x = x+1\n    # if x == 0:\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    flag = True\n    for i in range(0, len(nums)):\n        if (i+1)%2 == 0:\n            if nums[i] % 2 == 0:\n                flag = False\n                break\n    return flag\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_pos_lst = []\n    for i in range(len(nums)):\n        if i%2!= 0:\n            odd_pos_lst.append(nums[i])\n    return odd_pos_lst\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\nodd_position([1, 2, 3, 4, 5, 6, 7]) # False\nodd_position([1, 3, 5, 7, 9]) # True\nodd_position([4, 6, 2, 8, 10]) # True\nodd_position([4, 6, 8, 10]) # False\nodd_position([4, 6, 8]) # False\nodd_position([4, 6]) # False\nodd_position([4, 6, 8, 10, 12, 14]) # False\nodd_position([1, 3, 5, 7, 9, 11]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79]) # True\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81]) # False\nodd_position([1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd_index.append(i)\n    print(odd_index)\n    return all(x % 2 == 1 for x in nums[odd_index])\n    \n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # print(nums)\n    for i in range(0,len(nums)):\n        if nums[i] % 2 == 0:\n            # print(i,nums[i])\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(n % 2!= 0 for n in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0:\n            if nums[i]%2!=0:\n                return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in VOWELS:\n            if test_str[i+1].lower() in VOWELS:\n                result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    new_str = test_str.lower()\n    vowels_count = 0\n    for i in range(len(new_str)):\n        if new_str[i] in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    length = len(test_str)\n    for i in range(length - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # vowel_count = 0\n    # # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    # test_str = \"this is a string\"\n    # print(test_str)\n    # for char in test_str:\n        # print(char)\n        # if char in vowels:\n            # vowel_count += 1\n    # print(vowel_count)\n    # return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for vowel in vowels:\n        count += test_str.count(vowel)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = 'aeiou'\n    test_str = test_str.lower()\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            for j in range(i):\n                if test_str[j] == test_str[i]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i] == test_str[i-1] or test_str[i] == test_str[i+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str is None or type(test_str)!= str:\n        return 0\n    vowel = set([\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowel:\n            test_str = test_str[:i] + \"*\" + test_str[i + 1:]\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    characters = list(test_str)\n    characters = characters[::-1]\n    # print(characters)\n    for i in range(len(characters)):\n        if(characters[i] in 'aeiou'):\n            count += 1\n        else:\n            continue\n    print(\"String {} contains {} vowels\".format(test_str, count))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + arr[i]\n    return s\n    \n    \ndef find_sum_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + (-1) * arr[i]\n    return s\n    \n    \ndef find_sum_with_hashtable(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + (arr[i])\n    return s\n    \n    \ndef find_sum_with_hashtable_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + (-1) * (arr[i])\n    return s\n    \n    \ndef find_sum_with_dict(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + arr[i]\n    return s\n    \n    \ndef find_sum_with_dict_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + (-1) * arr[i]\n    return s\n    \n    \ndef find_sum_with_dict_no_loop(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    d = {}\n    for i in range(0,n):\n        if arr[i] in d:\n            d[arr[i]] = d[arr[i]] + 1\n        else:\n            d[arr[i]] = 1\n    for i in range(0,n):\n        s = s + (arr[i])\n    return s\n    \n    \ndef find_sum_with_dict_no_loop_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    d = {}\n    for i in range(0,n):\n        if arr[i] in d:\n            d[arr[i]] = d[arr[i]] + 1\n        else:\n            d[arr[i]] = 1\n    for i in range(0,n):\n        s = s + (-1) * (arr[i])\n    return s\n    \n    \ndef find_sum_with_dict_no_loop_negatives(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    d = {}\n    for i in range(0,n):\n        if arr[i] in d:\n            d[arr[i]] = d[arr[i]] + 1\n        else:\n            d[arr[i]] = 1\n    for i in range(0,n):\n        s = s + (-1) * (arr[i])\n    return s\n    \n    \ndef find_sum_with_while_loop(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    i = 0\n    while i < n:\n        s = s + arr[i]\n        i = i + 1\n    return s\n    \n    \ndef find_sum_with_while_loop_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    i = 0\n    while i < n:\n        s = s + (-1) * arr[i]\n        i = i + 1\n    return s\n    \n    \ndef find_sum_with_while_loop_negatives(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    i = 0\n    while i < n:\n        s = s + (-1) * (arr[i])\n        i = i + 1\n    return s\n    \n    \ndef find_sum_with_while_loop_negatives_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    i = 0\n    while i < n:\n        s = s + (-1) * (arr[i])\n        i = i + 1\n    return s\n    \n    \ndef find_sum_with_while_loop_negatives_negative_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    i = 0\n    while i < n:\n        s = s + (-1) * (arr[i])\n        i = i + 1\n    return s\n    \n    \ndef find_sum_with_for_loop(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + arr[i]\n    return s\n    \n    \ndef find_sum_with_for_loop_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + (-1) * arr[i]\n    return s\n    \n    \ndef find_sum_with_for_loop_negatives(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + (-1) * (arr[i])\n    return s\n    \n    \ndef find_sum_with_for_loop_negatives_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + (-1) * (arr[i])\n    return s\n    \n    \ndef find_sum_with_for_loop_negatives_negative_negative(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0,n):\n        s = s + (-1) * (arr[i])\n    return s\n    \n    \ndef find_sum_with_recursion(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + find_sum_with_recursion(arr[1:])\n    \n    \ndef find"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(set(arr))\n    sum = 0\n    for i in range(len(arr)-1):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum+=i\n    return sum\n    \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    counter = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                counter += arr[i]\n            else:\n                counter += arr[j]\n    return counter\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Your Code Here\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            count += arr[i]\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_ = 0\n    for i in arr:\n        sum_ += i\n    return sum_\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Your code here\n    result = 0\n    seen_values = set()\n    for val in arr:\n        if val not in seen_values:\n            seen_values.add(val)\n            result += val\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    print(list1)\n    sublist = []\n    sublist.append(list1[0])\n    count = 0\n    for i in range(1,len(list1)):\n        if list1[i]!= sublist[count]:\n            sublist.append(list1[i])\n            count = count + 1\n    return sublist\n    print(sublist)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # if list is empty or only one element\n    if not list1 or len(list1) == 1:\n        return list1\n    \n    list1.sort()\n    \n    # check if consecutive duplicates exist\n    d = {}\n    for i in range(1, len(list1)):\n        if list1[i - 1] == list1[i]:\n            d[list1[i - 1]] = d.get(list1[i - 1], 0) + 1\n    \n    # prepare output list\n    output_list = []\n    for key, val in d.items():\n        if val == 1:\n            output_list.append(key)\n        else:\n            output_list.append([key] * val)\n    \n    return output_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    ans = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if key == 0:\n            ans.append([])\n        else:\n            ans[-1].append(group[0])\n    return ans\nprint(pack_consecutive_duplicates(list1 = [0,1,2,3,1,2,3,4,1,2,3,4]))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    ans = []\n    for key,group in groupby(list1):\n        group = list(group)\n        if(len(group)>1):\n            ans.append(group)\n    return ans\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    count = []\n    n = len(list1)\n    for i in range(n):\n        if list1[i] == list1[i-1]:\n            count.append(i)\n        else:\n            list2.append(list1[i-1])\n            list2.append(count)\n            count = []\n            count.append(i)\n    list2.append(list1[-1])\n    list2.append(count)\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) <= 2:\n        return list1\n    else:\n        grouped_list = groupby(list1)\n        new_list = []\n        for k, g in grouped_list:\n            new_list.append(list(g))\n        return new_list\n        "
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    duplicates = set(list1)\n    result = []\n    for key,group in groupby(list1):\n        for x in group:\n            result.append([key]*list1.count(x))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    a = list1\n    b = list(groupby(a))\n    #print(b)\n    new = []\n    for i, j in b:\n        #print(i, j)\n        new.append(list(j))\n    #print(new)\n    new1 = []\n    for i in new:\n        if len(i)>1:\n            new1.append(i)\n    return new1\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    n = len(list1)\n    sorted_list = []\n    for k, g in groupby(list1):\n        sorted_list.append(list(g))\n    if len(sorted_list) == n:\n        return sorted_list\n    else:\n        return False\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # initializing dictionary\n    num_lists = {}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dictionary = {}\n    for i in list1:\n        if i not in list_dictionary.keys():\n            list_dictionary[i] = 1\n        else:\n            list_dictionary[i] += 1\n    return list_dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # dictionary = {}\n    #\n    # for i in list1:\n    #     if i not in dictionary.keys():\n    #         dictionary[i] = 1\n    #     else:\n    #         dictionary[i] += 1\n    #\n    # return dictionary\n    # print(dictionary)\n    # print('\\n')\n    #\n    # list_of_lists = []\n    #\n    # for i in range(len(list1)):\n    #     list_of_lists.append([list1[i]])\n    #\n    #\n    # #print(list_of_lists)\n    #\n    #\n    # # for i in range(len(list_of_lists)):\n    # #     for j in range(len(list_of_lists[i])):\n    # #         list_of_lists[i][j] = (list_of_lists[i][j])\n    #\n    #\n    #\n    #\n    # # print(list_of_lists)\n    #\n    #\n    # #dictionary = {}\n    # for i in range(len(list_of_lists)):\n    #     #print(i)\n    #     #print(list_of_lists[i])\n    #     #print(list_of_lists[i][0])\n    #     #print(list_of_lists[i][0][0])\n    #     #print(list_of_lists[i][0][0][0])\n    #     dictionary = {}\n    #     for j in range(len(list_of_lists[i])):\n    #         if list_of_lists[i][j] not in dictionary.keys():\n    #             dictionary[list_of_lists[i][j]] = 1\n    #         else:\n    #             dictionary[list_of_lists[i][j]] += 1\n    #\n    #\n    #\n    #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n    # #\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    # Add your code here\n    unique = {}\n    # Convert the list to a tuple\n    list1 = tuple(list1)\n    # Iterate through the list\n    for i in range(len(list1)):\n        # Convert the value to a tuple\n        unique[list1[i]] = list1.count(list1[i])\n    return unique\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    #loop through the list1 list, and add a key with value as a tuple\n    unique_tuple = {}\n    for i in list1:\n        if type(i) == list:\n            tuple_i = tuple(i)\n            if tuple_i in unique_tuple.keys():\n                unique_tuple[tuple_i] += 1\n            else:\n                unique_tuple[tuple_i] = 1\n    \n    return unique_tuple\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    my_dict = {}\n    # your code here\n    for i in list1:\n        my_dict[i] = list1.count(i)\n    return my_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    #count\n    dict_count = {}\n    #count_lists\n    count_lists = 0\n    \n    for sublist in list1:\n        if sublist not in dict_count:\n            dict_count[sublist] = 1\n            count_lists += 1\n        else:\n            dict_count[sublist] += 1\n            count_lists += 1\n    \n    return count_lists\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for element in list1:\n        if element not in unique_list:\n            unique_list.append(element)\n    unique_list = list(map(tuple, unique_list))\n    unique_dict = {}\n    for element in unique_list:\n        if element in unique_dict.keys():\n            unique_dict[element] += 1\n        else:\n            unique_dict[element] = 1\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import collections\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {i:len(list(list1.count(i)))) for i in set(list1)}\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    if len(test_list) == 0:\n        return all_combinations\n    \n    if len(test_list) == 1:\n        for i in range(test_list[0]):\n            all_combinations.append([i])\n        return all_combinations\n    \n    # Initialize a list to store combination\n    # results\n    res = []\n    \n    # Sort the input list so that all permutations can be generated\n    test_list = sorted(test_list)\n    \n    # Pick all combinations\n    for i in range(test_list[0]):\n        res.append([i])\n    \n    for i in range(test_list[0]):\n        for j in range(test_list[0], len(test_list)):\n            if (sum(res[i]) + sum(test_list[j])) not in res:\n                res.append(res[i] + test_list[j])\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list1 = []\n    list2 = []\n    l = len(test_list)\n    for i in range(l):\n        for j in range(i+1, l):\n            a = test_list[i]\n            b = test_list[j]\n            s = a+b\n            list1.append(s)\n    for i in range(l):\n        for j in range(i+1, l):\n            a = test_list[i]\n            b = test_list[j]\n            s = a-b\n            list2.append(s)\n    for i in range(l):\n        for j in range(i+1, l):\n            a = test_list[i]\n            b = test_list[j]\n            s = a*b\n            list2.append(s)\n    for i in range(l):\n        for j in range(i+1, l):\n            a = test_list[i]\n            b = test_list[j]\n            s = a//b\n            list2.append(s)\n    #print(list1)\n    #print(list2)\n    all_combinations = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            x = (list1[i], list2[j])\n            all_combinations.append(x)\n    #print(all_combinations)\n    return all_combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,2))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            all_combinations.append(tuple(test_list[i] + test_list[j]))\n    \n    print(all_combinations)\n    print(len(all_combinations))\n    return all_combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    solution = list(combinations(test_list, 2))\n    for i in range(len(solution)):\n        solution[i] = solution[i][0] + solution[i][1]\n    return solution\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    for i in range(1,len(test_list)+1):\n        comb = combinations(test_list,i)\n        for j in comb:\n            print(j)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # test_list = (0, 2, 4, 6, 8)\n    \n    # Using itertools.combinations\n    # Combinations - Python Code\n    # combinations - Python code to find the combinations of given numbers from the set \n    #   from itertools import combinations \n    #   >>> from itertools import combinations \n    #   >>> test_list = (0, 2, 4, 6, 8) \n    #   >>> for i in combinations(test_list, 2): \n    #  ...     print(i) \n    #   (0, 2) \n    #   (2, 4) \n    #   (4, 6) \n    #   (6, 8) \n    #   (0, 4) \n    #   (0, 6) \n    #   (0, 8) \n    #   (2, 6) \n    #   (4, 8) \n    \n    # Using itertools.combinations \n    # Combinations - Python code to find the combinations of given numbers from the set \n    #   from itertools import combinations \n    #   >>> from itertools import combinations \n    #   >>> test_list = (0, 2, 4, 6, 8) \n    #   >>> for i in combinations(test_list, 3): \n    #  ...     print(i) \n    #   (0, 2, 4) \n    #   (0, 2, 6) \n    #   (0, 2, 8) \n    #   (0, 4, 6) \n    #   (0, 4, 8) \n    #   (0, 6, 8) \n    #   (2, 4, 6) \n    #   (2, 4, 8) \n    #   (2, 6, 8) \n    #   (4, 6, 8) \n    \n    # Using itertools.combinations_with_replacement\n    # Combinations - Python code to find the combinations of given numbers from the set \n    #   from itertools import combinations_with_replacement \n    #   >>> from itertools import combinations_with_replacement \n    #   >>> test_list = (0, 2, 4, 6, 8) \n    #   >>> for i in combinations_with_replacement(test_list, 3): \n    #  ...     print(i) \n    #   (0, 0, 0) \n    #   (0, 0, 2) \n    #   (0, 0, 4) \n    #   (0, 2, 0) \n    #   (0, 2, 2) \n    #   (0, 2, 4) \n    #   (0, 4, 0) \n    #   (0, 4, 2) \n    #   (0, 4, 4) \n    #   (0, 6, 0) \n    #   (0, 6, 2) \n    #   (0, 6, 4) \n    #   (0, 8, 0) \n    #   (0, 8, 2) \n    #   (0, 8, 4) \n    #   (2, 0, 0) \n    #   (2, 0, 2) \n    #   (2, 0, 4) \n    #   (2, 2, 0) \n    #   (2, 2, 2) \n    #   (2, 2, 4) \n    #   (2, 4, 0) \n    #   (2, 4, 2) \n    #   (2, 4, 4) \n    #   (2, 6, 0) \n    #   (2, 6, 2) \n    #   (2, 6, 4) \n    #   (2, 8, 0) \n    #   (2, 8, 2) \n    #   (2, 8, 4) \n    #   (4, 0, 0) \n    #   (4, 0, 2) \n    #   (4, 0, 4) \n    #   (4, 2, 0) \n    #   (4, 2, 2) \n    #   (4, 2, 4) \n    #   (4, 4, 0) \n    #   (4, 4, 2) \n    #   (4, 4, 4) \n    #   (4, 6, 0) \n    #   (4, 6, 2) \n    #   (4, 6, 4) \n    #   (4, 8, 0) \n    #   (4, 8, 2) \n    #   (4, 8, 4) \n    #   (6, 0, 0) \n    #   (6, 0, 2) \n    #   (6, 0, 4) \n    #   (6, 2, 0) \n    #   (6, 2, 2) \n    #   (6, 2, 4) \n    #   (6, 4, 0) \n    #   (6, 4, 2) \n    #   (6, 4, 4) \n    #   (6, 6, 0) \n    #   (6, 6, 2) \n    #   (6, 6, 4) \n    #   (6, 8, 0) \n    #   (6, 8, 2) \n    #   (6, 8, 4) \n    #   (8, 0, 0) \n    #   (8, 0, 2) \n    #   (8, 0, 4) \n    #   (8, 2, 0) \n    #   (8, 2, 2) \n    #   (8, 2, 4) \n    #   (8, 4, 0) \n    #   (8, 4, 2) \n    #   (8, 4, 4) \n    \n    # Using itertools.combinations_with_replacement\n    # Combinations - Python code to find the combinations of given numbers from the set \n    #   from itertools import combinations_with_replacement \n    #   >>> from itertools import combinations_with_replacement \n    #   >>> test_list = (0, 2, 4, 6, 8) \n    #   >>> for i in combinations_with_replacement(test_list, 3): \n    #  ...     print(i) \n    #   (0, 0, 0) \n    #   (0, 0, 2) \n    #   (0, 0, 4) \n    #   (0, 2, 0) \n    #   (0, 2, 2) \n    #   (0, 2, 4) \n    #   (0, 4, 0) \n    #   (0, 4, 2) \n    #   (0, 4, 4) \n    #   (0, 6, 0) \n    #   (0, 6, 2) \n    #   (0, 6, 4) \n    #   (0, 8, 0) \n    #   (0, 8, 2) \n    #   (0, 8, 4) \n    #   (2, 0, 0) \n    #   (2, 0, 2) \n    #   (2, 0, 4) \n    #   (2, 2, 0) \n    #   (2, 2, 2) \n    #   (2, 2, 4) \n    #   (2, 4, 0) \n    #   (2, 4, 2) \n    #   (2, 4, 4) \n    #   (2, 6, 0) \n    #   (2, 6, 2) \n    #   (2, 6, 4) \n    #   (2, 8, 0) \n    #   (2, 8, 2) \n    #   (2, 8, 4) \n    #   (4, 0, 0) \n    #   (4, 0, 2) \n    #   (4, 0, 4) \n    #   (4, 2, 0) \n    #   (4, 2, 2) \n    #   (4, 2, 4) \n    #   (4, 4, 0) \n    #   (4, 4, "
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_of_sum = []\n    s = 0\n    for a in test_list:\n        s += a\n    combinations_of_sum.append(test_list)\n    for i in range(1,s+1):\n        temp = []\n        for a in combinations_of_sum:\n            for j in range(len(a)):\n                if i - a[j] in temp:\n                    temp.append(i - a[j])\n        combinations_of_sum.append(temp)\n    return combinations_of_sum\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Write your code here\n    \n    for i in range(1,len(test_list)):\n        comb = list(combinations(test_list,i))\n        print(comb)\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i],)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors += 1\n    print(divisors)\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) :\n        if (n % i == 0) :\n            count = count + 1\n    if (count % 2 == 0) :\n        print(\"True\")\n    else :\n        print(\"False\")\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return(n)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n+1) : \n        if (n%i == 0): \n            count=count+1\n    if (count%2==0):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    divisors = []\n    for i in range(1, n+1) :\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n//2 + 1): \n        if n % i == 0: \n            divisors = divisors + 1\n    if divisors % 2 == 0: \n        print(\"True\") \n    else: \n        print(\"False\") \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor = 2\n    while divisor <= math.sqrt(n) : \n        if n % divisor == 0 : \n            return False \n        divisor = divisor + 1\n    return True \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n <= 0) :\n        return 0\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if count % 2 == 0 :\n        return count\n    else :\n        return count + 1\ndef check_prime(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0:\n        return False\n    else :\n        for i in range(3,int(math.sqrt(num))+1,2):\n            if num % i == 0:\n                return False\n        return True\ndef sum_divisors(n):\n    '''\n    Write a python function to calculate sum of divisors.\n    '''\n    if (n <= 0):\n        return 0\n    sum = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum\ndef greatest_common_divisor(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return greatest_common_divisor(b, a%b)\ndef lcm(a, b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        a, b = b, a\n    if (a%b) == 0:\n        return a\n    else:\n        while a > b:\n            if (a%b) == 0:\n                return a\n            a -= 1\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = []\n    length = len(arr)\n    for i in range(1, length):\n        if i%2!= 0:\n            odd_length.append(arr[i-1:i+1])\n    sum_odd_length = 0\n    for odd_sub in odd_length:\n        sum_odd_length += sum(odd_sub)\n    return sum_odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #print(arr)\n    #total_sum = 0\n    #for i in range(len(arr)):\n    #    for j in range(i,len(arr)-1):\n    #        if(j==i):\n    #            total_sum += arr[i]\n    #        elif(j>i):\n    #            total_sum += arr[j]\n    #        else:\n    #            break\n    #    return total_sum\n    #print(odd_length_sum([1,2,3,4,5,6]))\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum+=arr[j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if arr==None or len(arr)==0:\n        return None\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j]%2 == 1:\n                count += 1\n                sum += arr[j]\n    return count, sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        odd_length_subarray_sum(arr, i, res)\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #code here\n    total = 0\n    for i in range(0, len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            total += sum(arr[i:j+1])\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Your code here\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (j - i) % 2 == 1:\n                s += arr[i:j + 1]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_subarray = 0\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            odd_length_subarray += arr[i]\n    return odd_length_subarray\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_ratio = r / 255\n    g_ratio = g / 255\n    b_ratio = b / 255\n    max_ratio = max(r_ratio, g_ratio, b_ratio)\n    min_ratio = min(r_ratio, g_ratio, b_ratio)\n    diff_ratio = max_ratio - min_ratio\n    h = 0\n    s = 0\n    v = 0\n    if r_ratio == max_ratio:\n        h = ((g_ratio - b_ratio) / diff_ratio) * 6\n    elif g_ratio == max_ratio:\n        h = ((b_ratio - r_ratio) / diff_ratio) + 2\n    else:\n        h = ((r_ratio - g_ratio) / diff_ratio) + 4\n    if h < 0:\n        h += 6\n    if h > 6:\n        h -= 6\n    if max_ratio == r_ratio:\n        s = diff_ratio / (max_ratio + 0.01)\n    elif max_ratio == g_ratio:\n        s = diff_ratio / (max_ratio + 0.01)\n    else:\n        s = diff_ratio / (max_ratio + 0.01)\n    v = max_ratio\n    return [h, s, v]\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    \n    if min_rgb == max_rgb:\n        return 0, 0, 0\n    \n    delta = max_rgb - min_rgb\n    \n    if max_rgb == r:\n        h = (g - b) / delta\n    elif max_rgb == g:\n        h = 2 + ((b - r) / delta)\n    else:\n        h = 4 + ((r - g) / delta)\n    \n    h = h / 6\n    \n    if r == max_rgb:\n        s = delta / max_rgb\n    else:\n        s = delta / (max_rgb - min_rgb)\n    \n    v = max_rgb\n    \n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_val = min(r,g,b)\n    max_val = max(r,g,b)\n    diff = max_val - min_val\n    if min_val == max_val:\n        return 0,0,0\n    if diff == 0:\n        return 0,0,0\n    s = diff/max_val\n    if r == max_val:\n        h = (g-b)/diff\n        if h < 0:\n            h = h + 6\n    elif g == max_val:\n        h = 2 + (b-r)/diff\n    else:\n        h = 4 + (r-g)/diff\n    h = h/6\n    return h,s,s\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_rgb = min(r, g, b)\n    max_rgb = max(r, g, b)\n    delta = max_rgb - min_rgb\n    if delta == 0:\n        h = 0\n    else:\n        if r == max_rgb:\n            h = ((g - b) / delta) % 6\n        elif g == max_rgb:\n            h = ((b - r) / delta) + 2\n        else:\n            h = ((r - g) / delta) + 4\n    h = h / 6\n    s = delta / max_rgb\n    v = max_rgb\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    sr = r / 255\n    sg = g / 255\n    sb = b / 255\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert decimal to hexadecimal\n    r = hex(r)[2:]\n    g = hex(g)[2:]\n    b = hex(b)[2:]\n    if len(r) == 1:\n        r = \"0\" + r\n    if len(g) == 1:\n        g = \"0\" + g\n    if len(b) == 1:\n        b = \"0\" + b\n    # Converting hexadecimal values to decimal\n    r, g, b = int(r, 16), int(g, 16), int(b, 16)\n    max = 255\n    min = 0\n    # calculating h, s, v\n    h = (r * 60 + g * 60 + b * 60) / (max * 3)\n    s = (max - (r + g + b) / 3) / max\n    v = max\n    # Return the converted rgb values\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0, 0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_v = max(max(r,g,b),0.000001)\n    min_v = min(min(r,g,b),1-max_v)\n    diff = max_v-min_v\n    if (max_v == min_v):\n        if (max_v == 0):\n            return 0, 0, 0\n        return 0, 0, 1\n    if (diff == 0):\n        return 0, 0, 1\n    return (((min_v/max_v) * 360), (1/(max_v*max_v)), (((max_v-min_v)/diff)*(max_v+min_v)))\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_numbers=[]\n    odd_numbers=[]\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_numbers.append(list1[i])\n        else:\n            odd_numbers.append(list1[i])\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Create the output variable\n    product = 0\n    # Iterate over the given list\n    for num in list1:\n        # If odd\n        if num % 2!= 0:\n            # Find the product of both numbers\n            product = product * num\n            \n    # Return the product\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # define variables\n    even_product = 1\n    odd_product = 1\n    # check if odd number exist and if it is the last number in the list\n    if len(list1) > 1:\n        # check if the number is odd and if it is the last number in the list\n        if list1[-1] % 2!= 0:\n            # multiply the odd product by the number in the list\n            odd_product = odd_product * list1[-1]\n    # multiply the even product by the number in the list\n    even_product = even_product * list1[0]\n    # return the product\n    return even_product, odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    product = 1\n    for i in range(len(even_list)):\n        product *= even_list[i]\n    for i in range(len(odd_list)):\n        product *= odd_list[i]\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2 = []\n    list3 = []\n    i = 0\n    while i < len(list1):\n        if i%2 == 0:\n            list2.append(list1[i])\n        else:\n            list3.append(list1[i])\n        i += 1\n    return(product_even_odd(list2),product_even_odd(list3))\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in range(0, len(list1), 2):\n        if i % 2 == 0:\n            even_prod *= list1[i]\n        else:\n            odd_prod *= list1[i]\n    return even_prod, odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(\"Even numbers are {}\".format(even))\n    print(\"Odd numbers are {}\".format(odd))\n    print(\"Product of even and odd numbers is {}\".format(even[0]*odd[0]))\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = list(filter(lambda x: x%2==0, list1))\n    odd = list(filter(lambda x: x%2!=0, list1))\n    product = 1\n    if len(even) > len(odd):\n        product = product * even[0]\n        for i in range(1, len(odd)):\n            product = product * odd[i]\n    else:\n        product = product * odd[0]\n        for i in range(1, len(even)):\n            product = product * even[i]\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1 = list(map(int,list1))\n    even_count = 0\n    odd_count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_count += list1[i]\n        else:\n            odd_count += list1[i]\n    print('Even count =', even_count)\n    print('Odd count =', odd_count)\n    product = even_count * odd_count\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) is str and '(' in test_str and ')' in test_str:\n        test_str = test_str.replace('(','')\n        test_str = test_str.replace(')','')\n        test_str = test_str.split(',')\n        test_str = tuple(int(x) for x in test_str)\n        return test_str\n    else:\n        return tuple()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # list_str = list(test_str)\n    # for i in range(len(list_str)):\n    #     if list_str[i] == \",\":\n    #         list_str[i] = \" \"\n    # tuple_str = \"\".join(list_str).split()\n    # list_int = []\n    # for i in range(len(tuple_str)):\n    #     if tuple_str[i].isdigit():\n    #         list_int.append(int(tuple_str[i]))\n    # tuple_int = tuple(list_int)\n    \n    str_list = test_str.split()\n    i = 0\n    for i in range(len(str_list)):\n        if str_list[i] == \",\":\n            str_list[i] = \" \"\n    int_list = []\n    for i in range(len(str_list)):\n        if str_list[i].isdigit():\n            int_list.append(int(str_list[i]))\n    tuple_int = tuple(int_list)\n    return tuple_int\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str)!= str:\n        raise ValueError('\"test_str\" must be a string')\n    for i in range(len(test_str)):\n        if test_str[i].isdigit()!= True:\n            raise ValueError('\"test_str\" must only contain numbers')\n    for i in range(len(test_str)):\n        if test_str[i] =='':\n            raise ValueError('\"test_str\" must only contain numbers')\n    for i in range(len(test_str)):\n        test_str = test_str.replace(test_str[i], '')\n    test_str = test_str.split(' ')\n    for i in range(len(test_str)):\n        test_str[i] = int(test_str[i])\n    return tuple(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if len(test_str) > 1:\n        new_str = \"\"\n        for i in range(0, len(test_str)-1):\n            new_str += test_str[i]\n        new_str += test_str[-1]\n        test_str = new_str\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split())\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # create a tuple with only the characters (read from the console)\n    # and ignore all the spaces in between (read from the console)\n    list_str = test_str.replace(' ', '').split(',')\n    return tuple(map(int, list_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if a[mid] == x:\n            return mid\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i]!= x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return n\n    i = bisect.bisect_right(a, x)\n    if i == n:\n        return n\n    else:\n        return i\n        \ndef test_right_insertion():\n    a = []\n    assert right_insertion(a, 1) == 0\n    a = [1]\n    assert right_insertion(a, 1) == 1\n    a = [1,1]\n    assert right_insertion(a, 1) == 1\n    a = [1,2,3]\n    assert right_insertion(a, 2) == 1\n    a = [1,2,3]\n    assert right_insertion(a, 1) == 1\n    a = [1,2,3]\n    assert right_insertion(a, 3) == 3\n    a = [1,2,3]\n    assert right_insertion(a, 4) == 4\n    a = [1,2,3]\n    assert right_insertion(a, 5) == 4\n    a = [1,2,3]\n    assert right_insertion(a, 6) == 5\n    a = [1,2,3]\n    assert right_insertion(a, 4) == 4\n    a = [1,2,3]\n    assert right_insertion(a, 3) == 3\n    a = [1,2,3]\n    assert right_insertion(a, 2) == 2\n    a = [1,2,3]\n    assert right_insertion(a, 1) == 1\n    a = [1,2,3]\n    assert right_insertion(a, 0) == 0\n    a = [1]\n    assert right_insertion(a, 1) == 0\n    a = [1]\n    assert right_insertion(a, 1) == 1\n    a = [1]\n    assert right_insertion(a, 2) == 1\n    a = [1]\n    assert right_insertion(a, 3) == 2\n    a = [1]\n    assert right_insertion(a, 4) == 2\n    a = [1]\n    assert right_insertion(a, 5) == 2\n    a = [1]\n    assert right_insertion(a, 6) == 3\n    a = [1]\n    assert right_insertion(a, 7) == 3\n    a = [1]\n    assert right_insertion(a, 8) == 3\n    a = [1]\n    assert right_insertion(a, 9) == 3\n    a = [1]\n    assert right_insertion(a, 10) == 4\n    a = [1]\n    assert right_insertion(a, 11) == 4\n    a = [1]\n    assert right_insertion(a, 12) == 4\n    a = [1]\n    assert right_insertion(a, 13) == 4\n    a = [1]\n    assert right_insertion(a, 14) == 4\n    a = [1]\n    assert right_insertion(a, 15) == 4\n    a = [1]\n    assert right_insertion(a, 16) == 4\n    a = [1]\n    assert right_insertion(a, 17) == 4\n    a = [1]\n    assert right_insertion(a, 18) == 4\n    a = [1]\n    assert right_insertion(a, 19) == 4\n    a = [1]\n    assert right_insertion(a, 20) == 5\n    a = [1]\n    assert right_insertion(a, 21) == 5\n    a = [1]\n    assert right_insertion(a, 22) == 5\n    a = [1]\n    assert right_insertion(a, 23) == 5\n    a = [1]\n    assert right_insertion(a, 24) == 5\n    a = [1]\n    assert right_insertion(a, 25) == 5\n    a = [1]\n    assert right_insertion(a, 26) == 5\n    a = [1]\n    assert right_insertion(a, 27) == 5\n    a = [1]\n    assert right_insertion(a, 28) == 5\n    a = [1]\n    assert right_insertion(a, 29) == 5\n    a = [1]\n    assert right_insertion(a, 30) == 5\n    a = [1]\n    assert right_insertion(a, 31) == 5\n    a = [1]\n    assert right_insertion(a, 32) == 5\n    a = [1]\n    assert right_insertion(a, 33) == 5\n    a = [1]\n    assert right_insertion(a, 34) == 5\n    a = [1]\n    assert right_insertion(a, 35) == 5\n    a = [1]\n    assert right_insertion(a, 36) == 5\n    a = [1]\n    assert right_insertion(a, 37) == 5\n    a = [1]\n    assert right_insertion(a, 38) == 5\n    a = [1]\n    assert right_insertion(a, 39) == 5\n    a = [1]\n    assert right_insertion(a, 40) == 5\n    a = [1]\n    assert right_insertion(a, 41) == 5\n    a = [1]\n    assert right_insertion(a, 42) == 5\n    a = [1]\n    assert right_insertion(a, 43) == 5\n    a = [1]\n    assert right_insertion(a, 44) == 5\n    a = [1]\n    assert right_insertion(a, 45) == 5\n    a = [1]\n    assert right_insertion(a, 46) == 5\n    a = [1]\n    assert right_insertion(a, 47) == 5\n    a = [1]\n    assert right_insertion(a, 48) == 5\n    a = [1]\n    assert right_insertion(a, 49) == 5\n    a = [1]\n    assert right_insertion(a, 50) == 5\n    a = [1]\n    assert right_insertion(a, 51) == 5\n    a = [1]\n    assert right_insertion(a, 52) == 5\n    a = [1]\n    assert right_insertion(a, 53) == 5\n    a = [1]\n    assert right_insertion(a, 54) == 5\n    a = [1]\n    assert right_insertion(a, 55) == 5\n    a = [1]\n    assert right_insertion(a, 56) == 5\n    a = [1]\n    assert right_insertion(a, 57) == 5\n    a = [1]\n    assert right_insertion(a, 58) == 5\n    a = [1]\n    assert right_insertion(a, 59) == 5\n    a = [1]\n    assert right_insertion(a, 60) == 5\n    a = [1]\n    assert right_insertion(a, 61) == 5\n    a = [1]\n    assert right_insertion(a, 62) == 5\n    a = [1]\n    assert right_insertion(a, 63) == 5\n    a = [1]\n    assert right_insertion(a, 64) == 5\n    a = [1]\n    assert right_insertion(a, 65) == 5\n    a = [1]\n    assert right_insertion(a, 66) == 5\n    a = [1]\n    assert right_insertion(a, 67) == 5\n    a = [1]\n    assert right_insertion(a, 68) == 5\n    a = [1]\n    assert right_insertion(a, 69) == 5\n    a = [1]\n    assert right_insertion(a, 70) == 5\n    a = [1]\n    assert right_insertion(a, 71) == 5\n    a = [1]\n    assert right_insertion(a, 72) == 5\n    a = [1]\n    assert right_insertion(a, 73) == 5\n    a = [1]\n    assert right_insertion(a, 74) == 5\n    a = [1]\n    assert right_insertion(a, 75) == 5\n    a = [1]"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0:\n        a.insert(i, x)\n    else:\n        a.insert(i, x)\n        while i < len(a) and a[i] == a[i-1]:\n            a.pop(i)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = lo + ((hi-lo) >> 1)\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l if a[l] < x else l + 1\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x, lo = 1)\n    return l\ndef left_insertion2(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x, lo = 1)\n    return l\ndef left_insertion3(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l\ndef left_insertion4(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x, lo = 1)\n    return l\ndef left_insertion5(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l if a[l] < x else l + 1\ndef left_insertion6(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x, lo = 1)\n    return l\ndef right_insertion2(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x)\n    return l\ndef right_insertion3(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x)\n    return l\ndef right_insertion4(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x, lo = 1)\n    return l\ndef right_insertion5(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x)\n    return l if a[l] < x else l + 1\ndef right_insertion6(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x, lo = 1)\n    return l\ndef left_insertion_bisect(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    return l if a[l] < x else l\ndef right_insertion_bisect(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_right(a, x)\n    return l if a[l] < x else l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    return i+1\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a_or_b = re.compile(r'ab')\n    matches = a_or_b.finditer(text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #print('Hello world!')\n    #print('Hello world!'.lower())\n    #print('Hello world!'.upper())\n    #print('Hello world!'.replace('l','j'))\n    return re.findall('ab+',text)\n    \nprint(text_match_three('abababababababab'))\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b', followed by a 'c' and a 'b'.\n    '''\n    #print('Hello world!')\n    #print('Hello world!'.lower())\n    #print('Hello world!'.upper())\n    #print('Hello world!'.replace('l','j'))\n    return re.findall('ab{2,}c',text)\n    \nprint(text_match_four('abababacababab'))\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b', followed by a 'c' and a 'd'.\n    '''\n    #print('Hello world!')\n    #print('Hello world!'.lower())\n    #print('Hello world!'.upper())\n    #print('Hello world!'.replace('l','j'))\n    return re.findall('ab{2,}c{1,}d',text)\n    \nprint(text_match_five('abababacabababcd'))\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b', followed by a 'c' and a 'd' then a 'e'.\n    '''\n    #print('Hello world!')\n    #print('Hello world!'.lower())\n    #print('Hello world!'.upper())\n    #print('Hello world!'.replace('l','j'))\n    return re.findall('ab{4,}c{1,}d{1,}e',text)\n    \nprint(text_match_six('abababacabababced'))\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b', followed by a 'c' and a 'd' then a 'e'\n    followed by a 'f', followed by a 'c' and a 'd' then a 'e' followed by a 'f'.\n    '''\n    #print('Hello world!')\n    #print('Hello world!'.lower())\n    #print('Hello world!'.upper())\n    #print('Hello world!'.replace('l','j'))\n    return re.findall('ab{4,}c{1,}d{1,}e{1,}f{1,}c{1,}d{1,}e{1,}f',text)\n    \nprint(text_match_seven('abababacabababcedefgh'))\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b', followed by a 'c' and a 'd' then a 'e'\n    followed by a 'f', followed by a 'c' and a 'd' then a 'e' followed by a 'f'.\n    '''\n    #print('Hello world!')\n    #print('Hello world!'.lower())\n    #print('Hello world!'.upper())\n    #print('Hello world!'.replace('l','j'))\n    return re.findall('ab{4,}c{1,}d{1,}e{1,}f{1,}c{1,}d{1,}e{1,}f',text)\n    \nprint(text_match_eight('abababacabababcedefgh'))\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b', followed by a 'c' and a 'd' then a 'e'\n    followed by a 'f', followed by a 'c' and a 'd' then a 'e' followed by a 'f'.\n    '''\n    #print('Hello world!')\n    #print('Hello world!'.lower())\n    #print('Hello world!'.upper())\n    #print('Hello world!'.replace('l','j'))\n    return re.findall('ab{4,}c{1,}d{1,}e{1,}f{1,}c{1,}d{1,}e{1,}f',text)\n    \nprint(text_match_nine('abababacabababcedefgh'))\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b', followed by a 'c' and a 'd' then a 'e'\n    followed by a 'f', followed by a 'c' and a 'd' then a 'e' followed by a 'f'.\n    '''\n    #print('Hello world!')\n    #print('Hello world!'.lower())\n    #print('Hello world!'.upper())\n    #print('Hello world!'.replace('l','j'))\n    return re.findall('ab{4,}c{1,}d{1,}e{1,}f{1,}c{1,}d{1,}e{1,}f',text)\n    \nprint(text_match_ten('abababacabababcedefgh'))\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    p = r'a+b+b+b+b'\n    result = re.search(p, text)\n    print(result)\n    print(result.group())\n    return result.group()\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.search('ab.*?b',text)\n    if text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b.*(b."
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    return re.search(r'ab', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #findall method: return the list of the groups that are inside the match\n    #re.findall() method: return the string without group (not the list)\n    #re.finditer() method: return the iterator object\n    \n    return re.findall('ab+',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a_b_string = re.compile(r'a(?:b)+')\n    if re.search(a_b_string, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.match(r'(a){3}',text)\n    if result:\n        return result.group()\n    else:\n        return 'not found'\nprint(text_match_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_list)\n    return tup + tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n    \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = []\n    tuple_list = test_list.split()\n    tuple_list.append(test_str)\n    return tuple_list\n    # I would also like to do this without using the built in list function\n    # for this exercise\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_list)\n    new_tup = tup + (test_str,)\n    return new_tup\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup_str = tuple(test_str)\n    tup_list = list(test_list)\n    new_tuple = tup_list + tup_str\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list_1 = list(test_list)\n    test_list_2 = list(test_str)\n    test_list_3 = list(test_list_1 + test_list_2)\n    test_tuple = tuple(test_list_3)\n    return test_tuple\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if isinstance(nums, list) == False:\n        return False\n    nums_even = []\n    for i in range(len(nums)):\n        if i%2 == 0:\n            nums_even.append(nums[i])\n    if len(nums_even) == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position = []\n    for i in range(0, len(nums)):\n        if (i % 2 == 0):\n            even_position.append(nums[i])\n    return even_position\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return len(set([ nums[i] for i in range(len(nums)) if i%2==0 ])) == len(nums) / 2\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(n % 2 == 0 for i, n in enumerate(nums) if i % 2 == 0)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num%2==0 for num in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    check = 0\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            check += 1\n    if check == len(nums):\n        print(f\"Even position contains even numbers of the list {nums}\")\n    else:\n        print(f\"Even position does not contain even numbers of the list {nums}\")\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_pos = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_pos.append(nums[i])\n    return even_pos\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    return tuple(i for i in test_tup if i!= (0,0))\n    \ntest_tup = (0,0,1,(1,1,1),2)\nprint(remove_nested(test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(i for i in test_tup if i!= (None,))\n    \nprint(remove_nested((None, None, None)))\nprint(remove_nested((None, None)))\nprint(remove_nested((None, None)))\nprint(remove_nested((None,)))\nprint(remove_nested(()))"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0], remove_nested(test_tup[1:])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    my_tuple = list(test_tup)\n    test_tup = ()\n    for elem in my_tuple:\n        if not isinstance(elem, tuple):\n            test_tup += elem,\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    x = []\n    for i in test_tup:\n        if type(i) == tuple:\n            x += i\n        else:\n            x.append(i)\n    return tuple(x)\n    \ndef check_if_pair_in_dict(test_dict,test_pair):\n    '''\n    Write a function to check if the given key-value pair is present in a dictionary.\n    '''\n    x = False\n    for i in test_dict:\n        if i == test_pair:\n            x = True\n    return x\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = test_tup[:test_tup.index(()) + 1]\n    return tuple(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove_nested([1,(2,3),(4,5)])\n    # remove_nested((1,(2,3),(4,5)))\n    # remove_nested((1,(2,3),(4,)))\n    # remove_nested((1,(2,3),))\n    # remove_nested((1,))\n    # remove_nested((1,2,3))\n    # remove_nested((2,))\n    # remove_nested((2,3))\n    # remove_nested((3,))\n    # remove_nested(())\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if isinstance(i, tuple):\n            remove_nested(i)\n        else:\n            return\n    test_tup[:] = [i for i in test_tup if i]\n    return\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup_lst = []\n    for i in test_tup:\n        if not (tup_lst and tup_lst[-1] == i):\n            tup_lst.append(i)\n    return tuple(tup_lst)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list:\n        if type(i) is list:\n            count = count + 1 \n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # no of lists\n    n = len(input_list)\n    # no of unique numbers\n    u = len(set(input_list))\n    return n,u\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # list comprehension\n    # return len([i for i in input_list if type(i) == list])\n    return len([i for i in input_list if type(i) == list])\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    cnt=0\n    for x in input_list:\n        if type(x)==list:\n            cnt+=1\n    return cnt\nprint(count_list([1,2,3,4,[5,6,7],8,[9,10,11],12,13,14,15,[16,17,18],19,[20,21,22],23,24,25,26]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,[5,6,7],8,9,[10,11,12],13,14,15,[16,17,18],19,20,21,22,23,24,25,26]))\nprint(count_list([1,2,3,4,[5,6,7],8,9,[10,11,12],13,14,15,[16,17,18],19,20,21,22,23,24,25,26]))\nprint(count_list([1,2,3,4,[5,6,7],8,9,[10,11,12],13,14,15,[16,17,18],19,20,21,22,23,24,25,26]))\nprint(count_list([1,2,3,4,[5,6,7],8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\nprint(count_list([1,2,3,4,[5,6,7],8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\nprint(count_list([1,2,3,4,[5,6,7],8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\nprint(count_list([1,2,3,4,[5,6,7],8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4]))\nprint(count_list([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0,len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list) is not list:\n        raise TypeError('input must be a list')\n    for i in input_list:\n        if type(i) is not list:\n            raise TypeError('input must be a list')\n        \n    \n    def inner_count_list(input_list, count):\n        '''\n        Write a python function to count the number of lists in a given number of lists.\n        '''\n        if type(input_list) is not list:\n            raise TypeError('input must be a list')\n        for i in input_list:\n            if type(i) is not list:\n                raise TypeError('input must be a list')\n            \n        \n        if count > 0:\n            return inner_count_list(input_list[count], count-1)\n        else:\n            return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list ==[]:\n        return 0\n    if isinstance(input_list[0], list):\n        return 1 + count_list(input_list[0])\n    else:\n        return 1\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    lo=0\n    hi=n-1\n    while lo<=hi:\n        mid=(lo+hi)//2\n        if arr[mid]==x:\n            if mid==hi:\n                return mid\n            if arr[mid+1]==x:\n                return mid+1\n            if arr[mid]!=x:\n                return mid\n            else:\n                hi=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    h=len(arr)-1\n    while l<h:\n        mid=(l+h)//2\n        if x<arr[mid]:\n            h=mid-1\n        elif x>arr[mid]:\n            l=mid+1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start=0\n    end=len(arr)-1\n    while(start<=end):\n        mid=(start+end)//2\n        if(arr[mid]==x):\n            return mid\n        elif(x<arr[mid]):\n            end=mid-1\n        else:\n            start=mid+1\n    return -1\n    \nprint(last([2, 3, 4, 5, 7, 8, 9, 11, 13, 14], 7))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pos = -1\n    size = len(arr)\n    for i in range(size-1):\n        if(arr[i] <= x and x <= arr[i+1]):\n            pos = i\n            break\n    return pos\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #code here\n    l=len(arr)\n    for i in range(l-1):\n        if x>arr[i]:\n            l=i\n            break\n    return l"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # code here\n    l = 0\n    r = len(arr) - 1\n    while l<r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            r = mid\n        elif arr[mid] > x:\n            r = mid\n        else:\n            l = mid + 1\n    if arr[r] == x:\n        return r\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i <= j:\n        m = (i+j)//2\n        if arr[m] < x:\n            i = m+1\n        elif arr[m] > x:\n            j = m-1\n        else:\n            return m\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr) - (arr.index(x) + 1)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'a.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_starta_endb_star_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'a.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'b.*?a'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_startb_enda_star_end(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a', followed by another 'a', ending in 'a'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'b.*?a.*?a'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_startb_enda_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a', followed by another 'a', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'b.*?a.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_startb_enda_star_endb_star_end(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a', followed by another 'a', ending in 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'b.*?a.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_starta_endb_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'a.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_starta_endb_star_endb_star_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', followed by another 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'a.*?b.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_startb_enda_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'b.*?a.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_startb_enda_star_endb_star_end(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a', followed by another 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'b.*?a.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_startb_enda_star_endb_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a', followed by another 'b', followed by another 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'b.*?a.*?b.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_starta_endb_star_endb_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', followed by another 'b', followed by another 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'a.*?b.*?b.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_starta_endb_star_endb_star_endb_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'a.*?b.*?b.*?b.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_starta_endb_star_endb_star_endb_star_endb_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'a.*?b.*?b.*?b.*?b.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_starta_endb_star_endb_star_endb_star_endb_star_endb_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', followed by another 'b', ending in 'b'.\n    '''\n    \n    text = re.sub(r'[\\n\\r]', \" \", text)\n    pattern = r'a.*?b.*?b.*?b.*?b.*?b.*?b.*?b.*?b'\n    result = re.findall(pattern, text)\n    print(result)\n    \ndef text_startb_enda_star_endb_star_endb_star_endb_star_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followe"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*b'\n    #pattern = r'a.*b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'a.{1}b')\n    match = regex.search(text)\n    print(match.group())\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern,text)\n    if match:\n        print(match.group())\n    else:\n        print('not found')\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #TODO: Write your function here\n    return re.findall(r'a.+b',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Your code here\n    #m = re.match(r'^a.*?b$', text)\n    m = re.match(r'^a.*(b)$', text)\n    print(m)\n    return bool(m)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    a = re.search(pattern, text)\n    if a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    return re.search(r\"\\b[a-z]+[\\w ]+[a-z]+[\\w ]?[b]\", text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r'a[a-z]*b',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    return re.match(pattern, text)\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total = total + i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for _ in dict.values():\n        sum += _\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not isinstance(dict, dict):\n        raise ValueError(\"Invalid argument, the input should be a dictionary.\")\n    else:\n        return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    a = 0\n    for i in dict:\n        a = a + dict[i]\n    return a\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k, v in dict.items():\n        sum = sum + v\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for key, val in dict.items():\n        sum += val\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2!=0:\n            sum = sum+i\n    return sum\n    \nprint(sum_odd(10))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    for i in range(n,n+1):\n        if i%2==1:\n            s=s+i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum_odd = sum_odd + i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n + sum_odd(n-2)\n        \nsum_odd(3)\nsum_odd(4)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #SOLUTION 1\n    if n<=0:\n        return 0\n    else:\n        if n==1:\n            return 1\n        else:\n            s=0\n            for i in range(1,n+1):\n                if i%2!=0:\n                    s=s+i\n            return s\n    #SOLUTION 2\n    return n and (n+1)//2\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for x in range(n): \n        if (x % 2!= 0): \n            sum += x \n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i\n        i += 1\n    return sum\n    \ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum += i\n        i += 1\n    return sum\n    \ndef fact(n):\n    '''\n    Write a python function to calculate factorial of n\n    '''\n    i = 1\n    if n == 0:\n        return 1\n    else:\n        while i < n:\n            return n * fact(n - 1)\n            i += 1\n    \ndef fact_recur(n):\n    '''\n    Write a python function to calculate factorial of n\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * fact_recur(n - 1)\n        \ndef double_str(s):\n    '''\n    Write a python function to print double string\n    '''\n    return s * 2\n    \ndef check_even(n):\n    '''\n    Write a python function to check if number is even or not\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef check_even_recur(n):\n    '''\n    Write a python function to check if number is even or not\n    '''\n    if n == 0:\n        return True\n    else:\n        return n % 2 == 0\n        \ndef sum_list(l):\n    '''\n    Write a python function to sum all elements in a list\n    '''\n    sum = 0\n    for i in l:\n        sum += i\n    return sum\n    \ndef sum_list_recur(l):\n    '''\n    Write a python function to sum all elements in a list\n    '''\n    if len(l) == 0:\n        return 0\n    else:\n        return l[0] + sum_list_recur(l[1:])\n        \ndef multiply_list(l):\n    '''\n    Write a python function to multiply all elements in a list\n    '''\n    mul = 1\n    for i in l:\n        mul *= i\n    return mul\n    \ndef multiply_list_recur(l):\n    '''\n    Write a python function to multiply all elements in a list\n    '''\n    if len(l) == 0:\n        return 1\n    else:\n        return l[0] * multiply_list_recur(l[1:])\n        \ndef count_letters(text, letter):\n    '''\n    Write a python function to count the number of times the letter 'a' is present in the given text.\n    '''\n    cnt = 0\n    for i in range(len(text)):\n        if text[i] == letter:\n            cnt += 1\n    return cnt\n    \ndef count_letters_recur(text, letter):\n    '''\n    Write a python function to count the number of times the letter 'a' is present in the given text.\n    '''\n    if len(text) == 0:\n        return 0\n    elif text[0] == letter:\n        return 1 + count_letters_recur(text[1:], letter)\n    else:\n        return count_letters_recur(text[1:], letter)\n    \ndef count_letters_odd(text, letter):\n    '''\n    Write a python function to count the number of times the letter 'a' is present in the given text.\n    '''\n    cnt = 0\n    i = 0\n    while i < len(text):\n        if text[i] == letter:\n            cnt += 1\n        if cnt % 2!= 0:\n            i += 1\n        else:\n            i += 2\n    return cnt\n    \ndef count_letters_odd_recur(text, letter):\n    '''\n    Write a python function to count the number of times the letter 'a' is present in the given text.\n    '''\n    if len(text) == 0:\n        return 0\n    elif text[0] == letter:\n        return 1 + count_letters_odd_recur(text[1:], letter)\n    else:\n        return count_letters_odd_recur(text[1:], letter)\n    \ndef fact_even_odd(n):\n    '''\n    Write a python function to find the factorial of an even number\n    '''\n    if n % 2 == 0:\n        return n * fact_even(n - 2)\n    else:\n        return n * fact_odd(n - 1)\n    \ndef fact_even_odd_recur(n):\n    '''\n    Write a python function to find the factorial of an even number\n    '''\n    if n % 2 == 0:\n        return n * fact_even_odd_recur(n - 2)\n    else:\n        return n * fact_odd_recur(n - 1)\n    \ndef is_prime_recur(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n == 1:\n        return False\n    else:\n        return n % 2 == 0 or is_prime_recur(n - 1)\n    \ndef is_prime_recur_2(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n == 1:\n        return False\n    else:\n        if n % 2!= 0 and is_prime_recur_2(n - 1):\n            return True\n        else:\n            return False\n            \ndef sum_recur(l):\n    '''\n    Write a python function to return the sum of a list\n    '''\n    if len(l) == 0:\n        return 0\n    else:\n        return l[0] + sum_recur(l[1:])\n    \ndef add_two_num(a, b):\n    '''\n    Write a python function to add two numbers\n    '''\n    return a + b\n    \ndef add_two_num_recur(a, b):\n    '''\n    Write a python function to add two numbers\n    '''\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return a + add_two_num_recur(a, b - 1)\n        \ndef add_three_nums(a, b, c):\n    '''\n    Write a python function to add three numbers\n    '''\n    return a + b + c\n    \ndef add_three_nums_recur(a, b, c):\n    '''\n    Write a python function to add three numbers\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    else:\n        return a + add_three_nums_recur(a, b, c - 1)\n        \ndef sum_three_nums(a, b, c):\n    '''\n    Write a python function to add three numbers\n    '''\n    return a + b + c\n    \ndef sum_three_nums_recur(a, b, c):\n    '''\n    Write a python function to add three numbers\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    else:\n        return a + b + sum_three_nums_recur(a, b, c - 1)\n        \ndef compare_strings(s1, s2):\n    '''\n    Write a python function to compare strings\n    '''\n    if s1 == s2:\n        return 'Equal'\n    else:\n        return 'Not equal'\n    \ndef compare_strings_recur(s1, s2):\n    '''\n    Write a python function to compare strings\n    '''\n    if len(s1) == 0 or len(s2) == 0:\n        return 'Empty'\n    elif s1 == s2:\n        return 'Equal'\n    else:\n        return 'Not equal'\n        \ndef is_prime_func(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n == 1:\n        return False"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    if n > 0:\n        if l <= n <= r:\n            total = 0\n            for i in range(l, r+1, 1):\n                if i % 2!= 0:\n                    total = total + i\n            return total\n        else:\n            print(\"Invalid Input\")\n    else:\n        print(\"Invalid Input\")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2!= 0:\n            sum += i\n    return sum\n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n    \ndef sum_all(l,r): \n    '''\n    Write a python function to find the sum of all integers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l+1,r+1):\n        sum += i\n    return sum\n    \ndef count_even(n): \n    '''\n    Write a python function to find the count of even integers within the range l and r.\n    '''\n    count = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            count += 1\n    return count\n    \ndef count_odd(n): \n    '''\n    Write a python function to find the count of odd integers within the range l and r.\n    '''\n    count = 0\n    for i in range(n+1):\n        if i%2!= 0:\n            count += 1\n    return count\n    \ndef count_all(l,r): \n    '''\n    Write a python function to find the count of all integers within the range l and r.\n    '''\n    count = 0\n    for i in range(l+1,r+1):\n        count += 1\n    return count\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a given integer is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,n,2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum=sum+arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # arr = [1,2,3,4,5]\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    s = 0\n    for i in arr:\n        s += i\n    print(s)\n    \ndef _average(arr):\n    '''\n    Write a python function to find the average of an array.\n    '''\n    \n    s = 0\n    for i in arr:\n        s += i\n    print(s/len(arr))\n    \ndef _minimum(arr):\n    '''\n    Write a python function to find the minimum of an array.\n    '''\n    \n    m = arr[0]\n    for i in arr:\n        if i < m:\n            m = i\n    print(m)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s+=i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    \n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \n    \ndef _sum_arr(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return np.sum(arr)\n    \n    \ndef _divide(a, b):\n    '''\n    Write a python function to divide an array by another array.\n    '''\n    return np.divide(a, b)\n    \n    \ndef _divide_arr(a, b):\n    '''\n    Write a python function to divide an array by another array.\n    '''\n    return a/b\n    \n    \ndef _mul(a, b):\n    '''\n    Write a python function to multiply two numpy arrays.\n    '''\n    return np.multiply(a, b)\n    \n    \ndef _mul_arr(a, b):\n    '''\n    Write a python function to multiply two numpy arrays.\n    '''\n    return np.multiply(a, b)\n    \n    \ndef _sub(a, b):\n    '''\n    Write a python function to subtract two numpy arrays.\n    '''\n    return np.subtract(a, b)\n    \n    \ndef _sub_arr(a, b):\n    '''\n    Write a python function to subtract two numpy arrays.\n    '''\n    return a - b\n    \n    \ndef _divide_const(a, b):\n    '''\n    Write a python function to divide an array by a constant value.\n    '''\n    return np.divide(a, b)\n    \n    \ndef _divide_const_arr(a, b):\n    '''\n    Write a python function to divide an array by a constant value.\n    '''\n    return a/b\n    \n    \ndef _exp(a):\n    '''\n    Write a python function to compute the exponential.\n    '''\n    return np.exp(a)\n    \n    \ndef _log(a):\n    '''\n    Write a python function to compute the natural logarithm.\n    '''\n    return np.log(a)\n    \n    \ndef _log10(a):\n    '''\n    Write a python function to compute the natural logarithm of 10.\n    '''\n    return np.log10(a)\n    \n    \ndef _square(a):\n    '''\n    Write a python function to compute the square of an array.\n    '''\n    return np.square(a)\n    \n    \ndef _square_arr(a):\n    '''\n    Write a python function to compute the square of an array.\n    '''\n    return a**2\n    \n    \ndef _root(a, b):\n    '''\n    Write a python function to compute the root of an array.\n    '''\n    return np.roots(a, b)\n    \n    \ndef _root_arr(a, b):\n    '''\n    Write a python function to compute the root of an array.\n    '''\n    return np.linalg.solve(a, b)\n    \n    \ndef _sin(a):\n    '''\n    Write a python function to compute the sine of an array.\n    '''\n    return np.sin(a)\n    \n    \ndef _cos(a):\n    '''\n    Write a python function to compute the cosine of an array.\n    '''\n    return np.cos(a)\n    \n    \ndef _tan(a):\n    '''\n    Write a python function to compute the tangent of an array.\n    '''\n    return np.tan(a)\n    \n    \ndef _arctan(a):\n    '''\n    Write a python function to compute the arctangent of an array.\n    '''\n    return np.arctan(a)\n    \n    \ndef _arcsin(a):\n    '''\n    Write a python function to compute the arcsine of an array.\n    '''\n    return np.arcsin(a)\n    \n    \ndef _arccos(a):\n    '''\n    Write a python function to compute the arccosine of an array.\n    '''\n    return np.arccos(a)\n    \n    \ndef _arctan2(a, b):\n    '''\n    Write a python function to compute the arctangent of an array.\n    '''\n    return np.arctan2(a, b)\n    \n    \ndef _sinh(a):\n    '''\n    Write a python function to compute the hyperbolic sine of an array.\n    '''\n    return np.sinh(a)\n    \n    \ndef _cosh(a):\n    '''\n    Write a python function to compute the hyperbolic cosine of an array.\n    '''\n    return np.cosh(a)\n    \n    \ndef _tanh(a):\n    '''\n    Write a python function to compute the hyperbolic tangent of an array.\n    '''\n    return np.tanh(a)\n    \n    \ndef _arcsinh(a):\n    '''\n    Write a python function to compute the hyperbolic arc sine of an array.\n    '''\n    return np.arcsinh(a)\n    \n    \ndef _arccosh(a):\n    '''\n    Write a python function to compute the hyperbolic arc cosine of an array.\n    '''\n    return np.arccosh(a)\n    \n    \ndef _arctanh(a):\n    '''\n    Write a python function to compute the hyperbolic arc tangent of an array.\n    '''\n    return np.arctanh(a)\n    \n    \ndef _sign(a):\n    '''\n    Write a python function to compute the sign of an array.\n    '''\n    return np.sign(a)\n    \n    \ndef _add(a, b):\n    '''\n    Write a python function to compute the sum of two arrays.\n    '''\n    return np.add(a, b)\n    \n    \ndef _add_arr(a, b):\n    '''\n    Write a python function to compute the sum of two arrays.\n    '''\n    return np.add(a, b)\n    \n    \ndef _sub(a, b):\n    '''\n    Write a python function to compute the difference of two arrays.\n    '''\n    return np.subtract(a, b)\n    \n    \ndef _sub_arr(a, b):\n    '''\n    Write a python function to compute the difference of two arrays.\n    '''\n    return a - b\n    \n    \ndef _mul(a, b):\n    '''\n    Write a python function to compute the product of two arrays.\n    '''\n    return np.multiply(a, b)\n    \n    \ndef _mul_arr(a, b):\n    '''\n    Write a python function to compute the product of two arrays.\n    '''\n    return np.multiply(a, b)\n    \n    \ndef _divide(a, b):\n    '''\n    Write a python function to compute the division of two arrays.\n    '''\n    return np.divide(a, b)\n    \n    \ndef _divide_arr(a, b):\n    '''\n    Write a python function to compute the division of two arrays.\n    '''\n    return a/b\n    \n    \ndef _multiply_by_scalar(a, b):\n    '''\n    Write a python function to multiply by scalar\n    '''\n    return a*b\n    \n    \ndef _multiply_arr_by_scalar(a, b):\n    '''\n    Write a python function to multiply by scalar\n    '''\n    return a*b\n    \n    \ndef _divide_by_scalar(a, b):\n    '''\n    Write a python function to divide by scalar\n    '''\n    return a/b\n    \n    \ndef _divide_arr_by_scalar(a, b):\n    '''\n    Write a python function to divide by scalar\n    '''\n    return a/b\n    \n    \ndef _exp(a):\n    '''\n    Write a python function to compute the exponential.\n    '''\n    return np.exp(a)\n    \n    \ndef _log("
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s = s + arr[i]\n    return s\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32 - d)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n | (n >> (32-d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert isinstance(n,int) and isinstance(d,int)\n    return ((n<<d)|(n>>(32-d)))\n    \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    bit_list = list(bin(n))\n    bit_list = bit_list[2:]\n    bit_list = list(reversed(bit_list))\n    bit_list = list(map(int, bit_list))\n    \n    for i in range(d):\n        bit_list.append(0)\n    \n    bit_list = bit_list[:32]\n    bit_list = bit_list[::-1]\n    bit_list = list(map(str, bit_list))\n    bit_list = ''.join(bit_list)\n    bit_list = int(bit_list, 2)\n    \n    return bit_list\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #we need to get the left 32 bit, using number of bits left in the number, to perform the rotation.\n    #we can use math and modulus operator to get the left 32 bits\n    left_bit_count = n & ((1 << 32) - 1)\n    return (n << d) | (left_bit_count >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \" \".join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    s = re.sub(\"\\s+\", \"\", text)\n    return s\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result=text.strip()\n    return result\ndef delete_all_line_breaks(text):\n    '''\n    Write a function to delete all the line breaks from a string.\n    '''\n    result=text.replace('\\n','')\n    return result\ndef count_matches(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_2(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_3(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_4(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_5(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_6(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_7(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_8(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_9(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_10(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_11(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_12(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_13(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_14(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_15(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_16(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_17(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_18(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_19(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_20(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_21(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_22(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_23(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_24(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_25(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_26(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_27(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_28(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_29(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_30(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_31(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_32(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_33(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_34(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_35(pattern,string):\n    '''\n    Write a function to count all the matched patterns in a string.\n    '''\n    result=len(re.findall(pattern,string))\n    return result\ndef count_matches_36(pattern,string):\n    '''\n    Write a function to count all th"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    return int(x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y):\n        if (i == z):\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(3):\n        if x[i] == y[i] and x[i] == z[i]:\n            count=count+1\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    for i in range(1,x+1):\n        if x==y and y==z and z==x:\n            count+=1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = count + 1\n    elif x == y or x == z or y == z:\n        count = count + 1\n    elif x!= y and x!= z and y!= z:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(x,y):\n        if(x==y==z):\n            count+=1\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    def equal(x,y,z):\n        \"\"\"\n        Write a python function to count the number of equal numbers from three given integers.\n        \"\"\"\n        # your code here\n        if x==y or x==z or y==z:\n            count = 1\n        else:\n            count = 0\n        return count\n    \n    #Provide different values for x, y, and z and test your program.\n    if equal(1,2,3) == 1:\n        print(\"Test 1: passed\")\n    else:\n        print(\"Test 1: failed\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i == j and j == k and i == k:\n                    count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr)==0 or arr==None:\n        return 0\n    #max_element = max(arr)\n    #min_element = min(arr)\n    #print(\"max_element = \",max_element)\n    #print(\"min_element = \",min_element)\n    #print(\"arr = \",arr)\n    if max(arr) - min(arr) == len(arr)-1:\n        return 0\n    #else:\n    #    print(\"else\")\n    count = 0\n    for i in range(1,len(arr)):\n        #print(\"i = \",i)\n        if arr[i] < arr[i-1]:\n            #print(\"yes\")\n            count += 1\n    #print(\"count = \",count)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        mid = start + (end-start)//2\n        if arr[start] > arr[mid]:\n            end = mid\n        else:\n            start = mid+1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # for loop to count the number of rotations\n    for i in range(len(arr)-1):\n        # if the current element is greater than next element\n        if arr[i] > arr[i+1]:\n            # then, all the elements in current rotation must be swapped\n            arr = arr[i+1:] + arr[:i+1]\n            break\n        # else, no need for rotation\n    return arr\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def rotation(arr,n):\n        for i in range(0,n):\n            if arr[i]>arr[i+1]:\n                return False\n        return True\n    n = len(arr)\n    #print(rotation(arr,n))\n    while not rotation(arr,n):\n        n+=1\n    return n\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return count_rotations(arr)\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #Counting number of rotations will be done using value of mid index.\n    #We need to understand how many times we need to rotate array around mid.\n    #Let count be N and mid be M. \n    #We need to know how many times we need to rotate array around mid.\n    #Count will be equal to N - 1 since we need to rotate array around M.\n    #Now, let's understand what will happen when we rotate the array around mid.\n    #First, we will rotate around mid.\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #Second, we need to make M the first element. We need to rotate the array such that all the elements in between M and N-1 are moved to the right side.\n    #Third, we need to make N the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #Fourth, we need to make N the first element. We need to rotate the array such that all the elements in between M and N-1 are moved to the right side.\n    #So, the idea is to start from the center element and count number of rotations required to make the array sorted.\n    #Let count be equal to the number of rotations required to make the array sorted.\n    #Let A be the array. \n    #Now, count = 3\n    #Let A = 1 2 3 4 5\n    #Let M = 4\n    #First, we will rotate A around M.\n    #Now, A = 4 1 2 3\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #So, we have the following sub array: A = 4 1 2 3\n    #Let M = 1\n    #Now, we will rotate A around M.\n    #Now, A = 1 2 3 4\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #So, we have the following sub array: A = 1 2 3 4\n    #Let M = 3\n    #Now, we will rotate A around M.\n    #Now, A = 3 1 2 4\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #So, we have the following sub array: A = 3 1 2 4\n    #Let M = 4\n    #Now, we will rotate A around M.\n    #Now, A = 4 1 2 3\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #So, we have the following sub array: A = 4 1 2 3\n    #Let M = 3\n    #Now, we will rotate A around M.\n    #Now, A = 3 1 2 4\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #So, we have the following sub array: A = 3 1 2 4\n    #Let M = 2\n    #Now, we will rotate A around M.\n    #Now, A = 2 1 3 4\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #So, we have the following sub array: A = 2 1 3 4\n    #Let M = 1\n    #Now, we will rotate A around M.\n    #Now, A = 1 2 3 4\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #So, we have the following sub array: A = 1 2 3 4\n    #Let M = 0\n    #Now, we will rotate A around M.\n    #Now, A = 1 2 3 4\n    #So, we need to make M the last element. We need to rotate the array such that all the elements in between M and N-1 are moved to the left side.\n    #So, we have the following sub array: A = 1 2 3 4\n    #Return the count\n    #So, we return count\n    def helper(arr, mid, low, high): \n        count = 0\n        while low < high: \n            count += 1\n            mid_index = mid\n            while mid_index!= low:\n                mid_index = arr[mid_index - 1]\n                # print('low, high, mid_index, mid:', low, high, mid_index, mid)\n                # print('mid:', mid)\n            if arr[low]!= mid:\n                low = low + 1\n            else:\n                arr[low], arr[mid_index] = arr[mid_index], arr[low]\n                low = low + 1\n        return count\n    \n    return helper(arr, mid, 0, len(arr) - 1)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n    if n <= 1:\n        return 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            break\n    if i == n-1:\n        return n\n    # The maximum element in a sorted array\n    # is also the minimum element in the reversed array\n    # It has one less rotation than the max element\n    max_of_arr = arr[i]\n    for j in range(i, n):\n        if arr[j] < max_of_arr:\n            break\n        max_of_arr = arr[j]\n    count += max_of_arr * (n - i - 1)\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # if we sort in ascending order\n    if arr[0] <= arr[-1]:\n        return 0\n    # check for the middle element\n    # find the second to last element in the array\n    # swap the first element with the middle element\n    # then check again for the middle element and then swap with the last element\n    # until we have sorted the array\n    for i in range(len(arr) - 1):\n        # check if the array is sorted\n        if arr[i] > arr[i + 1]:\n            # swap the two elements\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            # count the rotations\n            return (i + 1)\n    # else if the above loop ends, i.e., all elements in the array are sorted\n    return len(arr) - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    '''\n    1) We can use the fact that the sorted array must be left side of the original array always.\n    2) If there is any rotations we can check for only those rotations. (We can break the search space in this case)\n    3) If no rotations needed then we can calculate how many rotations are needed by finding the length of array.\n    '''\n    \n    if len(arr) == 1:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    while(left<=right):\n        mid = (left + right) // 2\n        if arr[mid] < arr[right]:\n            right = mid - 1\n        elif arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            return mid\n    return len(arr)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0):\n        return False\n    x = n\n    sq = 0\n    while (x >= 1):\n        sq = sq + (x % 10)**2\n        x = x // 10\n    return sq == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #if n < 0:\n    #    return False\n    #for i in range(1, n // 2):\n    #    if i * i == n:\n    #        return True\n    #    if i * i > n:\n    #        return False\n    #return True\n    #i = 1\n    #while(n / i!= 0):\n    #    if(n % i == 0):\n    #        return False\n    #    i = i + 1\n    #return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        n = -n\n    left, right = 1, n\n    while left <= right :\n        mid = left + (right - left) // 2\n        if mid * mid == n :\n            return True\n        elif mid * mid < n :\n            left = mid + 1\n        else :\n            right = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    x = math.sqrt(n)\n    # Check for integers only\n    if int(x + 0.5) ** 2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Checking lower and upper range\n    lower = 1\n    upper = int(sqrt(n)) + 1\n    while lower <= upper:\n        # If found a perfect sqaure then return True\n        if lower * lower == n:\n            return True\n        if (lower + 1) * (lower + 1) > n:\n            break\n        lower += 1\n    # If we reached here then it means no sqaure was found\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root*root == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Python program to find whether the given number is a perfect square or not\n    # A perfect square is a number that is the square of an integer i.e. 12 is a perfect square because it is 1,2,4,6,12\n    # For example 16 is a perfect square because it is 1,2,4,8,16\n    if (n > 1) :\n        for i in range(2, n//2):\n            if (n % i) == 0:\n                return False;\n    return True;\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    low, high = 1, n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid ** 2 == n:\n            return True\n        elif mid ** 2 < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Iterative Solution:\n    # if n <= 0:\n    #     return False\n    # x = math.sqrt(n)\n    # x = math.floor(x)\n    # return x * x == n\n    \n    # Recursive Solution:\n    # if n <= 0:\n    #     return False\n    # if n <= 3:\n    #     return n == 1\n    # return check_square_number(n // 2)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    print(list(filter(lambda x: x % 2 == 0, arr)))\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return True if sum(arr) % 2 == 0 else False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    if prod % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result *= arr[i]\n    return result % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr[0]!= 0:\n        if arr[0]!= 1:\n            return False\n        return True\n    return False\nprint(is_product_even([1,2,3]))\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0:\n        return False\n    if len(arr)==1:\n        return True\n    arr=sorted(arr)\n    return arr[0]*arr[-1]%2==0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    try:\n        total = 1\n        for i in arr:\n            total *= i\n        if total % 2 == 0:\n            return True\n        else:\n            return False\n    except Exception as e:\n        print('Exception Raised: {}'.format(e))\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #Solution 1:\n    if arr[0] == 0:\n        return False\n    for x in range(1, len(arr)):\n        if arr[x] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # raise NotImplementedError()\n    if not lists:\n        return lists\n    # print(lists)\n    length = len(lists)\n    if length == 1:\n        return lists\n    lowest_index = 0\n    for i in range(length):\n        if lists[i] < lists[lowest_index]:\n            lowest_index = i\n    new_lists = lists[:lowest_index] + [[lists[lowest_index]] + lists[lowest_index + 1:]]\n    # print(new_lists)\n    return max_sum_list(new_lists)\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            lists[i][j] = lists[i][j]*lists[i][j]\n    return max(lists)\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # make an empty dictionary of lists\n    output_d = {}\n    for _ in range(len(lists)):\n        output_d[_] = []\n    \n    for i in range(len(lists)):\n        if i == 0:\n            output_d[i] = lists[i]\n        else:\n            output_d[i] = lists[i]\n            for j in range(len(output_d[i])):\n                output_d[i].append(max(output_d[i][j], output_d[i-1][j]+lists[i][j]))\n    \n    return max(output_d.values(), key=max)\n    \ndef max_sum_list_reduce(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # make an empty dictionary of lists\n    output_d = {}\n    for _ in range(len(lists)):\n        output_d[_] = []\n    \n    def max_sum(lists, _max, _sum):\n        if _sum > _max:\n            return _sum\n        elif _sum == _max:\n            return _sum\n        else:\n            for i in range(len(lists)):\n                if i == 0:\n                    output_d[i] = lists[i]\n                else:\n                    output_d[i] = lists[i]\n                    for j in range(len(output_d[i])):\n                        output_d[i].append(max(output_d[i][j], output_d[i-1][j]+lists[i][j]))\n            \n            return max(output_d.values(), key=max)\n        \n    max_sum(lists, 0, 0)\n    \n    return max(output_d.values(), key=max)\n    \ndef longest_word(str_list):\n    '''\n    Write a function that returns the longest word in a list of words.\n    '''\n    \n    max_len = 0\n    cur_max = \"\"\n    for word in str_list:\n        if len(word) >= max_len:\n            max_len = len(word)\n            cur_max = word\n            \n    return cur_max\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        if lists[i] == None:\n            lists[i] = []\n        for j in range(len(lists[i])):\n            if max_sum < lists[i][j]:\n                max_sum = lists[i][j]\n    return max_sum"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_val = 0\n    max_idx = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_val:\n                max_val = lists[i][j]\n                max_idx = j\n    return max_val, max_idx\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_summ = -99999999999999999999999999999999999999999999999999\n    new_list = []\n    for i in lists:\n        new_list.append(list(i))\n    max_summ = max(max_summ,max_sum_matrix(new_list))\n    return max_summ\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in range(len(lists)):\n        max_list.append(lists[i][0])\n    for i in range(1,len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                max_list[i] = max_list[i] + lists[i][j]\n            elif max_list[i-1] > lists[i][j]:\n                max_list[i] = max_list[i-1] + lists[i][j]\n            else:\n                max_list[i] = lists[i][j]\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    ans = []\n    for i in range(len(lists)):\n        tmp = []\n        for j in range(len(lists[0])):\n            tmp.append(0)\n        ans.append(tmp)\n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            if lists[i][j] > ans[i][j]:\n                ans[i][j] = lists[i][j]\n    return ans\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n    else:\n        return_list = []\n        for index in range(0, len(lists), 2):\n            if lists[index][0] + lists[index+1][0] > lists[index][0] + lists[index+1][1]:\n                return_list.append([lists[index][0] + lists[index+1][0], lists[index][1] + lists[index+1][1]])\n            else:\n                return_list.append([lists[index][0] + lists[index+1][1], lists[index][1] + lists[index+1][0]])\n        return max_sum_list(return_list)"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    max_count = 1\n    count = 1\n    curr_char = test_str[0]\n    for i in range(1,len(test_str)):\n        if test_str[i] == curr_char:\n            count += 1\n        else:\n            curr_char = test_str[i]\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    prev_count = 1\n    res = ''\n    prev_str = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i] >= prev_str:\n            count = count + 1\n        else:\n            res = res + prev_str + str(count)\n            prev_count = 1\n            prev_str = test_str[i]\n    res = res + prev_str + str(prev_count)\n    return max(res, len(res))\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    res = []\n    if len(test_str) == 1:\n        return 1\n    else:\n        res.append(1)\n        for i in range(1,len(test_str)):\n            if test_str[i] == test_str[i-1]:\n                res.append(1)\n            else:\n                res.append(max(1,res[-1]))\n        return max(res)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    if test_str.isupper():\n        return 1\n    else:\n        return 1 + max_run_uppercase(test_str[1:])\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i].upper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            count += 1\n        else:\n            count = 0\n        if count > max:\n            max = count\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run += 1\n        else:\n            if max_run > result:\n                result = max_run\n            max_run = 0\n    \n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    import re\n    \n    pattern = re.compile(r'[A-Z]+')\n    max_run = 0\n    for i in range(len(test_str)):\n        for j in range(i, len(test_str)):\n            if pattern.match(test_str[j]) is not None:\n                max_run = max(max_run, j-i+1)\n                break\n            else:\n                continue\n    return max_run\n    \ndef first_non_repeating_character(test_str):\n    '''\n    Write a function to find the first non-repeating character in the given string.\n    '''\n    import re\n    \n    pattern = re.compile(r'[a-z]+')\n    for i in range(len(test_str)):\n        if pattern.match(test_str[i]) is not None:\n            pass\n        else:\n            return test_str[i]\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            if max_run == 0:\n                max_run = 1\n            else:\n                max_run += 1\n        else:\n            max_run = max(max_run, 1)\n        i += 1\n    return max_run\n    \nmax_run_uppercase('A') # 1\nmax_run_uppercase('AA') # 2\nmax_run_uppercase('AAB') # 3\nmax_run_uppercase('AAAB') # 3\nmax_run_uppercase('AAABBB') # 4\nmax_run_uppercase('AAABBB') # 4\nmax_run_uppercase('AAA') # 1\nmax_run_uppercase('ZZZ') # 0\nmax_run_uppercase('') # 0\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            return nums[i]\n    print(\"First odd number is not found.\")\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_number_pos = 0\n    for pos in range(0, len(nums)):\n        if nums[pos]%2!= 0:\n            odd_number_pos = pos\n            break\n    return odd_number_pos\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # for loop approach\n    for num in nums:\n        if num%2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # for i in nums:\n    #     if i % 2!= 0:\n    #         return i\n    # return 0\n    return (nums[0] + 1) if nums[0] % 2 == 1 else nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    print(nums[0]) if not len(nums) else first_odd(nums[1:]) if nums[0] % 2 else first_odd(nums[1:])\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for num in nums:\n        if num % 2 == 1:\n            return num\n    \n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            return num\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][-1] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)==len(K) and sorted(test_tup)==sorted(K):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 2:\n        if test_tup[0] == test_tup[1]:\n            if test_tup[0] == K:\n                return True\n            else:\n                return False\n    if len(test_tup) == 3:\n        if test_tup[0] == test_tup[1]:\n            if test_tup[0] == K:\n                return True\n            else:\n                return False\n        elif test_tup[0] == test_tup[2]:\n            if test_tup[0] == K:\n                return True\n            else:\n                return False\n        elif test_tup[1] == test_tup[2]:\n            if test_tup[1] == K:\n                return True\n            else:\n                return False\n    if len(test_tup) == 4:\n        if test_tup[0] == test_tup[1]:\n            if test_tup[0] == K:\n                return True\n            else:\n                return False\n        elif test_tup[0] == test_tup[2]:\n            if test_tup[0] == K:\n                return True\n            else:\n                return False\n        elif test_tup[0] == test_tup[3]:\n            if test_tup[0] == K:\n                return True\n            else:\n                return False\n        elif test_tup[1] == test_tup[2]:\n            if test_tup[1] == K:\n                return True\n            else:\n                return False\n        elif test_tup[1] == test_tup[3]:\n            if test_tup[1] == K:\n                return True\n            else:\n                return False\n        elif test_tup[2] == test_tup[3]:\n            if test_tup[2] == K:\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #convert to set\n    set_test_tup = set(test_tup)\n    if (len(set_test_tup) == K):\n        print(f'{test_tup} contains {K}')\n        return True\n    else:\n        print(f'{test_tup} does not contain {K}')\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #if (sum([x-y for (x,y) in zip(test_tup, K)]) == 0):\n        #return True\n    #else:\n        #return False\n    \n    return sum([x-y for (x,y) in zip(test_tup, K)]) == 0\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = sorted(test_tup, key=lambda x: x[0])\n    for i in range(len(test_tup)-1):\n        if test_tup[i][0] == test_tup[i+1][0]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] < K <= test_tup[1]\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[1] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if test_tup[0] == K or test_tup[1] == K else False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    flag = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if(len(test_tup1) > len(test_tup2)):\n        return False\n    for i in range(len(test_tup1)):\n        if(test_tup1[i] < test_tup2[i]):\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    i = 0\n    for ele in test_tup2:\n        if ele < test_tup1[i]:\n            print(f'{ele} is smaller than {test_tup1[i]}')\n        i += 1\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"No equal length\")\n        return\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"{} is bigger than {}\".format(test_tup1[i], test_tup2[i]))\n            return\n        else:\n            print(\"{} is smaller than {}\".format(test_tup1[i], test_tup2[i]))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = []\n    for x, y in zip(test_tup1, test_tup2):\n        if x < y:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return True\n    elif len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] <= test_tup2[i]:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            count += 1\n    return count\n"
    }
]